{
    "name": "https://polaris.shopify.com",
    "url": "https://https://polaris.shopify.com",
    "pages": [
        {
            "url": "https://polaris.shopify.com",
            "title": "Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Shape the merchant experience for Shopify’s core product, the admin. Fundamental design guidance for creating quality admin experiences Reusable elements and styles, packaged through code, for building admin interfaces Coded names that represent design decisions for color, spacing, typography, and more Over 400 carefully designed icons focused on commerce and entrepreneurship Learn how to upgrade to Polaris' new design language. Autocompletion for Polaris tokens, right inside your favorite code editor"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/coming-soon",
            "title": "Embracing the future with the View Transitions API — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The View Transitions API is an experimental browser API supported in Google Chrome. It streamlines the visual transitions between different pages or elements using a combination of CSS pseudo elements, JavaScript, and screenshots of the old and new DOM state. By reducing the need for complex custom JavaScript and CSS, this API provides a new opportunity to elevate the Shopify admin experience. For merchants, the impacts of the View Transitions API will be experienced through:"
                },
                {
                    "type": "list",
                    "items": [
                        "Perceived performance:View transitions used to animate navigation or state changes in conjunction with prefetching, lazy loading, and caching will make the Shopify admin feel faster and more responsive.",
                        "Enhanced accessibility:Built in features for managing focus and other accessibility concerns during a view transition will make taking action or changing contexts a better experience for all merchants.",
                        "Reduced cognitive load:Page transitions between list and detail views will make clearer connections between the levels of detail in commerce objects like products."
                    ]
                },
                {
                    "type": "p",
                    "text": "For admin builders, systemizing the View Transitions API with shared patterns will support:"
                },
                {
                    "type": "list",
                    "items": [
                        "Streamlined development:Systemized ways to use and share transitions will make it easier for admin builders to create and maintain high quality animations.",
                        "Domain specific solutions:The flexibility of customizing view transitions using their pseudo elements opens up possibilities for systemizing crafted, engaging ways to introduce and reinforce important commerce concepts shared across the Shopify admin that will make it a more enjoyable tool for merchants to use."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/coming-soon/view-transitions",
            "title": "Embracing the future with the View Transitions API — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The View Transitions API is an experimental browser API supported in Google Chrome. It streamlines the visual transitions between different pages or elements using a combination of CSS pseudo elements, JavaScript, and screenshots of the old and new DOM state. By reducing the need for complex custom JavaScript and CSS, this API provides a new opportunity to elevate the Shopify admin experience. For merchants, the impacts of the View Transitions API will be experienced through:"
                },
                {
                    "type": "list",
                    "items": [
                        "Perceived performance:View transitions used to animate navigation or state changes in conjunction with prefetching, lazy loading, and caching will make the Shopify admin feel faster and more responsive.",
                        "Enhanced accessibility:Built in features for managing focus and other accessibility concerns during a view transition will make taking action or changing contexts a better experience for all merchants.",
                        "Reduced cognitive load:Page transitions between list and detail views will make clearer connections between the levels of detail in commerce objects like products."
                    ]
                },
                {
                    "type": "p",
                    "text": "For admin builders, systemizing the View Transitions API with shared patterns will support:"
                },
                {
                    "type": "list",
                    "items": [
                        "Streamlined development:Systemized ways to use and share transitions will make it easier for admin builders to create and maintain high quality animations.",
                        "Domain specific solutions:The flexibility of customizing view transitions using their pseudo elements opens up possibilities for systemizing crafted, engaging ways to introduce and reinforce important commerce concepts shared across the Shopify admin that will make it a more enjoyable tool for merchants to use."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components",
            "title": "Components — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Components are the reusable building blocks for creating Shopify admin experiences."
                },
                {
                    "type": "list",
                    "items": [
                        "Account connectionUsed for connecting or disconnecting a store to various accounts, like Facebook for the sales channel.",
                        "ButtonUsed primarily for actions like 'Add', 'Close', 'Cancel', or 'Save'. Plain buttons are used for less important actions.",
                        "Button groupDisplays multiple related actions stacked or in a horizontal row for arrangement and spacing.",
                        "Page actionsAllows merchants to take key actions at the bottom of specific pages in the interface."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "BleedApplies negative margin to a layout, extending it to the edge of the screen on small screens.",
                        "Block stackUse to display children vertically and horizontally with full width by default. Based on CSS Flexbox.",
                        "BoxBox is the most primitive layout component. It’s a way to access Polaris design tokens.",
                        "Callout cardCallout cards are used to encourage merchants to take an action related to a new feature or opportunity. They are most commonly displayed in the sales channels section of Shopify.",
                        "CardUsed to group similar concepts and tasks together for easier scanning and reading.",
                        "DividerUse to separate or group content.",
                        "Empty stateEmpty states are used when a list, table, or chart has no items or data to show. This is an opportunity to provide explanation or guidance to help merchants progress. The empty state component is intended for use when a full page in the admin is empty, and not for individual elements or areas in the interface.",
                        "Form layoutManages the layout of all forms and fields within it. Used for the layout of new forms and managing the layout of all forms.",
                        "GridCreate complex layouts based on CSS Grid.",
                        "Inline gridUse to lay out children horizontally with equal gap between columns. Based on CSS Grid.",
                        "Inline stackUse to display children horizontally in a row. Based on CSS Flexbox.",
                        "LayoutA structural component used to group other components. Creates consistent spacing and helps layout stack and scale responsively.",
                        "Media cardProvides a container for introductory or highlight information. Often used in a grid to present related content.",
                        "PageUsed to build the layout of a page in the Shopify admin. A flexible container for composing pages consistently."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "AutocompleteThe autocomplete component is an input field that provides selectable suggestions as a merchant types into it. It allows merchants to quickly search through and select from large collections of options. It's a convenience wrapper around the Combobox and Listbox components with minor UI differences.",
                        "CheckboxCheckboxes are most commonly used to give merchants a way to make a range of selections (zero, one, or multiple). They may also be used as a way to have merchants indicate they agree to specific terms and services.",
                        "Choice listA choice list lets you create a list of grouped radio buttons or checkboxes. Use this component if you need to group together a related list of interactive choices.",
                        "Color pickerAllows merchants to choose a color visually, or by entering a hex value.",
                        "ComboboxCombobox is an accessible autocomplete input that enables merchants to filter a list of options and select one or more values.",
                        "Date pickerDate pickers let merchants choose dates from a visual calendar that’s consistently applied wherever dates need to be selected across Shopify.",
                        "Drop zoneThe drop zone component lets users upload files by dragging and dropping the files into an area on a page, or activating a button.",
                        "FiltersA composite component that filters the items of a list or table.",
                        "FormA wrapper component that handles the submission of forms.",
                        "Index filtersUse index filters to allow merchants to filter, search, and sort their index table data and create unique saved views from the results.",
                        "Inline errorInline errors are brief, in-context messages that tell merchants something went wrong with a single or group of inputs in a form. Use inline errors to help merchants understand why a form input may not be valid and how to fix it.",
                        "Radio buttonUse radio buttons to present each item in a list of options where merchants must make a single selection.",
                        "Range sliderA range slider is an input field that merchants can use to select a numeric value within a given range (minimum and maximum values).",
                        "SelectSelect lets merchants choose one option from an options menu. Consider select when you have 4 or more options, to avoid cluttering the interface.",
                        "TagTags represent a set of interactive, merchant-supplied keywords that help label, organize, and categorize objects. Tags can be added or removed from an object by merchants.",
                        "Text fieldA text field is an input field that merchants can type into. It has a range of options and supports several text formats including numbers."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "AvatarUsed to show a thumbnail representation of an individual or business in the interface.",
                        "IconUsed to visually communicate core parts of the product and available actions, acting as wayfinding tools.",
                        "Keyboard keyUsed to educate merchants about keyboard shortcuts.",
                        "ThumbnailUsed as a visual anchor and identifier for an object, along with text to provide context.",
                        "Video thumbnailA clickable placeholder image that opens a video player within a modal or full screen when clicked."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "BadgeUsed to inform merchants of the tone of an object or an action taken.",
                        "BannerInforms merchants about important changes or persistent conditions in a prominent way.",
                        "Exception listHelps merchants notice important, standout information that adds extra context to a task.",
                        "Progress barUsed to visually represent the completion of a task or operation.",
                        "Skeleton body textProvides a low fidelity representation of content before it appears, improving perceived load times.",
                        "Skeleton display textProvides a low fidelity representation of content before it appears, improving perceived load times.",
                        "Skeleton pageUsed with other skeleton loading components to provide a low fidelity representation of the UI before content appears.",
                        "Skeleton tabsProvides a low fidelity representation of content before it appears, improving perceived load times.",
                        "Skeleton thumbnailProvides a low fidelity representation of an image before it appears, improving perceived load times.",
                        "SpinnerUsed to notify merchants that their action is being processed. Used for content that can’t be represented with skeleton loading components."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "TextTypography helps establish hierarchy and communicate important content by creating clear visual patterns."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Data tableUsed to organize and display all information from a data set. Aimed to be as simple as possible for merchants.",
                        "Index tableAn index table displays a collection of objects of the same type, like orders or products. The main job of an index table is to help merchants get an at-a-glance of the objects to perform actions or navigate to a full-page representation of it."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Action listAction lists render a list of actions or selectable options. This component is usually placed inside a popover container to create a dropdown menu or to let merchants select from a list of options.",
                        "Description listUsed to present pairs of related information, like terms and definitions, or names and values, in a list format.",
                        "ListLists display a set of related text-only content. Each list item begins with a bullet or a number.",
                        "ListboxA Listbox is a vertical list of interactive options, with room for icons, descriptions, and other elements.",
                        "Option listThe option list component lets you create a list of grouped items that merchants can pick from. This can include single selection or multiple selection of options. Option list usually appears in a popover, and sometimes in a modal or a sidebar. Option lists are styled differently than choice lists and should not be used within a form, but as a standalone menu.",
                        "Resource itemResource items represent specific objects within a collection, such as products or orders. They provide contextual information on the resource type and link to the object’s detail page.",
                        "Resource listA resource list displays a collection of objects of the same type, like products or customers. The main job of a resource list is to help merchants find an object and navigate to a full-page representation of it."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Footer helpFooter help is used to refer merchants to more information related to the product or feature they’re using.",
                        "Fullscreen barThe Fullscreen bar is a header component that should be presented at the top of an app when it is in fullscreen mode. This is designed to ensure a uniform placement for a button to exit that mode. The Fullscreen bar can be customized by adding children.",
                        "LinkLinks take users to another place, and usually appear within or directly following a sentence.",
                        "PaginationUse pagination to let merchants move through an ordered collection of items that has been split into pages. On the web, pagination uses buttons to move back and forth between pages. On iOS and Android, pagination uses infinite scrolling.",
                        "TabsUsed to alternate among related views within the same context."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "PopoverSmall overlays that open on demand and close when the merchant interacts with any other part of Shopify. Used to surface secondary information or actions.",
                        "TooltipTooltips are floating labels that briefly explain the function of a user interface element. They can be triggered when merchants hover, focus, tap, or click."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "App providerApp provider is a required component that enables sharing global settings throughout the hierarchy of your application.",
                        "CollapsibleHides content and allows merchants to expand it. Used to hide optional settings, information, and actions.",
                        "ScrollableUsed in components with too much content for the available vertical space. Embeds long-form content in components like modals and popovers."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "CaptionDeprecatedCaption text is smaller than the recommended size for general reading. Used in graphs, timestamps, or as secondary text.",
                        "Contextual save barDeprecatedInforms merchants of their options once they have made changes to a form on the page or while creating a new object.",
                        "Display textDeprecatedDisplay styles make a bold visual statement. Used for visual storytelling, marketing content, or capturing attention.",
                        "FrameDeprecatedCreates the structure of the Shopify admin. All of the main sections of the admin are nested in the frame.",
                        "HeadingDeprecatedUsed as the titles of each major section of a page in the interface, like in card components.",
                        "Legacy cardDeprecatedLegacy version of the Card component. Used to group similar concepts and tasks together for easier scanning and reading.",
                        "Legacy filtersDeprecatedLegacy version of the Filters component. Used to filter the items of a list or table.",
                        "Legacy stackDeprecatedLegacy version of the Stack component. Used for layout of a horizontal row of components or vertical centering.",
                        "Legacy tabsDeprecatedUsed to alternate among related views within the same context.",
                        "LoadingDeprecatedUsed to indicate to merchants that a page is loading or an upload is processing.",
                        "ModalDeprecatedUsed to interrupt merchants with urgent information, details, or actions.",
                        "NavigationDeprecatedThe navigation component is used to display the primary navigation in the sidebar of the frame of an application. Navigation includes a list of links that merchants use to move between sections of the application.",
                        "Setting toggleDeprecatedUsed to control a feature or option that can be turned on or off.",
                        "SheetDeprecatedA large container providing actions and information contextual to the page without interrupting flow like a modal.",
                        "SubheadingDeprecatedUsed for the title of any sub-sections in top-level page sections.",
                        "Text containerDeprecatedUsed to wrap text elements like paragraphs, headings, and lists for vertical spacing.",
                        "Text styleDeprecatedEnhances text with additional visual meaning, like using subdued text to de-emphasize it.",
                        "ToastDeprecatedA non-disruptive message that provides quick feedback on the outcome of an action.",
                        "Top barDeprecatedAppears at the top of the page and is used to brand and navigate major applications areas.",
                        "Visually hiddenDeprecatedUsed when an element needs to be available to assistive technology but otherwise hidden."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/account-connection",
            "title": "Account connection — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The account connection component is used so merchants can connect or disconnect their store to various accounts. For example, if merchants want to use the Facebook sales channel, they need to connect their Facebook account to their Shopify store. Use to let merchants connect or disconnect their store to their third-party accounts, like Facebook."
                },
                {
                    "type": "code",
                    "code": "import{Link,AccountConnection}from'@shopify/polaris';import{useState,useCallback}from'react';functionAccountConnectionExample(){const[connected,setConnected]=useState(false);constaccountName=connected?'Jane Appleseed':'';consthandleAction=useCallback(()=>{setConnected((connected)=>!connected);},[]);constbuttonText=connected?'Disconnect':'Connect';constdetails=connected?'Account connected':'No account connected';constterms=connected?null:(<p>Byclicking<strong>Connect</strong>,you agree to acceptSampleApp’s{' '}<Linkurl=\"Example App\">terms and conditions</Link>.You’llpay acommission rateof15%on sales made throughSampleApp.</p>);return(<AccountConnectionaccountName={accountName}connected={connected}title=\"Example App\"action={{content:buttonText,onAction:handleAction,}}details={details}termsOfService={terms}/>);}"
                },
                {
                    "type": "p",
                    "text": "Content to display as title. Content to display as additional details. Content to display as terms of service. The name of the service. URL for the user’s avatar image. Set if the account is connected. Action for account connection. The account component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be placed at the top of the Account page for the relevant sales channel",
                        "Identify the name of the platform or service merchants can connect to",
                        "Show whether the account is connected or disconnected so that merchants can easily connect or disconnect an account",
                        "Include a link to the relevant sales channel or platform terms and conditions, including information about any charges or fees that merchants may incur by using the channel or platform",
                        "Link to terms and conditions, which should open up on the sales channel developer’s website in a new browser window"
                    ]
                },
                {
                    "type": "p",
                    "text": "The account connection title should be the name of the platform or service that merchants can connect to, followed by the word “account”. Write account connection titles in sentence case (capitalize the first word and proper nouns only)."
                },
                {
                    "type": "list",
                    "items": [
                        "Facebook account",
                        "Mailchimp account",
                        "Instagram account"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Facebook account",
                        "Instagram account"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Connect your Account",
                        "Instagram Account"
                    ]
                },
                {
                    "type": "p",
                    "text": "Clearly link to your terms and conditions and let merchants know about any additional costs of your service."
                },
                {
                    "type": "list",
                    "items": [
                        "By clicking Connect, you agree to accept Sample’s terms and conditions.",
                        "You’ll pay a commission rate of 15% on sales made through Sample."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn about terms, conditions, and payment details. Always use the verb Connect in the button of the account connection component. When merchants click or tap “Connect” it should open up your platform or service’s authorization page in a new browser window. Connect Connect to app See accessibility guidance for thesetting toggle componentto turn connections on and off."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/action-list",
            "title": "Action list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Action lists render a list of actions or selectable options. This component is usually placed inside apopover containerto create a dropdown menu or to let merchants select from a list of options. Use for the least important actions so merchants aren’t distracted by secondary tasks. Can also be used for a set of actions that won’t fit in the available screen space."
                },
                {
                    "type": "code",
                    "code": "import{Button,Popover,ActionList}from'@shopify/polaris';import{useState,useCallback}from'react';functionActionListInPopoverExample(){const[active,setActive]=useState(true);consttoggleActive=useCallback(()=>setActive((active)=>!active),[]);consthandleImportedAction=useCallback(()=>console.log('Imported action'),[],);consthandleExportedAction=useCallback(()=>console.log('Exported action'),[],);constactivator=(<ButtononClick={toggleActive}disclosure>Moreactions</Button>);return(<div style={{height:'250px'}}><Popoveractive={active}activator={activator}autofocusTarget=\"first-node\"onClose={toggleActive}><ActionListactionRole=\"menuitem\"items={[{content:'Import file',onAction:handleImportedAction,},{content:'Export file',onAction:handleExportedAction,},]}/></Popover></div>);}"
                },
                {
                    "type": "p",
                    "text": "Collection of actions for list. Collection of sectioned action items. Defines a specific role attribute for each action in the list. Allow users to filter items in the list. Will only show if more than 8 items in the list. The item content of every items must be a string for this to work. Filter label used as a placeholder in the search field. Callback when any item is clicked or keypressed. Actions lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for secondary or less important information and actions since they’re hidden until merchants expose them by opening a popover",
                        "Contain actions that are related to each other"
                    ]
                },
                {
                    "type": "p",
                    "text": "Each item in an action list should be clear and predictable. Merchants should be able to anticipate what will happen when they click on an action item. Buy shipping label Buy Each item in an action list should always lead with a strong verb that encourages action. To provide enough context use the {verb}+{noun} format unless the action is clear with a single verb."
                },
                {
                    "type": "list",
                    "items": [
                        "Rename",
                        "Edit HTML"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "File name changes",
                        "HTML editing options"
                    ]
                },
                {
                    "type": "p",
                    "text": "Each item in an action list should be scannable avoiding unnecessary words and articles such as the, an, or a."
                },
                {
                    "type": "list",
                    "items": [
                        "Add menu item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add a menu item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To combine more than one button in a single layout,use the button group component",
                        "To display a list of related content,use the list component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Items in an action list are organized as list items (<li>) in an unordered list (<ul>) and are conveyed as a group of related elements to assistive technology users. Each item is implemented as abutton."
                },
                {
                    "type": "list",
                    "items": [
                        "Give the action list items keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "When action list items have a role ofmenuitem, navigate through the list withdown arrow(up arrowto move backwards)",
                        "Activate buttons with theenter/returnkey or thespacekey"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Each item is clearly discernible in high contrast mode",
                        "Each item that is focused and hovered is clearly discernible in high contrast mode"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/actions",
            "title": "Actions — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Perform tasks or take actions within the Shopify admin."
                },
                {
                    "type": "list",
                    "items": [
                        "Account connectionUsed for connecting or disconnecting a store to various accounts, like Facebook for the sales channel.",
                        "ButtonUsed primarily for actions like 'Add', 'Close', 'Cancel', or 'Save'. Plain buttons are used for less important actions.",
                        "Button groupDisplays multiple related actions stacked or in a horizontal row for arrangement and spacing.",
                        "Page actionsAllows merchants to take key actions at the bottom of specific pages in the interface."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/actions/account-connection",
            "title": "Account connection — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The account connection component is used so merchants can connect or disconnect their store to various accounts. For example, if merchants want to use the Facebook sales channel, they need to connect their Facebook account to their Shopify store. Use to let merchants connect or disconnect their store to their third-party accounts, like Facebook."
                },
                {
                    "type": "code",
                    "code": "import{Link,AccountConnection}from'@shopify/polaris';import{useState,useCallback}from'react';functionAccountConnectionExample(){const[connected,setConnected]=useState(false);constaccountName=connected?'Jane Appleseed':'';consthandleAction=useCallback(()=>{setConnected((connected)=>!connected);},[]);constbuttonText=connected?'Disconnect':'Connect';constdetails=connected?'Account connected':'No account connected';constterms=connected?null:(<p>Byclicking<strong>Connect</strong>,you agree to acceptSampleApp’s{' '}<Linkurl=\"Example App\">terms and conditions</Link>.You’llpay acommission rateof15%on sales made throughSampleApp.</p>);return(<AccountConnectionaccountName={accountName}connected={connected}title=\"Example App\"action={{content:buttonText,onAction:handleAction,}}details={details}termsOfService={terms}/>);}"
                },
                {
                    "type": "p",
                    "text": "Content to display as title. Content to display as additional details. Content to display as terms of service. The name of the service. URL for the user’s avatar image. Set if the account is connected. Action for account connection. The account component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be placed at the top of the Account page for the relevant sales channel",
                        "Identify the name of the platform or service merchants can connect to",
                        "Show whether the account is connected or disconnected so that merchants can easily connect or disconnect an account",
                        "Include a link to the relevant sales channel or platform terms and conditions, including information about any charges or fees that merchants may incur by using the channel or platform",
                        "Link to terms and conditions, which should open up on the sales channel developer’s website in a new browser window"
                    ]
                },
                {
                    "type": "p",
                    "text": "The account connection title should be the name of the platform or service that merchants can connect to, followed by the word “account”. Write account connection titles in sentence case (capitalize the first word and proper nouns only)."
                },
                {
                    "type": "list",
                    "items": [
                        "Facebook account",
                        "Mailchimp account",
                        "Instagram account"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Facebook account",
                        "Instagram account"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Connect your Account",
                        "Instagram Account"
                    ]
                },
                {
                    "type": "p",
                    "text": "Clearly link to your terms and conditions and let merchants know about any additional costs of your service."
                },
                {
                    "type": "list",
                    "items": [
                        "By clicking Connect, you agree to accept Sample’s terms and conditions.",
                        "You’ll pay a commission rate of 15% on sales made through Sample."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn about terms, conditions, and payment details. Always use the verb Connect in the button of the account connection component. When merchants click or tap “Connect” it should open up your platform or service’s authorization page in a new browser window. Connect Connect to app See accessibility guidance for thesetting toggle componentto turn connections on and off."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/actions/button",
            "title": "Button — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”. Used most in the interface. Only use another style if a button requires more or less visual weight."
                },
                {
                    "type": "code",
                    "code": "import{Button}from'@shopify/polaris';importReactfrom'react';functionButtonExample(){return<Button>Addproduct</Button>;}"
                },
                {
                    "type": "p",
                    "text": "The content to display inside the button. Changes the size of the button, giving it more or less padding. Defaults to'medium'. Changes the inner text alignment of the button. Allows the button to grow to the width of its container. Displays the button with a disclosure icon. Defaults to `down` when set to true. Removes underline from button text (including on interaction). Icon to display to the left of the button content. Indicates whether or not the button is the primary navigation link when rendered inside of an `IndexTable.Row`. Sets the color treatment of the Button. Changes the visual appearance of the Button. A unique identifier for the button. A destination to link to, rendered in the href attribute of a link. Forces url to open in a new tab. Where to display the url. Tells the browser to download the url instead of opening it. Provides a hint for the downloaded filename if it is a string value. Allows the button to submit a form. Disables the button, disallowing merchant interaction. Replaces button text with a spinner while a background action is being performed. Sets the button in a pressed state. Visually hidden text for screen readers. A valid WAI-ARIA role to define the semantic value of this element. Id of the element the button controls. Tells screen reader the controlled element is expanded. Indicates the ID of the element that describes the button. Indicates the current checked state of the button when acting as a toggle or switch. Callback when clicked. Callback when button becomes focused. Callback when focus leaves button. Callback when a keypress event is registered on the button. Callback when a keyup event is registered on the button. Callback when a keydown event is registered on the button. Callback when mouse enter. Callback when element is touched. Callback when pointerdown event is being triggered. Buttons should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly and accurately labeled.",
                        "Lead with a strong, actionable verb.",
                        "Use established button colors appropriately. For example, only use a red button for an action that’s difficult or impossible to undo.",
                        "Prioritize the most important actions. Too many calls to action can cause confusion and make merchants unsure of what to do next.",
                        "Be positioned in consistent locations in the interface."
                    ]
                },
                {
                    "type": "p",
                    "text": "Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”. Links are used primarily for navigation, and usually appear within or directly following a sentence. The HTML that renders for theButtonandLinkcomponents carries meaning. Using these components intentionally and consistently results in:"
                },
                {
                    "type": "list",
                    "items": [
                        "a more inclusive experience for assistive technology users",
                        "a more cohesive visual experience for sighted users",
                        "products that are easier to maintain at scale"
                    ]
                },
                {
                    "type": "p",
                    "text": "Buttons should follow the content guidelines forbuttons."
                },
                {
                    "type": "list",
                    "items": [
                        "To combine or lay out multiple buttons,use the button group component",
                        "For navigational actions that appear within or directly following a sentence, use thelink component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Buttons can have different states that are visually and programmatically conveyed to merchants."
                },
                {
                    "type": "list",
                    "items": [
                        "Use theariaControlsprop to add anaria-controlsattribute to the button. Use the attribute to point to the uniqueidof the content that the button manages.",
                        "If a button expands or collapses adjacent content, then use theariaExpandedprop to add thearia-expandedattribute to the button. Set the value to convey the current expanded (true) or collapsed (false) state of the content.",
                        "Use thedisabledprop to set thedisabledstate of the button. This prevents merchants from being able to interact with the button, and conveys its inactive state to assistive technologies.",
                        "Use thepressedprop to add anaria-pressedattribute to the button."
                    ]
                },
                {
                    "type": "p",
                    "text": "Merchants generally expect buttons to submit data or take action, and for links to navigate. If navigation is required for the button component, use theurlprop. The control will output an anchor styled as a button, instead of a button in HTML, to help convey this difference. For more information on making accessible links, see thelink component. TheaccessibilityLabelprop adds anaria-labelattribute to the button, which can be accessed by assistive technologies like screen readers. Typically, this label text replaces the visible text on the button for merchants who use assistive technology. UseaccessibilityLabelfor a button if:"
                },
                {
                    "type": "list",
                    "items": [
                        "The button’s visible text doesn’t adequately convey the purpose of the button to non-visual merchants",
                        "The button has no text and relies on an icon alone to convey its purpose"
                    ]
                },
                {
                    "type": "p",
                    "text": "To help support merchants who use speech activation software as well as sighted screen reader users, make sure that thearia-labeltext includes any button text that’s visible. Mismatches between visible and programmatic labeling can cause confusion, and might prevent voice recognition commands from working. When possible, give the button visible text that clearly conveys its purpose without the use ofaccessibilityLabel. When no additional content is needed, duplicating the button text withaccessibilityLabelisn’t necessary."
                },
                {
                    "type": "code",
                    "code": "<Button>Edit shipping address</Button>"
                },
                {
                    "type": "code",
                    "code": "<Heading>Shipping address</Heading><ButtonaccessibilityLabel=\"Edit shipping address\">Edit</Button>"
                },
                {
                    "type": "code",
                    "code": "<ButtonaccessibilityLabel=\"Change your shipping address\">Edit</Button>"
                },
                {
                    "type": "code",
                    "code": "<ButtonaccessibilityLabel=\"Edit\">Edit</Button>"
                },
                {
                    "type": "p",
                    "text": "When you use the button component to create a link to an external resource:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use theexternalprop to make the link open in a new tab (or window, depending on the merchant’s browser settings)",
                        "Use theiconprop to add theexternalicon to the button",
                        "Use theaccessibilityLabelprop to include the warning about opening a new tab in the button text for non-visual screen reader users"
                    ]
                },
                {
                    "type": "p",
                    "text": "For more information on making accessible links, see thelink component."
                },
                {
                    "type": "code",
                    "code": "<ButtonaccessibilityLabel=\"Terms and conditions (opens a new window)\"icon={ExternalIcon}url=\"http://example.com\"external>Terms and conditions</Button>"
                },
                {
                    "type": "code",
                    "code": "<Buttonurl=\"http://example.com\"external>Terms and conditions</Button><Buttonurl=\"http://example.com\"external>Terms and conditions</Button>"
                },
                {
                    "type": "p",
                    "text": "Buttons use browser defaults for keyboard interactions."
                },
                {
                    "type": "list",
                    "items": [
                        "Give buttons keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "Activate buttons with theenter/returnkey or thespacekey"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use theonKeyDown,onKeyPress, andonKeyUpprops to create custom events for buttons. With these props, you can use buttons to create complex, custom interactions like drag-and-drop interfaces. Since these props introduce non-standard features to buttons, make sure to include accessible instructions so that merchants can understand how to use these features."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/actions/button-group",
            "title": "Button group — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Button group displays multiple related actions stacked or in a horizontal row to help with arrangement and spacing. Use when you have multiple buttons to space them out evenly."
                },
                {
                    "type": "code",
                    "code": "import{ButtonGroup,Button}from'@shopify/polaris';importReactfrom'react';functionButtonGroupDefaultExample(){return(<ButtonGroup><Button>Cancel</Button><Buttonvariant=\"primary\">Save</Button></ButtonGroup>);}"
                },
                {
                    "type": "p",
                    "text": "Determines the space between button group items. Styling variant for group. Buttons will stretch/shrink to occupy the full width. Remove top left and right border radius. Prevent buttons in button group from wrapping to next line. Button components. Button groups should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Only use buttons that follow thebest practices outlined in the button component",
                        "Group together calls to action that have a relationship",
                        "Be used with consideration that too many calls to action can cause merchants to be unsure of what to do next",
                        "Be thoughtful about how multiple buttons will look and work on small screens",
                        "Only be used in groups of up to six buttons if the buttons contain an icon with no text"
                    ]
                },
                {
                    "type": "p",
                    "text": "Button groups should follow thecontent guidelinesfor buttons."
                },
                {
                    "type": "list",
                    "items": [
                        "To learn how to use individual buttons,use the button component",
                        "To embed an action or navigation into a line of text,use the link component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/actions/page-actions",
            "title": "Page actions — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Page actions let merchants take key actions at the bottom of specific pages in the interface. This is important because sometimes the primary call to action is hard to access when merchants are at the bottom of a page. Used on a resource page (such as an individual order or product page) to let merchants take key actions at the bottom of the page. Usually, the primary action is Save and the secondary action is Delete."
                },
                {
                    "type": "code",
                    "code": "import{PageActions}from'@shopify/polaris';importReactfrom'react';functionPageExample(){return(<PageActionsprimaryAction={{content:'Save',}}secondaryActions={[{content:'Delete',destructive:true,},]}/>);}"
                },
                {
                    "type": "p",
                    "text": "The primary action for the page. The secondary actions for the page. Page actions should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Include a single primary action on the right. It should be the same as the primary action that shows in the title bar at the top of the page.",
                        "Include a maximum of two secondary actions, but doesn’t have to include any secondary actions."
                    ]
                },
                {
                    "type": "p",
                    "text": "Buttons should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create order",
                        "Buy shipping label"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "New order",
                        "Buy"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Activate Apple Pay",
                        "View shipping settings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Try Apple Pay",
                        "View your settings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Scannable: avoid unnecessary words and articles such as the, an, or a."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add menu item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add a menu item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To add actions to the top of a page, see thepage component’saction props",
                        "To create a call to action within the context of other page content, use thebutton component",
                        "To let merchants move through a collection of items that spans multiple pages, see thepagination component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/app-provider",
            "title": "App provider — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "App provider is a required component that enables sharing global settings throughout the hierarchy of your application. AppProvider works by default without any additional options passed to it."
                },
                {
                    "type": "code",
                    "code": "import{AppProvider,Page,LegacyCard,ResourceList,Avatar,Text,}from'@shopify/polaris';importReactfrom'react';functionAppProviderExample(){return(<AppProvideri18n={{Polaris:{ResourceList:{sortingLabel:'Sort by',defaultItemSingular:'item',defaultItemPlural:'items',showing:'Showing {itemsCount} {resource}',Item:{viewItem:'View details for {itemName}',},},Common:{checkbox:'checkbox',},},}}><Page><LegacyCard><ResourceListshowHeaderitems={[{id:'341',url:'#',name:'Mae Jemison',location:'Decatur, USA',},{id:'256',url:'#',name:'Ellen Ochoa',location:'Los Angeles, USA',},]}renderItem={(item)=>{const{id,url,name,location}=item;constmedia=<Avatarcustomer size=\"md\"name={name}/>;return(<ResourceList.Itemid={id}url={url}media={media}><Textvariant=\"bodyMd\"fontWeight=\"bold\"as=\"h3\">{name}</Text><div>{location}</div></ResourceList.Item>);}}/></LegacyCard></Page></AppProvider>);}"
                },
                {
                    "type": "p",
                    "text": "A locale object or array of locale objects that overrides default translations. If specifying an array then your primary language dictionary should come first, followed by your fallback language dictionaries. A custom component to use for all links used by Polaris components. For toggling features. Inner content of the application. The app provider component is required to use Polaris. Without it, the components in your application will not function correctly. You must wrap the root (the top) of your application in the app provider component. Translations are provided in the locales folder. When using Polaris, you are able to import translations from all languages supported by the core Shopify product and consume them through thei18nprop. If a project has only one locale, then you can pass the JSON content from the locale file intoAppProvider."
                },
                {
                    "type": "code",
                    "code": "import{AppProvider}from'@shopify/polaris';// en.json is English. Replace with fr.json for French, etcimporttranslationsfrom'@shopify/polaris/locales/en.json';functionApp(){return<AppProvideri18n={translations}>{/* App content */}</AppProvider>;}"
                },
                {
                    "type": "p",
                    "text": "If a project supports multiple locales, then load them dynamically using@shopify/react-i18n. This ensures that you load only the translations you need."
                },
                {
                    "type": "code",
                    "code": "import{AppProvider}from'@shopify/polaris';// en.json is English. Replace with fr.json for French, etcimporttranslationsfrom'@shopify/polaris/locales/en.json';import{useI18n}from'@shopify/react-i18n';functionApp(){const[i18n]=useI18n({id:'Polaris',fallback:translations,translations(locale){returnimport(/* webpackChunkName: \"Polaris-i18n\", webpackMode: \"lazy-once\" */`@shopify/polaris/locales/${locale}.json`).then((dictionary)=>dictionary&&dictionary.default);},});// i18n.translations is an array of translation dictionaries, where the first// dictionary is the desired language, and the second is the fallback.return(<AppProvideri18n={i18n.translations}>{/* App content */}</AppProvider>);}"
                },
                {
                    "type": "p",
                    "text": "By default Polaris renders<Link>elements (and action objects) as<a>tags. That works well for simple one-page demos. However for more complex multi-page applications that use a router such asreact-routeryou will want links to use the components provided by your router. If you don't then every link will be an<a>tag and thus trigger a whole page refresh instead of navigating client-side. ThelinkComponentprop allows you to customise how links behave within Polaris by allowing you to inject your router's own Link component. The following example demonstrates using react-router'sLinkcomponent."
                },
                {
                    "type": "code",
                    "code": "import{BrowserRouter,LinkasReactRouterLink}from'react-router-dom';functionApp(){return(<BrowserRouter><AppProviderlinkComponent={Link}>{/* App content including your <Route> components */}</AppProvider></BrowserRouter>);}constIS_EXTERNAL_LINK_REGEX=/^(?:[a-z][a-z\\d+.-]*:|\\/\\/)/;functionLink({children,url='',external,ref,...rest}){// react-router only supports links to pages it can handle itself. It does not// support arbirary links, so anything that is not a path-based link should// use a reglar old `a` tagif(external||IS_EXTERNAL_LINK_REGEX.test(url)){rest.target='_blank';rest.rel='noopener noreferrer';return(<ahref={url}{...rest}>{children}</a>);}return(<ReactRouterLinkto={url}{...rest}>{children}</ReactRouterLink>);}"
                },
                {
                    "type": "p",
                    "text": "You must include Polaris context in your tests when you use Polaris components. To make this easier for you, we’ve provided:"
                },
                {
                    "type": "list",
                    "items": [
                        "a PolarisTestProvider component to provide the Polaris contexts for you"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/autocomplete",
            "title": "Autocomplete — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The autocomplete component is an input field that provides selectable suggestions as a merchant types into it. It allows merchants to quickly search through and select from large collections of options. It's a convenience wrapper around theComboboxandListboxcomponents with minor UI differences. Use to help merchants complete text input quickly from a list of options."
                },
                {
                    "type": "code",
                    "code": "import{Autocomplete,Icon}from'@shopify/polaris';import{SearchIcon}from'@shopify/polaris-icons';import{useState,useCallback,useMemo}from'react';functionAutocompleteExample(){constdeselectedOptions=useMemo(()=>[{value:'rustic',label:'Rustic'},{value:'antique',label:'Antique'},{value:'vinyl',label:'Vinyl'},{value:'vintage',label:'Vintage'},{value:'refurbished',label:'Refurbished'},],[],);const[selectedOptions,setSelectedOptions]=useState<string[]>([]);const[inputValue,setInputValue]=useState('');const[options,setOptions]=useState(deselectedOptions);constupdateText=useCallback((value:string)=>{setInputValue(value);if(value===''){setOptions(deselectedOptions);return;}constfilterRegex=newRegExp(value,'i');constresultOptions=deselectedOptions.filter((option)=>option.label.match(filterRegex),);setOptions(resultOptions);},[deselectedOptions],);constupdateSelection=useCallback((selected:string[])=>{constselectedValue=selected.map((selectedItem)=>{constmatchedOption=options.find((option)=>{returnoption.value.match(selectedItem);});returnmatchedOption&&matchedOption.label;});setSelectedOptions(selected);setInputValue(selectedValue[0]||'');},[options],);consttextField=(<Autocomplete.TextFieldonChange={updateText}label=\"Tags\"value={inputValue}prefix={<Iconsource={SearchIcon}tone=\"base\"/>}placeholder=\"Search\"autoComplete=\"off\"/>);return(<div style={{height:'225px'}}><Autocompleteoptions={options}selected={selectedOptions}onSelect={updateSelection}textField={textField}/></div>);}"
                },
                {
                    "type": "p",
                    "text": "A unique identifier for the Autocomplete. Collection of options to be listed. The selected options. The text field component attached to the list of options. The preferred direction to open the popover. Title of the list of options. Allow more than one option to be selected. An action to render above the list of options. Display loading state. Indicates if more results will load dynamically. Is rendered when there are no options. Callback when the selection of options is changed. Callback when the end of the list is reached. The autocomplete component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly labeled so it’s obvious to the merchant what type of options will be available",
                        "Limit the number of options displayed at once",
                        "Not be used within a popover",
                        "Indicate a loading state to the merchant while option data is being populated"
                    ]
                },
                {
                    "type": "p",
                    "text": "The input field for autocomplete should follow thecontent guidelinesfor text fields."
                },
                {
                    "type": "list",
                    "items": [
                        "For an input field without suggested options,use the text field component",
                        "For a list of selectable options not linked to an input field,use the option list component",
                        "For a text field that triggers a popover,use the combo box component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The autocomplete component is based on theARIA 1.2 combobox patternand theAria 1.2 Listbox pattern. The autocomplete list displays below the text field or other control by default so it is easy for merchants to discover and use. However, you can change the position with thepreferredPositionprop. Autocomplete features can be challenging for merchants with visual, motor, and cognitive disabilities. Even when they’re built using best practices, these features can be difficult to use with some assistive technologies. Merchants should always be able to search, enter data, or perform other activities without relying on the autocomplete. Use autocomplete as progressive enhancement to make the interface easier to use for most merchants. Require that merchants make a selection from the autocomplete to complete a task."
                },
                {
                    "type": "list",
                    "items": [
                        "Give the autocomplete text input keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "Access the list of options with the up and down arrow keys",
                        "Select an option that has focus with theenter/returnkey"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/avatar",
            "title": "Avatar — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Avatars are used to show a thumbnail representation of an individual or business in the interface. Use to present an avatar for a merchant, customer, or business."
                },
                {
                    "type": "code",
                    "code": "import{Avatar}from'@shopify/polaris';importReactfrom'react';functionAvatarExample(){return<Avatarcustomer name=\"Farrah\"/>;}"
                },
                {
                    "type": "p",
                    "text": "Size of avatar. Defaults to'medium'. The name of the person. Initials of person to display. Whether the avatar is for a customer. URL of the avatar image which falls back to initials if the image fails to load. Callback fired when the image fails to load. Accessible label for the avatar image. Avatars should be one of 5 sizes:"
                },
                {
                    "type": "list",
                    "items": [
                        "Extra small (20 x 20 px): use in tightly condensed layouts",
                        "Small (24 × 24 px): use when the medium size is too big for the layout, or when the avatar has less importance",
                        "Medium (28 × 28 px): use as the default size",
                        "Large (32 × 32 px): use when an avatar is a focal point, such as on a single customer card",
                        "Extra large (40 × 40 px): use when an avatar is a focal point, such as on a single customer card"
                    ]
                },
                {
                    "type": "p",
                    "text": "Any time you use an image to communicate a concept on Shopify, it’s important to use descriptivealt text. Doing this is important foraccessibilitybecause it allows screen readers to describe what’s in the image to people who may not be able to see it. For avatars, we recommend using a format that describes what will show in the image:"
                },
                {
                    "type": "list",
                    "items": [
                        "alt=\"Person’s name\"if the avatar represents a person",
                        "alt=\"Business’s name\"if the avatar represents a business",
                        "alt=\"\"if the name of the person/business appears next to the avatar as text"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To show a thumbnail for an object rather than a person or business,use the thumbnail component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The avatar component uses a generated scalable vector graphics (SVG) file, which can cause challenges for merchants that use assistive technologies. To create a standard experience, the<img>is hidden from assistive technologies by using an emptyaltattribute, and replaced with a<span>that hasrole=”img”. The avatar component represents content, and should have a text equivalent for merchants using assistive technologies. By default, the value of thenameprop is used for the alternative text. If different text would be more accurate, use theaccessibilityLabelprop to replace the value provided byname."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/box",
            "title": "Box — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Box is the most primitive layout component. It’s a way to access Polaris design tokens. Background color of box and text color inside a box can be adjusted using theColor tokens."
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react';import{Box,Text}from'@shopify/polaris';functionBoxWithColorExample(){return(<Boxbackground=\"bg-fill-info\"><Placeholderlabel=\"Content inside a box\"/></Box>);}constPlaceholder=({label='',height='auto',width='auto'})=>{return(<divstyle={{background:'var(--p-color-border-interactive-subdued)',height:height,width:width,borderRadius:'inherit',}}><divstyle={{color:'var(--p-color-text)',}}><Textas=\"p\"variant=\"bodyMd\">{label}</Text></div></div>);};"
                },
                {
                    "type": "p",
                    "text": "HTML Element type. Defaults to'div'. Background color. Border color. Border style. Border radius. Vertical end horizontal start border radius. Vertical end horizontal end border radius. Vertical start horizontal start border radius. Vertical start horizontal end border radius. Border width. Vertical start border width. Vertical end border width. Horizontal start border width. Horizontal end border width. Color of children. HTML id attribute. Minimum height of container. Minimum width of container. Maximum width of container. Clip horizontal content of children. Clip vertical content of children. Spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical start and end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal start and end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Aria role. Shadow on box. Set tab order. Width of container. Position of box. Top position of box. Bottom position of box. Left position of box. Right position of box. Opacity of box. Outline color. Outline style. Outline width. Visually hide the contents during print. Visually hide the contents (still announced by screenreader). z-index of box."
                },
                {
                    "type": "list",
                    "items": [
                        "For more specific use cases,use the Card component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Box props are named following the convention of CSS logical properties, such as 'padding-inline-start' and 'padding-block-start'. Learn more aboutCSS logicial properties."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/callout-card",
            "title": "Callout card — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Callout cards are used to encourage merchants to take an action related to a new feature or opportunity. They are most commonly displayed in the sales channels section of Shopify. Use to let merchants know about a feature or opportunity where there is a clear, single action they need to take to move to the next step."
                },
                {
                    "type": "code",
                    "code": "import{CalloutCard}from'@shopify/polaris';importReactfrom'react';functionExample(){return(<CalloutCardtitle=\"Customize the style of your checkout\"illustration=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\"primaryAction={{content:'Customize checkout',url:'#',}}><p>Uploadyour store’s logo,change colors and fonts,and more.</p></CalloutCard>);}"
                },
                {
                    "type": "p",
                    "text": "The content to display inside the callout card. The title of the card. URL to the card illustration. Primary action for the card. Secondary action for the card. Callback when banner is dismissed. Callout cards should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly articulate the benefit of the feature and what it does",
                        "Provide merchants with a clear call to action",
                        "Be targeted to merchants who will most benefit from the feature",
                        "Be dismissable so merchants can get rid of cards about features they’re not interested in",
                        "Use an illustration that helps to communicate the subject or merchant benefit"
                    ]
                },
                {
                    "type": "p",
                    "text": "Callout card titles should follow the content guidelines forheadings and subheadings. Body content should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Actionable: start sentences with imperative verbs when telling merchants what actions are available to them (especially something new). Don’t use permissive language like “you can”."
                    ]
                },
                {
                    "type": "p",
                    "text": "Get performance data for all your sales channels. Now you can get performance data for all your sales channels."
                },
                {
                    "type": "list",
                    "items": [
                        "Structured for merchant success: always put the most critical information first",
                        "Clear: use the verb “need” to help merchants understand when they’re required to do something"
                    ]
                },
                {
                    "type": "p",
                    "text": "To buy a shipping label, you need to enter the total weight of your shipment, including packaging. To buy a shipping label, you must enter the total weight of your shipment, including packaging. Buttons should be: Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button. Buy shipping label Buy"
                },
                {
                    "type": "list",
                    "items": [
                        "Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                    ]
                },
                {
                    "type": "p",
                    "text": "View shipping settings View your settings"
                },
                {
                    "type": "list",
                    "items": [
                        "Scannable: avoid unnecessary words and articles such as the, an, or a."
                    ]
                },
                {
                    "type": "p",
                    "text": "Add menu item Add a menu item"
                },
                {
                    "type": "list",
                    "items": [
                        "To group similar concepts and tasks together,use the card component",
                        "To create page-level layout,use the layout component",
                        "To explain a feature that merchants haven’t tried yet,use the empty state component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The requiredtitleprop gives the callout card a level 2 heading (<h2>). This helps with readability and provides structure to screen reader users. Illustrations included in callout cards are implemented as decorative images with emptyaltattributes (alt=\"\") so that they’re skipped by screen readers. Useactionable languageto ensure that the purpose of the callout card is clear to all merchants, including those with issues related to reading and language."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/checkbox",
            "title": "Checkbox — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Checkboxes are most commonly used to give merchants a way to make a range of selections (zero, one, or multiple). They may also be used as a way to have merchants indicate they agree to specific terms and services. Use in forms to toggle the state of something on or off. Default checkboxes can appear as selected and disabled, or unselected."
                },
                {
                    "type": "code",
                    "code": "import{Checkbox}from'@shopify/polaris';import{useState,useCallback}from'react';functionCheckboxExample(){const[checked,setChecked]=useState(false);consthandleChange=useCallback((newChecked:boolean)=>setChecked(newChecked),[],);return(<Checkboxlabel=\"Basic checkbox\"checked={checked}onChange={handleChange}/>);}"
                },
                {
                    "type": "p",
                    "text": "Indicates the ID of the element that is controlled by the checkbox. Indicates the ID of the element that describes the checkbox. Label for the checkbox. Visually hide the label. Checkbox is selected. `indeterminate` shows a horizontal line in the checkbox. Disable input. ID for form input. Name for form input. Value for form input. Callback when checkbox is toggled. Callback when checkbox is focused. Callback when focus is removed. Added to the wrapping label. Grow to fill the space. Equivalent to width: 100%; height: 100%. Additional text to aide in use. Display an error message. Indicates the tone of the checkbox. Spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Checkboxes should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Work independently from each other. Selecting one checkbox shouldn’t change the selection status of another checkbox in the list. The exception is when a checkbox is used to make a bulk selection of multiple items.",
                        "Be framed positively. For example, say “Publish store” instead of “Hide store”.",
                        "Always have a label when used to activate or deactivate a setting.",
                        "Be listed according to a logical order, whether it’s alphabetical, numerical, time-based, or some other clear system.",
                        "Link to more information or include a subtitle as required to provide more explanation. Don’t rely on tooltips to explain a checkbox."
                    ]
                },
                {
                    "type": "p",
                    "text": "Lists that use checkboxes should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start with a capital letter"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Option 1",
                        "Option 2",
                        "Option 3"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "option 1",
                        "option 2",
                        "option 3"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Not use commas or semicolons at the end of each line"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red",
                        "Yellow",
                        "Blue"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red;",
                        "Yellow;",
                        "Blue."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "In the rare case where the checkbox is asking merchants to agree to terms or service, use the first person"
                    ]
                },
                {
                    "type": "p",
                    "text": "I agree to the Terms of Service. You agree to the Terms of Service"
                },
                {
                    "type": "list",
                    "items": [
                        "To present a list of options where merchants can only make a single choice,use the radio button component",
                        "To display a list of related content,use the choice list component",
                        "To create an ungrouped list,use the content list component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Screen readers convey the state of the checkbox automatically."
                },
                {
                    "type": "list",
                    "items": [
                        "Use thedisabledprop to apply the HTMLdisabledattribute to the checkbox<input>. This prevents merchants from being able to interact with the checkbox, and conveys its inactive state to assistive technologies.",
                        "Use theidprop to provide a uniqueidattribute value for the checkbox. If anidisn’t provided, then the component generates one. All checkboxes must have uniqueidvalues to work correctly with assistive technologies.",
                        "Settingchecked=\"indeterminate\"conveys the state of the checkbox usingaria-checked=\"mixed\".",
                        "Setting theariaControlsprop conveys the ID of the element whose contents or presence are controlled by the checkbox to screen reader users with thearia-controlsattribute."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The requiredlabelprop conveys the purpose of the checkbox to all merchants",
                        "Use thelabelHiddenprop to visually hide the label but make it available to assistive technologies",
                        "When you provide help text via thehelpTextprop or an inline error message via theerrorprop, the help or error content is conveyed to screen reader users with thearia-describedbyattribute"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Move focus to each checkbox using thetabkey (orshift+tabwhen tabbing backwards)",
                        "To interact with the checkbox when it has keyboard focus, press thespacekey"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/choice-list",
            "title": "Choice list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A choice list lets you create a list of grouped radio buttons or checkboxes. Use this component if you need to group together a related list of interactive choices. Allows merchants to select one option from a list. Make sure all options are an either/or choice."
                },
                {
                    "type": "code",
                    "code": "import{ChoiceList}from'@shopify/polaris';import{useState,useCallback}from'react';functionSingleChoiceListExample(){const[selected,setSelected]=useState<string[]>(['hidden']);consthandleChange=useCallback((value:string[])=>setSelected(value),[]);return(<ChoiceListtitle=\"Company name\"choices={[{label:'Hidden',value:'hidden'},{label:'Optional',value:'optional'},{label:'Required',value:'required'},]}selected={selected}onChange={handleChange}/>);}"
                },
                {
                    "type": "p",
                    "text": "Label for list of choices. Collection of choices. Collection of selected choices. Name for form input. Allow merchants to select multiple options at once. Toggles display of the title. Display an error message. Disable all choices *. Callback when the selected choices change. Indicates the tone of the choice list. Choice lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Include a title that tells merchants what to do or explains the available options",
                        "Label options clearly based on what the option will do",
                        "Avoid mutually exclusive options when allowing multiple selection"
                    ]
                },
                {
                    "type": "p",
                    "text": "List titles should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Help merchants understand how the items in the list are grouped together, or should explain what kind of choice merchants are making"
                    ]
                },
                {
                    "type": "p",
                    "text": "Pick a shipping method Pick one"
                },
                {
                    "type": "list",
                    "items": [
                        "Use simple, clear language that can be read at a glance",
                        "Keep list titles to a single sentence",
                        "It the title introduces the list, it should end with a colon",
                        "Should be written in sentence case"
                    ]
                },
                {
                    "type": "p",
                    "text": "Shipping options Shipping Options If the customer abandons their checkout, send them an email reminder to complete their order:"
                },
                {
                    "type": "list",
                    "items": [
                        "Option a",
                        "Option b"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the customer abandons their checkout, send them an email reminder to complete their order"
                },
                {
                    "type": "list",
                    "items": [
                        "Option a",
                        "Option b"
                    ]
                },
                {
                    "type": "p",
                    "text": "Every item in a choice list should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start with a capital letter",
                        "Not use commas or semicolons at the end of each line",
                        "Be written in sentence case (the first word capitalized, the rest lowercase)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Option 1",
                        "Yellow",
                        "Item three"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "option 1",
                        "Yellow;",
                        "Item Three"
                    ]
                },
                {
                    "type": "p",
                    "text": "If your list contains helper text, only the description below the list item should contain punctuation."
                },
                {
                    "type": "list",
                    "items": [
                        "To present a long list of radio buttons or when space is constrained,use the select component",
                        "To build a group of radio buttons or checkboxes with a custom layout, use theradio button componentorcheckbox component",
                        "To display a simple, non-interactive list of related content,use the list component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The choice list component uses the accessibility features of thecheckboxandradio buttoncomponents."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/collapsible",
            "title": "Collapsible — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The collapsible component is used to put long sections of information under a block that merchants can expand or collapse. Use for a basic “show more” interaction when you need to display more content."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,LegacyStack,Button,Collapsible,TextContainer,Link,}from'@shopify/polaris';import{useState,useCallback}from'react';functionCollapsibleExample(){const[open,setOpen]=useState(true);consthandleToggle=useCallback(()=>setOpen((open)=>!open),[]);return(<div style={{height:'200px'}}><LegacyCardsectioned><LegacyStackvertical><ButtononClick={handleToggle}ariaExpanded={open}ariaControls=\"basic-collapsible\">Toggle</Button><Collapsibleopen={open}id=\"basic-collapsible\"transition={{duration:'500ms',timingFunction:'ease-in-out'}}expandOnPrint><TextContainer><p>Yourmailing list lets you contact customers or visitors whohave shown an interestinyour store.Reachout to themwithexclusive offers or updates about your products.</p><Linkurl=\"#\">Testlink</Link></TextContainer></Collapsible></LegacyStack></LegacyCard></div>);}"
                },
                {
                    "type": "p",
                    "text": "Assign a unique ID to the collapsible. For accessibility, pass this ID as the value of the triggering component’s aria-controls prop. Option to show collapsible content when printing. Toggle whether the collapsible is expanded or not. The direction the collapsible collapses in. Defaults to'block'. Override transition properties. When set to false, disables transition completely. Defaults totransition={{duration:'var(--p-motion-duration-150)',timingFunction:'var(--p-motion-ease-in-out)'}}. Callback when the animation completes. The content to display inside the collapsible. The collapsible component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for information that is lower priority or that merchants don’t need to see all the time",
                        "Not be used to hide error messages or other critical information that requires an immediate action"
                    ]
                },
                {
                    "type": "p",
                    "text": "Collapsible containers are cards with expandable and collapsible functionality, and should follow the content guidelines forcards."
                },
                {
                    "type": "list",
                    "items": [
                        "To control a collapsible component, use thebuttoncomponent",
                        "To put long sections of information in a container that allows for scrolling,use the scrollable component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the collapsible component in conjunction with abutton. Place the collapsible content immediately after the button that controls it, so merchants with vision or attention issues can easily discover what content is being affected."
                },
                {
                    "type": "list",
                    "items": [
                        "Use the requiredidprop of the collapsible component to give the content a uniqueidvalue",
                        "Use theariaExpandedprop on the button component to add anaria-expandedattribute, which conveys the expanded or collapsed state to screen reader users",
                        "Use theariaControlsprop on the button component, and set its value to theidvalue of the collapsible component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/combobox",
            "title": "Combobox — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Combobox is an accessible autocomplete input that enables merchants to filter a list of options and select one or more values. Use when merchants can select one option from a predefined or editable list."
                },
                {
                    "type": "code",
                    "code": "import{Listbox,Combobox,Icon}from'@shopify/polaris';import{SearchIcon}from'@shopify/polaris-icons';import{useState,useCallback,useMemo}from'react';functionComboboxExample(){constdeselectedOptions=useMemo(()=>[{value:'rustic',label:'Rustic'},{value:'antique',label:'Antique'},{value:'vinyl',label:'Vinyl'},{value:'vintage',label:'Vintage'},{value:'refurbished',label:'Refurbished'},],[],);const[selectedOption,setSelectedOption]=useState<string|undefined>();const[inputValue,setInputValue]=useState('');const[options,setOptions]=useState(deselectedOptions);constescapeSpecialRegExCharacters=useCallback((value:string)=>value.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&'),[],);constupdateText=useCallback((value:string)=>{setInputValue(value);if(value===''){setOptions(deselectedOptions);return;}constfilterRegex=newRegExp(escapeSpecialRegExCharacters(value),'i');constresultOptions=deselectedOptions.filter((option)=>option.label.match(filterRegex),);setOptions(resultOptions);},[deselectedOptions,escapeSpecialRegExCharacters],);constupdateSelection=useCallback((selected:string)=>{constmatchedOption=options.find((option)=>{returnoption.value.match(selected);});setSelectedOption(selected);setInputValue((matchedOption&&matchedOption.label)||'');},[options],);constoptionsMarkup=options.length>0?options.map((option)=>{const{label,value}=option;return(<Listbox.Optionkey={`${value}`}value={value}selected={selectedOption===value}accessibilityLabel={label}>{label}</Listbox.Option>);}):null;return(<div style={{height:'225px'}}><Comboboxactivator={<Combobox.TextFieldprefix={<Iconsource={SearchIcon}/>}onChange={updateText}label=\"Search tags\"labelHiddenvalue={inputValue}placeholder=\"Search tags\"autoComplete=\"off\"/>}>{options.length>0?(<ListboxonSelect={updateSelection}>{optionsMarkup}</Listbox>):null}</Combobox></div>);}"
                },
                {
                    "type": "p",
                    "text": "The text field component to activate the Popover. Allows more than one option to be selected. The content to display inside the popover. The preferred direction to open the popover. Whether or not more options are available to lazy load when the bottom of the listbox reached. Use the hasMoreResults boolean provided by the GraphQL API of the paginated data. Height to set on the Popover Pane. Callback fired when the bottom of the listbox is reached. Use to lazy load when listbox option data is paginated. Min Height to set on the Popover Pane. Callback fired when the bottom of the lisbox is reached. Use to lazy load when listbox option data is paginated. Callback fired when the popover closes. A combobox is made up of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "TextField: A text input that activates a popover displaying a list of options. As merchants type in the text field, the list of options is filtered by the input value. Options replace or add to the input value when selected.",
                        "Popover: An overlay containing a list of options.",
                        "Listbox: A list of options to filter and select or deselect.",
                        "Listbox.Option: The individual options to select or deselect. Check out thelistbox component documentationto learn how to compose it with various content."
                    ]
                },
                {
                    "type": "p",
                    "text": "TheComboboxcomponent should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly labeled so the merchant knows what kind of options will be available",
                        "Not be used within a popover",
                        "Indicate a loading state to the merchant while option data is being populated",
                        "Order items in an intentional way so it’s easy for the merchant to find a specific value"
                    ]
                },
                {
                    "type": "p",
                    "text": "The input field forComboboxshould follow thecontent guidelinesfor text fields. Item order should be intentional. Order them so it’s easy for the merchant to find a specific value. Some ways you can do this:"
                },
                {
                    "type": "list",
                    "items": [
                        "Sort options in alphabetical order",
                        "Display options based on how frequently the merchant selects an option"
                    ]
                },
                {
                    "type": "p",
                    "text": "If multiple options can be selected, move selected items to the top of the list. If this doesn’t work for your context, you can override this behavior."
                },
                {
                    "type": "list",
                    "items": [
                        "By default, menu items are filtered based on whether or not they match the value of the textfield.",
                        "Filters arenotcase-sensitive by default.",
                        "You can apply custom filtering logic if the default behavior doesn’t make sense for your use case."
                    ]
                },
                {
                    "type": "p",
                    "text": "The tag multi-select input enables merchants to efficiently add or remove tags from a resource, like a product or an order. It uses the inline autocomplete combobox pattern to present merchants with an editable list of tags to browse and select from."
                },
                {
                    "type": "list",
                    "items": [
                        "For an input field without suggested options,use the text field component",
                        "For a list of selectable options not linked to an input field,use the list box component"
                    ]
                },
                {
                    "type": "p",
                    "text": "TheComboboxcomponent is based on theARIA 1.2 combobox pattern. It is a combination of a single-lineTextFieldand aPopover. The current implementation expects aListboxcomponent to be used. TheComboboxpopover displays below the text field or other control by default so it is easy for merchants to discover and use. However, you can change the position with thepreferredPositionprop. Comboboxfeatures can be challenging for merchants with visual, motor, and cognitive disabilities. Even when they’re built using best practices, these features can be difficult to use with some assistive technologies. Merchants should always be able to search, enter data, or perform other activities without relying on the combobox."
                },
                {
                    "type": "list",
                    "items": [
                        "Use combobox as progressive enhancement to make the interface easier to use for most merchants."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Require that merchants make a selection from the combobox to complete a task."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Give the combobox's text input keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated",
            "title": "Deprecated — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Deprecated components will be removed in future major versions of Polaris. These components could be deprecated for anumber of reasonsand should be avoided. These components will show warnings in the component file and provide details for alternative usage. For more information, check out thecomponent lifecycles."
                },
                {
                    "type": "list",
                    "items": [
                        "CaptionDeprecatedCaption text is smaller than the recommended size for general reading. Used in graphs, timestamps, or as secondary text.",
                        "Contextual save barDeprecatedInforms merchants of their options once they have made changes to a form on the page or while creating a new object.",
                        "Display textDeprecatedDisplay styles make a bold visual statement. Used for visual storytelling, marketing content, or capturing attention.",
                        "FrameDeprecatedCreates the structure of the Shopify admin. All of the main sections of the admin are nested in the frame.",
                        "HeadingDeprecatedUsed as the titles of each major section of a page in the interface, like in card components.",
                        "Legacy cardDeprecatedLegacy version of the Card component. Used to group similar concepts and tasks together for easier scanning and reading.",
                        "Legacy filtersDeprecatedLegacy version of the Filters component. Used to filter the items of a list or table.",
                        "Legacy stackDeprecatedLegacy version of the Stack component. Used for layout of a horizontal row of components or vertical centering.",
                        "Legacy tabsDeprecatedUsed to alternate among related views within the same context.",
                        "LoadingDeprecatedUsed to indicate to merchants that a page is loading or an upload is processing.",
                        "ModalDeprecatedUsed to interrupt merchants with urgent information, details, or actions.",
                        "NavigationDeprecatedThe navigation component is used to display the primary navigation in the sidebar of the frame of an application. Navigation includes a list of links that merchants use to move between sections of the application.",
                        "Setting toggleDeprecatedUsed to control a feature or option that can be turned on or off.",
                        "SheetDeprecatedA large container providing actions and information contextual to the page without interrupting flow like a modal.",
                        "SubheadingDeprecatedUsed for the title of any sub-sections in top-level page sections.",
                        "Text containerDeprecatedUsed to wrap text elements like paragraphs, headings, and lists for vertical spacing.",
                        "Text styleDeprecatedEnhances text with additional visual meaning, like using subdued text to de-emphasize it.",
                        "ToastDeprecatedA non-disruptive message that provides quick feedback on the outcome of an action.",
                        "Top barDeprecatedAppears at the top of the page and is used to brand and navigate major applications areas.",
                        "Visually hiddenDeprecatedUsed when an element needs to be available to assistive technology but otherwise hidden."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/caption",
            "title": "Caption — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Caption text size is smaller than the recommended size for general reading. On web, it should be used only in a graph or as a timestamp for a list item. On Android and iOS, it can also be used as help text or as other kinds of secondary text for list items. This component is no longer supported. Please use the Text component instead."
                },
                {
                    "type": "code",
                    "code": "-<Caption>Received April 21, 2017</Caption>+<Text variant=\"bodySm\" as=\"p\">Received April 21, 2017</Text>"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/contextual-save-bar",
            "title": "Contextual save bar — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The contextual save bar tells merchants their options once they have made changes to a form on the page. This component is also shown while creating a new object like a product or customer. Merchants can use this component to save or discard their work. This component is no longer supported. Please use theApp Bridge Contextual\nSave Bar\nAPIinstead. Use the save action to provide an opportunity to save changes. Use the discard action to allow merchants the option to discard their changes. Use the message to provide helpful context on the nature of those changes."
                },
                {
                    "type": "code",
                    "code": "import{Frame,ContextualSaveBar}from'@shopify/polaris';importReactfrom'react';functionExample(){return(<div style={{height:'250px'}}><Framelogo={{width:86,contextualSaveBarSource:'https://cdn.shopify.com/s/files/1/2376/3301/files/Shopify_Secondary_Inverted.png',}}><ContextualSaveBarmessage=\"Unsaved changes\"saveAction={{onAction:()=>console.log('add form submit logic'),loading:false,disabled:false,}}discardAction={{onAction:()=>console.log('add clear form logic'),}}/></Frame></div>);}"
                },
                {
                    "type": "p",
                    "text": "The contextual save bar component must be wrapped in theframecomponent. The contextual save bar component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Become visible when a form on the page has unsaved changes",
                        "Be used to save or discard in-progress changes",
                        "Provide brief and helpful context on the nature of in-progress changes",
                        "Save all changes on the page. Avoid scenarios where multiple forms on a single page can be edited at the same time. If specific sections of a page need to be independently editable, use an Edit button to launch amodal dialogfor each section where changes can be made and saved."
                    ]
                },
                {
                    "type": "p",
                    "text": "Messages in the contextual save bar component should be informative, clear, and concise. They should follow the {adjective}+{noun} pattern. Don’t use full sentences. The standard message content is"
                },
                {
                    "type": "list",
                    "items": [
                        "“Unsaved changes” when editing existing content",
                        "“Unsaved {resource name}” when creating a new object"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Unsaved changes",
                        "Unsaved product"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "You have unsaved changes",
                        "Red and white striped shirt not yet saved"
                    ]
                },
                {
                    "type": "p",
                    "text": "Actions in the contextual save bar component should consist of a strong verb that encourages action. They should not include a noun."
                },
                {
                    "type": "list",
                    "items": [
                        "Save",
                        "Discard"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Save changes",
                        "Discard changes"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To wrap your entire application,use the frame component",
                        "To build the outer wrapper of a page, including page title and associated actions,use the page component",
                        "To wrap form elements and handle the submission of a form,use the form component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/display-text",
            "title": "Display text — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Display styles make a bold visual statement. Use them to create impact when the main goal is visual storytelling. For example, use display text to convince or reassure merchants such as in marketing content or to capture attention during onboarding. This component is no longer supported. Please use the Text component instead."
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"small\">Sales this year</DisplayText>+<Text variant=\"headingLg\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"medium\">Sales this year</DisplayText>+<Text variant=\"headingXl\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"large\">Sales this year</DisplayText>+<Text variant=\"heading2xl\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"extraLarge\">Sales this year</DisplayText>+<Text variant=\"heading3xl\" as=\"p\">Sales this year</Text>"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/frame",
            "title": "Frame — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The frame component, while not visible in the user interface itself, provides the structure for an application. It wraps the main elements and houses the primaryApp Bridge Navigation Menu API,top bar,App Bridge Toast API, andApp Bridge Contextual Save Bar APIcomponents. This component is no longer supported. Use to present the frame structure and all of its elements."
                },
                {
                    "type": "code",
                    "code": "import{ActionList,AppProvider,LegacyCard,ContextualSaveBar,FormLayout,Frame,Layout,Loading,Modal,Navigation,Page,SkeletonBodyText,SkeletonDisplayText,SkeletonPage,TextContainer,TextField,Toast,TopBar,}from'@shopify/polaris';import{ArrowLeftIcon,HomeIcon,OrderIcon,ChatIcon,}from'@shopify/polaris-icons';import{useState,useCallback,useRef}from'react';functionFrameExample(){constdefaultState=useRef({emailFieldValue:'dharma@jadedpixel.com',nameFieldValue:'Jaded Pixel',});constskipToContentRef=useRef<HTMLAnchorElement>(null);const[toastActive,setToastActive]=useState(false);const[isLoading,setIsLoading]=useState(false);const[isDirty,setIsDirty]=useState(false);const[searchActive,setSearchActive]=useState(false);const[searchValue,setSearchValue]=useState('');const[userMenuActive,setUserMenuActive]=useState(false);const[mobileNavigationActive,setMobileNavigationActive]=useState(false);const[modalActive,setModalActive]=useState(false);const[nameFieldValue,setNameFieldValue]=useState(defaultState.current.nameFieldValue,);const[emailFieldValue,setEmailFieldValue]=useState(defaultState.current.emailFieldValue,);const[storeName,setStoreName]=useState(defaultState.current.nameFieldValue,);const[supportSubject,setSupportSubject]=useState('');const[supportMessage,setSupportMessage]=useState('');consthandleSubjectChange=useCallback((value:string)=>setSupportSubject(value),[],);consthandleMessageChange=useCallback((value:string)=>setSupportMessage(value),[],);consthandleDiscard=useCallback(()=>{setEmailFieldValue(defaultState.current.emailFieldValue);setNameFieldValue(defaultState.current.nameFieldValue);setIsDirty(false);},[]);consthandleSave=useCallback(()=>{defaultState.current.nameFieldValue=nameFieldValue;defaultState.current.emailFieldValue=emailFieldValue;setIsDirty(false);setToastActive(true);setStoreName(defaultState.current.nameFieldValue);},[emailFieldValue,nameFieldValue]);consthandleNameFieldChange=useCallback((value:string)=>{setNameFieldValue(value);value&&setIsDirty(true);},[]);consthandleEmailFieldChange=useCallback((value:string)=>{setEmailFieldValue(value);value&&setIsDirty(true);},[]);consthandleSearchResultsDismiss=useCallback(()=>{setSearchActive(false);setSearchValue('');},[]);consthandleSearchFieldChange=useCallback((value:string)=>{setSearchValue(value);setSearchActive(value.length>0);},[]);consttoggleToastActive=useCallback(()=>setToastActive((toastActive)=>!toastActive),[],);consttoggleUserMenuActive=useCallback(()=>setUserMenuActive((userMenuActive)=>!userMenuActive),[],);consttoggleMobileNavigationActive=useCallback(()=>setMobileNavigationActive((mobileNavigationActive)=>!mobileNavigationActive,),[],);consttoggleIsLoading=useCallback(()=>setIsLoading((isLoading)=>!isLoading),[],);consttoggleModalActive=useCallback(()=>setModalActive((modalActive)=>!modalActive),[],);consttoastMarkup=toastActive?(<ToastonDismiss={toggleToastActive}content=\"Changes saved\"/>):null;constuserMenuActions=[{items:[{content:'Community forums'}],},];constcontextualSaveBarMarkup=isDirty?(<ContextualSaveBarmessage=\"Unsaved changes\"saveAction={{onAction:handleSave,}}discardAction={{onAction:handleDiscard,}}/>):null;constuserMenuMarkup=(<TopBar.UserMenuactions={userMenuActions}name=\"Dharma\"detail={storeName}initials=\"D\"open={userMenuActive}onToggle={toggleUserMenuActive}/>);constsearchResultsMarkup=(<ActionListitems={[{content:'Shopify help center'},{content:'Community forums'}]}/>);constsearchFieldMarkup=(<TopBar.SearchFieldonChange={handleSearchFieldChange}value={searchValue}placeholder=\"Search\"/>);consttopBarMarkup=(<TopBarshowNavigationToggleuserMenu={userMenuMarkup}searchResultsVisible={searchActive}searchField={searchFieldMarkup}searchResults={searchResultsMarkup}onSearchResultsDismiss={handleSearchResultsDismiss}onNavigationToggle={toggleMobileNavigationActive}/>);constnavigationMarkup=(<Navigationlocation=\"/\"><Navigation.Sectionitems={[{label:'Back to Shopify',icon:ArrowLeftIcon,},]}/><Navigation.Sectionseparatortitle=\"Jaded Pixel App\"items={[{label:'Dashboard',icon:HomeIcon,onClick:toggleIsLoading,},{label:'Jaded Pixel Orders',icon:OrderIcon,onClick:toggleIsLoading,},]}action={{icon:ChatIcon,accessibilityLabel:'Contact support',onClick:toggleModalActive,}}/></Navigation>);constloadingMarkup=isLoading?<Loading/>:null;constskipToContentTarget=(<a id=\"SkipToContentTarget\"ref={skipToContentRef}tabIndex={-1}/>);constactualPageMarkup=(<Pagetitle=\"Account\"><Layout>{skipToContentTarget}<Layout.AnnotatedSectiontitle=\"Account details\"description=\"Jaded Pixel will use this as your account information.\"><LegacyCardsectioned><FormLayout><TextFieldlabel=\"Full name\"value={nameFieldValue}onChange={handleNameFieldChange}autoComplete=\"name\"/><TextFieldtype=\"email\"label=\"Email\"value={emailFieldValue}onChange={handleEmailFieldChange}autoComplete=\"email\"/></FormLayout></LegacyCard></Layout.AnnotatedSection></Layout></Page>);constloadingPageMarkup=(<SkeletonPage><Layout><Layout.Section><LegacyCardsectioned><TextContainer><SkeletonDisplayTextsize=\"small\"/><SkeletonBodyTextlines={9}/></TextContainer></LegacyCard></Layout.Section></Layout></SkeletonPage>);constpageMarkup=isLoading?loadingPageMarkup:actualPageMarkup;constmodalMarkup=(<Modalopen={modalActive}onClose={toggleModalActive}title=\"Contact support\"primaryAction={{content:'Send',onAction:toggleModalActive,}}><Modal.Section><FormLayout><TextFieldlabel=\"Subject\"value={supportSubject}onChange={handleSubjectChange}autoComplete=\"off\"/><TextFieldlabel=\"Message\"value={supportMessage}onChange={handleMessageChange}autoComplete=\"off\"multiline/></FormLayout></Modal.Section></Modal>);constlogo={width:86,topBarSource:'https://cdn.shopify.com/s/files/1/2376/3301/files/Shopify_Secondary_Inverted.png',contextualSaveBarSource:'https://cdn.shopify.com/s/files/1/2376/3301/files/Shopify_Secondary_Inverted.png',accessibilityLabel:'Shopify',};return(<div style={{height:'500px'}}><AppProvideri18n={{Polaris:{Avatar:{label:'Avatar',labelWithInitials:'Avatar with initials {initials}',},ContextualSaveBar:{save:'Save',discard:'Discard',},TextField:{characterCount:'{count} characters',},TopBar:{toggleMenuLabel:'Toggle menu',SearchField:{clearButtonLabel:'Clear',search:'Search',},},Modal:{iFrameTitle:'body markup',},Frame:{skipToContent:'Skip to content',navigationLabel:'Navigation',Navigation:{closeMobileNavigationLabel:'Close navigation',},},},}}><Framelogo={logo}topBar={topBarMarkup}navigation={navigationMarkup}showMobileNavigation={mobileNavigationActive}onNavigationDismiss={toggleMobileNavigationActive}skipToContentTarget={skipToContentRef}>{contextualSaveBarMarkup}{loadingMarkup}{pageMarkup}{toastMarkup}{modalMarkup}</Frame></AppProvider></div>);}"
                },
                {
                    "type": "p",
                    "text": "For the best experience when creating an application frame, use the following components:"
                },
                {
                    "type": "list",
                    "items": [
                        "Top bar",
                        "Navigation",
                        "Contextual save bar",
                        "Toast",
                        "Loading"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To display the navigation component on small screens, to provide search and a user menu, or to style theframecomponent to reflect an application’s brand, use thetop barcomponent.",
                        "To display the primary navigation within the frame of an application, use thenavigationcomponent.",
                        "To tell merchants their options once they have made changes to a form on the page use thecontextual save barcomponent.",
                        "To provide quick, at-a-glance feedback on the outcome of an action, use thetoastcomponent.",
                        "To indicate to merchants that a page is loading or an upload is processing use theloadingcomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/heading",
            "title": "Heading — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Headings are used as the titles of each major section of a page in the interface. For example,card componentsgenerally use headings as their title. This component is no longer supported. Please use the Text component instead."
                },
                {
                    "type": "code",
                    "code": "-<Heading>Online store dashboard</Heading>+<Text variant=\"headingMd\" as=\"h2\">Online store dashboard</Text>"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/legacy-card",
            "title": "Legacy card — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This is the legacy version of the Card component which is in the process of being updated to a more flexible and composable API. Cards are used to group similar concepts and tasks together to make Shopify easier for merchants to scan, read, and get things done. This component is no longer supported. The newCard\ncomponentcan be used in combination\nwith the new layout primitives to achieve similar results to LegacyCard. Learn\nmore about ourcomponent lifecycles. Use when you have a simple message to communicate to merchants that doesn’t require any secondary steps."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard}from'@shopify/polaris';importReactfrom'react';functionLegacyCardExample(){return(<LegacyCardtitle=\"Online store dashboard\"sectioned><p>Viewa summaryofyour online store’sperformance.</p></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "Cards should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use headings that set clear expectations about the card’s purpose",
                        "Prioritize information so the content merchants most need to know comes first",
                        "Stick to single user flows or break more complicated flows into multiple sections",
                        "Avoid too many call-to-action buttons or links and only one primary call to action per card",
                        "Use calls to action on the bottom of the card for next steps and use the space in the upper right corner of the card for persistent, optional actions (such as an Edit link)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Card titles should follow the content guidelines forheadings and subheadings. Body content should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Actionable: start sentences with imperative verbs when telling merchants what actions are available to them (especially something new). Don’t use permissive language like “you can”."
                    ]
                },
                {
                    "type": "p",
                    "text": "Get performance for all your sales channels. Now you can get performance data for all your sales channels."
                },
                {
                    "type": "list",
                    "items": [
                        "Structured for merchant success: always put the most critical information first.",
                        "Clear: use the verb “need” to help merchants understand when they’re required to do something."
                    ]
                },
                {
                    "type": "p",
                    "text": "To buy a shipping label, you need to enter the total weight of your shipment, including packaging. To buy a shipping label, you must enter the total weight of your shipment, including packaging. Buttons should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create order",
                        "Buy shipping label"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "New order",
                        "Buy"
                    ]
                },
                {
                    "type": "p",
                    "text": "Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                },
                {
                    "type": "list",
                    "items": [
                        "Activate Apple Pay",
                        "View shipping settings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Try Apple Pay",
                        "View your settings"
                    ]
                },
                {
                    "type": "p",
                    "text": "Scannable: Avoid unnecessary words and articles such as the, an, or a. Add menu item Add a menu item Section titles should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Informative: they should label the type of content grouped in the body content below",
                        "Like headings: follow the same content guidelines as when you’re writing headings"
                    ]
                },
                {
                    "type": "p",
                    "text": "Links should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Used for secondary or persistent actions: links should be used to represent lower priority actions than buttons, or persistent actions that merchants may take at any time (such as a persistent Edit link).",
                        "Clearly labeled: merchants should not need to guess where they’ll end up if they click on an action link. Never use “click here” as a link because it doesn’t set expectations about what’s next.",
                        "Similar to buttons: Follow the same content guidelines as when you’re writing text for buttons."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To create page-level layout,use the layout component",
                        "To highlight a Shopify feature,use the callout card component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The requiredtitleprop gives the card a level 2 heading (<h2>). This helps with readability and provides structure to screen reader users. If you use thesubduedprop on a card or section, make sure that the card or sectiontitleconveys the reason for usingsubdued. This ensures that merchants with low vision, including those who use screen readers, can identify that the content is inactive or less important."
                },
                {
                    "type": "code",
                    "code": "<LegacyCardtitle=\"Deactivated staff accounts\"sectioned subdued><List><List.Item>FelixCrafford</List.Item><List.Item>EzequielManno</List.Item></List></LegacyCard>"
                },
                {
                    "type": "code",
                    "code": "<LegacyCardtitle=\"Staff accounts\"sectioned subdued><List><List.Item>FelixCrafford</List.Item><List.Item>EzequielManno</List.Item></List></LegacyCard>"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/legacy-filters",
            "title": "Legacy filters — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This is a legacy version of the Filters component, which is a composite component that filters the items of a list or table. This component is no longer supported. The newFilters\ncomponentcan be used as a\nstandalone component, but is used primarily within theIndexFiltersfor sorting and\nfiltering IndexTables."
                },
                {
                    "type": "code",
                    "code": "import{ChoiceList,TextField,RangeSlider,LegacyCard,ResourceList,LegacyFilters,Avatar,Text,}from'@shopify/polaris';import{useState,useCallback}from'react';functionResourceListFiltersExample(){const[accountStatus,setAccountStatus]=useState<string[]|undefined>(undefined,);const[moneySpent,setMoneySpent]=useState<[number,number]|undefined>(undefined,);const[taggedWith,setTaggedWith]=useState<string|undefined>(undefined);const[queryValue,setQueryValue]=useState<string|undefined>(undefined);consthandleAccountStatusChange=useCallback((value:string[])=>setAccountStatus(value),[],);consthandleMoneySpentChange=useCallback((value:[number,number])=>setMoneySpent(value),[],);consthandleTaggedWithChange=useCallback((value:string)=>setTaggedWith(value),[],);consthandleFiltersQueryChange=useCallback((value:string)=>setQueryValue(value),[],);consthandleAccountStatusRemove=useCallback(()=>setAccountStatus(undefined),[],);consthandleMoneySpentRemove=useCallback(()=>setMoneySpent(undefined),[],);consthandleTaggedWithRemove=useCallback(()=>setTaggedWith(undefined),[],);consthandleQueryValueRemove=useCallback(()=>setQueryValue(undefined),[],);consthandleFiltersClearAll=useCallback(()=>{handleAccountStatusRemove();handleMoneySpentRemove();handleTaggedWithRemove();handleQueryValueRemove();},[handleAccountStatusRemove,handleMoneySpentRemove,handleQueryValueRemove,handleTaggedWithRemove,]);constfilters=[{key:'accountStatus',label:'Account status',filter:(<ChoiceListtitle=\"Account status\"titleHiddenchoices={[{label:'Enabled',value:'enabled'},{label:'Not invited',value:'not invited'},{label:'Invited',value:'invited'},{label:'Declined',value:'declined'},]}selected={accountStatus||[]}onChange={handleAccountStatusChange}allowMultiple/>),shortcut:true,},{key:'taggedWith',label:'Tagged with',filter:(<TextFieldlabel=\"Tagged with\"value={taggedWith}onChange={handleTaggedWithChange}autoComplete=\"off\"labelHidden/>),shortcut:true,},{key:'moneySpent',label:'Money spent',filter:(<RangeSliderlabel=\"Money spent is between\"labelHiddenvalue={moneySpent||[0,500]}prefix=\"$\"outputmin={0}max={2000}step={1}onChange={handleMoneySpentChange}/>),},];constappliedFilters=[];if(accountStatus&&accountStatus.length>0){appliedFilters.push({key:'accountStatus',label:accountStatus.map((val)=>`Customer${val}`).join(', '),onRemove:handleAccountStatusRemove,});}if(moneySpent){appliedFilters.push({key:'moneySpent',label:`Money spent is between $${moneySpent[0]}and $${moneySpent[1]}`,onRemove:handleMoneySpentRemove,});}if(taggedWith&&!isEmpty(taggedWith)){appliedFilters.push({key:'taggedWith',label:`Tagged with${taggedWith}`,onRemove:handleTaggedWithRemove,});}return(<div style={{height:'568px'}}><LegacyCard><ResourceListresourceName={{singular:'customer',plural:'customers'}}filterControl={<LegacyFiltersqueryValue={queryValue}filters={filters}appliedFilters={appliedFilters}onQueryChange={handleFiltersQueryChange}onQueryClear={handleQueryValueRemove}onClearAll={handleFiltersClearAll}/>}items={[{id:'341',url:'#',name:'Mae Jemison',location:'Decatur, USA',},{id:'256',url:'#',name:'Ellen Ochoa',location:'Los Angeles, USA',},]}renderItem={(item)=>{const{id,url,name,location}=item;constmedia=<Avatarcustomer size=\"md\"name={name}/>;return(<ResourceList.Itemid={id}url={url}media={media}accessibilityLabel={`View details for${name}`}><Textas=\"h3\"variant=\"bodyMd\"fontWeight=\"bold\">{name}</Text><div>{location}</div></ResourceList.Item>);}}/></LegacyCard></div>);functionisEmpty(value:string):boolean{if(Array.isArray(value)){returnvalue.length===0;}else{returnvalue===''||value==null;}}}"
                },
                {
                    "type": "p",
                    "text": "Merchants use filters to:"
                },
                {
                    "type": "list",
                    "items": [
                        "view different subsets of items in a list or table",
                        "filter by typing into a text field",
                        "filter by selecting filters or promoted filters"
                    ]
                },
                {
                    "type": "p",
                    "text": "The way that merchants interact with filters depends on the components that you decide to incorporate. In its simplest form, filters includes a text field and a set of filters, which can be displayed in different ways. For example, you could show promoted filters and a More button that opens asheetcontaining more filters. What the filters are and how they’re exposed to merchants is flexible. The filters component relies on the accessibility features of multiple other components:"
                },
                {
                    "type": "list",
                    "items": [
                        "Text field",
                        "Button",
                        "Popover",
                        "Sheet",
                        "Collapsible"
                    ]
                },
                {
                    "type": "p",
                    "text": "Since custom HTML can be passed to the component for additional actions, ensure that the filtering system you build is accessible as a whole. All merchants must:"
                },
                {
                    "type": "list",
                    "items": [
                        "be able to identify and understand labels for all controls",
                        "be notified of state changes",
                        "be able to complete all actions with the keyboard"
                    ]
                },
                {
                    "type": "p",
                    "text": "The filters component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "help reduce merchant effort by promoting the filtering categories that are most commonly used",
                        "include no more than 2 or 3 promoted filters",
                        "consider small screen sizes when designing the interface for each filter and the total number filters to include",
                        "use children only for content that’s related or relevant to filtering"
                    ]
                },
                {
                    "type": "p",
                    "text": "The text field should be clearly labeled so it’s obvious to merchants what they should enter into the field."
                },
                {
                    "type": "list",
                    "items": [
                        "Filter orders"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Enter text here"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the name of the filter if the purpose of the name is clear on its own. For example, when you see a filter badge that readsFulfilled, it’s intuitive that it falls under the Fulfillment status category."
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfilled, Unfulfilled"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfillment: Fulfilled, Unfulfilled"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the filter name is ambiguous on its own, add a descriptive word related to the status. For example,Lowdoesn’t make sense out of context. Add the word “risk” so that merchants know it’s from the Risk category."
                },
                {
                    "type": "list",
                    "items": [
                        "High risk, Low risk"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "High, Low"
                    ]
                },
                {
                    "type": "p",
                    "text": "Group tags from the same category together."
                },
                {
                    "type": "list",
                    "items": [
                        "(Unfulfilled, Fulfilled)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "(Unfulfilled) (fulfilled)"
                    ]
                },
                {
                    "type": "p",
                    "text": "If all tag pills selected: truncate in the middle"
                },
                {
                    "type": "list",
                    "items": [
                        "Paid, par… unpaid"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "All payment status filters selected, Paid, unpa…"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/legacy-stack",
            "title": "Legacy stack — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This is the legacy version of the Stack component which is in the process of being updated to a more flexible and composable API. Use to lay out a horizontal row of components or to achieve no-fuss vertical centering. A stack is made of flexible items that wrap each of the stack’s children. Options provide control of the wrapping, spacing, and relative size of the items in the stack. This component is no longer supported. The newBlockStack\ncomponentcan be used in\ncombination with the new layout primitives to achieve similar results to\nLegacyStack. Learn more about ourcomponent\nlifecycles. Use to quickly lay out a horizontal row of components and maintain their relative sizes. On small screens, children rows wrap down to additional rows as needed."
                },
                {
                    "type": "code",
                    "code": "import{LegacyStack,Badge}from'@shopify/polaris';importReactfrom'react';functionLegacyStackExample(){return(<LegacyStack><Badge>Paid</Badge><Badge>Processing</Badge><Badge>Fulfilled</Badge><Badge>Completed</Badge></LegacyStack>);}"
                },
                {
                    "type": "p",
                    "text": "Stacks should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for small-scale layout tasks when you want a row of components that should wrap on small screen widths",
                        "Be used to vertically center two elements",
                        "Not be used for complex or unique arrangements of components",
                        "Not be used for large-scale page layout"
                    ]
                },
                {
                    "type": "p",
                    "text": "The stack component will treat multiple elements wrapped in a stack item component as one item. By default, each individual element is treated as one stack item. Use the fill prop on a single stack item component to make it fill the rest of the available horizontal space. See the “Stack where a single item fills the remaining space” example."
                },
                {
                    "type": "list",
                    "items": [
                        "To create the large-scale structure of pages,use the layout component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The stack component is for alignment only and doesn’t provide any structural information for assistive technologies. To convey relationships between specific items, consider using thelist component."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/legacy-tabs",
            "title": "Legacy tabs — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to alternate among related views within the same context. This component is no longer supported. The newTabs\ncomponentcan be used as a standalone component,\nbut is used primarily withinIndexFiltersfor navigating\nand creating saved views of filtered IndexTables. Learn more about ourcomponent lifecycles. Use for most cases, especially when the number of tabs may be more than three."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,LegacyTabs}from'@shopify/polaris';import{useState,useCallback}from'react';functionTabsExample(){const[selected,setSelected]=useState(0);consthandleTabChange=useCallback((selectedTabIndex:number)=>setSelected(selectedTabIndex),[],);consttabs=[{id:'all-customers-1',content:'All',accessibilityLabel:'All customers',panelID:'all-customers-content-1',},{id:'accepts-marketing-1',content:'Accepts marketing',panelID:'accepts-marketing-content-1',},{id:'repeat-customers-1',content:'Repeat customers',panelID:'repeat-customers-content-1',},{id:'prospects-1',content:'Prospects',panelID:'prospects-content-1',},];return(<LegacyCard><LegacyTabstabs={tabs}selected={selected}onSelect={handleTabChange}><LegacyCard.Sectiontitle={tabs[selected].content}><p>Tab{selected}selected</p></LegacyCard.Section></LegacyTabs></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "Tabs should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Represent the same kind of content, such as a list-view with different filters applied. Don’t use tabs to group content that is dissimilar.",
                        "Only be active one at a time.",
                        "Not force merchants to jump back and forth to do a single task. Merchants should be able to complete their work and find what they need under each tab.",
                        "Not be used for primary navigation."
                    ]
                },
                {
                    "type": "p",
                    "text": "Tabs should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly labeled to help differentiate the different sections beneath them.",
                        "Have short and scannable labels, generally kept to single word.",
                        "Relate to the section of Shopify they’re on. Imagine the page section title is an invisible noun after the tab. For example, the tabs for the orders section are:AllOpenUnfulfilledUnpaid",
                        "All",
                        "Open",
                        "Unfulfilled",
                        "Unpaid"
                    ]
                },
                {
                    "type": "p",
                    "text": "The tabs for the gift cards section are:"
                },
                {
                    "type": "list",
                    "items": [
                        "All",
                        "New",
                        "Partially used",
                        "Used",
                        "Disabled"
                    ]
                },
                {
                    "type": "p",
                    "text": "And for the customers section, the tabs are:"
                },
                {
                    "type": "list",
                    "items": [
                        "All",
                        "New",
                        "Returning",
                        "Abandoned checkouts",
                        "Email subscribers"
                    ]
                },
                {
                    "type": "p",
                    "text": "Where possible, follow this pattern when writing tabs."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/loading",
            "title": "Loading — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The loading component is used to indicate to merchants that a page is loading or an upload is processing. This component is no longer supported. Please use theApp Bridge Loading\nAPIinstead. Use to indicate that the page is loading."
                },
                {
                    "type": "code",
                    "code": "import{Frame,Loading}from'@shopify/polaris';importReactfrom'react';functionLoadingExample(){return(<div style={{height:'100px'}}><Frame><Loading/></Frame></div>);}"
                },
                {
                    "type": "p",
                    "text": "The loading component must be wrapped in theframecomponent. The loading component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Indicate that the page requested is loading.",
                        "Indicate that an upload has started and the action will soon complete.",
                        "Be used to give feedback for an entire page load or a page mutation like saving a product.",
                        "Be used alongside a component or page element that containsaria-busyto represent what is loading."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To indicate that an action has been received, use theSpinner",
                        "To improve user experience and reduce the appearance of long loading times, use theProgress barcomponent.",
                        "To better represent loading content, useSkeleton pagealong withSkeleton body textandSkeleton display textcomponents."
                    ]
                },
                {
                    "type": "p",
                    "text": "The loading component is implemented using theARIA 1.1 progressbar pattern. It outputs an ARIArole=\"progressbar\"and usesaria-valuemin,aria-value-max, andaria-valuenowto convey the loaded percentage to screen reader users."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/modal",
            "title": "Modal — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Modals are overlays that require merchants to take an action before they can continue interacting with the rest of Shopify. They can be disruptive and should be used thoughtfully and sparingly. This component is no longer supported. Please use theApp Bridge Modal\nAPIinstead. Use as the default option for a modal."
                },
                {
                    "type": "code",
                    "code": "import{Button,Frame,Modal,TextContainer}from'@shopify/polaris';import{useState,useCallback}from'react';functionModalExample(){const[active,setActive]=useState(true);consthandleChange=useCallback(()=>setActive(!active),[active]);constactivator=<ButtononClick={handleChange}>Open</Button>;return(<div style={{height:'500px'}}><Frame><Modalactivator={activator}open={active}onClose={handleChange}title=\"Reach more shoppers with Instagram product tags\"primaryAction={{content:'Add Instagram',onAction:handleChange,}}secondaryActions={[{content:'Learn more',onAction:handleChange,},]}><Modal.Section><TextContainer><p>UseInstagramposts to share your productswithmillionsofpeople.Letshoppers buyfromyour store without leavingInstagram.</p></TextContainer></Modal.Section></Modal></Frame></div>);}"
                },
                {
                    "type": "p",
                    "text": "Use modals for confirmations and conditional changes. They should be thought of as temporary and not be used for information or actions that need to live on in the UI in a persistent way. Don’t use modals to display complex forms or large amounts of information. Modals should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Require that merchants take an action.",
                        "Close when merchants press theXbutton, theCancelbutton, theEsckey, or when merchants click or tap the area outside the modal.",
                        "Not have more than two buttons (primary and secondary) at the bottom. This prevents unclear action hierarchy and crowding on mobile screens. Since modals are for focused tasks, they should have focused actions. In some cases however, atertiary actionmay be appropriate."
                    ]
                },
                {
                    "type": "p",
                    "text": "Modal titles should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use a clear {verb}+{noun} question or statement",
                        "Follow the content guidelines forheadings and subheadings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Edit email address",
                        "Delete customer?",
                        "Discard unsaved changes?"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Edit the email address for this order",
                        "Are you sure you want to delete customer?",
                        "Discard?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Body content should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Actionable: start sentences with imperative verbs when telling a merchant what actions are available to them (especially something new). Don’t use permissive language like \"you can\"."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Notification emails will be sent to this address.",
                        "This can’t be undone."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "You can edit the email address where emails will be sent.",
                        "Are you sure you want to delete the variant Dark Blue Tee/Small/Silk? You cannot reverse this."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Structured for merchant success: always put the most critical information first.",
                        "Clear: use the verb “need” to help merchants understand when they’re required to do something."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To buy a shipping label, you need to enter the total weight of your shipment, including packaging."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To buy a shipping label, you must enter the total weight of your shipment, including packaging."
                    ]
                },
                {
                    "type": "p",
                    "text": "Actions should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive a merchant by mislabeling an action."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create order",
                        "Buy shipping label"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "New order",
                        "Buy"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Action-led: actions should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on actions except in the case of common actions like Save, Close, Cancel, or OK."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Activate Apple Pay",
                        "View shipping settings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Try Apple Pay",
                        "View your settings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Scannable: avoid unnecessary words and articles such as the, an, or a."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add menu item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add a menu item"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tertiary actions should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Only be used when the action requires the context of the content in the modal",
                        "Never be used to dismiss the modal"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use a plain button for a tertiary action if needed Use a tertiary action for a destructive action Body content should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Actionable: start sentences with imperative verbs when telling a merchant what actions are available to them (especially something new). Don’t use permissive language like \"you can\"."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Notification emails will be sent to this address."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "You can edit the email address where emails will be sent."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Structured for merchant success: always put the most critical information first.",
                        "Clear: use the verb “need” to help merchants understand when they’re required to do something."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To buy a shipping label, you need to enter the total weight of your shipment, including packaging."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To buy a shipping label, you must enter the total weight of your shipment, including packaging."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To present large amounts of additional information or actions that don’t require confirmation,use the collapsible componentto expand content in place within the page",
                        "To present a small amount of content or a menu of actions in a non-blocking overlay,use the popover component",
                        "To communicate a change or condition that needs the merchant’s attention within the context of a page,use the banner component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Modals use ARIArole=”dialog”to convey to screen reader users that they work like native dialog windows.",
                        "If you set thetitleprop to give the modal component a heading, then thetitleis used to label the dialog element witharia-labelledby. This helps to convey the purpose of the modal to screen reader users when it displays.",
                        "After a modal is closed, in order to return focus to the button that launched it, pass the button to the modal as anactivator.",
                        "To ensure thatToasts are read out by a screen reader when a Modal is open, apps should be wrapped in aFramecomponent."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "When a modal opens, focus moves automatically to the modal container so it can be accessed by keyboard users",
                        "While the modal is open, keyboard focus shouldn’t leave the modal",
                        "Merchants can dismiss the modal with the keyboard by activating theXbutton, theCancelbutton if one is provided, or by pressing theEsckey",
                        "After a modal is closed, focus returns to the button that launched it"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/navigation",
            "title": "Navigation — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The navigation component is used to display the primary navigation in the sidebar of theframeof an application. Navigation includes a list of links that merchants use to move between sections of the application. This component is no longer supported. Please use theApp Bridge Navigation\nMenu\nAPIinstead. Use to present a navigation menu in theframe."
                },
                {
                    "type": "code",
                    "code": "import{Frame,Navigation}from'@shopify/polaris';import{HomeIcon,OrderIcon,ProductIcon}from'@shopify/polaris-icons';importReactfrom'react';functionNavigationExample(){return(<Frame><Navigationlocation=\"/\"><Navigation.Sectionitems={[{url:'#',label:'Home',icon:HomeIcon,},{url:'#',excludePaths:['#'],label:'Orders',icon:OrderIcon,badge:'15',},{url:'#',excludePaths:['#'],label:'Products',icon:ProductIcon,},]}/></Navigation></Frame>);}"
                },
                {
                    "type": "p",
                    "text": "The navigation component must be passed to theframecomponent. The mobile version of the navigation component appears in thetop barcomponent. The navigation component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Contain primary navigation items that perform an action when clicked. Each action should navigate to a URL or trigger another action like a modal overlay.",
                        "Only use secondary actions for supplementary actions to the primary actions.",
                        "Provide a non-primary link or action as a secondary action to a section or an item.",
                        "Group navigation items into sections based on related categories.",
                        "Use a section title to clarify the category of a section.",
                        "Use a major icon for item actions.",
                        "Use a minor icon for secondary actions.",
                        "Use the provided navigation section component to group navigation items.",
                        "Not add additional components, likebadge, in navigation items. Example: Don‘t add theNew badge."
                    ]
                },
                {
                    "type": "p",
                    "text": "Navigation should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use sentence case for primary and secondary navigation items"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Online store"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Online Store"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use as few words as possible to describe each item label"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products in your store"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use all caps for section labels"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "SALES CHANNELS"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Sales channels"
                    ]
                },
                {
                    "type": "p",
                    "text": "A navigation section groups together related navigation items. Navigation sections can be clarified by a heading. Merchants can use a section to easily find navigation items within a specific category. The content of the navigation component consists of navigation items. Each item is a link or action a merchant can take. Rollup allows items in a navigation section to roll up and be revealed when they are of use to the merchant. Action allows a complementary icon-only action to render next to the section title."
                },
                {
                    "type": "list",
                    "items": [
                        "To provide the structure for the navigation component, including the left sidebar and the top bar use theframecomponent.",
                        "To display the navigation component on small screens, to provide search and a user menu, or to theme theframecomponent to reflect an application’s brand, use thetop barcomponent.",
                        "To tell merchants their options once they have made changes to a form on the page use thecontextual save barcomponent.",
                        "To provide quick, at-a-glance feedback on the outcome of an action, use thetoastcomponent.",
                        "To indicate to merchants that a page is loading or an upload is processing use theloadingcomponent.",
                        "To alternate among related views within the same context, use thetabscomponent.",
                        "To embed a single action or link within a larger span of text, use thelinkcomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/setting-toggle",
            "title": "Setting toggle — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to give merchants control over a feature or option that can be turned on or off. The SettingToggle is a simple layout component that composes its children with\na button in a card. This pattern should be built using the primitive layout\nand typography components. See the \"With primitive components\" example to\nlearn how to build setting toggles with primitive components. Use to allow merchants to toggle a setting that has an on or off state. Display the name of the setting and provide a description so merchants have the context needed to decide whether or not to enable the setting. This pattern is built using the layout and typography components, instead of the deprecatedSettingTogglecomponent."
                },
                {
                    "type": "code",
                    "code": "import{Text,InlineStack,Box,Card,Button,Badge,BlockStack,useBreakpoints,}from'@shopify/polaris';import{InfoIcon}from'@shopify/polaris-icons';import{useState,useCallback}from'react';exportfunctionWithPrimitiveComponents(){const[enabled,setEnabled]=useState(true);consthandleToggle=useCallback(()=>setEnabled((enabled)=>!enabled),[]);constcontentStatus=enabled?'Turn off':'Turn on';consttoggleId='setting-toggle-uuid';constdescriptionId='setting-toggle-description-uuid';const{mdDown}=useBreakpoints();constbadgeStatus=enabled?'success':undefined;constbadgeContent=enabled?'On':'Off';consttitle='Test mode';constdescription='Simulate transactions to test your checkout and order flows. When test mode is on, checkout does not accept real credit cards.';constsettingStatusMarkup=(<Badgetone={badgeStatus}toneAndProgressLabelOverride={`Setting is${badgeContent}`}>{badgeContent}</Badge>);consthelpLink=(<Buttonvariant=\"plain\"icon={InfoIcon}accessibilityLabel=\"Learn more\"/>);constsettingTitle=title?(<InlineStackgap=\"200\"wrap={false}><InlineStackgap=\"200\"align=\"start\"blockAlign=\"baseline\"><label htmlFor={toggleId}><Textvariant=\"headingMd\"as=\"h6\">{title}</Text></label><InlineStackgap=\"200\"align=\"center\"blockAlign=\"center\">{settingStatusMarkup}{helpLink}</InlineStack></InlineStack></InlineStack>):null;constactionMarkup=(<Buttonrole=\"switch\"id={toggleId}ariaChecked={enabled?'true':'false'}onClick={handleToggle}size=\"slim\">{contentStatus}</Button>);constheaderMarkup=(<Boxwidth=\"100%\"><InlineStackgap=\"1200\"align=\"space-between\"blockAlign=\"start\"wrap={false}>{settingTitle}{!mdDown?(<BoxminWidth=\"fit-content\"><InlineStackalign=\"end\">{actionMarkup}</InlineStack></Box>):null}</InlineStack></Box>);constdescriptionMarkup=(<BlockStackgap=\"400\"><Textid={descriptionId}variant=\"bodyMd\"as=\"p\"tone=\"subdued\">{description}</Text>{mdDown?(<Boxwidth=\"100%\"><InlineStackalign=\"start\">{actionMarkup}</InlineStack></Box>):null}</BlockStack>);return(<Card><BlockStackgap={{xs:'400',sm:'500'}}><Boxwidth=\"100%\"><BlockStackgap={{xs:'200',sm:'400'}}>{headerMarkup}{descriptionMarkup}</BlockStack></Box><Textvariant=\"bodyMd\"as=\"p\">Yourcheckout is only accepting test payments.</Text></BlockStack></Card>);}"
                },
                {
                    "type": "p",
                    "text": "Settings toggles should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Include a title",
                        "Include body content describing the experience when the setting is turned on",
                        "Use a badge to clearly indicate whether the setting is turned on or off",
                        "Use a default button for both states. A primary button can be misinterpreted as the setting being turned on."
                    ]
                },
                {
                    "type": "p",
                    "text": "If more information is needed to explain setting details or functionality, include theInfoicon and link to help content or related documentation. The setting toggle component should only be used when:"
                },
                {
                    "type": "list",
                    "items": [
                        "The setting is stand alone",
                        "There are two binary options that are “On”/“Off”"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the setting is dependent on other settings, uses progressive disclosure, or has options that are not a simple “On”/“Off”, use a different UI element such asCheckboxorRadio button. The setting toggle title should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be the setting name, written as a noun or gerund (-ing) phrase (“Test mode” or “Automatic order archiving”)",
                        "Represent the experience when the setting is turned on—even if the setting restricts, limits, removes, or hides functionality"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Test mode",
                        "Order archiving",
                        "Self-serve returns"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Simulate test payments",
                        "Automatically archive the order",
                        "Allow customers to manage returns"
                    ]
                },
                {
                    "type": "p",
                    "text": "The button for the setting toggle should always say either “Turn on” or “Turn off” depending on whether the setting can be turned on or off."
                },
                {
                    "type": "list",
                    "items": [
                        "Turn on",
                        "Turn off"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Enable",
                        "Disable",
                        "Activate",
                        "Deactivate"
                    ]
                },
                {
                    "type": "p",
                    "text": "In addition to the setting description, supporting content can dynamically display based on state. This should be used sparingly and included only if it adds significant clarity or value. For example, “Your customers won’t receive automatic shipping updates.” To let merchants connect or disconnect third-party services and apps, use theaccount connectioncomponent. TheSettingTogglecomponent is implemented as an HTML<button>with theswitchARIA role.\nThe components passed as children will automatically be wrapped in a label element describing the<button>. Enabling and disablingSettingTogglewill update thearia-checkedattribute to\"true\"or\"false\". To learn more about button accessibility, check out thebuttoncomponent documentation."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/sheet",
            "title": "Sheet — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A sheet is a large container that enters from the edge of the screen when triggered by the merchant. It’s used to provide merchants with actions and information contextual to the page. It doesn’t interrupt their flow like a modal. The sheet component encourages designers to create a new layer on top of the\npage instead of improving the existing user interface. It also blocks other\nparts of the UI, forces users to switch context, and adds complexity to\notherwise simple interactions. Use as the default option for a sheet."
                },
                {
                    "type": "code",
                    "code": "import{List,Button,Page,LegacyCard,Sheet,Scrollable,ChoiceList,Text,}from'@shopify/polaris';import{XIcon}from'@shopify/polaris-icons';import{useState,useCallback}from'react';functionSheetExample(){const[sheetActive,setSheetActive]=useState(true);const[salesChannels]=useState([{value:'onlineStore',label:'Online Store'},{value:'facebook',label:'Facebook'},{value:'googleShopping',label:'Google shopping'},{value:'facebookMarketing',label:'Facebook Marketing'},]);const[selected,setSelected]=useState<string[]>([]);consttoggleSheetActive=useCallback(()=>setSheetActive((sheetActive)=>!sheetActive),[],);consthandleSelectedChange=useCallback((value:string[])=>setSelected(value),[],);letselectedSalesChannels:{value:string;label:string}[]=[];selected.forEach((selection)=>{salesChannels.forEach((channel)=>{if(channel.value===selection){selectedSalesChannels.push(channel);}});});consthasSelectedSalesChannels=selectedSalesChannels.length>0;constsalesChannelsCardMarkup=hasSelectedSalesChannels?(<List>{selectedSalesChannels.map((channel,index)=>(<List.Itemkey={index}>{channel.label}</List.Item>))}</List>):(<divstyle={{alignItems:'center',display:'flex',justifyContent:'space-between',width:'100%',}}><p>Nosales channels selected</p><ButtononClick={toggleSheetActive}>Managesales channels</Button></div>);constsalesChannelAction=hasSelectedSalesChannels?[{onAction:toggleSheetActive,content:'Manage sales channels',},]:undefined;return(<PagenarrowWidth><LegacyCardsectionedsubduedtitle=\"Product availability\"actions={salesChannelAction}>{salesChannelsCardMarkup}</LegacyCard><Sheetopen={sheetActive}onClose={toggleSheetActive}accessibilityLabel=\"Manage sales channels\"><divstyle={{display:'flex',flexDirection:'column',height:'100%',}}><divstyle={{alignItems:'center',borderBottom:'1px solid #DFE3E8',display:'flex',justifyContent:'space-between',padding:'1rem',width:'100%',}}><Textvariant=\"headingMd\"as=\"h2\">Managesales channels</Text><ButtonaccessibilityLabel=\"Cancel\"icon={XIcon}onClick={toggleSheetActive}variant=\"plain\"/></div><Scrollablestyle={{padding:'1rem',height:'100%'}}><ChoiceListtitle=\"Select a sales channel\"name=\"salesChannelsList\"choices={salesChannels}selected={selected}titleHiddenallowMultipleonChange={handleSelectedChange}/></Scrollable><divstyle={{alignItems:'center',borderTop:'1px solid #DFE3E8',display:'flex',justifyContent:'space-between',padding:'1rem',width:'100%',}}><ButtononClick={toggleSheetActive}>Cancel</Button><Buttonvariant=\"primary\"onClick={toggleSheetActive}>Done</Button></div></div></Sheet></Page>);}"
                },
                {
                    "type": "p",
                    "text": "Sheets provide an opportunity to let merchants dig into more detail on their current task, or access information for their current task in a different way. Although merchants may be able to see content in the sheet and the main page content at the same time, they should only be expected to interact with one or the other at any given time."
                },
                {
                    "type": "list",
                    "items": [
                        "Use theonCloseprop so that the sheet can be closed with theesckey as well as with button-based controls",
                        "Use a button to open the sheet",
                        "When the sheet opens, focus moves to it so merchants who rely on the keyboard and screen readers can access it",
                        "Focus is kept in the sheet until it is dismissed",
                        "When the sheet closes, focus moves back to the button that launched it"
                    ]
                },
                {
                    "type": "p",
                    "text": "At small screen sizes, the sheet component enters the page from the bottom of the screen. At larger screen sizes, the sheet component enters the page from the right side of the scren. The sheet component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Include a heading that summarizes the actions and information in the sheet, for example, More filters",
                        "Be openable through clear actions, like a link or button",
                        "Be close-able through clear actions, like Done, the [X] button, and the esc key",
                        "Include information and actions contextual to the current task",
                        "Not block merchants from completing their task, like a modal would",
                        "Not open from within another sheet (only one sheet can be open at a time)",
                        "Preserve its state—the settings and actions won’t reset when it’s closed"
                    ]
                },
                {
                    "type": "p",
                    "text": "The sheet component is best used in cases where the merchant needs to see elements behind it, and for that reason it uses a transparent backdrop. The backdrop is a full screen overlay which closes its parent component when pressed."
                },
                {
                    "type": "list",
                    "items": [
                        "To offer an action before merchants can go to the next step in the flow, use themodal component",
                        "To present a small amount of content or a menu of actions in a non-blocking overlay, use thepopover component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/subheading",
            "title": "Subheading — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Subheadings are used for the title of any sub-sections in top-level page sections. This component is no longer supported. Please use the Text component instead."
                },
                {
                    "type": "code",
                    "code": "-<Subheading>Accounts</Subheading>+<Text variant=\"headingSm\" as=\"h3\">Accounts</Text>"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/text-container",
            "title": "Text container — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A text container is used to wrap text elements such as paragraphs, headings, and lists to give them vertical spacing. The TextContainer is a simple layout component which was made redundant by the\nBlockStack component. Use BlockStack withgapvalues of 2, 4, and 5 to\nreplicate layouts. Use this component for default vertical spacing."
                },
                {
                    "type": "code",
                    "code": "import{TextContainer,Text}from'@shopify/polaris';importReactfrom'react';functionTextContainerExample(){return(<TextContainer><Textvariant=\"headingMd\"as=\"h2\">InstalltheShopifyPOSApp</Text><p>ShopifyPOSis the easiest way to sell your productsinperson.AvailableforiPad,iPhone,andAndroid.</p></TextContainer>);}"
                },
                {
                    "type": "p",
                    "text": "The closer the spacing, the closer the relationship between content topics. The closeness visually represents the relationship."
                },
                {
                    "type": "list",
                    "items": [
                        "Use tight spacing to relate content topics to each other",
                        "Use loose spacing to separate concepts that are independent of each other"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For more layout variations, or if you’re looking to vertically space components other than text, useBlockStack."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/text-style",
            "title": "Text style — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Text style enhances text with additional visual meaning. For example, using subdued text to de-emphasize it from its surrounding text. This component is no longer supported. Please use the Text component instead."
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"subdued\">No supplier listed</TextStyle>+<Text as=\"span\" color=\"subdued\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"strong\">No supplier listed</TextStyle>+<Text as=\"span\" fontWeight=\"semibold\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"positive\">No supplier listed</TextStyle>+<Text as=\"span\" color=\"success\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"negative\">No supplier listed</TextStyle>+<Text as=\"span\" color=\"critical\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"warning\">No supplier listed</TextStyle>+<Text as=\"span\" color=\"warning\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"code\">No supplier listed</TextStyle>+<Text as=\"span\"><InlineCode>No supplier listed</InlineCode></Text>"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/toast",
            "title": "Toast — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The toast component is a non-disruptive message that appears at the bottom of the interface to provide quick, at-a-glance feedback on the outcome of an action. This component is no longer supported. Please use theApp Bridge Toast\nAPIinstead. Use to convey general confirmation or actions that aren’t critical. For example, you might show a toast message to inform the merchant that their recent action was successful."
                },
                {
                    "type": "code",
                    "code": "import{Toast,Frame,Page,Button}from'@shopify/polaris';import{useState,useCallback}from'react';functionToastExample(){const[active,setActive]=useState(false);consttoggleActive=useCallback(()=>setActive((active)=>!active),[]);consttoastMarkup=active?(<Toastcontent=\"Message sent\"onDismiss={toggleActive}/>):null;return(<div style={{height:'250px'}}><Frame><Pagetitle=\"Toast example\"><ButtononClick={toggleActive}>ShowToast</Button>{toastMarkup}</Page></Frame></div>);}"
                },
                {
                    "type": "p",
                    "text": "The toast component must be wrapped in theframecomponent. Toast should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for short messages to confirm an action",
                        "Not go over 3 words",
                        "Rarely be used for error messages"
                    ]
                },
                {
                    "type": "p",
                    "text": "When to use:"
                },
                {
                    "type": "list",
                    "items": [
                        "For success messages",
                        "Only for non-critical errors that are relevant in the moment and can be explained in 3 words. For example, if there’s an internet connection issue, the toast would say, Internet disconnected."
                    ]
                },
                {
                    "type": "p",
                    "text": "When not to use:"
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid using toast for error messages. Always try to use a banner to prominently inform merchants about persistent errors."
                    ]
                },
                {
                    "type": "p",
                    "text": "Toast messages should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Short and affirmative",
                        "Written in the pattern of: noun + verb"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Product updated",
                        "Collection added",
                        "Customer updated",
                        "Internet disconnected",
                        "Connection timed out"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "No internet connection",
                        "Can’t charge negative tax rates",
                        "Your online store has a maximum of 20 themes. Delete unused themes to add more.",
                        "Your product has been successfully updated",
                        "We were unable to save the customer",
                        "Your Order was Archived Today",
                        "Discount: Saved successfully"
                    ]
                },
                {
                    "type": "p",
                    "text": "Only include an action in toast if the same action is available elsewhere on the page. For example:"
                },
                {
                    "type": "list",
                    "items": [
                        "If merchants need to reload a section, offer the call to action [Reload] in the toast. If they miss the toast message, they can also refresh the entire page.",
                        "If merchants delete an image, offer the option to [Undo] the deletion. If they miss it in the toast message, they can still retrieve it from somewhere else."
                    ]
                },
                {
                    "type": "p",
                    "text": "Action should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Keep the action label short, preferably 1 verb.",
                        "Not have actions, like [Cancel], for dismissing toast. The [X] to dismiss is already included in the component.",
                        "Be used with a duration of at least 10,000 milliseconds for accessibility."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Undo",
                        "Change",
                        "Edit",
                        "View",
                        "Retry"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "OK",
                        "Got it",
                        "Cancel product",
                        "Continue to collection",
                        "Dismiss"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To present a small amount of content or a menu of actions in a non-blocking overlay,use the popover component",
                        "To communicate a change or condition that needs the merchant’s attention within the context of a page,use the banner component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The content of the toast component is implemented as an ARIA live region usingaria-live=\"assertive\". When the toast appears, screen readers will interrupt any announcement a screen reader is currently making. Avoid using toast for critical information that merchants need to act on immediately. Toast might be difficult for merchants with low vision or low dexterity to access because it:"
                },
                {
                    "type": "list",
                    "items": [
                        "Disappears automatically",
                        "Can’t be easily accessed with the keyboard",
                        "Might appear outside the proximity of the merchant’s current focus"
                    ]
                },
                {
                    "type": "p",
                    "text": "To ensure that Toasts are read out by a screen reader when a Modal is open, apps should be wrapped in aFramecomponent. Make sure that merchants can also accomplish the action in the toast another way, since the toast action may be difficult to access for some merchants. If the toast action is not available somewhere else on the page, for example a retry action that reloads a section, it should have a fallback action, for example a browser refresh. Toast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/top-bar",
            "title": "Top bar — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The top bar is a header component that allows merchants to search, access menus, and navigate by clicking on the logo. It’s always visible at the top of interfaces like Shopify or Shopify Plus. Third-party apps that use the top bar can customize the color to match their brand using theapp providercomponent and are required to use their own logo. This component is no longer supported. Use to provide structure for the top of an application. Style the top bar component using the app provider component with a theme. Providing just thebackgroundkey for the top bar component theme will result in intelligent defaults being set for complementary colors with contrasting text."
                },
                {
                    "type": "code",
                    "code": "import{TopBar,ActionList,Icon,Frame,Text}from'@shopify/polaris';import{ArrowLeftIcon,QuestionCircleIcon}from'@shopify/polaris-icons';import{useState,useCallback}from'react';functionTopBarExample(){const[isUserMenuOpen,setIsUserMenuOpen]=useState(false);const[isSecondaryMenuOpen,setIsSecondaryMenuOpen]=useState(false);const[isSearchActive,setIsSearchActive]=useState(false);const[searchValue,setSearchValue]=useState('');consttoggleIsUserMenuOpen=useCallback(()=>setIsUserMenuOpen((isUserMenuOpen)=>!isUserMenuOpen),[],);consttoggleIsSecondaryMenuOpen=useCallback(()=>setIsSecondaryMenuOpen((isSecondaryMenuOpen)=>!isSecondaryMenuOpen),[],);consthandleSearchResultsDismiss=useCallback(()=>{setIsSearchActive(false);setSearchValue('');},[]);consthandleSearchChange=useCallback((value:string)=>{setSearchValue(value);setIsSearchActive(value.length>0);},[]);consthandleNavigationToggle=useCallback(()=>{console.log('toggle navigation visibility');},[]);constlogo={topBarSource:'https://cdn.shopify.com/s/files/1/2376/3301/files/Shopify_Secondary_Inverted.png',width:86,url:'#',accessibilityLabel:'Shopify',};constuserMenuMarkup=(<TopBar.UserMenuactions={[{items:[{content:'Back to Shopify',icon:ArrowLeftIcon}],},{items:[{content:'Community forums'}],},]}name=\"Dharma\"detail=\"Jaded Pixel\"initials=\"D\"open={isUserMenuOpen}onToggle={toggleIsUserMenuOpen}/>);constsearchResultsMarkup=(<ActionListitems={[{content:'Shopify help center'},{content:'Community forums'}]}/>);constsearchFieldMarkup=(<TopBar.SearchFieldonChange={handleSearchChange}value={searchValue}placeholder=\"Search\"showFocusBorder/>);constsecondaryMenuMarkup=(<TopBar.MenuactivatorContent={<span><Iconsource={QuestionCircleIcon}/><Textas=\"span\"visuallyHidden>Secondarymenu</Text></span>}open={isSecondaryMenuOpen}onOpen={toggleIsSecondaryMenuOpen}onClose={toggleIsSecondaryMenuOpen}actions={[{items:[{content:'Community forums'}],},]}/>);consttopBarMarkup=(<TopBarshowNavigationToggleuserMenu={userMenuMarkup}secondaryMenu={secondaryMenuMarkup}searchResultsVisible={isSearchActive}searchField={searchFieldMarkup}searchResults={searchResultsMarkup}onSearchResultsDismiss={handleSearchResultsDismiss}onNavigationToggle={handleNavigationToggle}/>);return(<div style={{height:'250px'}}><FrametopBar={topBarMarkup}logo={logo}/></div>);}"
                },
                {
                    "type": "p",
                    "text": "The top bar component must be passed to theframecomponent. The top bar component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Not provide global navigation for an applicationUse thenavigation componentinstead",
                        "Use thenavigation componentinstead",
                        "Include search to help merchants find resources and navigate an application",
                        "Include a user menu component to indicate the logged-in merchant and provide them with global actions",
                        "Provide a color through theapp providercomponent to style the background",
                        "The global menu text should contrast with the rest of the top bar and pass the minimum contrast ratio of the WCAG 2.0 guidelines",
                        "Use an SVG file for the logo",
                        "Use a logo that passes the minimum contrast ratio of the WCAG 2.0 guidelines when compared to the top bar background color",
                        "Show the navigation toggle so it appears on small screen"
                    ]
                },
                {
                    "type": "p",
                    "text": "The placeholder content for the search field should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Always say \"Search\"",
                        "Never include an ellipsis"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Search"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "search..."
                    ]
                },
                {
                    "type": "p",
                    "text": "A component that composes together an activator and a popover containing an action list to create a dropdown menu. A specialized menu component that is activated by a user avatar. A text field component that is tailor-made for a search use-case."
                },
                {
                    "type": "list",
                    "items": [
                        "To provide the structure for the top bar component, as well as the primary navigation use theframecomponent.",
                        "To display the primary navigation within the frame of an application, use thenavigationcomponent.",
                        "To tell merchants their options once they have made changes to a form on the page use thecontextual save barcomponent.",
                        "To provide quick, at-a-glance feedback on the outcome of an action, use thetoastcomponent.",
                        "To indicate to merchants that a page is loading or an upload is processing use theloadingcomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/deprecated/visually-hidden",
            "title": "Visually hidden — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use when an element needs to be available to assistive technology (for example, a screen reader) but otherwise hidden. This component is no longer supported. Please use the Text component instead."
                },
                {
                    "type": "code",
                    "code": "-<VisuallyHidden>-<Heading>Title and description</Heading>-</VisuallyHidden>+<Text visuallyHidden variant=\"headingMd\" as=\"h2\">Title and description</Text>"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/description-list",
            "title": "Description list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Description lists are a way to organize and explain related information. They’re particularly useful when you need to list and define terms such as in a glossary. Use when you need to present merchants with a list of items or terms alongside descriptions and explanations."
                },
                {
                    "type": "code",
                    "code": "import{DescriptionList}from'@shopify/polaris';importReactfrom'react';functionExample(){return(<DescriptionListitems={[{term:'Logistics',description:'The management of products or other resources as they travel between a point of origin and a destination.',},{term:'Sole proprietorship',description:'A business structure where a single individual both owns and runs the company.',},{term:'Discount code',description:'A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.',},]}/>);}"
                },
                {
                    "type": "p",
                    "text": "Collection of items for list. Determines the spacing between list items. Description lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Contain terms and associated explanations, or descriptions for each term.",
                        "Provide information that isn’t action-oriented.",
                        "Not be an excuse for using unnecessarily complicated or jargon-filled language. Generally, if merchants need a description list to understand the language in Shopify, we should look for opportunities to simplify the language.",
                        "Not be used to upsell merchants on a feature or service."
                    ]
                },
                {
                    "type": "p",
                    "text": "Terms should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Written in sentence case (the first word capitalized, the rest lowercase)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discount code"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discount Code"
                    ]
                },
                {
                    "type": "p",
                    "text": "Terms descriptions should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Directly related to the term they’re describing"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discount code: A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discount code: Having a sale on your store is a great way to sell products quickly."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Written to describe the merchant benefit or utility",
                        "No more than one or two short sentences in length",
                        "Written in sentence case with all appropriate punctuation, including ending each sentence with a period",
                        "Conversational by using articles (the, a, an)",
                        "Written using plain language"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Abandoned checkout: The details of a checkout that was started but not completed, including the products added and the customer’s details."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Abandoned checkout: Details of products added to checkout but not purchased"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To create a list of actions or navigation,use the action list component."
                    ]
                },
                {
                    "type": "p",
                    "text": "The description list component produces a description list wrapper (<dl>), terms (<dt>), and definitions (<dd>) to convey the relationships between the list items to assistive technology users."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators",
            "title": "Feedback indicators — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Inform merchants about the status of a process, provide feedback on actions and tasks, or indicate progress."
                },
                {
                    "type": "list",
                    "items": [
                        "BadgeUsed to inform merchants of the tone of an object or an action taken.",
                        "BannerInforms merchants about important changes or persistent conditions in a prominent way.",
                        "Exception listHelps merchants notice important, standout information that adds extra context to a task.",
                        "Progress barUsed to visually represent the completion of a task or operation.",
                        "Skeleton body textProvides a low fidelity representation of content before it appears, improving perceived load times.",
                        "Skeleton display textProvides a low fidelity representation of content before it appears, improving perceived load times.",
                        "Skeleton pageUsed with other skeleton loading components to provide a low fidelity representation of the UI before content appears.",
                        "Skeleton tabsProvides a low fidelity representation of content before it appears, improving perceived load times.",
                        "Skeleton thumbnailProvides a low fidelity representation of an image before it appears, improving perceived load times.",
                        "SpinnerUsed to notify merchants that their action is being processed. Used for content that can’t be represented with skeleton loading components."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/badge",
            "title": "Badge — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Badges are used to inform merchants of the tone of an object or of an action that’s been taken. Use to give a non-critical tone update on a piece of information or action."
                },
                {
                    "type": "code",
                    "code": "import{Badge,Card}from'@shopify/polaris';importReactfrom'react';functionBadgeExample(){return(<Card><Badge>Fulfilled</Badge></Card>);}"
                },
                {
                    "type": "p",
                    "text": "This component defines its props in a way that our website can't automatically parse. The type definition is shown below, but it might be hard to read. Badges benefit merchants by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using established color patterns so that merchants can quickly identify their tone or importance level",
                        "Being clearly labeled with short, scannable text",
                        "Being positioned to clearly identify the object they’re informing or labelling"
                    ]
                },
                {
                    "type": "p",
                    "text": "Badge labels should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use a single word to describe the tone of an object.",
                        "Only use two words if you need to describe a complex state. For example, “Partially refunded” and “Partially fulfilled”.",
                        "Always describe the tone in the past tense. For example, refunded not refund."
                    ]
                },
                {
                    "type": "p",
                    "text": "The available badges for financial tone are:"
                },
                {
                    "type": "list",
                    "items": [
                        "Authorized",
                        "Pending",
                        "Paid",
                        "Unpaid",
                        "Pending",
                        "Voided",
                        "Partially paid",
                        "Partially refunded",
                        "Refunded"
                    ]
                },
                {
                    "type": "p",
                    "text": "The available badges for fulfillment tone are:"
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfilled",
                        "Complete",
                        "Partial",
                        "Unfulfilled",
                        "Restocked"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use alternatives to existing badge options. Only create a new badge option if there aren’t any existing options to communicate the tone you need."
                },
                {
                    "type": "list",
                    "items": [
                        "To represent an interactive list of categories provided by merchants,use tags"
                    ]
                },
                {
                    "type": "p",
                    "text": "Badges that convey information with icons or color include text provided by thevisually hidden component. This text is read out by assistive technologies like screen readers so that merchants with vision issues can access the meaning of the badge in context."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/banner",
            "title": "Banner — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Informs merchants about important changes or persistent conditions. Use this component if you need to communicate to merchants in a prominent way. Banners are placed at the top of the page or section they apply to, and below the page or section header. Use to convey general information or actions that aren’t critical. For example, you might show a banner that asks for merchant feedback. Default banners contain lower priority information and should always be dismissible."
                },
                {
                    "type": "code",
                    "code": "import{Banner}from'@shopify/polaris';importReactfrom'react';functionBannerExample(){return(<Bannertitle=\"Order archived\"onDismiss={()=>{}}><p>Thisorder was archived onMarch7,2017at3:12pmEDT.</p></Banner>);}"
                },
                {
                    "type": "p",
                    "text": "Title content for the banner. Status icon to display in the banner. Use only major icons. Renders the banner without a status icon. Sets the status of the banner. The child elements to render in the banner. Action for banner. Action | Displays a secondary action. Callback when banner is dismissed. Disables screen reader announcements when changing the content of the banner. Banners should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used thoughtfully and sparingly for only the most important information.",
                        "Not be used to call attention to what a merchant needs to do in the UI instead of making the action clear in the UI itself.",
                        "Not be the primary entry point to information or actions merchants need on a regular basis.",
                        "Be dismissible unless they contain critical information or an important step merchants need to take.",
                        "Use the default icon forsuccess,info,warningandcriticaltones. If the status icon is changed, use onlymajor icons.",
                        "Remove the status icon only in scenarios where it takes up too much space, such as very small breakpoints or in side navigation cards."
                    ]
                },
                {
                    "type": "p",
                    "text": "Banners should be placed in the appropriate context:"
                },
                {
                    "type": "list",
                    "items": [
                        "Banners relevant to an entire page should be placed at the top of that page, below the page header. They should occupy the full width of the content area.",
                        "Banners related to a section of a page (like a card, popover, or modal) should be placed inside that section, below any section heading. These banners have less spacing and a pared-back design to fit within a content context.",
                        "Banners related to an element more specific that a section should be placed immediately above or below that element."
                    ]
                },
                {
                    "type": "p",
                    "text": "Banners should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Focus on a single theme, piece of information, or required action to avoid overwhelming merchants.",
                        "Be concise and scannable—merchants shouldn’t need to spend a lot of time figuring out what they need to know and do.",
                        "Be limited to a few important calls to action with no more than one primary action.",
                        "Not be used for marketing information or upsell—use callout cardsinstead."
                    ]
                },
                {
                    "type": "p",
                    "text": "To learn about writing helpful and accessible error message text, see the guidelines forerror messages. Banner titles should follow the content guidelines forheadings and subheadings. Body content should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be concise: keep content to 1 to 2 sentences where possible",
                        "Clarify the benefit of the main task",
                        "Be written in sentence case and use appropriate punctuation",
                        "Avoid repeating the heading",
                        "Explain how to resolve the issue, particularly for warning and critical banners"
                    ]
                },
                {
                    "type": "p",
                    "text": "Your online store has a maximum of 20 themes. Delete unused themes to add more. You have reached your theme limit. Your online store has reached its maximum of 20 themes. To add more themes, delete themes you’re no longer using. Buttons and links should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button."
                    ]
                },
                {
                    "type": "p",
                    "text": "Buy shipping label Buy"
                },
                {
                    "type": "list",
                    "items": [
                        "Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                    ]
                },
                {
                    "type": "p",
                    "text": "Activate Apple Pay Try Apple Pay"
                },
                {
                    "type": "list",
                    "items": [
                        "Scannable: avoid unnecessary words and articles such as the, an, or a."
                    ]
                },
                {
                    "type": "p",
                    "text": "Add menu item Add a menu item Link text should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Set the expectation of where merchants will be taken"
                    ]
                },
                {
                    "type": "p",
                    "text": "Order #001 Order"
                },
                {
                    "type": "list",
                    "items": [
                        "Use consistent content to label navigation. For example, if a navigational link leads to a page called Orders, label the link Orders."
                    ]
                },
                {
                    "type": "p",
                    "text": "Payments Finance section Body content should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Actionable: start sentences with imperative verbs when telling merchants what actions are available to them (especially something new). Don’t use permissive language like “you can”."
                    ]
                },
                {
                    "type": "p",
                    "text": "Get performance data for all your sales channels. Now you can get performance data for all your sales channels."
                },
                {
                    "type": "list",
                    "items": [
                        "Structured for merchant success: always put the most critical information first.",
                        "Clear: use the verb “need” to help merchants understand when they’re required to do something."
                    ]
                },
                {
                    "type": "p",
                    "text": "To buy a shipping label, you need to enter the total weight of your shipment, including packaging. To buy a shipping label, you must enter the total weight of your shipment, including packaging."
                },
                {
                    "type": "list",
                    "items": [
                        "To inform merchants about a new feature or opportunity,use callout cards",
                        "To group similar concepts together in the interface,use a card"
                    ]
                },
                {
                    "type": "p",
                    "text": "Banners provide context and assist workflows for merchants with disabilities."
                },
                {
                    "type": "list",
                    "items": [
                        "Critical and warning banners have arole=”alert”and are announced by assistive technologies when they appear.",
                        "All other banners have arole=”status”and are read after any critical announcements.",
                        "All banners have anaria-liveattribute and are announced by assistive technologies when their content is updated. These announcements can be disabled by using the propstopAnnouncements.",
                        "Banners usearia-describedbyto describe their purpose to assistive technologies when they’re announced or receive focus. If a banner has atitle, then the title content is used for thearia-describedby. If the banner doesn’t have atitle, then all of the banner content is used for thearia-describedby.",
                        "Banner containers have atabindex=”0”and display a visible keyboard focus indicator. Because of this, merchants can discover banners while tabbing through forms or other interactions, and developers can programmatically move focus to banners.",
                        "Banners use a combination oficonsandcolorsto show their meaning and level of importance to merchants."
                    ]
                },
                {
                    "type": "p",
                    "text": "When merchants submit long or complex forms with errors, use a critical banner to summarize what went wrong. Place the banner at the top of the form and move focus to the banner when the form is submitted. This allows all merchants to move through the form in a logical order to correct the issues. Always includeinline errormessages for specific form fields so that merchants know what to do in context as they correct their mistakes. To learn about creating helpful and accessible error message text, see the guidelines forerror messages."
                },
                {
                    "type": "list",
                    "items": [
                        "Put banners close in context to the problem they’re referring to",
                        "Give banners with a lot of information a clear title that summarizes their content",
                        "Move focus to banners if they’re relevant to the merchant’s current workflow and need to be addressed immediately"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Move focus to banners if they appear on page load, or outside the merchant’s current workflow",
                        "Use warning or critical (role=”alert”) banners to convey information that the merchant doesn’t need to address immediately"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/exception-list",
            "title": "Exception list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use exception lists to help merchants notice important, standout information that adds extra context to a task. Exception lists often consist of a title and description. Each item in the list either has a bullet or icon at the front. Use icons to add clarity or assist in visualizing the meaning"
                },
                {
                    "type": "code",
                    "code": "import{ExceptionList}from'@shopify/polaris';import{NoteIcon}from'@shopify/polaris-icons';importReactfrom'react';functionExceptionListExample(){return(<ExceptionListitems={[{icon:NoteIcon,description:'This customer is awesome. Make sure to treat them right!',},]}/>);}"
                },
                {
                    "type": "p",
                    "text": "Collection of items for list. The exception list component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be attached to another component",
                        "Inform merchants about extra context that will help them make better decisions",
                        "Only surface noteworthy, actionable content, like a high risk order or out of stock item",
                        "Used sparingly, so that it has more impact and doesn’t add clutter",
                        "Only use an icon if it adds clarity to the content or helps merchants visualize the meaning"
                    ]
                },
                {
                    "type": "p",
                    "text": "Exception lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Highlight an exceptional state that helps merchants make a decision",
                        "Use the appropriatecolorto suit the tone of the message",
                        "Have a description (a title is optional)",
                        "Be concise"
                    ]
                },
                {
                    "type": "p",
                    "text": "For error states, exception lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Either tell merchants how to solve the problem or be attached to an item that lets merchants fix the problem"
                    ]
                },
                {
                    "type": "p",
                    "text": "If placed next to an item in aresource list, exceptions lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Make the entire list item clickable because the exception list itself isn’t clickable"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To display an error at the top of a page, or to indicate multiple errors in a form, use thebannercomponent",
                        "Exceptions lists are often used in theresource listcomponent to display conditional content"
                    ]
                },
                {
                    "type": "p",
                    "text": "Items in an exception list are organized as list items (<li>) in an unordered list wrapper (<ul>), so they’re conveyed as a group of related elements to assistive technology users. Icons displayed with exception list items are meant to visually reinforce the adjacent information, not to convey information on their own. They are skipped by screen readers usingaria-hidden=\"true\"."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/progress-bar",
            "title": "Progress bar — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The progress bar component is used to visually represent the completion of a task or operation. It shows how much of the task has been completed and how much is still left. Use this component to visually represent the completion of a task or operation."
                },
                {
                    "type": "code",
                    "code": "import{ProgressBar}from'@shopify/polaris';importReactfrom'react';functionProgressBarExample(){return(<div style={{width:225}}><ProgressBarprogress={75}/></div>);}"
                },
                {
                    "type": "p",
                    "text": "The progression of certain tasks. Defaults to0. Size of progressbar. Defaults to'medium'. Whether the fill animation is triggered. Defaults to'true'. Id (ids) of element (elements) that describes progressbar. Color of progressbar. Defaults to'highlight'. Progress bar components should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Give merchants an indication of how much of the task has completed and how much is left.",
                        "Not be used for entire page loads. In this case, use theSkeleton pagecomponent."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For tasks with a short load time, use theSpinnercomponent",
                        "For full page loads, use theSkeleton pagecomponent"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text",
            "title": "Skeleton body text — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Skeleton body text is used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card. Use this component to represent a block of content being loaded. For example, you could use it to represent an entire product description card on the product page."
                },
                {
                    "type": "code",
                    "code": "import{SkeletonBodyText}from'@shopify/polaris';importReactfrom'react';functionSkeletonExample(){return<SkeletonBodyText/>;}"
                },
                {
                    "type": "p",
                    "text": "Number of lines to display. Defaults to3. Skeleton body text component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used withSkeleton pagewhen page content loads all at once. Together, these components give merchants an indication of what the page layout will be once loaded.",
                        "Be used on its own, inside any content container component (like acard), and when content loads after the main page load.",
                        "Try to match the number of lines to the content being loaded so it gives an accurate representation."
                    ]
                },
                {
                    "type": "p",
                    "text": "Show static content that never changes on a page and use skeleton loading for dynamic content. Skeleton body text can sometimes be used to represent non-typographic content such as forms. Don’t use placeholder content that will change when the page fully loads. Use skeleton body text for dynamic content. Use skeleton body text for static content or use placeholder content for dynamic content."
                },
                {
                    "type": "list",
                    "items": [
                        "Use this component withSkeleton pageandSkeleton display textto represent the content of a page while it’s loading.",
                        "When giving feedback for in-context operations, useProgress barorSpinnercomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text",
            "title": "Skeleton display text — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Skeleton display text is used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card. Use this component to represent medium and large display text such as large metrics on the reports list page, or for page titles."
                },
                {
                    "type": "code",
                    "code": "import{SkeletonDisplayText}from'@shopify/polaris';importReactfrom'react';functionSkeletonExample(){return<SkeletonDisplayTextsize=\"medium\"/>;}"
                },
                {
                    "type": "p",
                    "text": "Size of the text. Defaults to'medium'. Maxium width of the text. Defaults to'120px'. Skeleton display text component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Give merchants an indication of what the page content will be once loaded",
                        "Use real content for display text that never changes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Show static display text that that never changes on a page. For example, keep page titles, such as Products on the product list page, but use skeleton loading for page titles that change on the product details page. Show actual display text for static content and use skeleton display text for dynamic content. Use skeleton display text for static content or placeholder content for dynamic content. Show skeleton display text for dynamic page titles."
                },
                {
                    "type": "list",
                    "items": [
                        "Use this component withSkeleton pageandSkeleton body textto represent the content of a page before it’s loaded.",
                        "When giving feedback for in-context operations, useProgress barorSpinnercomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/skeleton-page",
            "title": "Skeleton page — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Skeleton page is used with other skeleton loading components to provide a low fidelity representation of the user interface (UI) before content appears on the page. It improves load times perceived by merchants. Use this component to compose a loading version of a page where the page title and header content are dynamic, meaning, the content changes."
                },
                {
                    "type": "code",
                    "code": "import{SkeletonPage,Layout,LegacyCard,SkeletonBodyText,TextContainer,SkeletonDisplayText,}from'@shopify/polaris';importReactfrom'react';functionSkeletonExample(){return(<SkeletonPageprimaryAction><Layout><Layout.Section><LegacyCardsectioned><SkeletonBodyText/></LegacyCard><LegacyCardsectioned><TextContainer><SkeletonDisplayTextsize=\"small\"/><SkeletonBodyText/></TextContainer></LegacyCard><LegacyCardsectioned><TextContainer><SkeletonDisplayTextsize=\"small\"/><SkeletonBodyText/></TextContainer></LegacyCard></Layout.Section><Layout.Sectionvariant=\"oneThird\"><LegacyCard><LegacyCard.Section><TextContainer><SkeletonDisplayTextsize=\"small\"/><SkeletonBodyTextlines={2}/></TextContainer></LegacyCard.Section><LegacyCard.Section><SkeletonBodyTextlines={1}/></LegacyCard.Section></LegacyCard><LegacyCardsubdued><LegacyCard.Section><TextContainer><SkeletonDisplayTextsize=\"small\"/><SkeletonBodyTextlines={2}/></TextContainer></LegacyCard.Section><LegacyCard.Section><SkeletonBodyTextlines={2}/></LegacyCard.Section></LegacyCard></Layout.Section></Layout></SkeletonPage>);}"
                },
                {
                    "type": "p",
                    "text": "Page title, in large type. Remove the normal max-width on the page. Decreases the maximum layout width. Intended for single-column layouts. Shows a skeleton over the primary action. Shows a skeleton over the backAction. The child elements to render in the skeleton page. Skeleton page component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for pages where all content loads at the same time.",
                        "Give merchants an indication of what the page layout will be once loaded. Do this by mimicking its layout similarly to the state that will be loaded."
                    ]
                },
                {
                    "type": "p",
                    "text": "Show page titles that never change for a page. For example, keep the title “Products” on the product list page, but use skeleton loading for titles that change on the product details page. Don’t use placeholder content for titles that will change when the page fully loads. Secondary actions are always represented with skeleton content. You can change the number of skeleton actions that best represent the number of actions once loaded. Use skeleton loading for dynamic content, and use actual content for content that doesn’t change. Use placeholder content that will change when the page fully loads. This will confuse merchants and create a jumpy loading experience."
                },
                {
                    "type": "list",
                    "items": [
                        "Use theSkeleton body textandSkeleton display textcomponents to represent blocks of content.",
                        "When giving feedback for in-context operations, useProgress barorSpinnercomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/skeleton-tabs",
            "title": "Skeleton tabs — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Skeleton tabs are used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,SkeletonTabs}from'@shopify/polaris';importReactfrom'react';functionSkeletonExample(){return(<LegacyCard><SkeletonTabs/></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "Fit tabs to container. Skeleton tabs component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Give merchants an indication of what the page content will be once loaded"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use this component withSkeleton pageandSkeleton body textto represent the content of a page before it’s loaded."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/skeleton-thumbnail",
            "title": "Skeleton thumbnail — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Skeleton thumbnail is used to provide a low fidelity representation of an image before it appears on the page, and improves load times perceived by merchants. Use for thumbnails in or outside of a card. Use this component to represent medium thumbnails."
                },
                {
                    "type": "code",
                    "code": "import{SkeletonThumbnail}from'@shopify/polaris';importReactfrom'react';functionSkeletonExample(){return<SkeletonThumbnailsize=\"medium\"/>;}"
                },
                {
                    "type": "p",
                    "text": "Size of the thumbnail. Defaults to'medium'. Skeleton thumbnail component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Try to match the size of the thumbnail to the content being loaded so it gives an accurate representation."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use this component withSkeleton display textto represent the content of a card while it’s loading."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/feedback-indicators/spinner",
            "title": "Spinner — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Spinners are used to notify merchants that their action is being processed. For loading states, spinners should only be used for content that can’t be represented with skeleton loading components, like for data charts. Use to notify merchants that their requested action is being processed."
                },
                {
                    "type": "code",
                    "code": "import{Spinner}from'@shopify/polaris';importReactfrom'react';functionSpinnerExample(){return<SpinneraccessibilityLabel=\"Spinner example\"size=\"large\"/>;}"
                },
                {
                    "type": "p",
                    "text": "Size of spinner. Defaults to'large'. Accessible label for the spinner. Allows the component to apply the correct accessibility roles based on focus. SVGs are often conveyed inconsistently to assistive technologies. TheSpinnercomponent’s accessibility is also highly contextual. When the parent component is focusable, you’ll need to set thehasFocusableParentprop for the appropriateroleattribute to be applied. For optimal user experience, use theaccessibilityLabelprop to let assistive technology users know the purpose of the spinner. The spinner component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Notify merchants that their request has been received and the action will soon complete.",
                        "Not be used to give feedback for an entire page load.",
                        "White can only be used with small spinners on actionable components like buttons.",
                        "On web, be used in conjunction with skeleton loading to represent non-typographic content. For example, line graphs on the Merchant analytics dashboard."
                    ]
                },
                {
                    "type": "p",
                    "text": "Spinner accessibility label should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Accurately explain the state of the requested action. For example, “Loading”, “Submitting”, “Processing”.",
                        "Use as few words to describe the state as possible."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To improve user experience and reduce the appearance of long loading times, use theProgress barcomponent.",
                        "To better represent loading content, useSkeleton pagealong withSkeleton body textandSkeleton display textcomponents."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/filters",
            "title": "Filters — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Filters is a composite component that filters the items of a list or table."
                },
                {
                    "type": "code",
                    "code": "import{ChoiceList,TextField,RangeSlider,LegacyCard,ResourceList,Filters,Avatar,Text,}from'@shopify/polaris';import{useState,useCallback}from'react';functionFiltersWithAResourceListExample(){const[accountStatus,setAccountStatus]=useState<string[]|undefined>(undefined,);const[moneySpent,setMoneySpent]=useState<[number,number]|undefined>(undefined,);const[taggedWith,setTaggedWith]=useState<string|undefined>(undefined);const[queryValue,setQueryValue]=useState<string|undefined>(undefined);consthandleAccountStatusChange=useCallback((value:string[])=>setAccountStatus(value),[],);consthandleMoneySpentChange=useCallback((value:[number,number])=>setMoneySpent(value),[],);consthandleTaggedWithChange=useCallback((value:string)=>setTaggedWith(value),[],);consthandleFiltersQueryChange=useCallback((value:string)=>setQueryValue(value),[],);consthandleAccountStatusRemove=useCallback(()=>setAccountStatus(undefined),[],);consthandleMoneySpentRemove=useCallback(()=>setMoneySpent(undefined),[],);consthandleTaggedWithRemove=useCallback(()=>setTaggedWith(undefined),[],);consthandleQueryValueRemove=useCallback(()=>setQueryValue(undefined),[],);consthandleFiltersClearAll=useCallback(()=>{handleAccountStatusRemove();handleMoneySpentRemove();handleTaggedWithRemove();handleQueryValueRemove();},[handleAccountStatusRemove,handleMoneySpentRemove,handleQueryValueRemove,handleTaggedWithRemove,]);constfilters=[{key:'accountStatus',label:'Account status',filter:(<ChoiceListtitle=\"Account status\"titleHiddenchoices={[{label:'Enabled',value:'enabled'},{label:'Not invited',value:'not invited'},{label:'Invited',value:'invited'},{label:'Declined',value:'declined'},]}selected={accountStatus||[]}onChange={handleAccountStatusChange}allowMultiple/>),shortcut:true,},{key:'taggedWith',label:'Tagged with',filter:(<TextFieldlabel=\"Tagged with\"value={taggedWith}onChange={handleTaggedWithChange}autoComplete=\"off\"labelHidden/>),shortcut:true,},{key:'moneySpent',label:'Money spent',filter:(<RangeSliderlabel=\"Money spent is between\"labelHiddenvalue={moneySpent||[0,500]}prefix=\"$\"outputmin={0}max={2000}step={1}onChange={handleMoneySpentChange}/>),},];constappliedFilters=[];if(!isEmpty(accountStatus)){constkey='accountStatus';appliedFilters.push({key,label:disambiguateLabel(key,accountStatus),onRemove:handleAccountStatusRemove,});}if(!isEmpty(moneySpent)){constkey='moneySpent';appliedFilters.push({key,label:disambiguateLabel(key,moneySpent),onRemove:handleMoneySpentRemove,});}if(!isEmpty(taggedWith)){constkey='taggedWith';appliedFilters.push({key,label:disambiguateLabel(key,taggedWith),onRemove:handleTaggedWithRemove,});}return(<div style={{height:'568px'}}><LegacyCard><ResourceListresourceName={{singular:'customer',plural:'customers'}}filterControl={<FiltersqueryValue={queryValue}filters={filters}appliedFilters={appliedFilters}onQueryChange={handleFiltersQueryChange}onQueryClear={handleQueryValueRemove}onClearAll={handleFiltersClearAll}/>}flushFiltersitems={[{id:'341',url:'#',name:'Mae Jemison',location:'Decatur, USA',},{id:'256',url:'#',name:'Ellen Ochoa',location:'Los Angeles, USA',},]}renderItem={(item)=>{const{id,url,name,location}=item;constmedia=<Avatarcustomer size=\"md\"name={name}/>;return(<ResourceList.Itemid={id}url={url}media={media}accessibilityLabel={`View details for${name}`}><Textas=\"h3\"variant=\"bodyMd\"fontWeight=\"bold\">{name}</Text><div>{location}</div></ResourceList.Item>);}}/></LegacyCard></div>);functiondisambiguateLabel(key:string,value:any){switch(key){case'moneySpent':return`Money spent is between $${value[0]}and $${value[1]}`;case'taggedWith':return`Tagged with${value}`;case'accountStatus':returnvalue?.map((val:string)=>`Customer${val}`).join(', ');default:returnvalue;}}functionisEmpty(value:string|string[]|[number,number]|undefined,):boolean{if(Array.isArray(value)){returnvalue.length===0;}else{returnvalue===''||value==null;}}}"
                },
                {
                    "type": "p",
                    "text": "Currently entered text in the query field. Placeholder text for the query field. Whether the query field is focused. Available filters added to the filter bar. Shortcut filters are pinned to the front of the bar. Applied filters which are rendered as filter pills. The remove callback is called with the respective key. Callback when the query field is changed. Callback when the clear button is triggered. Callback when the reset all button is pressed. Callback when the query field is blurred. Callback when the query field is focused. The content to display inline with the controls. Disable all filters. Hide filter bar for applied filters. Hide the query field. Disable the query field. Disable the filters. Whether the text field should be borderless. Should be true when used as part of the IndexFilters component. Whether an asyncronous task is currently being run. Callback when the add filter button is clicked. Whether the filter should close when clicking inside another Popover. Merchants use filters to:"
                },
                {
                    "type": "list",
                    "items": [
                        "view different subsets of items in a list or table",
                        "filter by typing into a text field",
                        "filter by selecting filters or promoted filters"
                    ]
                },
                {
                    "type": "p",
                    "text": "The way that merchants interact with filters depends on the components that you decide to incorporate. In its simplest form, filters includes a text field and a set of filters, which can be displayed in different ways. What the filters are and how they’re exposed to merchants is flexible. The filters component relies on the accessibility features of multiple other components:"
                },
                {
                    "type": "list",
                    "items": [
                        "Text field",
                        "Button",
                        "Popover"
                    ]
                },
                {
                    "type": "p",
                    "text": "Since custom HTML can be passed to the component for additional actions, ensure that the filtering system you build is accessible as a whole. All merchants must:"
                },
                {
                    "type": "list",
                    "items": [
                        "be able to identify and understand labels for all controls",
                        "be notified of state changes",
                        "be able to complete all actions with the keyboard"
                    ]
                },
                {
                    "type": "p",
                    "text": "The filters component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "help reduce merchant effort by promoting the filtering categories that are most commonly used",
                        "include no more than 2 or 3 promoted filters",
                        "consider small screen sizes when designing the interface for each filter and the total number filters to include",
                        "use children only for content that’s related or relevant to filtering"
                    ]
                },
                {
                    "type": "p",
                    "text": "The text field should be clearly labeled so it’s obvious to merchants what they should enter into the field."
                },
                {
                    "type": "list",
                    "items": [
                        "Filter orders"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Enter text here"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the name of the filter if the purpose of the name is clear on its own. For example, when you see a filter badge that readsFulfilled, it’s intuitive that it falls under the Fulfillment status category."
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfilled, Unfulfilled"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfillment: Fulfilled, Unfulfilled"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the filter name is ambiguous on its own, add a descriptive word related to the status. For example,Lowdoesn’t make sense out of context. Add the word “risk” so that merchants know it’s from the Risk category."
                },
                {
                    "type": "list",
                    "items": [
                        "High risk, Low risk"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "High, Low"
                    ]
                },
                {
                    "type": "p",
                    "text": "Group tags from the same category together."
                },
                {
                    "type": "list",
                    "items": [
                        "(Unfulfilled, Fulfilled)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "(Unfulfilled) (fulfilled)"
                    ]
                },
                {
                    "type": "p",
                    "text": "If all tag pills selected: truncate in the middle"
                },
                {
                    "type": "list",
                    "items": [
                        "Paid, par… unpaid"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "All payment status filters selected, Paid, unpa…"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/form",
            "title": "Form — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A wrapper component that handles the submission of forms. Use onSubmit as a callback for when your form is submitted."
                },
                {
                    "type": "code",
                    "code": "import{Form,FormLayout,Checkbox,TextField,Button}from'@shopify/polaris';import{useState,useCallback}from'react';functionFormOnSubmitExample(){const[newsletter,setNewsletter]=useState(false);const[email,setEmail]=useState('');consthandleSubmit=useCallback(()=>{setEmail('');setNewsletter(false);},[]);consthandleNewsLetterChange=useCallback((value:boolean)=>setNewsletter(value),[],);consthandleEmailChange=useCallback((value:string)=>setEmail(value),[]);return(<FormonSubmit={handleSubmit}><FormLayout><Checkboxlabel=\"Sign up for the Polaris newsletter\"checked={newsletter}onChange={handleNewsLetterChange}/><TextFieldvalue={email}onChange={handleEmailChange}label=\"Email\"type=\"email\"autoComplete=\"email\"helpText={<span>We’llusethisemail address to inform you on future changes toPolaris.</span>}/><Buttonsubmit>Submit</Button></FormLayout></Form>);}"
                },
                {
                    "type": "p",
                    "text": "Space separated list of character encodings. Where to send form-data on submittal. Grants the browser the ability to autocomplete input elements. The content to display inside the form. Media type when submitting content to server. Toggles if form submits on Enter keypress. Defaults to true. Method used to submit form. A unique name for the form. Whether or not form is validated when submitting. Blocks the default form action. Where to display response after form submittal. Callback when form is submitted. The form component should be used to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Wrap around all form input elements",
                        "Emulate the native HTMLformelement behavior with a customonSubmitcallback"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To arrange fields within a form using standard spacing,use the form layout component",
                        "To see all of the components that make up a form,visit the form sectionof the component library"
                    ]
                },
                {
                    "type": "p",
                    "text": "The form component wraps content in an HTML<form>element. This helps to support assistive technologies that use different interaction and browse modes. Forms can have only one submit button and it must be at the end of the form. By default, buttons added to the form are given atypeattribute set tobuttonto avoid conflicts. To make a button the submit button instead (type=\"submit\"), set thesubmitprop on the button. By default, theimplicitSubmitprop is set totrue. This allows merchants to submit the form with theenter/returnkey when focus is in any text field inside the form. This provides a shortcut for keyboard users. If this behavior doesn’t fit the form, then set the prop tofalse."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/form-layout",
            "title": "Form layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use form layout to arrange fields within a form using standard spacing. By default it stacks fields vertically but also supports horizontal groups of fields. Use to stack form fields vertically, which makes them easier to scan and complete."
                },
                {
                    "type": "code",
                    "code": "import{FormLayout,TextField}from'@shopify/polaris';importReactfrom'react';functionExample(){return(<FormLayout><TextFieldlabel=\"Store name\"onChange={()=>{}}autoComplete=\"off\"/><TextFieldtype=\"email\"label=\"Account email\"onChange={()=>{}}autoComplete=\"email\"/></FormLayout>);}"
                },
                {
                    "type": "p",
                    "text": "The content to display inside the layout. Forms should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be considerate of merchants’ time and privacy by only asking for information that’s required",
                        "Group related tasks under section titles to provide more context and make the interface easier to scan",
                        "Follow a logical, predictable order—for example, always ask for first name first, and last name second on forms"
                    ]
                },
                {
                    "type": "p",
                    "text": "Form section titles should follow the content guidelines forheadings and subheadings. A label is a short description of a field. Labels are not help text, and they shouldn’t be used to provide instruction, but they should be meaningful and clearly indicate what is expected. Labels should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Placed above or beside the form field",
                        "Short and succinct (1–3 words)",
                        "Written in sentence case (the first word capitalized, the rest lowercase)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Email address"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "What is your email address?"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Phone number"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "My phone number is:"
                    ]
                },
                {
                    "type": "p",
                    "text": "Help text provides extra guidance to people filling out a form field. This text is easy for people to ignore, so merchants should not need to depend on it to fill out a form. As with all forms, help text should be succinct and easy to read."
                },
                {
                    "type": "list",
                    "items": [
                        "To arrange the largest sections of a page,use the layout component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/inline-error",
            "title": "Inline error — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Inline errors are brief, in-context messages that tell merchants something went wrong with a single or group of inputs in a form. Use inline errors to help merchants understand why a form input may not be valid and how to fix it. Use when the merchant has entered information that is not valid into multiple fields inside of a form, or needs to be displayed in a non-standard position in the form layout."
                },
                {
                    "type": "code",
                    "code": "import{InlineError}from'@shopify/polaris';importReactfrom'react';functionInlineErrorExample(){return<InlineErrormessage=\"Store name is required\"fieldID=\"myFieldID\"/>;}"
                },
                {
                    "type": "p",
                    "text": "Content briefly explaining how to resolve the invalid form field input. Unique identifier of the invalid form field that the message describes. Inline errors should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be brief",
                        "Be written in sentence case",
                        "Be visible immediately upon a form input that is not valid",
                        "Be removed as soon as the input is valid so merchants can immediately tell they fixed the issue",
                        "Describe specific solutions so merchants can successfully complete their task in the form",
                        "Not be placed out of context of the input or group of inputs they describe"
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about error message patterns Since the error message is directly below the source of the problem, the copy only needs to explain why the error happened. Optionally, the message can clarify what to do next or offer a one-click fix. Inline error messages should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly explain what went wrong, give a next step, or offer a one-click fix",
                        "Be short and concise, no more than a single sentence",
                        "Usepassive voiceso merchants don’t feel like they’re being blamed for the error"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Store name is required"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "You didn’t enter a store name."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To create a list of exceptions that describe a resource,use the exception list component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use the requiredfieldIDprop to give the inline error a uniqueid. This ties the error to a form field usingaria-describedbyso that it's conveyed to screen reader users.",
                        "Use the requiredmessageprop to provide the text that describes the error.",
                        "The inline erroriconhelps visually identify the error message for merchants who have difficulty seeingcolorsor who use settings that remove color from the page."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/internal-only",
            "title": "Sign in - Google Accounts",
            "content": [
                {
                    "type": "p",
                    "text": "to continue tos5y-polaris-site-prod-ki-483d  Forgot email? "
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout",
            "title": "Layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The layout component is used to create the main layout on a page. Layouts sections come in three main configurations. one-column, two-column, and annotated. One and two column layouts can be combined in the same page. Annotated layouts should be used on their own and only on settings pages. Use to have a single section on its own in a full-width container. Use for simple pages and as a container for banners and other full-width content."
                },
                {
                    "type": "code",
                    "code": "import{Page,Layout,LegacyCard}from'@shopify/polaris';importReactfrom'react';functionLayoutExample(){return(<PagefullWidth><Layout><Layout.Section><LegacyCardtitle=\"Online store dashboard\"sectioned><p>Viewa summaryofyour online store’sperformance.</p></LegacyCard></Layout.Section></Layout></Page>);}"
                },
                {
                    "type": "p",
                    "text": "Automatically adds sections to layout. The content to display inside the layout. The layout component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use sections with white backgrounds for primary content and sections with grey backgrounds for secondary content that is less important",
                        "Center cards on the background when there is no secondary card on the page to stop the content from becoming too wide",
                        "Group similar concepts and actions together in cards",
                        "Separate different cards using a full-width divider",
                        "Structure primary/secondary, two-column layouts so the primary ⅔ section is used for main information and the secondary ⅓ section is used for information that might not be used as often but remains helpful for context or secondary tasks",
                        "Use equal-width layouts with two or more columns when each layout section has the same importance"
                    ]
                },
                {
                    "type": "p",
                    "text": "The content that appears in the layout component comes from cards and annotated sections. Content from cards should follow the content guidelines forcards. Annotated section titles should follow the content guidelines forheadings and subheadings. Annotated section descriptions should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used if the explanation or purpose of the associated cards isn’t clear",
                        "Provide instructions for any choices merchants need to make, or explain the purpose of the section",
                        "Be short, no more than 1–3 sentences",
                        "Direct merchants to more content in the Help Center with “Learn more” links",
                        "Not repeat the section title",
                        "Use complete sentences and regular punctuation"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To visually group content in a layout section,use the card component",
                        "To lay out a set of smaller components in a row,use the vertical stack component",
                        "To lay out form fields,use the form layout component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure",
            "title": "Layout and structure — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Layout is the arrangement of elements on a page. A good layout helps merchants understand and find information to complete their goals. To learn more, visit theLayoutdocumentation. All layouts and spacing should be handled using layout primitives. This keeps our components simple, flexible and composable. Our component naming conventions follow web standards forlogical properties and values."
                },
                {
                    "type": "list",
                    "items": [
                        "BleedApplies negative margin to a layout, extending it to the edge of the screen on small screens.",
                        "Block stackUse to display children vertically and horizontally with full width by default. Based on CSS Flexbox.",
                        "BoxBox is the most primitive layout component. It’s a way to access Polaris design tokens.",
                        "DividerUse to separate or group content.",
                        "GridCreate complex layouts based on CSS Grid.",
                        "Inline gridUse to lay out children horizontally with equal gap between columns. Based on CSS Grid.",
                        "Inline stackUse to display children horizontally in a row. Based on CSS Flexbox."
                    ]
                },
                {
                    "type": "p",
                    "text": "Layout primitives allow you to specify values for different screen sizes.\nCheck out the layout primitives for information on how responsive props apply\nto each component. Layout compositions are built with layout primitives. Use these components to build common layouts in the admin with the help of sensible defaults."
                },
                {
                    "type": "list",
                    "items": [
                        "Callout cardCallout cards are used to encourage merchants to take an action related to a new feature or opportunity. They are most commonly displayed in the sales channels section of Shopify.",
                        "CardUsed to group similar concepts and tasks together for easier scanning and reading.",
                        "Empty stateEmpty states are used when a list, table, or chart has no items or data to show. This is an opportunity to provide explanation or guidance to help merchants progress. The empty state component is intended for use when a full page in the admin is empty, and not for individual elements or areas in the interface.",
                        "Form layoutManages the layout of all forms and fields within it. Used for the layout of new forms and managing the layout of all forms.",
                        "LayoutA structural component used to group other components. Creates consistent spacing and helps layout stack and scale responsively.",
                        "Media cardProvides a container for introductory or highlight information. Often used in a grid to present related content.",
                        "PageUsed to build the layout of a page in the Shopify admin. A flexible container for composing pages consistently."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Read theLayoutguidelines for information on layout behaviors, as well as examples."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/bleed",
            "title": "Bleed — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Applies negative margin to allow content to bleed out into the surrounding layout. Content will bleed horizontally into the surrounding layout using themarginInlineprop."
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react';import{Bleed,Card,Text,InlineStack}from'@shopify/polaris';functionBleedHorizontalExample(){return(<Card><Textas=\"h2\"variant=\"bodyMd\">Contentinside a card</Text><BleedmarginInline=\"400\"><Placeholderlabel=\"marginInline\"/></Bleed></Card>);}constPlaceholder=({label='',height='auto',width='auto'})=>{return(<divstyle={{background:'var(--p-color-text-info)',padding:'14px var(--p-space-200)',height:height,width:width,}}><InlineStackgap=\"400\"align=\"center\"><divstyle={{color:'var(--p-color-text-info-on-bg-fill)',}}><Textas=\"h2\"variant=\"bodyMd\"fontWeight=\"regular\"tone=\"text-inverse\">{label}</Text></div></InlineStack></div>);};"
                },
                {
                    "type": "p",
                    "text": "Negative horizontal space around children. Negative vertical space around children. Negative top space around children. Negative bottom space around children. Negative left space around children. Negative right space around children. Content should never go beyond the edges of the parent container. Choose a bleed value that works within the containing layout."
                },
                {
                    "type": "list",
                    "items": [
                        "Bleed props are named following the convention of CSS logical properties, such as 'margin-inline-start' and 'margin-block-start'. Learn more aboutCSS logicial properties."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/block-stack",
            "title": "Block stack — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to display children vertically and horizontally with full width by default. Based on CSS Flexbox. Control the vertical space between children using thegapprop."
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react';import{BlockStack}from'@shopify/polaris';functionBlockStackWithGapExample(){return(<SpacingBackground><BlockStackgap=\"500\"><Placeholderheight=\"48px\"/><Placeholderheight=\"48px\"/><Placeholderheight=\"48px\"/></BlockStack></SpacingBackground>);}constSpacingBackground=({children}:{children:React.ReactNode})=>{return(<divstyle={{background:'var(--p-color-bg-surface-success)',height:'auto',}}>{children}</div>);};constPlaceholder=({height='auto'})=>{return(<divstyle={{background:'var(--p-color-text-info)',padding:'14px var(--p-space-200)',height:height,}}/>);};"
                },
                {
                    "type": "p",
                    "text": "HTML Element type. Defaults to'div'. Vertical alignment of children. Horizontal alignment of children. The spacing between children. HTML id attribute. Reverse the render order of child items. Defaults tofalse. Aria role. Stacks should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Not be used for complex or unique arrangements of components",
                        "Not be used for large-scale page layout"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To display elements horizontally,use the InlineStack component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "BlockStack props are named following the convention of CSS logical properties, such asalign=\"start\"vs.align=\"top\"andinlineAlign=\"end\"vs.verticalAlign=\"right\". Learn more aboutCSS logicial properties."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/box",
            "title": "Box — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Box is the most primitive layout component. It’s a way to access Polaris design tokens. Background color of box and text color inside a box can be adjusted using theColor tokens."
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react';import{Box,Text}from'@shopify/polaris';functionBoxWithColorExample(){return(<Boxbackground=\"bg-fill-info\"><Placeholderlabel=\"Content inside a box\"/></Box>);}constPlaceholder=({label='',height='auto',width='auto'})=>{return(<divstyle={{background:'var(--p-color-border-interactive-subdued)',height:height,width:width,borderRadius:'inherit',}}><divstyle={{color:'var(--p-color-text)',}}><Textas=\"p\"variant=\"bodyMd\">{label}</Text></div></div>);};"
                },
                {
                    "type": "p",
                    "text": "HTML Element type. Defaults to'div'. Background color. Border color. Border style. Border radius. Vertical end horizontal start border radius. Vertical end horizontal end border radius. Vertical start horizontal start border radius. Vertical start horizontal end border radius. Border width. Vertical start border width. Vertical end border width. Horizontal start border width. Horizontal end border width. Color of children. HTML id attribute. Minimum height of container. Minimum width of container. Maximum width of container. Clip horizontal content of children. Clip vertical content of children. Spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical start and end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal start and end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Aria role. Shadow on box. Set tab order. Width of container. Position of box. Top position of box. Bottom position of box. Left position of box. Right position of box. Opacity of box. Outline color. Outline style. Outline width. Visually hide the contents during print. Visually hide the contents (still announced by screenreader). z-index of box."
                },
                {
                    "type": "list",
                    "items": [
                        "For more specific use cases,use the Card component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Box props are named following the convention of CSS logical properties, such as 'padding-inline-start' and 'padding-block-start'. Learn more aboutCSS logicial properties."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/callout-card",
            "title": "Callout card — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Callout cards are used to encourage merchants to take an action related to a new feature or opportunity. They are most commonly displayed in the sales channels section of Shopify. Use to let merchants know about a feature or opportunity where there is a clear, single action they need to take to move to the next step."
                },
                {
                    "type": "code",
                    "code": "import{CalloutCard}from'@shopify/polaris';importReactfrom'react';functionExample(){return(<CalloutCardtitle=\"Customize the style of your checkout\"illustration=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\"primaryAction={{content:'Customize checkout',url:'#',}}><p>Uploadyour store’s logo,change colors and fonts,and more.</p></CalloutCard>);}"
                },
                {
                    "type": "p",
                    "text": "The content to display inside the callout card. The title of the card. URL to the card illustration. Primary action for the card. Secondary action for the card. Callback when banner is dismissed. Callout cards should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly articulate the benefit of the feature and what it does",
                        "Provide merchants with a clear call to action",
                        "Be targeted to merchants who will most benefit from the feature",
                        "Be dismissable so merchants can get rid of cards about features they’re not interested in",
                        "Use an illustration that helps to communicate the subject or merchant benefit"
                    ]
                },
                {
                    "type": "p",
                    "text": "Callout card titles should follow the content guidelines forheadings and subheadings. Body content should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Actionable: start sentences with imperative verbs when telling merchants what actions are available to them (especially something new). Don’t use permissive language like “you can”."
                    ]
                },
                {
                    "type": "p",
                    "text": "Get performance data for all your sales channels. Now you can get performance data for all your sales channels."
                },
                {
                    "type": "list",
                    "items": [
                        "Structured for merchant success: always put the most critical information first",
                        "Clear: use the verb “need” to help merchants understand when they’re required to do something"
                    ]
                },
                {
                    "type": "p",
                    "text": "To buy a shipping label, you need to enter the total weight of your shipment, including packaging. To buy a shipping label, you must enter the total weight of your shipment, including packaging. Buttons should be: Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button. Buy shipping label Buy"
                },
                {
                    "type": "list",
                    "items": [
                        "Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                    ]
                },
                {
                    "type": "p",
                    "text": "View shipping settings View your settings"
                },
                {
                    "type": "list",
                    "items": [
                        "Scannable: avoid unnecessary words and articles such as the, an, or a."
                    ]
                },
                {
                    "type": "p",
                    "text": "Add menu item Add a menu item"
                },
                {
                    "type": "list",
                    "items": [
                        "To group similar concepts and tasks together,use the card component",
                        "To create page-level layout,use the layout component",
                        "To explain a feature that merchants haven’t tried yet,use the empty state component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The requiredtitleprop gives the callout card a level 2 heading (<h2>). This helps with readability and provides structure to screen reader users. Illustrations included in callout cards are implemented as decorative images with emptyaltattributes (alt=\"\") so that they’re skipped by screen readers. Useactionable languageto ensure that the purpose of the callout card is clear to all merchants, including those with issues related to reading and language."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/card",
            "title": "Card — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Cards are used to group similar concepts and tasks together for merchants to scan, read, and get things done. It displays content in a familiar and recognizable style. By default, cards have an 8px border radius and uses--p-color-bg-surfaceas the background and--p-shadow-300as the shadow. There is padding ofspace-400(16px) around children."
                },
                {
                    "type": "code",
                    "code": "import{Card,Text}from'@shopify/polaris';importReactfrom'react';functionCardDefault(){return(<Card><Textas=\"h2\"variant=\"bodyMd\">Contentinside a card</Text></Card>);}"
                },
                {
                    "type": "p",
                    "text": "Background color. Defaults to'bg-surface'. The spacing around the card. Defaults to{xs:'400',sm:'500'}. Border radius value above a set breakpoint. Defaults to'sm'. Cards should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Group related information",
                        "Display information in a way that prioritizes what the merchant needs to know most first",
                        "Use headings that set clear expectations about the card’s purpose",
                        "Stick to single user flows or break more complicated flows into multiple sections",
                        "Avoid too many call-to-action buttons or links and only one primary call to action per card",
                        "Use calls to action on the bottom of the card for next steps and use the space in the upper right corner of the card for persistent, optional actions (such as Edit)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For more flexibility on styling,use the Box component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/divider",
            "title": "Divider — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to separate or group content. Divider border color can be adjusted using theColor tokens."
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react';import{Card,Divider,Text,BlockStack}from'@shopify/polaris';functionDividerWithBorderColorExample(){return(<Card><BlockStackgap=\"500\"><Textas=\"h1\"variant=\"headingSm\">Default</Text><Divider/><Textas=\"h1\"variant=\"headingSm\">Border</Text><DividerborderColor=\"border\"/><Textas=\"h1\"variant=\"headingSm\">Borderinverse</Text><DividerborderColor=\"border-inverse\"/><Textas=\"h1\"variant=\"headingSm\">Transparent</Text><DividerborderColor=\"transparent\"/></BlockStack></Card>);}"
                },
                {
                    "type": "p",
                    "text": "Divider border color. Defaults to'border-secondary'. Divider border width. Defaults to'025'."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/empty-state",
            "title": "Empty state — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Empty states are used when a list, table, or chart has no items or data to show. This is an opportunity to provide explanation or guidance to help merchants progress. The empty state component is intended for use when a full page in the admin is empty, and not for individual elements or areas in the interface. Use to explain a single feature before merchants have used it."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,EmptyState}from'@shopify/polaris';importReactfrom'react';functionEmptyStateExample(){return(<LegacyCardsectioned><EmptyStateheading=\"Manage your inventory transfers\"action={{content:'Add transfer'}}secondaryAction={{content:'Learn more',url:'https://help.shopify.com',}}image=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\"><p>Trackand receive your incoming inventoryfromsuppliers.</p></EmptyState></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "The empty state heading. The path to the image to display.\nThe image should have ~40px of white space above when empty state is used within a card, modal, or navigation component. The path to the image to display on large screens. Whether or not to limit the image to the size of its container on large screens. Whether or not the content should span the full width of its container. Elements to display inside empty state. Primary action for empty state. Secondary action for empty state. Secondary elements to display below empty state actions. Empty states should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Orient merchants by clearly explaining the benefit and utility of a product or feature",
                        "Simplify a complicated experience by focusing on a few key features and benefits",
                        "Use simple and clear language that empowers merchants to move their business forward",
                        "Be encouraging and never make merchants feel unsuccessful or guilty because they haven’t used a product or feature",
                        "Explain the steps merchants need to take to activate a product or feature",
                        "Use illustrations thoughtfully as outlined in ourillustration guidelines",
                        "Use only one primary call-to-action button",
                        "Provide extra spacing at the bottom of an empty state that is within content (card, modal, or navigation) to match the image that was passed into the component with a white space above it of 40px"
                    ]
                },
                {
                    "type": "p",
                    "text": "Empty state titles should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be action-oriented: encourage merchants to take the step required to activate the product or feature"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create orders and send invoices"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Orders and invoices"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Follow the content guidelines forheadings and subheadings"
                    ]
                },
                {
                    "type": "p",
                    "text": "Empty state subtitles act like body content. They should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Describe or explain what’s in the empty state title or item title",
                        "Be conversational: include articles such as the, a, and an"
                    ]
                },
                {
                    "type": "p",
                    "text": "Buttons are used for the most important actions you want merchants to take.\nThey should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by using misleading titles."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create order",
                        "Buy shipping label"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "New order",
                        "Buy"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Activate Apple Pay",
                        "View shipping settings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Try Apple Pay",
                        "View your settings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Scannable: avoid unnecessary words and articles such as the, an, or a."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add menu item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add a menu item"
                    ]
                },
                {
                    "type": "p",
                    "text": "Secondary actions are used for less important actions such as “Learn more” or “Close” buttons. They should follow all the other content rules outlined for primary buttons."
                },
                {
                    "type": "list",
                    "items": [
                        "To learn more about illustrations for empty states,read the illustration guidelines",
                        "To create page-level layout,use the layout component",
                        "To highlight a Shopify feature,use the callout card component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Empty state illustrations are implemented as decorative images, so they use an emptyaltattribute and are skipped by technologies like screen readers."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/form-layout",
            "title": "Form layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use form layout to arrange fields within a form using standard spacing. By default it stacks fields vertically but also supports horizontal groups of fields. Use to stack form fields vertically, which makes them easier to scan and complete."
                },
                {
                    "type": "code",
                    "code": "import{FormLayout,TextField}from'@shopify/polaris';importReactfrom'react';functionExample(){return(<FormLayout><TextFieldlabel=\"Store name\"onChange={()=>{}}autoComplete=\"off\"/><TextFieldtype=\"email\"label=\"Account email\"onChange={()=>{}}autoComplete=\"email\"/></FormLayout>);}"
                },
                {
                    "type": "p",
                    "text": "The content to display inside the layout. Forms should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be considerate of merchants’ time and privacy by only asking for information that’s required",
                        "Group related tasks under section titles to provide more context and make the interface easier to scan",
                        "Follow a logical, predictable order—for example, always ask for first name first, and last name second on forms"
                    ]
                },
                {
                    "type": "p",
                    "text": "Form section titles should follow the content guidelines forheadings and subheadings. A label is a short description of a field. Labels are not help text, and they shouldn’t be used to provide instruction, but they should be meaningful and clearly indicate what is expected. Labels should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Placed above or beside the form field",
                        "Short and succinct (1–3 words)",
                        "Written in sentence case (the first word capitalized, the rest lowercase)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Email address"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "What is your email address?"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Phone number"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "My phone number is:"
                    ]
                },
                {
                    "type": "p",
                    "text": "Help text provides extra guidance to people filling out a form field. This text is easy for people to ignore, so merchants should not need to depend on it to fill out a form. As with all forms, help text should be succinct and easy to read."
                },
                {
                    "type": "list",
                    "items": [
                        "To arrange the largest sections of a page,use the layout component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/grid",
            "title": "Grid — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Create complex layouts based onCSS Grid. Use to create a two column layout that wraps at a breakpoint and aligns to a twelve column grid."
                },
                {
                    "type": "code",
                    "code": "import{Page,Grid,LegacyCard}from'@shopify/polaris';importReactfrom'react';functionGridExample(){return(<PagefullWidth><Grid><Grid.CellcolumnSpan={{xs:6,sm:3,md:3,lg:6,xl:6}}><LegacyCardtitle=\"Sales\"sectioned><p>Viewa summaryofyour online store’s sales.</p></LegacyCard></Grid.Cell><Grid.CellcolumnSpan={{xs:6,sm:3,md:3,lg:6,xl:6}}><LegacyCardtitle=\"Orders\"sectioned><p>Viewa summaryofyour online store’s orders.</p></LegacyCard></Grid.Cell></Grid></Page>);}"
                },
                {
                    "type": "p",
                    "text": "Set grid-template-areas."
                },
                {
                    "type": "list",
                    "items": [
                        "To lay out a set of smaller components in a row,use the vertical stack component",
                        "To lay out form fields,use the form layout component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/inline-grid",
            "title": "Inline grid — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to lay out children horizontally with equal gap between columns. Based onCSS Grid. Use thegapprop to set the amount of space between columns. Thegapprop supports responsive spacing with theBreakpoints tokens."
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react';import{InlineGrid}from'@shopify/polaris';functionInlineGridWithVaryingGapExample(){return(<SpacingBackground><InlineGridgap=\"400\"columns={3}><Placeholderheight=\"320px\"/><Placeholderheight=\"320px\"/><Placeholderheight=\"320px\"/></InlineGrid></SpacingBackground>);}constSpacingBackground=({children,width='100%',}:{children:React.ReactNode;width?:string;})=>{return(<divstyle={{background:'var(--p-color-bg-surface-success)',width,height:'auto',}}>{children}</div>);};constPlaceholder=({height='auto',width='auto'})=>{return(<divstyle={{display:'inherit',background:'var(--p-color-text-info)',height:height??undefined,width:width??undefined,}}/>);};"
                },
                {
                    "type": "p",
                    "text": "The number of columns to display. Accepts either a single value or an object of values for different screen sizes. The spacing between children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical alignment of children. If not set, inline elements will stretch to the height of the parent."
                },
                {
                    "type": "list",
                    "items": [
                        "For more control over padding and widths,use the Box component",
                        "To lay out a set of smaller components horizontally,use the InlineStack component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "InlineGrid props are named following the convention of CSS logical properties, such asalignItems=\"start\"vs.alignItems=\"left\". Learn more aboutCSS logicial properties."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/inline-stack",
            "title": "Inline stack — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to display children horizontally in a row. Based on CSS Flexbox. The default wrapping behavior of children can be overridden using thewrapprop."
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react';import{InlineStack}from'@shopify/polaris';functionInlineWithNonWrappingExample(){return(<InlineStackwrap={false}><Placeholderwidth=\"106px\"height=\"36px\"/><Placeholderwidth=\"106px\"height=\"20px\"showBorder/><Placeholderwidth=\"106px\"height=\"20px\"showBorder/><Placeholderwidth=\"106px\"height=\"20px\"showBorder/><Placeholderwidth=\"106px\"height=\"20px\"showBorder/><Placeholderwidth=\"106px\"height=\"20px\"showBorder/></InlineStack>);}constPlaceholder=({height='auto',width='auto',showBorder=false})=>{return(<divstyle={{background:'var(--p-color-text-info)',height:height,width:width,borderInlineStart:showBorder?'1px dashed var(--p-color-bg-surface-success)':'none',}}/>);};"
                },
                {
                    "type": "p",
                    "text": "HTML Element type. Defaults to'div'. Horizontal alignment of children. Horizontal direction in which children are laid out. Vertical alignment of children. The spacing between elements. Accepts a spacing token or an object of spacing tokens for different screen sizes. Wrap stack elements to additional rows as needed on small screens. Defaults totrue."
                },
                {
                    "type": "list",
                    "items": [
                        "To create the large-scale structure of pages,use the InlineGrid component",
                        "To display elements vertically,use the BlockStack component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "InlineStack props are named following the convention of CSS logical properties, such asalign=\"start\"vs.align=\"left\"andblockAlign=\"end\"vs.verticalAlign=\"bottom\". Learn more aboutCSS logicial properties."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/layout",
            "title": "Layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The layout component is used to create the main layout on a page. Layouts sections come in three main configurations. one-column, two-column, and annotated. One and two column layouts can be combined in the same page. Annotated layouts should be used on their own and only on settings pages. Use to have a single section on its own in a full-width container. Use for simple pages and as a container for banners and other full-width content."
                },
                {
                    "type": "code",
                    "code": "import{Page,Layout,LegacyCard}from'@shopify/polaris';importReactfrom'react';functionLayoutExample(){return(<PagefullWidth><Layout><Layout.Section><LegacyCardtitle=\"Online store dashboard\"sectioned><p>Viewa summaryofyour online store’sperformance.</p></LegacyCard></Layout.Section></Layout></Page>);}"
                },
                {
                    "type": "p",
                    "text": "Automatically adds sections to layout. The content to display inside the layout. The layout component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use sections with white backgrounds for primary content and sections with grey backgrounds for secondary content that is less important",
                        "Center cards on the background when there is no secondary card on the page to stop the content from becoming too wide",
                        "Group similar concepts and actions together in cards",
                        "Separate different cards using a full-width divider",
                        "Structure primary/secondary, two-column layouts so the primary ⅔ section is used for main information and the secondary ⅓ section is used for information that might not be used as often but remains helpful for context or secondary tasks",
                        "Use equal-width layouts with two or more columns when each layout section has the same importance"
                    ]
                },
                {
                    "type": "p",
                    "text": "The content that appears in the layout component comes from cards and annotated sections. Content from cards should follow the content guidelines forcards. Annotated section titles should follow the content guidelines forheadings and subheadings. Annotated section descriptions should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used if the explanation or purpose of the associated cards isn’t clear",
                        "Provide instructions for any choices merchants need to make, or explain the purpose of the section",
                        "Be short, no more than 1–3 sentences",
                        "Direct merchants to more content in the Help Center with “Learn more” links",
                        "Not repeat the section title",
                        "Use complete sentences and regular punctuation"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To visually group content in a layout section,use the card component",
                        "To lay out a set of smaller components in a row,use the vertical stack component",
                        "To lay out form fields,use the form layout component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/legacy-card",
            "title": "Legacy card — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This is the legacy version of the Card component which is in the process of being updated to a more flexible and composable API. Cards are used to group similar concepts and tasks together to make Shopify easier for merchants to scan, read, and get things done. This component is no longer supported. The newCard\ncomponentcan be used in combination\nwith the new layout primitives to achieve similar results to LegacyCard. Learn\nmore about ourcomponent lifecycles. Use when you have a simple message to communicate to merchants that doesn’t require any secondary steps."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard}from'@shopify/polaris';importReactfrom'react';functionLegacyCardExample(){return(<LegacyCardtitle=\"Online store dashboard\"sectioned><p>Viewa summaryofyour online store’sperformance.</p></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "Cards should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use headings that set clear expectations about the card’s purpose",
                        "Prioritize information so the content merchants most need to know comes first",
                        "Stick to single user flows or break more complicated flows into multiple sections",
                        "Avoid too many call-to-action buttons or links and only one primary call to action per card",
                        "Use calls to action on the bottom of the card for next steps and use the space in the upper right corner of the card for persistent, optional actions (such as an Edit link)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Card titles should follow the content guidelines forheadings and subheadings. Body content should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Actionable: start sentences with imperative verbs when telling merchants what actions are available to them (especially something new). Don’t use permissive language like “you can”."
                    ]
                },
                {
                    "type": "p",
                    "text": "Get performance for all your sales channels. Now you can get performance data for all your sales channels."
                },
                {
                    "type": "list",
                    "items": [
                        "Structured for merchant success: always put the most critical information first.",
                        "Clear: use the verb “need” to help merchants understand when they’re required to do something."
                    ]
                },
                {
                    "type": "p",
                    "text": "To buy a shipping label, you need to enter the total weight of your shipment, including packaging. To buy a shipping label, you must enter the total weight of your shipment, including packaging. Buttons should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create order",
                        "Buy shipping label"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "New order",
                        "Buy"
                    ]
                },
                {
                    "type": "p",
                    "text": "Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                },
                {
                    "type": "list",
                    "items": [
                        "Activate Apple Pay",
                        "View shipping settings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Try Apple Pay",
                        "View your settings"
                    ]
                },
                {
                    "type": "p",
                    "text": "Scannable: Avoid unnecessary words and articles such as the, an, or a. Add menu item Add a menu item Section titles should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Informative: they should label the type of content grouped in the body content below",
                        "Like headings: follow the same content guidelines as when you’re writing headings"
                    ]
                },
                {
                    "type": "p",
                    "text": "Links should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Used for secondary or persistent actions: links should be used to represent lower priority actions than buttons, or persistent actions that merchants may take at any time (such as a persistent Edit link).",
                        "Clearly labeled: merchants should not need to guess where they’ll end up if they click on an action link. Never use “click here” as a link because it doesn’t set expectations about what’s next.",
                        "Similar to buttons: Follow the same content guidelines as when you’re writing text for buttons."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To create page-level layout,use the layout component",
                        "To highlight a Shopify feature,use the callout card component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The requiredtitleprop gives the card a level 2 heading (<h2>). This helps with readability and provides structure to screen reader users. If you use thesubduedprop on a card or section, make sure that the card or sectiontitleconveys the reason for usingsubdued. This ensures that merchants with low vision, including those who use screen readers, can identify that the content is inactive or less important."
                },
                {
                    "type": "code",
                    "code": "<LegacyCardtitle=\"Deactivated staff accounts\"sectioned subdued><List><List.Item>FelixCrafford</List.Item><List.Item>EzequielManno</List.Item></List></LegacyCard>"
                },
                {
                    "type": "code",
                    "code": "<LegacyCardtitle=\"Staff accounts\"sectioned subdued><List><List.Item>FelixCrafford</List.Item><List.Item>EzequielManno</List.Item></List></LegacyCard>"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/legacy-stack",
            "title": "Legacy stack — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This is the legacy version of the Stack component which is in the process of being updated to a more flexible and composable API. Use to lay out a horizontal row of components or to achieve no-fuss vertical centering. A stack is made of flexible items that wrap each of the stack’s children. Options provide control of the wrapping, spacing, and relative size of the items in the stack. This component is no longer supported. The newBlockStack\ncomponentcan be used in\ncombination with the new layout primitives to achieve similar results to\nLegacyStack. Learn more about ourcomponent\nlifecycles. Use to quickly lay out a horizontal row of components and maintain their relative sizes. On small screens, children rows wrap down to additional rows as needed."
                },
                {
                    "type": "code",
                    "code": "import{LegacyStack,Badge}from'@shopify/polaris';importReactfrom'react';functionLegacyStackExample(){return(<LegacyStack><Badge>Paid</Badge><Badge>Processing</Badge><Badge>Fulfilled</Badge><Badge>Completed</Badge></LegacyStack>);}"
                },
                {
                    "type": "p",
                    "text": "Stacks should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for small-scale layout tasks when you want a row of components that should wrap on small screen widths",
                        "Be used to vertically center two elements",
                        "Not be used for complex or unique arrangements of components",
                        "Not be used for large-scale page layout"
                    ]
                },
                {
                    "type": "p",
                    "text": "The stack component will treat multiple elements wrapped in a stack item component as one item. By default, each individual element is treated as one stack item. Use the fill prop on a single stack item component to make it fill the rest of the available horizontal space. See the “Stack where a single item fills the remaining space” example."
                },
                {
                    "type": "list",
                    "items": [
                        "To create the large-scale structure of pages,use the layout component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The stack component is for alignment only and doesn’t provide any structural information for assistive technologies. To convey relationships between specific items, consider using thelist component."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/media-card",
            "title": "Media card — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Media cards provide a consistent layout to present visual information to merchants. Visual media is used to provide additional context to the written information it's paired with. Use to surface educational information about a feature or opportunity."
                },
                {
                    "type": "code",
                    "code": "import{MediaCard}from'@shopify/polaris';importReactfrom'react';functionMediaCardExample(){return(<MediaCardtitle=\"Getting Started\"primaryAction={{content:'Learn about getting started',onAction:()=>{},}}description=\"Discover how Shopify can power up your entrepreneurial journey.\"popoverActions={[{content:'Dismiss',onAction:()=>{}}]}><imgalt=\"\"width=\"100%\"height=\"100%\"style={{objectFit:'cover',objectPosition:'center',}}src=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"/></MediaCard>);}"
                },
                {
                    "type": "p",
                    "text": "The visual media to display in the card. Heading content. Body content. Main call to action, rendered as a basic button. Secondary call to action, rendered as a plain button. Action list items to render in ellipsis popover. Whether or not card content should be laid out vertically. Defaults tofalse. Size of the visual media in the card. Defaults to'medium'. Callback when MediaCard is dismissed. Media cards should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provide merchants with a clear call to action.",
                        "Always pair text with a visual component, for example, body text paired with an image, video, etc.",
                        "Use media to enhance the written content. The written content should be able to stand alone without an explanation from the paired media.",
                        "Show targeted content toward specific audiences to maximize relevance.",
                        "Be dismissable."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use media cards as advertisements for your feature. Instead they should educate the merchant about how to accomplish tasks related to the section they’re in."
                    ]
                },
                {
                    "type": "p",
                    "text": "Media card titles should follow the content guidelines forheadings and subheadings. Body content should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Actionable: start sentences with imperative verbs when telling merchants what actions are available to them, especially something new. Don’t use permissive language like “you can”."
                    ]
                },
                {
                    "type": "p",
                    "text": "Get performance data for all of your sales channels. Now you can get performance data for all of your sales channels."
                },
                {
                    "type": "list",
                    "items": [
                        "Structured for merchant success: always put the most critical information first",
                        "Clear: use the verb “need” to help merchants understand when they’re required to do something"
                    ]
                },
                {
                    "type": "p",
                    "text": "To buy a shipping label, you need to enter the total weight of your shipment, including packaging. To buy a shipping label, you must enter the total weight of your shipment, including packaging. Buttons should be: Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button. Buy shipping label Buy"
                },
                {
                    "type": "list",
                    "items": [
                        "Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                    ]
                },
                {
                    "type": "p",
                    "text": "View shipping settings View your settings"
                },
                {
                    "type": "list",
                    "items": [
                        "Scannable: avoid unnecessary words and articles such as the, an, or a."
                    ]
                },
                {
                    "type": "p",
                    "text": "Add menu item Add a menu item"
                },
                {
                    "type": "list",
                    "items": [
                        "To create a video card,use the video thumbnail component",
                        "To group similar concepts and tasks together,use the card component",
                        "To create page-level layout,use the layout component",
                        "To explain a feature that merchants haven’t tried yet,use the empty state component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The requiredtitleprop gives the media card a level 2 heading (<h2>). This helps with readability and provides structure to screen reader users. It can also accept a ReactNode. Useactionable languageto ensure that the purpose of the media card is clear to all merchants, including those with issues related to reading and language."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/page",
            "title": "Page — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to build the outer wrapper of a page, including the page title and associated actions. Use for detail pages, which should have pagination and breadcrumbs, and also often have several actions."
                },
                {
                    "type": "code",
                    "code": "import{Page,Badge,LegacyCard}from'@shopify/polaris';importReactfrom'react';functionPageExample(){return(<PagebackAction={{content:'Products',url:'#'}}title=\"3/4 inch Leather pet collar\"titleMetadata={<Badgetone=\"success\">Paid</Badge>}subtitle=\"Perfect for any pet\"compactTitleprimaryAction={{content:'Save',disabled:true}}secondaryActions={[{content:'Duplicate',accessibilityLabel:'Secondary action label',onAction:()=>alert('Duplicate action'),},{content:'View on your store',onAction:()=>alert('View on your store action'),},]}actionGroups={[{title:'Promote',actions:[{content:'Share on Facebook',accessibilityLabel:'Individual action label',onAction:()=>alert('Share on Facebook action'),},],},]}pagination={{hasPrevious:true,hasNext:true,}}><LegacyCardtitle=\"Credit card\"sectioned><p>Creditcard information</p></LegacyCard></Page>);}"
                },
                {
                    "type": "p",
                    "text": "The contents of the page. Remove the normal max-width on the page. Decreases the maximum layout width. Intended for single-column layouts. Visually hide the title. A label to use for the page when the page is ready, used by screen readers. Will override the title prop if present. Enables filtering action list items. Primary page-level action. Page-level pagination. A back action link. Collection of secondary page-level actions. Collection of page-level groups of secondary actions. Callback that returns true when secondary actions are rolled up into action groups, and false when not. Page title, in large type. Page subtitle, in regular type. Important status information shown immediately after the title. Removes spacing between title and subtitle. Whether or not to add a max-width to the subtitle. Gets calculated by\nthe presence of either the secondaryActions or actionGroups props on the\nHeader that consumes this component. Check out thenew patterns sectionto\nlearn how merchants prefer to select dates in different scenarios! The page component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Always provide a title for the page header.",
                        "Always provide breadcrumbs when a page has a parent page.",
                        "Be organized around a primary activity. If that primary activity is a single action, provide it as a primary button in the page header.",
                        "Provide other page-level actions as secondary actions in the page header.",
                        "When the page represents an object of a certain type, provide pagination links to the previous and next object of the same type."
                    ]
                },
                {
                    "type": "p",
                    "text": "Titles should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Describe the page in as few words as possible.",
                        "Be the name of the object type (pluralized) when the page is a list of objects. For a list of orders, the page title should be “Orders”.",
                        "Not be truncated."
                    ]
                },
                {
                    "type": "p",
                    "text": "App icons should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provide their app icon",
                        "Only be provided for pages that are part of a Shopify app"
                    ]
                },
                {
                    "type": "p",
                    "text": "The content of each breadcrumb link should be the title of the page to which it links. Page header action labels should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clear and predictable: merchants should be able to anticipate what will happen when they click a page action. Never deceive merchants by mislabeling an action.",
                        "Action-led: they should always lead with a strong verb that encourages action. To provide enough context to merchants, use the {verb}+{noun} format."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create order",
                        "View in Postmates"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create",
                        "Postmates deliveries"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Short: for secondary actions, when the noun represents the same object as the page itself, a verb alone may be used. If there is ambiguity (such as with the verb “Cancel”), always use the {verb}+{noun} format.In the context of the orders list page:"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Import",
                        "Export"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Import orders",
                        "Export orders"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Scannable: avoid unnecessary words and articles such as the, an, or a."
                    ]
                },
                {
                    "type": "p",
                    "text": "Add menu item Add a menu item"
                },
                {
                    "type": "list",
                    "items": [
                        "To lay out the content within a page, use thelayout component",
                        "To add pagination within the context of a list or other page content, use thepagination component",
                        "To add primary and secondary calls to action at the bottom of a page, see thepage actions component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "App settings layout",
                        "Resource details layout"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/layout-and-structure/vertical-stack",
            "title": "Block stack — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to display children vertically and horizontally with full width by default. Based on CSS Flexbox. Control the vertical space between children using thegapprop."
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react';import{BlockStack}from'@shopify/polaris';functionBlockStackWithGapExample(){return(<SpacingBackground><BlockStackgap=\"500\"><Placeholderheight=\"48px\"/><Placeholderheight=\"48px\"/><Placeholderheight=\"48px\"/></BlockStack></SpacingBackground>);}constSpacingBackground=({children}:{children:React.ReactNode})=>{return(<divstyle={{background:'var(--p-color-bg-surface-success)',height:'auto',}}>{children}</div>);};constPlaceholder=({height='auto'})=>{return(<divstyle={{background:'var(--p-color-text-info)',padding:'14px var(--p-space-200)',height:height,}}/>);};"
                },
                {
                    "type": "p",
                    "text": "HTML Element type. Defaults to'div'. Vertical alignment of children. Horizontal alignment of children. The spacing between children. HTML id attribute. Reverse the render order of child items. Defaults tofalse. Aria role. Stacks should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Not be used for complex or unique arrangements of components",
                        "Not be used for large-scale page layout"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To display elements horizontally,use the InlineStack component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "BlockStack props are named following the convention of CSS logical properties, such asalign=\"start\"vs.align=\"top\"andinlineAlign=\"end\"vs.verticalAlign=\"right\". Learn more aboutCSS logicial properties."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/link",
            "title": "Link — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Links take users to another place, and usually appear within or directly following a sentence. Use for text links inside a paragraph or for standalone text. Default links open in the same browser tab."
                },
                {
                    "type": "code",
                    "code": "import{Link}from'@shopify/polaris';importReactfrom'react';functionLinkExample(){return<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>;}"
                },
                {
                    "type": "p",
                    "text": "ID for the link. The url to link to. The content to display inside the link. Makes the link open in a new tab. Where to display the url. Makes the link color the same as the current text color and adds an underline. Removes text decoration underline to the link. Callback when a link is clicked. Descriptive text to be read to screenreaders. Indicates whether or not the link is the primary navigation link when rendered inside of an `IndexTable.Row`. Links are used primarily for navigation, and usually appear within or directly following a sentence. Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”. The HTML that renders for theButtonandLinkcomponents carries meaning. Using these components intentionally and consistently results in:"
                },
                {
                    "type": "list",
                    "items": [
                        "a more inclusive experience for assistive technology users",
                        "a more cohesive visual experience for sighted users",
                        "products that are easier to maintain at scale"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use default links whenever possible to avoid disorienting merchants and causing accessibility problems by opening a new tab. External links should be used when merchants are:"
                },
                {
                    "type": "list",
                    "items": [
                        "Performing a task or workflow, like creating a product",
                        "Navigating to a page outside of the Shopify admin"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid using theexternal icon, as it can add unnecessary visual load inside a sentence or when accompanied by other content. Instead, add clarity to external links through clear link text and predictable placement of the link in a merchant’s workflow. Edge cases: External icons should not be used to indicate a new tab or window is being opened. However, they may be used sparingly in features where symbols help merchants scan and pick from a list of several kinds of navigation options, like the admin's global search results. Instead of using an external icon, consider using an icon with more meaning to strenghten your message Avoid using the icon beside link text If the existing link styles don’t meet the needs of your project, then use theUnstyledLinkcomponent to create a custom link style. The link component should follow the content guidelines forlinks."
                },
                {
                    "type": "list",
                    "items": [
                        "For actions that don’t appear within or directly following a sentence, use thebutton component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use theurlprop to give the link component a validhrefvalue. This allows the element to be identified as a link to assistive technologies and gives it default keyboard support. The Link component is underlined to give interactive elements a shape. This allows links to not rely on color from being the only way users can tell if an element is interactive."
                },
                {
                    "type": "list",
                    "items": [
                        "Remove the link underline when link is repeated in a list or navigation",
                        "Use underlines for links when used inline content"
                    ]
                },
                {
                    "type": "code",
                    "code": "<p>Learn more about<Link>Fraud Protect</Link>.</p>"
                },
                {
                    "type": "list",
                    "items": [
                        "Remove underlines when the user cannot determine it's interactivity"
                    ]
                },
                {
                    "type": "code",
                    "code": "<LinkremoveUnderline>Learn more about Fraud Protect.</Link>"
                },
                {
                    "type": "p",
                    "text": "Merchants generally expect links to navigate, and not to submit data or take action. If you need a component that doesn’t have a URL associated with it, then use thebutton componentinstead. Give links text that clearly describes their purpose. TheaccessibilityLabelprop adds anaria-labelattribute to the link, which can be accessed by assistive technologies like screen readers. Typically, this label text replaces the visible text on the link for merchants who use assistive technology. To provide consistency and clarity:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use the same text for links that navigate to the same content",
                        "Use different text for links that navigate to different content"
                    ]
                },
                {
                    "type": "code",
                    "code": "<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>"
                },
                {
                    "type": "code",
                    "code": "<Link>fulfilling orders</Link>"
                },
                {
                    "type": "code",
                    "code": "/* Somewhere in the code: */<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>/* Elsewhere in the code: */<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>"
                },
                {
                    "type": "code",
                    "code": "/* Somewhere in the code: */<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>/* Elsewhere in the code: */<Linkurl=\"https://help.shopify.com/manual\">order fulfillment section</Link>"
                },
                {
                    "type": "p",
                    "text": "Links use browser defaults for keyboard interaction."
                },
                {
                    "type": "list",
                    "items": [
                        "Give links keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "Activate links with theenter/returnkey"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/list",
            "title": "List — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Lists display a set of related text-only content. Each list item begins with a bullet or a number. Use for a text-only list of related items that don’t need to be in a specific order and don’t require an icon or other indicator."
                },
                {
                    "type": "code",
                    "code": "import{List}from'@shopify/polaris';importReactfrom'react';functionListExample(){return(<Listtype=\"bullet\"><List.Item>Yellowshirt</List.Item><List.Item>Redshirt</List.Item><List.Item>Greenshirt</List.Item></List>);}"
                },
                {
                    "type": "p",
                    "text": "Determines the space between list items. Defaults to'loose'. Type of list to display. Defaults to'bullet'. List item elements. Lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Break up chunks of related content to make the information easier for merchants to scan",
                        "Be phrased consistently (try to start each item with a noun or a verb and be consistent with each item)",
                        "Not be used for lists where the entire item represents an action"
                    ]
                },
                {
                    "type": "p",
                    "text": "Every item in a list should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start with a capital letter",
                        "Not use commas or semicolons at the end of each line"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red",
                        "Yellow",
                        "Blue"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red;",
                        "Yellow;",
                        "Blue."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Be written in sentence case"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Item one",
                        "Item two",
                        "Item three"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Item One",
                        "Item Two",
                        "Item Three"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To create a list of checkboxes or radio buttons,use the choice list component",
                        "To present a collection of objects of the same type such as customers, products, or orders,use the resource list component",
                        "When text labels for each item are useful for describing the content,use the Description List component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The list component outputs list items (<li>) inside a list wrapper (<ul>for bullet lists or<ol>for numbered lists). By default, list items are conveyed as a group of related elements to assistive technology users. To group items for layout only, consider using thevertical stack component."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/lists",
            "title": "Lists — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Provide merchants with easy-to-use interfaces for selecting options, organizing information, and interacting with data."
                },
                {
                    "type": "list",
                    "items": [
                        "Action listAction lists render a list of actions or selectable options. This component is usually placed inside a popover container to create a dropdown menu or to let merchants select from a list of options.",
                        "Description listUsed to present pairs of related information, like terms and definitions, or names and values, in a list format.",
                        "ListLists display a set of related text-only content. Each list item begins with a bullet or a number.",
                        "ListboxA Listbox is a vertical list of interactive options, with room for icons, descriptions, and other elements.",
                        "Option listThe option list component lets you create a list of grouped items that merchants can pick from. This can include single selection or multiple selection of options. Option list usually appears in a popover, and sometimes in a modal or a sidebar. Option lists are styled differently than choice lists and should not be used within a form, but as a standalone menu.",
                        "Resource itemResource items represent specific objects within a collection, such as products or orders. They provide contextual information on the resource type and link to the object’s detail page.",
                        "Resource listA resource list displays a collection of objects of the same type, like products or customers. The main job of a resource list is to help merchants find an object and navigate to a full-page representation of it."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/lists/action-list",
            "title": "Action list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Action lists render a list of actions or selectable options. This component is usually placed inside apopover containerto create a dropdown menu or to let merchants select from a list of options. Use for the least important actions so merchants aren’t distracted by secondary tasks. Can also be used for a set of actions that won’t fit in the available screen space."
                },
                {
                    "type": "code",
                    "code": "import{Button,Popover,ActionList}from'@shopify/polaris';import{useState,useCallback}from'react';functionActionListInPopoverExample(){const[active,setActive]=useState(true);consttoggleActive=useCallback(()=>setActive((active)=>!active),[]);consthandleImportedAction=useCallback(()=>console.log('Imported action'),[],);consthandleExportedAction=useCallback(()=>console.log('Exported action'),[],);constactivator=(<ButtononClick={toggleActive}disclosure>Moreactions</Button>);return(<div style={{height:'250px'}}><Popoveractive={active}activator={activator}autofocusTarget=\"first-node\"onClose={toggleActive}><ActionListactionRole=\"menuitem\"items={[{content:'Import file',onAction:handleImportedAction,},{content:'Export file',onAction:handleExportedAction,},]}/></Popover></div>);}"
                },
                {
                    "type": "p",
                    "text": "Collection of actions for list. Collection of sectioned action items. Defines a specific role attribute for each action in the list. Allow users to filter items in the list. Will only show if more than 8 items in the list. The item content of every items must be a string for this to work. Filter label used as a placeholder in the search field. Callback when any item is clicked or keypressed. Actions lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for secondary or less important information and actions since they’re hidden until merchants expose them by opening a popover",
                        "Contain actions that are related to each other"
                    ]
                },
                {
                    "type": "p",
                    "text": "Each item in an action list should be clear and predictable. Merchants should be able to anticipate what will happen when they click on an action item. Buy shipping label Buy Each item in an action list should always lead with a strong verb that encourages action. To provide enough context use the {verb}+{noun} format unless the action is clear with a single verb."
                },
                {
                    "type": "list",
                    "items": [
                        "Rename",
                        "Edit HTML"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "File name changes",
                        "HTML editing options"
                    ]
                },
                {
                    "type": "p",
                    "text": "Each item in an action list should be scannable avoiding unnecessary words and articles such as the, an, or a."
                },
                {
                    "type": "list",
                    "items": [
                        "Add menu item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add a menu item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To combine more than one button in a single layout,use the button group component",
                        "To display a list of related content,use the list component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Items in an action list are organized as list items (<li>) in an unordered list (<ul>) and are conveyed as a group of related elements to assistive technology users. Each item is implemented as abutton."
                },
                {
                    "type": "list",
                    "items": [
                        "Give the action list items keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "When action list items have a role ofmenuitem, navigate through the list withdown arrow(up arrowto move backwards)",
                        "Activate buttons with theenter/returnkey or thespacekey"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Each item is clearly discernible in high contrast mode",
                        "Each item that is focused and hovered is clearly discernible in high contrast mode"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/lists/description-list",
            "title": "Description list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Description lists are a way to organize and explain related information. They’re particularly useful when you need to list and define terms such as in a glossary. Use when you need to present merchants with a list of items or terms alongside descriptions and explanations."
                },
                {
                    "type": "code",
                    "code": "import{DescriptionList}from'@shopify/polaris';importReactfrom'react';functionExample(){return(<DescriptionListitems={[{term:'Logistics',description:'The management of products or other resources as they travel between a point of origin and a destination.',},{term:'Sole proprietorship',description:'A business structure where a single individual both owns and runs the company.',},{term:'Discount code',description:'A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.',},]}/>);}"
                },
                {
                    "type": "p",
                    "text": "Collection of items for list. Determines the spacing between list items. Description lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Contain terms and associated explanations, or descriptions for each term.",
                        "Provide information that isn’t action-oriented.",
                        "Not be an excuse for using unnecessarily complicated or jargon-filled language. Generally, if merchants need a description list to understand the language in Shopify, we should look for opportunities to simplify the language.",
                        "Not be used to upsell merchants on a feature or service."
                    ]
                },
                {
                    "type": "p",
                    "text": "Terms should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Written in sentence case (the first word capitalized, the rest lowercase)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discount code"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discount Code"
                    ]
                },
                {
                    "type": "p",
                    "text": "Terms descriptions should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Directly related to the term they’re describing"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discount code: A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discount code: Having a sale on your store is a great way to sell products quickly."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Written to describe the merchant benefit or utility",
                        "No more than one or two short sentences in length",
                        "Written in sentence case with all appropriate punctuation, including ending each sentence with a period",
                        "Conversational by using articles (the, a, an)",
                        "Written using plain language"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Abandoned checkout: The details of a checkout that was started but not completed, including the products added and the customer’s details."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Abandoned checkout: Details of products added to checkout but not purchased"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To create a list of actions or navigation,use the action list component."
                    ]
                },
                {
                    "type": "p",
                    "text": "The description list component produces a description list wrapper (<dl>), terms (<dt>), and definitions (<dd>) to convey the relationships between the list items to assistive technology users."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/lists/list",
            "title": "List — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Lists display a set of related text-only content. Each list item begins with a bullet or a number. Use for a text-only list of related items that don’t need to be in a specific order and don’t require an icon or other indicator."
                },
                {
                    "type": "code",
                    "code": "import{List}from'@shopify/polaris';importReactfrom'react';functionListExample(){return(<Listtype=\"bullet\"><List.Item>Yellowshirt</List.Item><List.Item>Redshirt</List.Item><List.Item>Greenshirt</List.Item></List>);}"
                },
                {
                    "type": "p",
                    "text": "Determines the space between list items. Defaults to'loose'. Type of list to display. Defaults to'bullet'. List item elements. Lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Break up chunks of related content to make the information easier for merchants to scan",
                        "Be phrased consistently (try to start each item with a noun or a verb and be consistent with each item)",
                        "Not be used for lists where the entire item represents an action"
                    ]
                },
                {
                    "type": "p",
                    "text": "Every item in a list should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start with a capital letter",
                        "Not use commas or semicolons at the end of each line"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red",
                        "Yellow",
                        "Blue"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red;",
                        "Yellow;",
                        "Blue."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Be written in sentence case"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Item one",
                        "Item two",
                        "Item three"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Item One",
                        "Item Two",
                        "Item Three"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To create a list of checkboxes or radio buttons,use the choice list component",
                        "To present a collection of objects of the same type such as customers, products, or orders,use the resource list component",
                        "When text labels for each item are useful for describing the content,use the Description List component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The list component outputs list items (<li>) inside a list wrapper (<ul>for bullet lists or<ol>for numbered lists). By default, list items are conveyed as a group of related elements to assistive technology users. To group items for layout only, consider using thevertical stack component."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/lists/listbox",
            "title": "Listbox — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A Listbox is a vertical list of interactive options, with room for icons, descriptions, and other elements. Basic implementation of a control element used to let merchants select options"
                },
                {
                    "type": "code",
                    "code": "import{Listbox}from'@shopify/polaris';importReactfrom'react';functionBaseListboxExample(){return(<ListboxaccessibilityLabel=\"Basic Listbox example\"><Listbox.Optionvalue=\"UniqueValue-1\">Item1</Listbox.Option><Listbox.Optionvalue=\"UniqueValue-2\">Item2</Listbox.Option><Listbox.Optionvalue=\"UniqueValue-3\">Item3</Listbox.Option></Listbox>);}"
                },
                {
                    "type": "p",
                    "text": "Inner content of the listbox. Indicates the default active option in the list. Patterns that support option creation should default the active option to the first option. Defaults toAutoSelection.FirstSelected. Explicitly enable keyboard control. Visually hidden text for screen readers. Provide a custom ID for the list element. Callback fired when an option is selected. Callback fired when an option becomes active. A listbox can be composed of:"
                },
                {
                    "type": "list",
                    "items": [
                        "Options:The individual options inside the Listbox that merchants can select or deselect.",
                        "Dividers:Placed between items and are useful in complex lists when there’s a lot of information for the merchant to parse.",
                        "Section headers:Used at the begining of a section when it’s necessary to call out the content being displayed. In most cases, the surrounding context should be enough for the merchant to understand the information in the list."
                    ]
                },
                {
                    "type": "p",
                    "text": "Listboxes should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly labeled so it’s noticeable to the merchant what type of options will be available",
                        "Limit the number of options displayed at once",
                        "Indicate a loading state to the merchant while option data is being populated"
                    ]
                },
                {
                    "type": "p",
                    "text": "Each item in aListboxshould be clear and descriptive."
                },
                {
                    "type": "list",
                    "items": [
                        "Traffic referrer source"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Source"
                    ]
                },
                {
                    "type": "p",
                    "text": "Location picker"
                },
                {
                    "type": "list",
                    "items": [
                        "For a text field and popover container,use the combobox component",
                        "Autocompletecan be used as a convenience wrapper in lieu of Combobox and Listbox."
                    ]
                },
                {
                    "type": "p",
                    "text": "TheListboxcomponent is based on theAria 1.2 Listbox pattern. It is important to not present interactive elements inside of list box options as they can interfere with navigation for assistive technology users."
                },
                {
                    "type": "list",
                    "items": [
                        "Use labels"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use interactive elements inside the list"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Access the list of options with the up and down arrow keys",
                        "Select an option that has focus with theenter/returnkey"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/lists/option-list",
            "title": "Option list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The option list component lets you create a list of grouped items that merchants can pick from. This can include single selection or multiple selection of options. Option list usually appears in a popover, and sometimes in a modal or a sidebar. Option lists are styled differently thanchoice listsand should not be used within a form, but as a standalone menu. Use for a group of similar selectable items when only one should be selectable at once."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,OptionList}from'@shopify/polaris';import{useState}from'react';functionOptionListExample(){const[selected,setSelected]=useState<string[]>([]);return(<LegacyCard><OptionListtitle=\"Inventory Location\"onChange={setSelected}options={[{value:'byward_market',label:'Byward Market'},{value:'centretown',label:'Centretown'},{value:'hintonburg',label:'Hintonburg'},{value:'westboro',label:'Westboro'},{value:'downtown',label:'Downtown'},]}selected={selected}/></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "A unique identifier for the option list. List title. Collection of options to be listed. Defines a specific role attribute for the list itself. Sections containing a header and related options. The selected options. Allow more than one option to be selected. Vertically align child content to the center, top, or bottom. Callback when selection is changed. Callback when pointer enters an option. Callback when focusing an option. The option list component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be placed on its own inside a container. Usually the container behaves like a menu, as it does withpopover. Don’t place other components within the same container.",
                        "Not be used when aselect componentwill do."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each item in an option list should be clear and descriptive."
                },
                {
                    "type": "list",
                    "items": [
                        "Traffic referrer source"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Source"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To render a list of actions,use the action list component",
                        "To create a list of grouped radio buttons or checkboxes,use the choice list component",
                        "For a basic version of option list as a single choice menu,use the select component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Items in an option list are organized as list items (<li>) in an unordered list (<ul>) and are conveyed as a group of related elements to assistive technology users. Controls in simple option lists arebuttons, and controls in multiple option lists arecheckboxes. If you customize the option list, you can provide ARIA roles that fit the context. These roles must be valid according to theW3C ARIA specificationto be conveyed correctly to screen reader users."
                },
                {
                    "type": "list",
                    "items": [
                        "Theroleprop adds an ARIA role to the option list wrapper"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/lists/resource-item",
            "title": "Resource item — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Resource items represent specific objects within a collection, such as products or orders. They provide contextual information on the resource type and link to the object’s detail page. A basic resource item with its details filled in at the point of use."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,ResourceList,ResourceItem,Text}from'@shopify/polaris';importtype{ResourceListProps}from'@shopify/polaris';import{useState}from'react';constitems=[{id:'6',url:'posts/6',title:'How To Get Value From Wireframes',author:'Jonathan Mangrove',},];functionResourceItemExample(){const[selectedItems,setSelectedItems]=useState<ResourceListProps['selectedItems']>([]);return(<LegacyCard><ResourceListresourceName={{singular:'blog post',plural:'blog posts'}}items={items}selectedItems={selectedItems}onSelectionChange={setSelectedItems}selectablerenderItem={(item)=>{const{id,url,title,author}=item;constauthorMarkup=author?<div>by{author}</div>:null;return(<ResourceItemid={id}url={url}accessibilityLabel={`View details for${title}`}name={title}><Textvariant=\"bodyMd\"fontWeight=\"bold\"as=\"h3\">{title}</Text>{authorMarkup}</ResourceItem>);}}/></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "This component defines its props in a way that our website can't automatically parse. The type definition is shown below, but it might be hard to read. The resource item component must be wrapped in theresource listcomponent. Resource items function as links to the full-page representations of the items. Each item should have a uniquenameprop. For eachResourceItem, theaccessibilityLabelprop should be used to give the link a uniquearia-labelvalue. Thearia-labelvalue should convey the link’s purpose, using thenamevalue. Merchants who use screen readers or other text to speech tools should be able to easily distinguish each link from the others. When adding custom content to resource items, ensure that all text is available to all users and that all custom controls have a unique accessible name to help users understand what will happen when the control is activated. Links can be activated with theenter/returnkey by default. If you add custom controls to resource items, then make sure that the controls:"
                },
                {
                    "type": "list",
                    "items": [
                        "Can be used with the keyboard",
                        "Receive keyboard focus in a logical order",
                        "Display a visible focus indicator"
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource items should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be tailored to the specific type of context being displayed.",
                        "Perform an action when clicked. The action should navigate to the resource’s details page or provide more detail about the item."
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource items can optionally:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provideshortcut actionsfor quick access to frequent actions from the resource’s details page."
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource items should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Present the information that merchants need to find the items that they’re looking for.",
                        "Support merchant tasks for the particular type of resource.",
                        "Avoid colons.",
                        "Shortcut actionsdon’t need to follow the full verb + noun formula for buttons."
                    ]
                },
                {
                    "type": "p",
                    "text": "To display a simple list of related content,use the list component."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/lists/resource-list",
            "title": "Resource list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A resource list displays a collection of objects of the same type, like products or customers. The main job of a resource list is to help merchants find an object and navigate to a full-page representation of it. A resource list with simple items and no bulk actions, sorting, or filtering."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,ResourceList,Avatar,ResourceItem,Text,}from'@shopify/polaris';importReactfrom'react';functionResourceListExample(){return(<LegacyCard><ResourceListresourceName={{singular:'customer',plural:'customers'}}items={[{id:'100',url:'#',name:'Mae Jemison',location:'Decatur, USA',},{id:'200',url:'#',name:'Ellen Ochoa',location:'Los Angeles, USA',},]}renderItem={(item)=>{const{id,url,name,location}=item;constmedia=<Avatarcustomer size=\"md\"name={name}/>;return(<ResourceItemid={id}url={url}media={media}accessibilityLabel={`View details for${name}`}><Textvariant=\"bodyMd\"fontWeight=\"bold\"as=\"h3\">{name}</Text><div>{location}</div></ResourceItem>);}}/></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "Item data; each item is passed to renderItem. Whether to remove all padding around the filter controls. Should be true if using Filters, and false if using LegacyFilters. The markup to display when no resources exist yet. Renders when set and items is empty. The markup to display when no results are returned on search or filter of the list. Renders when `filterControl` is set, items are empty, and `emptyState` is not set. Defaults toEmptySearchResult. Name of the resource, such as customers or products. Up to 2 bulk actions that will be given more prominence. Actions available on the currently selected items. Collection of IDs for the currently selected items. Whether or not the list has filter(s) applied. Renders a Select All button at the top of the list and checkboxes in front of each list item. For use when bulkActions aren't provided. *. Whether or not there are more items than currently set on the items prop. Determines whether or not to set the paginatedSelectAllAction and paginatedSelectAllText props on the BulkActions component. Overlays item list with a spinner while a background action is being performed. Boolean to show or hide the header. Total number of resources. Current value of the sort control. Collection of sort options to choose from. ReactNode to display instead of the sort control. Custom header text displayed above the list instead of the resource count. Callback when sort option is changed. Callback when selection is changed. Function to render each list item, must return a ResourceItem component. Function to customize the unique ID for each item. Function to resolve the ids of items. Properties to enable pagination at the bottom of the list. Resource lists can also:"
                },
                {
                    "type": "list",
                    "items": [
                        "Supportcustomized list items",
                        "Include bulk actions so merchants can act on multiple objects at once",
                        "Support sorting andfilteringof long lists",
                        "Be paired with pagination to make long lists digestible"
                    ]
                },
                {
                    "type": "p",
                    "text": "Using a resource list in a project involves combining the following components and subcomponents:"
                },
                {
                    "type": "list",
                    "items": [
                        "ResourceList",
                        "ResourceItemor a customized list item",
                        "Filters(optional)",
                        "Pagination component (optional)"
                    ]
                },
                {
                    "type": "p",
                    "text": "The resource list component provides the UI elements for list sorting, filtering, and pagination, but doesn’t provide the logic for these operations. When a sort option is changed, filter added, or second page requested, you’ll need to handle that event (including any network requests) and then update the component with new props. Shopify is organized around objects that represent merchants businesses, like customers, products, and orders. Each individual order, for example, is given a dedicated page that can be linked to. In Shopify, we call these types of objectsresources, and we call the object’s dedicated page itsdetails page. Take orders as an example. Merchants may have a lot of them. They need a way to scan their orders, see what state they’re in and find out which ones need action first. In other words, they need a way find an individual order, call up more information about it, and take action on it. Resource lists function as:"
                },
                {
                    "type": "list",
                    "items": [
                        "A content format, presenting a set of individual resources in a compact form",
                        "A system for taking action on one or more individual resources",
                        "A way to navigate to an individual resource’s details page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Because a details page displays all the content and actions for an individual resource, you can think of a resource list as a summary of these details pages. In this way resource lists bridge a middle level in Shopify’s navigation hierarchy. On wide screens, a resource list often looks like a table, especially if some content is aligned in columns. Despite this, resource lists and data tables have different purposes. A data table is a form of data visualization. It works best to present highly structured data for comparison and analysis. If your use case is more about visualizing or analyzing data, use thedata table component. If your use case is more about finding and taking action on objects, use a resource list. Resource lists can live in many places in Shopify. You could include a short resource list in a card summarizing recent marketing activities. You could also dedicate an entire page to a resource list like Shopify’s main products list. Resource lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Have items that perform an action when clicked. The action should navigate to the resource’s details page or otherwise provide more detail about the item.",
                        "Customize the content and layoutof their list items to support merchants’ needs.",
                        "Support sorting if the list can be long, and especially if different merchant tasks benefit from different sort orders.",
                        "Supportfilteringif the list can be long.",
                        "Paginate when the current list contains more than 50 items.",
                        "Use theskeleton pagecomponent on initial page load for the rest of the page if the loading prop is true and items are processing."
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource lists can optionally:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provide bulk actions for tasks that are often applied to many list items at once. For example, merchants may want to add the same tag to a large number of products."
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Identify the type of resource, usually with a heading"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products",
                        "Showing 50 products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "No heading"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Indicate when not all members of a resource are being shown. For a card summarizing and linking to recently purchased products:"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Popular products this week"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Follow the verb + noun formula for bulk actions",
                        "Follow thecontent guidelines for filter options and applied filters"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To present structured data for comparison and analysis, like when helping merchants to gain insights or review analytics, use thedata table component",
                        "To display a simple list of related content,use the list component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/media-card",
            "title": "Media card — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Media cards provide a consistent layout to present visual information to merchants. Visual media is used to provide additional context to the written information it's paired with. Use to surface educational information about a feature or opportunity."
                },
                {
                    "type": "code",
                    "code": "import{MediaCard}from'@shopify/polaris';importReactfrom'react';functionMediaCardExample(){return(<MediaCardtitle=\"Getting Started\"primaryAction={{content:'Learn about getting started',onAction:()=>{},}}description=\"Discover how Shopify can power up your entrepreneurial journey.\"popoverActions={[{content:'Dismiss',onAction:()=>{}}]}><imgalt=\"\"width=\"100%\"height=\"100%\"style={{objectFit:'cover',objectPosition:'center',}}src=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"/></MediaCard>);}"
                },
                {
                    "type": "p",
                    "text": "The visual media to display in the card. Heading content. Body content. Main call to action, rendered as a basic button. Secondary call to action, rendered as a plain button. Action list items to render in ellipsis popover. Whether or not card content should be laid out vertically. Defaults tofalse. Size of the visual media in the card. Defaults to'medium'. Callback when MediaCard is dismissed. Media cards should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provide merchants with a clear call to action.",
                        "Always pair text with a visual component, for example, body text paired with an image, video, etc.",
                        "Use media to enhance the written content. The written content should be able to stand alone without an explanation from the paired media.",
                        "Show targeted content toward specific audiences to maximize relevance.",
                        "Be dismissable."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use media cards as advertisements for your feature. Instead they should educate the merchant about how to accomplish tasks related to the section they’re in."
                    ]
                },
                {
                    "type": "p",
                    "text": "Media card titles should follow the content guidelines forheadings and subheadings. Body content should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Actionable: start sentences with imperative verbs when telling merchants what actions are available to them, especially something new. Don’t use permissive language like “you can”."
                    ]
                },
                {
                    "type": "p",
                    "text": "Get performance data for all of your sales channels. Now you can get performance data for all of your sales channels."
                },
                {
                    "type": "list",
                    "items": [
                        "Structured for merchant success: always put the most critical information first",
                        "Clear: use the verb “need” to help merchants understand when they’re required to do something"
                    ]
                },
                {
                    "type": "p",
                    "text": "To buy a shipping label, you need to enter the total weight of your shipment, including packaging. To buy a shipping label, you must enter the total weight of your shipment, including packaging. Buttons should be: Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button. Buy shipping label Buy"
                },
                {
                    "type": "list",
                    "items": [
                        "Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                    ]
                },
                {
                    "type": "p",
                    "text": "View shipping settings View your settings"
                },
                {
                    "type": "list",
                    "items": [
                        "Scannable: avoid unnecessary words and articles such as the, an, or a."
                    ]
                },
                {
                    "type": "p",
                    "text": "Add menu item Add a menu item"
                },
                {
                    "type": "list",
                    "items": [
                        "To create a video card,use the video thumbnail component",
                        "To group similar concepts and tasks together,use the card component",
                        "To create page-level layout,use the layout component",
                        "To explain a feature that merchants haven’t tried yet,use the empty state component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The requiredtitleprop gives the media card a level 2 heading (<h2>). This helps with readability and provides structure to screen reader users. It can also accept a ReactNode. Useactionable languageto ensure that the purpose of the media card is clear to all merchants, including those with issues related to reading and language."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/navigation",
            "title": "Navigation — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The navigation component is used to display the primary navigation in the sidebar of theframeof an application. Navigation includes a list of links that merchants use to move between sections of the application. This component is no longer supported. Please use theApp Bridge Navigation\nMenu\nAPIinstead. Use to present a navigation menu in theframe."
                },
                {
                    "type": "code",
                    "code": "import{Frame,Navigation}from'@shopify/polaris';import{HomeIcon,OrderIcon,ProductIcon}from'@shopify/polaris-icons';importReactfrom'react';functionNavigationExample(){return(<Frame><Navigationlocation=\"/\"><Navigation.Sectionitems={[{url:'#',label:'Home',icon:HomeIcon,},{url:'#',excludePaths:['#'],label:'Orders',icon:OrderIcon,badge:'15',},{url:'#',excludePaths:['#'],label:'Products',icon:ProductIcon,},]}/></Navigation></Frame>);}"
                },
                {
                    "type": "p",
                    "text": "The navigation component must be passed to theframecomponent. The mobile version of the navigation component appears in thetop barcomponent. The navigation component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Contain primary navigation items that perform an action when clicked. Each action should navigate to a URL or trigger another action like a modal overlay.",
                        "Only use secondary actions for supplementary actions to the primary actions.",
                        "Provide a non-primary link or action as a secondary action to a section or an item.",
                        "Group navigation items into sections based on related categories.",
                        "Use a section title to clarify the category of a section.",
                        "Use a major icon for item actions.",
                        "Use a minor icon for secondary actions.",
                        "Use the provided navigation section component to group navigation items.",
                        "Not add additional components, likebadge, in navigation items. Example: Don‘t add theNew badge."
                    ]
                },
                {
                    "type": "p",
                    "text": "Navigation should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use sentence case for primary and secondary navigation items"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Online store"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Online Store"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use as few words as possible to describe each item label"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products in your store"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use all caps for section labels"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "SALES CHANNELS"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Sales channels"
                    ]
                },
                {
                    "type": "p",
                    "text": "A navigation section groups together related navigation items. Navigation sections can be clarified by a heading. Merchants can use a section to easily find navigation items within a specific category. The content of the navigation component consists of navigation items. Each item is a link or action a merchant can take. Rollup allows items in a navigation section to roll up and be revealed when they are of use to the merchant. Action allows a complementary icon-only action to render next to the section title."
                },
                {
                    "type": "list",
                    "items": [
                        "To provide the structure for the navigation component, including the left sidebar and the top bar use theframecomponent.",
                        "To display the navigation component on small screens, to provide search and a user menu, or to theme theframecomponent to reflect an application’s brand, use thetop barcomponent.",
                        "To tell merchants their options once they have made changes to a form on the page use thecontextual save barcomponent.",
                        "To provide quick, at-a-glance feedback on the outcome of an action, use thetoastcomponent.",
                        "To indicate to merchants that a page is loading or an upload is processing use theloadingcomponent.",
                        "To alternate among related views within the same context, use thetabscomponent.",
                        "To embed a single action or link within a larger span of text, use thelinkcomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/navigation/footer-help",
            "title": "Footer help — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Footer help is used to refer merchants to more information related to the product or feature they’re using. Use to direct merchants to more information related to the product or feature they’re working on."
                },
                {
                    "type": "code",
                    "code": "import{FooterHelp,Link}from'@shopify/polaris';importReactfrom'react';functionFooterHelpExample(){return(<FooterHelp>Learnmore about{' '}<Linkurl=\"https://help.shopify.com/manual/orders/fulfill-orders\">fulfilling orders</Link></FooterHelp>);}"
                },
                {
                    "type": "p",
                    "text": "The content to display inside the layout. Horizontal alignment of the component. Footer help should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be positioned at the bottom of the interface",
                        "Provide links to help that’s related to the experience on the screen",
                        "Not be used to promote features or provide explanations for how something works",
                        "Never link to information designed to upsell to merchants",
                        "In rare cases, link to blog posts when there isn’t any help documentation to help merchants with the most logical next step in the workflow"
                    ]
                },
                {
                    "type": "p",
                    "text": "It’s recommended to link your footer help component tohelp documentation. Linking directly to your contact information might result in receiving a higher number of emails or calls. By default, footer help should link to information in the Shopify Help Center and should follow this content pattern:"
                },
                {
                    "type": "list",
                    "items": [
                        "Learn more about {X}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Links should be: Clearly labeled: Merchants shouldn’t need to guess where they’ll end up if they click on an action link. Never use “click here” as a link because it doesn’t set expectations about what’s next. Links should not be: Marked as external: Do not set theexternalprop on theLinkcomponent to force open a new tab."
                },
                {
                    "type": "list",
                    "items": [
                        "Learn more about [shipping zones]",
                        "[Contact us] about email marketing"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Go to [docs] to learn about zones.",
                        "Find out about [themes]."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To learn how to embed a link in a piece of text,use the link component",
                        "To learn how to provide support for an app,use the guide on supporting your app"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/navigation/fullscreen-bar",
            "title": "Fullscreen bar — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The Fullscreen bar is a header component that should be presented at the top of an app when it is in fullscreen mode. This is designed to ensure a uniform placement for a button to exit that mode. The Fullscreen bar can be customized by addingchildren. Use to provide structure for the top of an application while in fullscreen mode."
                },
                {
                    "type": "code",
                    "code": "import{Badge,ButtonGroup,FullscreenBar,Button,Text,}from'@shopify/polaris';import{useState,useCallback}from'react';functionFullscreenBarExample(){const[isFullscreen,setFullscreen]=useState(true);consthandleActionClick=useCallback(()=>{setFullscreen(false);},[]);constfullscreenBarMarkup=(<FullscreenBaronAction={handleActionClick}><divstyle={{display:'flex',flexGrow:1,justifyContent:'space-between',alignItems:'center',paddingLeft:'1rem',paddingRight:'1rem',}}><Badgetone=\"info\">Draft</Badge><div style={{marginLeft:'1rem',flexGrow:1}}><Textvariant=\"headingLg\"as=\"p\">Pagetitle</Text></div><ButtonGroup><ButtononClick={()=>{}}>SecondaryAction</Button><Buttonvariant=\"primary\"onClick={()=>{}}>PrimaryAction</Button></ButtonGroup></div></FullscreenBar>);return(<div style={{height:'250px',width:'100%'}}>{isFullscreen&&fullscreenBarMarkup}<div style={{padding:'1rem'}}>{!isFullscreen&&(<ButtononClick={()=>setFullscreen(true)}>GoFullscreen</Button>)}<Textvariant=\"headingLg\"as=\"p\">Pagecontent</Text></div></div>);}"
                },
                {
                    "type": "p",
                    "text": "Callback when back button is clicked. Render child elements. The Fullscreen bar component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be presented when an App is in fullscreen mode as a means of exiting that mode.",
                        "Fire an action to exit fullscreen mode."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To provide quick, at-a-glance feedback on the outcome of an action, use theApp Bridge Toast APIcomponent.",
                        "To indicate to merchants that a page is loading or an upload is processing, use theApp Bridge Loading APIcomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/navigation/link",
            "title": "Link — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Links take users to another place, and usually appear within or directly following a sentence. Use for text links inside a paragraph or for standalone text. Default links open in the same browser tab."
                },
                {
                    "type": "code",
                    "code": "import{Link}from'@shopify/polaris';importReactfrom'react';functionLinkExample(){return<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>;}"
                },
                {
                    "type": "p",
                    "text": "ID for the link. The url to link to. The content to display inside the link. Makes the link open in a new tab. Where to display the url. Makes the link color the same as the current text color and adds an underline. Removes text decoration underline to the link. Callback when a link is clicked. Descriptive text to be read to screenreaders. Indicates whether or not the link is the primary navigation link when rendered inside of an `IndexTable.Row`. Links are used primarily for navigation, and usually appear within or directly following a sentence. Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”. The HTML that renders for theButtonandLinkcomponents carries meaning. Using these components intentionally and consistently results in:"
                },
                {
                    "type": "list",
                    "items": [
                        "a more inclusive experience for assistive technology users",
                        "a more cohesive visual experience for sighted users",
                        "products that are easier to maintain at scale"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use default links whenever possible to avoid disorienting merchants and causing accessibility problems by opening a new tab. External links should be used when merchants are:"
                },
                {
                    "type": "list",
                    "items": [
                        "Performing a task or workflow, like creating a product",
                        "Navigating to a page outside of the Shopify admin"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid using theexternal icon, as it can add unnecessary visual load inside a sentence or when accompanied by other content. Instead, add clarity to external links through clear link text and predictable placement of the link in a merchant’s workflow. Edge cases: External icons should not be used to indicate a new tab or window is being opened. However, they may be used sparingly in features where symbols help merchants scan and pick from a list of several kinds of navigation options, like the admin's global search results. Instead of using an external icon, consider using an icon with more meaning to strenghten your message Avoid using the icon beside link text If the existing link styles don’t meet the needs of your project, then use theUnstyledLinkcomponent to create a custom link style. The link component should follow the content guidelines forlinks."
                },
                {
                    "type": "list",
                    "items": [
                        "For actions that don’t appear within or directly following a sentence, use thebutton component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use theurlprop to give the link component a validhrefvalue. This allows the element to be identified as a link to assistive technologies and gives it default keyboard support. The Link component is underlined to give interactive elements a shape. This allows links to not rely on color from being the only way users can tell if an element is interactive."
                },
                {
                    "type": "list",
                    "items": [
                        "Remove the link underline when link is repeated in a list or navigation",
                        "Use underlines for links when used inline content"
                    ]
                },
                {
                    "type": "code",
                    "code": "<p>Learn more about<Link>Fraud Protect</Link>.</p>"
                },
                {
                    "type": "list",
                    "items": [
                        "Remove underlines when the user cannot determine it's interactivity"
                    ]
                },
                {
                    "type": "code",
                    "code": "<LinkremoveUnderline>Learn more about Fraud Protect.</Link>"
                },
                {
                    "type": "p",
                    "text": "Merchants generally expect links to navigate, and not to submit data or take action. If you need a component that doesn’t have a URL associated with it, then use thebutton componentinstead. Give links text that clearly describes their purpose. TheaccessibilityLabelprop adds anaria-labelattribute to the link, which can be accessed by assistive technologies like screen readers. Typically, this label text replaces the visible text on the link for merchants who use assistive technology. To provide consistency and clarity:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use the same text for links that navigate to the same content",
                        "Use different text for links that navigate to different content"
                    ]
                },
                {
                    "type": "code",
                    "code": "<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>"
                },
                {
                    "type": "code",
                    "code": "<Link>fulfilling orders</Link>"
                },
                {
                    "type": "code",
                    "code": "/* Somewhere in the code: */<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>/* Elsewhere in the code: */<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>"
                },
                {
                    "type": "code",
                    "code": "/* Somewhere in the code: */<Linkurl=\"https://help.shopify.com/manual\">fulfilling orders</Link>/* Elsewhere in the code: */<Linkurl=\"https://help.shopify.com/manual\">order fulfillment section</Link>"
                },
                {
                    "type": "p",
                    "text": "Links use browser defaults for keyboard interaction."
                },
                {
                    "type": "list",
                    "items": [
                        "Give links keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "Activate links with theenter/returnkey"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/navigation/pagination",
            "title": "Pagination — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use pagination to let merchants move through an ordered collection of items that has been split into pages. On the web, pagination uses buttons to move back and forth between pages. On iOS and Android, pagination uses infinite scrolling. Use for pagination of resources."
                },
                {
                    "type": "code",
                    "code": "import{Pagination}from'@shopify/polaris';importReactfrom'react';functionPaginationExample(){return(<PaginationhasPreviousonPrevious={()=>{console.log('Previous');}}hasNextonNext={()=>{console.log('Next');}}/>);}"
                },
                {
                    "type": "p",
                    "text": "Keyboard shortcuts for the next button. Keyboard shortcuts for the previous button. Tooltip for the next button. Tooltip for the previous button. The URL of the next page. The URL of the previous page. Whether there is a next page to show. Whether there is a previous page to show. Accessible label for the pagination. Accessible labels for the buttons and UnstyledLinks. Callback when next button is clicked. Callback when previous button is clicked. Text to provide more context in between the arrow buttons. Layout structure of the component. On all platforms, pagination should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Only be used for lists with more than 25 items"
                    ]
                },
                {
                    "type": "p",
                    "text": "Web pagination should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be placed at the bottom of a long list that has been split up into pages",
                        "Pagination should navigate to the previous and next set of items in the paged list",
                        "Hint when merchants are at the first or the last page by disabling the corresponding button"
                    ]
                },
                {
                    "type": "p",
                    "text": "iOS and Android pagination should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start loading items when merchants are close to the bottom, roughly 5 items from the end",
                        "Showa spinnerbelow the list to indicate that items have been requested"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To see how pagination is used on a page, see thepage component",
                        "To add primary and secondary calls to action at the bottom of a page, see thepage actions component",
                        "Theresource list componentis often combined with pagination to handle long lists of resources such as orders or customers",
                        "To create stand-alone navigational links or calls to action, use thebutton component",
                        "To embed actions or pathways to more information within a sentence, use thelink component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/navigation/tabs",
            "title": "Tabs — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to alternate among related views within the same context. Use for most cases, especially when the number of tabs may be more than three."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,Tabs}from'@shopify/polaris';import{useState,useCallback}from'react';functionTabsDefaultExample(){const[selected,setSelected]=useState(0);consthandleTabChange=useCallback((selectedTabIndex:number)=>setSelected(selectedTabIndex),[],);consttabs=[{id:'all-customers-1',content:'All',accessibilityLabel:'All customers',panelID:'all-customers-content-1',},{id:'accepts-marketing-1',content:'Accepts marketing',panelID:'accepts-marketing-content-1',},{id:'repeat-customers-1',content:'Repeat customers',panelID:'repeat-customers-content-1',},{id:'prospects-1',content:'Prospects',panelID:'prospects-content-1',},];return(<Tabstabs={tabs}selected={selected}onSelect={handleTabChange}><LegacyCard.Sectiontitle={tabs[selected].content}><p>Tab{selected}selected</p></LegacyCard.Section></Tabs>);}"
                },
                {
                    "type": "p",
                    "text": "The items that map to each Tab. Content to display in tabs. The index of the currently selected Tab. Whether the Tabs are disabled or not. Whether to show the add new view Tab. Label for the new view Tab. Will override the default of \"Create new view\". Fit tabs to container. Text to replace disclosures horizontal dots. Override z-index of popovers and tooltips. Optional callback invoked when a Tab becomes selected. Optional callback invoked when a merchant saves a new view from the Modal. Tabs should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Represent the same kind of content, such as a list-view with different filters applied. Don’t use tabs to group content that is dissimilar.",
                        "Only be active one at a time.",
                        "Not force merchants to jump back and forth to do a single task. Merchants should be able to complete their work and find what they need under each tab.",
                        "Not be used for primary navigation."
                    ]
                },
                {
                    "type": "p",
                    "text": "Tabs should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly labeled to help differentiate the different sections beneath them.",
                        "Have short and scannable labels, generally kept to single word.",
                        "Relate to the section of Shopify they’re on. Imagine the page section title is an invisible noun after the tab. For example, the tabs for the orders section are:AllOpenUnfulfilledUnpaid",
                        "All",
                        "Open",
                        "Unfulfilled",
                        "Unpaid"
                    ]
                },
                {
                    "type": "p",
                    "text": "The tabs for the gift cards section are:"
                },
                {
                    "type": "list",
                    "items": [
                        "All",
                        "New",
                        "Partially used",
                        "Used",
                        "Disabled"
                    ]
                },
                {
                    "type": "p",
                    "text": "And for the customers section, the tabs are:"
                },
                {
                    "type": "list",
                    "items": [
                        "All",
                        "New",
                        "Returning",
                        "Abandoned checkouts",
                        "Email subscribers"
                    ]
                },
                {
                    "type": "p",
                    "text": "Where possible, follow this pattern when writing tabs."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/option-list",
            "title": "Option list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The option list component lets you create a list of grouped items that merchants can pick from. This can include single selection or multiple selection of options. Option list usually appears in a popover, and sometimes in a modal or a sidebar. Option lists are styled differently thanchoice listsand should not be used within a form, but as a standalone menu. Use for a group of similar selectable items when only one should be selectable at once."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,OptionList}from'@shopify/polaris';import{useState}from'react';functionOptionListExample(){const[selected,setSelected]=useState<string[]>([]);return(<LegacyCard><OptionListtitle=\"Inventory Location\"onChange={setSelected}options={[{value:'byward_market',label:'Byward Market'},{value:'centretown',label:'Centretown'},{value:'hintonburg',label:'Hintonburg'},{value:'westboro',label:'Westboro'},{value:'downtown',label:'Downtown'},]}selected={selected}/></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "A unique identifier for the option list. List title. Collection of options to be listed. Defines a specific role attribute for the list itself. Sections containing a header and related options. The selected options. Allow more than one option to be selected. Vertically align child content to the center, top, or bottom. Callback when selection is changed. Callback when pointer enters an option. Callback when focusing an option. The option list component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be placed on its own inside a container. Usually the container behaves like a menu, as it does withpopover. Don’t place other components within the same container.",
                        "Not be used when aselect componentwill do."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each item in an option list should be clear and descriptive."
                },
                {
                    "type": "list",
                    "items": [
                        "Traffic referrer source"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Source"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To render a list of actions,use the action list component",
                        "To create a list of grouped radio buttons or checkboxes,use the choice list component",
                        "For a basic version of option list as a single choice menu,use the select component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Items in an option list are organized as list items (<li>) in an unordered list (<ul>) and are conveyed as a group of related elements to assistive technology users. Controls in simple option lists arebuttons, and controls in multiple option lists arecheckboxes. If you customize the option list, you can provide ARIA roles that fit the context. These roles must be valid according to theW3C ARIA specificationto be conveyed correctly to screen reader users."
                },
                {
                    "type": "list",
                    "items": [
                        "Theroleprop adds an ARIA role to the option list wrapper"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/overlays",
            "title": "Overlays — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Display contextual elements on top of the main admin interface that provide additional information or functionality."
                },
                {
                    "type": "list",
                    "items": [
                        "PopoverSmall overlays that open on demand and close when the merchant interacts with any other part of Shopify. Used to surface secondary information or actions.",
                        "TooltipTooltips are floating labels that briefly explain the function of a user interface element. They can be triggered when merchants hover, focus, tap, or click."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/overlays/popover",
            "title": "Popover — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Popovers are small overlays that open on demand. They let merchants access additional content and actions without cluttering the page. Use when presenting a set of actions in a disclosable menu."
                },
                {
                    "type": "code",
                    "code": "import{Button,Popover,ActionList}from'@shopify/polaris';import{useState,useCallback}from'react';functionPopoverWithActionListExample(){const[popoverActive,setPopoverActive]=useState(true);consttogglePopoverActive=useCallback(()=>setPopoverActive((popoverActive)=>!popoverActive),[],);constactivator=(<ButtononClick={togglePopoverActive}disclosure>Moreactions</Button>);return(<div style={{height:'250px'}}><Popoveractive={popoverActive}activator={activator}autofocusTarget=\"first-node\"onClose={togglePopoverActive}><ActionListactionRole=\"menuitem\"items={[{content:'Import'},{content:'Export'}]}/></Popover></div>);}"
                },
                {
                    "type": "p",
                    "text": "The content to display inside the popover. The preferred direction to open the popover. The preferred alignment of the popover relative to its activator. Show or hide the Popover. The element to activate the Popover.\nIf using a button, use the default or tertiary variant\nwhich will show an active state when popover is active. Use the activator's input element to calculate the Popover position. Defaults totrue. The element type to wrap the activator with. Defaults to'div'. Override on the default z-index of 400. Prevents focusing the activator or the next focusable element when the popover is deactivated. Automatically add wrap content in a section. Allow popover to stretch to the full width of its activator. Allow popover to stretch to fit content vertically. Allow popover content to determine the overlay width and height. Remains in a fixed position. Used to illustrate the type of popover element. Allow the popover overlay to be hidden when printing. Callback when popover is closed. The preferred auto focus target defaulting to the popover container. Defaults to'container'. Prevents closing the popover when other overlays are clicked. Prevents page scrolling when the end of the scrollable Popover overlay content is reached - applied to Pane subcomponent. Defaults tofalse. Popovers should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Always be positioned next to the button or other interface element that triggers them",
                        "Be used for secondary or less important information and actions since they’re hidden until merchants hit the trigger",
                        "Contain navigation or actions that share a relationships to each other",
                        "Be triggered by a clearly labeled button",
                        "Use a default or tertiary button as the activator"
                    ]
                },
                {
                    "type": "p",
                    "text": "If a popover contains actions, they should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clear and predictable: merchants should be able to anticipate what will happen when they click on an action item. Never deceive merchants by mislabeling an action."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create order",
                        "Buy shipping label"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "New order",
                        "Buy"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Be action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rename",
                        "Edit HTML",
                        "Duplicate"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "HTML editing options",
                        "File name changes",
                        "Duplicate this order so that you can make edits, updates, or changes"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Be scannable, especially when the popover contains a list of actions or options. Avoid unnecessary words and articles such as “the”, “an”, or “a”."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add menu item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add a menu item"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the popover includes a series of navigational links, each item should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be concise but still give merchants enough information so they can easily find and accurately navigate to the path they want."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Online store",
                        "Messenger",
                        "Facebook",
                        "Buy Button"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Sales channel"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To put a list of actions in a popover,use the action list component",
                        "To let merchants select simple options from a list,use the select component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Popovers usually contain anoption listor anaction list, but can also contain other controls or content. To assist screen readers with sending focus to anaction list, passautofocusTarget='first-node'toPopover. This will avoid known issues a screen reader may have with keyboard support once focus is moved off the activator. Web browsers assign a default value of 'menu' to thearia-haspopuprole. You can use the propariaHaspopupto specify a value. Screen readers may fail to send focus to thePopovercontent when they expect the content to be adjacent to the element witharia-haspopupin the DOM tree. In this scenario, it is recommended not to provide theariaHaspopupprop."
                },
                {
                    "type": "list",
                    "items": [
                        "When a popover opens, focus moves to the first focusable element or to the popover container",
                        "Once focus is in the popover, merchants can access controls in the popover using thetabkey (andshift+tabbackwards) and standard keystrokes for interacting",
                        "Merchants can dismiss the popover by tabbing out of it, pressing theesckey, or clicking outside of it",
                        "When the popover is closed, focus returns to the element that launched it"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/overlays/tooltip",
            "title": "Tooltip — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Tooltips are floating labels that briefly explain the function of a user interface element. They can be triggered when merchants hover, focus, tap, or click. Use only when necessary to provide an explanation for an interface element."
                },
                {
                    "type": "code",
                    "code": "import{Tooltip,Text}from'@shopify/polaris';importReactfrom'react';functionTooltipExample(){return(<div style={{padding:'75px 0'}}><Tooltipactive content=\"This order has shipping labels.\"><TextfontWeight=\"bold\"as=\"span\">Order#1001</Text></Tooltip></div>);}"
                },
                {
                    "type": "p",
                    "text": "The element that will activate to tooltip. The content to display within the tooltip. Toggle whether the tooltip is visible. Delay in milliseconds while hovering over an element before the tooltip is visible. Dismiss tooltip when not interacting with its children. The direction the tooltip tries to display. Defaults to'above'. The element type to wrap the activator in. Defaults to'span'. Visually hidden text for screen readers. Width of content. Defaults to'default'. Padding of content. Defaults to'default'. Border radius of the tooltip. Defaults to'200'. Override on the default z-index of 400. Whether to render a dotted underline underneath the tooltip's activator. Whether the tooltip's content remains open after clicking the activator. Tooltips should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provide useful, additional information or clarification.",
                        "Succinctly describe or expand on the element they point to.",
                        "Be provided for icon-only buttons or a button with an associated keyboard shortcut.",
                        "Not be used to communicate critical information, including errors in forms or other interaction feedback.",
                        "Not contain any links or buttons.",
                        "Be used sparingly. If you’re building something that requires a lot of tooltips, work on clarifying the design and the language in the experience."
                    ]
                },
                {
                    "type": "p",
                    "text": "Tooltips should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be written in sentence case",
                        "Be concise and scannable",
                        "Not be used to communicate error messages or important account information"
                    ]
                },
                {
                    "type": "p",
                    "text": "Post reach is the number of people who have seen your post in their News Feed. To continue using Shopify, this amount must be paid immediately."
                },
                {
                    "type": "list",
                    "items": [
                        "To make helpful content more visible to merchants, use the help text portions of form components such astext fields,footer help, oran inline link to help"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/progress-bar",
            "title": "Progress bar — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The progress bar component is used to visually represent the completion of a task or operation. It shows how much of the task has been completed and how much is still left. Use this component to visually represent the completion of a task or operation."
                },
                {
                    "type": "code",
                    "code": "import{ProgressBar}from'@shopify/polaris';importReactfrom'react';functionProgressBarExample(){return(<div style={{width:225}}><ProgressBarprogress={75}/></div>);}"
                },
                {
                    "type": "p",
                    "text": "The progression of certain tasks. Defaults to0. Size of progressbar. Defaults to'medium'. Whether the fill animation is triggered. Defaults to'true'. Id (ids) of element (elements) that describes progressbar. Color of progressbar. Defaults to'highlight'. Progress bar components should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Give merchants an indication of how much of the task has completed and how much is left.",
                        "Not be used for entire page loads. In this case, use theSkeleton pagecomponent."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For tasks with a short load time, use theSpinnercomponent",
                        "For full page loads, use theSkeleton pagecomponent"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/radio-button",
            "title": "Radio button — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use radio buttons to present each item in a list of options where merchants must make a single selection. Use radio buttons where merchants must make a single selection."
                },
                {
                    "type": "code",
                    "code": "import{LegacyStack,RadioButton}from'@shopify/polaris';import{useState,useCallback}from'react';functionRadioButtonExample(){const[value,setValue]=useState('disabled');consthandleChange=useCallback((_:boolean,newValue:string)=>setValue(newValue),[],);return(<LegacyStackvertical><RadioButtonlabel=\"Accounts are disabled\"helpText=\"Customers will only be able to check out as guests.\"checked={value==='disabled'}id=\"disabled\"name=\"accounts\"onChange={handleChange}/><RadioButtonlabel=\"Accounts are optional\"helpText=\"Customers will be able to check out with a customer account or as a guest.\"id=\"optional\"name=\"accounts\"checked={value==='optional'}onChange={handleChange}/></LegacyStack>);}"
                },
                {
                    "type": "p",
                    "text": "Indicates the ID of the element that describes the radio button. Label for the radio button. Visually hide the label. Radio button is selected. Disable input. ID for form input. Name for form input. Value for form input. Callback when the radio button is toggled. Callback when radio button is focused. Callback when focus is removed. Grow to fill the space. Equivalent to width: 100%; height: 100%. Additional text to aide in use. Indicates the tone of the text field. Spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Radio buttons should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Always be used with an associated label component.",
                        "Be part of a list of radio buttons that:Include at least two or more choices.Are used to have merchants select only one option.Include mutually exclusive options—this means that each option must be\nindependent from every other option in the list. For example: Red, blue, and\nyellow are mutually exclusive. Red, blue, yellow, red/blue are not mutually\nexclusive.List options in a rational order that makes logical sense.Have a default option selected whenever possible.",
                        "Include at least two or more choices.",
                        "Are used to have merchants select only one option.",
                        "Include mutually exclusive options—this means that each option must be\nindependent from every other option in the list. For example: Red, blue, and\nyellow are mutually exclusive. Red, blue, yellow, red/blue are not mutually\nexclusive.",
                        "List options in a rational order that makes logical sense.",
                        "Have a default option selected whenever possible."
                    ]
                },
                {
                    "type": "p",
                    "text": "Radio button labels should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be introduced with a colon or a heading",
                        "Start with a capital letter"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Option 1"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "option 1"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Not end in punctuation if it’s a single sentence, word, or a fragment"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red;"
                    ]
                },
                {
                    "type": "p",
                    "text": "Toggle labels should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clear what merchants are enabling or disabling",
                        "Start with a capital letter"
                    ]
                },
                {
                    "type": "p",
                    "text": "Toggle values should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Never be labeled"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To make simple lists of radio buttons easier to build,use the choice list component",
                        "For long lists of options,consider the select componentto avoid overwhelming merchants",
                        "To present merchants with a list of checkboxes,use the choice list componentwith the “allow multiple” option",
                        "To display non-interactive list of related content,use the content list component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Screen readers convey the state of the radio button automatically."
                },
                {
                    "type": "list",
                    "items": [
                        "Use thedisabledprop to apply the HTMLdisabledattribute to the radio button<input>. This prevents merchants from being able to interact with the radio button, and conveys its inactive state to assistive technologies.",
                        "Use theidprop to provide a uniqueidattribute value for the radio button. If anidisn’t provided, then the component generates one. All radio buttons must have uniqueidvalues to work correctly with assistive technologies."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The requiredlabelprop conveys the purpose of the radio button to all merchants",
                        "Use thelabelHiddenprop to visually hide the label but make it available to assistive technologies",
                        "When you provide help text via thehelpTextprop or an inline error message via theerrorprop, the help or error content is conveyed to screen reader users with thearia-describedbyattribute"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Move focus to the radio button group using thetabkey (orshift+tabwhen tabbing backwards)",
                        "Use the up and down arrow keys to change which radio button is selected"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/resource-item",
            "title": "Resource item — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Resource items represent specific objects within a collection, such as products or orders. They provide contextual information on the resource type and link to the object’s detail page. A basic resource item with its details filled in at the point of use."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,ResourceList,ResourceItem,Text}from'@shopify/polaris';importtype{ResourceListProps}from'@shopify/polaris';import{useState}from'react';constitems=[{id:'6',url:'posts/6',title:'How To Get Value From Wireframes',author:'Jonathan Mangrove',},];functionResourceItemExample(){const[selectedItems,setSelectedItems]=useState<ResourceListProps['selectedItems']>([]);return(<LegacyCard><ResourceListresourceName={{singular:'blog post',plural:'blog posts'}}items={items}selectedItems={selectedItems}onSelectionChange={setSelectedItems}selectablerenderItem={(item)=>{const{id,url,title,author}=item;constauthorMarkup=author?<div>by{author}</div>:null;return(<ResourceItemid={id}url={url}accessibilityLabel={`View details for${title}`}name={title}><Textvariant=\"bodyMd\"fontWeight=\"bold\"as=\"h3\">{title}</Text>{authorMarkup}</ResourceItem>);}}/></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "This component defines its props in a way that our website can't automatically parse. The type definition is shown below, but it might be hard to read. The resource item component must be wrapped in theresource listcomponent. Resource items function as links to the full-page representations of the items. Each item should have a uniquenameprop. For eachResourceItem, theaccessibilityLabelprop should be used to give the link a uniquearia-labelvalue. Thearia-labelvalue should convey the link’s purpose, using thenamevalue. Merchants who use screen readers or other text to speech tools should be able to easily distinguish each link from the others. When adding custom content to resource items, ensure that all text is available to all users and that all custom controls have a unique accessible name to help users understand what will happen when the control is activated. Links can be activated with theenter/returnkey by default. If you add custom controls to resource items, then make sure that the controls:"
                },
                {
                    "type": "list",
                    "items": [
                        "Can be used with the keyboard",
                        "Receive keyboard focus in a logical order",
                        "Display a visible focus indicator"
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource items should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be tailored to the specific type of context being displayed.",
                        "Perform an action when clicked. The action should navigate to the resource’s details page or provide more detail about the item."
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource items can optionally:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provideshortcut actionsfor quick access to frequent actions from the resource’s details page."
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource items should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Present the information that merchants need to find the items that they’re looking for.",
                        "Support merchant tasks for the particular type of resource.",
                        "Avoid colons.",
                        "Shortcut actionsdon’t need to follow the full verb + noun formula for buttons."
                    ]
                },
                {
                    "type": "p",
                    "text": "To display a simple list of related content,use the list component."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/resource-list",
            "title": "Resource list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A resource list displays a collection of objects of the same type, like products or customers. The main job of a resource list is to help merchants find an object and navigate to a full-page representation of it. A resource list with simple items and no bulk actions, sorting, or filtering."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,ResourceList,Avatar,ResourceItem,Text,}from'@shopify/polaris';importReactfrom'react';functionResourceListExample(){return(<LegacyCard><ResourceListresourceName={{singular:'customer',plural:'customers'}}items={[{id:'100',url:'#',name:'Mae Jemison',location:'Decatur, USA',},{id:'200',url:'#',name:'Ellen Ochoa',location:'Los Angeles, USA',},]}renderItem={(item)=>{const{id,url,name,location}=item;constmedia=<Avatarcustomer size=\"md\"name={name}/>;return(<ResourceItemid={id}url={url}media={media}accessibilityLabel={`View details for${name}`}><Textvariant=\"bodyMd\"fontWeight=\"bold\"as=\"h3\">{name}</Text><div>{location}</div></ResourceItem>);}}/></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "Item data; each item is passed to renderItem. Whether to remove all padding around the filter controls. Should be true if using Filters, and false if using LegacyFilters. The markup to display when no resources exist yet. Renders when set and items is empty. The markup to display when no results are returned on search or filter of the list. Renders when `filterControl` is set, items are empty, and `emptyState` is not set. Defaults toEmptySearchResult. Name of the resource, such as customers or products. Up to 2 bulk actions that will be given more prominence. Actions available on the currently selected items. Collection of IDs for the currently selected items. Whether or not the list has filter(s) applied. Renders a Select All button at the top of the list and checkboxes in front of each list item. For use when bulkActions aren't provided. *. Whether or not there are more items than currently set on the items prop. Determines whether or not to set the paginatedSelectAllAction and paginatedSelectAllText props on the BulkActions component. Overlays item list with a spinner while a background action is being performed. Boolean to show or hide the header. Total number of resources. Current value of the sort control. Collection of sort options to choose from. ReactNode to display instead of the sort control. Custom header text displayed above the list instead of the resource count. Callback when sort option is changed. Callback when selection is changed. Function to render each list item, must return a ResourceItem component. Function to customize the unique ID for each item. Function to resolve the ids of items. Properties to enable pagination at the bottom of the list. Resource lists can also:"
                },
                {
                    "type": "list",
                    "items": [
                        "Supportcustomized list items",
                        "Include bulk actions so merchants can act on multiple objects at once",
                        "Support sorting andfilteringof long lists",
                        "Be paired with pagination to make long lists digestible"
                    ]
                },
                {
                    "type": "p",
                    "text": "Using a resource list in a project involves combining the following components and subcomponents:"
                },
                {
                    "type": "list",
                    "items": [
                        "ResourceList",
                        "ResourceItemor a customized list item",
                        "Filters(optional)",
                        "Pagination component (optional)"
                    ]
                },
                {
                    "type": "p",
                    "text": "The resource list component provides the UI elements for list sorting, filtering, and pagination, but doesn’t provide the logic for these operations. When a sort option is changed, filter added, or second page requested, you’ll need to handle that event (including any network requests) and then update the component with new props. Shopify is organized around objects that represent merchants businesses, like customers, products, and orders. Each individual order, for example, is given a dedicated page that can be linked to. In Shopify, we call these types of objectsresources, and we call the object’s dedicated page itsdetails page. Take orders as an example. Merchants may have a lot of them. They need a way to scan their orders, see what state they’re in and find out which ones need action first. In other words, they need a way find an individual order, call up more information about it, and take action on it. Resource lists function as:"
                },
                {
                    "type": "list",
                    "items": [
                        "A content format, presenting a set of individual resources in a compact form",
                        "A system for taking action on one or more individual resources",
                        "A way to navigate to an individual resource’s details page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Because a details page displays all the content and actions for an individual resource, you can think of a resource list as a summary of these details pages. In this way resource lists bridge a middle level in Shopify’s navigation hierarchy. On wide screens, a resource list often looks like a table, especially if some content is aligned in columns. Despite this, resource lists and data tables have different purposes. A data table is a form of data visualization. It works best to present highly structured data for comparison and analysis. If your use case is more about visualizing or analyzing data, use thedata table component. If your use case is more about finding and taking action on objects, use a resource list. Resource lists can live in many places in Shopify. You could include a short resource list in a card summarizing recent marketing activities. You could also dedicate an entire page to a resource list like Shopify’s main products list. Resource lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Have items that perform an action when clicked. The action should navigate to the resource’s details page or otherwise provide more detail about the item.",
                        "Customize the content and layoutof their list items to support merchants’ needs.",
                        "Support sorting if the list can be long, and especially if different merchant tasks benefit from different sort orders.",
                        "Supportfilteringif the list can be long.",
                        "Paginate when the current list contains more than 50 items.",
                        "Use theskeleton pagecomponent on initial page load for the rest of the page if the loading prop is true and items are processing."
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource lists can optionally:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provide bulk actions for tasks that are often applied to many list items at once. For example, merchants may want to add the same tag to a large number of products."
                    ]
                },
                {
                    "type": "p",
                    "text": "Resource lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Identify the type of resource, usually with a heading"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products",
                        "Showing 50 products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "No heading"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Indicate when not all members of a resource are being shown. For a card summarizing and linking to recently purchased products:"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Popular products this week"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Follow the verb + noun formula for bulk actions",
                        "Follow thecontent guidelines for filter options and applied filters"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To present structured data for comparison and analysis, like when helping merchants to gain insights or review analytics, use thedata table component",
                        "To display a simple list of related content,use the list component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/scrollable",
            "title": "Scrollable — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The scrollable component is a container for long form content, such as terms of service, that allows for scrolling so merchants can expose more text as they read. Use when you need to make a region within the page independently scrollable. It’s often used in modals and other panes where it’s helpful to provide an extra visual cue that content exists below or above the fold."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,Scrollable}from'@shopify/polaris';importReactfrom'react';functionScrollableExample(){return(<LegacyCardtitle=\"Terms of service\"sectioned><Scrollableshadow style={{height:'100px'}}focusable><p>Bysigning upfortheShopifyservice(“Service”)or anyoftheservicesofShopifyInc.(“Shopify”)you are agreeing to be bound bythe following terms andconditions(“TermsofService”).TheServicesoffered byShopifyunder theTermsofServiceinclude various productsand services to help you create and manage a retail store,whether anonlinestore(“OnlineServices”),a physical retailstore(“POSServices”),or both.Anynewfeaturesor tools which are added to thecurrentServiceshall be also subject to theTermsofService.Youcanreview the current versionoftheTermsofServiceat any time athttps://www.shopify.com/legal/terms.Shopifyreserves the right toupdate and change theTermsofServiceby posting updates and changesto theShopifywebsite.Youare advised to check theTermsofServicefromtime to timeforany updates or changes that may impact you.</p></Scrollable></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "Content to display in scrollable area. Scroll content vertically. Defaults totrue. Scroll content horizontally. Defaults totrue. Add a shadow when content is scrollable. Slightly hints content upon mounting when scrollable. Adds a tabIndex to scrollable when children are not focusable. Browser determined scrollbar width. Defaults to'thin'. Adds space to one or both sides to prevent content shift when scrolling is necessary. Called when scrolled to the bottom of the scroll area. Scrollable containers should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used when it’s helpful to provide an extra visual cue to let merchants know that content exists below or above the fold",
                        "Only be used for length text such as terms of service or other legal disclaimers and never for instructional or action-oriented text"
                    ]
                },
                {
                    "type": "p",
                    "text": "Scrollable containers are cards with scrolling functionality, and should follow thecontent guidelinesfor cards."
                },
                {
                    "type": "list",
                    "items": [
                        "To put long sections of information under a block that merchants can expand or collapse,use the collapsible component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/select",
            "title": "Select — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Select lets merchants choose one option from an options menu. Consider select when you have 4 or more options, to avoid cluttering the interface. Presents a classic dropdown menu or equivalent picker as determined by merchants’ browsers."
                },
                {
                    "type": "code",
                    "code": "import{Select}from'@shopify/polaris';import{useState,useCallback}from'react';functionSelectExample(){const[selected,setSelected]=useState('today');consthandleSelectChange=useCallback((value:string)=>setSelected(value),[],);constoptions=[{label:'Today',value:'today'},{label:'Yesterday',value:'yesterday'},{label:'Last 7 days',value:'lastWeek'},];return(<Selectlabel=\"Date range\"options={options}onChange={handleSelectChange}value={selected}/>);}"
                },
                {
                    "type": "p",
                    "text": "List of options or option groups to choose from. Label for the select. Adds an action to the label. Visually hide the label. Show the label to the left of the value, inside the control. Disable input. Additional text to aide in use. Example text to display as placeholder. ID for form input. Name for form input. Value for form input. Display an error state. Callback when selection is changed. Callback when select is focused. Callback when focus is removed. Visual required indicator, add an asterisk to label. Indicates the tone of the select. The select component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for selecting between 4 or more pre-defined options",
                        "Have a default option selected whenever possible",
                        "Use “Select” as a placeholder option only if there’s no logical default option"
                    ]
                },
                {
                    "type": "p",
                    "text": "Labels should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Give a short description (1–3 words) of the requested input.",
                        "Be written in sentence case (the first word capitalized, the rest lowercase).",
                        "Avoid punctuation and articles (“the”, “an”, “a”).",
                        "Be independent sentences. To supportinternationalization, they should not act as the first part of a sentence that is finished by the component’s options.",
                        "Be descriptive, not instructional. If the selection needs more explanation, use help text below the field."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Email address"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "What is your email address?"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Phone number"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "My phone number is:"
                    ]
                },
                {
                    "type": "p",
                    "text": "Options should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start with “Select” as a placeholder if there isn’t a default option",
                        "Be listed alphabetically or in another logical order so merchants can easily find the option they need",
                        "Be written in sentence case (the first word capitalized, the rest lowercase) and avoid using commas or semicolons at the end of each option",
                        "Be clearly labelled based on what the option will do"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let merchants select one option from a list with less than 4 options, usethe choice list component",
                        "To create a select where merchants can make multiple selections, or to allow advanced formatting of option text, use anoption listinside apopover"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input",
            "title": "Selection and input — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Choose or enter information using elements like checkboxes, text fields, and more."
                },
                {
                    "type": "list",
                    "items": [
                        "AutocompleteThe autocomplete component is an input field that provides selectable suggestions as a merchant types into it. It allows merchants to quickly search through and select from large collections of options. It's a convenience wrapper around the Combobox and Listbox components with minor UI differences.",
                        "CheckboxCheckboxes are most commonly used to give merchants a way to make a range of selections (zero, one, or multiple). They may also be used as a way to have merchants indicate they agree to specific terms and services.",
                        "Choice listA choice list lets you create a list of grouped radio buttons or checkboxes. Use this component if you need to group together a related list of interactive choices.",
                        "Color pickerAllows merchants to choose a color visually, or by entering a hex value.",
                        "ComboboxCombobox is an accessible autocomplete input that enables merchants to filter a list of options and select one or more values.",
                        "Date pickerDate pickers let merchants choose dates from a visual calendar that’s consistently applied wherever dates need to be selected across Shopify.",
                        "Drop zoneThe drop zone component lets users upload files by dragging and dropping the files into an area on a page, or activating a button.",
                        "FiltersA composite component that filters the items of a list or table.",
                        "FormA wrapper component that handles the submission of forms.",
                        "Index filtersUse index filters to allow merchants to filter, search, and sort their index table data and create unique saved views from the results.",
                        "Inline errorInline errors are brief, in-context messages that tell merchants something went wrong with a single or group of inputs in a form. Use inline errors to help merchants understand why a form input may not be valid and how to fix it.",
                        "Radio buttonUse radio buttons to present each item in a list of options where merchants must make a single selection.",
                        "Range sliderA range slider is an input field that merchants can use to select a numeric value within a given range (minimum and maximum values).",
                        "SelectSelect lets merchants choose one option from an options menu. Consider select when you have 4 or more options, to avoid cluttering the interface.",
                        "TagTags represent a set of interactive, merchant-supplied keywords that help label, organize, and categorize objects. Tags can be added or removed from an object by merchants.",
                        "Text fieldA text field is an input field that merchants can type into. It has a range of options and supports several text formats including numbers."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/autocomplete",
            "title": "Autocomplete — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The autocomplete component is an input field that provides selectable suggestions as a merchant types into it. It allows merchants to quickly search through and select from large collections of options. It's a convenience wrapper around theComboboxandListboxcomponents with minor UI differences. Use to help merchants complete text input quickly from a list of options."
                },
                {
                    "type": "code",
                    "code": "import{Autocomplete,Icon}from'@shopify/polaris';import{SearchIcon}from'@shopify/polaris-icons';import{useState,useCallback,useMemo}from'react';functionAutocompleteExample(){constdeselectedOptions=useMemo(()=>[{value:'rustic',label:'Rustic'},{value:'antique',label:'Antique'},{value:'vinyl',label:'Vinyl'},{value:'vintage',label:'Vintage'},{value:'refurbished',label:'Refurbished'},],[],);const[selectedOptions,setSelectedOptions]=useState<string[]>([]);const[inputValue,setInputValue]=useState('');const[options,setOptions]=useState(deselectedOptions);constupdateText=useCallback((value:string)=>{setInputValue(value);if(value===''){setOptions(deselectedOptions);return;}constfilterRegex=newRegExp(value,'i');constresultOptions=deselectedOptions.filter((option)=>option.label.match(filterRegex),);setOptions(resultOptions);},[deselectedOptions],);constupdateSelection=useCallback((selected:string[])=>{constselectedValue=selected.map((selectedItem)=>{constmatchedOption=options.find((option)=>{returnoption.value.match(selectedItem);});returnmatchedOption&&matchedOption.label;});setSelectedOptions(selected);setInputValue(selectedValue[0]||'');},[options],);consttextField=(<Autocomplete.TextFieldonChange={updateText}label=\"Tags\"value={inputValue}prefix={<Iconsource={SearchIcon}tone=\"base\"/>}placeholder=\"Search\"autoComplete=\"off\"/>);return(<div style={{height:'225px'}}><Autocompleteoptions={options}selected={selectedOptions}onSelect={updateSelection}textField={textField}/></div>);}"
                },
                {
                    "type": "p",
                    "text": "A unique identifier for the Autocomplete. Collection of options to be listed. The selected options. The text field component attached to the list of options. The preferred direction to open the popover. Title of the list of options. Allow more than one option to be selected. An action to render above the list of options. Display loading state. Indicates if more results will load dynamically. Is rendered when there are no options. Callback when the selection of options is changed. Callback when the end of the list is reached. The autocomplete component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly labeled so it’s obvious to the merchant what type of options will be available",
                        "Limit the number of options displayed at once",
                        "Not be used within a popover",
                        "Indicate a loading state to the merchant while option data is being populated"
                    ]
                },
                {
                    "type": "p",
                    "text": "The input field for autocomplete should follow thecontent guidelinesfor text fields."
                },
                {
                    "type": "list",
                    "items": [
                        "For an input field without suggested options,use the text field component",
                        "For a list of selectable options not linked to an input field,use the option list component",
                        "For a text field that triggers a popover,use the combo box component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The autocomplete component is based on theARIA 1.2 combobox patternand theAria 1.2 Listbox pattern. The autocomplete list displays below the text field or other control by default so it is easy for merchants to discover and use. However, you can change the position with thepreferredPositionprop. Autocomplete features can be challenging for merchants with visual, motor, and cognitive disabilities. Even when they’re built using best practices, these features can be difficult to use with some assistive technologies. Merchants should always be able to search, enter data, or perform other activities without relying on the autocomplete. Use autocomplete as progressive enhancement to make the interface easier to use for most merchants. Require that merchants make a selection from the autocomplete to complete a task."
                },
                {
                    "type": "list",
                    "items": [
                        "Give the autocomplete text input keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "Access the list of options with the up and down arrow keys",
                        "Select an option that has focus with theenter/returnkey"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/checkbox",
            "title": "Checkbox — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Checkboxes are most commonly used to give merchants a way to make a range of selections (zero, one, or multiple). They may also be used as a way to have merchants indicate they agree to specific terms and services. Use in forms to toggle the state of something on or off. Default checkboxes can appear as selected and disabled, or unselected."
                },
                {
                    "type": "code",
                    "code": "import{Checkbox}from'@shopify/polaris';import{useState,useCallback}from'react';functionCheckboxExample(){const[checked,setChecked]=useState(false);consthandleChange=useCallback((newChecked:boolean)=>setChecked(newChecked),[],);return(<Checkboxlabel=\"Basic checkbox\"checked={checked}onChange={handleChange}/>);}"
                },
                {
                    "type": "p",
                    "text": "Indicates the ID of the element that is controlled by the checkbox. Indicates the ID of the element that describes the checkbox. Label for the checkbox. Visually hide the label. Checkbox is selected. `indeterminate` shows a horizontal line in the checkbox. Disable input. ID for form input. Name for form input. Value for form input. Callback when checkbox is toggled. Callback when checkbox is focused. Callback when focus is removed. Added to the wrapping label. Grow to fill the space. Equivalent to width: 100%; height: 100%. Additional text to aide in use. Display an error message. Indicates the tone of the checkbox. Spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Checkboxes should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Work independently from each other. Selecting one checkbox shouldn’t change the selection status of another checkbox in the list. The exception is when a checkbox is used to make a bulk selection of multiple items.",
                        "Be framed positively. For example, say “Publish store” instead of “Hide store”.",
                        "Always have a label when used to activate or deactivate a setting.",
                        "Be listed according to a logical order, whether it’s alphabetical, numerical, time-based, or some other clear system.",
                        "Link to more information or include a subtitle as required to provide more explanation. Don’t rely on tooltips to explain a checkbox."
                    ]
                },
                {
                    "type": "p",
                    "text": "Lists that use checkboxes should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start with a capital letter"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Option 1",
                        "Option 2",
                        "Option 3"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "option 1",
                        "option 2",
                        "option 3"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Not use commas or semicolons at the end of each line"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red",
                        "Yellow",
                        "Blue"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red;",
                        "Yellow;",
                        "Blue."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "In the rare case where the checkbox is asking merchants to agree to terms or service, use the first person"
                    ]
                },
                {
                    "type": "p",
                    "text": "I agree to the Terms of Service. You agree to the Terms of Service"
                },
                {
                    "type": "list",
                    "items": [
                        "To present a list of options where merchants can only make a single choice,use the radio button component",
                        "To display a list of related content,use the choice list component",
                        "To create an ungrouped list,use the content list component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Screen readers convey the state of the checkbox automatically."
                },
                {
                    "type": "list",
                    "items": [
                        "Use thedisabledprop to apply the HTMLdisabledattribute to the checkbox<input>. This prevents merchants from being able to interact with the checkbox, and conveys its inactive state to assistive technologies.",
                        "Use theidprop to provide a uniqueidattribute value for the checkbox. If anidisn’t provided, then the component generates one. All checkboxes must have uniqueidvalues to work correctly with assistive technologies.",
                        "Settingchecked=\"indeterminate\"conveys the state of the checkbox usingaria-checked=\"mixed\".",
                        "Setting theariaControlsprop conveys the ID of the element whose contents or presence are controlled by the checkbox to screen reader users with thearia-controlsattribute."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The requiredlabelprop conveys the purpose of the checkbox to all merchants",
                        "Use thelabelHiddenprop to visually hide the label but make it available to assistive technologies",
                        "When you provide help text via thehelpTextprop or an inline error message via theerrorprop, the help or error content is conveyed to screen reader users with thearia-describedbyattribute"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Move focus to each checkbox using thetabkey (orshift+tabwhen tabbing backwards)",
                        "To interact with the checkbox when it has keyboard focus, press thespacekey"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/choice-list",
            "title": "Choice list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A choice list lets you create a list of grouped radio buttons or checkboxes. Use this component if you need to group together a related list of interactive choices. Allows merchants to select one option from a list. Make sure all options are an either/or choice."
                },
                {
                    "type": "code",
                    "code": "import{ChoiceList}from'@shopify/polaris';import{useState,useCallback}from'react';functionSingleChoiceListExample(){const[selected,setSelected]=useState<string[]>(['hidden']);consthandleChange=useCallback((value:string[])=>setSelected(value),[]);return(<ChoiceListtitle=\"Company name\"choices={[{label:'Hidden',value:'hidden'},{label:'Optional',value:'optional'},{label:'Required',value:'required'},]}selected={selected}onChange={handleChange}/>);}"
                },
                {
                    "type": "p",
                    "text": "Label for list of choices. Collection of choices. Collection of selected choices. Name for form input. Allow merchants to select multiple options at once. Toggles display of the title. Display an error message. Disable all choices *. Callback when the selected choices change. Indicates the tone of the choice list. Choice lists should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Include a title that tells merchants what to do or explains the available options",
                        "Label options clearly based on what the option will do",
                        "Avoid mutually exclusive options when allowing multiple selection"
                    ]
                },
                {
                    "type": "p",
                    "text": "List titles should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Help merchants understand how the items in the list are grouped together, or should explain what kind of choice merchants are making"
                    ]
                },
                {
                    "type": "p",
                    "text": "Pick a shipping method Pick one"
                },
                {
                    "type": "list",
                    "items": [
                        "Use simple, clear language that can be read at a glance",
                        "Keep list titles to a single sentence",
                        "It the title introduces the list, it should end with a colon",
                        "Should be written in sentence case"
                    ]
                },
                {
                    "type": "p",
                    "text": "Shipping options Shipping Options If the customer abandons their checkout, send them an email reminder to complete their order:"
                },
                {
                    "type": "list",
                    "items": [
                        "Option a",
                        "Option b"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the customer abandons their checkout, send them an email reminder to complete their order"
                },
                {
                    "type": "list",
                    "items": [
                        "Option a",
                        "Option b"
                    ]
                },
                {
                    "type": "p",
                    "text": "Every item in a choice list should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start with a capital letter",
                        "Not use commas or semicolons at the end of each line",
                        "Be written in sentence case (the first word capitalized, the rest lowercase)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Option 1",
                        "Yellow",
                        "Item three"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "option 1",
                        "Yellow;",
                        "Item Three"
                    ]
                },
                {
                    "type": "p",
                    "text": "If your list contains helper text, only the description below the list item should contain punctuation."
                },
                {
                    "type": "list",
                    "items": [
                        "To present a long list of radio buttons or when space is constrained,use the select component",
                        "To build a group of radio buttons or checkboxes with a custom layout, use theradio button componentorcheckbox component",
                        "To display a simple, non-interactive list of related content,use the list component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The choice list component uses the accessibility features of thecheckboxandradio buttoncomponents."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/color-picker",
            "title": "Color picker — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The color picker is used to let merchants select a color visually. For example, merchants use the color picker to customize the accent color of the email templates for their shop. Use when merchants need to select a color to make the selection a visual task rather than a technical one."
                },
                {
                    "type": "code",
                    "code": "import{ColorPicker}from'@shopify/polaris';import{useState}from'react';functionColorPickerExample(){const[color,setColor]=useState({hue:120,brightness:1,saturation:1,});return<ColorPickeronChange={setColor}color={color}/>;}"
                },
                {
                    "type": "p",
                    "text": "ID for the element. The currently selected color. Allow user to select an alpha value. Allow HuePicker to take the full width. Callback when color is selected."
                },
                {
                    "type": "list",
                    "items": [
                        "Use the alpha slider if you want to allow merchants to be able to select a transparent color"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/combobox",
            "title": "Combobox — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Combobox is an accessible autocomplete input that enables merchants to filter a list of options and select one or more values. Use when merchants can select one option from a predefined or editable list."
                },
                {
                    "type": "code",
                    "code": "import{Listbox,Combobox,Icon}from'@shopify/polaris';import{SearchIcon}from'@shopify/polaris-icons';import{useState,useCallback,useMemo}from'react';functionComboboxExample(){constdeselectedOptions=useMemo(()=>[{value:'rustic',label:'Rustic'},{value:'antique',label:'Antique'},{value:'vinyl',label:'Vinyl'},{value:'vintage',label:'Vintage'},{value:'refurbished',label:'Refurbished'},],[],);const[selectedOption,setSelectedOption]=useState<string|undefined>();const[inputValue,setInputValue]=useState('');const[options,setOptions]=useState(deselectedOptions);constescapeSpecialRegExCharacters=useCallback((value:string)=>value.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&'),[],);constupdateText=useCallback((value:string)=>{setInputValue(value);if(value===''){setOptions(deselectedOptions);return;}constfilterRegex=newRegExp(escapeSpecialRegExCharacters(value),'i');constresultOptions=deselectedOptions.filter((option)=>option.label.match(filterRegex),);setOptions(resultOptions);},[deselectedOptions,escapeSpecialRegExCharacters],);constupdateSelection=useCallback((selected:string)=>{constmatchedOption=options.find((option)=>{returnoption.value.match(selected);});setSelectedOption(selected);setInputValue((matchedOption&&matchedOption.label)||'');},[options],);constoptionsMarkup=options.length>0?options.map((option)=>{const{label,value}=option;return(<Listbox.Optionkey={`${value}`}value={value}selected={selectedOption===value}accessibilityLabel={label}>{label}</Listbox.Option>);}):null;return(<div style={{height:'225px'}}><Comboboxactivator={<Combobox.TextFieldprefix={<Iconsource={SearchIcon}/>}onChange={updateText}label=\"Search tags\"labelHiddenvalue={inputValue}placeholder=\"Search tags\"autoComplete=\"off\"/>}>{options.length>0?(<ListboxonSelect={updateSelection}>{optionsMarkup}</Listbox>):null}</Combobox></div>);}"
                },
                {
                    "type": "p",
                    "text": "The text field component to activate the Popover. Allows more than one option to be selected. The content to display inside the popover. The preferred direction to open the popover. Whether or not more options are available to lazy load when the bottom of the listbox reached. Use the hasMoreResults boolean provided by the GraphQL API of the paginated data. Height to set on the Popover Pane. Callback fired when the bottom of the listbox is reached. Use to lazy load when listbox option data is paginated. Min Height to set on the Popover Pane. Callback fired when the bottom of the lisbox is reached. Use to lazy load when listbox option data is paginated. Callback fired when the popover closes. A combobox is made up of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "TextField: A text input that activates a popover displaying a list of options. As merchants type in the text field, the list of options is filtered by the input value. Options replace or add to the input value when selected.",
                        "Popover: An overlay containing a list of options.",
                        "Listbox: A list of options to filter and select or deselect.",
                        "Listbox.Option: The individual options to select or deselect. Check out thelistbox component documentationto learn how to compose it with various content."
                    ]
                },
                {
                    "type": "p",
                    "text": "TheComboboxcomponent should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly labeled so the merchant knows what kind of options will be available",
                        "Not be used within a popover",
                        "Indicate a loading state to the merchant while option data is being populated",
                        "Order items in an intentional way so it’s easy for the merchant to find a specific value"
                    ]
                },
                {
                    "type": "p",
                    "text": "The input field forComboboxshould follow thecontent guidelinesfor text fields. Item order should be intentional. Order them so it’s easy for the merchant to find a specific value. Some ways you can do this:"
                },
                {
                    "type": "list",
                    "items": [
                        "Sort options in alphabetical order",
                        "Display options based on how frequently the merchant selects an option"
                    ]
                },
                {
                    "type": "p",
                    "text": "If multiple options can be selected, move selected items to the top of the list. If this doesn’t work for your context, you can override this behavior."
                },
                {
                    "type": "list",
                    "items": [
                        "By default, menu items are filtered based on whether or not they match the value of the textfield.",
                        "Filters arenotcase-sensitive by default.",
                        "You can apply custom filtering logic if the default behavior doesn’t make sense for your use case."
                    ]
                },
                {
                    "type": "p",
                    "text": "The tag multi-select input enables merchants to efficiently add or remove tags from a resource, like a product or an order. It uses the inline autocomplete combobox pattern to present merchants with an editable list of tags to browse and select from."
                },
                {
                    "type": "list",
                    "items": [
                        "For an input field without suggested options,use the text field component",
                        "For a list of selectable options not linked to an input field,use the list box component"
                    ]
                },
                {
                    "type": "p",
                    "text": "TheComboboxcomponent is based on theARIA 1.2 combobox pattern. It is a combination of a single-lineTextFieldand aPopover. The current implementation expects aListboxcomponent to be used. TheComboboxpopover displays below the text field or other control by default so it is easy for merchants to discover and use. However, you can change the position with thepreferredPositionprop. Comboboxfeatures can be challenging for merchants with visual, motor, and cognitive disabilities. Even when they’re built using best practices, these features can be difficult to use with some assistive technologies. Merchants should always be able to search, enter data, or perform other activities without relying on the combobox."
                },
                {
                    "type": "list",
                    "items": [
                        "Use combobox as progressive enhancement to make the interface easier to use for most merchants."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Require that merchants make a selection from the combobox to complete a task."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Give the combobox's text input keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/date-picker",
            "title": "Date picker — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Date pickers let merchants choose dates from a visual calendar that’s consistently applied wherever dates need to be selected across Shopify. Use when merchants need to select a single day close to today (today is the default starting position for the date picker)."
                },
                {
                    "type": "code",
                    "code": "import{DatePicker}from'@shopify/polaris';import{useState,useCallback}from'react';functionDatePickerExample(){const[{month,year},setDate]=useState({month:1,year:2018});const[selectedDates,setSelectedDates]=useState({start:newDate('Wed Feb 07 2018 00:00:00 GMT-0500 (EST)'),end:newDate('Wed Feb 07 2018 00:00:00 GMT-0500 (EST)'),});consthandleMonthChange=useCallback((month:number,year:number)=>setDate({month,year}),[],);return(<DatePickermonth={month}year={year}onChange={setSelectedDates}onMonthChange={handleMonthChange}selected={selectedDates}/>);}"
                },
                {
                    "type": "p",
                    "text": "ID for the element. The selected date or range of dates. The month to show, from 0 to 11. 0 is January, 1 is February ... 11 is December. The year to show. Allow a range of dates to be selected. Disable selecting dates before this. Disable selecting dates after this. Disable specific dates. The selection can span multiple months. First day of week, from 0 to 6. 0 is Sunday, 1 is Monday ... 6 is Saturday. Defaults to0. Visually hidden prefix text for selected days on single selection date pickers. Callback when date is selected. Callback when month is changed. Check out thenew patterns sectionto\nlearn how merchants prefer to select dates in different scenarios! Date pickers should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use smart defaults and highlight common selections",
                        "Close after a single date is selected unless a range with a start and end date is required",
                        "Set the start date on first click or tap and the end date on second click or tap if a range is required",
                        "Not be used to enter a date that is many years in the future or the past",
                        "Followdate format guidelines"
                    ]
                },
                {
                    "type": "p",
                    "text": "Some users might find interacting with date pickers to be challenging. When you use the date picker component, always give users the option to enter the date using a text field component as well. If you use the date picker within apopover component, then use a button to trigger the popover instead of displaying the popover when the text input gets focus. This gives users more control over their experience."
                },
                {
                    "type": "list",
                    "items": [
                        "Press thetabkey to move forward andshift+tabto move backward through the previous button, next button, and the calendar",
                        "When focus is in the calendar, move keyboard focus between the dates using the arrow keys",
                        "To select a date that has focus, press theenter/returnkey"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Date picking"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/drop-zone",
            "title": "Drop zone — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The drop zone component lets users upload files by dragging and dropping the files into an area on a page, or activating a button. Use to allow merchants to upload files. They can drag and drop files into the dashed area, or upload traditionally by clicking the “Add file” button or anywhere inside the dashed area."
                },
                {
                    "type": "code",
                    "code": "import{DropZone,LegacyStack,Thumbnail,Text}from'@shopify/polaris';import{NoteIcon}from'@shopify/polaris-icons';import{useState,useCallback}from'react';functionDropZoneExample(){const[files,setFiles]=useState<File[]>([]);consthandleDropZoneDrop=useCallback((_dropFiles:File[],acceptedFiles:File[],_rejectedFiles:File[])=>setFiles((files)=>[...files,...acceptedFiles]),[],);constvalidImageTypes=['image/gif','image/jpeg','image/png'];constfileUpload=!files.length&&<DropZone.FileUpload/>;constuploadedFiles=files.length>0&&(<div style={{padding:'0'}}><LegacyStackvertical>{files.map((file,index)=>(<LegacyStackalignment=\"center\"key={index}><Thumbnailsize=\"small\"alt={file.name}source={validImageTypes.includes(file.type)?window.URL.createObjectURL(file):NoteIcon}/><div>{file.name}{' '}<Textvariant=\"bodySm\"as=\"p\">{file.size}bytes</Text></div></LegacyStack>))}</LegacyStack></div>);return(<DropZoneonDrop={handleDropZoneDrop}>{uploadedFiles}{fileUpload}</DropZone>);}"
                },
                {
                    "type": "p",
                    "text": "Label for the file input. Adds an action to the label. Visually hide the label. ID for file input. Allowed file types. Whether is a file or an image. Defaults to'file'. Sets an active state. Sets an error state. Displays an outline border. Defaults totrue. Displays an overlay on hover. Defaults totrue. Text that appears in the overlay. Text that appears in the overlay when set in error state. Allows multiple files to be uploaded at once. Defaults totrue. Sets a disabled state. The child elements to render in the dropzone. Allows a file to be dropped anywhere on the page. Sets the default file dialog state. Allows child content to adjust height. Adds custom validations. Callback triggered on click. Callback triggered on any file drop. Callback triggered when at least one of the files dropped was accepted. Callback triggered when at least one of the files dropped was rejected. Callback triggered when one or more files are dragging over the drag area. Callback triggered when one or more files entered the drag area. Callback triggered when one or more files left the drag area. Callback triggered when the file dialog is canceled. Drop zones should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Inform merchants when the file(s) can’t be uploaded:When possible, use validation errors on drag to detect and explain things like file size limits or file types accepted.Use thebanner componentwith a critical status to communicate errors that happen on the server.",
                        "When possible, use validation errors on drag to detect and explain things like file size limits or file types accepted.",
                        "Use thebanner componentwith a critical status to communicate errors that happen on the server.",
                        "Provide feedback once the file(s) have been dropped and uploading begins.",
                        "For convenience, allow files to be dropped anywhere on the page by enablingdropOnPage.",
                        "Provide a file upload button to allow merchants to select files for upload in a traditional way. Do this by using theDropZone.FileUploadsubcomponent."
                    ]
                },
                {
                    "type": "p",
                    "text": "The drop zone component validates file type by default. File types you wish to accept can be defined by editing theacceptproperty. This component also accepts custom validations using thecustomValidatorproperty. When validation fails, the component sets itself to error mode. Client-side validation errors give instant feedback. Validation error messages should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Explicit: help merchants understand why their file can’t be uploaded and what they should change to successfully upload their file",
                        "In sentence case: capitalize only the first word in the message",
                        "Concise: use simple, clear language that can be read at a glance. For example:"
                    ]
                },
                {
                    "type": "p",
                    "text": "File size must be less than 20MB File type must be .gif, .jpg, .png or .svg Server-side upload errors give feedback after file submission. Upload error messages should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be displayed as abannerwith a critical status",
                        "Show the name of the file(s) that were not uploaded successfully",
                        "Describe why the file(s) couldn’t be uploaded and what merchants should change to upload their file successfully, as seen below"
                    ]
                },
                {
                    "type": "code",
                    "code": "Thefollowing images couldn’t be uploaded:*“keep-it-real.png”is too large.Trya file size less than 20MB.*“realer-than-real.zip”is not supported.Filetype must be.gif,.jpg,.pngor.svg.*“so-so-real.png”was interrupted due to weak network connection,[retry upload](#)"
                },
                {
                    "type": "p",
                    "text": "Use file upload with the drop zone component to let merchants select files for upload in a traditional way."
                },
                {
                    "type": "list",
                    "items": [
                        "To provide context to upload errors when they occur, use thebanner component",
                        "To provide feedback during file upload, use thespinner component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The drop zone component builds on the native HTML<input type=\"upload\">element. It includes a visual<button>as well as a drag and drop area that can receive keyboard focus. To upload a file with the keyboard, merchants can interact with the drag-and-drop region."
                },
                {
                    "type": "list",
                    "items": [
                        "To give the input keyboard focus, use thetabkey (orshift+tabwhen tabbing backwards)",
                        "To activate the input, use theenter/returnorspacekeys"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/filters",
            "title": "Filters — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Filters is a composite component that filters the items of a list or table."
                },
                {
                    "type": "code",
                    "code": "import{ChoiceList,TextField,RangeSlider,LegacyCard,ResourceList,Filters,Avatar,Text,}from'@shopify/polaris';import{useState,useCallback}from'react';functionFiltersWithAResourceListExample(){const[accountStatus,setAccountStatus]=useState<string[]|undefined>(undefined,);const[moneySpent,setMoneySpent]=useState<[number,number]|undefined>(undefined,);const[taggedWith,setTaggedWith]=useState<string|undefined>(undefined);const[queryValue,setQueryValue]=useState<string|undefined>(undefined);consthandleAccountStatusChange=useCallback((value:string[])=>setAccountStatus(value),[],);consthandleMoneySpentChange=useCallback((value:[number,number])=>setMoneySpent(value),[],);consthandleTaggedWithChange=useCallback((value:string)=>setTaggedWith(value),[],);consthandleFiltersQueryChange=useCallback((value:string)=>setQueryValue(value),[],);consthandleAccountStatusRemove=useCallback(()=>setAccountStatus(undefined),[],);consthandleMoneySpentRemove=useCallback(()=>setMoneySpent(undefined),[],);consthandleTaggedWithRemove=useCallback(()=>setTaggedWith(undefined),[],);consthandleQueryValueRemove=useCallback(()=>setQueryValue(undefined),[],);consthandleFiltersClearAll=useCallback(()=>{handleAccountStatusRemove();handleMoneySpentRemove();handleTaggedWithRemove();handleQueryValueRemove();},[handleAccountStatusRemove,handleMoneySpentRemove,handleQueryValueRemove,handleTaggedWithRemove,]);constfilters=[{key:'accountStatus',label:'Account status',filter:(<ChoiceListtitle=\"Account status\"titleHiddenchoices={[{label:'Enabled',value:'enabled'},{label:'Not invited',value:'not invited'},{label:'Invited',value:'invited'},{label:'Declined',value:'declined'},]}selected={accountStatus||[]}onChange={handleAccountStatusChange}allowMultiple/>),shortcut:true,},{key:'taggedWith',label:'Tagged with',filter:(<TextFieldlabel=\"Tagged with\"value={taggedWith}onChange={handleTaggedWithChange}autoComplete=\"off\"labelHidden/>),shortcut:true,},{key:'moneySpent',label:'Money spent',filter:(<RangeSliderlabel=\"Money spent is between\"labelHiddenvalue={moneySpent||[0,500]}prefix=\"$\"outputmin={0}max={2000}step={1}onChange={handleMoneySpentChange}/>),},];constappliedFilters=[];if(!isEmpty(accountStatus)){constkey='accountStatus';appliedFilters.push({key,label:disambiguateLabel(key,accountStatus),onRemove:handleAccountStatusRemove,});}if(!isEmpty(moneySpent)){constkey='moneySpent';appliedFilters.push({key,label:disambiguateLabel(key,moneySpent),onRemove:handleMoneySpentRemove,});}if(!isEmpty(taggedWith)){constkey='taggedWith';appliedFilters.push({key,label:disambiguateLabel(key,taggedWith),onRemove:handleTaggedWithRemove,});}return(<div style={{height:'568px'}}><LegacyCard><ResourceListresourceName={{singular:'customer',plural:'customers'}}filterControl={<FiltersqueryValue={queryValue}filters={filters}appliedFilters={appliedFilters}onQueryChange={handleFiltersQueryChange}onQueryClear={handleQueryValueRemove}onClearAll={handleFiltersClearAll}/>}flushFiltersitems={[{id:'341',url:'#',name:'Mae Jemison',location:'Decatur, USA',},{id:'256',url:'#',name:'Ellen Ochoa',location:'Los Angeles, USA',},]}renderItem={(item)=>{const{id,url,name,location}=item;constmedia=<Avatarcustomer size=\"md\"name={name}/>;return(<ResourceList.Itemid={id}url={url}media={media}accessibilityLabel={`View details for${name}`}><Textas=\"h3\"variant=\"bodyMd\"fontWeight=\"bold\">{name}</Text><div>{location}</div></ResourceList.Item>);}}/></LegacyCard></div>);functiondisambiguateLabel(key:string,value:any){switch(key){case'moneySpent':return`Money spent is between $${value[0]}and $${value[1]}`;case'taggedWith':return`Tagged with${value}`;case'accountStatus':returnvalue?.map((val:string)=>`Customer${val}`).join(', ');default:returnvalue;}}functionisEmpty(value:string|string[]|[number,number]|undefined,):boolean{if(Array.isArray(value)){returnvalue.length===0;}else{returnvalue===''||value==null;}}}"
                },
                {
                    "type": "p",
                    "text": "Currently entered text in the query field. Placeholder text for the query field. Whether the query field is focused. Available filters added to the filter bar. Shortcut filters are pinned to the front of the bar. Applied filters which are rendered as filter pills. The remove callback is called with the respective key. Callback when the query field is changed. Callback when the clear button is triggered. Callback when the reset all button is pressed. Callback when the query field is blurred. Callback when the query field is focused. The content to display inline with the controls. Disable all filters. Hide filter bar for applied filters. Hide the query field. Disable the query field. Disable the filters. Whether the text field should be borderless. Should be true when used as part of the IndexFilters component. Whether an asyncronous task is currently being run. Callback when the add filter button is clicked. Whether the filter should close when clicking inside another Popover. Merchants use filters to:"
                },
                {
                    "type": "list",
                    "items": [
                        "view different subsets of items in a list or table",
                        "filter by typing into a text field",
                        "filter by selecting filters or promoted filters"
                    ]
                },
                {
                    "type": "p",
                    "text": "The way that merchants interact with filters depends on the components that you decide to incorporate. In its simplest form, filters includes a text field and a set of filters, which can be displayed in different ways. What the filters are and how they’re exposed to merchants is flexible. The filters component relies on the accessibility features of multiple other components:"
                },
                {
                    "type": "list",
                    "items": [
                        "Text field",
                        "Button",
                        "Popover"
                    ]
                },
                {
                    "type": "p",
                    "text": "Since custom HTML can be passed to the component for additional actions, ensure that the filtering system you build is accessible as a whole. All merchants must:"
                },
                {
                    "type": "list",
                    "items": [
                        "be able to identify and understand labels for all controls",
                        "be notified of state changes",
                        "be able to complete all actions with the keyboard"
                    ]
                },
                {
                    "type": "p",
                    "text": "The filters component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "help reduce merchant effort by promoting the filtering categories that are most commonly used",
                        "include no more than 2 or 3 promoted filters",
                        "consider small screen sizes when designing the interface for each filter and the total number filters to include",
                        "use children only for content that’s related or relevant to filtering"
                    ]
                },
                {
                    "type": "p",
                    "text": "The text field should be clearly labeled so it’s obvious to merchants what they should enter into the field."
                },
                {
                    "type": "list",
                    "items": [
                        "Filter orders"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Enter text here"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the name of the filter if the purpose of the name is clear on its own. For example, when you see a filter badge that readsFulfilled, it’s intuitive that it falls under the Fulfillment status category."
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfilled, Unfulfilled"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfillment: Fulfilled, Unfulfilled"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the filter name is ambiguous on its own, add a descriptive word related to the status. For example,Lowdoesn’t make sense out of context. Add the word “risk” so that merchants know it’s from the Risk category."
                },
                {
                    "type": "list",
                    "items": [
                        "High risk, Low risk"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "High, Low"
                    ]
                },
                {
                    "type": "p",
                    "text": "Group tags from the same category together."
                },
                {
                    "type": "list",
                    "items": [
                        "(Unfulfilled, Fulfilled)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "(Unfulfilled) (fulfilled)"
                    ]
                },
                {
                    "type": "p",
                    "text": "If all tag pills selected: truncate in the middle"
                },
                {
                    "type": "list",
                    "items": [
                        "Paid, par… unpaid"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "All payment status filters selected, Paid, unpa…"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/form",
            "title": "Form — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A wrapper component that handles the submission of forms. Use onSubmit as a callback for when your form is submitted."
                },
                {
                    "type": "code",
                    "code": "import{Form,FormLayout,Checkbox,TextField,Button}from'@shopify/polaris';import{useState,useCallback}from'react';functionFormOnSubmitExample(){const[newsletter,setNewsletter]=useState(false);const[email,setEmail]=useState('');consthandleSubmit=useCallback(()=>{setEmail('');setNewsletter(false);},[]);consthandleNewsLetterChange=useCallback((value:boolean)=>setNewsletter(value),[],);consthandleEmailChange=useCallback((value:string)=>setEmail(value),[]);return(<FormonSubmit={handleSubmit}><FormLayout><Checkboxlabel=\"Sign up for the Polaris newsletter\"checked={newsletter}onChange={handleNewsLetterChange}/><TextFieldvalue={email}onChange={handleEmailChange}label=\"Email\"type=\"email\"autoComplete=\"email\"helpText={<span>We’llusethisemail address to inform you on future changes toPolaris.</span>}/><Buttonsubmit>Submit</Button></FormLayout></Form>);}"
                },
                {
                    "type": "p",
                    "text": "Space separated list of character encodings. Where to send form-data on submittal. Grants the browser the ability to autocomplete input elements. The content to display inside the form. Media type when submitting content to server. Toggles if form submits on Enter keypress. Defaults to true. Method used to submit form. A unique name for the form. Whether or not form is validated when submitting. Blocks the default form action. Where to display response after form submittal. Callback when form is submitted. The form component should be used to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Wrap around all form input elements",
                        "Emulate the native HTMLformelement behavior with a customonSubmitcallback"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To arrange fields within a form using standard spacing,use the form layout component",
                        "To see all of the components that make up a form,visit the form sectionof the component library"
                    ]
                },
                {
                    "type": "p",
                    "text": "The form component wraps content in an HTML<form>element. This helps to support assistive technologies that use different interaction and browse modes. Forms can have only one submit button and it must be at the end of the form. By default, buttons added to the form are given atypeattribute set tobuttonto avoid conflicts. To make a button the submit button instead (type=\"submit\"), set thesubmitprop on the button. By default, theimplicitSubmitprop is set totrue. This allows merchants to submit the form with theenter/returnkey when focus is in any text field inside the form. This provides a shortcut for keyboard users. If this behavior doesn’t fit the form, then set the prop tofalse."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/index-filters",
            "title": "Index filters — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use index filters to allow merchants to filter, search, and sort their index table data and create unique saved views from the results. An IndexFilters component with view management, search, filtering, and sorting."
                },
                {
                    "type": "code",
                    "code": "import{TextField,IndexTable,LegacyCard,IndexFilters,useSetIndexFiltersMode,useIndexResourceState,Text,ChoiceList,RangeSlider,Badge,}from'@shopify/polaris';importtype{IndexFiltersProps,TabProps}from'@shopify/polaris';import{useState,useCallback}from'react';functionIndexFiltersDefaultExample(){constsleep=(ms:number)=>newPromise((resolve)=>setTimeout(resolve,ms));const[itemStrings,setItemStrings]=useState(['All','Unpaid','Open','Closed','Local delivery','Local pickup',]);constdeleteView=(index:number)=>{constnewItemStrings=[...itemStrings];newItemStrings.splice(index,1);setItemStrings(newItemStrings);setSelected(0);};constduplicateView=async(name:string)=>{setItemStrings([...itemStrings,name]);setSelected(itemStrings.length);awaitsleep(1);returntrue;};consttabs:TabProps[]=itemStrings.map((item,index)=>({content:item,index,onAction:()=>{},id:`${item}-${index}`,isLocked:index===0,actions:index===0?[]:[{type:'rename',onAction:()=>{},onPrimaryAction:async(value:string):Promise<boolean>=>{constnewItemsStrings=tabs.map((item,idx)=>{if(idx===index){returnvalue;}returnitem.content;});awaitsleep(1);setItemStrings(newItemsStrings);returntrue;},},{type:'duplicate',onPrimaryAction:async(value:string):Promise<boolean>=>{awaitsleep(1);duplicateView(value);returntrue;},},{type:'edit',},{type:'delete',onPrimaryAction:async()=>{awaitsleep(1);deleteView(index);returntrue;},},],}));const[selected,setSelected]=useState(0);constonCreateNewView=async(value:string)=>{awaitsleep(500);setItemStrings([...itemStrings,value]);setSelected(itemStrings.length);returntrue;};constsortOptions:IndexFiltersProps['sortOptions']=[{label:'Order',value:'order asc',directionLabel:'Ascending'},{label:'Order',value:'order desc',directionLabel:'Descending'},{label:'Customer',value:'customer asc',directionLabel:'A-Z'},{label:'Customer',value:'customer desc',directionLabel:'Z-A'},{label:'Date',value:'date asc',directionLabel:'A-Z'},{label:'Date',value:'date desc',directionLabel:'Z-A'},{label:'Total',value:'total asc',directionLabel:'Ascending'},{label:'Total',value:'total desc',directionLabel:'Descending'},];const[sortSelected,setSortSelected]=useState(['order asc']);const{mode,setMode}=useSetIndexFiltersMode();constonHandleCancel=()=>{};constonHandleSave=async()=>{awaitsleep(1);returntrue;};constprimaryAction:IndexFiltersProps['primaryAction']=selected===0?{type:'save-as',onAction:onCreateNewView,disabled:false,loading:false,}:{type:'save',onAction:onHandleSave,disabled:false,loading:false,};const[accountStatus,setAccountStatus]=useState<string[]|undefined>(undefined,);const[moneySpent,setMoneySpent]=useState<[number,number]|undefined>(undefined,);const[taggedWith,setTaggedWith]=useState('');const[queryValue,setQueryValue]=useState('');consthandleAccountStatusChange=useCallback((value:string[])=>setAccountStatus(value),[],);consthandleMoneySpentChange=useCallback((value:[number,number])=>setMoneySpent(value),[],);consthandleTaggedWithChange=useCallback((value:string)=>setTaggedWith(value),[],);consthandleFiltersQueryChange=useCallback((value:string)=>setQueryValue(value),[],);consthandleAccountStatusRemove=useCallback(()=>setAccountStatus(undefined),[],);consthandleMoneySpentRemove=useCallback(()=>setMoneySpent(undefined),[],);consthandleTaggedWithRemove=useCallback(()=>setTaggedWith(''),[]);consthandleQueryValueRemove=useCallback(()=>setQueryValue(''),[]);consthandleFiltersClearAll=useCallback(()=>{handleAccountStatusRemove();handleMoneySpentRemove();handleTaggedWithRemove();handleQueryValueRemove();},[handleAccountStatusRemove,handleMoneySpentRemove,handleQueryValueRemove,handleTaggedWithRemove,]);constfilters=[{key:'accountStatus',label:'Account status',filter:(<ChoiceListtitle=\"Account status\"titleHiddenchoices={[{label:'Enabled',value:'enabled'},{label:'Not invited',value:'not invited'},{label:'Invited',value:'invited'},{label:'Declined',value:'declined'},]}selected={accountStatus||[]}onChange={handleAccountStatusChange}allowMultiple/>),shortcut:true,},{key:'taggedWith',label:'Tagged with',filter:(<TextFieldlabel=\"Tagged with\"value={taggedWith}onChange={handleTaggedWithChange}autoComplete=\"off\"labelHidden/>),shortcut:true,},{key:'moneySpent',label:'Money spent',filter:(<RangeSliderlabel=\"Money spent is between\"labelHiddenvalue={moneySpent||[0,500]}prefix=\"$\"outputmin={0}max={2000}step={1}onChange={handleMoneySpentChange}/>),},];constappliedFilters:IndexFiltersProps['appliedFilters']=[];if(accountStatus&&!isEmpty(accountStatus)){constkey='accountStatus';appliedFilters.push({key,label:disambiguateLabel(key,accountStatus),onRemove:handleAccountStatusRemove,});}if(moneySpent){constkey='moneySpent';appliedFilters.push({key,label:disambiguateLabel(key,moneySpent),onRemove:handleMoneySpentRemove,});}if(!isEmpty(taggedWith)){constkey='taggedWith';appliedFilters.push({key,label:disambiguateLabel(key,taggedWith),onRemove:handleTaggedWithRemove,});}constorders=[{id:'1020',order:(<Textas=\"span\"variant=\"bodyMd\"fontWeight=\"semibold\">#1020</Text>),date:'Jul 20 at 4:34pm',customer:'Jaydon Stanton',total:'$969.44',paymentStatus:<Badgeprogress=\"complete\">Paid</Badge>,fulfillmentStatus:<Badgeprogress=\"incomplete\">Unfulfilled</Badge>,},{id:'1019',order:(<Textas=\"span\"variant=\"bodyMd\"fontWeight=\"semibold\">#1019</Text>),date:'Jul 20 at 3:46pm',customer:'Ruben Westerfelt',total:'$701.19',paymentStatus:<Badgeprogress=\"partiallyComplete\">Partiallypaid</Badge>,fulfillmentStatus:<Badgeprogress=\"incomplete\">Unfulfilled</Badge>,},{id:'1018',order:(<Textas=\"span\"variant=\"bodyMd\"fontWeight=\"semibold\">#1018</Text>),date:'Jul 20 at 3.44pm',customer:'Leo Carder',total:'$798.24',paymentStatus:<Badgeprogress=\"complete\">Paid</Badge>,fulfillmentStatus:<Badgeprogress=\"incomplete\">Unfulfilled</Badge>,},];constresourceName={singular:'order',plural:'orders',};const{selectedResources,allResourcesSelected,handleSelectionChange}=useIndexResourceState(orders);constrowMarkup=orders.map(({id,order,date,customer,total,paymentStatus,fulfillmentStatus},index,)=>(<IndexTable.Rowid={id}key={id}selected={selectedResources.includes(id)}position={index}><IndexTable.Cell><Textvariant=\"bodyMd\"fontWeight=\"bold\"as=\"span\">{order}</Text></IndexTable.Cell><IndexTable.Cell>{date}</IndexTable.Cell><IndexTable.Cell>{customer}</IndexTable.Cell><IndexTable.Cell><Textas=\"span\"alignment=\"end\"numeric>{total}</Text></IndexTable.Cell><IndexTable.Cell>{paymentStatus}</IndexTable.Cell><IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell></IndexTable.Row>),);return(<LegacyCard><IndexFilterssortOptions={sortOptions}sortSelected={sortSelected}queryValue={queryValue}queryPlaceholder=\"Searching in all\"onQueryChange={handleFiltersQueryChange}onQueryClear={()=>setQueryValue('')}onSort={setSortSelected}primaryAction={primaryAction}cancelAction={{onAction:onHandleCancel,disabled:false,loading:false,}}tabs={tabs}selected={selected}onSelect={setSelected}canCreateNewViewonCreateNewView={onCreateNewView}filters={filters}appliedFilters={appliedFilters}onClearAll={handleFiltersClearAll}mode={mode}setMode={setMode}/><IndexTableresourceName={resourceName}itemCount={orders.length}selectedItemsCount={allResourcesSelected?'All':selectedResources.length}onSelectionChange={handleSelectionChange}headings={[{title:'Order'},{title:'Date'},{title:'Customer'},{title:'Total',alignment:'end'},{title:'Payment status'},{title:'Fulfillment status'},]}>{rowMarkup}</IndexTable></LegacyCard>);functiondisambiguateLabel(key:string,value:string|any[]):string{switch(key){case'moneySpent':return`Money spent is between $${value[0]}and $${value[1]}`;case'taggedWith':return`Tagged with${value}`;case'accountStatus':return(valueasstring[]).map((val)=>`Customer${val}`).join(', ');default:returnvalueasstring;}}functionisEmpty(value:string|any[]){if(Array.isArray(value)){returnvalue.length===0;}else{returnvalue===''||value==null;}}}"
                },
                {
                    "type": "p",
                    "text": "The available sorting choices. If not present, the sort button will not show. The currently selected sort choice. Required if using sorting. Optional callback invoked when a merchant changes the sort order. Required if using sorting. Optional callback when using saved views and changing the sort key. Optional callback when using saved views and changing the sort direction. Callback when the add filter button is clicked, to be passed to AlphaFilters. The primary action to display. The cancel action to display. Optional callback invoked when a merchant begins to edit a view. The current mode of the IndexFilters component. Used to determine which view to show. Override z-index of popovers and tooltips. Callback to set the mode of the IndexFilters component. Will disable all the elements within the IndexFilters component. Will disable just the query field. If true, the sticky interaction on smaller devices will be disabled. If the component should go flush to the top of the page when sticking. Whether the index supports creating new views. Callback invoked when a merchant creates a new view. Optional override to the default aria-label for the button that toggles the filtering mode. Optional override to the default Tooltip message for the button that toggles the filtering mode. Whether the filter should close when clicking inside another Popover. Optional override to the default keyboard shortcuts available. Should be set to true for all instances\nof this component not controlling a root-level index. Whether to display the edit columns button with the other default mode filter actions. Whether or not to auto-focus the search field when it renders. Merchants use filters to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create different subsets of list items",
                        "Search list items by typing a query into the text input",
                        "Sort list items by column"
                    ]
                },
                {
                    "type": "p",
                    "text": "The way that merchants interact with index filters depends on the components that you decide to incorporate. It supports configuration of a search query input, sorting options, and one or more filters that can be made up of different inputs. Merchants use the tabs in index tables to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Control which view is visible",
                        "Edit the applied filters and search terms of a view",
                        "Create, rename, duplicate, or delete views"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can create views and control which actions can be performed on a particular view. Index filters are made up of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tabs: A list of saved views. Each tab represents a subset of the list that has been sorted, filtered, and or queried and saved with a unique name. New views can be created directly from the tab list, or by editing the filters, query, or sort selection of an existing view and saving it as new.",
                        "Search and filter, and sort buttons: The search and filter button allows merchants to toggle the index table from \"View\" mode to \"Filter\" mode. When clicked, the button reveals the search field and the filters that allow merchants to edit or create saved views. The sort button activates a popover displaying a list of options merchants can choose from to sort the list items. Merchants can also choose whether the list should be sorted in ascending or descending order.",
                        "Filters: A set of useful ways to narrow down the list based on the common actions merchants may need to take on the data. The filters should present merchants with form inputs that help them include or exclude list items from the view based on their data.",
                        "Action buttons: Primary and secondary actions that a merchant can take on the current view. The primary action will always be either \"Save\" or \"Save as\" depending on whether the view is mutable, and the secondary action will always be \"Cancel\"."
                    ]
                },
                {
                    "type": "p",
                    "text": "The filters component relies on the accessibility features of several other components:"
                },
                {
                    "type": "list",
                    "items": [
                        "Popover",
                        "ChoiceList",
                        "Modal",
                        "Tabs",
                        "Tooltip"
                    ]
                },
                {
                    "type": "p",
                    "text": "Since custom HTML can be passed to the component for additional actions, ensure that the filtering system you build is accessible as a whole. All merchants must be able to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Identify and understand the labels of all controls",
                        "Be notified of state changes as they use the filter controls",
                        "Complete all actions using a keyboard"
                    ]
                },
                {
                    "type": "p",
                    "text": "Index filters should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Reduce merchant effort by promoting the filtering categories that are most commonly used",
                        "Include no more than 2 or 3 promoted filters",
                        "Consider small screen sizes when designing the interface for each filter and the total number filters to include",
                        "Use children only for content that’s related or relevant to filtering"
                    ]
                },
                {
                    "type": "p",
                    "text": "The text field should be clearly labeled so it’s obvious to merchants what they should enter into the field."
                },
                {
                    "type": "list",
                    "items": [
                        "Filter orders"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Enter text here"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the name of the filter if the purpose of the name is clear on its own. For example, when you see a filter badge that readsFulfilled, it’s intuitive that it falls under the Fulfillment status category."
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfilled, Unfulfilled"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfillment: Fulfilled, Unfulfilled"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the filter name is ambiguous on its own, add a descriptive word related to the status. For example,Lowdoesn’t make sense out of context. Add the word “risk” so that merchants know it’s from the Risk category."
                },
                {
                    "type": "list",
                    "items": [
                        "High risk, Low risk"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "High, Low"
                    ]
                },
                {
                    "type": "p",
                    "text": "Group tags from the same category together."
                },
                {
                    "type": "list",
                    "items": [
                        "(Unfulfilled, Fulfilled)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "(Unfulfilled) (fulfilled)"
                    ]
                },
                {
                    "type": "p",
                    "text": "If all tag pills selected: truncate in the middle"
                },
                {
                    "type": "list",
                    "items": [
                        "Paid, par… unpaid"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "All payment status filters selected, Paid, unpa…"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/inline-error",
            "title": "Inline error — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Inline errors are brief, in-context messages that tell merchants something went wrong with a single or group of inputs in a form. Use inline errors to help merchants understand why a form input may not be valid and how to fix it. Use when the merchant has entered information that is not valid into multiple fields inside of a form, or needs to be displayed in a non-standard position in the form layout."
                },
                {
                    "type": "code",
                    "code": "import{InlineError}from'@shopify/polaris';importReactfrom'react';functionInlineErrorExample(){return<InlineErrormessage=\"Store name is required\"fieldID=\"myFieldID\"/>;}"
                },
                {
                    "type": "p",
                    "text": "Content briefly explaining how to resolve the invalid form field input. Unique identifier of the invalid form field that the message describes. Inline errors should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be brief",
                        "Be written in sentence case",
                        "Be visible immediately upon a form input that is not valid",
                        "Be removed as soon as the input is valid so merchants can immediately tell they fixed the issue",
                        "Describe specific solutions so merchants can successfully complete their task in the form",
                        "Not be placed out of context of the input or group of inputs they describe"
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about error message patterns Since the error message is directly below the source of the problem, the copy only needs to explain why the error happened. Optionally, the message can clarify what to do next or offer a one-click fix. Inline error messages should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly explain what went wrong, give a next step, or offer a one-click fix",
                        "Be short and concise, no more than a single sentence",
                        "Usepassive voiceso merchants don’t feel like they’re being blamed for the error"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Store name is required"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "You didn’t enter a store name."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To create a list of exceptions that describe a resource,use the exception list component"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use the requiredfieldIDprop to give the inline error a uniqueid. This ties the error to a form field usingaria-describedbyso that it's conveyed to screen reader users.",
                        "Use the requiredmessageprop to provide the text that describes the error.",
                        "The inline erroriconhelps visually identify the error message for merchants who have difficulty seeingcolorsor who use settings that remove color from the page."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/radio-button",
            "title": "Radio button — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use radio buttons to present each item in a list of options where merchants must make a single selection. Use radio buttons where merchants must make a single selection."
                },
                {
                    "type": "code",
                    "code": "import{LegacyStack,RadioButton}from'@shopify/polaris';import{useState,useCallback}from'react';functionRadioButtonExample(){const[value,setValue]=useState('disabled');consthandleChange=useCallback((_:boolean,newValue:string)=>setValue(newValue),[],);return(<LegacyStackvertical><RadioButtonlabel=\"Accounts are disabled\"helpText=\"Customers will only be able to check out as guests.\"checked={value==='disabled'}id=\"disabled\"name=\"accounts\"onChange={handleChange}/><RadioButtonlabel=\"Accounts are optional\"helpText=\"Customers will be able to check out with a customer account or as a guest.\"id=\"optional\"name=\"accounts\"checked={value==='optional'}onChange={handleChange}/></LegacyStack>);}"
                },
                {
                    "type": "p",
                    "text": "Indicates the ID of the element that describes the radio button. Label for the radio button. Visually hide the label. Radio button is selected. Disable input. ID for form input. Name for form input. Value for form input. Callback when the radio button is toggled. Callback when radio button is focused. Callback when focus is removed. Grow to fill the space. Equivalent to width: 100%; height: 100%. Additional text to aide in use. Indicates the tone of the text field. Spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Vertical end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Horizontal end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes. Radio buttons should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Always be used with an associated label component.",
                        "Be part of a list of radio buttons that:Include at least two or more choices.Are used to have merchants select only one option.Include mutually exclusive options—this means that each option must be\nindependent from every other option in the list. For example: Red, blue, and\nyellow are mutually exclusive. Red, blue, yellow, red/blue are not mutually\nexclusive.List options in a rational order that makes logical sense.Have a default option selected whenever possible.",
                        "Include at least two or more choices.",
                        "Are used to have merchants select only one option.",
                        "Include mutually exclusive options—this means that each option must be\nindependent from every other option in the list. For example: Red, blue, and\nyellow are mutually exclusive. Red, blue, yellow, red/blue are not mutually\nexclusive.",
                        "List options in a rational order that makes logical sense.",
                        "Have a default option selected whenever possible."
                    ]
                },
                {
                    "type": "p",
                    "text": "Radio button labels should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be introduced with a colon or a heading",
                        "Start with a capital letter"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Option 1"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "option 1"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Not end in punctuation if it’s a single sentence, word, or a fragment"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Red;"
                    ]
                },
                {
                    "type": "p",
                    "text": "Toggle labels should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clear what merchants are enabling or disabling",
                        "Start with a capital letter"
                    ]
                },
                {
                    "type": "p",
                    "text": "Toggle values should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Never be labeled"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To make simple lists of radio buttons easier to build,use the choice list component",
                        "For long lists of options,consider the select componentto avoid overwhelming merchants",
                        "To present merchants with a list of checkboxes,use the choice list componentwith the “allow multiple” option",
                        "To display non-interactive list of related content,use the content list component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Screen readers convey the state of the radio button automatically."
                },
                {
                    "type": "list",
                    "items": [
                        "Use thedisabledprop to apply the HTMLdisabledattribute to the radio button<input>. This prevents merchants from being able to interact with the radio button, and conveys its inactive state to assistive technologies.",
                        "Use theidprop to provide a uniqueidattribute value for the radio button. If anidisn’t provided, then the component generates one. All radio buttons must have uniqueidvalues to work correctly with assistive technologies."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The requiredlabelprop conveys the purpose of the radio button to all merchants",
                        "Use thelabelHiddenprop to visually hide the label but make it available to assistive technologies",
                        "When you provide help text via thehelpTextprop or an inline error message via theerrorprop, the help or error content is conveyed to screen reader users with thearia-describedbyattribute"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Move focus to the radio button group using thetabkey (orshift+tabwhen tabbing backwards)",
                        "Use the up and down arrow keys to change which radio button is selected"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/range-slider",
            "title": "Range slider — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A range slider is an input field that merchants can use to select a numeric value within a given range (minimum and maximum values). Use when a single value between0 and 100needs to be selected."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,RangeSlider}from'@shopify/polaris';import{useState,useCallback}from'react';functionRangeSliderExample(){const[rangeValue,setRangeValue]=useState(32);consthandleRangeSliderChange=useCallback((value:number)=>setRangeValue(value),[],);return(<LegacyCardsectioned title=\"Background color\"><RangeSliderlabel=\"Opacity percentage\"value={rangeValue}onChange={handleRangeSliderChange}output/></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "Label for the range input. Adds an action to the label. Visually hide the label. ID for range input. Initial value for range input. Minimum possible value for range input. Maximum possible value for range input. Increment value for range input changes. Provide a tooltip while sliding, indicating the current value. Additional text to aid in use. Display an error message. Disable input. Element to display before the input. Element to display after the input. Callback when the range input is changed. Callback when range input is focused. Callback when focus is removed. Range sliders should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Always be used with a label, even if that label ishidden.",
                        "When a label is visible, it should clearly communicate the purpose of the range input and its values (min, max, step, value)",
                        "Be labeled as “Optional” when you need to request input that’s not required",
                        "Validate input as soon as merchants have finished interacting with a field (but not before)",
                        "Always be used with two text field components when range slider has dual thumbs, to provide accessible alternatives to both the lower and upper thumbs"
                    ]
                },
                {
                    "type": "p",
                    "text": "A label is a short description of the requested input. Labels are not instructional text but they should be meaningful and clearly indicate what is expected. Labels should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Placed above the form field",
                        "Short and succinct (1–3 words)",
                        "Written in sentence case (the first word capitalized, the rest lowercase)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Saturation percentage",
                        "Banner width"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "What is the saturation value?",
                        "The banner width is:"
                    ]
                },
                {
                    "type": "p",
                    "text": "Try to only ask for information that’s required. If you need to ask merchants to provide optional information, mark the field optional by placing the text “(optional)” at the end of the field’s label. Don’t mark required fields with asterisks."
                },
                {
                    "type": "list",
                    "items": [
                        "Banner width (optional)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Banner width"
                    ]
                },
                {
                    "type": "p",
                    "text": "Help text provides extra guidance or instruction to people filling out a form field. It can also be used to clarify how the information will be used. As with all form content, help text should be succinct and easy to read."
                },
                {
                    "type": "list",
                    "items": [
                        "Video duration is calculated in seconds"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Example: 134 seconds"
                    ]
                },
                {
                    "type": "p",
                    "text": "Error messages should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly explain what went wrong and how to fix it",
                        "Be short and concise, no more than a single sentence",
                        "Usepassive voiceso merchants don’t feel like they’re being blamed for the error"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Video duration is required"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "You didn’t enter a duration"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To collect a number value as a text input,use the text field component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The range slider provides a large click and tap target for the slider thumbs. Merchants can also tap or click on the slider track to move the closest slider thumb. The default range slider component uses theARIA 1.1 slider patternto build upon the default HTML<input type=\"range\">. The requiredlabelprop provides a label for the field that’s conveyed to assistive technologies when it receives focus. When the slider is used, thevalueprop should update visually and programmatically to reflect the current value. To consistently provide the current value to assistive technologies, use theminandmaxprops to provide the minimum and maximum values for the slider. The dual-thumb range slider component uses theARIA 1.1 slider (multi-thumb) pattern. However, the pattern isn’t consistently supported by screen readers, especially on mobile devices. Because of this, it’s best to pair the dual-thumb slider with a set of text fields for each value, or to provide another accessible method for entering information."
                },
                {
                    "type": "list",
                    "items": [
                        "To move focus to a slider thumb, press thetabkey to move forward and orshift+tabto move backward",
                        "When a thumb has focus, use the up and down or left and right arrow keys to move the thumb and update the associated value."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/select",
            "title": "Select — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Select lets merchants choose one option from an options menu. Consider select when you have 4 or more options, to avoid cluttering the interface. Presents a classic dropdown menu or equivalent picker as determined by merchants’ browsers."
                },
                {
                    "type": "code",
                    "code": "import{Select}from'@shopify/polaris';import{useState,useCallback}from'react';functionSelectExample(){const[selected,setSelected]=useState('today');consthandleSelectChange=useCallback((value:string)=>setSelected(value),[],);constoptions=[{label:'Today',value:'today'},{label:'Yesterday',value:'yesterday'},{label:'Last 7 days',value:'lastWeek'},];return(<Selectlabel=\"Date range\"options={options}onChange={handleSelectChange}value={selected}/>);}"
                },
                {
                    "type": "p",
                    "text": "List of options or option groups to choose from. Label for the select. Adds an action to the label. Visually hide the label. Show the label to the left of the value, inside the control. Disable input. Additional text to aide in use. Example text to display as placeholder. ID for form input. Name for form input. Value for form input. Display an error state. Callback when selection is changed. Callback when select is focused. Callback when focus is removed. Visual required indicator, add an asterisk to label. Indicates the tone of the select. The select component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for selecting between 4 or more pre-defined options",
                        "Have a default option selected whenever possible",
                        "Use “Select” as a placeholder option only if there’s no logical default option"
                    ]
                },
                {
                    "type": "p",
                    "text": "Labels should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Give a short description (1–3 words) of the requested input.",
                        "Be written in sentence case (the first word capitalized, the rest lowercase).",
                        "Avoid punctuation and articles (“the”, “an”, “a”).",
                        "Be independent sentences. To supportinternationalization, they should not act as the first part of a sentence that is finished by the component’s options.",
                        "Be descriptive, not instructional. If the selection needs more explanation, use help text below the field."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Email address"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "What is your email address?"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Phone number"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "My phone number is:"
                    ]
                },
                {
                    "type": "p",
                    "text": "Options should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start with “Select” as a placeholder if there isn’t a default option",
                        "Be listed alphabetically or in another logical order so merchants can easily find the option they need",
                        "Be written in sentence case (the first word capitalized, the rest lowercase) and avoid using commas or semicolons at the end of each option",
                        "Be clearly labelled based on what the option will do"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let merchants select one option from a list with less than 4 options, usethe choice list component",
                        "To create a select where merchants can make multiple selections, or to allow advanced formatting of option text, use anoption listinside apopover"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/tag",
            "title": "Tag — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Tags represent a set of interactive, merchant-supplied keywords that help label, organize, and categorize objects. Tags can be added or removed from an object by merchants. Use to signify the attributes of an object."
                },
                {
                    "type": "code",
                    "code": "import{Card,Tag}from'@shopify/polaris';importReactfrom'react';functionTagExample(){return(<Card><Tag>Wholesale</Tag></Card>);}"
                },
                {
                    "type": "p",
                    "text": "This component defines its props in a way that our website can't automatically parse. The type definition is shown below, but it might be hard to read. Tags should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be presented close to or within the input control that allows merchants to add and remove tags"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To show the status of an object,use the badge component",
                        "To add and remove tags,use the text field component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The button to remove a tag is automatically given a label usingaria-labelso that screen reader users can distinguish which tag will be removed. The control to remove a tag is implemented as a button with standard keyboard support."
                },
                {
                    "type": "list",
                    "items": [
                        "Give buttons keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "To activate a button, press theenter/returnorspacekey"
                    ]
                },
                {
                    "type": "p",
                    "text": "When a merchant uses the button to remove a tag, it is important to make sure that keyboard focus is managed. Moving focus to the next element in the page is recommended."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/selection-and-input/text-field",
            "title": "Text field — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "A text field is an input field that merchants can type into. It has a range of options and supports several text formats including numbers. Use to allow merchants to provide text input when the expected input is short. For longer input, use the auto grow or multiline options."
                },
                {
                    "type": "code",
                    "code": "import{TextField}from'@shopify/polaris';import{useState,useCallback}from'react';functionTextFieldExample(){const[value,setValue]=useState('Jaded Pixel');consthandleChange=useCallback((newValue:string)=>setValue(newValue),[],);return(<TextFieldlabel=\"Store name\"value={value}onChange={handleChange}autoComplete=\"off\"/>);}"
                },
                {
                    "type": "p",
                    "text": "This component defines its props in a way that our website can't automatically parse. The type definition is shown below, but it might be hard to read. Text fields should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly labeled so it’s obvious to merchants what they should enter into the field",
                        "Be labeled as “Optional” when you need to request input that’s not required",
                        "Only ask for information that’s really needed",
                        "Validate input as soon as merchants have finished interacting with a field (but not before)"
                    ]
                },
                {
                    "type": "p",
                    "text": "The autocomplete attribute in aninputfield controls two types of browser behavior:"
                },
                {
                    "type": "list",
                    "items": [
                        "Browser autofill: a feature that automatically populates form fields with previously-saved information, such as passwords, addresses, and credit card data.Autofill is an important feature for our users. Google has found that\"users complete forms up to 30% faster\"when using autofill.The WHATWG has a list of supported autofill values for theautocompleteattribute.Review the section \"4.10.18.7 Autofill\"for all the input types and their corresponding autocomplete attribute values.",
                        "Autofill is an important feature for our users. Google has found that\"users complete forms up to 30% faster\"when using autofill.",
                        "The WHATWG has a list of supported autofill values for theautocompleteattribute.Review the section \"4.10.18.7 Autofill\"for all the input types and their corresponding autocomplete attribute values.",
                        "Browser autocomplete- a feature that displays previously submitted values for that field.When this is on for a field, a user is presented a list with previously submitted values for the input",
                        "When this is on for a field, a user is presented a list with previously submitted values for the input"
                    ]
                },
                {
                    "type": "p",
                    "text": "Recommendation Always add an autocomplete attribute and value to inputs if the type is: color, date, datetime-local, email, month, number, password, range, search, tel, text, time, url, or week. Even if you do not want the browser to autofill a user's information, it is recommended you still have an autocomplete attribute with the value off or nope. Unfortunately,not all browsers supportor respect autocomplete=\"off\". This makes things challenging. Chrome, for example,has a long outstanding bugand won't add support for off for now. Chrome does seem to turn autocomplete off when using the value nope (or any non valid string). However, we have seen some inconsistencies even with that support. Recommendation (Chrome only)"
                },
                {
                    "type": "list",
                    "items": [
                        "Turning off bothautofillandbrowser autocomplete(previously submitted values) in ChromeUseautocomplete=nopeand alsomust have anameattribute.",
                        "Useautocomplete=nopeand alsomust have anameattribute.",
                        "Turning offbrowser autocomplete(previously submitted values) in ChromeIf you don't havenameattribute and the field is not a typical autofill input (address, email, etc), useautocomplete=off.",
                        "If you don't havenameattribute and the field is not a typical autofill input (address, email, etc), useautocomplete=off."
                    ]
                },
                {
                    "type": "p",
                    "text": "TheinputModeproperty should be set to select the appropriate virtual keyboard for the type of data expected to be entered by the user. Above are examples of different number keyboards set withinputMode. For text field content guidelines, reference thetext fields experiencepage."
                },
                {
                    "type": "list",
                    "items": [
                        "To lay out the elements in a responsive form,use the form layout component",
                        "To describe an invalid form input with a separate validation error,use the inline error component",
                        "It’s common touse a select componentconnected to the left or right of a text field."
                    ]
                },
                {
                    "type": "p",
                    "text": "Screen readers convey information about text fields automatically through native HTML."
                },
                {
                    "type": "list",
                    "items": [
                        "Use thedisabledprop to add the HTMLdisabledattribute to the text field.",
                        "Use thereadOnlyprop to add the HTMLreadonlyattribute to the text field.",
                        "If you use thetypeprop, then some assistive technologies adapt the software keyboard to the current task. This helps merchants with mobility, vision, and cognitive issues to enter information more easily."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use theidprop to provide a uniqueidattribute value for the text field. If you don't provide anid, then the component generates one automatically. All text fields need to have uniqueidvalues. Thelabelprop is required to convey the purpose of the checkbox to all merchants. If there are separate visual cues that convey the purpose of the text field to sighted merchants, then the label can be visually hidden with thelabelHiddenprop. When you provide help text via thehelpTextprop or an inline error message via theerrorprop, the help or error content is conveyed to screen reader users with thearia-describedbyattribute. This attribute causes the content to be read along with the label, either immediately or after a short delay. Use theplaceholderprop to provide additional instructions. However, don’t rely on placeholders alone since the content isn’t always conveyed to all merchants."
                },
                {
                    "type": "list",
                    "items": [
                        "Use the label to provide instructions critical to using the text field",
                        "Use help text and placeholder text to provide additional, non-critical instructions"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the placeholder to provide information that’s required to use the text field. Text fields have standard keyboard support."
                },
                {
                    "type": "list",
                    "items": [
                        "Merchants who rely on the keyboard expect to move focus to each text field using thetabkey (orshift+tabwhen tabbing backwards)",
                        "If thetypeis set tonumber, then merchants can use the up and down arrow keys to adjust the value typed into the field when hovering over or focusing the field to make the arrows appear",
                        "Using thedisabledprop will prevent the text field from receive keyboard focus or inputs",
                        "ThereadOnlyprop allows focus on the text field but prevents input or editing",
                        "TheinputModeprop can be used to bring up a relevant keyboard for merchants on mobile; it’s passed down to the input as aninputmodeattribute"
                    ]
                },
                {
                    "type": "p",
                    "text": "Although you can use theautoFocusprop to automatically move focus to the text field, it’s generally best to avoid focusing on fields automatically. TheautoFocusprop is set tofalseby default and should only be used in cases where it won’t force focus to skip other controls or content of equal or greater importance."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/skeleton-display-text",
            "title": "Skeleton display text — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Skeleton display text is used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card. Use this component to represent medium and large display text such as large metrics on the reports list page, or for page titles."
                },
                {
                    "type": "code",
                    "code": "import{SkeletonDisplayText}from'@shopify/polaris';importReactfrom'react';functionSkeletonExample(){return<SkeletonDisplayTextsize=\"medium\"/>;}"
                },
                {
                    "type": "p",
                    "text": "Size of the text. Defaults to'medium'. Maxium width of the text. Defaults to'120px'. Skeleton display text component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Give merchants an indication of what the page content will be once loaded",
                        "Use real content for display text that never changes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Show static display text that that never changes on a page. For example, keep page titles, such as Products on the product list page, but use skeleton loading for page titles that change on the product details page. Show actual display text for static content and use skeleton display text for dynamic content. Use skeleton display text for static content or placeholder content for dynamic content. Show skeleton display text for dynamic page titles."
                },
                {
                    "type": "list",
                    "items": [
                        "Use this component withSkeleton pageandSkeleton body textto represent the content of a page before it’s loaded.",
                        "When giving feedback for in-context operations, useProgress barorSpinnercomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/skeleton-page",
            "title": "Skeleton page — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Skeleton page is used with other skeleton loading components to provide a low fidelity representation of the user interface (UI) before content appears on the page. It improves load times perceived by merchants. Use this component to compose a loading version of a page where the page title and header content are dynamic, meaning, the content changes."
                },
                {
                    "type": "code",
                    "code": "import{SkeletonPage,Layout,LegacyCard,SkeletonBodyText,TextContainer,SkeletonDisplayText,}from'@shopify/polaris';importReactfrom'react';functionSkeletonExample(){return(<SkeletonPageprimaryAction><Layout><Layout.Section><LegacyCardsectioned><SkeletonBodyText/></LegacyCard><LegacyCardsectioned><TextContainer><SkeletonDisplayTextsize=\"small\"/><SkeletonBodyText/></TextContainer></LegacyCard><LegacyCardsectioned><TextContainer><SkeletonDisplayTextsize=\"small\"/><SkeletonBodyText/></TextContainer></LegacyCard></Layout.Section><Layout.Sectionvariant=\"oneThird\"><LegacyCard><LegacyCard.Section><TextContainer><SkeletonDisplayTextsize=\"small\"/><SkeletonBodyTextlines={2}/></TextContainer></LegacyCard.Section><LegacyCard.Section><SkeletonBodyTextlines={1}/></LegacyCard.Section></LegacyCard><LegacyCardsubdued><LegacyCard.Section><TextContainer><SkeletonDisplayTextsize=\"small\"/><SkeletonBodyTextlines={2}/></TextContainer></LegacyCard.Section><LegacyCard.Section><SkeletonBodyTextlines={2}/></LegacyCard.Section></LegacyCard></Layout.Section></Layout></SkeletonPage>);}"
                },
                {
                    "type": "p",
                    "text": "Page title, in large type. Remove the normal max-width on the page. Decreases the maximum layout width. Intended for single-column layouts. Shows a skeleton over the primary action. Shows a skeleton over the backAction. The child elements to render in the skeleton page. Skeleton page component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for pages where all content loads at the same time.",
                        "Give merchants an indication of what the page layout will be once loaded. Do this by mimicking its layout similarly to the state that will be loaded."
                    ]
                },
                {
                    "type": "p",
                    "text": "Show page titles that never change for a page. For example, keep the title “Products” on the product list page, but use skeleton loading for titles that change on the product details page. Don’t use placeholder content for titles that will change when the page fully loads. Secondary actions are always represented with skeleton content. You can change the number of skeleton actions that best represent the number of actions once loaded. Use skeleton loading for dynamic content, and use actual content for content that doesn’t change. Use placeholder content that will change when the page fully loads. This will confuse merchants and create a jumpy loading experience."
                },
                {
                    "type": "list",
                    "items": [
                        "Use theSkeleton body textandSkeleton display textcomponents to represent blocks of content.",
                        "When giving feedback for in-context operations, useProgress barorSpinnercomponent."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/spinner",
            "title": "Spinner — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Spinners are used to notify merchants that their action is being processed. For loading states, spinners should only be used for content that can’t be represented with skeleton loading components, like for data charts. Use to notify merchants that their requested action is being processed."
                },
                {
                    "type": "code",
                    "code": "import{Spinner}from'@shopify/polaris';importReactfrom'react';functionSpinnerExample(){return<SpinneraccessibilityLabel=\"Spinner example\"size=\"large\"/>;}"
                },
                {
                    "type": "p",
                    "text": "Size of spinner. Defaults to'large'. Accessible label for the spinner. Allows the component to apply the correct accessibility roles based on focus. SVGs are often conveyed inconsistently to assistive technologies. TheSpinnercomponent’s accessibility is also highly contextual. When the parent component is focusable, you’ll need to set thehasFocusableParentprop for the appropriateroleattribute to be applied. For optimal user experience, use theaccessibilityLabelprop to let assistive technology users know the purpose of the spinner. The spinner component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Notify merchants that their request has been received and the action will soon complete.",
                        "Not be used to give feedback for an entire page load.",
                        "White can only be used with small spinners on actionable components like buttons.",
                        "On web, be used in conjunction with skeleton loading to represent non-typographic content. For example, line graphs on the Merchant analytics dashboard."
                    ]
                },
                {
                    "type": "p",
                    "text": "Spinner accessibility label should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Accurately explain the state of the requested action. For example, “Loading”, “Submitting”, “Processing”.",
                        "Use as few words to describe the state as possible."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To improve user experience and reduce the appearance of long loading times, use theProgress barcomponent.",
                        "To better represent loading content, useSkeleton pagealong withSkeleton body textandSkeleton display textcomponents."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/tables",
            "title": "Tables — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Display, organize, and sort data for merchants to analyze and take action on."
                },
                {
                    "type": "list",
                    "items": [
                        "Data tableUsed to organize and display all information from a data set. Aimed to be as simple as possible for merchants.",
                        "Index tableAn index table displays a collection of objects of the same type, like orders or products. The main job of an index table is to help merchants get an at-a-glance of the objects to perform actions or navigate to a full-page representation of it."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/tables/data-table",
            "title": "Data table — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Data tables are used to organize and display all information from a data set. While a data visualization represents part of data set, a data table lets merchants view details from the entire set. This helps merchants compare and analyze the data. Use to present small amounts of data for merchants to view statically."
                },
                {
                    "type": "code",
                    "code": "import{Page,LegacyCard,DataTable}from'@shopify/polaris';importReactfrom'react';functionDataTableExample(){constrows=[['Emerald Silk Gown','$875.00',124689,140,'$122,500.00'],['Mauve Cashmere Scarf','$230.00',124533,83,'$19,090.00'],['Navy Merino Wool Blazer with khaki chinos and yellow belt','$445.00',124518,32,'$14,240.00',],];return(<Pagetitle=\"Sales by product\"><LegacyCard><DataTablecolumnContentTypes={['text','numeric','numeric','numeric','numeric',]}headings={['Product','Price','SKU Number','Net quantity','Net sales',]}rows={rows}totals={['','','',255,'$155,830.00']}/></LegacyCard></Page>);}"
                },
                {
                    "type": "p",
                    "text": "List of data types, which determines content alignment for each column. Data types are \"text,\" which aligns left, or \"numeric,\" which aligns right. List of column headings. List of numeric column totals, highlighted in the table’s header below column headings. Use empty strings as placeholders for columns with no total. Custom totals row heading. Placement of totals row within table. Lists of data points which map to table body rows. Hide column visibility and navigation buttons above the header when the table horizontally collapses to be scrollable. Defaults tofalse. Truncate content in first column instead of wrapping. Defaults totrue. Vertical alignment of content in the cells. Defaults to'top'. Content centered in the full width cell of the table footer row. Table row has hover state. Defaults to true. List of booleans, which maps to whether sorting is enabled or not for each column. Defaults to false for all columns. The direction to sort the table rows on first click or keypress of a sortable column heading. Defaults to ascending. Defaults to'ascending'. The index of the heading that the table rows are initially sorted by. Defaults to the first column. Defaults to0. Callback fired on click or keypress of a sortable column heading. Increased density. Add zebra striping to data rows. Header becomes sticky and pins to top of table when scrolling. Add fixed columns on horizontal scroll. Specify a min width for the first column if neccessary. Properties to enable pagination at the bottom of the table. Data tables should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Show values across multiple categories and measures.",
                        "Allow for filtering and ordering when comparison is not a priority.",
                        "Help merchants visualize and scan many values from an entire data set.",
                        "Help merchants find other values in the data hierarchy through use of links.",
                        "Minimize clutter by only including values that supports the data’s purpose.",
                        "Include a summary row to surface the column totals.",
                        "Not include calculations within the summary row.",
                        "Wrap instead of truncate content. This is because if row titles start with the same word, they’ll all appear the same when truncated.",
                        "Not to be used for an actionable list of items that link to details pages. For this functionality, use theresource list component."
                    ]
                },
                {
                    "type": "p",
                    "text": "Column content types are built into the component props so the following alignment rules are followed:"
                },
                {
                    "type": "list",
                    "items": [
                        "Numerical = Right aligned",
                        "Textual data = Left aligned",
                        "Align headers with their related data",
                        "Don’t center align"
                    ]
                },
                {
                    "type": "p",
                    "text": "Headers should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be informative and descriptive",
                        "Concise and scannable",
                        "Include units of measurement symbols so they aren’t repeated throughout the columns",
                        "Use sentence case (first word capitalized, rest lowercase)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Temperature °C Temperature Column content should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be concise and scannable",
                        "Not include units of measurement symbols (put those symbols in the headers)",
                        "Use sentence case (first word capitalized, rest lowercase)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Keep decimals consistent. For example, don’t use 3 decimals in one row and 2 in others."
                },
                {
                    "type": "list",
                    "items": [
                        "To create an actionable list of related items that link to details pages, such as a list of customers, use theresource list component."
                    ]
                },
                {
                    "type": "p",
                    "text": "Native HTML tables provide a large amount of structural information to screen reader users. Merchants who rely on screen readers can navigate tables and identify relationships between data cells (<td>) and headers (<th>) using keys specific to their screen reader. Sortable tables use thearia-sortattribute to convey which columns are sortable (and in what direction). They also usearia-labelon sorting buttons to convey what activating the button will do. Use tables for tabular data. Use tables for layout. For a table-like layout that doesn’t use table HTML elements, use theresource list component. Sorting controls for the data table component are implemented with native HTML buttons."
                },
                {
                    "type": "list",
                    "items": [
                        "Give buttons keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "Activate buttons with theenter/returnandspacekeys"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/tables/index-table",
            "title": "Index table — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "An index table displays a collection of objects of the same type, like orders or products. The main job of an index table is to help merchants get an at-a-glance of the objects to perform actions or navigate to a full-page representation of it. An index table with simple items and no bulk actions, sorting, or filtering."
                },
                {
                    "type": "code",
                    "code": "import{IndexTable,LegacyCard,useIndexResourceState,Text,Badge,}from'@shopify/polaris';importReactfrom'react';functionSimpleIndexTableExample(){constorders=[{id:'1020',order:'#1020',date:'Jul 20 at 4:34pm',customer:'Jaydon Stanton',total:'$969.44',paymentStatus:<Badgeprogress=\"complete\">Paid</Badge>,fulfillmentStatus:<Badgeprogress=\"incomplete\">Unfulfilled</Badge>,},{id:'1019',order:'#1019',date:'Jul 20 at 3:46pm',customer:'Ruben Westerfelt',total:'$701.19',paymentStatus:<Badgeprogress=\"partiallyComplete\">Partiallypaid</Badge>,fulfillmentStatus:<Badgeprogress=\"incomplete\">Unfulfilled</Badge>,},{id:'1018',order:'#1018',date:'Jul 20 at 3.44pm',customer:'Leo Carder',total:'$798.24',paymentStatus:<Badgeprogress=\"complete\">Paid</Badge>,fulfillmentStatus:<Badgeprogress=\"incomplete\">Unfulfilled</Badge>,},];constresourceName={singular:'order',plural:'orders',};const{selectedResources,allResourcesSelected,handleSelectionChange}=useIndexResourceState(orders);constrowMarkup=orders.map(({id,order,date,customer,total,paymentStatus,fulfillmentStatus},index,)=>(<IndexTable.Rowid={id}key={id}selected={selectedResources.includes(id)}position={index}><IndexTable.Cell><Textvariant=\"bodyMd\"fontWeight=\"bold\"as=\"span\">{order}</Text></IndexTable.Cell><IndexTable.Cell>{date}</IndexTable.Cell><IndexTable.Cell>{customer}</IndexTable.Cell><IndexTable.Cell><Textas=\"span\"alignment=\"end\"numeric>{total}</Text></IndexTable.Cell><IndexTable.Cell>{paymentStatus}</IndexTable.Cell><IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell></IndexTable.Row>),);return(<LegacyCard><IndexTableresourceName={resourceName}itemCount={orders.length}selectedItemsCount={allResourcesSelected?'All':selectedResources.length}onSelectionChange={handleSelectionChange}headings={[{title:'Order'},{title:'Date'},{title:'Customer'},{title:'Total',alignment:'end'},{title:'Payment status'},{title:'Fulfillment status'},]}>{rowMarkup}</IndexTable></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "List of booleans, which maps to whether sorting is enabled or not for each column. Defaults to false for all columns. The direction to sort the table rows on first click or keypress of a sortable column heading. Defaults to descending. Defaults to'descending'. The current sorting direction. The index of the heading that the table rows are sorted by. Callback fired on click or keypress of a sortable column heading. Optional dictionary of sort toggle labels for each sortable column, with ascending and descending label,\nwith the key as the index of the column. Add zebra striping to table rows. Properties to enable pagination at the bottom of the table. Index tables can also:"
                },
                {
                    "type": "list",
                    "items": [
                        "Supportcustomized index rows and columns",
                        "Include bulk actions so merchants can act on multiple objects at once",
                        "Support sorting andfilteringof long lists",
                        "Be paired with pagination to make long lists digestible"
                    ]
                },
                {
                    "type": "p",
                    "text": "Using an index table in a project involves combining the following components and subcomponents:"
                },
                {
                    "type": "list",
                    "items": [
                        "IndexTable",
                        "IndexTable.Row",
                        "IndexTable.Cell",
                        "Filters(optional)",
                        "IndexFilters(optional)",
                        "Pagination(optional)"
                    ]
                },
                {
                    "type": "p",
                    "text": "The index table component provides the UI elements for list selection, sorting, filtering, and pagination, but doesn’t provide the logic for these operations. When a sort option is changed, filter added, or second page requested, you’ll need to handle that event (including any network requests) and then update the component with new props. Shopify is organized around objects that represent merchants' businesses, like customers, products, and orders. Each individual order, for example, is given a dedicated page that can be linked to. In Shopify, we call these types of objectsresources, and we call the object’s dedicated page itsdetails page. Take orders as an example. Merchants may have a lot of them. They need a way to scan their orders, view the different attributes on each order, and find out which ones need action first. In other words, they need a way find an individual order, call up more information about it, and take action on it. Index tables function as:"
                },
                {
                    "type": "list",
                    "items": [
                        "A content format, presenting a set of individual resources with multiple columns of information for each",
                        "A system for taking action on one or more individual resources",
                        "A way to navigate to an individual resource’s details page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Because a details page displays all the content and actions for an individual resource, you can think of a resource list as a summary of these details pages. In this way resource lists bridge a middle level in Shopify’s navigation hierarchy. Index tables should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Have items that perform an action when clicked. The action should navigate to the resource’s details page or otherwise provide more detail about the item.",
                        "Customize the content and layoutof their items rows to surface information to support merchants’ needs.",
                        "Support sorting if the list can be long, and especially if different merchant tasks benefit from different sort orders.",
                        "Supportfilteringif the list can be long.",
                        "Paginate when the current list contains more than 50 items.",
                        "Use theskeleton pagecomponent on initial page load for the rest of the page if the loading prop is true and items are processing.",
                        "Numeric cells and titles should be right aligned with theTextcomponent",
                        "Numeric cells should use the numeric style with theTextcomponent"
                    ]
                },
                {
                    "type": "p",
                    "text": "Index tables can optionally:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provide bulk actions for tasks that are often applied to many list items at once. For example, merchants may want to add the same tag to a large number of products.",
                        "Hide bulk actions on small screens using thecondensedprop. We only recommend hiding bulk actions on screens smaller than 490px using ourbreakpoints-smvalue:condensed={useBreakpoints().smDown}.Hiding bulk actions means a merchant can’t select multiple items at once, so it should only be used when the bulk actions are not essential to the merchant’s workflow.",
                        "Hiding bulk actions means a merchant can’t select multiple items at once, so it should only be used when the bulk actions are not essential to the merchant’s workflow."
                    ]
                },
                {
                    "type": "p",
                    "text": "Index tables should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Identify the type of resource, usually with a heading"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products",
                        "Showing 50 products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "No heading"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Indicate when not all members of a resource are being shown. For a card summarizing and linking to recently purchased products:"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Popular products this week"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Follow the verb + noun formula for bulk actions",
                        "Follow thecontent guidelines for filter options and applied filters"
                    ]
                },
                {
                    "type": "p",
                    "text": "AnIndexTable.Rowis used to render a row representing an item within anIndexTable AnIndexTable.Cellis used to render a single cell within anIndexTable.Row"
                },
                {
                    "type": "list",
                    "items": [
                        "To create an actionable list of related items that link to details pages, such as a list of customers, use theresource list component",
                        "To present structured data for comparison and analysis, like when helping merchants to gain insights or review analytics, use thedata table component",
                        "To display a simple list of related content,use the list component"
                    ]
                },
                {
                    "type": "p",
                    "text": "TheIndexTableis an actionable, filterable, and sortable table widget that supports row selection withsubheaders. To ensure that the power of this table is accessible to all merchants when implementingIndexTable.Rowsubheaders, set the following props onIndexTable.Cellthat are appropriate for the enhancement you are implementing. Merchants can select a group of rows at once by clicking orSpacekeypressing a subheader row's checkbox. To indicate that anIndexTable.Rowserves as a subheader for 1 or more rows below it, set the:"
                },
                {
                    "type": "list",
                    "items": [
                        "Zero-indexed tablepositionof the first and lastIndexTable.Rowdescribed by the subheaderIndexTable.Rowas a tuple array on itsselectionRangeprop",
                        "Uniqueidon theIndexTable.Cellthat contains the subheader content",
                        "Element tag to\"th\"on theasprop of the subheaderIndexTable.Cell",
                        "SubheaderIndexTable.Cellscopeprop to\"colgroup\""
                    ]
                },
                {
                    "type": "p",
                    "text": "To associate the subheaderIndexTable.Rowwith eachIndexTable.Cellthat it describes, set the:"
                },
                {
                    "type": "list",
                    "items": [
                        "Uniqueidprovided to the subheaderIndexTable.Cellon theheadersprop of each relatedIndexTable.Cell(contained by anIndexTable.Rowthat's position is within theselectionRange) as well as the uniqueidof its corresponding column heading that you provided to theIndexTableheadingsprop"
                    ]
                },
                {
                    "type": "p",
                    "text": "IndexTablealso supports multi-selection of a range of rows by keypressing theShiftkey. To select a range, press and hold theShiftkey while you click or keypress theSpacekey on a row checkbox and then do the same on another row's checkbox. All selectable rows between the selected checkboxes will also be selected."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/tabs",
            "title": "Tabs — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use to alternate among related views within the same context. Use for most cases, especially when the number of tabs may be more than three."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,Tabs}from'@shopify/polaris';import{useState,useCallback}from'react';functionTabsDefaultExample(){const[selected,setSelected]=useState(0);consthandleTabChange=useCallback((selectedTabIndex:number)=>setSelected(selectedTabIndex),[],);consttabs=[{id:'all-customers-1',content:'All',accessibilityLabel:'All customers',panelID:'all-customers-content-1',},{id:'accepts-marketing-1',content:'Accepts marketing',panelID:'accepts-marketing-content-1',},{id:'repeat-customers-1',content:'Repeat customers',panelID:'repeat-customers-content-1',},{id:'prospects-1',content:'Prospects',panelID:'prospects-content-1',},];return(<Tabstabs={tabs}selected={selected}onSelect={handleTabChange}><LegacyCard.Sectiontitle={tabs[selected].content}><p>Tab{selected}selected</p></LegacyCard.Section></Tabs>);}"
                },
                {
                    "type": "p",
                    "text": "The items that map to each Tab. Content to display in tabs. The index of the currently selected Tab. Whether the Tabs are disabled or not. Whether to show the add new view Tab. Label for the new view Tab. Will override the default of \"Create new view\". Fit tabs to container. Text to replace disclosures horizontal dots. Override z-index of popovers and tooltips. Optional callback invoked when a Tab becomes selected. Optional callback invoked when a merchant saves a new view from the Modal. Tabs should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Represent the same kind of content, such as a list-view with different filters applied. Don’t use tabs to group content that is dissimilar.",
                        "Only be active one at a time.",
                        "Not force merchants to jump back and forth to do a single task. Merchants should be able to complete their work and find what they need under each tab.",
                        "Not be used for primary navigation."
                    ]
                },
                {
                    "type": "p",
                    "text": "Tabs should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clearly labeled to help differentiate the different sections beneath them.",
                        "Have short and scannable labels, generally kept to single word.",
                        "Relate to the section of Shopify they’re on. Imagine the page section title is an invisible noun after the tab. For example, the tabs for the orders section are:AllOpenUnfulfilledUnpaid",
                        "All",
                        "Open",
                        "Unfulfilled",
                        "Unpaid"
                    ]
                },
                {
                    "type": "p",
                    "text": "The tabs for the gift cards section are:"
                },
                {
                    "type": "list",
                    "items": [
                        "All",
                        "New",
                        "Partially used",
                        "Used",
                        "Disabled"
                    ]
                },
                {
                    "type": "p",
                    "text": "And for the customers section, the tabs are:"
                },
                {
                    "type": "list",
                    "items": [
                        "All",
                        "New",
                        "Returning",
                        "Abandoned checkouts",
                        "Email subscribers"
                    ]
                },
                {
                    "type": "p",
                    "text": "Where possible, follow this pattern when writing tabs."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/tag",
            "title": "Tag — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Tags represent a set of interactive, merchant-supplied keywords that help label, organize, and categorize objects. Tags can be added or removed from an object by merchants. Use to signify the attributes of an object."
                },
                {
                    "type": "code",
                    "code": "import{Card,Tag}from'@shopify/polaris';importReactfrom'react';functionTagExample(){return(<Card><Tag>Wholesale</Tag></Card>);}"
                },
                {
                    "type": "p",
                    "text": "This component defines its props in a way that our website can't automatically parse. The type definition is shown below, but it might be hard to read. Tags should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be presented close to or within the input control that allows merchants to add and remove tags"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To show the status of an object,use the badge component",
                        "To add and remove tags,use the text field component"
                    ]
                },
                {
                    "type": "p",
                    "text": "The button to remove a tag is automatically given a label usingaria-labelso that screen reader users can distinguish which tag will be removed. The control to remove a tag is implemented as a button with standard keyboard support."
                },
                {
                    "type": "list",
                    "items": [
                        "Give buttons keyboard focus with thetabkey (orshift+tabwhen tabbing backwards)",
                        "To activate a button, press theenter/returnorspacekey"
                    ]
                },
                {
                    "type": "p",
                    "text": "When a merchant uses the button to remove a tag, it is important to make sure that keyboard focus is managed. Moving focus to the next element in the page is recommended."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/text",
            "title": "Text — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Typography helps establish hierarchy and communicate important content by creating clear visual patterns. Use to create various levels of hierarchy on the page."
                },
                {
                    "type": "code",
                    "code": "import{Text,LegacyStack}from'@shopify/polaris';importReactfrom'react';functionTextExample(){return(<LegacyStackvertical><Textvariant=\"heading3xl\"as=\"h2\">Onlinestore dashboard</Text><Textvariant=\"heading2xl\"as=\"h3\">Onlinestore dashboard</Text><Textvariant=\"headingXl\"as=\"h4\">Onlinestore dashboard</Text><Textvariant=\"headingLg\"as=\"h5\">Onlinestore dashboard</Text><Textvariant=\"headingMd\"as=\"h6\">Onlinestore dashboard</Text><Textvariant=\"headingSm\"as=\"h6\">Onlinestore dashboard</Text><Textvariant=\"headingXs\"as=\"h6\">Onlinestore dashboard</Text></LegacyStack>);}"
                },
                {
                    "type": "p",
                    "text": "Adjust horizontal alignment of text. The element type. Prevent text from overflowing. Text to display. Adjust tone of text. Adjust weight of text. HTML id attribute. Use a numeric font variant with monospace appearance. Truncate text overflow with ellipsis. Typographic style of text. Visually hide the text. Add a line-through to the text. Each variant uses a predetermined combination of thefont tokensto set the font size and line height. Heading variants have a set font weight but can be overridden by using thefontWeightprop. Nested Text components will inherit properties from its parent Text container. These are suggested replacements for existing text style components, but ultimately the best replacement should be evaluated based on the context of the usage. TheTextcomponent also requires setting the semantically appropriate html element through theasprop."
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"small\">Sales this year</DisplayText>+<Text variant=\"headingLg\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"medium\">Sales this year</DisplayText>+<Text variant=\"headingXl\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"large\">Sales this year</DisplayText>+<Text variant=\"heading2xl\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"extraLarge\">Sales this year</DisplayText>+<Text variant=\"heading3xl\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<Heading>Online store dashboard</Heading>+<Text variant=\"headingMd\" as=\"h2\">Online store dashboard</Text>"
                },
                {
                    "type": "code",
                    "code": "-<Subheading>Accounts</Subheading>+<Text variant=\"headingSm\" as=\"h3\">Accounts</Text>"
                },
                {
                    "type": "code",
                    "code": "-<Caption>Received April 21, 2017</Caption>+<Text variant=\"bodySm\" as=\"p\">Received April 21, 2017</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"subdued\">No supplier listed</TextStyle>+<Text as=\"span\" tone=\"subdued\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"strong\">No supplier listed</TextStyle>+<Text as=\"span\" fontWeight=\"semibold\" >No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"positive\">No supplier listed</TextStyle>+<Text as=\"span\" tone=\"success\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"negative\">No supplier listed</TextStyle>+<Text as=\"span\" tone=\"critical\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"warning\">No supplier listed</TextStyle>+<Text as=\"span\" tone=\"warning\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"code\">No supplier listed</TextStyle>+<Text as=\"span\"><InlineCode>No supplier listed</InlineCode></Text>"
                },
                {
                    "type": "code",
                    "code": "-<VisuallyHidden>-<Heading>Title and description</Heading>-</VisuallyHidden>+<Text visuallyHidden as=\"h2\">Title and description</Text>"
                },
                {
                    "type": "p",
                    "text": "Headings use all the variants withheadingin the name, such asheadingMd. Headings should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly describe the section of interface they refer to",
                        "Highlight the most important concept or piece of information merchants need to know",
                        "Sit at the top of the section of interface they’re referring to"
                    ]
                },
                {
                    "type": "p",
                    "text": "Captions use thebodySmText variant."
                },
                {
                    "type": "list",
                    "items": [
                        "Use for secondary labels in graphs and charts",
                        "May be used for timestamps in lists of content",
                        "Don’t use this variant for other cases",
                        "Don’t use this variant for text longer than a few words",
                        "Don’t use this variant for aesthetic effect or to break from the standard text size"
                    ]
                },
                {
                    "type": "p",
                    "text": "Text styles should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Used when enhancing the text to help merchants understand its meaning",
                        "Subdued if the text is less important than its surrounding text",
                        "Warning if the text denotes something that needs attention, or that merchants need to take action on.",
                        "Semibold for input fields, or for a row total in a price table",
                        "Paired with symbols, like an arrow or dollar sign, when using success or critical styles"
                    ]
                },
                {
                    "type": "p",
                    "text": "Visually hidden text should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Not be used if semantic markup can make content understandable to people using assistive technology",
                        "Be used to provide extra context when semantic markup isn’t enough",
                        "Be used on any content that is normally present but is being omitted",
                        "Make sense in context when used with a screen reader"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/thumbnail",
            "title": "Thumbnail — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use thumbnails as a visual anchor and identifier for an object. They should be used along with text to provide context. Use as the default size."
                },
                {
                    "type": "code",
                    "code": "import{Thumbnail}from'@shopify/polaris';importReactfrom'react';functionThumbnailExample(){return(<Thumbnailsource=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"alt=\"Black choker necklace\"/>);}"
                },
                {
                    "type": "p",
                    "text": "Size of thumbnail. Defaults to'medium'. URL for the image. Alt text for the thumbnail image. Transparent background. On web, thumbnails should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be one of 4 sizes:Extra small (24 x 24 px): use in tightly condensed layoutsSmall (40 × 40 px): use when the medium size is too large for the layout, or when the thumbnail has less importance.Medium (60 × 60 px): use as the default size.Large (80 × 80 px): use when an thumbnail is a major focal point. Avoid this size in lists of like items.",
                        "Extra small (24 x 24 px): use in tightly condensed layouts",
                        "Small (40 × 40 px): use when the medium size is too large for the layout, or when the thumbnail has less importance.",
                        "Medium (60 × 60 px): use as the default size.",
                        "Large (80 × 80 px): use when an thumbnail is a major focal point. Avoid this size in lists of like items."
                    ]
                },
                {
                    "type": "p",
                    "text": "On Android and iOS, thumbnails should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be one of 2 sizes:Default (40 × 40): use as the default size.Large (72 × 72): use when an thumbnail is a major focal point. Avoid this size in lists of like items.",
                        "Default (40 × 40): use as the default size.",
                        "Large (72 × 72): use when an thumbnail is a major focal point. Avoid this size in lists of like items."
                    ]
                },
                {
                    "type": "p",
                    "text": "Any time you use an image to communicate a concept on Shopify, it’s important to use descriptivealt text. Doing this is important foraccessibilitybecause it allows screen readers to describe what’s in the image to people who may not be able to see it. For thumbnails, we recommend using a format that describes what will show in the image:"
                },
                {
                    "type": "list",
                    "items": [
                        "On web,alt=\"Photo of {product}\". For example, “Photo of black t-shirt with cartoon tiger”.",
                        "On web, an emptyalt=\"\"attribute ignores the image in assistive technologies such as screen readers, and may be used on decorative thumbnails.",
                        "On iOS,imageView.accessibilityLabel = \"Photo of {product}\". For example, “Photo of black t-shirt with cartoon tiger”.",
                        "On Android,android:contentDescription=\"Photo of {product}\". For example, “Photo of black t-shirt with cartoon tiger”."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To present a thumbnail representation of an individual or business in the interface,use the avatar component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/typography",
            "title": "Typography — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Establish hierarchy and communicate importance through text presentation."
                },
                {
                    "type": "list",
                    "items": [
                        "TextTypography helps establish hierarchy and communicate important content by creating clear visual patterns."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/typography/text",
            "title": "Text — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Typography helps establish hierarchy and communicate important content by creating clear visual patterns. Use to create various levels of hierarchy on the page."
                },
                {
                    "type": "code",
                    "code": "import{Text,LegacyStack}from'@shopify/polaris';importReactfrom'react';functionTextExample(){return(<LegacyStackvertical><Textvariant=\"heading3xl\"as=\"h2\">Onlinestore dashboard</Text><Textvariant=\"heading2xl\"as=\"h3\">Onlinestore dashboard</Text><Textvariant=\"headingXl\"as=\"h4\">Onlinestore dashboard</Text><Textvariant=\"headingLg\"as=\"h5\">Onlinestore dashboard</Text><Textvariant=\"headingMd\"as=\"h6\">Onlinestore dashboard</Text><Textvariant=\"headingSm\"as=\"h6\">Onlinestore dashboard</Text><Textvariant=\"headingXs\"as=\"h6\">Onlinestore dashboard</Text></LegacyStack>);}"
                },
                {
                    "type": "p",
                    "text": "Adjust horizontal alignment of text. The element type. Prevent text from overflowing. Text to display. Adjust tone of text. Adjust weight of text. HTML id attribute. Use a numeric font variant with monospace appearance. Truncate text overflow with ellipsis. Typographic style of text. Visually hide the text. Add a line-through to the text. Each variant uses a predetermined combination of thefont tokensto set the font size and line height. Heading variants have a set font weight but can be overridden by using thefontWeightprop. Nested Text components will inherit properties from its parent Text container. These are suggested replacements for existing text style components, but ultimately the best replacement should be evaluated based on the context of the usage. TheTextcomponent also requires setting the semantically appropriate html element through theasprop."
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"small\">Sales this year</DisplayText>+<Text variant=\"headingLg\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"medium\">Sales this year</DisplayText>+<Text variant=\"headingXl\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"large\">Sales this year</DisplayText>+<Text variant=\"heading2xl\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"extraLarge\">Sales this year</DisplayText>+<Text variant=\"heading3xl\" as=\"p\">Sales this year</Text>"
                },
                {
                    "type": "code",
                    "code": "-<Heading>Online store dashboard</Heading>+<Text variant=\"headingMd\" as=\"h2\">Online store dashboard</Text>"
                },
                {
                    "type": "code",
                    "code": "-<Subheading>Accounts</Subheading>+<Text variant=\"headingSm\" as=\"h3\">Accounts</Text>"
                },
                {
                    "type": "code",
                    "code": "-<Caption>Received April 21, 2017</Caption>+<Text variant=\"bodySm\" as=\"p\">Received April 21, 2017</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"subdued\">No supplier listed</TextStyle>+<Text as=\"span\" tone=\"subdued\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"strong\">No supplier listed</TextStyle>+<Text as=\"span\" fontWeight=\"semibold\" >No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"positive\">No supplier listed</TextStyle>+<Text as=\"span\" tone=\"success\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"negative\">No supplier listed</TextStyle>+<Text as=\"span\" tone=\"critical\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"warning\">No supplier listed</TextStyle>+<Text as=\"span\" tone=\"warning\">No supplier listed</Text>"
                },
                {
                    "type": "code",
                    "code": "-<TextStyle variation=\"code\">No supplier listed</TextStyle>+<Text as=\"span\"><InlineCode>No supplier listed</InlineCode></Text>"
                },
                {
                    "type": "code",
                    "code": "-<VisuallyHidden>-<Heading>Title and description</Heading>-</VisuallyHidden>+<Text visuallyHidden as=\"h2\">Title and description</Text>"
                },
                {
                    "type": "p",
                    "text": "Headings use all the variants withheadingin the name, such asheadingMd. Headings should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly describe the section of interface they refer to",
                        "Highlight the most important concept or piece of information merchants need to know",
                        "Sit at the top of the section of interface they’re referring to"
                    ]
                },
                {
                    "type": "p",
                    "text": "Captions use thebodySmText variant."
                },
                {
                    "type": "list",
                    "items": [
                        "Use for secondary labels in graphs and charts",
                        "May be used for timestamps in lists of content",
                        "Don’t use this variant for other cases",
                        "Don’t use this variant for text longer than a few words",
                        "Don’t use this variant for aesthetic effect or to break from the standard text size"
                    ]
                },
                {
                    "type": "p",
                    "text": "Text styles should be:"
                },
                {
                    "type": "list",
                    "items": [
                        "Used when enhancing the text to help merchants understand its meaning",
                        "Subdued if the text is less important than its surrounding text",
                        "Warning if the text denotes something that needs attention, or that merchants need to take action on.",
                        "Semibold for input fields, or for a row total in a price table",
                        "Paired with symbols, like an arrow or dollar sign, when using success or critical styles"
                    ]
                },
                {
                    "type": "p",
                    "text": "Visually hidden text should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Not be used if semantic markup can make content understandable to people using assistive technology",
                        "Be used to provide extra context when semantic markup isn’t enough",
                        "Be used on any content that is normally present but is being omitted",
                        "Make sense in context when used with a screen reader"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/utilities",
            "title": "Utilities — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Utilities are core tools for managing the structure of the admin and global settings."
                },
                {
                    "type": "list",
                    "items": [
                        "App providerApp provider is a required component that enables sharing global settings throughout the hierarchy of your application.",
                        "CollapsibleHides content and allows merchants to expand it. Used to hide optional settings, information, and actions.",
                        "ScrollableUsed in components with too much content for the available vertical space. Embeds long-form content in components like modals and popovers."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/utilities/app-provider",
            "title": "App provider — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "App provider is a required component that enables sharing global settings throughout the hierarchy of your application. AppProvider works by default without any additional options passed to it."
                },
                {
                    "type": "code",
                    "code": "import{AppProvider,Page,LegacyCard,ResourceList,Avatar,Text,}from'@shopify/polaris';importReactfrom'react';functionAppProviderExample(){return(<AppProvideri18n={{Polaris:{ResourceList:{sortingLabel:'Sort by',defaultItemSingular:'item',defaultItemPlural:'items',showing:'Showing {itemsCount} {resource}',Item:{viewItem:'View details for {itemName}',},},Common:{checkbox:'checkbox',},},}}><Page><LegacyCard><ResourceListshowHeaderitems={[{id:'341',url:'#',name:'Mae Jemison',location:'Decatur, USA',},{id:'256',url:'#',name:'Ellen Ochoa',location:'Los Angeles, USA',},]}renderItem={(item)=>{const{id,url,name,location}=item;constmedia=<Avatarcustomer size=\"md\"name={name}/>;return(<ResourceList.Itemid={id}url={url}media={media}><Textvariant=\"bodyMd\"fontWeight=\"bold\"as=\"h3\">{name}</Text><div>{location}</div></ResourceList.Item>);}}/></LegacyCard></Page></AppProvider>);}"
                },
                {
                    "type": "p",
                    "text": "A locale object or array of locale objects that overrides default translations. If specifying an array then your primary language dictionary should come first, followed by your fallback language dictionaries. A custom component to use for all links used by Polaris components. For toggling features. Inner content of the application. The app provider component is required to use Polaris. Without it, the components in your application will not function correctly. You must wrap the root (the top) of your application in the app provider component. Translations are provided in the locales folder. When using Polaris, you are able to import translations from all languages supported by the core Shopify product and consume them through thei18nprop. If a project has only one locale, then you can pass the JSON content from the locale file intoAppProvider."
                },
                {
                    "type": "code",
                    "code": "import{AppProvider}from'@shopify/polaris';// en.json is English. Replace with fr.json for French, etcimporttranslationsfrom'@shopify/polaris/locales/en.json';functionApp(){return<AppProvideri18n={translations}>{/* App content */}</AppProvider>;}"
                },
                {
                    "type": "p",
                    "text": "If a project supports multiple locales, then load them dynamically using@shopify/react-i18n. This ensures that you load only the translations you need."
                },
                {
                    "type": "code",
                    "code": "import{AppProvider}from'@shopify/polaris';// en.json is English. Replace with fr.json for French, etcimporttranslationsfrom'@shopify/polaris/locales/en.json';import{useI18n}from'@shopify/react-i18n';functionApp(){const[i18n]=useI18n({id:'Polaris',fallback:translations,translations(locale){returnimport(/* webpackChunkName: \"Polaris-i18n\", webpackMode: \"lazy-once\" */`@shopify/polaris/locales/${locale}.json`).then((dictionary)=>dictionary&&dictionary.default);},});// i18n.translations is an array of translation dictionaries, where the first// dictionary is the desired language, and the second is the fallback.return(<AppProvideri18n={i18n.translations}>{/* App content */}</AppProvider>);}"
                },
                {
                    "type": "p",
                    "text": "By default Polaris renders<Link>elements (and action objects) as<a>tags. That works well for simple one-page demos. However for more complex multi-page applications that use a router such asreact-routeryou will want links to use the components provided by your router. If you don't then every link will be an<a>tag and thus trigger a whole page refresh instead of navigating client-side. ThelinkComponentprop allows you to customise how links behave within Polaris by allowing you to inject your router's own Link component. The following example demonstrates using react-router'sLinkcomponent."
                },
                {
                    "type": "code",
                    "code": "import{BrowserRouter,LinkasReactRouterLink}from'react-router-dom';functionApp(){return(<BrowserRouter><AppProviderlinkComponent={Link}>{/* App content including your <Route> components */}</AppProvider></BrowserRouter>);}constIS_EXTERNAL_LINK_REGEX=/^(?:[a-z][a-z\\d+.-]*:|\\/\\/)/;functionLink({children,url='',external,ref,...rest}){// react-router only supports links to pages it can handle itself. It does not// support arbirary links, so anything that is not a path-based link should// use a reglar old `a` tagif(external||IS_EXTERNAL_LINK_REGEX.test(url)){rest.target='_blank';rest.rel='noopener noreferrer';return(<ahref={url}{...rest}>{children}</a>);}return(<ReactRouterLinkto={url}{...rest}>{children}</ReactRouterLink>);}"
                },
                {
                    "type": "p",
                    "text": "You must include Polaris context in your tests when you use Polaris components. To make this easier for you, we’ve provided:"
                },
                {
                    "type": "list",
                    "items": [
                        "a PolarisTestProvider component to provide the Polaris contexts for you"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/utilities/collapsible",
            "title": "Collapsible — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The collapsible component is used to put long sections of information under a block that merchants can expand or collapse. Use for a basic “show more” interaction when you need to display more content."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,LegacyStack,Button,Collapsible,TextContainer,Link,}from'@shopify/polaris';import{useState,useCallback}from'react';functionCollapsibleExample(){const[open,setOpen]=useState(true);consthandleToggle=useCallback(()=>setOpen((open)=>!open),[]);return(<div style={{height:'200px'}}><LegacyCardsectioned><LegacyStackvertical><ButtononClick={handleToggle}ariaExpanded={open}ariaControls=\"basic-collapsible\">Toggle</Button><Collapsibleopen={open}id=\"basic-collapsible\"transition={{duration:'500ms',timingFunction:'ease-in-out'}}expandOnPrint><TextContainer><p>Yourmailing list lets you contact customers or visitors whohave shown an interestinyour store.Reachout to themwithexclusive offers or updates about your products.</p><Linkurl=\"#\">Testlink</Link></TextContainer></Collapsible></LegacyStack></LegacyCard></div>);}"
                },
                {
                    "type": "p",
                    "text": "Assign a unique ID to the collapsible. For accessibility, pass this ID as the value of the triggering component’s aria-controls prop. Option to show collapsible content when printing. Toggle whether the collapsible is expanded or not. The direction the collapsible collapses in. Defaults to'block'. Override transition properties. When set to false, disables transition completely. Defaults totransition={{duration:'var(--p-motion-duration-150)',timingFunction:'var(--p-motion-ease-in-out)'}}. Callback when the animation completes. The content to display inside the collapsible. The collapsible component should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used for information that is lower priority or that merchants don’t need to see all the time",
                        "Not be used to hide error messages or other critical information that requires an immediate action"
                    ]
                },
                {
                    "type": "p",
                    "text": "Collapsible containers are cards with expandable and collapsible functionality, and should follow the content guidelines forcards."
                },
                {
                    "type": "list",
                    "items": [
                        "To control a collapsible component, use thebuttoncomponent",
                        "To put long sections of information in a container that allows for scrolling,use the scrollable component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the collapsible component in conjunction with abutton. Place the collapsible content immediately after the button that controls it, so merchants with vision or attention issues can easily discover what content is being affected."
                },
                {
                    "type": "list",
                    "items": [
                        "Use the requiredidprop of the collapsible component to give the content a uniqueidvalue",
                        "Use theariaExpandedprop on the button component to add anaria-expandedattribute, which conveys the expanded or collapsed state to screen reader users",
                        "Use theariaControlsprop on the button component, and set its value to theidvalue of the collapsible component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/utilities/scrollable",
            "title": "Scrollable — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The scrollable component is a container for long form content, such as terms of service, that allows for scrolling so merchants can expose more text as they read. Use when you need to make a region within the page independently scrollable. It’s often used in modals and other panes where it’s helpful to provide an extra visual cue that content exists below or above the fold."
                },
                {
                    "type": "code",
                    "code": "import{LegacyCard,Scrollable}from'@shopify/polaris';importReactfrom'react';functionScrollableExample(){return(<LegacyCardtitle=\"Terms of service\"sectioned><Scrollableshadow style={{height:'100px'}}focusable><p>Bysigning upfortheShopifyservice(“Service”)or anyoftheservicesofShopifyInc.(“Shopify”)you are agreeing to be bound bythe following terms andconditions(“TermsofService”).TheServicesoffered byShopifyunder theTermsofServiceinclude various productsand services to help you create and manage a retail store,whether anonlinestore(“OnlineServices”),a physical retailstore(“POSServices”),or both.Anynewfeaturesor tools which are added to thecurrentServiceshall be also subject to theTermsofService.Youcanreview the current versionoftheTermsofServiceat any time athttps://www.shopify.com/legal/terms.Shopifyreserves the right toupdate and change theTermsofServiceby posting updates and changesto theShopifywebsite.Youare advised to check theTermsofServicefromtime to timeforany updates or changes that may impact you.</p></Scrollable></LegacyCard>);}"
                },
                {
                    "type": "p",
                    "text": "Content to display in scrollable area. Scroll content vertically. Defaults totrue. Scroll content horizontally. Defaults totrue. Add a shadow when content is scrollable. Slightly hints content upon mounting when scrollable. Adds a tabIndex to scrollable when children are not focusable. Browser determined scrollbar width. Defaults to'thin'. Adds space to one or both sides to prevent content shift when scrolling is necessary. Called when scrolled to the bottom of the scroll area. Scrollable containers should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used when it’s helpful to provide an extra visual cue to let merchants know that content exists below or above the fold",
                        "Only be used for length text such as terms of service or other legal disclaimers and never for instructional or action-oriented text"
                    ]
                },
                {
                    "type": "p",
                    "text": "Scrollable containers are cards with scrolling functionality, and should follow thecontent guidelinesfor cards."
                },
                {
                    "type": "list",
                    "items": [
                        "To put long sections of information under a block that merchants can expand or collapse,use the collapsible component"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/components/video-thumbnail",
            "title": "Video thumbnail — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Video thumbnails are a clickable placeholder image. When clicked, it opens a video player within a modal or full screen. Use as a play button for a video player within a media card."
                },
                {
                    "type": "code",
                    "code": "import{MediaCard,VideoThumbnail}from'@shopify/polaris';importReactfrom'react';functionVideoThumbnailExample(){return(<MediaCardtitle=\"Turn your side-project into a business\"primaryAction={{content:'Learn more',onAction:()=>{},}}description={`In this course, you’ll learn how the Kular family turned their mom’s recipe book into a global business.`}popoverActions={[{content:'Dismiss',onAction:()=>{}}]}><VideoThumbnailvideoLength={80}thumbnailUrl=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"onClick={()=>console.log('clicked')}/></MediaCard>);}"
                },
                {
                    "type": "p",
                    "text": "URL source for thumbnail image. Length of video in seconds. Defaults to0. Video progress in seconds. Displays a progress bar at the bottom of the thumbnail. Only renders when videoLength is also set. Defaults to0. Indicate whether to allow video progress to be displayed. Defaults tofalse. Custom ARIA label for play button. Defaults to'Play video of length {human readable duration}'. Callback on click or keypress of thumbnail. Use to trigger render of the video player in your chosen format, for example within a modal or fullscreen container. Callback on mouse enter, focus, or touch start of thumbnail. Use to trigger video preload. Video thumbnails should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be used with a media card",
                        "Use an image that communicates the subject of the video",
                        "Include a video timestamp",
                        "Capture an image from the video to give a preview of the video content",
                        "Be cropped to a 16:9 aspect ratio",
                        "Be centered on the subject and avoid cropping of important details, like a person’s head"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The video thumbnail should be wrapped in themedia cardcomponent."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To present a small visual anchor for an object,use the thumbnail component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Images included in video thumbnails are implemented as decorative background images so that they’re skipped by screen readers. The play button is keyboard accessible and thearia-labelincludes a timestamp when thevideoLengthprop is set. For example, an 80 second video reads as “Play video of length 1 minute and 20 seconds”. If novideoLengthprop is provided, the default label reads “Play video”."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content",
            "title": "Content — Shopify Polaris",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Actionable languageMerchants use Shopify to get things done. Content should be written and structured to help them understand and take the most important actions.",
                        "Alternative textAlternative text (alt text) helps provide an inclusive experience for merchants who use screen readers.",
                        "Error messagesError messages can be scary. Make errors visible to merchants, easy to understand, and helpful.",
                        "Grammar and mechanicsThis guide is to help designers, developers, recruiters, UX-ers, product managers, support advisors, or anyone who writes public-facing text for Shopify.",
                        "Help contentHelp content is educational text that describes interactive elements or offers information about concepts in the UI.",
                        "Help documentationAfter you build an app or other integration, writing help documentation will show merchants how to use it.",
                        "Inclusive languageMake commerce better for everyone by writing inclusively.",
                        "Merchant-to-customer contentShopify creates content for different audiences. One of those audiences is merchants’ customers. A customer is a person or organization who interacts with a Shopify merchant or a merchant’s sales channel.",
                        "NamingThe names we give our products and features teach merchants how to use Shopify and how to find the things they need to run their business.",
                        "Product contentThoughtful, consistent interface content is a core element of a well-designed user experience.",
                        "Voice and toneLearn how to apply Shopify’s voice and choose the right tone, no matter what product, feature, or app you’re building."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/actionable-language",
            "title": "Actionable language — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Headings and subheadings are titles and subtitles that refer to sections of the interface. Headings and subheadings should be: Informative and descriptive:"
                },
                {
                    "type": "list",
                    "items": [
                        "Highlight the most important concept or piece of information for merchants",
                        "Help merchants understand what they’ll find in the section below"
                    ]
                },
                {
                    "type": "p",
                    "text": "Concise and scannable:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use simple, clear language",
                        "Keep headings to a single sentence",
                        "Avoid using punctuation such as periods, commas, or semicolons",
                        "Write in sentence case (capitalize the first word and proper nouns only)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Online store dashboard",
                        "Custom reports",
                        "Sell your products in person"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This is your online store dashboard",
                        "Custom Reports",
                        "Sell your products in person!"
                    ]
                },
                {
                    "type": "p",
                    "text": "Whether or not to use articles (“the,” “a,” “an”) in headings and subheadings depends on the type of message. For more conversational areas of the product, like Home cards, sell pages, and empty states, use articles. It makes the language more approachable and helps people to understand new, complex concepts."
                },
                {
                    "type": "list",
                    "items": [
                        "Secure your account with two-step authentication"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Two-step authentication"
                    ]
                },
                {
                    "type": "p",
                    "text": "For labels, titles, and microcopy, avoid articles to keep content short and actionable. This increases readability and encourages immediate action."
                },
                {
                    "type": "list",
                    "items": [
                        "Create collection"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create a collection"
                    ]
                },
                {
                    "type": "p",
                    "text": "Start sentences with imperative verbs when telling merchants what actions they can take (especially when introducing something new). When a merchant reads a sentence that starts with an imperative verb it should sound like they’re being instructed what to do. Don’t use permissive language like “you can.” Add your first product and see how it looks in your store."
                },
                {
                    "type": "list",
                    "items": [
                        "Products appear in your store after you add them.",
                        "Add your first product so you can see how it looks in your store."
                    ]
                },
                {
                    "type": "p",
                    "text": "Buttons need to be clear and predictable. Merchants should be able to anticipate what will happen when they select a button. Never mislead someone by mislabeling a button. Buttons should always lead with a strong verb that encourages action. To provide enough context to merchants, use the {verb} + {noun} content formula on buttons except in the case of common actions like “Done,” “Close,” “Cancel,” or “OK.”"
                },
                {
                    "type": "list",
                    "items": [
                        "Activate Apple Pay",
                        "Explore free themes",
                        "View shipping settings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Try Apple Pay",
                        "Free themes",
                        "Settings"
                    ]
                },
                {
                    "type": "p",
                    "text": "Always write button text in sentence case, which means the first word is capitalized and the rest are lowercase (unless a term is a proper noun)."
                },
                {
                    "type": "list",
                    "items": [
                        "Buy new domain"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Buy New Domain"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid unnecessary words and articles such as “the,” “an,” or “a.” Add menu item Add a menu item Links need to be clear and predictable. Merchants should be able to anticipate what will happen when they select a link. Never mislead someone by mislabeling a link."
                },
                {
                    "type": "list",
                    "items": [
                        "Get started with theUltimate Guide to Dropshipping."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Want to learn more about dropshipping?Click here."
                    ]
                },
                {
                    "type": "p",
                    "text": "Links should never use “click here” or “here” as link text. Links in full sentences shouldn’t link the entire sentence, only the text that describes where merchants go when they select the link. It’s better forinternationalizationto have only single terms or small parts of phrases linked. Linking a full phrase is problematic because the word order might change, which would break the link into two parts."
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid chargeback costs withShopify Protect.",
                        "Manage thechannelsyou use to sell products and services."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Learn more about Shopify Protect.",
                        "Manage the channelsyou use to sell products and services."
                    ]
                },
                {
                    "type": "p",
                    "text": "Links that aren’t in full sentences should use the {verb + noun} pattern and not be punctuated, with the exception of question marks."
                },
                {
                    "type": "list",
                    "items": [
                        "Learn more",
                        "Forgot password?"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Learn more.",
                        "Forgot password"
                    ]
                },
                {
                    "type": "p",
                    "text": "When linking out to documentation from help text in the admin, link the relevant key words. In general, don’t add another sentence starting with “Learn more...”, because it’s repetitive and takes up unnecessary space."
                },
                {
                    "type": "list",
                    "items": [
                        "This is aread-only environment variable. It can’t be edited or deleted."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This is a read-only environment variable. It can’t be edited or deleted. Learn more aboutread-only environment variables."
                    ]
                },
                {
                    "type": "p",
                    "text": "Only add a “Learn more...” sentence if the help text addresses more than one concept, each of which could be linked to their own help doc. In that situation, pick the most appropriate link and contextualize it with “Learn more...”."
                },
                {
                    "type": "list",
                    "items": [
                        "Storefront API tokens are unique per Hydrogen storefront but their permission scopes are shared by all Hydrogen storefronts. Learn more aboutStorefront API tokens."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Storefront API tokensare unique perHydrogen storefrontbut theirpermission scopesare shared across all Hydrogen storefronts."
                    ]
                },
                {
                    "type": "p",
                    "text": "Confirmations are presented for actions that can’t be undone or are difficult to undo. Confirmation messages should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Always give merchants the option to either confirm or cancel their action",
                        "Be used for a single, primary task",
                        "Keep body content to one line of text and not use more than two calls to action"
                    ]
                },
                {
                    "type": "p",
                    "text": "Confirmation titles should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Ask if merchants want to continue, using a concise {verb}+{noun} question",
                        "Be one sentence and avoid using punctuation, with the exception of question marks",
                        "Avoid articles (the, a, an) to keep content short and actionable",
                        "Be written in sentence case (the first word is capitalized, and the rest is lowercase)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discard unsaved changes?",
                        "Delete 2 collections?",
                        "Delete Dark Blue Tee?",
                        "Leave page with unsaved changes?"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discard?",
                        "Are you sure you want to delete?",
                        "Are you sure you want to delete Dark Blue Tee?",
                        "This page has unsaved changes are you sure you want to leave?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Confirmation body content should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly explain if the action is irreversible or difficult to undo, usingplain language.",
                        "Be concise: use only one line of text. Don’t start the sentence with “Are you sure?”"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This can’t be undone.",
                        "This will delete all edits since you last saved.",
                        "Leaving this page will delete all unsaved changes."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Are you sure you want to delete the variant Dark Blue Tee/Small/Silk? This action cannot be reversed.",
                        "If you discard changes, you’ll delete any edits you made since you last saved.",
                        "If you leave this page, all unsaved changes will be lost. Are you sure you want to leave this page?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Confirmation primary and secondary actions should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be clear and predictable: merchants should be able to anticipate what will happen when they click a button",
                        "Scannable: avoid unnecessary words and articles such as “the,” “an,” or “a”"
                    ]
                },
                {
                    "type": "p",
                    "text": "Since confirmation messages are placed in modals, the call to action in the title is in close context to the buttons. Because of this, the call to action text on the buttons doesn’t have to follow the {verb}+{noun} pattern. Instead, one word calls to action can be used, for example, [Cancel] [Delete]. Deletions Before merchants can delete objects like collections, transfers, products, and variants, we present them with a confirmation message that has two calls to action, one to [Cancel] and one to [Delete]. We keep it short and don’t use {verb}+{noun} button copy. Primary action:"
                },
                {
                    "type": "list",
                    "items": [
                        "Delete"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Remove",
                        "Erase",
                        "Discard"
                    ]
                },
                {
                    "type": "p",
                    "text": "Secondary action:"
                },
                {
                    "type": "list",
                    "items": [
                        "Cancel"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Discard"
                    ]
                },
                {
                    "type": "p",
                    "text": "Discarding changes while on a page Primary action:"
                },
                {
                    "type": "list",
                    "items": [
                        "Discard"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Cancel"
                    ]
                },
                {
                    "type": "p",
                    "text": "Secondary action:"
                },
                {
                    "type": "list",
                    "items": [
                        "Keep editing"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Go back",
                        "Cancel"
                    ]
                },
                {
                    "type": "p",
                    "text": "Leaving a page with unsaved changes Primary action:"
                },
                {
                    "type": "list",
                    "items": [
                        "Leave page"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Exit",
                        "Delete changes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Secondary action:"
                },
                {
                    "type": "list",
                    "items": [
                        "Stay"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Go back",
                        "Cancel",
                        "Discard",
                        "Keep editing"
                    ]
                },
                {
                    "type": "p",
                    "text": "In the same way that links should never say “click here,” avoid using directional language such as “above/below” or “right/left.” Directional language is confusing and unhelpful when spoken aloud by a screen reader. It creates challenges for internationalization (for example, right to left languages) and can conflict with mobile design patterns. Directional language often indicates a lack of visual or content hierarchy. Whenever possible, keep instructional copy and related actions close together so that directional language isn’t needed. Use “Save” when a change is saved immediately to a database and “Done” fordeferred saves. Use “Save” as the default for any action that saves immediately to a database. When merchants make changes on a page they’re sometimes presented with a context bar at the top. This context bar displays a status message on the left to indicate the state of the changes, like “Unsaved discount.” Since the status message provides context around the action being taken, the button doesn’t need to follow the common {verb} + {noun} content formula. For example, [Save] instead of [Save product]. In the context bar component, use the verb “Save”. Use the verb “Save” in the context bar"
                },
                {
                    "type": "list",
                    "items": [
                        "Done",
                        "Apply",
                        "Save discount"
                    ]
                },
                {
                    "type": "p",
                    "text": "Status messages in the context bar should be descriptive and follow the {adjective} + {noun} content formula."
                },
                {
                    "type": "list",
                    "items": [
                        "Unsaved discount",
                        "Unsaved product",
                        "Unsaved customer",
                        "Unsaved shipping zone"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Unsaved changes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “Save” in modals and sheets when saving directly to the database. Use the verb “Save” in modals and sheets"
                },
                {
                    "type": "list",
                    "items": [
                        "Edit",
                        "Done",
                        "Apply"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the {Save} + {noun} content formula when a save action doesn’t have the surrounding context of a modal or context bar. This applies to the save action at the bottom of pages. For example, the action at the bottom of the Create discount page uses [Save discount]:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create discount",
                        "Save",
                        "Done",
                        "Apply"
                    ]
                },
                {
                    "type": "p",
                    "text": "Sometimes, when merchants confirm a set of changes inside a modal or sheet, these changes are applied as unsaved changes to the current page. In other words, the changes made weren’t immediately saved to the database. When this happens, don’t use the verb “Save” as the call to action because it would be misleading. Use the adjective “Done” for deferred saves. When the modal or sheet closes, then merchants can save all of the changes they made. Most deferred saves happen when confirming changes in Add, Edit, Manage, and Select modals and sheets."
                },
                {
                    "type": "list",
                    "items": [
                        "Add",
                        "Edit",
                        "Manage",
                        "Select",
                        "Apply",
                        "Save"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the adjective “Done” for datepickers."
                },
                {
                    "type": "list",
                    "items": [
                        "Apply",
                        "Select",
                        "Save"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “Close” when merchants need to confirm they’ve read something, but aren’t required to legally accept terms of service before continuing. For example, use “Close” when presenting a security notification in a modal or sheet. Don't use \"OK\". \"OK\" is an exclamation, not an action. When merchants click the \"Close\" button, they’re not saying “OK”, they’re doing a specific action."
                },
                {
                    "type": "list",
                    "items": [
                        "OK",
                        "Ok",
                        "O.k.",
                        "Okay",
                        "Done",
                        "Accept",
                        "Continue"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “Accept” when terms of service require legal confirmation before merchants can continue. Accept"
                },
                {
                    "type": "list",
                    "items": [
                        "Ok",
                        "Done",
                        "Close",
                        "Continue"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the back arrow button as the call to action for modals and screens when:"
                },
                {
                    "type": "list",
                    "items": [
                        "the content is in a view-only state"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use “Close” as the call to action when there’s the option for merchants to:"
                },
                {
                    "type": "list",
                    "items": [
                        "make any changes to the modal or screen",
                        "confirm they’ve read something or accept terms of service (seeOK vs. accept)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Cancel",
                        "Exit",
                        "OK"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use “Cancel” as the option for merchants to back out of any changes made on a page, modal, or sheet. When the cancel button is pressed, changes automatically get discarded. “Cancel” is often paired with “Save” and “Done” actions (and is always placed to the left). Use the verb “Cancel” as the action for merchants to back out of changes"
                },
                {
                    "type": "list",
                    "items": [
                        "Exit",
                        "Close",
                        "Done"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “select”:"
                },
                {
                    "type": "list",
                    "items": [
                        "When telling merchants to pick something from a limited number of options of the same kind",
                        "When merchants need to make an easy or obvious decision that doesn’t require deep reflection or analysis",
                        "For defined lists and dropdown menus",
                        "When merchants are given the option to pick from a list of already existing objects, like products"
                    ]
                },
                {
                    "type": "p",
                    "text": "Pair Select modals and screens with the “Done” call to action."
                },
                {
                    "type": "list",
                    "items": [
                        "Select your country of residence",
                        "Select image",
                        "Select countries"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Select a pricing plan.",
                        "Choose countries"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “choose” when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Encouraging merchants to make a decision that is more subjective, strategic, emotional, or open-ended",
                        "Merchants have to pick from a large inventory of items, like themes, or options that require strategic decision making, like pricing plans"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Choose a theme",
                        "Choose a pricing plan."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Select a theme",
                        "Select a pricing plan",
                        "Choose a province.",
                        "Pick a province.",
                        "Pick a pricing plan."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “edit” when you can change the input of a field (letters, numbers, properties). Place as link text next to the field or area that is being edited. There’s no need for a noun unless it’s unclear what’s being edited."
                },
                {
                    "type": "list",
                    "items": [
                        "In this example, “Edit” is the correct call to action because it opens a modal where merchants update customer contact informationHere are the editing actions that become available after the “Edit” button is selected",
                        "Edit an individual blog post"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use “Edit” if multiple actions can be taken after. “Manage” is more suitable.",
                        "Modify"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “manage” at a higher level to convey that multiple actions can be done, or sections and settings can be updated. Pair this verb with a noun if it’s in a button or if it’s unclear what is being managed."
                },
                {
                    "type": "list",
                    "items": [
                        "In this example, “Manage” is the correct call to action because it opens a modal where merchants can select channels to display their productsHere are the options that become available after the “Manage” button is selected",
                        "Manage multiple blog posts and comments"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Edit",
                        "Modify"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “change” when merchants can replace an option, but not edit it. For example, they can change an image or theme, but the action doesn’t include editing its properties. Place as link text next to the field or area that is being changed. There’s no need for a noun unless it’s unclear what is being changed."
                },
                {
                    "type": "list",
                    "items": [
                        "Change imageHere are the options that become available after the “Change” button is selected"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use the verb “change” if a selection must be made between only two options"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “switch” when it’s important for merchants to know what they’re switching between, like users, accounts, locations, or modes. When the switch happens, the previous option is turned off, logged out, or deactivated. Always pair with a noun to prevent confusion."
                },
                {
                    "type": "list",
                    "items": [
                        "",
                        ""
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Switch images"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “create” when you’re encouraging merchants to generate something from scratch, like a collection."
                },
                {
                    "type": "list",
                    "items": [
                        "Create order",
                        "Create collection",
                        "Create discount"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add order",
                        "Add collection",
                        "Add discount"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “add” when you’re encouraging merchants to bring something that already exists into Shopify, like a product."
                },
                {
                    "type": "list",
                    "items": [
                        "Add product",
                        "Add customer"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create product",
                        "Create customer"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “view” when you’re encouraging merchants to go to a specific page or section for more details, or to reveal more information. Use “view” in buttons, calls to action, and link text."
                },
                {
                    "type": "list",
                    "items": [
                        "View invoices",
                        "View all {x}",
                        "View details",
                        "View report",
                        "Try clearing your filters to view all results."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "See invoices",
                        "See all {x}",
                        "See details",
                        "See report"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “see” in more general, conversational descriptions without a specific call to action."
                },
                {
                    "type": "list",
                    "items": [
                        "Add your first product and see how it looks on your store.",
                        "Customers will see this name at checkout."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add your first product and view how it looks on your store.",
                        "Customers will view this name at checkout."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the verb “need” when you’re telling merchants something they’re required to do or should do. To buy a shipping label, you need to enter the total weight of your shipment, including packaging. To buy a shipping label, you must enter the total weight of your shipment, including packaging. Use “export” as the call to action when merchants needs to transfer data from Shopify and convert it into a different format."
                },
                {
                    "type": "list",
                    "items": [
                        "Export CSV file"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Download CSV file"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use “download” as the call to action when merchants need to copy data (of the same format) from Shopify to a computer system."
                },
                {
                    "type": "list",
                    "items": [
                        "Download shipping label",
                        "Download PDF"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Export shipping label",
                        "Export PDF"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use “import” as the call to action when merchants need to transfer data and convert it into a different format so it can be used in Shopify."
                },
                {
                    "type": "list",
                    "items": [
                        "Import CSV file"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Download CSV file"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use “upload” as the call to action when merchants need to copy data of the same format from a computer system into Shopify."
                },
                {
                    "type": "list",
                    "items": [
                        "Upload image",
                        "Upload file"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Upload CSV file"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/alternative-text",
            "title": "Alternative text — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Alt text is a text replacement for an image. Generally, it is represented by the alt HTML element attributealt=\"alt text\". Often used by people who are blind or have low vision, screen readers announce alt text to explain images. Alt text will also display when images fail to download (for example, there’s an unstable or low-bandwidth network connection). Alt text should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Help visitors navigate the site",
                        "Provide an inclusive experience",
                        "Be as short and specific as possible",
                        "Be contextual to the intended message"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use alt text when the image conveys valuable information, such as the ability to play a demo video. Even if an image isn’t conveying meaningful information, don’t leave an<img>tag without an alt text element. The screen reader may try to read the filename and create a negative experience. Instead, let the screen reader know to ignore the image by setting the alt to an empty string. All<img>tags need an alt text attribute, even if it’s empty. For example, set an empty alt text attribute using<img alt=\"\" />."
                },
                {
                    "type": "code",
                    "code": "<VideoThumbnailaccessibilityLabel=\"Watch how-to video on Shopify reports.\"/><Thumbnailalt=\"Black choker necklace\"/><IconaccessibilityLabel=\"\"/>"
                },
                {
                    "type": "code",
                    "code": "<VideoThumbnailaccessibilityLabel=\"Screenshot 2022-11-07 at 3.05.55 PM\"/><Thumbnailalt=\"Sneaker.png\"/><IconaccessibilityLabel=\"IMG_1206.heic\"/>"
                },
                {
                    "type": "p",
                    "text": "Always write alt text in plain text. The average rate of listening to a screen reader is 3x slower than that of an average visual reader. Many screen reader users listen at fast speeds to make up time. When writing alt text, be as brief as possible."
                },
                {
                    "type": "list",
                    "items": [
                        "Be concise. Think about how to write for a small amount of space or a character limit.",
                        "Use simple words. If you’re stuck on how to replace a complicated word, check thisA-Z list of alternative wordsor theseplain language tips. Another good resource is theHemingway editor.",
                        "Avoid needless words. If a phrase is still understandable without a specific word, remove it.",
                        "Remove articles like \"a, an, one of,\" etc. whenever possible. Alt text has different grammatical rules. \"Filler words\" that assist understanding in speech can get in the way in alt text.",
                        "Avoid using \"image of\" or \"photograph\" unless the type of image is relevant to the context. Screenreaders already announce images with use of the<img>attribute.",
                        "Avoid punctuation like!!and emoji like 🥰. Screen readers will announce these as \"exclamation point, exclamation point\" and \"smiling face with three hearts.\" Use other punctuation marks as you regularly would, such as commas, or periods at the ends of the sentences. The screen-reader will react with a brief pause.",
                        "Only use acronyms you are confident your audience will understand. If using an acronym, write it with spaces in-between, like \"Y M C A.\" Otherwise, most screen readers will try to read the acronym as a word.",
                        "Write in theactive voicewhen possible."
                    ]
                },
                {
                    "type": "p",
                    "text": "It can be tricky to decide whether an image needs alt text or should be ignored by screen readers. Ask yourself:"
                },
                {
                    "type": "list",
                    "items": [
                        "Is it interactive?",
                        "Does this image convey information that isn’t given elsewhere?",
                        "Does the context of the image communicate anything?"
                    ]
                },
                {
                    "type": "p",
                    "text": "The same image may have different alt text depending on what it conveys. For example, if you’re using a photo of sneakers purely decoratively as the hero image for a blog, tell screen readers to skip it. If you’re using the photo as an example of a certain type of sneaker mentioned in the blog, then convey relevant information about the image. For example, \"High-top sneaker with gum soles.\" But if you’re using this image in a product listing, ensure shoppers know the important details of what they are buying, such as \"Converse Chuck Taylor All Star Classic Black.\" Iconsthat could be misinterpreted need an explanation, so use the PolarisaccessibilityLabelprop or thearia-labelHTML attribute. For interactive icons, don’t describe the image (\"magnifying glass\"). Instead, describe the action (\"search\")."
                },
                {
                    "type": "code",
                    "code": "<ButtonaccessibilityLabel=\"search\"onClick={()=>search()}><Iconsource={SearchIcon}accessibilityLabel=\"\"/></Button>"
                },
                {
                    "type": "p",
                    "text": "Writeclear and predictablelink text. If space constraints require you to write calls to action that are unclear where they take you (like \"Learn more\" and \"Apply now\"), give further indication of where merchants will be sent after they select."
                },
                {
                    "type": "code",
                    "code": "<Linkurl=\"https://www.shopify.com/protect\"accessibilityLabel=\"Learn more about Fraud Protect\">Learn more</Link>"
                },
                {
                    "type": "p",
                    "text": "Images with more complexity need some consideration. For example, groups of image elements can be described by a single text, rather than announcing each individual element."
                },
                {
                    "type": "code",
                    "code": "<divrole=\"img\"aria-labelledby=\"star_id\"><LegacyStack><Iconsource={StarFilledIcon}alt=\"\"><Iconsource={StarFilledIcon}alt=\"\"><Iconsource={StarFilledIcon}alt=\"\"><Iconsource={StarIcon}alt=\"\"><Iconsource={StarIcon}alt=\"\"></LegacyStack></div><divid=\"star_id\">3 of 5 stars</div>"
                },
                {
                    "type": "p",
                    "text": "For more guidance, visit the W3C page oncomplex images. Websites can sometimes be noisy for a screen reader user. While alt text is vital for an equal experience, the briefer you are, the happier your screen reader users will be. Avoid repetition and unnecessary announcements by settingalt=\"\"in the scenarios that don’t need it. Progress bars often present visual information that can also be found in the text, such as \"Loading 53%.\" Continuously announcing that change is generally considered annoying. This is a broad category covering elements that are purely for aesthetic reasons, such as empty state illustrations, dividers, or hero images. If you’re unsure whether valuable information is lost, consider testing with people who regularly use a screen reader. Avoid adding repetitive alt text if an image has a caption that accurately reflects the information in the image, for example a photo of George Washington that is captioned \"George Washington.\" If the image is presenting information that isn’t in the caption, consider adding it to the caption text. Only if this isn’t possible or appropriate should you add that information as alt text. If the image has a longer description in the caption or following paragraph text, you can associate this description with thearia-describedbyattribute. Images that would not be visible to a sighted user should not be announced to screen-readers. Not only do we strive to make interactions with our products pleasant, but we want the listening experience for merchants to be positive, too. Always state the language of the page content with the HTML lang attribute. This will ensure pronunciation and translation tools will know what rules to use. If certain phrases are in a different language than the main content, you can also use the lang attribute in a<p>tag or similar. Here’s astandard list of language attributesthat you can use in your document."
                },
                {
                    "type": "code",
                    "code": "<htmllang=\"en\"></html><htmllang=\"de\"></html><htmllang=\"pt-BR\"></html>"
                },
                {
                    "type": "code",
                    "code": "<html></html>"
                },
                {
                    "type": "p",
                    "text": "Besides screen readers, search engines also read alt text. Alt text helps increase image ranking results and site searchability outside of Shopify’s admin. When accounting for SEO in your alt text:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use logical keywords (the words that people search for).",
                        "Include relevant listing details, like if it is a limited edition or unique colorway.",
                        "Describe the image, not what you want your audience to think.",
                        "Don’t repeat your site name or brand name. Search engines will already associate your site with your images.",
                        "Avoid reducing the relevance or clarity of the alt text just to insert a keyword.",
                        "Never include unassociated lists of key words in the alt text. Instead, place those in yourmeta description."
                    ]
                },
                {
                    "type": "code",
                    "code": "<Thumbnailalt=\"1460 Boot Limited Edition Oxblood Women's\"/>"
                },
                {
                    "type": "code",
                    "code": "<Thumbnailalt=\"shoes sneakers womens footwear girls sizes soles heels boots\"/><Thumbnailalt=\"Cool shoes for a night out or hot date\"/>"
                },
                {
                    "type": "p",
                    "text": "For detailed guidance on coding and alt text standards, visit theWeb Content Accessibility Guidelines (WCAG)orWebAIM Alternative Text Guidelines. You can also read some moreconsiderations when writing alt textfrom our accessibility specialist. The following Polaris components include props to set alt text or aria labels, along with specific guidance for their use:"
                },
                {
                    "type": "list",
                    "items": [
                        "Avatar",
                        "Button",
                        "Icon",
                        "Link",
                        "Thumbnail",
                        "Video Thumbnail"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/error-messages",
            "title": "Error messages — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Error messages should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tell merchants what happened. If there’s a solution, explain it. If possible, offer a one-click fix with a button. If there’sno solution, give troubleshooting instructions.",
                        "Be placed close to the source of the problem.",
                        "Communicate severity using the appropriatecolorandtone of voice.",
                        "Useplain language.",
                        "Be specific. For example, use precisenumbers and dates.",
                        "Be brief."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good design can reduce the need for error messages by preventing them in the first place. Think about the scope of the error when selecting a message type. Is something wrong with the entire application, with the entire current screen, or with a specific element on the screen? If the cause of the error is visible and the error just happened, show the error message immediately and as close to the source of the problem as possible. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to a text field and feedback can be provided while merchants are typing"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "The form input is valid, but you want to warn merchants of a consequence they might not expect"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to the entire page",
                        "The error is far down the page and it’s critical merchants see the message",
                        "Multiple validation errors on the page need to be summarized",
                        "The error was delayed and it’s okay to inform merchants of the problem when they return to the page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to a single card within the page, a single section within a card, or a modal",
                        "You need to direct merchants to a page with multiple sections and you want to visually call out the section with the error"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A message placed within or next to a component can help merchants make better decisions about routine tasks"
                    ]
                },
                {
                    "type": "p",
                    "text": "Note: Home notifications should rarely be used for errors. Always attempt to display an error close to the source of the problem. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A high-priority task must be completed immediately to continue using Shopify or avoid losing money",
                        "A feature doesn’t have a dedicated details page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A server error is preventing an entire page from being displayed, like with 400 or 500-series server errors",
                        "Account permissions are preventing someone from accessing Shopify"
                    ]
                },
                {
                    "type": "p",
                    "text": "Red is the scariest error color. Only use red for critical messages that merchants need to deal with immediately to avoid harm to their business. For example, if merchants don’t act on the message right away, they might lose money or their store might be suspended. Yellow error messages still demand attention, but are more appropriate for messages that are part of a daily workflow. Use critical messages to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Bring attention to urgent tasks. If not dealt with immediately, merchants' businesses will be noticeably impacted, like an account being suspended or money being lost."
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples of critical message types:"
                },
                {
                    "type": "list",
                    "items": [
                        "Update a payment method expiry date",
                        "Unsuspend an account",
                        "Review an order for fraud",
                        "Fix a problem that’s preventing payment from being processed"
                    ]
                },
                {
                    "type": "p",
                    "text": "The one exception to using red is in form validation errors because this is a standard convention merchants are used to seeing outside of Shopify. Use warning messages to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Help merchants fix issues so they can complete a common workflow or continue to the next step",
                        "Notify merchants about upcoming expirations or pending requests that, if not dealt with soon, could lead to problems in the future"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples of warning message types:"
                },
                {
                    "type": "list",
                    "items": [
                        "Fix a problem before proceeding to the next step.",
                        "Fix a problem at some point in a common workflow.",
                        "There’s a pending request.",
                        "There’s an upcoming expiration.",
                        "Changing a setting might have unintended consequences. Seesettings warning."
                    ]
                },
                {
                    "type": "p",
                    "text": "Although error toast is still available, we discourage its use. Toast messages are too short to adequately explain what went wrong and how to fix the problem. Because the toast component appears at the bottom of the screen and disappears after 3 seconds, it can easily be missed. Reserve toast for errors not caused by merchants, like a connection issue. Always try to use a banner to inform merchants about persistent errors. Modal dialogs are a good way to ask merchants to confirm a destructive action, but not to tell them an error has occurred.\nModals block merchants until a decision is made, which is likely to make merchants feel pressured. Most errors don’t need to block access to the rest of the feature. Home notification errors are for high-priority tasks that merchants must complete immediately to continue using Shopify or prevent\na negative impact to their business, like losing money.\nOne exception is errors for features that don‘t have a dedicated details page. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A text field has formatting requirements. Use this pattern to enhancevalidation on form submission."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "It takesmore than a full secondto validate input and display a message. If there’s a lag before a validation message appears, merchants might shift their attention and miss the error.\nEither find a way to improve the validation speed, or rely on thevalidation after form submission.",
                        "The field is empty. Merchants might tab through a form before filling it out, and errors on empty fields can cause confusion and frustration."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Text field"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use two or three words to explain what’s wrong or what’s needed to fix the problem.",
                        "Avoid using the word \"invalid\" to define an error. When appropriate, use \"not valid\" instead.",
                        "Since the message is directly below the text field, the copy only needs to explain why the error happened. Optionally, the message can clarify what to do next or offer a one-click fix."
                    ]
                },
                {
                    "type": "p",
                    "text": "Usage Do an initial validation check as soon as merchants finish typing in the field. Merchants can be considered to be finished typing only when keyboard focus moves away from the field and there is at least one character in the field. This helps avoid marking the field as not valid before merchants are really done typing. If the validation check fails, show an error message below the field. Once a field has an error, complete validation checks after each keystroke. Remove the error message as soon as the input becomes valid so merchants can immediately tell they fixed the issue. If the validation process is less than a second but not instant, show a spinner on the field to indicate validation progress. Validate on submit is triggered when merchants press the form’s submit button. The submit button is often [Save], but can be another call to action. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Not all fields can be validated while merchants are typing. When a form is used for saving data, always validate on submit and validate text fields while typing. For example, if merchants never interact with a required text field, there’s no change to mark it as not valid until they press the submit button. The same applies to form controls other than text fields, such as radio buttons, and selects."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A form doesn’t have specific validation requirements, or the form doesn’t save data. For example, a search form that returns no results should display an empty state, rather than a validation error."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Banner"
                    ]
                },
                {
                    "type": "p",
                    "text": "And one or more of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "[Text field]",
                        "[Select]",
                        "[Choice list]",
                        "[Checkbox]",
                        "[Radio button]"
                    ]
                },
                {
                    "type": "p",
                    "text": "Banner heading"
                },
                {
                    "type": "list",
                    "items": [
                        "Use a colon to introduce the list.",
                        "Make the heading instructional. Don’t just call out that there are {x} number of errors."
                    ]
                },
                {
                    "type": "p",
                    "text": "Banner body text"
                },
                {
                    "type": "list",
                    "items": [
                        "Use thelist componentto itemize the errors",
                        "Start each list item with the label of the field that isn't valid, and describe the action needed to fix it"
                    ]
                },
                {
                    "type": "p",
                    "text": "Individual field error messages:"
                },
                {
                    "type": "list",
                    "items": [
                        "See content guidelines forvalidation while typing"
                    ]
                },
                {
                    "type": "p",
                    "text": "Rather than pointing out that there are {x} number of errors, be more descriptive. Explain that in order to save or continue, {x} number of fields need to be changed. For the bullet point instructions, see if you can word them to be more actionable, for example, “Add a discount code,“ instead of “Discount can’t be blank.“ Usage Always indicate submission progress. If the fields aren't valid, don’t clear or alter them on behalf of merchants during validation. If the form submission has a single error:"
                },
                {
                    "type": "list",
                    "items": [
                        "Move scroll position to the field that is not valid",
                        "Focus the field",
                        "Show an error message below the field"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the form submission has multiple errors:"
                },
                {
                    "type": "list",
                    "items": [
                        "Move scroll position to the top of the screen",
                        "Use a banner to display a summary of all the errors",
                        "Show an error message below each field that is not valid so merchants can scroll through and make corrections"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use:"
                },
                {
                    "type": "list",
                    "items": [
                        "To help merchants prevent potential mistakes",
                        "When form input is valid, but you want to warn merchants of a consequence they might not be expecting"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use:"
                },
                {
                    "type": "list",
                    "items": [
                        "For actual error states"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tip: Explore ways to prevent the warning message from showing at all. Look for opportunities to add help text or other contextual information to surface or highlight potential risks or consequences of taking, or not taking, the action."
                },
                {
                    "type": "list",
                    "items": [
                        "Bannerwithout title"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Since the warning message is in close context to the action that triggered the warning, it should be short",
                        "Explain the risks or consequences of an action that’s just been taken",
                        "These messages don’t have to start with actionable language, like, “Change currency.” Here are some optionsStart with the word “This” and explain the consequence, for example, “This will affect inventory prices”Start by noting the action, then explain the consequence, “Changing {x} will affect {y}”",
                        "Start with the word “This” and explain the consequence, for example, “This will affect inventory prices”",
                        "Start by noting the action, then explain the consequence, “Changing {x} will affect {y}”",
                        "If available, link to a resource where merchants can learn more"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to the entire screen",
                        "The error is far down the page and it’s critical that they see the message",
                        "A form was submitted with fields that are not valid",
                        "If the error was delayed, for example, an action was taken and the error doesn’t immediately appear in context"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "It’s possible to place the banner [in context] because the source of the error is in view and the event that triggered the action just happened"
                    ]
                },
                {
                    "type": "p",
                    "text": "For multiple error guidelines, seevalidate on submit Page-level banner errors should explain:"
                },
                {
                    "type": "list",
                    "items": [
                        "Where the error happened",
                        "What happened",
                        "Why it happened",
                        "What to do next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Unable to process payment for checkout with negative taxes."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Banner"
                    ]
                },
                {
                    "type": "p",
                    "text": "Headings should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly state the problem",
                        "Not use punctuation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Body content should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Explain how to solve the problem.",
                        "Use actionable language like “do x.” Don‘t use permissive language, like “you can x.” Be concise: no longer than 2 sentences.",
                        "Use periods."
                    ]
                },
                {
                    "type": "p",
                    "text": "Calls to action should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be action-led (verb+noun format)",
                        "Aim for a one-click fix. If the error can be fixed via a single button or menu, offer that action directly in the error message.",
                        "Open a dedicated error-correction view for more complex problems such as reviewing a risky order or editing an unverified customer address.",
                        "Provide a link to documentation for information that may be valuable but can’t fit in a brief error message."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Merchants are engaged in a task flow and you want to warn them about potential issues with the task at hand, or inform them something has gone wrong",
                        "Directing merchants to a page with multiple sections and you want to visibly call out the section with the error"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to the entire screen.",
                        "The error is far down the page and it’s critical that merchants see the message.",
                        "If the error was delayed. For example, an action was taken and the error doesn’t immediately appear in context. In these cases, use thepage-level banner"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Banner"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Without title"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The more contextual the message, the less you need to say, so go straight to explaining what happened and how to fix",
                        "Keep to one sentence",
                        "Contextual banners don’t have titles",
                        "Try to add a next step, whether in a button or link",
                        "Use when there is more than one call to action"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Items in a list are in a noteworthy state that you want to make merchants aware of, like a status, or piece of information (like a high risk order) that’s directly relevant to the information it’s connected to"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example:"
                },
                {
                    "type": "list",
                    "items": [
                        "High risk order"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "The source of the problem is an entire card or page"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Exception list"
                    ]
                },
                {
                    "type": "p",
                    "text": "Variant"
                },
                {
                    "type": "list",
                    "items": [
                        "Status: critical or warning"
                    ]
                },
                {
                    "type": "p",
                    "text": "Content should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Highlight an exceptional state that encourages clicking on the list item",
                        "Pair content with a warning or error icon",
                        "Always lead with what went wrong",
                        "A description is required",
                        "A title is optional",
                        "Links are optional but not common because the list item is actionable",
                        "Be concise"
                    ]
                },
                {
                    "type": "p",
                    "text": "Home notifications are primarily used to prevent merchants from losing money or help them continue using Shopify if they don’t act on the error message instructions immediately. Use for:"
                },
                {
                    "type": "list",
                    "items": [
                        "High-priority tasks that must be completed immediately to continue using\nShopify or avoid losing money.",
                        "Important enough tasks that we wouldn’t want merchants to navigate to another place in Shopify to find it, or stumble upon while completing another task.",
                        "Errors for features that don’t have a dedicated details page. For example, before\nShopify Capital had a details page, related status messages were temporarily surfaced in Home."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tips or advice",
                        "Positive feedback",
                        "Confirmation messages",
                        "New feature announcements",
                        "Status messages, other than those for Shopify Capital",
                        "Messages that can be displayed in context",
                        "Error messages that should be displayed in context",
                        "Task-related errors like a problem with saving a page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Warning home notifications are pre-emptive. They let merchants know that their finances will be impacted if action isn’t taken in a couple days or more, or that an action can be taken to make money sooner."
                },
                {
                    "type": "list",
                    "items": [
                        "Financing request is pending",
                        "Warn about upcoming expiration",
                        "Pending status, like with Shopify Capital application status"
                    ]
                },
                {
                    "type": "p",
                    "text": "Critical home notifications inform merchants of issues that:"
                },
                {
                    "type": "list",
                    "items": [
                        "Currently impact their finances",
                        "Will have an impact on their finances if action isn’t taken immediately",
                        "Prevent the normal operation of their business or account"
                    ]
                },
                {
                    "type": "p",
                    "text": "Critical home notifications can be used for these message types:"
                },
                {
                    "type": "list",
                    "items": [
                        "Trial expired",
                        "Domain expired",
                        "Credit card expired",
                        "Account is suspended",
                        "Shopify Payment payouts on hold",
                        "Payment processing issues",
                        "Payment authorizations expiring that day"
                    ]
                },
                {
                    "type": "p",
                    "text": "Sometimes the admin can’t be displayed due to a network issue, browser limitation, connection problem, or server issue. 400 and 500 series errors fall in this category. In these cases, always explain what went wrong and provide merchants with a troubleshooting step, like refreshing the page. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A page or the entire admin can’t be displayed"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "The error can be placed in context, close to the source of the problem"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use internal language in error messages and avoid using question formats."
                },
                {
                    "type": "list",
                    "items": [
                        "Empty state"
                    ]
                },
                {
                    "type": "p",
                    "text": "Headings should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Heading should explain what went wrong",
                        "Body should help merchants troubleshoot the problem",
                        "Call to action should provide the most probable fix, like reloading the page, or going to the previous page or Shopify Home"
                    ]
                },
                {
                    "type": "p",
                    "text": "When a service issue occurs in Shopify or is caused by a third party, we don’t always have a solution to offer to merchants. In these cases, always explain what went wrong so they can attempt to troubleshoot. If available, provide them with a troubleshooting step, like refreshing the page or returning at a later time. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Merchants are being denied access to a page or the entire adminSee admin unavailable errors",
                        "A third party issue is causing a disruption to merchants’ workflows"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "There’s literally any solution we can offer to merchants"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use the “Something went wrong. Please try again in a few minutes.” message when there’s any option to offer more context."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This error message is a last resort: \"Something went wrong. Please try again in\na few minutes.\""
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "An error occurred",
                        "1 error",
                        "Invalid"
                    ]
                },
                {
                    "type": "p",
                    "text": "These content guidelines are based on common copy mistakes. Avoid sounding overly apologetic, too technical, or hyperbolic. Keep Shopify out of the conversation unless Shopify was the cause of the error. Don’t downplay the error by telling merchants not to worry or by adding humor to a negative situation. Avoid the word “please” so it’s not overused throughout the admin. Don’t downplay serious problems."
                },
                {
                    "type": "list",
                    "items": [
                        "Some of today’s sales data isn’t updated yet. This will be fixed soon. Your data is safe, and your actual sales are not affected."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Today’s sales datamightnot be accurate, butplease don’t worry—it’s just temporary."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use scary, technical words in error messages."
                },
                {
                    "type": "list",
                    "items": [
                        "Product weight can’t be negative. Change the product weight to be 0 or higher and try again."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "ErrorLine items gramsmust be greater than or equal to 0."
                    ]
                },
                {
                    "type": "p",
                    "text": "Error messages are not the place for hyperbole or injecting personality."
                },
                {
                    "type": "list",
                    "items": [
                        "High risk of fraud detected"
                    ]
                },
                {
                    "type": "p",
                    "text": "Before fulfilling this order or capturing payment, review the Risk Analysis and determine if this order is fraudulent."
                },
                {
                    "type": "list",
                    "items": [
                        "Uh oh! High risk of fraud detected"
                    ]
                },
                {
                    "type": "p",
                    "text": "Looks like there’s a high fraud risk with this order. Better review the Risk\nAnalysis to make sure the order is safe! Don’t use internal Shopify terms. Only include the information merchants need."
                },
                {
                    "type": "list",
                    "items": [
                        "There’s a problem loading this page"
                    ]
                },
                {
                    "type": "p",
                    "text": "There’s a technical problem with Shopify that has prevented this page from loading. Try reloading this page or going to another page in Shopify. If that doesn’t work, visit our status page for updates and try again later."
                },
                {
                    "type": "list",
                    "items": [
                        "There’s a technical problem with Shopify that has prevented this page from loading.Our operation engineers are aware of this problem and are working hard to get it solved."
                    ]
                },
                {
                    "type": "p",
                    "text": "Keep Shopify out of the conversation. Focus on the information merchants need to complete their task efficiently."
                },
                {
                    "type": "list",
                    "items": [
                        "Before you can view earnings from your store, you need to complete your account setup. [Complete account setup]"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Beforewecan provide you with earnings from your store,weneed some additional information. [Complete account setup]"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/grammar-and-mechanics",
            "title": "Grammar and mechanics — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "You should (almost) always write in the active voice:"
                },
                {
                    "type": "list",
                    "items": [
                        "Subject (person/thing acting) verb (the action) object (receives the action)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the active voice if merchants need to do something. It should be clear that the subject is the one doing the action. Add details to the product Details were added to the product To tell if you’re using the passive voice, look out for the following signs:"
                },
                {
                    "type": "list",
                    "items": [
                        "When the object comes before the subject (“the item was purchased by the customer”)",
                        "Past tense verbs (“was added”, “was created\")",
                        "Forms of the verb “to be” (“was”, “is”, “were”)"
                    ]
                },
                {
                    "type": "p",
                    "text": "You should almost always write in the active voice, but here’s when to use the passive voice:"
                },
                {
                    "type": "list",
                    "items": [
                        "To avoid referring to yourself or Shopify",
                        "To make it clear that you didn’t personally take an action or make a decision",
                        "If the object (thing having action done to it) is more important than the subject (person doing the thing)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Invoices are created monthly and emailed tomarki.yeung@nomail.com. Shopify creates and emails your invoices monthly tosimran.robichaud@nomail.com. Contractions are abbreviated words, such as \"can't\", \"aren't\", and \"you're\", and help set a light and casual tone. While you should use contractions in most cases, avoid contracting verbs that sound awkward when you say them out loud, or have been phased out of modern day speech."
                },
                {
                    "type": "list",
                    "items": [
                        "You can’t have products with negative weights",
                        "Your products don’t have weights",
                        "You’re all set up",
                        "This product doesn’t require shipping",
                        "The customer name shouldn’t contain numbers",
                        "It’s a good time to plan your Black Friday sale",
                        "An error occurred and your changes couldn’t be saved",
                        "I’m Kit, your digital marketing assistant",
                        "This transfer hasn’t been received",
                        "You haven’t connected your account",
                        "You’ve exceeded 10 password attempts"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "That’ll make sure you are all set up",
                        "It would’ve been possible if you’d installed the latest updates",
                        "The set up was not complete, but this’ll do",
                        "There’re 10 products in this collection",
                        "Your product mustn’t be more than 20kgs",
                        "This product needn’t be shipped",
                        "There are 3 visitors who’ve viewed this product",
                        "You gotta set up Shopify Payments to use Shopify Capital",
                        "It’d be a good idea to place an ad this weekend"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use words and language that our merchants use. Avoid jargon or technical terminology. Make sure each sentence has a single focus and keep them short. Aim for a Grade 7 reading level."
                },
                {
                    "type": "list",
                    "items": [
                        "We’ve made some changes to improve your store’s security.",
                        "These products aren’t getting a lot of views, but visitors are adding them to their carts."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Your SSL certificates were activated.",
                        "These are your less popular products with the highest add-to-cart conversion."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use sentence case for all headings:"
                },
                {
                    "type": "list",
                    "items": [
                        "Capitalize the first word of a heading",
                        "Capitalize proper or trademarked nouns (names of products, countries, or people)",
                        "Lowercase for everything else"
                    ]
                },
                {
                    "type": "p",
                    "text": "Create purchase order Create Purchase Order In general, if a feature or product isn’t unique to Shopify, such as blogs, navigation, or pages, then don’t capitalize it. If it’s unique to Shopify and marketable as its own product, such as Shopify Payments or Frenzy, then capitalize it."
                },
                {
                    "type": "list",
                    "items": [
                        "blogs",
                        "navigation",
                        "Shopify Payments"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Pages",
                        "shopify app store",
                        "shopify balance"
                    ]
                },
                {
                    "type": "p",
                    "text": "Respect the usage guidelines of any third-party intellectual property. For example, in US communications, Apple Pay requires you to include the trademark symbol (™) the first time Apple Pay appears in body copy. Review the third party’s brand usage guidelines to make sure you're using the company’s name and logo correctly. Job titles should be capitalized when they come before or after a person’s name. When referring to a job title without referencing a name, don’t capitalize the job title."
                },
                {
                    "type": "list",
                    "items": [
                        "Content Strategist Jane Smith",
                        "Jane Smith, Content Strategist",
                        "Jane Smith is a content strategist.",
                        "The content strategist designed the information architecture."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "content strategist Jane Smith",
                        "Jane Smith, content strategist",
                        "Jane Smith is a Content Strategist.",
                        "The Content Strategist redesigned the information architecture."
                    ]
                },
                {
                    "type": "p",
                    "text": "The first letter following a slash shouldn’t be capitalized. ZIP/postal code required ZIP/Postal code required Review the content guidelines forheadings and subheadingsin the actionable language section. Use a bulleted list when items are related but sequence or priority doesn’t matter. Introduce the list with a full sentence and a colon. Capitalize the first word of the bullet. Using Shopify Payments in your store provides the following benefits:"
                },
                {
                    "type": "list",
                    "items": [
                        "Avoids the hassle of setting up a third-party payment gateway",
                        "Tracks your payout schedule from the Shopify admin",
                        "Minimizes lost sales from chargebacks"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Shopify payments to"
                },
                {
                    "type": "list",
                    "items": [
                        "avoid the hassle of setting up a gateway,",
                        "track pending payout schedule,",
                        "minimize lost sales from chargebacks. And eliminate PCI fees"
                    ]
                },
                {
                    "type": "p",
                    "text": "If at least one of the bullet points requires a period due to having two sentences, then include punctuation on all the bullets. Avoid lists that have both single words and sentences as bullet points. You can add a custom domain to your store in the following ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Buying the domain directly though your Shopify store.",
                        "Buying the domain through a third-party provider and then pointing it to your Shopify store.",
                        "Transferring the domain from another Shopify store to your Shopify store. You must be the account owner of the other Shopify store.",
                        "Transferring the domain from a third-party domain provider to your Shopify store."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can add a custom domain to your store in the following ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Buying the domain from Shopify",
                        "Transferring. This can take up to 48 hours.",
                        "Buying the domain from a third party, and then pointing the domain to your Shopify store"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use a numbered list when item sequence or priority does matter. Introduce the list with a full sentence and a colon. If at least one of the numbered bullet points requires a period due to having two sentences, then include punctuation on all the bullets. Avoid lists that have both single words and sentences as bullet points. Capitalize the first word of the bullet. When checking out from your online store, the customer goes through the following steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Adds the products that they want to purchase to their cart",
                        "Goes to the cart page and proceeds to the checkout",
                        "Enters their shipping details",
                        "Enters their payment details",
                        "Confirms and places the order"
                    ]
                },
                {
                    "type": "p",
                    "text": "When checking out from your online store, the customer:"
                },
                {
                    "type": "list",
                    "items": [
                        "adds the products that they want to purchase to their cart. This could be one or many products.",
                        "goes to the cart page and proceeds to the checkout",
                        "enters their shipping details",
                        "enters their payment details",
                        "confirms and places the order"
                    ]
                },
                {
                    "type": "p",
                    "text": "Menu lists give users a horizontal set of actions when space is limited. The order of actions is often based on logic, such as most popular actions. Actions in a menu follow a {verb}+{noun} pattern. If there’s enough context, only a verb might be required."
                },
                {
                    "type": "list",
                    "items": [
                        "Rename",
                        "Edit",
                        "HTML",
                        "Duplicate"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "HTML",
                        "editing options",
                        "File name changes",
                        "Duplicate this order so that you can make edits, updates, or changes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Menu lists give users a horizontal set of nouns when space is limited. The order of nouns is often based on logic, such as most recent orders. Nouns in a menu should be concise, but still give the user enough information so that they can easily find and accurately select the item that they want. Select filter"
                },
                {
                    "type": "list",
                    "items": [
                        "Today",
                        "Yesterday",
                        "This week",
                        "This month"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Filter visibility",
                        "Filter product type",
                        "Filter product vendor",
                        "Filter tagged with"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "List items always start with a capital letter.",
                        "Capitalization and punctuation rules apply to both bulleted and numbered lists."
                    ]
                },
                {
                    "type": "p",
                    "text": "Company name"
                },
                {
                    "type": "list",
                    "items": [
                        "Hidden",
                        "Optional",
                        "Required"
                    ]
                },
                {
                    "type": "p",
                    "text": "Company name"
                },
                {
                    "type": "list",
                    "items": [
                        "hidden",
                        "optional",
                        "required"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Introduce bulleted lists with a colon or a heading.",
                        "Don’t use commas at the end of list items (for bulleted or numbered lists).",
                        "If any list item contains two or more sentences, punctuate all list items.",
                        "If all list items are one sentence or fragments, don’t punctuate. This doesn't apply to procedural steps, which should end with punctuation.",
                        "Never put a comma or semicolon at the end of a bulleted or numbered list item.",
                        "Treat each list item as a self-contained piece of information."
                    ]
                },
                {
                    "type": "p",
                    "text": "Dates, numbers, and measurements are often formatted automatically according users’ local preferences, and they may be formatted differently in other languages. You can usehelpersto ensure they are localized automatically. These guidelines are for manually formatting in American English, which we use as a base before translating to other languages. When possible, use the month’s full name. If there are space constraints, use 3-letter abbreviations. Don’t write dates with numerals only."
                },
                {
                    "type": "list",
                    "items": [
                        "Thursday, October 15, 2015",
                        "October 15, 2015",
                        "Oct 15, 2015"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Thur, October 15",
                        "October 15, ’15",
                        "10/15/15"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use ordinal indicators, which are words representing position or rank in a sequential order (1st, 2nd, 3rd, and so on). January 23–April 1 January 23rd–April 1st For all translations, the time format is automatically localized by theIntl.DateTimeFormatJavaScript object. When time must be formatted manually, follow these guidelines:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use the 12-hour clock, followed by am or pm.",
                        "Include a space after the last number. For example, “Your package will arrive at 12:35 pm.” Adding the space helps with formatting for English-speaking markets outside of North America, so we use it for North American usage as well.",
                        "Use the browser time of the logged in user.",
                        "To show a time range, use an en dash and include the am/pm after both times, for example, 3:00 pm–4:00 pm.",
                        "If indicating both the date and time, separate them with the word “at” instead of a comma."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Include a time zone only if it’s necessary, such as for an event listing.",
                        "Use the time zone’s abbreviation following the am or pm, for example, 4:00 pm NZT.",
                        "If your audience is in a single time zone, then don’t include an S (for Standard) or D (for Daylight). For example, 3:00 pm PT.",
                        "If your audience is in a combination of time zones, then include the S (for Standard) or D (for Daylight) to avoid confusion. For example, 3:00 pm PDT."
                    ]
                },
                {
                    "type": "p",
                    "text": "Thursday, October 15, 2015 at 2:00 pm EDT 2015-10-15, CDT 2:00P.M. Use consistent timestamp formats by following these examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "Less than 1 min:Just now",
                        "1 min to 60 min:13 minutes ago",
                        "Today:10:30 am",
                        "Yesterday:Yesterday at 10:30 am",
                        "In the last 7 days:Friday at 10:30 am",
                        "7 days to 1 year:Aug 14 at 10:30 am",
                        "More than 1 year:Aug 14, 2016"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Less than 1 min:10:30am",
                        "1 min to 60 min:10:30am",
                        "Today:Today, 10:30am",
                        "Yesterday:Friday, 10:30am",
                        "In the last 7 days:Friday, 10:30am",
                        "7 days to 1 year:10:30am, Oct 15, 2015",
                        "More than 1 year:Last year"
                    ]
                },
                {
                    "type": "p",
                    "text": "When including currency with a price, the currency comes after the dollar amount. Learn more aboutformatting localized currency."
                },
                {
                    "type": "list",
                    "items": [
                        "$10,000 USD"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "USD$10,000",
                        "$10KUSD",
                        "$10,000USD"
                    ]
                },
                {
                    "type": "p",
                    "text": "In general, use numerals. If the number is below 10 and not integral to the sentence, spell it out in full."
                },
                {
                    "type": "list",
                    "items": [
                        "9",
                        "100",
                        "1",
                        "Here are 2 marketing campaigns you can use.",
                        "You have 3 orders to fulfill.",
                        "You no longer need to track shipments in two places."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "nine",
                        "one hundred",
                        "one",
                        "Here are two marketing campaigns you can use.",
                        "You have three orders to fulfill."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use commas for numbers with four or more digits. Whenever possible, don’t truncate numbers:"
                },
                {
                    "type": "list",
                    "items": [
                        "12,000",
                        "9,344",
                        "1,800,887"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "12 k",
                        "9344",
                        "1.8 m"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use hyphens when writing phone numbers. Don’t use brackets, spaces, periods, or plus signs:"
                },
                {
                    "type": "list",
                    "items": [
                        "613-555-1234",
                        "1-514-555-1234",
                        "33-55-416-123"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "613.555.1234",
                        "1-(514)-555-1234",
                        "+33 55 416 123"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use an en dash without a space on either side for number ranges:"
                },
                {
                    "type": "list",
                    "items": [
                        "5–10 products",
                        "October 15–31",
                        "2005–2015",
                        "25–100 lb",
                        "$0.00–$49.99",
                        "2:00 pm–3:00 pm"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "5 – 10 products",
                        "October 15 – 31",
                        "2005 – 2015",
                        "25 – 100 lb",
                        "$0.00 – $49.99",
                        "2:00 pm – 3:00 pm"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use “to” instead of an en dash if a number range is preceded by “from” in a phrase. Use “and” if a range is preceded by “between.”"
                },
                {
                    "type": "list",
                    "items": [
                        "You have a delivery scheduled from 10:00 am to 2:00 pm on Monday, July 18.",
                        "Active from August 15 to August 30",
                        "Free shipping for products between $10.00 and $40.00"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "You have a delivery scheduled from 10:00 am–2:00 pm on Monday, July 18.",
                        "Active from August 15–August 30",
                        "Free shipping for products between $10.00–$40.00"
                    ]
                },
                {
                    "type": "p",
                    "text": "For undefined upward ranges, use “and up” or “or more.”"
                },
                {
                    "type": "list",
                    "items": [
                        "$50.00 and up",
                        "100 or more"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "$50.00+",
                        ">100"
                    ]
                },
                {
                    "type": "p",
                    "text": "For downward ranges, be specific. $0.00–$49.99 $50.00 or less In all cases, include a space between the number and the unit."
                },
                {
                    "type": "list",
                    "items": [
                        "3.4 lb",
                        "2 kg",
                        "1 cm",
                        "11.875 × 3.375 × 13.625 cm"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "3.4lb",
                        "2kg",
                        "1.875 × 3.375 × 13.625cm"
                    ]
                },
                {
                    "type": "p",
                    "text": "Never pluralize unit of measurement abbreviations."
                },
                {
                    "type": "list",
                    "items": [
                        "4 lb",
                        "11 ml"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "4 lbs",
                        "11 mls"
                    ]
                },
                {
                    "type": "p",
                    "text": "When listing out multiple measurements in a row, put the unit of measurement at the end instead of after each number (and include a space)."
                },
                {
                    "type": "list",
                    "items": [
                        "11.875 × 3.375 × 13.625 cm"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "1.875 cm × 3.375 cm × 13.625 cm"
                    ]
                },
                {
                    "type": "p",
                    "text": "For pricing by measurement, don’t add a space before or after a slash."
                },
                {
                    "type": "list",
                    "items": [
                        "$100/m",
                        "$5/100 g"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "$100/ m",
                        "$5/ 100g"
                    ]
                },
                {
                    "type": "p",
                    "text": "For units of measurement, use decimals instead of fractions:"
                },
                {
                    "type": "list",
                    "items": [
                        "2.375 lb",
                        "11.875 × 3.375 × 13.625 cm"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "2-3/8 lb",
                        "11-7/8 × 3-3/8 × 13-5/8 cm"
                    ]
                },
                {
                    "type": "p",
                    "text": "This table shows the standard abbreviations for commonly-used units of measurement. Use the imperial system for the United States, Liberia, and Myanmar, and use the metric system for all other countries. Lay out address forms in the following format:"
                },
                {
                    "type": "code",
                    "code": "FirstnameLastnameAddressApartment,suite,etc.(optional)CityCountryProvincePostalcode"
                },
                {
                    "type": "p",
                    "text": "Please note, “optional” inApartment, suite, etc. (optional)means that the field is optional for customers to complete, but we should always include it in the form."
                },
                {
                    "type": "list",
                    "items": [
                        "Use locale-specific alternatives for province and postal code, for example, the US uses State and ZIP code"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add extra fields",
                        "Change the placeholder text"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use a nation’s proper name when referring to it as a noun. Your store must be located in the United States. Your store must be located in the US. When using a country as an adjective (such as when referring to currency), use the abbreviated form without punctuation. Pinterest requires your store to use US currency. U.S. currency Things to watch out for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use colloquial forms of a nation or state name, for example, America instead of the United States",
                        "Search online to see whether nations commonly use “the” before their name, for example, the Philippines or the Falkland Islands"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use ampersands (&). They attract attention to the least important part of the sentence. Spell out the word “and.” Zones and rates Zones & rates Use apostrophes to represent omitted letters or numbers:"
                },
                {
                    "type": "list",
                    "items": [
                        "Omitted numbers (’40s)",
                        "Omitted letters (don’t, can’t, won’t)",
                        "Verb contractions (it’s, you’re, we’re)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use apostrophes to form possessives:"
                },
                {
                    "type": "list",
                    "items": [
                        "Singular nouns: add’s, even if they end ins(merchant’s, bus’s)",
                        "Plural nouns that don’t end in s: add’s(women’s, men’s)",
                        "Plural nouns that end in s: add an apostrophe (boxes’, customers’)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use apostrophes to form possessive pronouns such as hers or his."
                },
                {
                    "type": "list",
                    "items": [
                        "Merchant’s store",
                        "Women’s clothing",
                        "Customers’ credit cards"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Merchants store",
                        "Womens clothing",
                        "Customers credit cards"
                    ]
                },
                {
                    "type": "p",
                    "text": "Always use apostrophes, not vertical (straight) quotes."
                },
                {
                    "type": "list",
                    "items": [
                        "’option+shift+]"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid using colons in sentences. If you need to use one, don’t capitalize the first word after the colon unless it’s a proper noun. Your store accepts payments with GoCoin and Shopify Payments. Your store accepts payments with: GoCoin and Shopify Payments. Don’t use colons to introduce radio buttons or checkboxes. If the customer abandons their checkout, send them an email reminder to complete their order If the customer abandons their checkout, send them an email reminder to complete their order: Introduce bulleted lists with a colon. Correct the following payment information to continue:"
                },
                {
                    "type": "list",
                    "items": [
                        "The credit card verification value (CVV) doesn’t match the credit card",
                        "The billing address street doesn’t match the street for the credit card",
                        "The billing address ZIP or postal code doesn’t match the credit card address"
                    ]
                },
                {
                    "type": "p",
                    "text": "Correct the following payment information to continue."
                },
                {
                    "type": "list",
                    "items": [
                        "The credit card verification value (CVV) doesn’t match the credit card",
                        "The billing address street doesn’t match the street for the credit card",
                        "The billing address ZIP or postal code doesn’t match the credit card address"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the oxford comma (also known as the serial comma) in sentences. There should be a comma after every list of 3 or more items (unless you’re using a bulleted or numbered list). Kit is an app that handles your online advertising, email marketing, and social media. Kit is an app that handles your online advertising, email marketing and social media. Don’t use commas to separate bulleted or numbered list items."
                },
                {
                    "type": "list",
                    "items": [
                        "The credit card verification value (CVV) doesn’t match the credit card",
                        "The billing address street doesn’t match the street for the credit card",
                        "The billing address ZIP or postal code doesn’t match the credit card address"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The credit card verification value (CVV) doesn’t match the credit card,",
                        "The billing address street doesn’t match the street for the credit card,",
                        "The billing address ZIP or postal code doesn’t match the credit card address."
                    ]
                },
                {
                    "type": "p",
                    "text": "The ellipses (…) can be used in place of a missing piece of text (most commonly to show the deletion of words from a direct quotation). Avoid using ellipses in text. Use ellipses for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Truncation in the center of a title bar"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use ellipses for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Placeholder copy",
                        "Trailing off a sentence"
                    ]
                },
                {
                    "type": "p",
                    "text": "Search files Start typing to search for files… Always use the ellipsis character, not three periods. …option+; Consider constraints of the space in the interface when deciding to use truncation. Think about what part of the string merchants needs most. It’s usually the beginning or end, which means you might have to truncate the middle of the string. A button with an ellipsis icon (not the same as text) is used to expand more actions. It’s typically used in cards, or for horizontal sets of actions when space is limited. Use an en dash with no spaces in between (–) for a fixed range of numbers 2006–2013 2006 – 2013 Use an em dash only if you can’t make your message clearer by splitting it into two sentences. Use an em dash without a space on either side (—). Choose your theme’s colors, typography, and pictures—all in one place. Choose your theme’s design—colors, typography, and pictures—all in one place. Depending on the font or appearance, you may want to include a hair space on either side of the en or em dash. HTML entity code for hair space is&hairsp;or&#8202;. Tip: On Mac the keyboard shortcuts are option - for en dash and shift option - for em dash. Avoid exclamation marks—only use them for really really exciting things. If you absolutely have to, limit yourself to one exclamation mark per page. You’ve launched your first online store! You’ve updated your product title! Use hyphens to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Form compound modifiers: two words that combine to modify or describe the noun that follows"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Start your free, no-risk, 14-day trial.",
                        "This is a high-risk order.",
                        "This order is high risk.",
                        "Add weight-based shipping rates.",
                        "Add rates based on the weight of an order."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Start your free, no risk, 14 day trial.",
                        "This is a high risk order.",
                        "This order is high-risk.",
                        "Add weight based shipping rates."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Join prefixes and suffixes only if there are two vowels beside each other. Never use hyphens in the words ecommerce and email."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Re-order",
                        "Resend"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Reorder",
                        "Reenable",
                        "Re-send"
                    ]
                },
                {
                    "type": "p",
                    "text": "Periods often end up in places they shouldn’t, and are omitted at strange times. In general, don’t use periods in interface copy unless it’s a full sentence description. When to use periods:"
                },
                {
                    "type": "list",
                    "items": [
                        "Complete sentences",
                        "Body text, descriptions, and subtitles",
                        "Help text under text boxes (form fields)",
                        "Timeline events"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Sentence fragments",
                        "Top-level headings and titles",
                        "Buttons",
                        "Notifications",
                        "Toast messages",
                        "Placeholder copy",
                        "Navigation menu items",
                        "Hover/tooltip text",
                        "Footer help box text",
                        "Radio button and checkbox text"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Description example: Add this product to a collection so it’s easy to find in your store.",
                        "Placeholder example: Search products",
                        "Timeline example: $50.41 USD was authorized.",
                        "Footer help box example: Learn more aboutproducts"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Button example: Add product.",
                        "Placeholder example: Search…",
                        "Heading example: I’m Kit, your virtual employee.",
                        "Notification example: 6 orders have payments that need to be captured."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use when a list item has two or more full sentences, then also add periods to the whole list",
                        "Use for the description or helper text below a bulleted or numbered list item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use periods when a list has only single sentences or fragments",
                        "Don’t use periods for lists of links"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid question marks wherever possible. Reword into affirmative statements wherever you can, but there are exceptions: It’s okay to use question marks if you don’t know the result of the question:"
                },
                {
                    "type": "list",
                    "items": [
                        "“Did you forget your password?”",
                        "“Do you need to add a shipping rate?”"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use question marks if:"
                },
                {
                    "type": "list",
                    "items": [
                        "It’s the only option available: “Reset password”",
                        "It’s an on/off option: “Show quantity box”"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Forgot?"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Reset password?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use quotation marks to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Define words (“growth-hacking”)",
                        "Quote text"
                    ]
                },
                {
                    "type": "p",
                    "text": "When it’s helpful to the merchant, use quotation marks to indicate input that the merchant has provided, such as a product title or file name. Use this indication only when the input appears in running text."
                },
                {
                    "type": "list",
                    "items": [
                        "Are you sure you want to delete “cat shirt”?",
                        "“Nike Air Max 90.png” failed to upload"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Are you sure you want to deletecat shirt?",
                        "Nike Air Max 90.png failed to upload"
                    ]
                },
                {
                    "type": "p",
                    "text": "In general, place commas and periods inside quotation marks. When working with literal strings like typed commands or merchant inputs, place punctuation outside the quotation marks."
                },
                {
                    "type": "list",
                    "items": [
                        "“I see this all the time,” said Mary.",
                        "Avoid general words like “all,” “every,” or “most.”",
                        "To remove this item, type “DELETE”."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "“I don’t understand why”, said Mitch.",
                        "We call it a “store”, not a “shop”.",
                        "There was an error with the file “cat_shirt.png.”"
                    ]
                },
                {
                    "type": "p",
                    "text": "Always use smart (curly) quotes, not vertical (straight) quotes."
                },
                {
                    "type": "list",
                    "items": [
                        "‘option+]"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "’option+shift+]"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "“option+["
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "”option+shift+["
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "\"or'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid semicolons if possible. If you really need them, use semicolons to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Connect two closely related ideas, as long as they are both independent clauses (full sentences that could stand on their own).",
                        "Replace a comma or the word “and” between two closely related ideas."
                    ]
                },
                {
                    "type": "p",
                    "text": "My friends made me banana pancakes on my birthday; I’ve never been happier. The unicorn was hungry; the grass was brown. Use American spelling for all external-facing Shopify content. When in doubt, check theMerriam-Webster dictionaryfor the preferred spelling of specific terms."
                },
                {
                    "type": "list",
                    "items": [
                        "Color",
                        "Center",
                        "Canceled"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Colour",
                        "Centre",
                        "Cancelled"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tip: it’s easy to miss Canadian spelling. Switch your laptop language settings to American English and turn spell check on. It will highlight any Canadianisms you might have missed. When in doubt, don’t bold. Use bold sparingly and only where strong emphasis is required. Don’t use bold to create a heading or emphasize:"
                },
                {
                    "type": "list",
                    "items": [
                        "Proper nouns",
                        "Merchant input",
                        "Checkbox titles"
                    ]
                },
                {
                    "type": "p",
                    "text": "After your first sale, PayPal will email you atmerchant@email.comwith instructions. Are you sure you want to deleteSunset T-shirt? Always refer to merchants as “you.” Don’t speak for merchants with phrases that use “I” or “my.” Change your email address in your Profile. Change your email address in My Profile. In some cases (such as getting merchant consent or granting permissions) you should refer to merchants as “I.” I agree to the terms and conditions You agree the terms and conditions Always refer to Shopify as “we,” but avoid inserting Shopify into the content as much as possible (except when a human is taking action, such as reviewing a request). Pinterest Buyable Pins will be available in the coming weeks. We’re making Pinterest Buyable Pins available in the coming weeks."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/help-content",
            "title": "Help content — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The goal of help content is to teach merchants:"
                },
                {
                    "type": "list",
                    "items": [
                        "How to complete a task or make a good decision for their business",
                        "Important information related to the current workflow",
                        "How to optimize the way they use Shopify"
                    ]
                },
                {
                    "type": "p",
                    "text": "​\nThe choice of whether or not to use help content depends on the kind of experience you’re designing. ​\nProductivity areas include tasks that merchants do regularly, like adding products and fulfilling orders. These pages are used often and become familiar quickly. When designing productivity experiences, prioritize experienced merchants. This is their space to get work done and we can keep out of their way by offering a clean, streamlined UI. This means minimal help content.\n​ ​\nEducational areas include tasks that merchants do infrequently, like adjusting tax or payments settings. Most of these settings aren’t changed very often, so merchants doing these tasks are often seeing them for the first time. When designing for educational experiences, prioritize merchants who are unfamiliar with the task or workflow. Offer context and guidance to help them make the right decisions for their business. This means making use of help content. ​\nHelp content belongs as close as possible to the part of the UI it references. If it’s teaching merchants about the purpose of a card, put it at the top of the card as a description. If it’s teaching merchants about a particular field, put it beneath the field as help text. The following is an example of help content that was originally a card description, but felt easier to parse after moving closer to the upload actions it helps with. ​\nUsing help content to promote new features can erode trust with merchants. Not every feature is the best choice for every merchant at every point in time, and we shouldn’t assume that they want or need it. There are times when our motivations and our merchants’ are highly aligned, and encouraging a certain action through help content might be appropriate. An example of this is discounted annual billing. It’s good for Shopify because of the long-term merchant commitment and up-front payment. It’s good for merchants who are long-term committed to Shopify and can pay up front. This example also illustrates that there’s still only a subset of merchants that are at the right place to adopt it. Keep this in mind when suggesting how a feature might help someone’s business. ​\n“Learn more” links take merchants to the Shopify Help Center or Shopify.dev for more detailed information than we can offer in the UI. Make sure “Learn more” links go to a page or heading that’s specific to the topic. The Help Center is a rich resource, but for a merchant it’s not always a convenient time to read documentation. Landing on a dense page of information without knowing where to start is frustrating and disorienting. If there isn’t a page or heading specific to the topic you’re providing help for, work with the documentation team to create the right content. See the content guidelines for links for more aboutformatting “Learn more” links. ​\n“Learn more” badges show an information icon that takes you to the Help Center. These are different from tooltips. On large screens, they expand on hover to reveal a “Learn more” link. Use “Learn more” badges:\n​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only in settings experiences, and only in card headers",
                        "When the linked Help Center topic is relevant to the entire card"
                    ]
                },
                {
                    "type": "p",
                    "text": "Best practices:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use regular “Learn more” links for help topics specific to only a part of a card",
                        "Some cards benefit from a “Learn more” badge in the heading in combination with “Learn more” links or other help content in the card body"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/help-documentation",
            "title": "Help documentation — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "These are the core guidelines used to produce theShopify Help Center, as well as Shopify's internal documentation. They’re all intended to serve the same goal: to educate and empower Shopify's merchants and employees. To include a link to help documentation in your app or channel, use theFooter helpcomponent. The way that you write your help documentation should change depending on your intended audience and their expectations. Take some time to understand your audience and determine the documentation that would suit them best. For example, if your audience is mainly in the United States, then you should use American English. For a more worldwide audience, British English is more common and expected. Reviewing your intended audience and understanding the language that they expect can improve the effectivenss of your help content, improve adoption of your product and features, and reduce support debt costs. Using Shopify as an example, there can be a wide spectrum of Shopify users as an audience. Often, individual pages are written with a certain audience in mind, as opposed to the whole help center being written with one central audience being considered."
                },
                {
                    "type": "list",
                    "items": [
                        "Not signed up yet, possibly on a free trial",
                        "Could be new to business, or could be looking to migrate an existing business"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Signed up but might not have sold online before",
                        "Possibly not very computer literate",
                        "New to Shopify concepts and workflows"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Have been using Shopify for some time",
                        "Familiar with the basic concepts and workflows",
                        "Confident with computers",
                        "Can try some customizations with guidance"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Experienced and confident",
                        "Extensive computing experience",
                        "Happy to experiment and take risks",
                        "Experienced problem solvers",
                        "Self-serve through forums and help documentation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Each of these different users likely has different expectations for the same document. Let’s take a look at how that might play out:"
                },
                {
                    "type": "list",
                    "items": [
                        "A quick-start guide",
                        "Conceptual overviews"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Detailed explanations",
                        "Clear step-by-step instructions",
                        "Conceptual overviews",
                        "Definitions of terms",
                        "Tutorials",
                        "Context-sensitive help"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Clear step-by-step instructions",
                        "Conceptual overviews",
                        "Definitions of terms",
                        "More challenging tutorials",
                        "Context-sensitive help"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Procedural instructions (can be brief and direct)",
                        "Code fragments",
                        "Links to information sources"
                    ]
                },
                {
                    "type": "p",
                    "text": "This is just one way to imagine the variety of users that fit into Shopify's audience. Regardless of their skill level, the aim of the documentation remains the same: to accommodate a wide range of users and their objectives. This can be achieved by presenting information in a way that’s inclusive of different skill levels, learning styles, and workflows. Before you begin organizing information on a page, review the following principles:"
                },
                {
                    "type": "list",
                    "items": [
                        "Let readers fail fast: If a reader is going to fail at the task at hand, then let them know quickly, instead of letting them get halfway through only for them to realize that they don't meet the requirements. If a reader can't complete a set of steps due to an unmet requirement, isn't eligible to use a feature, or is in a scenario where continuing to pursue an action is a waste of time, then you need to inform the reader of this fact as quickly as possible within the content. This respects a reader's time, and lets them find an appropriate solution faster.",
                        "Provide all readers with a solution or next step: Any given set of steps should include a solution or next step for a reader. For example, suppose that a set of steps has the successful result of adding a feature to their product, but there is a requirement to be on the latest version of the product. Before the steps are listed, a user should be told of the restriction, and provided a link for the steps on how to upgrade.",
                        "Keep it factual: To maintain a level of trust with your readers, you should remove marketing and promotional content from your help content. Help content can be used to explain the benefits of a product or feature, but should stick to the direct benefits and hedge all claims of making things \"faster\", \"better\" or \"easier\".",
                        "Explain how a reader can use a feature, not what a feature can do for them: Framing your content as how a reader can use a product or feature helps them better understand your content and imagine how it would fit into their own context."
                    ]
                },
                {
                    "type": "p",
                    "text": "Readers come to help documentation with different expectations and in different usage settings:"
                },
                {
                    "type": "list",
                    "items": [
                        "One might be working through a long, multi-stage setup process to connect a third-party app into their admin",
                        "Another might be using her tablet to check out the details of Shopify POS and see if it could be used at their cafe",
                        "Another might be trying to make a quick edit to his storefront in the half hour they have left before going to pick up their kids from school"
                    ]
                },
                {
                    "type": "p",
                    "text": "In all these different cases, the reader needs documentation that’s findable, usable, and relevant. In other words, content that is organized. Headings help readers pinpoint the most relevant content on a page for them, and reduce the need to scan and browse content. Effective headings make it clear to readers which sections of a document are most relevant to their current tasks. The heading should directly reflect the result of any actions, or should summarize the content found within the section. Headings also provide readers with a good sense of progress while they move from one task to the next. As a general rule, the lower a heading is in the doc’s hierarchy, the more flexible you can be with its tone. For example, low-level headings can be longer and more specific, or less formal. Maintain the heading hierarchy throughout the doc, and don’t skip heading levels. For example, go directly from H1 to H2, then to H3, and so on. This helps the readers know where they are in the document, whether they’re going through a specific workflow or just scanning. For page or topic-level headings, use short, gerund-based (verb ending in \"ing\") statements."
                },
                {
                    "type": "list",
                    "items": [
                        "Creating products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Create products"
                    ]
                },
                {
                    "type": "p",
                    "text": "For task-based headings within the document, use imperatives."
                },
                {
                    "type": "list",
                    "items": [
                        "Add a customer"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Adding a customer"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid pronouns in headings."
                },
                {
                    "type": "list",
                    "items": [
                        "Connecting Facebook accounts",
                        "Connect a Facebook account"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Connecting your Facebook account"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid long strings of nouns in a heading."
                },
                {
                    "type": "list",
                    "items": [
                        "Posting products",
                        "Creating posts"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Creating Point of Sale product collections",
                        "Creating product post pages"
                    ]
                },
                {
                    "type": "p",
                    "text": "Keep the key descriptors close to the front of a heading so it’s easier to scan quickly. For example, avoid starting the heading with “How to” or “To.”"
                },
                {
                    "type": "list",
                    "items": [
                        "Add a product"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "How to add a product"
                    ]
                },
                {
                    "type": "p",
                    "text": "Try to keep parallel grammatical structure between headings of the same level."
                },
                {
                    "type": "list",
                    "items": [
                        "Boost a post, Choose an audience, Fulfill an order"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Boost a post, Choosing your audience, How to fulfill your orders"
                    ]
                },
                {
                    "type": "p",
                    "text": "In most cases, headings should be statements rather than questions. Save question-style headings for FAQs or low-level headings that address specific functions."
                },
                {
                    "type": "list",
                    "items": [
                        "Add a product"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "How do I add a product?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use sentence case for all headings, but no periods at the end. Format and capitalize interface elements or buttons in the way they appear in the Shopify admin."
                },
                {
                    "type": "list",
                    "items": [
                        "Adding products to your store"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Adding Products To Your Store."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use parallel structure in your content, such as in lists and headings, to encourage comprehension and recall."
                },
                {
                    "type": "list",
                    "items": [
                        "Adding products to your store, Deleting products from your store, Editing products in your store"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add products to your store, How to delete products from your store, Edit a product in your store"
                    ]
                },
                {
                    "type": "p",
                    "text": "Most help documentation is task-oriented: it’s designed to guide readers through the steps they need to follow to complete a task. The best documentation will save readers time by helping them complete their tasks quickly. The way that you present information has a big impact on how useful it will be to your readers. In most cases, a document shouldn’t start with a set of instructions. Instead, offer context with an introductory comment or define a key concept about the topic. Decide what information readers need before they scan the instructions.\nThis is also true for the document’s subsections. Divide up the instructions in a way that reflects how the reader might think of the task. Use numbered steps for each part of the task. This helps to hold your reader’s attention, and makes it easier for them to switch between a help document and Shopify to complete the task. Make sure that the instructions for major tasks in a longer document can stand alone. If the instructions for a task pick up abruptly where an earlier task left off, then the readers who begin at that point might struggle to figure out the workflow. Start documenting each task at the beginning of the workflow required to complete it. In general, use short lists (either numbered steps or bullets), which are easier to read than long lists. If you have a task or a list that needs more than ten items, then break it up into two or more lists, each with their own subheading. Tell the user what they can do with your product, not what it can do. This means structuring documentation around user actions rather than product features."
                },
                {
                    "type": "list",
                    "items": [
                        "Use this feature to keep track of key updates and promotions."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This feature notifies you about key updates and promotions."
                    ]
                },
                {
                    "type": "p",
                    "text": "In general, avoid grouping multiple actions together in a single numbered step.\nEach step should include only one or two user actions."
                },
                {
                    "type": "list",
                    "items": [
                        "From your Shopify admin, clickProducts.",
                        "ClickAdd a product."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "From your Shopify admin, clickProducts, clickAdd a product, and\nthen enter your product information."
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid telling the user to “find” or “locate” something in a task."
                },
                {
                    "type": "list",
                    "items": [
                        "In the Pinterest section, clickRemove channel."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Find the Pinterest section, then clickRemove channel."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the action word “select” when you’re telling the reader to pick something from a set number of choices (like from a list or dropdown menu), and use “choose” when you’re telling the reader to make a choice that’s more open-ended (such as, “Choose what kind of store you want to open”)."
                },
                {
                    "type": "list",
                    "items": [
                        "From theProductsdrop-down menu, select the one you want to discount."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "From theProductsdrop-down menu, choose the one you want to discount."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use consistent phrasing when referring to the reader’s choice. Use the most direct “If you want to” instead of more formal options such as “If you would like to” or “If you wish to.”"
                },
                {
                    "type": "list",
                    "items": [
                        "If you want to add a product, then clickAdd product."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "If you’d like to add a product, then clickAdd product."
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid using “desired” in place of the more direct “want.”"
                },
                {
                    "type": "list",
                    "items": [
                        "Select the item that you want to add to the order."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Select the desired item to add to the order."
                    ]
                },
                {
                    "type": "p",
                    "text": "For conditional cases, start the step with “if” so the reader doesn’t have to read the whole sentence only to find out that the condition doesn't apply to them. Always add a “then” after the condition to help the reader identify the condition and the outcome."
                },
                {
                    "type": "list",
                    "items": [
                        "If you need Z, then click A, B, and C."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Click A, B, and C if you need Z."
                    ]
                },
                {
                    "type": "p",
                    "text": "Show results of actions in the same step as the task and be clear about where in the flow the reader is. In general, omit results statements unless the result is surprising or unexpected. If you need to mention the results of a user action, then do it in the same numbered step that describes that action (don’t use a separate numbered step). You can refer to an earlier step to reinforce the order of the steps. For progress within a series of steps, use the phrase “When you’ve” or “After you’ve.” Avoid using “Once you’ve.” For progress between tasks, begin a section with “Now that you’ve” or “After you’ve” (referring back to the previous action or step). When asking the reader to confirm something, use one of the following terms:"
                },
                {
                    "type": "list",
                    "items": [
                        "“Make sure” in cases where there’s still a related important task (instead of “check that” or “verify that”).",
                        "“Confirm” in cases where the reader has already been told to do something, and you’re now reminding them."
                    ]
                },
                {
                    "type": "p",
                    "text": "For instructions, use the command form of the verb."
                },
                {
                    "type": "list",
                    "items": [
                        "ClickRefreshto show your new orders."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "ClickingRefreshwill show your new orders."
                    ]
                },
                {
                    "type": "p",
                    "text": "Limit the future tense to cases that actually refer to the future."
                },
                {
                    "type": "list",
                    "items": [
                        "Choose an end date. After this date, the boosted post will revert to a regular post."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "ClickSave. The price will change when the discount is applied."
                    ]
                },
                {
                    "type": "p",
                    "text": "Screenshots help visual learners understand complex tasks and add context to the tasks you’re documenting. However, they often go out of date quickly and can be expensive to translate. Use them wisely. In general, don’t use a screenshot to illustrate every step in a task. Instead, save screenshots for places where the interface is complicated. Include only the most relevant section of the screen or admin in the screenshot. Avoid taking a screenshot of an entire page, because this increases the likelihood of the image going out of date quickly. When highlighting an area of a screenshot, try to show an equal amount of space around the area that you want the reader to focus on. Tell a story by being consistent with details in screenshots within a document.\nFor example, you could follow a single order and keep the details the same from one screenshot to the next. Documentation is an opportunity for education. Building context, making instructions clear, and encouraging learning are key. Offer links to the next steps. Choose the next steps based on reader profiles and feedback. Encourage the reader to learn more. Explain the benefits of the feature in the introduction of your document. Where you can, give the readers “early wins.” Make the first step or two of the task short and easy. Connect the current task to readers’ wider knowledge: other parts of Shopify, the store-building process, and even the business-building process. In most cases, avoid repeating information on a page. You might need to repeat important points to make sure the reader notices them. For example, you might repeat a warning from the document’s introduction within a set of instructions. Think of the context that the reader is in and what they might be feeling and thinking while they’re reading your documentation. This perspective will help you pick what type of tone to apply. Most people don’t want to spend time reading documentation. They want to learn what they need to know, and then move on. The language in documentation needs to be short, to the point, and task oriented. That doesn’t mean your writing needs to be terse or dry. In general, you can begin a document using a lighter tone. When you introduce a task, an informal tone can help draw the reader in, offer context, and encourage the reader to keep going. You can also use a more informal tone when introducing sub-tasks, to give the reader a break from the instructions. For actions and tasks, aim for a much more direct tone. Keep your tone approachable by using contractions (for examplecan’t,it’s) to link directions and results. Use contractions."
                },
                {
                    "type": "list",
                    "items": [
                        "After you’ve set up your product, clickSave."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "After you have set up your product, clickSave."
                    ]
                },
                {
                    "type": "p",
                    "text": "Address the reader or user as “you.”"
                },
                {
                    "type": "list",
                    "items": [
                        "You can add products from theProductspage in your Shopify admin."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Products can be added from the Products page in your Shopify admin."
                    ]
                },
                {
                    "type": "p",
                    "text": "Keep tone in check by avoiding the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Sounding patronizing, chummy, cheery, childish, or otherwise inappropriate in an attempt to seem informal and relatable.",
                        "Colloquialisms, jokes, sarcasm, jargon, and slang. Avoid anything that’s too culturally specific.",
                        "Anything that causes the user to pause or hesitate, unless you explicitly want them to."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the active voice as much as possible, which generally sounds less formal than the passive voice. This means writing what merchants do, instead of what is being done by merchants. But in cases where the passive voice sounds more natural than the active voice, use passive voice (like with verbs such as “publish” or “assign” and with nouns like “discount”)."
                },
                {
                    "type": "list",
                    "items": [
                        "After you’ve added a product, clickSave."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "After the product has been added,Savemust be clicked."
                    ]
                },
                {
                    "type": "p",
                    "text": "It’s important that your sentences flow nicely. Changing things up by combining or separating phrases and ideas will improve prose. Reading sentences that flow helps with reader comprehension. Use linking adverbs, conjunctions, and prepositions liberally to avoid choppy writing."
                },
                {
                    "type": "list",
                    "items": [
                        "Click the button to open the window."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Click the button. The window opens."
                    ]
                },
                {
                    "type": "p",
                    "text": "Putting the context, expected information, or old information first helps reduce a reader's mental load while they read. When new information is first, it requires the reader to hold on to the information while trying to determine why it is relevant."
                },
                {
                    "type": "list",
                    "items": [
                        "This feature is available for stores in the United States, Canada, and Mexico."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Stores in the United States, Canada, and Mexico can use this feature."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vary your sentence structure, especially in longer paragraphs. Try not to use more than two phrases with a “To x, do y” structure in a row—this gets repetitive and can cause the reader to lose interest. To break it up, add a short declarative sentence, if possible. Use conjunctions (a word that joins words or groups of words) to break up complicated passages."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/inclusive-language",
            "title": "Inclusive language — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Clear and precise language creates a better experience for all users. Everyone interacting with Shopify should feel welcome and included. Start by involving different perspectives in the planning process. Limit assumptions or biases by testing your content with a diverse audience. Recruit research participants from a variety of backgrounds, including historically excluded groups. Be aware of bias, and let those with lived experiences guide the way. Our language should reflect the diversity of Shopify merchants. Here are some principles for creating welcoming commerce experiences through writing."
                },
                {
                    "type": "list",
                    "items": [
                        "When talkingto people, use language that considers others’ perspectives and lived experiences",
                        "When talkingabout people, be descriptive only when necessary to the context, and use language preferred by the group being described",
                        "When talkingabout things, be clear and accurate, avoiding metaphors and idioms"
                    ]
                },
                {
                    "type": "p",
                    "text": "For more context on the etymology of terms mentioned in this guide, visit the EGALInclusive Terms Glossary. As technology advances, it’s important to remember that we continue to design for all levels of ability. Considering those with disabilities will make your content accessible and more inclusive. To write accessible content:"
                },
                {
                    "type": "list",
                    "items": [
                        "Center content around people, not their disabilities",
                        "Be clear and avoid metaphors, euphemisms, and idioms",
                        "Don’t imply that those with disabilities are abnormal, less than, or “suffering”",
                        "Avoid words associated with disabilities to describe objects, features, or experiences"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t label actions or features using “disable” or “disabled.” This can imply that being disabled is a negative state. Alternatives include “turn off,” “inactive,” and “deactivated.” Note: Because “disabled” is a valid state for HTML elements, it’s currently considered appropriate when talking about specific element states. Only use this term to refer to actual deafness, not as a metaphor. Use lowercase, unless referring to the Deaf community. Don’t use this term to refer to someone’s disability. Be specific, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "person who requires a keyboard accessible checkout",
                        "person who uses an accessibility device"
                    ]
                },
                {
                    "type": "p",
                    "text": "Only use this term to reference actual blindness, not as a metaphor. Avoid using these words to describe something as extreme or unbelievable."
                },
                {
                    "type": "list",
                    "items": [
                        "wild",
                        "extreme",
                        "unbelievable",
                        "intense"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "insane",
                        "crazy",
                        "nuts"
                    ]
                },
                {
                    "type": "p",
                    "text": "When writing instructional content, avoid saying the task itself is easy or quick. If you imply it’s easy for everyone, it can discourage those who might struggle. While they are fine in the right context, watch out for these words:"
                },
                {
                    "type": "list",
                    "items": [
                        "just",
                        "only",
                        "easy",
                        "simple",
                        "quick"
                    ]
                },
                {
                    "type": "p",
                    "text": "Note: When marketing, it’s okay to use these words to communicate the value of a new product or feature. Complete this 3 question survey to get started Take a second to fill out this easy questionnaire Enter your email address and password Just put in your email address to get started We want all merchants to feel comfortable participating in commerce. Even if unintentional, language can exclude or harm people who have been historically marginalized due to their race, ethnicity, or culture. Consider the diversity of merchants’ lived experiences and be intentional about using language that is free of bias."
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t treat perspectives that are different from yours as exotic or strange",
                        "Don’t use phrases or terms that denote “black” or “dark” as bad or negative, versus “white” or “light” as good or positive",
                        "Avoid metaphors and idioms since they can have racist origins or interpretations"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid these terms since they imply that “white is good” and “black is bad.”"
                },
                {
                    "type": "list",
                    "items": [
                        "Unethical hacking",
                        "Ethical hacking"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Black hat",
                        "White hat"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid these terms since they imply that “white is good” and “black is bad.”"
                },
                {
                    "type": "list",
                    "items": [
                        "Denylist, blocklist",
                        "Allowlist",
                        "Permit, permitted"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Blacklist",
                        "Whitelist",
                        "Graylist"
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn how to secure a compromised account and reset blocked credentials. Learn how to secure a compromised account and reset blacklisted credentials. Add no-reply[at]shopify.com to your email provider’s allowlist. Add no-reply[at]shopify.com to your email provider’s whitelist. Avoid using these phrases, as they come from laws in the U.S. meant to circumvent or disenfranchise Black people’s rights."
                },
                {
                    "type": "list",
                    "items": [
                        "Legacy, legacied",
                        "Exempt"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Grandfather in, grandfathered in",
                        "Grandfather clause"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid using this term, as many associate it with the institution of slavery."
                },
                {
                    "type": "list",
                    "items": [
                        "main",
                        "primary",
                        "source",
                        "expert"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "master"
                    ]
                },
                {
                    "type": "p",
                    "text": "Gender is an important part of many people’s identity. Stereotypes and assumptions about gender can make their way into product experiences and leave people feeling excluded or misrepresented. When you do talk about gender, be intentional. Only use gendered language if it makes your content more inclusive and accurate. Many languages lack ungendered options, like the English “they.” When possible, write in a way that avoids gendered language. For example, write “you” instead of a third person pronoun. You may need to work with a translator to avoid unintentionally gendering concepts. Always choose the clearest option. Always use someone’s preferred gender and pronouns. If you’re not sure, use the pronouns “they/them.” This keeps the content inclusive, simple, and readable. Call the customer to confirm their address Call the customer to confirm his or her address If pronouns are necessary or useful to the experience, offer users an inclusive list of options that also allows them to opt out. Don’t use language that associates roles, qualities, or objects with a specific gender."
                },
                {
                    "type": "list",
                    "items": [
                        "synthetic",
                        "workforce",
                        "mail carrier"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "man-made",
                        "manpower",
                        "mailman"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/merchant-to-customer",
            "title": "Merchant-to-customer content — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Merchant-to-customer content represents the merchant, not Shopify, and should optimize the customers’ online or retail store experience. Every UX discipline is encouraged to create content at Shopify. Use this guide when you’re writing content that a customer will see on a Shopify store or receive from a merchant. You’ll find merchant-to-customer content in places such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "Online store checkout pages",
                        "Shipping update emails",
                        "Return labels and emails",
                        "Point of Sale (POS) screens, such as digital receipts and payment errors"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you write for multiple audiences, it’s important to note that merchant-to-customer content isn’t:"
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify-to-buyer content, such as Shopify Pay or Arrive",
                        "Shopify-to-merchant content, such as the Shopify admin",
                        "Shopify-to-world content, such as shopify.com or blog posts"
                    ]
                },
                {
                    "type": "p",
                    "text": "Shopify has a set ofexperience values. The ones to focus on when creating merchant-to-customer content are: Wherever and however a customer uses a Shopify experience (even if they don’t know it’s Shopify), we want it to work for them. The best Shopify experiences work on every screen, on every platform, in every language, and in every country. Shopify experiences help customers achieve goals faster, more accurately, and with less effort. We break complex tasks down into simple steps, use friction to highlight important decisions, and always set expectations about what will happen next. Shopify experiences are genuine, always honest, and transparent. We show customers that merchants act in the customer’s best interest. We create communication that strengthens the trust customers have in merchants. Merchant voice and tone is customer-focused. Shopify merchants sell everything from physical products, such as eco-sneakers, to digital products, like music downloads. The language they use is very different from store to store. This means that when writing from a merchant perspective, we use a voice that’s appropriate on any store, and for any type of customer. Merchant-to-customer content shouldn’t sound out of place coming from any merchant. Too much personality is inappropriate for some stores. Customers aren’t going through the purchase experience to admire the witty content. Research shows that the majority of people want content that’s easy to understand and communicates concepts efficiently. Not robotic. Not full of personality. Just clear and straightforward to help them complete their task. Keep in mind that some content, such as emails, can be personalized by merchants. You’re providing a default for them to work from."
                },
                {
                    "type": "list",
                    "items": [
                        "Your payment details couldn’t be verified. Check your card details and try again.",
                        "All transactions are secure and encrypted.",
                        "Select the address that matches your card or payment method.",
                        "Thanks!This example is when the customer finishes checkout in person (all other examples are from online checkout)."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "A fatal error occurred."
                    ]
                },
                {
                    "type": "p",
                    "text": "Whoops! Houston, we have a problem!"
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t worry, your details are safe with us!",
                        "Address must correspond with that held by your payment provider.",
                        "Thanks for stopping by! or See you again soon!"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid technical or ecommerce terms. Customers are interested in their order and their delivery, not in inventory and fulfillment. They might want to sign up for news and exclusive offers, but not marketing emails."
                },
                {
                    "type": "list",
                    "items": [
                        "Enter your name exactly as it’s written on your card.",
                        "You’ll get shipping and delivery updates by email."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "There was a server verification error with your payment provider.",
                        "We’ll inform you when we’ve fulfilled your order."
                    ]
                },
                {
                    "type": "p",
                    "text": "It’s important that any purchase flow is efficient. Use short, easy-to-understand words and phrases. For example:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use “to”",
                        "Use “go to”",
                        "There was a problem with our payments"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use “in order to”",
                        "Don’t use “proceed to”",
                        "No payment gateway is currently configured"
                    ]
                },
                {
                    "type": "p",
                    "text": "But remember that clear beats short. Don’t use content that can be interpreted in different ways. For example, does “bi-weekly” mean twice a week or every two weeks? It’s clearer to say “Every 2 weeks.” Using more words is okay if it provides clarity."
                },
                {
                    "type": "list",
                    "items": [
                        "Every two weeks",
                        "Getting available shipping rates"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Bi-weekly",
                        "Loading"
                    ]
                },
                {
                    "type": "p",
                    "text": "No matter who the audience is, all Shopify content follows the samegrammar and mechanicsandproduct content guidelines. Read our generalvoice and tone guidelinesto compare how Shopify talks to merchants. “Buyer” and “customer” are similar so it’s easy to confuse the use of these terms. A “buyer” interacts with multiple Shopify stores or has a direct relationship with Shopify, such as through Shopify Pay. In contrast, a “customer” is a person or organization who interacts with a Shopify merchant or a merchant’s sales channel. In the Shopify admin and Point-of-Sale (POS), a customer appears on the Customers page when they engage with a merchant in an identifiable way. This could be because they:"
                },
                {
                    "type": "list",
                    "items": [
                        "were added or imported by the merchant",
                        "started a purchase but abandoned it at checkout",
                        "made a purchase",
                        "create a customer account",
                        "subscribed to the merchant's mailing list"
                    ]
                },
                {
                    "type": "p",
                    "text": "Word usage to use/avoid:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use the store name in place of “merchant”",
                        "Be direct and use “you”",
                        "Focus on the merchant-to-customer relationship",
                        "Use “text message” or “message” when writing for North American audiences",
                        "Use noun + verb phrases for success messages, for example, ”payment sent”",
                        "There was a problem with our payments"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Merchant (in place of store name)",
                        "Customer or customer (in place of “you”)",
                        "Shopify (keep Shopify out of the conversation)",
                        "SMS",
                        "Oh happy day! (don’t be over-congratulatory)",
                        "Wrong, fail, failure, error (avoid sounding robotic or negative)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the following terms to refer to common concepts and actions within the merchant-to-customer experience. Note: all of these terms should be lowercase, unless they're a proper noun or the first word in a sentence. The page that displays an order summary. Customers see this page before they proceed to checkout. The customer experience for paying for items and completing an order. How an order reaches the customer. Delivery covers more than just shipping. For example, customers can choose whether the order is shipped to their delivery address or picked up in-store. A dollar amount, percentage, or code that dictates how much a product will be reduced in price. Additional costs that may be incurred on orders that are delivered internationally. Duties may be incorporated into the shipping cost. A type of product with monetary value that merchants can either sell to customers or issue to them as a gift, reward, or incentive. One unit of a product on an order. The credentials that a customer uses to access their account. The term for a purchase. Don’t say package, or add unnecessary words like sales order. Describes a specific way a customer can pay such as Visa, MasterCard, or Apple Pay. This text is displayed on Call To Action (CTA) buttons that trigger a payment. On free orders, this is replaced with “Complete order”. A delivery option where customers physically collect an order. A transaction where a customer sends a product back to the store for an exchange or refund. A refund is part of a return. The funds that a customer receives from a merchant, for example, when returning an item. How a merchant sends an order to a customer. Also known as the shipping method. The cost of the items on an order before additional charges, such as tax and shipping. The cost of the items on an order after additional charges such as tax and shipping. A way of referring to the customer that's checking out. Use you, or use the name that the customer has provided. A way of referring to the store name. Most of the time, refer to the store by name. However, you can use “we” when using the store name would sound overly wordy or insincere."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/naming",
            "title": "Naming — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Names influence how merchants and other audiences perceive and understand\nShopify. A well-chosen name will:"
                },
                {
                    "type": "list",
                    "items": [
                        "Put clarity above creativity",
                        "Help establish a mental model for our audiences",
                        "Enhance people’s perception of our brand",
                        "Increase adoption of the product or feature",
                        "Differentiate Shopify from other products",
                        "Clarify where a product or feature fits into our brand system"
                    ]
                },
                {
                    "type": "p",
                    "text": "The naming process involves collaboration. Include different disciplines and people with different subject matter expertise in the creation of a name. Most features don’t need an official, branded name. For example, order entry is\na feature that’s referred to descriptively and so doesn’t need to be capitalized. When choosing what to call a feature, pick words that describe what the feature does or represents. If there’s room, add extra context for merchants by describing the feature instead of using only the feature name. Avoid capitalizing descriptive feature names."
                },
                {
                    "type": "list",
                    "items": [
                        "Order entry"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Order Entry"
                    ]
                },
                {
                    "type": "p",
                    "text": "If there‘s room, describe the feature instead of defaulting to only using the name."
                },
                {
                    "type": "list",
                    "items": [
                        "Display carrier calculated shipping rates to your customers at checkout."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Display carrier calculated shipping rates."
                    ]
                },
                {
                    "type": "p",
                    "text": "Only Shopify can use the word “Shopify” in a name. The word “Shopify” can’t be used to name third-party products. It’s important we use the word “Shopify” consistently, and sparingly. Don’t use\n“Shopify” in a name unless there’s a lack of surrounding context and we want its target audience to know it’s associated with Shopify. Adding “Shopify” doesn’t add clarity in the context of other Shopify products and features. For example, merchants often confuse Shopify Shipping with the other shipping features, like shipping settings, carrier calculated shipping rates, shipping labels, and shipping zones. Our support staff have to refer to the Shopify Plan by its cost because the general name doesn’t distinguish it from the other plans. Use “Shopify” in front of a name when a product:"
                },
                {
                    "type": "list",
                    "items": [
                        "Is or will become a separate product or platform and we need to associate it with Shopify",
                        "Should be differentiated from other, similar products in the industry",
                        "Doesn’t justify anevocative name, but still needs to associated with Shopify"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use “Shopify” in a name for built in functionality features, like fraud analysis or importing products."
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify Payments",
                        "Shopify App Store",
                        "Shopify Theme Store"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify Analytics",
                        "Shopify Discounts",
                        "Shopify Account"
                    ]
                },
                {
                    "type": "p",
                    "text": "Shopify makes apps that merchants can add to their Shopify admin. It’s okay to say “Built by Shopify” or “Made by Shopify” after the app name. Once you’ve picked the format that works for the design, use it consistently."
                },
                {
                    "type": "list",
                    "items": [
                        "ShopifyProduct Reviews",
                        "ShopifyOrder Printer",
                        "ShopifyShopcodes"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Product Reviews",
                        "Order Printer",
                        "Shopcodes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Apps that aren’t built by Shopify should not use the word “Shopify” in their name or say “for Shopify” after the name."
                },
                {
                    "type": "list",
                    "items": [
                        "AdSpace",
                        "Email Marketing"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "AdSpace for Shopify",
                        "Email Marketing for Shopify"
                    ]
                },
                {
                    "type": "p",
                    "text": "There are two types of approaches to naming, the descriptive approach, or the evocative approach. Descriptive names are concrete, while evocative can be more abstract. Descriptive names are merchant friendly, and the most common. Features should always have descriptive names. Standalone products that require independent branding can use evocative names. Third-party apps and channels should have their own branded names and should never use the word “Shopify” in the name. If you’re a Shopify employee and are looking to trademark an evocative name, ask the legal department for help. Features and products connected to Shopify’s main product offering should have names that reveal something about their purpose. Avoid jargon and make sure the name you pick won’t get confused with similar names or terms. Reserve evocative naming conventions for standalone products like Kit, and Frenzy. Descriptive names should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Describe the experiences they represent",
                        "Fit into the information architecture of the product",
                        "Use merchant-friendly terms, not industry standard terms",
                        "Make sense in marketing materials",
                        "Align with brand"
                    ]
                },
                {
                    "type": "p",
                    "text": "If it’s a default feature (merchants don’t have to sign up or opt in to use it), don’tcapitalizeit."
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify Capital",
                        "fraud analysis",
                        "Use analytics to review your store’s transactions"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify capital",
                        "Fraud Analysis",
                        "Use Analytics to review your store’s transactions"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid jargon and give merchants a hint about the actions they’ll be able to take when they interact with the product or feature."
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify Help Center",
                        "Shopify Theme Store",
                        "discounts",
                        "Logo maker"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify Help Documentation",
                        "Configuration app",
                        "Shipity-do-dah"
                    ]
                },
                {
                    "type": "p",
                    "text": "Standalone products use evocative names to position us in the industry. These unique and bold naming conventions can help with branding or recall, but don’t always help people understand the experience. They’re better for standalone products, and not for experiences that are part of Shopify’s main product offering. Sometimes Shopify acquires a product or service that already has a unique, branded name. Even though it may become more tied to Shopify, it can keep its name to maintain its brand identity. This also helps maintain the context audiences already have about the product, like in the case of Kit. Certain standalone names use the word “Shopify” because it differentiates the product from similar ones in the industry, like Shopify Pay in comparison to\nApple Pay, or Android Pay. For more details, see theguidelines for using “Shopify” in a name. Evocative names should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Have a strong, independent brand identity",
                        "Help with branding or recall",
                        "Reflect the concept it represents",
                        "Make sense when used in marketing materials"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you work at Shopify and want to trademark a name, talk to the legal department. It’s easier to trademark unique or made-up name. These names have stronger identities, but it’s not always clear what they do."
                },
                {
                    "type": "list",
                    "items": [
                        "Frenzy",
                        "Kit",
                        "Oberlo"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Flash sales app",
                        "The Marketing Bot",
                        "Drop Shipping app"
                    ]
                },
                {
                    "type": "p",
                    "text": "Some evocative names can be more descriptive, although they’re harder to trademark if they use common terminology. Not all evocative names need to be trademarked."
                },
                {
                    "type": "list",
                    "items": [
                        "Burst",
                        "Shop Class"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Free Stock Photography",
                        "Learn about Shopify event"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you’re creating a website or product for an existing brand, maintain its brand identity and keep “Shopify” out of the name."
                },
                {
                    "type": "list",
                    "items": [
                        "Kylie Jenner Pop-up Shop",
                        "KyliePowered by Shopify"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify Pop-up, featuring Kylie Jenner"
                    ]
                },
                {
                    "type": "p",
                    "text": "An off-brand and unclear name can confuse your audience. It can also feel disconnected from the rest of Shopify. A good product or feature name should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Help merchants understand what the experience represents",
                        "Fit into the information architecture of the product or website in which it belongs",
                        "Make sense when compared to other products, features, websites, or events in the same market",
                        "Avoid any negative or weird connotations"
                    ]
                },
                {
                    "type": "p",
                    "text": "There are two types of approaches to naming, thedescriptive approach, or the evocative approach. Use consistent and easy to understand descriptions when referring to locations in product, especially inhelp documentation. Descriptive feature names aren’tcapitalized, but when providing steps in a workflow, it’s okay to capitalize the page name, for example, “Go to the Products page”. Note that the page name is capitalized, but “page” isn’t. When referring to Shopify’s main product offering, use “Shopify”. The only exception is when you need to differentiate it from another product, like the mobile app, or explain a task specific to the admin. In these cases, you can use “Shopify admin”. A good description can:"
                },
                {
                    "type": "list",
                    "items": [
                        "Help establish a mental model for merchants",
                        "Clarify where the area fits into the product system",
                        "Help support staff and merchants understand each other when communicating"
                    ]
                },
                {
                    "type": "p",
                    "text": "A good description should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid jargon",
                        "Be used consistently",
                        "Describe the area it represents",
                        "Prioritize terminology used by merchants over industry standards"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use consistent descriptions when referring to areas in the Shopify admin."
                },
                {
                    "type": "list",
                    "items": [
                        "The customer list is found on the Customers page.",
                        "When a new customer places an order with your store, their name and information are automatically added to your customer list."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Manage customers in Customers.",
                        "Customer information is automatically added to Customers in the Shopify admin."
                    ]
                },
                {
                    "type": "p",
                    "text": "Merchants call our main product offering “Shopify”, so we use that same terminology. terminology"
                },
                {
                    "type": "list",
                    "items": [
                        "Use “Shopify” when talking about our main product offering",
                        "Use “Shopify admin” if you need to differentiate it from the mobile app"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use “admin” or “Shopify admin” if “Shopify” will do"
                    ]
                },
                {
                    "type": "p",
                    "text": "Top-level marketing content is created for audiences who have little context about Shopify. Since they may not know about specific Shopify products, we use\n“Shopify” here too."
                },
                {
                    "type": "list",
                    "items": [
                        "Run your business using Shopify",
                        "Print shipping labels directly through Shopify"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use our ecommerce platform",
                        "Print shipping labels directly through Shopify’s admin"
                    ]
                },
                {
                    "type": "p",
                    "text": "For app names in areas with surrounding context, like in the app store or on the\nApps page in the Shopify admin, don’t add the word “app” to the end of the name."
                },
                {
                    "type": "list",
                    "items": [
                        "Oberlo",
                        "Script Editor"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Oberlo app",
                        "Script Editor app"
                    ]
                },
                {
                    "type": "p",
                    "text": "For app names without surrounding context, like in search in the Shopify admin, or on a home card, add “app” so merchants know what it is."
                },
                {
                    "type": "list",
                    "items": [
                        "Bulk Account Order app"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Bulk Account Order"
                    ]
                },
                {
                    "type": "p",
                    "text": "When writing about channels, make it clear to merchants that they are interacting with\na channel through Shopify, and not through the other company."
                },
                {
                    "type": "list",
                    "items": [
                        "The Amazon channel now supports electronics listings"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Amazon now supports electronics listings"
                    ]
                },
                {
                    "type": "p",
                    "text": "If “channel” is used somewhere in surrounding content, it’s okay to drop it for titles and button copy. titles"
                },
                {
                    "type": "list",
                    "items": [
                        "Add Amazon"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Add Amazon channel"
                    ]
                },
                {
                    "type": "p",
                    "text": "Not every channel is a sales channel. For example, BuzzFeed is a marketing outreach channel and Facebook is a sales and marketing channel. Clarify channel types when you have room, otherwise default to channel. If there’s surrounding context, you can drop channel altogether. If there’s surrounding context, drop the word channel from the name."
                },
                {
                    "type": "list",
                    "items": [
                        "Google Shopping"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Google Shopping channel"
                    ]
                },
                {
                    "type": "p",
                    "text": "If there’s room for a description, explain the channel type."
                },
                {
                    "type": "list",
                    "items": [
                        "Use BuzzFeed’s marketing outreach channel to get more customers."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use the BuzzFeed channel to get more customers."
                    ]
                },
                {
                    "type": "p",
                    "text": "In general, capitalize evocative names and don’t capitalize feature names. Avoid acronyms, and think about how your audience will interpret a name. Don’t capitalize default features. Default features are built into Shopify and merchants don’t have to sign up, add, or opt in to use them. Analytics and discounts are examples of default features. Capitalizing names should only happen:"
                },
                {
                    "type": "list",
                    "items": [
                        "For independently branded,evocative names",
                        "When we want to try and claim specific words (think Tweet or Pin)",
                        "For names listed in top level navigation, like Products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify Hardware Store",
                        "Shopify Theme Store",
                        "Black Friday Cyber Monday (BFCM)",
                        "Retail Package",
                        "Buy Button"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify hardware store",
                        "Shopify theme store",
                        "Black friday cyber monday (bfcm)",
                        "Retail package",
                        "Buy button"
                    ]
                },
                {
                    "type": "p",
                    "text": "Names shouldn’t be capitalized if they:"
                },
                {
                    "type": "list",
                    "items": [
                        "Aredescriptive",
                        "Include common, familiar words",
                        "Are default features"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "analytics",
                        "fraud analysis",
                        "online store",
                        "themes"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify Analytics",
                        "Fraud Analysis",
                        "Online Store",
                        "Themes"
                    ]
                },
                {
                    "type": "p",
                    "text": "An acronym is a word formed from parts of an existing compound term. For example, “rich text editor” could be written as “RTE”. An abbreviation is a shortened form of a written word or phrase used in place of the whole word or phrase. “Amt” is an abbreviation for “amount”. Our stance on acronyms:"
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid creating acronyms.",
                        "Acronyms take longer to understand and might reduce adoption of a product, feature, or concept.",
                        "Acronyms are like inside jokes—people who understand the acronym feel included in the meaning, but people who don’t feel left out and confused.",
                        "If you have to use an acronym, spell it out the first time you use it and follow with the acronym in brackets.",
                        "Internationally understood acronyms and abbreviations are acceptable, like the word “app” or “SEO”."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rich text editor",
                        "Multi label printing",
                        "Merchant Success Manager",
                        "Virtual reality",
                        "Build a Bigger Business"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "RTE",
                        "MLP",
                        "MSM",
                        "VR",
                        "BABB"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid using Internet slang acronyms in Shopify products and when creating new, branded names. These acronyms are exclusive to certain online communities and branded approachable for everyday merchants."
                },
                {
                    "type": "list",
                    "items": [
                        "Shop Class"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify IRL"
                    ]
                },
                {
                    "type": "p",
                    "text": "Internationally understood acronyms and abbreviations are acceptable. Some of these include time zone, tax, barcode, weight, and size abbreviations."
                },
                {
                    "type": "list",
                    "items": [
                        "SEO",
                        "NZDT",
                        "SMS",
                        "QR codes",
                        "HST",
                        "CVV",
                        "SKU",
                        "ISBN",
                        "UPC",
                        "GTIN",
                        "USD",
                        "1 kg",
                        "2 lbs",
                        "App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Search engine optimization",
                        "New Zealand Daylight Time",
                        "Short messaging service",
                        "Quick response codes",
                        "Harmonized sales tax",
                        "Card verification value",
                        "Stock keeping unit",
                        "International standard book number",
                        "Universal product code",
                        "Global trade item number",
                        "United States Dollar",
                        "Kilogram",
                        "2 pounds",
                        "Application"
                    ]
                },
                {
                    "type": "p",
                    "text": "When using a country as an adjective (such as when referring to currency), you may use an abbreviated form without punctuation."
                },
                {
                    "type": "list",
                    "items": [
                        "Pinterest requires your store to use US currency."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Pinterest requires your store to use United States currency."
                    ]
                },
                {
                    "type": "p",
                    "text": "Being an ecommerce platform has its naming challenges. For example, a lot of feature names could include the word “shipping” or “pay”. Think merchant-first and be descriptive to differentiate the name. Imagine what it’s like to have conversations with merchants about similar names like Shopify Payments or around our pricing plans to identify names that might be confusing. Before naming a new product or feature:"
                },
                {
                    "type": "list",
                    "items": [
                        "Conduct an audit of existing names to narrow down your naming choices",
                        "Ask the support team to see if they think it’ll conflict with another name",
                        "Draft a test conversation around similar sounding names"
                    ]
                },
                {
                    "type": "p",
                    "text": "Names may not translate directly to other languages. Identify if you need to create a separate name, or if a direct translation will do. Before confirming a name, check with people who work in translation and localization to find out if:"
                },
                {
                    "type": "list",
                    "items": [
                        "There are cultural considerations",
                        "A different name for a different location would have a positive impact for brand"
                    ]
                },
                {
                    "type": "p",
                    "text": "Some already existing names are different depending where you’re from. For example, in North America, people say, “I’ll send you a text.” In India and Nordic countries, people say, “I’ll SMS you.” Do your research and find out what people call things in everyday conversations. Use “text message” when writing for North American audiences."
                },
                {
                    "type": "list",
                    "items": [
                        "text message"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "SMS"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use SMS when writing for Indian and Nordic audiences."
                },
                {
                    "type": "list",
                    "items": [
                        "SMS"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "text message"
                    ]
                },
                {
                    "type": "p",
                    "text": "In languages that use logographic characters, like Japanese, name initials can have different meanings. For example, in Japanese a name like Chikako (周子) Ishikawa (石川) means “neighborhood stone” (周石) in initials. Check with the localization and translation team before writing something in short form in another language. Some words or terms have unintended negative connotations for some audiences. Do some research to avoid associating offensive words or phrases with your product or feature name. Start by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Getting people outside of your team to look at the name with a new perspective",
                        "Doing a Google search to see if it surfaces with another meaning"
                    ]
                },
                {
                    "type": "p",
                    "text": "Be strategic and consistent when namingcomponents. It makes it easier to create and build products and features for Shopify when people can switch between implementations and see the same names represented throughout. For example, we should use the same name across Rails, React, and Figma. It’s okay if each implementation has its own spelling convention. For example, “Account connection” in documentation and in Figma layer names, but “ui_account_connection” in Rails, and “AccountConnection” in React. A good component name can:"
                },
                {
                    "type": "list",
                    "items": [
                        "Increase adoption of a component",
                        "Clarify where a component fits into our system",
                        "Help establish a mental model for people using the components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Component names in documentation should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Describe the functionality they represent",
                        "Avoid jargon so different disciplines understand its function",
                        "Be written in singular, not plural, format"
                    ]
                },
                {
                    "type": "p",
                    "text": "In documentation we write out the name without any punctuation and use sentence case, meaning, the first word is capitalized and the rest is lowercase."
                },
                {
                    "type": "list",
                    "items": [
                        "Type scale",
                        "Empty state"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "TypeScale",
                        "EmptyState"
                    ]
                },
                {
                    "type": "p",
                    "text": "In code, we use the same name as the documentation, but can alter the spelling convention to suit the implementation."
                },
                {
                    "type": "list",
                    "items": [
                        "TypeScale",
                        "EmptyState"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Type scale",
                        "Empty state"
                    ]
                },
                {
                    "type": "p",
                    "text": "For subcomponents, the same rules apply. In documentation, write out the name with a space between words, and use sentence case. with"
                },
                {
                    "type": "list",
                    "items": [
                        "Layout section"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Layout.Section"
                    ]
                },
                {
                    "type": "p",
                    "text": "For subcomponents in the code, use a period in place of the space."
                },
                {
                    "type": "list",
                    "items": [
                        "Layout.Section"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Layout section"
                    ]
                },
                {
                    "type": "p",
                    "text": "For all components, use American spelling:"
                },
                {
                    "type": "list",
                    "items": [
                        "Layout.Center",
                        "Palette.Color"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Layout.Centre",
                        "Palette.Colour"
                    ]
                },
                {
                    "type": "p",
                    "text": "There is an exception: the Labelled component uses the British spelling, following thearia-labelledbyattribute as per theARIA specificationitself. Icons should be named consistently so they’re easy to find and implement across\nShopify. Overall, icon names should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Represent the intended function of the icon",
                        "Avoid jargon so different disciplines understand its function"
                    ]
                },
                {
                    "type": "p",
                    "text": "Product area icons should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Only be used to symbolize their specific product area or function"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Home",
                        "Orders",
                        "Products"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "House",
                        "Invoice",
                        "Price tag"
                    ]
                },
                {
                    "type": "p",
                    "text": "Functional icons not tied to product areas should represent a clear action."
                },
                {
                    "type": "list",
                    "items": [
                        "Add image"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Image"
                    ]
                },
                {
                    "type": "p",
                    "text": "Icons with more than one function should be named to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Represent their purpose",
                        "Describe how they look"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Circle alert",
                        "Camera",
                        "Clock"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Alert",
                        "Photography",
                        "Time"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/product-content",
            "title": "Product content — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Our content standards will help you understand how to think strategically about the language in your products and apps. They’ll also give you clear, tactical suggestions designed to help you use language to craft better experiences. Each componentalso includes content guidelines about how to write for specific interface elements. Not everyone is a confident writer, but everyone can improve their content by making sure it responds to the needs of their audience. Keep in mind that real people rely on Shopify every day to run their businesses. The product, feature, or app you’re building can make a big difference to the people using it. Take some time to learn about who they are, what they need, and the language they use."
                },
                {
                    "type": "list",
                    "items": [
                        "Only use industry-standard terminology when you have reason to believe it will improve understanding. Spend time researching what words people use, rather than defaulting to what corporations call things.",
                        "Edit unnecessary or repeated words.",
                        "Write for small screens first. Constraints can help you focus on the most important message.",
                        "Read your content out loud. If you get tripped up or it doesn’t sound like something a human would say, your content needs to be edited."
                    ]
                },
                {
                    "type": "p",
                    "text": "People use Shopify to get things done, whether they’re managing a store, or making a purchase. Content should be written and structured to help the reader understand and take the most important actions."
                },
                {
                    "type": "list",
                    "items": [
                        "Calls to action on buttons and links should start with a strong verb that describes the action a person will take when they click.",
                        "Always prioritize the most important information and task — don’t make people dig to find what they care about. toBreak down complicated tasks into steps that help people focus on one thing at a time.",
                        "Use theactive voiceto clarify the subject and the action."
                    ]
                },
                {
                    "type": "p",
                    "text": "To help your audience understand key concepts and actions they can take, use consistent nouns (words used to identify people, places, or things) and verbs\n(action words) wherever possible."
                },
                {
                    "type": "list",
                    "items": [
                        "Get in the habit of making a list of all the most important verbs and nouns in the experience you’re building.",
                        "Look at your word list. Does each word clearly describe the object or action it represents in the simplest way possible?",
                        "Does your language reflect how people think and the words they use?",
                        "Identify synonyms (a word or phrase that means exactly or nearly the same as another word or phrase in the same language), and eliminate them. Each important object and action should have a single word to represent it."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/content/voice-and-tone",
            "title": "Voice and tone — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Shopify’s voice is a reflection of who we are. We should always sound like\nShopify. At the same time, some aspects of our personality might be more or less apparent, depending on the audience and their context. That’s tone. Our voice is a reflection of who we are. So who are we? Simply put, we’re a company, built by real people who understand this business and care about helping others succeed. That should be clear every time someone uses our products or services. Most often, we show this through well-crafted tools that help people get their jobs done efficiently. But there are times when our personalities and perspectives should be more apparent. In those times, we should adapt our tone to respond to people in an appropriate and meaningful way. You'll find more specific guidelines on how to adapt your tone to different situations in this guide. As Shopify’s voice, we should always:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use business casual language—be plain-spoken, not pretentious or overly playful",
                        "Be upfront and honest with merchants, even if we make a mistake",
                        "Communicate with clarity and empathy—be direct, not insensitive"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Offer merchants sincere encouragement and practical advice",
                        "Clearly explain how merchants are impacted when something goes wrong, but don’t overexplain with redundant content"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Communicate in a way that respects merchant emotion and context",
                        "Avoid words that generalize success like “every,” “all,” and “most”",
                        "Use language that supports action, movement, and progress"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use expertise to help merchants succeed; don’t talk down to them",
                        "Be specific when explaining benefits without making things sound better than they are",
                        "Teach people the “why” and “how” behind actions—don’t just tell them to do something"
                    ]
                },
                {
                    "type": "p",
                    "text": "Our tone adapts to the context. We’ll use certain voice attributes more or less based on the situation. Often people frame tone guidance around adapting to the emotional state of the audience. The reality is we never know a person’s emotional state. Even when things seem the most positive, we can’t be sure. While it’s helpful to consider how your audience is likely to feel, don’t assume or tell them how to feel. Instead, focus on the specifics of the situation and less on the emotions. Here are some of the most common situations to consider. When everything is working as it should, our goal is to give people what they need to get work done, without getting in the way or drawing attention to ourselves. We want the audience to know what something is or that something has happened as expected. Look for the simplest way to communicate information—words aren’t always necessary. Use overly complicated or intimidating language. Be consistent for identical actions or destinations when possible."
                },
                {
                    "type": "list",
                    "items": [
                        "Delete product",
                        "Delete collection"
                    ]
                },
                {
                    "type": "p",
                    "text": "Add extra text just to fill space. Sometimes it helps to give more explanation or education. In these situations, we want to make sure people feel confident in their actions and in our capabilities. Some people will want to be guided step-by-step through the process, while others may just want to try it out and learn on their own. Look for ways to give them both options. Remember, they may have sought this out specifically or we may have recommended it to them, so don’t assume that they want or need to use it. Help people understand why they should do something, not just how. Oversell or overpromise. Create a new campaign and you could double your sales this holiday season. Break down complicated tasks into steps that help people focus on one thing at a time. Be overly prescriptive about how someone should use a feature. You need to add at least 10 products before opening your store. While we do our best to be proactive and protect against unexpected events, they still happen. These are often simple mistakes or roadblocks to action that can easily be fixed. Although they aren’t necessarily errors or problems, they can feel that way at first. In this case, our job is to help people understand what happened so that they can get back to work as quickly as possible Read theerror message guidelinesfor more detailed guidance. Clearly explain the situation and how it can be resolved. Product weight needs to be positive. Change the product weight to be greater than or equal to 0 and try again. Use overly dramatic or scary words for simple errors. Bad request, forbidden, fatal, expectation failed, unresolved, invalid Look for ways to help people resolve problems automatically. Use error numbers or code unless they’re easily recognizable by people and help them solve the problem. There are situations where we want to acknowledge that someone completed a complex activity or difficult task. While we don’t need to celebrate the accomplishment, we should recognize that they put in the time and effort. Depending on the level of effort, these may be simple confirmations or more active recognition that they completed something difficult. If this is a task people do regularly, make it clear that the step is complete in a simple and non-intrusive way, like aApp Bridge Toast. Consider ways to confirm completion without words or messaging. Product saved Assume people are excited or celebrating. They may be annoyed if it was a particularly long process or if the immediate benefits aren’t clear. Congrats! You set up your single login for Shopify. If the task was something we initiated or required, thank them for their time. Thanks for taking the time to share your feedback. Refer to simple actions or completed steps as “successes.” You successfully added a product. These are situations when we want to keep people moving along a desired path. In most cases, we do that with direct information and clear steps to encourage action. We don’t want to be too overzealous or action-driven here—it’s more about helping people understand the next step and giving them the context they need to take it. Help people understand what the next steps are and why they should take them. Your email address is connected to 8 accounts. Set up a single login to switch between stores faster and log in less often. Assume the next step or outcome is guaranteed. You’re just a few steps away from receiving your first order. Provide guidance to help people understand if the decision is right for them. Based on your type of business, this is the POS hardware we recommend:. There are times when we need to share bad news. This might be an outage or an error, or it may be a product that we’re no longer supporting. These are hopefully rare situations, but they will happen. In this case, there’s a serious risk of damaging trust and hurting our relationship with the audience, so we should be very careful about how we communicate. Read theerror message guidelinesfor more detailed guidance. Explain the impact on their business clearly, without using confusing or scary language. Some of today’s sales data hasn’t been updated yet. This will be fixed shortly. Your data is safe, and your sales are not affected. Ask merchants to trust us without providing data or context. Today’s sales data might not be accurate, but don’t worry—it’s just temporary. Apologize and empathize when we’re at fault, but within reason. All systems are now fully operational. We recognize and apologize for the stress, concern, and impact this outage had on your business. In the coming days we will be working to fully understand how this widespread internet infrastructure failure affected our platform. Provide clear steps to resolve issues. If there’s no solution, be direct about what that means for the merchant and what we’re doing about it. Your Shopify Payments account is on hold. Please attach your State Tax Exemption Certificate for review. It’s exciting to launch a new feature or update, but always consider the audience’s perspective first. While we may be excited about the benefits and capabilities, change can be intimidating or annoying for users. When you’re announcing something new, focus on educating and explaining what it is, what it’s used for, and what the user can expect. Pitch our product by explaining the specific merchant benefits. Introducing the new Buy Button Make it your own with custom fonts, colors, and styles. It also loads 50% faster so your visitors won’t miss it. Just talk about ourselves and assume the experience for merchants will be easy. Get Shopify’s new Buy Button It’s never been easier to customize the fonts, colors, and styles of Buy Buttons. It’s also twice as fast. If possible, let users dismiss announcements or postpone changes until they’re ready. There are occasionally times when we want to celebrate an event or milestone, or to congratulate someone for an important accomplishment. In reality, this should be one of the least common situations we encounter. Let audiences know that we understand that it’s an important moment and we’re excited for them, but be careful not to take credit for it. Even if we played a role in their success, this isn’t about us. Remember, this is about celebrating their accomplishments, not ours. Launching something new? You probably don’t need to celebrate with them. Read our guidance aroundannouncing new features and updates. Only celebrate truly important or monumental situations when the audience likely feels proud, excited, or satisfied. Your store is 1 year old today! Here’s to many more. Celebrate completing tasks or processes that people don’t actually want to celebrate. Did they finish something difficult or do something for us? You may want to acknowledge their effort instead. You set up your payment providers, congrats! Express genuine happiness for merchants. Recognize their accomplishment and congratulate them on a job well done. You launched your store! Nice work. Take credit for merchants’ successes or presume to know what they need. We did it! Congrats on your first sale."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/contributing",
            "title": "Contributing to Polaris — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Anyone, regardless of discipline, is encouraged to contribute to Polaris. We welcome everything from copy edits and bug fixes to new components. Contributions should address a known issue or gap in the system, and they should add value at scale. Sometimes unique solutions are best for the user, but they don’t necessarily need to be in Polaris. You can still build custom solutions using Polaristokensand best practices. Icon contributions—like copy edits, bug fixes, and icons—are often worthwhile. They’re simple to implement, and they improve system quality and trust. Major contributions, like patterns or some components, typically require more evaluation. This flowchart will help you decide whether or not your solution is right for Polaris. If you’re unsure, reach out to the Polaris team directly. Generally, we can classify contributions as minor or major. Icon contributions can be made by an individual or a small team, and the solution is often clear and simple. Major contributions usually introduce breaking changes to the system and require greater involvement from the Polaris team. For example:"
                },
                {
                    "type": "list",
                    "items": [
                        "Bug fixes and documentation (minor)",
                        "Icon additions or updates (minor)",
                        "Component additions or updatesStyle changes (minor)New or redesigned components (major)API change (major)",
                        "Style changes (minor)",
                        "New or redesigned components (major)",
                        "API change (major)",
                        "Patterns (major)"
                    ]
                },
                {
                    "type": "p",
                    "text": "With the exception of our Figma UI kits, all contributions to Polaris are made through GitHub. Check out the directions for each contribution type:"
                },
                {
                    "type": "list",
                    "items": [
                        "Documentation",
                        "Components",
                        "Icons",
                        "Figma UI kit",
                        "Patterns (reach out to #polaris directly in Slack)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Icon or patch contributions can usually be started directly through a GitHub pull request, but if you’re unsure, you can always check with the Polaris team. For major contributions, we recommend creating a contribution proposal. Major contributions to Polaris should start with a proposal. When proposing a contribution, consider the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Have I used the existing Polaris patterns, components, and tokens to their limit?",
                        "Does my solution bring significant value to the admin and to other teams?",
                        "Have I verified its effectiveness?",
                        "What impact could my solution have on existing implementations?",
                        "Do I have the resources (people, time, tools, etc.) to follow through?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use thecontribution proposal templatein GitHub Discussions to start a contribution proposal. Be sure to include any relevant explorations and documentation. If you have questions about how, what, or when to contribute, the Polaris team is here to help."
                },
                {
                    "type": "list",
                    "items": [
                        "UseGitHub Discussionsto propose solutions, discuss new ideas, or ask questions",
                        "If you work at Shopify, use the #polaris Slack channel for support"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/contributing/components",
            "title": "Contributing to Polaris React — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Bug fixes can be as simple as removing a typo, or as complex as refactoring a component to address a performance or accessibility issue. Enhancements usually add to or update the props of an existing component to extend its functionality or presentation. New patterns can be contributed by simply adding a new example to an existing component’s documentation, or by adding new components or utilities. Often component contributions are a mix of these. Start planning your contribution as early as possible to account for the scope in your timeline. To get help with the strategy for your contribution early on, start adiscussionwith the Polaris community. If you have a smaller question, reach out in #polaris if you work at Shopify, or theShopify Partners Slackif you’re an open source contributor. Once you’ve decided on the best way to solve the problem, submit afeature proposalorbug reportissue. Then contribute the change by shipping a pull request. Often the changes you make to a component’s code impact thedocumentationandFigma UI Kit. If you work at Shopify, component contributions should be a team effort across disciplines. If you’re an open source contributor, we’ll work with you to update the Figma UI Kit once youcreate an issueor open a pull request in theShopify/polarisGitHub repo. There are many ways to make a Polaris component more flexible. Updating or adding props is the most common way to add flexibility to the way a component looks or works. Sometimes refactoring the component isa better path. Components should be performant, accessible, and maintainable. When contributing a new prop or updating the types of an existing prop, ask yourself how your change might:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be backwards compatible",
                        "Increase or maintain performance",
                        "Improve or maintain accessibility",
                        "Address a pain point in the merchant experience",
                        "Reduce complexity of the source code"
                    ]
                },
                {
                    "type": "p",
                    "text": "If a component isn’t flexible enough to meet your project’s requirements, or you’re unsure whether a component is right for your use case, submit anissueor open a pull request outlining the problem and the approach you’re thinking about. We’re happy to collaborate to find a solution. To add or update a prop:"
                },
                {
                    "type": "list",
                    "items": [
                        "Explore and align on whether to add a new prop or update the types of an existing prop",
                        "Submit or assign yourself to an existingfeature proposal",
                        "Add your change to the props interface",
                        "Include or update the description comment",
                        "Update the@defaultvalue if relevant in the props interface and in the props deconstruction at the start of the component’s definition",
                        "Add tests to cover the changes",
                        "Add examples to the component’s documentation",
                        "Commit your changes and open a pull request"
                    ]
                },
                {
                    "type": "p",
                    "text": "Bug fixes are high impact contributions that ensure we deliver a reliable, crafted experience to merchants. Whether you’re a seasoned contributor or looking to make your first pull request, there’s a bug report open for every level of experience. If you’re just getting started with contributing to Polaris React, look for issues that are:"
                },
                {
                    "type": "list",
                    "items": [
                        "Labeled as agood first issue",
                        "Not yet assigned to someone",
                        "Haven’t been updated in two or more weeks"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Submit or assign yourself to abug report.",
                        "Assess the time and difficulty of finding and fixing the problem code.",
                        "If you discover that fixing the bug is too complex or will take longer than you’re able to commit, that’s okay! Your findings will help the next developer move the needle on shipping a fix.- Update the issue with a comment detailing your findings. Describe\nthe problem code and share permalinks to the lines involved.- If you have a potential fix locally, commit and push your changes and\nopen a draft pull request that links to the bug report.- Add or update the issue’s labels to indicate level of difficulty.- Unassign yourself from the issue.",
                        "If after investigating you arrive at a solution to the issue:- Update the issue so everyone knows a fix is on the way.- Commit your changes and open a pull request"
                    ]
                },
                {
                    "type": "p",
                    "text": "From perceived performance and accessibility enhancements, to the evolution of our design language, contributing UX improvements to Polaris components empowers teams to make sweeping changes effectively with minimal technical debt upstream. When exploring the potential for improving the look, feel, and or experience of a component:"
                },
                {
                    "type": "list",
                    "items": [
                        "Prioritize accessibility",
                        "CheckW3Cfor examples of the pattern the component implements",
                        "Consider whether the existing component could be replaced entirely if it were broken up into smaller components"
                    ]
                },
                {
                    "type": "p",
                    "text": "In the years since Polaris launched in 2017, we’ve learned a lot from the Shopify and design system communities. As the system’s matured, we’ve found that many of the components should evolve towardcomposition over configuration. Many props is a signal that a component is solving too many problems or is too opinionated. When that’s the case, there’s an opportunity to refactor the component or build a new component to better meet merchant needs. For example,Autocompleteimplementsthe combobox with list pattern. When the Deliver team looked into fixing bugs in the component, they decided it would benefit from being broken down into two new components. They contributedComboboxandListboxand refactoredAutocompleteto use them. This reduced complexity and madeAutocompleteeasier to maintain. The Deliver team partnered with the Polaris team to improve the UX of tag autocomplete inputs in a follow-up project. To accomplish this, we refactoredComboboxandListboxto supportthe combobox with both list and inline autocomplete patternwith automatic selection. EveryAutocompletein the Shopify Admin benefited from those improvements without any code changes needed upstream in the app."
                },
                {
                    "type": "list",
                    "items": [
                        "Submit or assign yourself to an existingfeature proposalornew component proposal",
                        "Prototype and iterate on your proposal, testing with merchants as you iterate if possible",
                        "Commit your changes and open a pull request"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/contributing/documentation",
            "title": "Documenting in Polaris — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Shopify teams create documentation for polaris.shopify.com, but open source contributors are welcome to make copy edits as well as update or add examples tocomponent documentation. To write effectively as a Shopify employee, use a cross-discipline lens. Make sure your content meets both UX and development needs. Before starting, check out ourstyle guide to the style guide. Most documentation about the design system is meant for polaris.shopify.com. However, there may be a reason for the content to live elsewhere. If you’re not sure if something should live on this site, the Polaris team can help you figure that out. Edits related to spelling, grammar, punctuation, or other typos should happen quickly and often. Both Shopify employees and open source contributors are welcome to submit copy edits. To fix any copy issues on polaris.shopify.com, open a pull request in theShopify/polarisGitHub repo. Note: If you find copy issues in other Polaris resources, follow the steps for that resource’s contribution guidelines. To expand or edit existing documentation:"
                },
                {
                    "type": "list",
                    "items": [
                        "Draft your proposed changes in Google Docs for easy collaboration. We recommend writing inMarkdown, or converting your file to Markdown when finished.",
                        "Get feedback from subject matter experts or someone with high context around your changes, like a team member or your lead.",
                        "Reach out to the Polaris team to review your changes for style guide alignment.",
                        "Open a pull request in theShopify/polarisGitHub repo."
                    ]
                },
                {
                    "type": "p",
                    "text": "New documentation in Polaris can range from component documentation, to content guidelines, to pattern guidance. To create new documentation:"
                },
                {
                    "type": "list",
                    "items": [
                        "Reach out to the Polaris team. We can help find a home for your documentation, offer templates, provide asynchronous feedback, and—if you're really stuck—participate in pair writing sessions.",
                        "Draft the content in Google docs for easy collaboration. We recommend writing inMarkdown, or converting your file to Markdown when finished.",
                        "Get feedback from subject matter experts, or someone with high context around your changes (team member, manager, etc.).",
                        "Open a pull request in theShopify/polarisGitHub repo."
                    ]
                },
                {
                    "type": "p",
                    "text": "It’s important that inaccurate or outdated information be removed as soon as possible. This helps maintain high trust in Polaris as a source of truth for design system guidance. To remove documentation:"
                },
                {
                    "type": "list",
                    "items": [
                        "Reach out to subject matter experts, or someone with high context around the existing content, to confirm its relevance and accuracy",
                        "Open a pull request in theShopify/polarisGitHub repo"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/contributing/figma-ui-kit",
            "title": "Contributing to the Figma UI Kit — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Any designer that works at Shopify can contribute to the Figma UI Kit. If you find a bug to fix or your team is contributing new patterns or variants to Polaris React components, we want you to feel empowered to contribute. Components, features, or patterns shouldn’t be added to the Figma UI Kit if they are not part of Polaris React, as our goal is to keep Figma in sync with the code base. Only contributing changes to the Figma UI Kit when there’s a counterpart in Polaris React prevents confusion and keeps tooling in sync across resources."
                },
                {
                    "type": "list",
                    "items": [
                        "Submit an issue in theShopify/polarisGitHub repo, or assign yourself toan existing issue. Make sure to:Assign yourself to the issue so it’s clear who is doing the work.Add the \"Figma UI Kit\" label so we can easily find the issue.Use a descriptive title.Describe the change you’re making in the issue itself.",
                        "Assign yourself to the issue so it’s clear who is doing the work.",
                        "Add the \"Figma UI Kit\" label so we can easily find the issue.",
                        "Use a descriptive title.",
                        "Describe the change you’re making in the issue itself.",
                        "Create a branch in the Polaris Components Figma library.- Give your branch a descriptive name, ideally using the GitHub issue number so it’s easy to track.- For example, \"[4963] Navigation design changes\"",
                        "Make the necessary changes in the new branch.",
                        "Document all changes in the “Release Notes” page within the UI kit.",
                        "Add a design reviewer from the Polaris team to review the changes on your branch. If you aren’t sure who to add, share the link to your Figma branch and ask for review in the #polaris Slack channel.",
                        "Once reviewed and approved, the Polaris designer will merge your changes into the main branch and publish the updates."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design",
            "title": "Design — Shopify Polaris",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Pro design languageEfficiency, intuition, and style combined to empower merchants with data-rich views, action-driven interfaces, and dynamic interactions.",
                        "ColorColor highlights important areas, communicates status, urgency, and directs attention.",
                        "DepthDepth introduces a sense of realism, helps establish visual hierarchy, and creates focus.",
                        "IconsIcons enhance an experience by providing intuitive and efficient navigation, conveying information concisely, and making it more visually appealing.",
                        "LayoutLayout determines the placement, positioning, and organization of various components within the UI, such as buttons, menus, content sections, and other visual elements.",
                        "MotionMotion brings dynamism to an interface, offers visual feedback, and aids merchants understanding the outcomes of their actions.",
                        "TypographyTypography is the art of arranging type in ways that provides innate hierarchy to UI.",
                        "Data visualizationsVisualizations surface patterns in data, and provide immediate answers to a single, specific question.",
                        "IllustrationsThe Shopify admin uses a precise illustration style to help merchants quickly and clearly understand how things work across every experience.",
                        "Interaction statesInteraction states communicate the status of an element in the interface, establish confidence once an action is taken, and suggest the ability (or inability) to interact with the element.",
                        "SoundsWe use sound to communicate information and to enhance how merchants experience the Shopify admin. Sound patterns make interactions easier and more predictable."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/colors",
            "title": "Color — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The purpose of using color has to be clear. Color needs to support a message or status that needs to be easily identifiable by merchants. Each usage of color within the Shopify admin is purposefully tied to aspecific meaning. For instance, red signifies critical errors, green represents success messages, and blue is used to draw attention to tips and offers. Using color as decoration is exclusive to illustration. This deliberate color coding facilitates merchants in identifying which parts of the user interface require focus and distinguishes them from the default features provided by the Shopify admin. Use color to support different states merchants need to be informed about. Use color to decorate or to distract merchants from performing tasks. The Shopify admin interface adopts a black and white color scheme, intentionally creating a neutral backdrop. By employing this monochromatic design, elements that incorporate color gain heightened visual impact and prominence. The intentional design of the overall interface in black and white enables strategically positioned and carefully selected elements to grab merchants' attention. By utilizing color purposefully, the focus is directed towards crucial information, actions, and visual cues. Create impact when using color by using appropriate shades to convey the importance of what is being communicated to merchants. Use strong, vivid colors to grab attention to things that matter most. Contradict or diminish messaging by using subdued colors or grayscale. Polaris offers consistent color palettes for each color role. This means that each color is assigned a specific relationship within the overall palette. Thesecolor relationshipsensure that color contrasts remain consistent across every application of color and ensure proper legibility and understanding when it comes to combining texts with color and interactive shapes with various backgrounds. Colors are meant to be easily understood and read by all merchants. Sufficient contrast makes things easier to find, identify, and interact with. Use color in conjunction with other discernible elements to amplify the message. Use color alone to convey meaning"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/colors/color-tokens",
            "title": "Tokens — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Tokens are a method of applying color in a consistent and meaningful way across the admin. They provide a layer of abstraction from the hex values themselves, making it easy to implement large scale changes across the admin. See thetokensection for the full list of color tokens and their descriptions. Semantic tokens help communicate the intent of a given color and create predictable behavior across our tokens. They start with declaring the token group color, followed by the element it's applied to, such as a bg, border, text, or icon. Following the element, semantic tokens may have one or more modifiers to further represent color application: color role, prominence, and state. Element:The UI element being styled:bg,bg-surface,bg-fill,text,border, andicon. Role:Assigns roles to specific colors for consistent application. Prominence:Communicates what the token is used for. State:Communicates the state of a UI element. Some concepts have their own specific color tokens, known as specialty tokens. Specialty tokens start with declaring the concept and any associated variants, followed by the semantic token structure. These tokens should never be used for anything other than the concept they’re referencing. Interaction states are communicated by adding-hover,-active,-selected, or-disabledto the end of the semantic token. For example, the state token for-color-bg-surfaceis-color-bg-surface-hover. Hover state tokens provide visual feedback to merchants when they hover their cursor over an interactive element, like a button or link. Active state tokens communicate when an interactive element is pressed (by a cursor or finger). Focus states are triggered by the merchant and highlight elements when using a keyboard to navigate the UI. Focus states usually take on the element’s hover state and add a blue outline using theborder-focustoken. Selected state tokens communicate an item or option has been chosen. They can be applied to elements like buttons, tabs, checkboxes, radio buttons, or navigation items. Disabled state tokens indicate when the user isn’t allowed to interact with an element. They remove all interactivity from a component. Disabled elements don’t need to meet WC3 contrast standards and are intentionally de-emphasized to clearly communicate their state. Accessing Polaris color tokens is simple using Figma variables, found in the fill, stroke and text color library menus on the right panel. Color tokens are applied to components and are available via css variables to style custom UI elements within the Shopify admin."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/colors/palettes-and-roles",
            "title": "Palettes and roles — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The Polaris color palette includes 12 colors, each with 16 shades. These colors are assigned different roles in the Shopify admin to convey specific meanings and serve distinct purposes. The global palette is built using HSLuv Lightness values. HSLuv is a color space that stands for \"Hue, Saturation, Lightness (L), and perceptual uniformity.\" It is designed to address the limitations of traditional color spaces, such as RGB and HSL, by providing more perceptually uniform and intuitive color representation. It aims to ensure that color transformations, such as lightening or darkening, are visually consistent and predictable to the human eye. Considering this, the Polaris color palette maintains uniformity in shades within each hue. Consequently, colors like Red 12 and Blue 12 will have identical contrast ratios when paired with the same color, such as Gray 1. This simplifies the process of styling color roles by easily substituting hues as necessary. A color role is composed of a collection of tokens that represent different parts of the UI. Each color role follows the same logic for all tokens, but not all tokens are defined for each color role. Color roles likedefaultwill have all tokens defined, because the default color role offers the baseline color for all elements in the Shopify admin. Roles likecriticalorinformationwill only have a selection of tokens defined, as these roles are usually applied to specific, smaller and more specialized components like badges or banners. More information about tokens and their usage can be found underUsing color. The default role is used to style the entire Shopify admin and is considered to be the baseline theme for all experiences. This role defines default, secondary and tertiary visual hierarchy for a variety of components and are used when communicating default statuses, neutral messaging and common merchant data. Use the default role for the default admin experience and messaging. Use secondary and tertiary for any additional details. Use secondary and tertiary tokens to style entire, complex surfaces. Use secondary and tertiary colors to create visual separation within complex components. Brand is used to pull additional focus on main actions in the UI. This role is used across the admin to guide merchants to the most intended interactions when many options are available. Use brand color to guide merchants to a primary action, especially with default, secondary or tertiary roles. Use multiple brand roles in the same area, this can confuse merchants as to which action is the most appropriate in the current context. Info is used to convey important bits of information in the admin. Info is the catch-all color role when it comes to giving more attention to information that can benefit the merchant, like tips, promotions, or incentives. Use info to grab attention on information that is not part of the typical admin experience. Use info on multiple elements that need attention in the same component. This dilutes attention on what matters most. Use info to share statuses or messages that require immediate attention from the merchant. Instead, usewarningorcriticalroles. Success is used to confirm that an action has been completed successfully. Success can also be used to convey confirmation messages or statuses that are positive and that do not require any immediate action from the merchant. Use success to tell merchants that everything is OK. Use success to entice merchants or to share special offers. Caution is used to show information that does not need immediate attention from merchants, as well as incomplete or unstarted statuses. Caution is often used before a piece of information becomes more severe. Use caution to share statuses that have stalled or have not started, but are not blocked due to errors. Use caution for announcements. Warning is used to tell merchants that something needs their attention. Warning is also used to convey statuses that are in-progress, pending, or that could require merchant intervention. Warning is the strongest, non-blocking color role in the admin. Use warning for elements that require merchant intervention. Use warning for “under construction” or “coming soon” messaging. Critical is used as the color of highest importance. Elements using critical must convey messaging that implies that an action is impossible, blocked, or has resulted in an error. Use critical when the UI calls for immediate action or errors in the UI. Use critical for less important, non-actionable or contradicting messaging. Magic is used on elements that denote the usage of artificial intelligence or any other type of automation technology that saves merchant’s time while performing tasks. Use magic for UI like the Sidekick icon or the Shopify Magic indicator. Use magic as a “pop of color” to differentiate elements in the admin, or to present new features. The emphasis color role is used to indicate areas of focus within the UI and to highlight active elements in editors. Use emphasis to show merchants what is currently selected in editors like the theme editor. Use emphasis to pivot a merchant’s attention to content that is not interactive. Transparent is used on elements that have low visual affordance, and to minimize visual noise in information-heavy interfaces. This color is mainly used on smaller elements that have secondary roles. Use transparent on elements that are repeating across the admin, like edit buttons. Use the transparent color role on elements that require higher affordances like buttons that have text labels. The inverse color role offers the possibility of styling elements in situations where a darker theme is necessary. Inverse is used sparingly in the admin, and on specific elements that frame the Shopify admin, like the top bar. Use inverse on larger elements, like the top bar. Use inverse to grab a merchant’s attention on a specific element. Specialized roles are used in specific components that require detailed visual distinctions for a variety of reasons, like accessibility and high complexity components. The input color role is reserved for form elements. Input ensures that form elements will adhere to WCAG color contrast accessibility standards and makes forms look uniform across the admin. Use the input color role on form elements, or elements that behave like other form elements, like complex select boxes. Use the input color role outside of a form. This can confuse merchants into thinking an element is part of a form when it isn’t. Nav colors are reserved for the Shopify admin menu. The menu consists of specialized elements that are purpose-built to offer the best navigation experience, and therefore require a specific set of colors defined in the nav color role. Use nav colors only for the Shopify admin menu, in all levels of navigation. Use nav colors for other navigational elements, like tabs or links. These should use thedefault color role."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/colors/using-color",
            "title": "Using color — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "While color roles define the value of each concept of UI it styles, color relationships between each one of these concepts define how color is used in the Shopify admin. Background colors are used as the baseline of all UI in the admin. The admin itself has a background, and some components can also have a background if they are not built within asurface. Background colors can only have other elements of any other color except for other background colors above them. Multiple background colors can exist in the same viewport only if they exist side by side. Background color is always used in every admin interface. Use background color on surfaces or on individual elements. Surface colors are the most versatile in the color system. Surface is the background color for elements with the highest level of prominence, like a card or a banner. Many elements can sit on top of a surface to create complex components and patterns. Surface colors also come with various hierarchical levels and can be used to increase or decrease emphasis on specific areas of the UI. Use surface colors for all surfaces, like cards, tables, banners, modals, and so on. Mix multiple color role surfaces in the same component. Avoid jarring color combinations when nesting components. Fill is the background color for an element with a smaller surface area like a button or a badge. Fills are usually the most vibrant color in an interface. They sit on backgrounds and surfaces and sometimes sit on top of other fills. Fills also come with their explicit text and icon colors, calledon-fill. Use fills on smaller surface areas and on elements that pull a merchant’s attention. Use fills on large components or as backgrounds for entire interfaces. Mix fills with text colors that are not “on-fill”. These combinations might not pass minimum contrast ratio requirements. Borders are used primarily in data tables to enhance visual structure and organization or large amounts of information. They visually separate and contain elements, and can be used to either delineate rows or define the space of anested table. Use borders for tables, and divided surfaces that look like tables, to make data easier to read. Use borders when a data table is nested within a card. Use borders to delineate information. Check outDividing surfacesfor guidance. Text color can be used on any text element and any icon element that accompanies text. Text colors are designed to be fully accessible, in terms of contrast on their corresponding backgrounds and surfaces, and should only be used in tandem with them, but can generally be used on any other background or surface if contrast is sufficient. Text color that exists on a fill has its ownon-fillcolor. This relationship is strict andon-filltext can only be used on its correspondingfillcolor. Use text color to create visual hierarchy by using default, secondary, or tertiary role colors when available. Use texton-fillcolors on anything else but its correspondingfillcolor. These combinations might not pass minimum contrast ratio requirements. Use any other color except for text colors for any text that is part of the UI. Link color is used exclusively for text links that appear in lines and paragraphs of text. Link color follows the same logic as Text color: it can only be used with its corresponding background or surface colors in the same color role, but can generally be used on any other background or surface if contrast is sufficient. Use link color for text links and text links that include icons. Use link color to style text buttons. Use the appropriatecolor roleand component instead. Icon colors are used exclusively for standalone icons. These colors are tailored to meet color contrast ratios for interactive elements that do not include text. Icon colors should only be used on their corresponding background and surface colors, but can generally be used on any other background or surface if contrast is sufficient. Use icon colors to style an icon that is standalone. Use icon colors to style text, as the color contrast might not be enough. Instead, style the entire icon and text composition using the text color. Elements with differentcolor rolescan coexist alongside each other, enhancing merchants' comprehension of complex patterns when appropriately utilized in component combinations. In some cases, the superposition of elements with different color roles is necessary, like using a critical icon button on a default card. These combinations may require additional testing to check for proper color contrast. Meaningful combinations of color roles can enhance a merchant’s experience. Avoid creating color role combinations that look too jarring or that create visual competition between elements. Some elements may require a disabled state. The color scheme for disabled elements is intentionally consistent throughout the admin interface, generally avoiding the use of distinct colors for each color role. Use the disabled color scheme for disabled elements. Use opacity or any other means to communicate disabled states. The creation of new color roles is tied to the Shopify admin. Some colors available in the color palette are not yet tied to a color role. Usage of these colors is strictly reserved for illustration work. More information about what color roles are available and their respective purposes can be found in color roles. In the case of illustrations, any color of the color palette can be used. Diagrams, however, need to respect color role usage if they represent an abstracted view of the admin."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/data-visualizations",
            "title": "Data visualizations — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This section is currently being reworked to provide better guidance aligned\nwith Polaris v12. Stay tuned! This section outlines data visualization practices at Shopify and how to leverage them. The data visualization process always begins with a set of data, a question, and analysis of the data to find the answer. Each visualization should focus on answering a single question about the dataset. For example, “What are my sales over time?” By maintaining consistent styles and formats for our data visualizations, we ensure that data is presented in a truthful and accurate manner to maintain integrity with merchants. Data visualization should be approached by: Have a clear question that needs to be answered. If multiple answers to multiple questions are illustrated in a visualization, it will become over complicated and hard to understand. Testing with real data will reveal the effectiveness of the visualization. Also test when there are a few data points (one or two) or many data points (100 or more). Think about how the visualization will scale with more or fewer data points. Look out for cases where data is sparse (mostly zero) or spiky (some values are much\nlarger than others). An effective data visualization strikes the right balance between the five core traits: accuracy, intuitiveness, engagement, focus, and data granularity. It’s important to be intentional about which of these you focus on, and which are less important, in order to answer your specific question in the best way for your target audience. Understanding these traits help you choose between the many ways to visualize data by giving you a language for evaluating a visualization's effectiveness. Accuracy is about how faithfully the visualization matches the original data set. How much accuracy is needed to send your message across? A high level of accuracy may not always be needed to convey a trend or a pattern. Intuitiveness is about the ease of interpreting the visualization. Will merchants immediately understand what’s being represented, or will they need instructions? More intuitive is usually better, but sometimes it comes at the cost of flexibility. Engagement is about how much attention the visualization attracts at a glance. Is it the star of the show, or does it sit in the background? More engagement is not always better—sometimes the best visualization is one that plays a supporting role. Focus is about how merchants’ attention is directed. Is one pattern or trend surfaced more prominently than others, or are there several trends that are given equal weight? Highly focused visualizations decrease cognitive overload, but restrict the breadth of the message you are able to convey. Data granularity is about the level of detail of the data set presented in the visualization. More granular means more data points, and possibly more cognitive processing, but less granular is less detailed. The right level of data granularity depends entirely on the specific question you’re trying to answer and the audience you’re communicating to. All standard charts that show quantitative data have 2 axes that should be labeled for clarity."
                },
                {
                    "type": "list",
                    "items": [
                        "Labelling should be outside and separate from the data area. This ensures the user understands the range of the data without taking focus away from the data.",
                        "Ensure that all labels are clear and accurate in what they represent. Use simple and short language."
                    ]
                },
                {
                    "type": "p",
                    "text": "Axis lines should be used as a guideline to show quantitative data, yet be unobtrusive. Ensure axis lines only appear where the data appears. Use bleeding axis lines to the edge of the screen. Labelling the tick marks on both the y-axis and x-axis helps the visualization become more clear in what it represents. Skip labels in regular intervals. Try to squeeze all labels together. Shopify uses standard abbreviations for months and weekdays in order to reduce clutter in visualizations."
                },
                {
                    "type": "list",
                    "items": [
                        "Use 12 hour format for time, with lowercase letters (12am, 6pm)",
                        "Use the first three letters for days of the week (Sun, Mon)",
                        "Use the first three letters for months (Feb, Mar)",
                        "For specific days, use the format ‘day + month’ (10 Apr, 11 Apr)",
                        "For specific months, use the format month + year (Apr 2011, May 2017)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use standard abbreviations for labeling. Slant labels to make them fit. Shopify uses standard monetary abbreviations for the y-axis to reduce clutter. Abbreviate using ‘k’ for thousand, ‘b’ for billion. Go over 3 numeric characters, 1 decimal, or 1 letter. Labels should be clear and concise. Center all labels on the bar and the tick mark. Use decimals on the x-axis labels. Labels should be clear and concise. Left align labels and keep them above y-axis lines. Color in data visualization has a very specific meaning. The data visualization color palette provides specific colors that can be used alone or in a group, depending on the intent. Use when there is a single data series. For example, a bar chart, column chart, or a single line chart. This is used when the data set is being compared to to its past values. For example, total sales by month, this year, compared to last year. In this case, the current value will be purple and the past value will be grey. Used when there are multiple data sets to compare. For example, a multiseries line chart. Go down the list as the number of datasets increase. Used when certain data need is displayed in a negative or positive light. For example, showing positive or negative change relative to a reference value. Bar charts are used for comparing discrete categories. Use a bar chart when there is a constraint to the number of data points that can appear on the visualization, otherwise it becomes hard to scale. Showing discrete categories of data, like {products} vs {sales}. When the number of data points can exceed 6. In this case, use a table. Label each bar with what it’s displaying, as well as the value. For more best practices, visit axis and label conventions. Include a label on each bar. If the bar is too small, include it outside of the bar. Include a label on top of each bar to display what data it’s showing. Use one color for all bars. Give negative bars 60% opacity. Use multiple colors for the bars. Make sure the bars are proportional in width, roughly twice the size of the space between the bars. Make the width of each bar about twice as wide as the space between them. Make the bars too skinny. Column charts are used to show change over time, trends, and individual data points. Use column charts for when the number of data points is fewer than 30, or else use a line chart."
                },
                {
                    "type": "list",
                    "items": [
                        "Showing continuous data like sales per hour, or orders per month",
                        "Showing smaller granularities of time (hourly, daily, weekly, and monthly)"
                    ]
                },
                {
                    "type": "p",
                    "text": "When the number of data points can exceed 31. In this case, use aline chart. All bars should be the same color. Use one color for all bars. Use multiple colors for the bars. Make sure the bars are proportional in width, roughly twice the size of the space between the bars. Make the width of each bar about twice as wide as the space between them. Make the bars too skinny. Include some interactivity on the bars upon hover since users will be looking at individual data points. The top line of the tooltip should follow x-axis abbreviation and labelling guidelines, while the bottom line tooltip should follow y-axis abbreviation and labelling guidelines. Include tooltips for x-axis and y-axis values. A line chart is created by connecting a series of data points together with a line. Line charts are good to show change over time, comparisons, and trends. Use line charts when the number of data points is more than 30."
                },
                {
                    "type": "list",
                    "items": [
                        "Showing continuous data like sales or orders over time",
                        "Showing larger granularities of time (yearly, or quarterly)",
                        "Spotting overall trends and shapes of data"
                    ]
                },
                {
                    "type": "p",
                    "text": "Set up the chart area using theaxis and labelling guidelines Line graphs work well when multiple datasets need to be compared. Use thecolor paletteto select colors. Use contrasting color and include a legend. Use more than 4 lines. A display metric is a quantifiable measure that is used to track and display the status of a specific process. Examples include a sum, an average, or a movement in a positive or negative direction. Showing a single value with a base unit. Metrics should be paired with their base unit in close proximity to the number. Use concise and clear language for metrics. Metrics should be scoped to indicate the timeline of the data. Include a dimension of time to scope the value. If needed, consider including a comparison indicator, such as comparison to the previous time or average. Use green for positive movement. Use red for negative movement. A table is a good way to showcase a large amount of information which has a variety of columns and data to show for each entity. A table should be used when multiple metrics and categories need to be presented together, and accurate lookup of the data values is more important that showing patterns in the data."
                },
                {
                    "type": "list",
                    "items": [
                        "Showing large amounts of discrete data with many variables",
                        "Showing values across multiple categories and measures",
                        "Allowing for filtering and ordering when comparison is not a priority"
                    ]
                },
                {
                    "type": "p",
                    "text": "Consistent vertical alignment is essential for fast visual comparison between values in a table. Left align non-numeric values and right align numeric values. Center column headers. In order to reduce clutter and non-data ink, we prefer to subtly separate each row. Use light lines to indicate separation between rows. Highlight every other row to indicate separation. Totals allow merchants to understand the data holistically and should be easy to find. Place totals as the first row beneath the headers, and bold the text. An important part of designing clear visualizations is making data accessible to everyone. Merchants with vision issues might have trouble understanding visual presentations of data, even with assistive software. Merchants with dexterity or motor issues might have trouble using interactive visualizations that depend on fine motor control. Others might simply have trouble understanding data presented in a chart or graph. To support the needs of different merchants, always provide multiple formats for data visualizations. Let merchants access their data in multiple formats. For charts and graphs, it’s often helpful to offer the same content in a data table that’s either on the same page or on a related page that’s easy to discover. Provide data visualizations in only one format. Color is critical for visualization, but can cause issues for merchants with color blindness and low vision. Color should be used in a way that supports the interpretation of visual information for all merchants, including those with visual issues. Ensure that text, line, bar, and other colors have sufficient contrast against their background. Use colors that can be distinguished from each other to support merchants with different forms ofcolor blindness. Require that merchants are able to see color to understand the information provided in the chart or graph. To learn more, see guidance aboutaccessible colors in Polaris. <svg>and<canvas>elements are excellent tools for creating engaging, dynamic visualizations in HTML. However, they are frequently difficult to access using assistive technologies. Assistive technology users may not be able to access content in the correct order, find text equivalents for visual information, or access interactions with the keyboard. In general, hide<svg>elements from screen readers usingaria-hidden=\"true\"and provide a separate text equivalent for the graph or chart. Although different visualizations may benefit from different treatments, try to prioritize creating a consistent experience."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/depth",
            "title": "Depth — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Depth can effectively establish visual hierarchy. The higher an element sits in the Z scale, the more important it will seem. This enables merchants to understand the importance of different elements and guides their navigation through the interface. Use depth tactically, and to differentiate between primary and secondary elements. Overuse depth, as it can lead to a cluttered and confusing interface. Too many elements pulling attention can disorient merchants. Add unnecessary depth to an element. The depth of an element should always be related to its importance or interactivity. Allow elements to protrude outside of their parent containers. This disrupts the natural perception of depth and hierarchy, leading to a visually confusing interface. Instead, maintain the integrity of parent-child relationship in the layout for a cohesive depth perception. Depth indicates interactivity. Interactive elements, like buttons or cards, get more depth to signal to merchants that they can interact with such components. Use depth to indicate interactive elements, so it’s obvious what elements merchants can interact with. Give static elements unnecessary depth, as this can mislead merchants to think they’re interactive. Apply intuitive changes to an element's perceived depth upon interaction, like pushing a button down. This provides visual feedback and intensifies the sense of tactility. Apply unexpected changes to an element’s perceived depth. This causes disorientation and makes the interface feel ill-conceived. Depth helps to guide the merchant's focus. By giving more depth to an element, you can guide the merchant's attention towards it. Use depth to highlight action and large pieces of information that overlay on top of other information, to ensure merchants see these first. Rely solely on depth to create focus. Not all merchants perceive depth in the same way, so it's important to use a combination of techniques to ensure your design is accessible to everyone."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/depth/creating-depth",
            "title": "Creating depth — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Use a combination of shadows and layering to create a sense of realism and\nhierarchy in the interface, guiding merchants' attention and indicating\ninteractivity. Shadows and bevels create the illusion that an element is raised above the rest of the interface, indicating that it's interactive or important. Use shadows and bevels to indicate important interactions. This will make buttons and other important interactive elements appear more tactile, obvious, and inviting to click. Overuse shadows or bevels, as they will make the interface look cluttered and confusing. They’re meant to be used sparingly and consistently. Use consistent shadow and bevel styles across your interface, to maintain visual harmony and make the interface feel more cohesive. Use different styles for similar elements. This can confuse merchants about the hierarchy and interactivity of the elements. Lighting plays a crucial role in creating the illusion of depth. It reinforces interactivity and guides merchant's attention. Decrease the brightness of an element when it’s being pushed down in the Z index. When a button is pressed, it goes down. Increase the brightness of an element when it’s being pushed up in the Z index. When a page is active, it goes up. Layering can be used to organize elements and create a sense of hierarchy. By placing elements on different layers, you can indicate which elements are in focus or interactive. Use layering to organize the interface and guide merchant focus. Higher layers should be used for more important or interactive elements. Use too many layers in one screen, as it can confuse merchants and make the interface difficult to navigate. Keep most elements on the same layer to establish a visual baseline, and allow for purposeful use of layering, when necessary, to denote importance or interactivity. Resort to layering as the initial tool for emphasis. Explore other visual techniques first to highlight elements without disrupting the layering system. Surfaces can enhance depth perception in an interface by establishing hierarchy and guiding attention. Distinct separation between surfaces, depending on the visual boundary, can suggest an indentation or elevation, further intensifying the sense of depth andspatial organization. Use a gray background to de-emphasize contained information. This will divert merchants’ attention towards more important information, as the muted background visually recedes, pushing the contained content into the background. Use bright or contrasting colors for container backgrounds or borders. This distracts merchants from the main content and creates a cluttered UI. More guidance can be found underColor. Use unique styles for surfaces, like inset shadows. This makes the interface noisy and creates confusing information hierarchy."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/depth/shadow-tokens",
            "title": "Tokens — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The primitive shadow tokens scale offers a versatile range of shadows that can be applied to components, providing a fundamental foundation for creating visual cues of depth in the UI. These tokens are categorized into three sets:"
                },
                {
                    "type": "list",
                    "items": [
                        "Elevation tokens: These tokens visually represent a shadow being cast on a surface below the element, effectively simulating a sense of elevation.",
                        "Inset tokens: Demonstrate an inner shadow creating the impression of an embedded element.",
                        "Bevel tokens: provide a dimensional appearance to an element, enhancing its perceived shape and structure."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each of these sets is declared with the shadow token group name. In addition, the scales offer comprehensive ranges in increments of 100, and the base value is set at 100. Components such as buttons require component-specific shadows to visually exhibit their unique tactility. To achieve this button styling, component-specific shadow tokens are assigned to each variant of the button. These tokens reside in a separate token collection and should only be utilized for the specific component they are named after. When combining the bevel token with elevation tokens, builders can achieve a desired visual distinction that is necessary to create contrast between an elevated surface and its background. The bevel token adds dimensionality to the element, while elevation tokens provide a drop shadow effect that creates the perception of distance. To implement this pairing, assign the bevel token as a pseudo class withabsolutepositioning and set the mix-blend-mode CSS property toluminosityto create the desired effect."
                },
                {
                    "type": "code",
                    "code": "position:relative;box-shadow:$boxShadow;border-radius:$borderRadius;border:$border;&::before{content:$content;position:absolute;top:0;left:0;right:0;bottom:0;z-index:$zIndex;box-shadow:var(--p-shadow-bevel-100);border-radius:$borderRadius;pointer-events:none;mix-blend-mode:luminosity;}"
                },
                {
                    "type": "p",
                    "text": "Components use specific shadow tokens. The following table can be a useful resource."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/illustrations",
            "title": "Illustrations — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This section is currently being reworked to provide better guidance aligned\nwith Polaris v12. Stay tuned! Illustration adds information. It provides context, adds clarity, or leads to the next step. It gives merchants a deeper understanding of what they’re working on. Illustrations are all part of the same visual family. Inconsistencies lower the overall quality of the experience, and can distract merchants or make them feel like they’re in the wrong place. Illustration should understand and support the merchant’s experience. Each illustration needs to feel appropriate for whatever situation it shows up in. Each illustration conveys one thing. The story is easy to understand, so merchants intuitively know how to accomplish whatever they came here to do. Illustrations use a special set of colors designed to work well in the places where they show up. The palette is limited: individual illustrations use whites, grays, and two or three colors each. Colors are also less saturated than the surrounding UI, so they don’t distract from core interactions. Objects have realistic proportions so they’re easy to recognize. Simple geometric shapes with rounded corners build images that are clear and approachable. Representations of people use more organic shapes. The perspective is flat and two-dimensional so the entire area of the illustration is of equal importance. Drop shadows give things subtle depth when necessary. An additional side of an object can be added if things aren’t easily recognizable from a single side. Each illustration has negative space around it so it feels balanced in the place it lives, and so its visual weight is the same as other illustrations that live in the same places. Line makes and arranges shapes in the space. All illustrations have smooth lines without texture. Smaller objects have straighter lines, while larger objects can have more detailed, curved lines. Intersecting and continuous lines are a key element of the admin illustration style, but they aren’t forced. They make a simple illustration feel elegant and visually interesting without being distracting. Illustrations need some detail to make sense, but too much can be noisy. They have the minimum amount of detail necessary to make them feel realistic but still simple. Fine details are rarely smaller than 4px in height or width. There are places where illustrations always appear, and places where they’re used only sometimes. Merchants see an empty state illustration the first time they access a new part of the experience, before they’ve had the chance to do anything there yet. It introduces what they can do here, and sets expectations for what’s ahead. Onboarding tasks help new merchants set up their store. Illustrations frame what each task is for. And by changing in appearance, they reinforce when a task is complete. Announcements let merchants know about something that might help their business. When the announcement celebrates a major merchant milestone or introduces an important product, illustration helps make it special or noticeable. In some rare instances, unique spot illustrations can be used to achieve a specific goal, like to draw attention to something important on a busy page, or to explain a technical concept."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/interaction-states",
            "title": "Interaction states — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This section is currently being reworked to provide better guidance aligned\nwith Polaris v12. Stay tuned! Successful interaction feedback is informative, not decorative. Avoid elaborate transitions that create visual noise or intense color changes. Distracting animation can create disturbance and make an interface unpleasant to use. Consistent treatments for interaction feedback create recognizable patterns. If an interaction produces different feedback across the Shopify admin, it deteriorates the integrity of the pattern and risks confusing merchants. Keep in mind that merchants interact with interfaces differently depending which input device they’re using. Devices they may be using include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Mouse",
                        "Touch screen",
                        "Keyboard",
                        "Voice",
                        "Game controller",
                        "Refreshable braille display"
                    ]
                },
                {
                    "type": "p",
                    "text": "To learn more, check out theaccessibility guidelines. Provide merchants with cues as to what the interface will do if they interact with it. By using signifiers we set expectations about what components can do, which creates a more intuitive interface that’s easier to use. The types of signifiers include: Explicit, where content directs merchants to do the intended action, such as “Sort” or “Save.” Hidden, where the clue isn’t revealed until the merchant interacts with it, such as hovering or using tab navigation to see if a button is clickable. Negative, where the action appears inactive (like the button is grayed out and doesn’t respond to hover) because it isn’t available for the merchant to use. Use feedback indicatorslike theprogress barcomponent or thespinnercomponent to let them know that the interface received their request. If appropriate, you can also provide added information about what or how long it will take to complete. For non-disruptive feedbackon the outcome of an action, use theApp Bridge Toastcomponent. For an unsuccessful completionthat requires the merchant to take action, provide information about what prevented the action from completing successfully and what the merchant can do to fix the problem. For example, use the validation error state of thetext fieldcomponent."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/layout",
            "title": "Layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Space plays a vital role in establishing connections between items. The principle of proximity states that the closer objects are, the stronger their perceived relationship. Grouping similar items together helps merchants understand which elements are\nrelated and helps them make faster decisions. Group similar data points or tasks in the same card. Nest inset shapes and surfaces. In the Shopify admin, larger, heavier, and contrasting elements attract attention and create visual rhythm. Smaller, lighter, and more subtle elements are work-oriented and provide detailed information. Use size, weight, and contrast to establish hierarchy in the admin. Divider\nlines are used to delimit rows of information in data and index tables, and\nrarely for dividing information elsewhere. Use weight and contrast to introduce sections of the UI. Use divider lines to create visual hierarchy or separation outside of indexes of tables. Since the admin is more like software, rather than a website, elements need to be sized appropriately based on their job. Compact elements add detail, and larger elements command more attention.\nSurfaces adapt to these components and offer an optimized view of the admin. Create compact components for specialized, minute tasks. Contradict the importance of a task with its size in the admin."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/layout/density",
            "title": "Density — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Information-rich interfaces, like index pages or data tables, require high-density layouts for efficiency. By presenting information in a denser format, merchants can quickly access and compare data, enhancing the effectiveness of the Shopify admin. Use divider lines and surface colors to create clear delineation between sections in a high density component. Another way to create visual zones in high density layouts is touse\ndifferent surface colors. Secondary\ncolors can be used to create visual hierarchy within a high density component,\nand to guide merchants to the data that matters most. Use different surface colors to style inset surfaces and create visual divisions without using lines. Dividing surfaces vertically and in a grid pattern also offers a way to increase density. This type of visual pattern is better suited for selections or data visualization and should be used accordingly. These divisions are made by using different surface colors instead of using line dividers. Divide surfaces into a grid pattern for complex components that expect an action, like a selection. Divide and organize surfaces vertically by creating columns of unrelated content. Smaller components, like option lists or popovers, are built with high density in mind. Because their main purpose is to offer a set of actions to the merchant, they need to feel small and efficient. Effectively designed action components give thefeeling of a pro toolin the Shopify admin and increase efficiency when using different features. Use high density consistently when offering lists of options to choose or select from. Suddenly change density in an action component. Always offer the most condensed option possible instead. Low density interfaces are best suited for focused editing interfaces, like a product detail page. These interfaces offer larger hit targets, wordier buttons, and are best suited to specialized UI that offers uncommon actions in the Shopify admin. Because low density interfaces offer more space, there is more for the merchant to analyze before taking action. Low density interfaces can also contain high density components, like a complex text editor within a card that serves to edit a product title and description. Top-to-bottom visual rhythm is often used to create a linear and predictable layout that is easy for merchants to understand. Low density layouts are useful when switching contexts in the same page often, which happens often in the Shopify admin. Use grid or vertical dividers to create low density layouts. These can be confusing and hard to understand in a focused editing UI. Cards are the best way to switch context in low density layouts. Each card can be specialized in a set of features that requires the merchant to recenter their focus. Split each context into its own card. Mix low-density information with a high-density component in the same card."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/layout/layout-tokens",
            "title": "Tokens — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Space tokens should be used whenever you need to apply space around or between elements within. You should apply space tokens to all space related css properties such as padding, margin and gap. They should not be used for non-space declarations such as height, width, outline-offset, etc. Always use the proper token group when using Polaris tokens. If a token doesn’t seem to fit your need feel free to reach out in the #polaris channel or create an issue in Github. Primitive tokens refer to generic tokens that can be applied to provide spacing around or between components. They give access to the full scale of values offered by Polaris for managing space within the interface. Each is simply named by declaring the token group and then the percentage multiplier of our base value of 4px. Therefore, space-100 is equal to 4px while space-400 equals 16px. Similar to color tokens, semantic space tokens provide spacing for specific and defined contexts within the admin. These tokens should only be used for that explicit purpose. When no semantic token seems to fit your need, use a primitive token instead. Semantic tokens explicitly declare what css selector they should be applied to. For example, space-card-padding should only be used to set the padding within the Card component. Always use semantic tokens over primitive ones when possible. Only use semantic tokens for the type of space as specified. Semantic and primitive space tokens can be accessed via the auto layout padding and gap inputs in the right panel. Space tokens can be applied in two main ways in Polaris Reach. First, all of the layout components such as Box have access to the tokens via their prop api. Second, when writing your own css you can use the token directly via the css variables that come with the Polaris token package."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/layout/spacial-organization",
            "title": "Spacial organization — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The Shopify admin is built by using a combination of components like cards, popovers, modals, tables and so on. These components define the elevation of different surfaces in the admin and how they can interact with each other. Surfaces in the admin contain other elements, like badges and text. Cards, popovers, modals and other such components are surfaces that are used to build the admin. Surfaces can be divided in different ways to offer flexibility when laying out components in the admin. Nested surfaces can be grouped together within another surface to achieve visual separation between different parts of a component. Divider lines are reserved for data and index tables. Group nested surfaces together to create visual separation. Don’t use horizontal lines to divide a surface that isn’t a data or index table. Use horizontal lines to divide a card that acts like a data or index table. Building data or index tables with nested surfaces can make them feel inefficient. Prioritize a grid or list pattern when dividing surfaces. Avoid breaking symmetry when grouping surfaces together. Nesting surfaces and other elements is crucial to the pro-feel of the Shopify admin. Careful consideration should be taken when using elements of varying border radiuses in order to create the feeling that the interface is purpose-built. Reduce theborder radiusof inset surfaces in order to create a nested look. Make all nested elements have the same, or larger, border radius than their parent. Change the border radius of elements like buttons or badges when nesting them. Tablesand lists that exist within another container follow slightly different spacing guidelines. Horizontal padding is adjusted to give more space for data, and to avoid having too much empty space overall. Adjust padding in nested tables to optimize the use of space. Nest tables in cards or other containers when there’s other content in that card. Avoid nesting a table in a card if it’s the only content of that card. Shaped elements contain other design elements within a container that has a certain shape. These elements can live on surfaces or on backgrounds and are often smaller and serve a single purpose, like badges. Shaped elements often do not have an elevation and their shapes are considered to either be target zones if they’re interactive, or serve as a visual indicator to make them easier to scan. Pay attention to spacing when creating smaller elements. This includes using different sizes per side to achieve visual balance. Adjust the size of shaped elements so they work well with their siblings, like in the case of a button next to an input field. Buttonsare shaped elements, as their contents can vary their sizing to adjust for visual balance. Sizing of buttons depends on context. Standalone or grouped, buttons have a default size that is widely used in the admin. Because buttons often pull the most attention to a primary action, their size has been adjusted so as to not overwhelm the visual balance of the admin. Breaking alignment or spacing may be required in some rare instances. Depending on the layout of the page, alignments may be mathematically inconsistent, but will be visually aligned. Make sure to use imaginary keylines to create neatly aligned containers in the UI if spacing is inconsistent within each container. If required, different alignment should be applied to separate containers, and never within the same container."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/motion",
            "title": "Motion — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Motion has a clear purpose. It helps merchants understand the interface and the results of their actions, instead of being used as decoration or entertainment. Transition between two menu items, featuring a quick subtle transition that\nanimates elements that were already in view. Use motion to enhance merchant understanding and provide context. Transition between two menu items, featuring a elaborate transition that\nanimates all elements that change on the page. Allow motion to complicate the interface or hinder merchant comprehension. Motion should be a reaction to merchant interactions, providing immediate visual feedback, and making the interface feel alive and responsive. An animation of a tick mark that mimics how one draws it on a page. Use motion to provide feedback on merchant actions. The scale of the motion\nshould match the scale of the action performed. An elaborate animation of the tick mark that fills in the container and rotates\nthe tick mark. Use motion that doesn't correspond to merchants’ interactions and expectations. Motion should feel quick and subtle. A snappy animation starts rapidly, and slows down towards the end, making the transition feel quick while still providing a cue as to where things are coming from, making the motion feel more natural. Quick transition with a dropdown menu moving into position Make motion feel snappy. This gives the animation a lively and energetic feel\nthat doesn’t get in the way of merchants. Dropdown menu showing up instantly without a transition. Use abrupt, instant, or distracting motion, as these make it hard to follow\nalong with changes happening on the interface."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/pro-design-language",
            "title": "Pro design language — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "\"Pro\", in Shopify's context, refers to a design language that prioritizes efficiency and intuitive interactions, catering to the daily tasks merchants perform everyday. It involves using space efficiently to allow merchants to view more data at once. It's about avoiding being verbose and making the interface action-driven with intuitive icons for swift navigation. It also means combiningmotion,color, anddepthto create a responsive and dynamic interface, with clear affordances, that enable intuitive interaction without confusion about interactivity. Visual language is clear for merchants. Strong meaning is associated when using color. Red means danger, green means go.Color rolesare heightened in the interface and add a layer of detail that merchants can quickly understand and master. Leveraging established symbols to identify key functionality helps merchants\nunderstand the admin at first glance.Using clear iconsthat\nare widely recognized creates a clear and predictable experience. Every visual in the admin plays a role in helping merchants scan information\nand perform tasks without unnecessary distractions. Space is optimized while maintaining high usability. Densityin the interface adapts to the task: high density is used in data-rich environments, while low density is employed in focused, detailed areas. Information is structured in a clear visualhierarchy,\nemphasizing important details through variants like size, weight, and color. Space is used tocreate groupsof\nrelated information.Coloradds or removes emphasis to make\nthe interface easier to scan and enables efficient decision making. Interfaces incorporate a sense of realness. Primary interaction points provide adramatic visual responseto interaction. Variables like position and lighting change to mimic how physical buttons react when pressed. A hover transition is smooth and unobtrusive, whilst feedback from a click feels more dramatic and visceral. A series of buttons in every state, default, hovered and clicked Interactions are quick and user-actions provide instantfeedbackthat feels almost life-like.\nTransitions are seamless and help create an intuitivenavigationexperience. Navigation opening/closing animation Detailed interactions, such asanimatinga checkbox when it is\nticked, create a sense of familiarity and reference how merchants interact\nwith real-world objects. These animations contribute to making the admin\ninterface feel dynamic and alive, whilst making merchants feel more\ncomfortable and confident in their interactions. Animation of a checkbox being ticked in an index page Objects with similar appearance share a common behavior. Elements that are visually similar behave consistently throughout the interface. Consistency in behavior reduces confusion and cognitive load for merchants. By usingconsistent signifiersthroughout the user\nexperience, merchants can effectively apply the concepts they learn as they\nnavigate the admin. This enables a smoother learning curve and makes the\ninterface progressively easier to use."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/sounds",
            "title": "Sounds — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This section is currently being reworked to provide better guidance aligned\nwith Polaris v12. Stay tuned! The duration, volume, and character of a sound should all be dictated by the level of urgency of an event. For example, an alert indicating that a customer is struggling to complete checkout requires more urgent attention and immediate action. An alert indicating that a customer has arrived at a storefront is informative, but doesn’t require immediate action. The sounds used during these events should be customized to reflect the differences in urgency. Some sounds occur many times per day. While appealing on first listen, a sound may become irritating after ten, and unbearable after a hundred. Merchants that hear a sound repeatedly may quickly grow tired of it.Our sounds should be informative and not annoying.When possible, use data to determine how often a sound is triggered. Merchants are likely to hear our sounds in a variety of contexts. Clean, focused, and succinct sounds convey information better than muffled or distorted sounds. While you may be testing your designs using headphones or loudspeakers that reveal the audible frequency spectrum clearly, a smartphone speaker will affect the quality of the sound. Smaller speakers are more susceptible to distortion. Sounds on mobile devices should be played at lower levels than on a desktop computer or laptop. Test sounds on a variety of devices and volume levels. Some people can’t rely on sound to receive cues or notifications. Merchants may have a disability that affects hearing or auditory processing. Depending on the merchant’s preferences and technologies, they may receive sound cues through haptic or visual feedback, but don’t assume that they’ll be able to perceive sound. Always include an alternative method to convey information, like text-based notifications or visual changes in the interface. Sounds in our product help convey information. There’s an important balance between having too many sounds and not enough. Useful and well-planned sounds will help with merchant understanding. Unnecessary sounds will reduce the perceived quality of our product. Even though merchants might miss important information if they turn off their sound, we should always provide the option for them to do so."
                },
                {
                    "type": "list",
                    "items": [
                        "For an event that requires a merchant’s immediate attention, use an alert to encourage them to pause their workflow and take care of things.",
                        "For something that’s useful for a merchant to do, but not necessarily immediately, use a notification.",
                        "To confirm success, use feedback for a successful action.",
                        "For statement of failure, use feedback for unsuccessful action."
                    ]
                },
                {
                    "type": "p",
                    "text": "Be creative and intentional with your sound design. And remember:"
                },
                {
                    "type": "list",
                    "items": [
                        "Short sounds should be no longer than 250ms, long sounds no longer than 1 second.",
                        "Sounds should be in the same “family.” If you introduce a new note, key, or timbre, make sure there’s a good reason.",
                        "Create two versions of every sound:A louder version for desktop applications.A quieter version for mobile applications where the speakers are smaller and may distort more easily.",
                        "A louder version for desktop applications.",
                        "A quieter version for mobile applications where the speakers are smaller and may distort more easily."
                    ]
                },
                {
                    "type": "p",
                    "text": "Design sounds with as much intentionality as other design aspects of Shopify’s products."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/typography",
            "title": "Typography — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Typography plays a crucial role in defining hierarchy within design. Variable weights convey different levels of importance, where bolder weights indicate greater significance. Good type positioning also establishes visual prominence and emphasizes key information. Use a combination of weight, size,colorand positioning to define hierarchy. Rely only on color to define hierarchy. Polaris assigns meaning to type based on its usage. Mono is used for code; tabular number stylesets are employed for numbers and currency amounts; and typescales are designed with UI design in mind. Consistently style similar or repeating type in the UI. Repurpose or reinterpret known patterns in typography, especially when it comes to interactions."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/typography/font-and-typescale",
            "title": "Font and typescale — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The Shopify admin utilizes the Inter font, an open-source variable font that offers adjustable knobs for fine-tuning font weight and slant. For languages where Inter doesn’t offer a complete set of glyphs, the admin employs the system font to ensure proper rendering and compatibility. In code applications, the system mono font is used consistently. Use the mono font in all instances where there is any type of reference to code. Always use mono font in any place, like text inputs, where code is expected. Don’t use mono to align numbers for readability. Usetabular numbersinstead. Don’t use mono for decoration, or to grab attention. Polaris offers two typescales: heading and body. These typescales are used to create visual pairings in the UI and all line heights are aligned with the 4px grid. The typescale in the admin is tailored for UI usage as the primary focus. Designed with software in mind first and foremost, it’s optimized for use in high density layouts with intricate details and complex features. Learn more about applying type in theusing type section."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/typography/typography-tokens",
            "title": "Tokens — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "The primitive font scales have five key token sets:"
                },
                {
                    "type": "list",
                    "items": [
                        "Font Family",
                        "Font Weight",
                        "Letter Spacing",
                        "Font Size",
                        "Line Height"
                    ]
                },
                {
                    "type": "p",
                    "text": "The font size and line height token scales adhere to the convention of the size token scale, which translates to pixel values. On the other hand, the font weight and letter spacing scales adopt a contextual approach that is more appropriate for their design requirements. Polaris introduced a new layer of semantic text tokens that reference the primitive font scales. These semantic tokens create a streamlined approach that enhances consistency and facilitates the assembly of Text variants.\nBy aligning semantic text tokens with the respective font scales, a composite solution is achieved, directly mapping to the various variants available within the Text component. These semantically-routed composite building blocks include properties such as font size, line height, font weight, letter spacing, and font family, and allow for a comprehensive and customizable typographic experience. The Text component provides a variant prop that seamlessly applies font token styling specific to the selected variant, ensuring consistency. Alternatively, when markup access is limited, semantic text tokens offer flexibility for styling elements. Polaris also exposes font scales in the token styles.css file, allowing users to create custom variants. Using the Text component, semantic (composite) text tokens, and font scales, builders receive both flexibility and system synchronicity."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/design/typography/using-type",
            "title": "Using type — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Polaris uses line height and vertical alignment to set type in the UI. Type in the admin is aligned on the 4px grid. For this reason, all line heights are multiples of the 4px base unit. This ensures that bounding boxes, which are defined by line heights in web, are used to define how text is positioned in the UI. Vertical alignment is used on type where line height and padding on an element are not sufficient to fill the entire space. Careful consideration needs to be taken in order to strike visual balance. Consider aligning type vertically when bounding boxes differ from one element to another. Top aligning elements that are presented in-line, but have varying bounding box sizes, can create a feeling of a broken UI. Proper type hierarchy facilitates UI flow and rhythm when building for the Shopify admin. Headings introduce new sections, and subsections in the admin. They initiate the visual rhythm of a page by defining the main use of each feature in the interface. Headings are used in almost all cards as a way to identify the feature they contain. Use shorter headings. Headings don’t need to be larger than the content, especially if the content or component is complex. Use proper heading sizes. Headings should be equal or larger in size than the following text, unless they are used as a lede or kicker. Optimize the usage of headings. They might not be necessary if the content they are introducing is self-evident. Use a consistent weight in your headings. Body is used everywhere else in the admin. Buttons, inputs, paragraphs, navigation elements, etc. Any element that is part of the usable UI uses body type. Body is often the same size as its leading heading, but will rarely be the same weight. Weight plays the role of pulling the merchant’s attention to specific parts of the UI, by complementing other design choices like color and positioning to reinforce the importance of the intended interaction. Body can vary in weight a lot, and can even mimic the style of headings for a streamlined look. Use different body type sizes and colors to create clear hierarchy in complex components. Using the same body size everywhere can make it hard for merchants to identify key elements in components. Formatting modifies the appearance of type to enhance its readability, emphasize certain elements, or to convey specific meanings. Text that is underlined can serve two purposes: linking to other pages, or offering additional contextual information through a tooltip or a popover. Text links have a solid underline and use a distinctlink colorto differentiate them additionally from surrounding text. Definition indicators have a dotted underline and only react on hover or touch without sending merchants to another section in the admin. List elements are introduced with bullets, or more preferably, with icons that are related to the content they introduce. Use lists to share short, easily identifiable, and relevant bits of information, like specific features. Use lists for task completion interfaces. Tabular numbers are a feature that equalizes the widths of all numbers in type to make sure lists of numbers align with each other vertically.\nThe Shopify admin uses tabular numbers every time currency or money amounts are presented. Use tabular for numbers that repeat in tables to increase their scannability. Use tabular numbers for all currency amounts. This makes them easily discernible and visually constant everywhere in the admin. For larger numbers, like in the case of the plans page, or any promotional or incentive visual where numbers are larger than the rest of the content, you can forgo tabular numbers. Don’t use mono in lieu of tabular numbers to achieve a tabular number look. In Polaris, type and icons are part of the same family. When used with type, icons inherit the color of the copy they are tied to. Icons and symbols align with type when used outside of a component, and use the same text color as the accompanying text. Use micro icons for small body text, like in smaller badges. Use regular icons everywhere else. Spot icons are not used in-line with type, nor are they considered to be part of typography."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/foundations",
            "title": "Foundations — Shopify Polaris",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "AccessibilityMaking commerce better for everyone means caring deeply about making quality products. A quality product should have a fantastic user experience (UX).",
                        "Formatting localized currencyCurrencies are formatted differently in different countries and languages.",
                        "Information architectureEverything we create at Shopify has an underlying foundation of information architecture. If you’re a designer, a content strategist, or a UX developer, you’re already doing IA work.",
                        "InternationalizationMake commerce better for everyone by building interfaces that work everywhere. These guidelines will help you design, write, and build products that can be used in every part of the world.",
                        "Shopify experience valuesAt Shopify, we empower commerce at a global scale. We build products, tools, and services for people to start, manage, and scale their businesses. We manage enormous complexity for commerce giants, and give new entrepreneurs the best chance to succeed."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/foundations/accessibility",
            "title": "Accessibility — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This includes:"
                },
                {
                    "type": "list",
                    "items": [
                        "A beautiful and functional design",
                        "Consistent and usefulcopy",
                        "Principles ofuniversal designand inclusivity"
                    ]
                },
                {
                    "type": "p",
                    "text": "It’s important that Shopify products—andPartnerproducts—are usable and useful to everyone. Everyone is a pretty big group. It includes our merchants, their customers, our developer partners, our employees, and the greater tech community at large. That also includes all members of our community who have disabilities. Disabilities may affect how people move, see, hear, communicate, learn, understand, and process information.\nAs a result, it’s important to consider how to design and develop your product to support a wide range of needs and experiences. In the United States, as many as 1 in 4 adults has at least 1 disability [Source:CDC]. In Canada, the estimate is 22%, and elsewhere in the world the estimate is closer to 1 in 7 [Source:Statistics Canada,World Bank]. Using ourcomponentsis a way to improve accessibility and consistency when building products for Shopify."
                },
                {
                    "type": "list",
                    "items": [
                        "The component library in this style guide includes code we can use across applications",
                        "This component code includes accessible markup",
                        "Since the code exists in a single component that gets reused, it’s easier to update and fix any bugs"
                    ]
                },
                {
                    "type": "p",
                    "text": "The build-it-once, use-it-everywhere model means the accessibility knowledge of the designers and developers who build these components is available to all of Shopify and our partners. Because of this, merchants get a consistent experience that can be leveraged into accessible products. Many accessibility features come free in the components. But, it’s important to make sure that components are integrated in a way that doesn't create unforeseen accessibility barriers. Depending how components are used, there may be more design and implementation considerations. Be sure to test user task flows post integration. Don’t programmatically move focus to new content without merchant input. Polaris components that use controls to display overlays, such as modals and popovers, manage focus automatically."
                },
                {
                    "type": "list",
                    "items": [
                        "When a merchant activates a link that goes elsewhere in the page, move focus to that content",
                        "When a merchant must access an overlay, move focus to it",
                        "When a merchant submits a form that results in an error, move focus to the error message"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Move focus when content updates in the background",
                        "Move focus when the user is actively working elsewhere on the page"
                    ]
                },
                {
                    "type": "p",
                    "text": "The only case where focus should be managed without the merchant’s okay is when the merchant needs to be interrupted because they cannot continue their current workflow. Merchants will expect to interact with controls and content in ways that follow the defaults for their browser, platform, and assistive technologies. Introducing non-standard features can give merchants better ways of accomplishing tasks, but they can also create barriers. For example, merchants who rely on the keyboard will expect that buttons can be activated with theenter/returnkey or thespacekey. If buttons are programmed to be used with different keys, merchants will need to be instructed on how to use them. Before designing or building custom features that use non-standard controls or interactions, first consider whether the goal can be met using native features. If non-standard interactionsarerequired:"
                },
                {
                    "type": "list",
                    "items": [
                        "Carefully follow guidelines and best practices for designing, building, and testing custom features on your platform",
                        "Give merchants clear instructions for using the custom feature",
                        "Provide an additional, standard way to accomplish the task"
                    ]
                },
                {
                    "type": "p",
                    "text": "Our components are tested for accessibility with automated and manual techniques. Merchants should expect to be able to access features built with our components using modern assistive technologies. These include native and third-party tools like:"
                },
                {
                    "type": "list",
                    "items": [
                        "Screen readers",
                        "Speech recognition programs",
                        "Supports for low vision and color blindness",
                        "Alternative keyboards",
                        "Switch devices",
                        "Tools for readability"
                    ]
                },
                {
                    "type": "p",
                    "text": "Polaris components start with web standards for HTML, CSS, and JavaScript. Features from the Accessible Rich Internet Applications (WAI-ARIA or ARIA) specification are used to build functionality that is not available in native HTML. To help people who rely on assistive technologies, such as a screen reader or other text to speech programs, our components usealternative textfor icons and images used to convey information and actions (like buttons and links). Polaris targets WCAG 2.1 Level A and Level AA success criteria, and seeks to provide a highly usable experience for everyone. For more information, see the following resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "WCAG 2.1",
                        "ARIA 1.1",
                        "Shopify's statement of commitment to accessibility"
                    ]
                },
                {
                    "type": "p",
                    "text": "Sometimes, building accessible and inclusive experiences can be difficult. If we’ve made any mistakes in this style guide, pleasereach out by creating a GitHub issueand help us make it better."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/foundations/experience-values",
            "title": "Shopify experience values — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "These values are at the heart of how we build experiences at Shopify. They’re important whether you work at Shopify or you’re developing third-party apps or themes. The best part of this shared set of values is the conversations they enable. They are fantastic lenses through which to view, critique, and improve our work. We always aspire for Shopify experiences to feel: Above all else, we show care for the people who use our tools and products. We’re here to make their day-to-day and long-term work better — no matter who they are, where they are, or what platform they’re using."
                },
                {
                    "type": "list",
                    "items": [
                        "Build experiences that work on every screen, on every platform, in every language, and in every country.",
                        "Take time to understand where we can build for a general audience, and where we should offer different paths for different needs.",
                        "Respect the reality of this work – don’t assume the perfect situation, preparation, or usage."
                    ]
                },
                {
                    "type": "p",
                    "text": "We want people to feel like they can accomplish whatever they’re trying to do. Our experiences should give people confidence that they’re capable of achieving their goals, no matter their level of experience."
                },
                {
                    "type": "list",
                    "items": [
                        "Help users complete their tasks, without taking away decisions or independence.",
                        "Optimize for the most important tasks without blocking people from doing the rest.",
                        "Hide complexity where you can, but give people access to more sophistication if they need it."
                    ]
                },
                {
                    "type": "p",
                    "text": "Shopify experiences should feel like they were created with the highest level of craftsmanship. Through thoughtful details and small touches, we combine the power of professional tools with the simplicity of consumer products."
                },
                {
                    "type": "list",
                    "items": [
                        "Work to understand the complex problems users face, then find clear and approachable solutions to those problems.",
                        "Delight people with how powerful and effective an experience is, not with extra decoration or flair.",
                        "Look for meaningful ways to make experiences more natural, friendly, and thoughtful."
                    ]
                },
                {
                    "type": "p",
                    "text": "Shopify experiences should help people achieve their goals quickly, accurately, and with less effort. We value speed and simplicity, but we value productivity even more."
                },
                {
                    "type": "list",
                    "items": [
                        "Break complex tasks down into simple steps, and remove repetitive tasks whenever you can.",
                        "Use friction to highlight important decisions, then let users get back to work.",
                        "Give users the ability to reduce and optimize their workloads through automation and bulk actions."
                    ]
                },
                {
                    "type": "p",
                    "text": "We constantly work to earn trust with our users. We pay attention to detail. We’re genuine and transparent because it shows we’re acting in users’ best interests."
                },
                {
                    "type": "list",
                    "items": [
                        "Fix small mistakes and inconsistencies that erode trust.",
                        "Be transparent about what features and tools can or can’t do.",
                        "Make safe and positive actions frictionless. If they’re risky, give clear instructions and greater control. Make it easy to recover from mistakes."
                    ]
                },
                {
                    "type": "p",
                    "text": "We want people to feel comfortable using our products, whether it’s their first time using them or their hundredth. Our experiences should embody the same principles, act the same way, and fit together seamlessly."
                },
                {
                    "type": "list",
                    "items": [
                        "Think bigger than any individual task or product. Understand the context users are working in.",
                        "Use familiar patterns to make experiences intuitive and recognizable.",
                        "Evolve experiences seamlessly. They should keep getting better with time and information."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/foundations/formatting-localized-currency",
            "title": "Formatting localized currency — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "There’s a currency formatting framework to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Help more merchants sell globally",
                        "Localize currency formatting for merchants and customers everywhere",
                        "Unify the display of mixed currencies to help merchants manage multiple currency stores",
                        "Implement the formatting through APIs"
                    ]
                },
                {
                    "type": "p",
                    "text": "A store can have more than one type of currency and currency format. The main currency of the store and the Shopify default. All sales and reports are shown in the store currency. Any other type of currency is called “non-store currency”. Types of non-store currency include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Presentment currency: The type of currency that is presented to buyers in a merchant’s store. For multi-currency stores, it can be different from store currency.",
                        "Payout currency: The type of currency used to pay merchants for their sales. For multi-currency stores, it can be different from store currency.",
                        "Billing currency: The type of currency used to bill merchants for themes, app purchases, and monthly subscriptions. Billing currency is in USD only, but might include local currencies for tax purposes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Includes the currency symbol and currency value. This format is used for currency that merchants are familiar with. Examples: $12.50; 12,50 € Includes the currency symbol, currency value, and ISO code (for example, “USD” and “CAD”). Best used for currency that merchants aren’t familiar with and don’t expect to see. Examples: $12.50 CAD; 12,50 € EUR Shopify usesCommon Locale Database Repository (CLDR)for localization formatting for currency, date, time, and amount."
                },
                {
                    "type": "list",
                    "items": [
                        "It’s the recognized international standard",
                        "It automatically formats numbers and currency based on the merchant’s locale",
                        "The repository is maintained by a third party"
                    ]
                },
                {
                    "type": "p",
                    "text": "CLDR determines:"
                },
                {
                    "type": "list",
                    "items": [
                        "Whether the currency symbol appears before or after the amount (for example, $250, 250 USD, 250 $)",
                        "Whether decimals are used (for example, there are no “cents” in Japanese yen)",
                        "Whether the decimal sign is a period or a comma (for example, 37,50 or 37.50)",
                        "How to group numbers (for example, 10,000 or 1,0000, or using spaces)"
                    ]
                },
                {
                    "type": "p",
                    "text": "CLDR doesn’t determine the appropriate level of detail shown in different contexts. For example, it can’t determine when to show the currency symbol and value (short format), or the currency symbol, value, and ISO code (explicit format). Though short format is more efficient, it’s important to provide clarity for merchants who deal with unfamiliar currencies in multi-currency stores. In those cases, use explicit format. Because CLDR formatting is limited, these guidelines will help you choose the appropriate level of currency detail to display in a multi-currency context. Default toshort format. Useexplicit formatexcept when presenting store currency within in a mixed-currency context."
                },
                {
                    "type": "list",
                    "items": [
                        "Use explicit format when showing total amounts, an amount within a button, or in a paragraph",
                        "Use short format when showing non-total amounts with total amounts"
                    ]
                },
                {
                    "type": "p",
                    "text": "This example shows a scenario where the presentment currency is in USD, which is different than the store currency. The non-total amounts in the paid status card are in short format, and the total amounts are in explicit format. This example shows a scenario refunding an order that’s in a non-store currency. This example illustrates the use of short format for non-total amounts and explicit format for total amounts in a data table. Always place the negative symbol before the currency and amount in either format."
                },
                {
                    "type": "list",
                    "items": [
                        "-$4.20",
                        "-12,50 €"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "$-4.20",
                        "12,50 €-"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Default to explicit format whenever prices are customer-facing. Use short format for unit prices, itemized prices, and installment prices.",
                        "If there are enough indicators to let customers know which currency they’re looking at, short format may be sufficient. When using short format, make sure to always use explicit format for cart total, checkout total, and notification totals."
                    ]
                },
                {
                    "type": "p",
                    "text": "This example shows the use of short format for installment prices. This example shows the use of short format for unit prices. This example shows the use of short format for itemized prices. Use the following questions to guide you when making decisions about currency formatting. Does the merchant know which currency they’re looking at?"
                },
                {
                    "type": "list",
                    "items": [
                        "Which currency do they expect to see?",
                        "Do they know which currency their orders are in if they have a multi-currency store?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Does the currency format support the merchant’s main task?"
                },
                {
                    "type": "list",
                    "items": [
                        "Is the main task scanning, comparing and analyzing, or taking an action (for example, a refund)?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Are there enough details to make an informed decision?"
                },
                {
                    "type": "list",
                    "items": [
                        "For example, do they know the currency of their non-store currency order refund?",
                        "Can they distinguish between the sales report and payout summary if the store currency and payout currency are different?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Can the UI be simplified without creating confusion? We don’t want to showexplicit formateverywhere and for every task."
                },
                {
                    "type": "list",
                    "items": [
                        "How can we make currency formatting both simple and accurate?"
                    ]
                },
                {
                    "type": "p",
                    "text": "Mock up a scenario where the store, presentment, payout, and billing currencies are different. This scenario is becoming more common as more merchants start selling globally. USD, CAD, AUD, HKD, SGD are just a few of the many currencies that share the same symbol “$”. 1 USD is approximately 100 JPY. If there is enough space for the JPY amount, it should work for most other major currencies. The guiding questions are meant to help make merchant-focused decisions about which format to use when the use case is unclear. This table shows commonly-used currencies in short and explicit formats. To format currency in a React component, use theShopify/react-i18nlibrary’sformatCurrencymethod. You can select eithershortorexplicitformatting by setting theformoption as shown in the code example below."
                },
                {
                    "type": "code",
                    "code": "import{useI18n}from'@shopify/react-i18n';const[i18n]=useI18n();i18n.locale='de-AT';consteurDeAt=i18n.formatCurrency(price,{currency:'EUR',form:'short',});consteurDeAtExp=i18n.formatCurrency(price,{currency:'EUR',form:'explicit',});"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/foundations/information-architecture",
            "title": "Information architecture — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Information architecture is the practice of organizing, structuring, and labeling content in an effective and sustainable way. Whether you’re creating an app, part of the Shopify admin, a new feature, or an editorial page, these IA principles are here to help you make content usable and findable."
                },
                {
                    "type": "list",
                    "items": [
                        "Simplify complexity: Information should be structured and managed in the simplest way possible.",
                        "Support scalability: Good IA practices will help us avoid overhauling our previous work whenever the product grows or changes.",
                        "Create familiarity: Regardless of how our merchants access Shopify, it should feel like the same product. Creating a common experience goes beyond design and extends to how we structure Shopify’s content."
                    ]
                },
                {
                    "type": "p",
                    "text": "These principles will help you make good IA decisions no matter what you’re working on. Successful wayfinding happens when your audience can make navigation decisions that fulfill their goal. For navigation to enable wayfinding:"
                },
                {
                    "type": "list",
                    "items": [
                        "Establish multiple navigation schemes",
                        "Use task-based navigation",
                        "Integrate secondary navigational support (like breadcrumbs)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Navigation is a tool that serves a number of wayfinding purposes.\nGood navigation allows our merchants to explore a topic in depth, switch tasks easily, and filter information. In the Shopify admin, merchants can find their way using multiple navigation schemes:"
                },
                {
                    "type": "list",
                    "items": [
                        "Structural: main navigation, local navigation, breadcrumbs",
                        "Associative: contextual links to other features or help documentation",
                        "Utility: linked avatars to access your account, search"
                    ]
                },
                {
                    "type": "p",
                    "text": "In the Shopify admin, merchants can find their way to the blog posts page using the side navigation (nav) and search. They can use the breadcrumb to go up to the main level in the Online Store section of the nav. They can also access related help documentation through the contextual “learn more” footer at the bottom of the page. All people are unique and have different information-seeking behaviors. For example, one person might start their experience from various points in a product or shift their focus midway through a task. They might also begin a task on one device and finish it on another. To facilitate these behaviors, all screens should have meaningful navigation and bridge content to other parts of the product. The content on the Shopify Help Center’s shipping page only lives in the Help Center—we don’t duplicate it in the Shopify admin or on our marketing pages. But even though it only lives in one place, we give merchants access to it when it’s likely that they’ll need more context on shipping (like through a link on our shipping settings page in the Shopify admin). Although we want to give our merchants all the information they need to complete a task, we need to avoid overloading them with information. Don’t over-simplify, but don’t burden your user with choice. To do this in design, we use progressive disclosure, but this principle also applies to information architecture. To practice progressive disclosure in IA:"
                },
                {
                    "type": "list",
                    "items": [
                        "Gradually reveal information as it’s requested",
                        "Provide multiple access points to information",
                        "Eliminate redundant content"
                    ]
                },
                {
                    "type": "p",
                    "text": "The content on theShopify Capital pageon Shopify.com summarizes the benefits of receiving capital from Shopify at a high level. After scanning the summary, merchants have the option to access more information about the program with a link to thedocs on the Shopify Help Center. By progressively disclosing information in this way, we help merchants reach decisions faster and avoid the frustration and disorientation of front-loading with too much detail. Information architecture, like design, is not set in stone. It should change with your product. As such, the IA decisions you make need to leave room for growth while also continuing to promote consistency across the experience. TheShopify.com homepagetakes a scalable approach to page architecture—the structure was designed to adapt as Shopify expands to different locations. This was done by taking a modular approach. Each locale can customize the homepage to meet their needs. For example, for 2 stories, they can use 2 banners. For 3, they can use 1 banner and 2 tiles. To make sure your IA decisions are scalable:"
                },
                {
                    "type": "list",
                    "items": [
                        "Communicate early and often, within and outside of your team.\nOpen the lines of communication when doing IA work and make sure your work aligns with the work of other areas of the product.",
                        "Think about the future and how the work you’re doing will intersect with other projects.",
                        "Create content groups that are flexible enough to accommodate growth, while being meaningful to the user.",
                        "Consider how your IA will adapt to multiple environments and their existing patterns (for instance, iOS, Android, desktop browsers, chat bots, retail products like Point of Sale)."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/foundations/internationalization",
            "title": "Internationalization — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "We want our merchants to experience Shopify in a way that’s appropriate and meaningful to them, no matter where they are in the world. We aim to build one experience that works for all merchants in all of our markets. However, when a certain experience doesn’t fit a specific market, we should tailor it. Building your product and interface so they can be used in different locales. This includes creating flexible interfaces that allow for text expansion and changes to word order. Adapting your product and interface for different locales to make them a good cultural fit. This includes adapting features, changing visuals, and translating text. Converting text from one language to another. Not to be confused with localization, translation is just one part of localizing a product. A linguistic region defined by both its language and country. Examples:\nFrench-France (fr-FR); French-Canada (fr-CA); Portuguese-Brazil (pt-BR). Note that languages and countries won’t always have a 1:1 mapping. When interfaces are localized, the content will often expand in length. In most languages, text is up to 50% longer on average than English. Some non-Latin languages, such as Japanese, take up more vertical space. For character-based languages, text wrapping and line breaking can’t always rely on spaces to separate words. Your interface needs to be flexible enough to accommodate language-specific formatting and text expansion without changing its context of use. Lay out your elements in a way where text expansion doesn’t hinder your information hierarchy. Don’t rely on responsive stacking alone. It can often change the hierarchy of information of the layout. In this case, the text expansion causes the line break at the wrong spot, placing the button in the middle of the heading and content of this card. Use single columns to stack elements flexibly to accomodate for text expansion. Avoid using narrow columns in smaller components. Ensure the right amount of padding for a clean interface."
                },
                {
                    "type": "list",
                    "items": [
                        "Always assume the worst-case scenario for text length, especially on mobile and in layouts such as tables and columns. Avoid using narrow columns.",
                        "Pay particular attention to content elements that only have a few words. In English, labels and buttonsexclude words such as “a” or “the”, but many other languages need to include them. Overall these small pieces of text may expand up to 300%.",
                        "Our components are designed to be expandable, but you should still test them in your designs and builds. Check the CSS layout to make sure text doesn’t overflow when the screen size is reduced.",
                        "Work with linguistic experts to review line breaks and word wrapping for character-based languages, like Chinese or Japanese, to ensure they don’t break sentences."
                    ]
                },
                {
                    "type": "p",
                    "text": "Word order can change dramatically in translation. If the layout and functionality of your interface is dependent on a certain word order, it’s likely to break when localized. If content elements need to stay in a certain position on the page, implement them as separate labels, outside of sentences. Don’t place elements with a fixed position inside a sentence. The order of this sentence would often need to change in translation, which is impossible to do if the interface is built this way. When including links in body text, only use a single and descriptive term or a small part of a phrase as the link. Find out more aboutlinks. Don’t use full phrases as links. Word order changes might break the link into several parts when translated."
                },
                {
                    "type": "list",
                    "items": [
                        "Assume the word order of every sentence in your interface will change when translated.",
                        "Avoid using UI components to build sentences.",
                        "Avoid splitting one sentence into several strings, known as concatenated strings. If you use concatenated strings, translators won’t be able to change the word order and their translations won’t make sense.",
                        "Avoid using variables in your strings as it will translate differently."
                    ]
                },
                {
                    "type": "p",
                    "text": "Merchants in each locale have different cultural sensibilities. Use visuals, content, and interface formats that are useful and meaningful to merchants in all parts of the world. When possible, use universally known icons. Be mindful of when you use country-specific icons and where they are surfaced. Find out more abouticons. Be mindful of using colors to represent meaning. Colors can hold discrete connotations in different cultures. For example, in North America, green is used to indicate success and red for failure, as opposed to China, where red symbolizes prosperity and good fortune."
                },
                {
                    "type": "list",
                    "items": [
                        "When using photos, illustrations, icons, or emojis, make sure the visuals you’re using are not offensive or culturally insensitive. If you’re unsure about a visual you’re using, research it or ask someone with local knowledge.",
                        "When naming features, be mindful of connotations in other cultures, especially for evocative names and acronyms. Find out more aboutnaming.",
                        "Avoid colloquial words, idioms, and references to popular culture. It’s difficult to translate them in a meaningful way.",
                        "In some cultures, a person’s given name comes first, whereas in other cultures the family name comes first. Let merchants choose how they want to enter, read, and sort names, especially in text fields and lists.",
                        "Many types of information, such as addresses, dates, numbers, and currencies, are shown in different formats in different locales. For example, some locales display currency symbols before the number, others display them after. Make sure these can be translated appropriately. Find out more aboutformatting localized currency.",
                        "Some cultures expect more guidelines and instructions when filling in long or critical forms. Consider using asterisks to mark mandatory fields in a form to match that expectation.",
                        "Work with people that have local knowledge if possible."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "When designing with a Polaris component, test the localized versions to make sure it still works with the rest of your interface.\nIf you need a certain component to adapt, but it hasn’t yet been internationalized in Polaris, you can open a feature request inGitHub."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/getting-started",
            "title": "Getting Started — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Shopify providesFigma community resourcesfor Polaris components, styles, and icons. If you are new to Figma, check out ouronboarding guide, or open Figma and start designing with the Polaris:"
                },
                {
                    "type": "list",
                    "items": [
                        "Component UI kit",
                        "Style Library",
                        "Icon Library"
                    ]
                },
                {
                    "type": "p",
                    "text": "TheShopify/polaris GitHub repois an open-source monorepo made up of NPM packages, VS Code extensions, and this website. To get started, learn how to install and use the Polaris:"
                },
                {
                    "type": "list",
                    "items": [
                        "React components",
                        "Design tokens",
                        "VS Code extension"
                    ]
                },
                {
                    "type": "p",
                    "text": "In this tutorial, you'll create an app that merchants can access in the Shopify admin. You'll use an app initialization command that generates starter code for building your app, and sets up your development environment so that you can work with your app usingShopify CLI. Your app will use Polaris andApp Bridgewhile following theApp Design Guidelines. Polaris provides foundational design guidance for creating good merchant experiences. Here are some recommended resources to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Experience Values",
                        "Design guidelines",
                        "Product content"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/getting-started/components-lifecycle",
            "title": "Component lifecycle — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Have feedback, a question, or suggestion?Create an issueduring any stage of a component’s lifecycle. The component is a work in progress and ready for exploratory usage, with breaking changes expected. During this stage, we’re being critical about understanding the purpose of the component and what problem it’s trying to solve. If the purpose is unclear, we may decide not to move forward with the component and it could be removed without warning."
                },
                {
                    "type": "list",
                    "items": [
                        "Has a clear purpose and rationale for why it belongs in Polaris",
                        "Uses Polaristokenswith no references to any hard-coded static values",
                        "Designed with responsiveness in mind and can adapt acrossbreakpoints",
                        "Meets knownaccessibilityrequirements like: contrast, interactive states, touch target size, etc.",
                        "In progress documentation exists that includes the list of props with some examples",
                        "Documentation includes examples in Storybook",
                        "The component has 100% test coverage"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Usage is being evaluated, and may not progress to beta. Evaluation includes any necessary research and data that supports why the component belongs in Polaris.",
                        "Components could be changed completely, or removed from the system",
                        "Feedback is highly recommended and encouraged,Create an issue"
                    ]
                },
                {
                    "type": "p",
                    "text": "The component moves to beta once there’s a clear understanding of the problem and we’re confident in the solution. The focus of this stage is all about testing in enough environments to make sure the component is bug free. Ready for wider adoption, encouraged for most cases. Breaking changes are possible in minor version updates."
                },
                {
                    "type": "list",
                    "items": [
                        "Used multiple times in production (Shopify admin)",
                        "Meets allaccessibilityrequirements for our use cases",
                        "Usage guidelines and documentation covers common use cases",
                        "Reviewed and tested in production by designers and developers",
                        "Figma components available in the Polaris Components file"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Work is being done to move to Stable",
                        "Manual and automated migration guidance is being worked on"
                    ]
                },
                {
                    "type": "p",
                    "text": "The component is bug free and works in most, if not all, environments. It’s ready for full adoption, with long-term support expected."
                },
                {
                    "type": "list",
                    "items": [
                        "The API is stable, with no breaking changes until the next major release (if necessary)",
                        "Usability testing and feedback has been gathered on UX and DX",
                        "Documentation exists for component props, variants, accessibility guidelines, and usage",
                        "Manual and automated migration documentation exists"
                    ]
                },
                {
                    "type": "p",
                    "text": "The component is stable and has been supported in at least one past major release, but there are plans to replace its functionality with a new component or a combination of new components. Usage of legacy components is not discouraged, with the caveat that it will be deprecated and replaced in the next major release."
                },
                {
                    "type": "list",
                    "items": [
                        "Documentation exists for the legacy component and includes any alternative components",
                        "The deprecation date has been announced and is at least one month away from the release date of the package that deprecated the component",
                        "Manual and automated migration paths are documented and have been available for at least one month"
                    ]
                },
                {
                    "type": "p",
                    "text": "The component will be removed and should be avoided."
                },
                {
                    "type": "list",
                    "items": [
                        "Documentation exists for the deprecation and includes any alternative components",
                        "The component includes deprecation warnings when used",
                        "The removal date has been announced and is at least one month away from the release date of the package that removes the component",
                        "Manual and automated migration paths are documented and have been available for at least one month"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/getting-started/designing-with-a-system",
            "title": "Building with Polaris — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "At Shopify, we often say, “Polaris is the floor, not the ceiling.” The design system provides you with building blocks, and it’s up to you to construct them in a way that best meets your user’s needs. The idea behind Polaris not being a ceiling is that you shouldn’t limit your ideas to fit into existing system pieces too early. Zoom out, figure out the best design solution to the problem, and then see if Polaris has all the pieces for you to design that solution. If there’s a gap, thencontributeto the system to make it better. No matter what problem you’re solving, zooming out allows you to get a better understanding of the problem, and its sphere of influence. A problem rarely exists in isolation, so understanding context and contributing factors is key before getting into solutions. Practically speaking, this means that you should understand the product as a whole, not just the product area you’re working on. For instance, if you work on Orders, you should have a holistic understanding of the Shopify admin so you can leverage existing patterns and mental models. You can also gain context and empathy for merchants through research. Merchants don’t care about Shopify’s internal organization. They use the admin as a whole, so we must design with the whole experience in mind. The Deliver team identified a need to consolidate 6 different tag components with varying UX that were doing the same job in different sections of the admin. The redundancy in components was causing a fractured user experience. When you understand the product as a whole, you should be well equipped to explore without constraints. That means don’t start from our UI kit, component library, or patterns you see in the product---start with a blank sheet of paper instead. Solve the problem, preferably in more than one way, before you start worrying about consistency. As the Deliver team was working on consolidating the 6 components, they also identified an opportunity to improve the overall usability for adding tags. The team explored several different ideas and approaches to understand which approach would best solve the problem. Once you understand the problem and potential solutions, you can start aligning more closely with the design system. The team made updates to the Polaris foundational pieces like the tag, icon, and interactions so that they could use those pieces to build a more opinionated component. If you have initial questions about contribution, reach out in #polaris if you work at Shopify, or the Shopify Partners Slack if you’re an open source contributor. To get help with the strategy for a larger contribution, start a GitHub discussion with the system community."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/getting-started/polaris-101",
            "title": "Polaris 101 — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Merchants set up their store, configure settings, and manage their business using the admin. It includes core aspects of the merchant’s business, including orders, products, and customers. Polaris is the design system for the Shopify admin. It’s the shared language that guides how we build high-quality merchant experiences. The design system is made up of design guidance, code libraries, development opinions, and API documentation on how to build merchant experiences for the Shopify admin. Polaris is used both internally at Shopify and externally by app developers and designers. The admin includes installable apps that are distributed through the Shopify App Store. They enable merchants to add functionality to their stores without leaving the familiar environment of the admin. By building with Polaris andApp Bridgeand following theApp Design Guidelines, you'll create a streamlined experience with the rest of the Shopify admin."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns",
            "title": "Patterns — Shopify Polaris",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "App settings layoutScan and find groups of settings in apps",
                        "Card layoutStandardized card layout gives merchants a content structure to rely on.",
                        "Common actionsStandardizing recurring actions gives merchants a predictable way to complete common tasks.",
                        "Date pickingSelect a date or a date range",
                        "New featuresHighlight new features for merchants",
                        "Resource details layoutCreate, view, and edit resource objects",
                        "Resource index layoutOrganize and take action on resource objects"
                    ]
                },
                {
                    "type": "p",
                    "text": "These guidelines are safe to use and will be updated to the new documentation\nformat in the near future."
                },
                {
                    "type": "list",
                    "items": [
                        "LoadingNavigating the Shopify admin should be fast, meaningful, and focused. Intentional loading states deliver a continuous flow for merchants.",
                        "New badgeThe New badge can be used to inform merchants about the release of a feature that creates new value. It should be used sparingly and for a short time frame.",
                        "PickersPicker experiences help merchants browse, find, and select from multiple options. Use them for selecting locations, customer segments, and more.",
                        "Text fieldsText fields combine the field label (the title) and the input area. Inputs can vary from typed text to URLs to date pickers."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns-legacy",
            "title": "Patterns — Shopify Polaris",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "App settings layoutScan and find groups of settings in apps",
                        "Card layoutStandardized card layout gives merchants a content structure to rely on.",
                        "Common actionsStandardizing recurring actions gives merchants a predictable way to complete common tasks.",
                        "Date pickingSelect a date or a date range",
                        "New featuresHighlight new features for merchants",
                        "Resource details layoutCreate, view, and edit resource objects",
                        "Resource index layoutOrganize and take action on resource objects"
                    ]
                },
                {
                    "type": "p",
                    "text": "These guidelines are safe to use and will be updated to the new documentation\nformat in the near future."
                },
                {
                    "type": "list",
                    "items": [
                        "LoadingNavigating the Shopify admin should be fast, meaningful, and focused. Intentional loading states deliver a continuous flow for merchants.",
                        "New badgeThe New badge can be used to inform merchants about the release of a feature that creates new value. It should be used sparingly and for a short time frame.",
                        "PickersPicker experiences help merchants browse, find, and select from multiple options. Use them for selecting locations, customer segments, and more.",
                        "Text fieldsText fields combine the field label (the title) and the input area. Inputs can vary from typed text to URLs to date pickers."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns-legacy/loading",
            "title": "Loading — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Do you have ideas or feedback on how we can make these guidelines more empowering and useful? Please share your thoughts in theGitHub discussion."
                },
                {
                    "type": "list",
                    "items": [
                        "Make it fast.Plan and prioritize the loading to make it as short as possible.",
                        "Make good use of time.Give merchants useful structure and content.",
                        "Focus on the job.Put merchants' attention on what's important."
                    ]
                },
                {
                    "type": "p",
                    "text": "We can speed up loading by planning how much data we load and when we load it. Figure out what content merchants will need first, and make it available as soon as possible. Caching data eliminates the loading time the next time it's needed. Consider caching data that is reused throughout an experience, such as the name and image of an item, and use that to show essential content while other content loads. Prefetching data can save valuable loading time. Start prefetching when merchants show intent to need the data, such as when hovering over an interactive element. The content that is visible in the viewport is the content that merchants will likely need first. Make sure that such content isn't delayed by content that merchants won't need until after an interaction, such as scrolling or clicking a popover. Pages with a lot of content take longer to load. By limiting the page to meaningful content that merchants will need, we can speed up the loading and declutter the page. Use progressive disclosure to give merchants more content when they need it, and usepaginationto limit long lists. Remember to prefetch the data so that it's readily available. Merchants use the Shopify admin to get work done. Showing the right context, real page structure, and meaningful content will keep them engaged and prepare them for what’s to come. People expect to get the result of their interaction right away. When merchants navigate to a new page or view, it’s typically best to move toward that context immediately, rather than load first and switch later. Sometimes that means reverting to the previous view in case of errors, but it’s often a reasonable tradeoff when success is the most common outcome. The page layout during loading should allow merchants to scan and understand the page structure. Matching layouts set clear expectations and make merchants proactive. Mismatched layouts confuse merchants and waste their time. Test skeleton content with different breakpoints and make sure both the content and the layout represents the final state. Showing static content, such as section labels, icons, text, and imagery, gives merchants a head start in understanding the page. A small thing like a labeled card can enable them to anticipate what they need almost immediately. It’s important that we make an effort to show as much real content as possible. Ideally, controls are rendered active so merchants can take action before the page is done loading. For example, when a primary action like \"Add product\" is the same everywhere, then you could include it in the loading state. Controls can often be rendered active even when the data behind it hasn’t finished loading. Many times it will be done by the time the merchant interacts with it, and if not, show that it needs to finish loading then. Render it inactive only if it mustn’t be interacted with, but use that as a last resort. Placeholders let merchants anticipate content type and location. Use placeholders for visually distinct elements, such as lists, images, controls, text, and data visualizations. This is the most important jobskeleton contentcan do. Don’t use placeholders for content that could be rendered. Avoid details in the placeholder that may not appear. We don't want to draw attention to it and set false expectations. The task and the content must always be the focus. Confusion and visual noise will distract merchants and waste their time. Loading is typically a consequence of merchants navigating to a new page or view. If it's unclear that their initializing interaction worked, then the experience will start with doubt and confusion. When the interaction feedback is clear, then the interaction is a thing of the past and they can make better use of their time. Make sure that the feedback is noticeable within 100 milliseconds and that it's clear what happened. The best way to inform people that the system is working is to show real progress. Real progress puts people’s attention on the content while providing something useful to work with. Progress within 1 second is perceived as natural and continuous, which keeps people engaged in the task. When actual progress can be shown within 1 second intervals, merchants typically don't need any other loading indicators. It's very important that the layout doesn't unexpectedly change during the loading process. Merchants will engage with visible content, and unexpected change can confuse or cause them to misclick. Pay attention to layout shifts throughout loading, find out what causes them, and make an effort to remove them. Sometimes we can wait to render some layout until it’s certain it will stay put. Learn more about layout shift and visual stability onweb.dev. Merchants get distracted by things changing on the screen. Pay attention to anything that changes during loading. Categorize the change as signal or noise, and use the following tips to address it."
                },
                {
                    "type": "list",
                    "items": [
                        "Remove avoidable visual noise.For example, fix poorly matching placeholders or plan for unexpectedly appearing content.",
                        "Subdue visual noise that is unavoidable.This includes using transitions to make state changes less sudden such as fading in an image that might render late. When an element’s size is unknown, such as a product index with a variable number of items, then it's typically better to add too many placeholder items than too few. It's less jarring when elements suddenly shrink than when they suddenly expand.",
                        "Emphasize the visual change that matters.Animate items in a list or the most important information on the screen. Emphasizing important content will guide merchants' attention to what they want, while also increasing tolerance for other visual changes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use spinners when it’s not clear that the system is working, but only when it will improve the user experience. Excessive use of loading indicators isn’t informative. Rather, it can be overwhelming and make the system appear slow. Default to using more meaningful content where possible. If spinners are needed, place them where it’s easy for merchants to understand what is loading. This helps drawing attention to the content that is about to appear and not to the spinner itself. It's important to provide useful content during loading. Being in the right visual context, seeing progress, or getting a glimpse of what's ahead can go a long way. Empty views with spinners provide low value and cause merchants to become passive and disengage. People are likely to be frustrated and abandon their tasks if loading times exceed 10 seconds. In such cases, it's better to set clear expectations and empower merchants to make an informed decision to wait. Put their attention on the value ahead to increase the likelihood that they stay engaged in the task."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns-legacy/new-badge",
            "title": "New badge — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "There’s opportunity to expand on this documentation. If you’d like to share ideas, or evolve the guidance, join theGithub discussionor jump straight to updating thedocumentation. The New badge should be used on features that have all of these 3 characteristics:"
                },
                {
                    "type": "list",
                    "items": [
                        "We want to drive adoption of this feature",
                        "It’s creating new value for merchants (not just an improved way of doing something they are already doing)",
                        "It’s worth distracting our merchants from their current workflow to inform them about a whole new part of Shopify"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example:"
                },
                {
                    "type": "list",
                    "items": [
                        "To signify an entirely new page in the Settings nav"
                    ]
                },
                {
                    "type": "p",
                    "text": "Note: Using the New badge in the Settings nav to draw attention to a new feature must be reviewed and approved by UX management on a case by case basis. Consider how the admin would look if it was cluttered with New badges or features of varying importance—overusing the badge creates unnecessary distraction and lessens its impact."
                },
                {
                    "type": "list",
                    "items": [
                        "Should never be used in the primarynavigationmenu of the Shopify admin"
                    ]
                },
                {
                    "type": "p",
                    "text": "New badges should have a short lifespan. The badge should disappear:"
                },
                {
                    "type": "list",
                    "items": [
                        "When the user has clicked on the interactive element it’s attached to, or",
                        "5 days after they first saw it, or",
                        "after 3 sessions, such as landing on a page 3 times"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use theinformational badge variantto achieve the correct styling and color",
                        "the badge should be right aligned or placed to the right of text",
                        "thepage componentin Polaris already places badges to the right of headings, so following this logic adds to the consistency of [New] badge use in the admin."
                    ]
                },
                {
                    "type": "p",
                    "text": "A pip can be used to highlight a status or new element in a list. For example, it could be placed next to a new notification in a list of notifications. It should not be used for representing new features."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns-legacy/pickers",
            "title": "Pickers — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Introduce advanced features only when needed. Scale picker experiences consistently by establishing specific points for introducing functionality when merchants need them. Pickers should gradually offer more features as the number of options increases:"
                },
                {
                    "type": "list",
                    "items": [
                        "If there is only 1 option, there's no need to present it with a picker. The option value should be displayed directly in context, or not at all if it's not editable or relevant to completing an action merchants need to take on the page.",
                        "If there are only a small number of options, display all options in the picker. Sorting and filtering functionality is not needed for merchants to use the picker to complete an action on the page.",
                        "If there are a large number of options, merchants need filtering or sorting features in order to use the picker to complete an action. This is especially important if the action is repetitive, like tagging resources."
                    ]
                },
                {
                    "type": "p",
                    "text": "The order the options are sorted in should help merchants find and pick from the options quickly so they can focus on the action they need to take on the page."
                },
                {
                    "type": "list",
                    "items": [
                        "Sort in the unique logical order relevant to the options the picker contains.Date pickerspresent options by month.Color pickerspresent options by hue.",
                        "Sort alphabetically if the picker contains text options that are most scannable by the content they contain, like customer names or locations.",
                        "Sort by most recently or frequently created, updated, or used if the picker contains options that were created in the context in which they are being picked, or are accessed or used repetitively. Products and collections benefit from being sorted by creation date, while customer segments are best sorted by date last edited."
                    ]
                },
                {
                    "type": "p",
                    "text": "Pinning the most relevant options to the top of the picker helps merchants work through tasks quickly. Which and how many options are pinned depends on the action the picker helps merchants take."
                },
                {
                    "type": "list",
                    "items": [
                        "If the picker presents merchants with navigation or filtering options, pin the main or most important option to the top.",
                        "If the purpose of the picker is to complete form input, pin the most frequently or recently used options to the top."
                    ]
                },
                {
                    "type": "p",
                    "text": "The primary building block of resource picking experiences is the searchable listbox pattern. Searchable listboxes are composed of thelistboxandtext fieldcomponents and can be displayed differently depending on what merchant problem you’re solving. The components are used directly inside of a container on the page if picking is part of the primary action merchants need to take, such as completing a form. The components may instead be hidden or revealed with an overlay, such as apopoverormodal, to progressively disclose the list when merchants take an action on the page. Use progressive disclosure if the purpose of the picker is secondary to the action merchants are taking on the page, such as navigation or list filtering. We'll look at customer segment and location picking patterns for examples of context specific implementation. The location picker popover allows a merchant to select any location they have added in the Admin. Location pickers are used as a filter on the orders list and as a form input in logistics related features, like inventory transfers. The number of locations a merchant has can range dramatically, and the location experience should adapt to that number. Using progressive disclosure, we can introduce features as merchants need them. When a merchant only has one location, the button that opens the location picker should be hidden. There’s no need to access the experience when they can’t switch locations. When a merchant has 2–10 locations, show the button that accesses the location picker. The button always shows the current location. In the location picker:"
                },
                {
                    "type": "list",
                    "items": [
                        "Show “All locations” at the top of the list.",
                        "Make “All locations” the default selected location.",
                        "List all other locations in alphabetical order. Each location item shows the location name only."
                    ]
                },
                {
                    "type": "p",
                    "text": "When a merchant has 11 or more locations:"
                },
                {
                    "type": "list",
                    "items": [
                        "Apply the same features as 2–10 locations.",
                        "Add text search at the top of the location picker. This allows merchants to search for locations by specific criteria (location name, city, province, postal code, address, etc.).",
                        "Directly below the search, show a section with the 5 most recently used locations. If there are none, show the first 5 locations from the full list.",
                        "Below recently used locations, show an option to view all locations. Clicking this will show the inactive search state, displaying the full list of locations."
                    ]
                },
                {
                    "type": "p",
                    "text": "Location data can be fetched, created, or updated using the Shopify AdminGraphQL APIor theRest API. Location pickers are composed using thebutton,icon,listbox,popover, andtext fieldcomponents. Reference theListbox\"With search\" andPopover\"With searchable listbox\" composition examples for React component code snippets. Segment pickers allow merchants to select from or navigate to all of the customer segments they've created. Merchants start with one default customer segment: \"All customers\". From the query builder at the top of the segment detail page, merchants can add filters and conditions to create new segments. Similar to the location picker, customer segment pickers introduce features only as merchants need them. All segment picking experiences should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Pin the \"All customers\" segment to the top of the list so merchants can easily navigate to or select their entire customer base",
                        "Pin the active or selected segment below the \"All customers\" segment so merchants know what segment they're viewing or have picked",
                        "Sort segments by \"Last edited date\" so merchants can easily find and pick from the most relevant segments in the list"
                    ]
                },
                {
                    "type": "p",
                    "text": "When a merchant has 10 customer segments or less, all segments should be visible in the list. When a merchant has 11 or more customer segments:"
                },
                {
                    "type": "list",
                    "items": [
                        "Add text search above the segment list. This allows merchants to search for segments by name.",
                        "Below the pinned \"All customers\" and active or selected segments, display the 4 most recently edited segments. If there are none, show the first 4 segments from the full list.",
                        "Below the recently edited segments, display a listbox action to \"Show all {total number} segments\". Clicking the action should show the inactive search state, displaying the full list of segments.",
                        "Segments should be paginated and load more when merchants scroll to the bottom of the list."
                    ]
                },
                {
                    "type": "p",
                    "text": "Shopify Flow is an automation app that helps merchants build workflows to automate marketing campaigns and other common tasks. When presenting the segment picker for merchants to build a customer related workflow automation, the list of segments is displayed directly in the action builder using the same progressive disclosure points as the customer segment picking popover. Customer segment data can be fetched, created, or updated using the Shopify AdminGraphQL API. Customer segments replace saved search in the customers section of the Admin. Check out theSegmentation guidefor an overview of how to query segment members. Segment pickers are composed using thelistboxandtext fieldcomponents to implement a searchable listbox. The searchable listbox is displayed inside of apopovercomponent activated by abuttoncomponent, or inside of asheetcomponent triggered by selecting a segment workflow template or by creating a custom workflow action. Get started by referencing theListbox\"With search\",Popover\"With searchable listbox\", andSheet\"With searchable listbox\" composition examples for React component code snippets."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns-legacy/text-fields",
            "title": "Text fields — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Text fields can be grouped in a form or placed individually in the UI. Placeholder text should generally be avoided in text fields. Help text can be used below the text input area to guide the user on acceptable inputs. Field labels act as a title for the text field. Labels should typically be short and in noun form. For example, “Name”. Edge case: When a text field isn’t part of a form and is placed individually on a page (like a comment field), then you can write the field label as a call to action. For example, “Leave a comment”. This is because there’s no surrounding context and using “Comment” alone could be confusing. In general, avoid using placeholder text in text fields. It can pose a range of accessibility problems, like:"
                },
                {
                    "type": "list",
                    "items": [
                        "Low color contrast, making the text hard to read",
                        "Inconsistent behavior between browsers and screen readers",
                        "Text disappearing when the user starts typing, which can be confusing to people with cognitive impairments",
                        "Limited space available for additional context, due to field size"
                    ]
                },
                {
                    "type": "p",
                    "text": "Exception: Read the guidelines onsearch fields. Help text provides extra guidance or instructions to people filling out a form field. It can also be used to clarify how the information will be used. Use help text:"
                },
                {
                    "type": "list",
                    "items": [
                        "when the text field label doesn’t clearly explain the purpose of the text input",
                        "to provide guidance or instructions on the type of information needed",
                        "to show examples of the required format for modeled text inputs"
                    ]
                },
                {
                    "type": "p",
                    "text": "Best practices:"
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid repeating the field label. If the field label provides sufficient context for completing the action, then you likely don’t need to add help text.",
                        "If there’s not enough room to include both instructions and an example, then only include the example."
                    ]
                },
                {
                    "type": "p",
                    "text": "There are three types of text inputs: These are fields that require a specific format to be valid. They’re often used for tags, dates, and some tracking numbers. Modeled text is highly structured, so providing examples is useful.Read more These are fields that accept short strings of text. They’re often used for SKUs, barcodes, and titles. Only provide example text if you know how the text should be structured, such as a tracking number or discount code.Read more These are fields that are rendered as multiline textarea elements, as well as text input elements that accept long strings of text. They’re often used for product descriptions, order comments, and customer notes. Users can write whatever they want, so providing example text is less useful.Read more Modeled text inputs are text field inputs that require text to be formatted in a specific way. For instance, tags need to be separated by commas, and dates need to be typed in YYYY-MM-DD format. Because modeled text inputs require a particular structure, always include examples that demonstrate how the user should enter the information."
                },
                {
                    "type": "list",
                    "items": [
                        "Use help text to include an instructional call to action and an example that shows the required text format",
                        "If there’s not enough room to include both an instructional call to action and an example, then include only the example",
                        "Use the word “Example” followed by a colon to introduce the example (instead of e.g.)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Free text inputs accept a single string of text, without any particular structure. Use the field label to clearly indicate what should go in the text field. Don’t provide an example for free text inputs. The text doesn’t follow a specific format, and we shouldn’t assume what belongs in the field. If more context is needed, use help text. If a text field label has a call to action, there's no need to repeat it in the help text. Instead, add a sentence that provides extra context. For example, when a free text input is located independent of a form and has no surrounding context, you can make the field label a call to action. If the text field label isn’t clear about where the user can find the information, use help text to guide them. Don’t use placeholder text for free input titles, names, and descriptions; use help text instead. Don’t use placeholder text for codes or tracking numbers; use help text instead. If the code follows a standardized format, include an example, using the same format as help text for modeled content. If not, omit the example since the field’s contents can vary. Choose clear names for the field label, and don’t repeat it in the help text if possible. Instead, offer context that will help the user understand and complete the task quickly. Multiline fields let merchants type long blocks of text. There are a few different versions:"
                },
                {
                    "type": "list",
                    "items": [
                        "Plain textarea elements with no formatting options",
                        "Formatted textarea elements with what-you-see-is-what-you-get (WYSIWYG) menus",
                        "Plain text input elements that accept long strings of text",
                        "Plain text input elements that accept long strings of text and expand as the user types"
                    ]
                },
                {
                    "type": "p",
                    "text": "Multiline inputs hold things like product and collection descriptions, notes about an order that only store staff can access, notes that the customer can access, and anything else the merchant wants to type into them. We usually don’t know what will go in multiline fields, so providing example text isn’t helpful. Instead, include help text that explains how the text will be used and who can view it. Don’t use placeholder text for comments and notes; use help text instead. Comments and notes help merchants keep track of unstructured information they may need about an order or a buyer. Some comments and notes are not visible to customers, but some are. In the help text, describe clearly who will be able to view the note. For standard text fields, avoid placeholder text. However, regular or floating placeholder text can be used for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Search fields",
                        "Filter fields",
                        "Email entry fields"
                    ]
                },
                {
                    "type": "p",
                    "text": "Placeholder text is a common, recognizable pattern for these field types. Moving the placeholder text outside of the text field box may seem out of place and negatively impact the visual design of some marketing pages. To make search, filter, and email entry fields more accessible, always move the placeholder text above the cursor while the field is in focus. This lets the user read the placeholder text as soon as they select the field. There are some cases where help text clutters a page. For example, the minimalist design of pages like the admin login page would be significantly changed by adding another line of text. As with standard placeholder text, the placeholder should float above the text entry once the field has been selected. It’s not easy for everyone to read the small print of the floating text, so use this method sparingly."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/app-settings-layout",
            "title": "App settings layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Discuss on GitHub"
                },
                {
                    "type": "list",
                    "items": [
                        "In the left column, glanceable labels and descriptions are listed to make it easier for merchants to scan the page and quickly find what they are looking for.",
                        "In the right column, settings are grouped in cards to make it easier for merchants to configure a setting after it's been found, or to configure multiple settings that might belong together."
                    ]
                },
                {
                    "type": "p",
                    "text": "This pattern uses theBlockStack,Card,InlineGridandBoxcomponents."
                },
                {
                    "type": "code",
                    "code": "// This example is for guidance purposes. Copying it will come with caveats.functionAppSettingsLayoutExample(){const{smUp}=useBreakpoints();return(<PagedividerprimaryAction={{content:\"View on your store\",disabled:true}}secondaryActions={[{content:\"Duplicate\",accessibilityLabel:\"Secondary action label\",onAction:()=>alert(\"Duplicate action\"),},]}><BlockStackgap={{xs:\"800\",sm:\"400\"}}><InlineGridcolumns={{xs:\"1fr\",md:\"2fr 5fr\"}}gap=\"400\"><Boxas=\"section\"paddingInlineStart={{xs:400,sm:0}}paddingInlineEnd={{xs:400,sm:0}}><BlockStackgap=\"400\"><Textas=\"h3\"variant=\"headingMd\">InterJambs</Text><Textas=\"p\"variant=\"bodyMd\">Interjambsare the rounded protruding bitsofyour puzzlie piece</Text></BlockStack></Box><CardroundedAbove=\"sm\"><BlockStackgap=\"400\"><TextFieldlabel=\"Interjamb style\"/><TextFieldlabel=\"Interjamb ratio\"/></BlockStack></Card></InlineGrid>{smUp?<Divider/>:null}<InlineGridcolumns={{xs:\"1fr\",md:\"2fr 5fr\"}}gap=\"400\"><Boxas=\"section\"paddingInlineStart={{xs:400,sm:0}}paddingInlineEnd={{xs:400,sm:0}}><BlockStackgap=\"400\"><Textas=\"h3\"variant=\"headingMd\">Dimensions</Text><Textas=\"p\"variant=\"bodyMd\">Interjambsare the rounded protruding bitsofyour puzzlie piece</Text></BlockStack></Box><CardroundedAbove=\"sm\"><BlockStackgap=\"400\"><TextFieldlabel=\"Horizontal\"/><TextFieldlabel=\"Interjamb ratio\"/></BlockStack></Card></InlineGrid></BlockStack></Page>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Don't include a description unless it's helpful.",
                        "Place grouped settings within cards.",
                        "Stack all setting groups vertically on the page."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "See another two-column layout in use in theResource detail layoutpattern.",
                        "See a single-column layout in use in theResource index layoutpattern.",
                        "Learn more aboutLayoutin the app design guidelines."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/card-layout",
            "title": "Card layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Cards are made up of three main parts: the header, the body, and the footer. Each part has a specific role and should contain content that serves that role. A standardized structure ensures that common elements can be placed consistently. Consistent placement allows merchants to attach meaning to places, shape expectations, and quickly find what they are looking for. The header represents the whole card. It typically has acard titlethat makes the card easy to find, and often aheader actionthat allows merchants to modify the card contents or navigate to where they can view more details. The card title represents the whole card. It should describe the purpose of the card and help merchants quickly find it among other cards. Choose a title that clearly conveys the purpose of the card. Use the object type as card title when the card is a list of objects. Choose a title to clarify what the header action does. Choose a title that represents all sections if a card has multiple sections. Actions in the header should represent the content of the whole card. The most common header action is the \"Edit\" action, which allows merchants to modify the contents of the card. Another common action is the \"View\" action, which allows merchants to navigate to the source of the contents. Default to usingtertiary icon buttonsin the header. Clarify the action with a tooltip. Place call-to-actions in the card header. Instead, place them in the card footer where merchants typically find actions that progress towards their goals. Seefooter actions. Place actions that affect specific list items on the item itself. Place action in the header unless it represents the entire card. Instead, place the action in proximity to what it represents. Avoid placinglist actionsin the card header by default. Default to placing such actions at the end of the list where the added item will appear. If cards only contain a list, then list actions may be placed in the header for merchant convenience. Group actions in the header by default. Instead, use these guidelines to find placements that have meaning to merchants. Table actions are placed to the right in the header to keep them discoverable. They are typically actions that allow merchants to add item or select items that will display in the table. The body holds the main content of a card. Common content types, such as lists, tables, and form layouts, are organized into one or multiplecard sections. Card sections are used to group content in cards, and to separate such groups when there are more than one. A section typically has a heading and a main block of content, such as a list or a form layout. Use a card with multiple sections to group content that shares purpose. Use card sections to divide list items. Instead, use the appropriate list component or build a bespoke list structure within a single section. Omit the section title in cards with a single section. However, maintain thespace-200 gapas typically used between section titles and content. Allow cards to become so tall that they are difficult to overview. Instead, provide afooter actionthat allows merchants to expand and collapse the content. Place section actions in the section header where merchants can associate them to what they control. Group section actions in the card header, as it disconnects them from what they control. Instead, place such actions in the respective section header. Form layouts are containers that give structure to form elements, or “form layout items”. They often contain multiple items, but can also house a single one. Form layouts are containers that give structure to form elements, or “form layout items”. They often contain multiple items, but can also house a single one. Use a form layout even when there is only a single item. Allow form layout items to be wider than necessary. Instead, use aform layout groupto arrange them side-by-side. Allow large areas of empty space to appear next to choice lists. Instead, find alternatives that make better use of horizontal space. The footer is placed after the main content, which makes it an intuitive place for content and actions that extends from the card content. For example, call-to-actions that allow merchants to react to the card and continue with their next task. Call-to-actions are specific prompts designed to guide merchants towards a goal. They are placed towards the right to inspire progress. A card can have none, one, or multiple call-to-actions. They are placed in the footer, so that merchants can react to the card contents and easily take the next step forward. Default to using basic buttons in the footer. Only use a primary button when it’s the most important action on the page. Use an action list if the card has more than two call-to-actions. Use call-to-actions in the footer to update the content or presentation of the card. Instead, useheader actionsandlist actions. Use a primary button for actions that aren’t critical to fulfilling the purpose of the page. List actions are placed to the left in the footer. They are typically actions that allow merchants to add items to lists or expand and collapse the list. Allow merchants to expand and collapse long lists. Repeat the object name in the button label. Instead, choose a card title that makes it clear what is being added to the list. When composing card content, spacing is used to achieve two important visual effects: grouping and hierarchy. When merchants can perceive clear grouping and hierarchy, it’s easier for them to scan a lot of content and faster find what they need. In the admin, spacing is mainly achieved using padding and stacks. Padding is the space between a container’s content and its border. The default card padding is space-400. It’s common that cards have containers nested inside them. When these containers have visual boundaries, such as with borders or dividers, then padding is used to create space between its content and border. The general rule is that the deeper an element is nested, the smaller its padding is. Apply padding to the card by default, and usebleedwith a negative margin to optically adjust content if needed. Use padding to create space between elements. Instead, useblock stacks. Use padding inside visually scoped containers, such as the header of a data table. Use padding for invisible containers, such as card sections or form layouts. Instead, useblock stacks. Stacks are used to group content and give equal spacing between the elements within the group. The space between the elements is called the gap, and is always the same between each element. Stacks can also be nested to apply different gaps between different groups of content. It’s the difference between the gap sizes that creates the effect of grouping and hierarchy. Elements with tighter gaps are perceived as more related than those with a looser gap. Use nested stacks to help merchants distinguish between closely and loosely related content, such as between sibling items and the content within an item. Use a flat hierarchy for content that should have different spatial relationships. For example, labels should be closer connected to the element it represents than to the element it doesn’t. Use nested stacks to clearly associate section titles to the content they represent. Use a flat hierarchy that causes section titles to float with equal space to sections above and below. There are a few common stacks that can be used to meet recurring spacing needs. These stacks have gaps that range from space-100 to space-400, and they are purposefully used to create a familiar hierarchy of groups in cards across the admin. Space-100is the tightest gap in cards and is used to group the most\nrelated elements. The tight spacing makes the grouped elements stand out like\na unified item amongst surrounding groups. Use space-100 between the elements within a form layout item. Use space-100 between list items without help text or other types of child elements. Space-200is the second tightest gap and is typically used to separate\nblocks of content inside card sections. Using space-200 is the most common way\nto space stacks that use space-100 gaps. Use space-200 between the header, body, and footer in a card with a single section. Use space-200 between the heading and content of a card section. Use space-200 between items that are stacks with space-100 gaps. Grouping such items looser creates a distinguishable contrast to the tighter inner group. Use space-200 between simple list items. Instead, use space-100 as these are the innermost groups. Space-300gaps are typically used to ensure clear separation between blocks containing closely related but irregularly shaped content, such as form layout items. While space-200 gaps might seem logical around stacks with space-100 gaps, a smaller gap size often obscures groupings when block boundaries are hard to discern. This is particularly true for form layout items, where labels, inputs, and help text all exhibit variable size, shape, and weight. By increasing the gap size, content blocks can be more readily perceived as unified, discrete items. Use space-300 between form layout items. Use too tight spacing between groups of elements that have variable weight and shape, such as form layout items. Space-400is the loosest card gap and is typically used to space cards\nwith multiple sections. The gap size is the same as the card padding, which\nstructures sections as neatly merged cards. Use space-400 to separate card sections inside cards. Use space-400 inside card sections, as it can disconnect content that belongs together. Instead, default to space-200 and upsize to space-300 if the former seems too tight. Content alignment makes cards more balanced and easier for merchants to scan. Content should be vertically aligned along both the left and right edge of the card. It’s always more important to align contentoptically, so that it appears to be aligned rather than technically being aligned. Use space-400 to separate card sections inside cards. Use space-400 inside card sections, as it can disconnect content that belongs together. Instead, default to space-200 and upsize to space-300 if the former seems too tight."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/common-actions",
            "title": "Common actions — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Add inserts existing or new objects, items, or data into the UI. For example, adding an item to a list or adding an element into a layout. Default to the circle plus icon for add actions. Use the plus icon insecondaryandprimarybuttonvariants. The plus icon supports the action while balancing the weight of the filled shaped element with the rest of the UI. Place add actions at the bottom of a list unless the list will likely be long. For example, a table or list of selected resources. Place add actions at the bottom of a list of selectable options. For example, when picking a collection or tag to add to a product. Keep the action visible by placing it outside of the scrollable area. Place add actions in the header in long lists of resources. Place add actions associated with a table in the card, table, or page header. Use a secondary button when \"Add\" is the main action for a card that has a standalone table or list as its content. Place add actions at the bottom of a table. This risks them getting lost and can cause confusion. Include intermediary steps during the creation of a resource. Place these configuration options on the newly created page itself. Copy duplicates selected content and stores it temporarily in the merchant’s clipboard. Use the clipboard icon with a tertiary icon button for copying a string of text. Use the link icon with a tertiary icon button for copying deep links and URLs. Provide feedback inline using a confirmation check icon post-click or tap. Show copy actions on hover for cursor interactions. See thecopy to clipboardexample. Provide feedback inline using a confirmation check icon post-click or tap. Provide feedback inline using a confirmation check icon post-click or tap. Use a confirmation “copied to clipboard” toast message when “copy” is within an action list. Use a confirmation “copied to clipboard” toast message when the action is within an action list. Delete destroys an item or object and completely erases data from the system. Use the delete icon with a destructive item in anaction list. Always place delete actions at the bottom of an action list. Use the delete icon for delete actions in lists. Use the x icon for delete actions. Place list item delete actions inline to the right. Default to a tertiary button with the delete icon. Display list item delete actions on hover when using a cursor. Display list item delete actions on hover when using a cursor. Don’t overuse critical styled buttons within a single view as it can dilute the meaning and importance of the action. Don’t pair primary critical buttons with other button variants and tones that look jarring and create visual competition between elements. Edit actions allow merchants to make changes to a piece of content or object that already exists in the system. Use edit for modifying, updating or managing an item or object. Default to the edit icon with a tertiary icon button. Avoid using too many buttons with filled or shaped containers in close proximity to each other, as they will make the interface feel cluttered and confusing. More actions display available or additional actions for element or item. Use the menu horizontal icon to indicate available or more actions for an item. Use a secondary or tertiary icon button. Group actions in the card header by default. Instead, consider alternative solutions that place actions in context or appear within a given flow or task as needed. Viewcard layout patternsfor more information. Pin sticks an object to an easily accessible location within the UI. Pinning allows merchants to keep important items available to quickly access later. Use the pin icon with a tertiary icon button to communicate an item can be pinned. Use the pin filled icon on an item to show that it has been pinned. Placed pinned objects together to add clarity to the relationship between items. Make it easy to unpin an item. This action removes an item from a list or breaks the relationship between objects. When an object is removed, it is taken out of a given context without deleting it from the system. For example, if a product is removed from a collection, it still exists and can be easily added back. Use the x icon with a tertiary icon button. Show remove actions on hover when the merchant is using a cursor to navigate. Use the delete icon for remove actions."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/common-actions/best-practices",
            "title": "Common actions — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Actions should always clearly communicate their purpose by using a text label, an icon, or a combination of both. See theactionable language guidelinesfor more detail. Use icons in place of text for common actions. Leveraging pre-existing knowledge will improve clarity and help reduce clutter, since these icons require no text label. Keep labels short and concise. Add unnecessary words to the action label. Instead, use context and placement to communicate the outcome of an action. Place icons to the left of an action’s label. Use an icon that represents the verb when a label includes multiple words. Use the appropriate icon to reinforce the message when referring to a specialized or complex action. Reflect the object type in the action’s label using the verb + noun format. Use an icon along with the text label for common actions displayed within an action list. Style and placement help visually communicate the importance of an action on the page. Use secondary or tertiary buttons to give actions less emphasis while making them accessible for as many users as possible. Actions in editors need an additional level of emphasis to attract merchant attention and establish hierarchy between elements. Use the emphasis color role for actions in editors. Use primary and secondary buttons to help merchants identify which action they’ll most likely want within a given view. Seecard layout patternsfor more information. Use a tertiary icon button for items and rows in a list or table. Avoid using more than two shaped or filled buttons within a card as they can degrade hierarchy and cause confusion. Elements that are visually similar behave consistently throughout the interface. Consistency in behavior reduces confusion and cognitive load for merchants. Make focus rings visible when a merchant is using the keyboard to interact with the UI. Don't make focus rings visible when a merchant is using a cursor to interact with elements. Make focus rings visible when a merchant is using a cursor to interact with elements. Use disabled styles for elements that the merchant can interact with. Use disabled styles for elements that the merchant can interact with. Rely on color alone to indicate interactivity. Use interactions native to the device and type of input the merchant is using. Actions on desktop and mobile should consider both cursor and touch interactions, but the primary interaction for the desktop is cursor-based. Take advantage of added real-estate and interactions by using progressive disclosure to expose actions in context when the merchant needs them. Show list item actions like edit, delete, copy, and remove on hover. The primary interaction for the mobile is touch-based. Optimize for touch enabled devices by considering placement and target size of actions."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/common-actions/overview",
            "title": "Common actions — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Add inserts existing or new objects, items, or data into the UI. For example, adding an item to a list or adding an element into a layout. Default to the circle plus icon for add actions. Use the plus icon insecondaryandprimarybuttonvariants. The plus icon supports the action while balancing the weight of the filled shaped element with the rest of the UI. Place add actions at the bottom of a list unless the list will likely be long. For example, a table or list of selected resources. Place add actions at the bottom of a list of selectable options. For example, when picking a collection or tag to add to a product. Keep the action visible by placing it outside of the scrollable area. Place add actions in the header in long lists of resources. Place add actions associated with a table in the card, table, or page header. Use a secondary button when \"Add\" is the main action for a card that has a standalone table or list as its content. Place add actions at the bottom of a table. This risks them getting lost and can cause confusion. Include intermediary steps during the creation of a resource. Place these configuration options on the newly created page itself. Copy duplicates selected content and stores it temporarily in the merchant’s clipboard. Use the clipboard icon with a tertiary icon button for copying a string of text. Use the link icon with a tertiary icon button for copying deep links and URLs. Provide feedback inline using a confirmation check icon post-click or tap. Show copy actions on hover for cursor interactions. See thecopy to clipboardexample. Provide feedback inline using a confirmation check icon post-click or tap. Provide feedback inline using a confirmation check icon post-click or tap. Use a confirmation “copied to clipboard” toast message when “copy” is within an action list. Use a confirmation “copied to clipboard” toast message when the action is within an action list. Delete destroys an item or object and completely erases data from the system. Use the delete icon with a destructive item in anaction list. Always place delete actions at the bottom of an action list. Use the delete icon for delete actions in lists. Use the x icon for delete actions. Place list item delete actions inline to the right. Default to a tertiary button with the delete icon. Display list item delete actions on hover when using a cursor. Display list item delete actions on hover when using a cursor. Don’t overuse critical styled buttons within a single view as it can dilute the meaning and importance of the action. Don’t pair primary critical buttons with other button variants and tones that look jarring and create visual competition between elements. Edit actions allow merchants to make changes to a piece of content or object that already exists in the system. Use edit for modifying, updating or managing an item or object. Default to the edit icon with a tertiary icon button. Avoid using too many buttons with filled or shaped containers in close proximity to each other, as they will make the interface feel cluttered and confusing. More actions display available or additional actions for element or item. Use the menu horizontal icon to indicate available or more actions for an item. Use a secondary or tertiary icon button. Group actions in the card header by default. Instead, consider alternative solutions that place actions in context or appear within a given flow or task as needed. Viewcard layout patternsfor more information. Pin sticks an object to an easily accessible location within the UI. Pinning allows merchants to keep important items available to quickly access later. Use the pin icon with a tertiary icon button to communicate an item can be pinned. Use the pin filled icon on an item to show that it has been pinned. Placed pinned objects together to add clarity to the relationship between items. Make it easy to unpin an item. This action removes an item from a list or breaks the relationship between objects. When an object is removed, it is taken out of a given context without deleting it from the system. For example, if a product is removed from a collection, it still exists and can be easily added back. Use the x icon with a tertiary icon button. Show remove actions on hover when the merchant is using a cursor to navigate. Use the delete icon for remove actions."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/date-picking",
            "title": "Date picking — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Discuss on GitHub This enables merchants to type a specific date or pick it from a calendar."
                },
                {
                    "type": "list",
                    "items": [
                        "The text input gives merchants the option to use the keyboard to enter a date.",
                        "A single month calendar allows merchants to select a date while seeing its relationship to other days."
                    ]
                },
                {
                    "type": "p",
                    "text": "This pattern uses theCard,DatePicker,PopoverandTextFieldcomponents."
                },
                {
                    "type": "code",
                    "code": "// This example is for guidance purposes. Copying it will come with caveats.functionDatePickerExample(){functionnodeContainsDescendant(rootNode,descendant){if(rootNode===descendant){returntrue;}letparent=descendant.parentNode;while(parent!=null){if(parent===rootNode){returntrue;}parent=parent.parentNode;}returnfalse;}const[visible,setVisible]=useState(false);const[selectedDate,setSelectedDate]=useState(newDate());const[{month,year},setDate]=useState({month:selectedDate.getMonth(),year:selectedDate.getFullYear(),});constformattedValue=selectedDate.toISOString().slice(0,10);constdatePickerRef=useRef(null);functionisNodeWithinPopover(node){returndatePickerRef?.current?nodeContainsDescendant(datePickerRef.current,node):false;}functionhandleInputValueChange(){console.log(\"handleInputValueChange\");}functionhandleOnClose({relatedTarget}){setVisible(false);}functionhandleMonthChange(month,year){setDate({month,year});}functionhandleDateSelection({end:newSelectedDate}){setSelectedDate(newSelectedDate);setVisible(false);}useEffect(()=>{if(selectedDate){setDate({month:selectedDate.getMonth(),year:selectedDate.getFullYear(),});}},[selectedDate]);return(<BlockStackinlineAlign=\"center\"gap=\"400\"><BoxminWidth=\"276px\"padding={{xs:200}}><Popoveractive={visible}autofocusTarget=\"none\"preferredAlignment=\"left\"fullWidthpreferInputActivator={false}preferredPosition=\"below\"preventCloseOnChildOverlayClickonClose={handleOnClose}activator={<TextFieldrole=\"combobox\"label={\"Start date\"}prefix={<Iconsource={CalendarIcon}/>}value={formattedValue}onFocus={()=>setVisible(true)}onChange={handleInputValueChange}autoComplete=\"off\"/>}><Cardref={datePickerRef}><DatePickermonth={month}year={year}selected={selectedDate}onMonthChange={handleMonthChange}onChange={handleDateSelection}/></Card></Popover></Box></BlockStack>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Labels need to simply depict the task at hand. Whether that be a start date, end date, start time etc.",
                        "This pattern can be duplicated to allow users to add an end date or time."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Programming timezones can be finicky. Get great tips in the articleUTC is for everyone right?",
                        "Learn about date formatting in theGrammar and mechanicsguidelines.",
                        "See how to craft effective button labels in theActionable languageguidelines."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/date-picking/date-list",
            "title": "Date picking — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Discuss on GitHub This enables merchants to select a date or a date range from a list of preset dates."
                },
                {
                    "type": "list",
                    "items": [
                        "The date list provides merchants with suggested dates. This makes date picking simpler when useful dates are predictable and custom dates aren’t necessary."
                    ]
                },
                {
                    "type": "p",
                    "text": "This pattern uses theButton,OptionListandPopovercomponents."
                },
                {
                    "type": "code",
                    "code": "// This example is for guidance purposes. Copying it will come with caveats.functionDateListPicker(){constranges=[{title:\"No Date\",alias:\"no-date\",period:null,},{title:\"Today\",alias:\"today\",period:{since:\"today\",until:\"today\",},},{title:\"Yesterday\",alias:\"yesterday\",period:{since:\"yesterday\",until:\"yesterday\",},},{title:\"Last 7 days\",alias:\"last7days\",period:{since:\"-7d\",until:\"-1d\",},},];const[selected,setSelected]=useState(ranges[0]);const[popoverActive,setPopoverActive]=useState(false);return(<PopoverautofocusTarget=\"none\"preferredAlignment=\"left\"preferInputActivator={false}preferredPosition=\"below\"activator={<ButtononClick={()=>setPopoverActive(!popoverActive)}icon={CalendarIcon}>{selected.title}</Button>}active={popoverActive}><OptionListoptions={ranges.map((range)=>({value:range.alias,label:range.title,}))}selected={selected.alias}onChange={(value)=>{setSelected(ranges.find((range)=>range.alias===value[0]));setPopoverActive(false);}}/></Popover>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "In the button preview, set a default date range that a merchant will most likely use.",
                        "Single dates should be at the top of the list, followed by date ranges from smallest to largest ranges.",
                        "A date list can be modified to serve unique situations, like providing suggested search queries in the customer segment editor."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Programming timezones can be finicky. Get great tips in the articleUTC is for everyone right?",
                        "Learn about date formatting in theGrammar and mechanicsguidelines.",
                        "See how to craft effective button labels in theActionable languageguidelines."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/date-picking/date-range",
            "title": "Date picking — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Discuss on GitHub This enables merchants to select a date range."
                },
                {
                    "type": "list",
                    "items": [
                        "Providing multiple ways to select a date range gives merchants full flexibility. The list provides quick access to common options, the text input makes it easier to set large custom ranges, and the calendar is an intuitive way to set a more narrow scope.",
                        "Displaying two months makes it easier for merchants to select date ranges that span across both.",
                        "Selecting a date range may require multiple steps, so merchants prefer to explicitly confirm their selection, unlike the single date picker which closes on selection."
                    ]
                },
                {
                    "type": "p",
                    "text": "This pattern uses theBlockStack,Box,Button,InlineGrid,DatePicker,InlineStack,OptionList,PopoverandTextFieldcomponents."
                },
                {
                    "type": "code",
                    "code": "// This example is for guidance purposes. Copying it will come with caveats.functionDateRangePicker(){const{mdDown,lgUp}=useBreakpoints();constshouldShowMultiMonth=lgUp;consttoday=newDate(newDate().setHours(0,0,0,0));constyesterday=newDate(newDate(newDate().setDate(today.getDate()-1)).setHours(0,0,0,0));constranges=[{title:\"Today\",alias:\"today\",period:{since:today,until:today,},},{title:\"Yesterday\",alias:\"yesterday\",period:{since:yesterday,until:yesterday,},},{title:\"Last 7 days\",alias:\"last7days\",period:{since:newDate(newDate(newDate().setDate(today.getDate()-7)).setHours(0,0,0,0)),until:yesterday,},},];const[popoverActive,setPopoverActive]=useState(false);const[activeDateRange,setActiveDateRange]=useState(ranges[0]);const[inputValues,setInputValues]=useState({});const[{month,year},setDate]=useState({month:activeDateRange.period.since.getMonth(),year:activeDateRange.period.since.getFullYear(),});constdatePickerRef=useRef(null);constVALID_YYYY_MM_DD_DATE_REGEX=/^\\d{4}-\\d{1,2}-\\d{1,2}/;functionisDate(date){return!isNaN(newDate(date).getDate());}functionisValidYearMonthDayDateString(date){returnVALID_YYYY_MM_DD_DATE_REGEX.test(date)&&isDate(date);}functionisValidDate(date){returndate.length===10&&isValidYearMonthDayDateString(date);}functionparseYearMonthDayDateString(input){// Date-only strings (e.g. \"1970-01-01\") are treated as UTC, not local time// when using new Date()// We need to split year, month, day to pass into new Date() separately// to get a localized Dateconst[year,month,day]=input.split(\"-\");returnnewDate(Number(year),Number(month)-1,Number(day));}functionformatDateToYearMonthDayDateString(date){constyear=String(date.getFullYear());letmonth=String(date.getMonth()+1);letday=String(date.getDate());if(month.length<2){month=String(month).padStart(2,\"0\");}if(day.length<2){day=String(day).padStart(2,\"0\");}return[year,month,day].join(\"-\");}functionformatDate(date){returnformatDateToYearMonthDayDateString(date);}functionnodeContainsDescendant(rootNode,descendant){if(rootNode===descendant){returntrue;}letparent=descendant.parentNode;while(parent!=null){if(parent===rootNode){returntrue;}parent=parent.parentNode;}returnfalse;}functionisNodeWithinPopover(node){returndatePickerRef?.current?nodeContainsDescendant(datePickerRef.current,node):false;}functionhandleStartInputValueChange(value){setInputValues((prevState)=>{return{...prevState,since:value};});console.log(\"handleStartInputValueChange, validDate\",value);if(isValidDate(value)){constnewSince=parseYearMonthDayDateString(value);setActiveDateRange((prevState)=>{constnewPeriod=prevState.period&&newSince<=prevState.period.until?{since:newSince,until:prevState.period.until}:{since:newSince,until:newSince};return{...prevState,period:newPeriod,};});}}functionhandleEndInputValueChange(value){setInputValues((prevState)=>({...prevState,until:value}));if(isValidDate(value)){constnewUntil=parseYearMonthDayDateString(value);setActiveDateRange((prevState)=>{constnewPeriod=prevState.period&&newUntil>=prevState.period.since?{since:prevState.period.since,until:newUntil}:{since:newUntil,until:newUntil};return{...prevState,period:newPeriod,};});}}functionhandleInputBlur({relatedTarget}){constisRelatedTargetWithinPopover=relatedTarget!=null&&isNodeWithinPopover(relatedTarget);// If focus moves from the TextField to the Popover// we don't want to close the popoverif(isRelatedTargetWithinPopover){return;}setPopoverActive(false);}functionhandleMonthChange(month,year){setDate({month,year});}functionhandleCalendarChange({start,end}){constnewDateRange=ranges.find((range)=>{return(range.period.since.valueOf()===start.valueOf()&&range.period.until.valueOf()===end.valueOf());})||{alias:\"custom\",title:\"Custom\",period:{since:start,until:end,},};setActiveDateRange(newDateRange);}functionapply(){setPopoverActive(false);}functioncancel(){setPopoverActive(false);}useEffect(()=>{if(activeDateRange){setInputValues({since:formatDate(activeDateRange.period.since),until:formatDate(activeDateRange.period.until),});functionmonthDiff(referenceDate,newDate){return(newDate.month-referenceDate.month+12*(referenceDate.year-newDate.year));}constmonthDifference=monthDiff({year,month},{year:activeDateRange.period.until.getFullYear(),month:activeDateRange.period.until.getMonth(),});if(monthDifference>1||monthDifference<0){setDate({month:activeDateRange.period.until.getMonth(),year:activeDateRange.period.until.getFullYear(),});}}},[activeDateRange]);constbuttonValue=activeDateRange.title===\"Custom\"?activeDateRange.period.since.toDateString()+\" - \"+activeDateRange.period.until.toDateString():activeDateRange.title;return(<Popoveractive={popoverActive}autofocusTarget=\"none\"preferredAlignment=\"left\"preferredPosition=\"below\"fluidContentsectioned={false}fullHeightactivator={<Buttonsize=\"slim\"icon={CalendarIcon}onClick={()=>setPopoverActive(!popoverActive)}>{buttonValue}</Button>}onClose={()=>setPopoverActive(false)}><Popover.Panefixed><InlineGridcolumns={{xs:\"1fr\",mdDown:\"1fr\",md:\"max-content max-content\",}}gap={0}ref={datePickerRef}><BoxmaxWidth={mdDown?\"516px\":\"212px\"}width={mdDown?\"100%\":\"212px\"}padding={{xs:500,md:0}}paddingBlockEnd={{xs:100,md:0}}>{mdDown?(<Selectlabel=\"dateRangeLabel\"labelHiddenonChange={(value)=>{constresult=ranges.find(({title,alias})=>title===value||alias===value);setActiveDateRange(result);}}value={activeDateRange?.title||activeDateRange?.alias||\"\"}options={ranges.map(({alias,title})=>title||alias)}/>):(<Scrollablestyle={{height:\"334px\"}}><OptionListoptions={ranges.map((range)=>({value:range.alias,label:range.title,}))}selected={activeDateRange.alias}onChange={(value)=>{setActiveDateRange(ranges.find((range)=>range.alias===value[0]));}}/></Scrollable>)}</Box><Boxpadding={{xs:500}}maxWidth={mdDown?\"320px\":\"516px\"}><BlockStackgap=\"400\"><InlineStackgap=\"200\"><div style={{flexGrow:1}}><TextFieldrole=\"combobox\"label={\"Since\"}labelHiddenprefix={<Iconsource={CalendarIcon}/>}value={inputValues.since}onChange={handleStartInputValueChange}onBlur={handleInputBlur}autoComplete=\"off\"/></div><Iconsource={ArrowRightIcon}/><div style={{flexGrow:1}}><TextFieldrole=\"combobox\"label={\"Until\"}labelHiddenprefix={<Iconsource={CalendarIcon}/>}value={inputValues.until}onChange={handleEndInputValueChange}onBlur={handleInputBlur}autoComplete=\"off\"/></div></InlineStack><div><DatePickermonth={month}year={year}selected={{start:activeDateRange.period.since,end:activeDateRange.period.until,}}onMonthChange={handleMonthChange}onChange={handleCalendarChange}multiMonth={shouldShowMultiMonth}allowRange/></div></BlockStack></Box></InlineGrid></Popover.Pane><Popover.Panefixed><Popover.Section><InlineStackalign=\"end\"><ButtononClick={cancel}>Cancel</Button><Buttonprimary onClick={apply}>Apply</Button></InlineStack></Popover.Section></Popover.Pane></Popover>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Pin any relevant, merchant-specific dates to the top of the option list.",
                        "If a date cannot be selected, indicate it with thedisabled text color token",
                        "If a merchant enters a nonexistent date, revert to the previously selected date."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Programming timezones can be finicky. Get great tips in the articleUTC is for everyone right?",
                        "Learn about date formatting in theGrammar and mechanicsguidelines.",
                        "See how to craft effective button labels in theActionable languageguidelines."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/date-picking/single-date",
            "title": "Date picking — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Discuss on GitHub This enables merchants to type a specific date or pick it from a calendar."
                },
                {
                    "type": "list",
                    "items": [
                        "The text input gives merchants the option to use the keyboard to enter a date.",
                        "A single month calendar allows merchants to select a date while seeing its relationship to other days."
                    ]
                },
                {
                    "type": "p",
                    "text": "This pattern uses theCard,DatePicker,PopoverandTextFieldcomponents."
                },
                {
                    "type": "code",
                    "code": "// This example is for guidance purposes. Copying it will come with caveats.functionDatePickerExample(){functionnodeContainsDescendant(rootNode,descendant){if(rootNode===descendant){returntrue;}letparent=descendant.parentNode;while(parent!=null){if(parent===rootNode){returntrue;}parent=parent.parentNode;}returnfalse;}const[visible,setVisible]=useState(false);const[selectedDate,setSelectedDate]=useState(newDate());const[{month,year},setDate]=useState({month:selectedDate.getMonth(),year:selectedDate.getFullYear(),});constformattedValue=selectedDate.toISOString().slice(0,10);constdatePickerRef=useRef(null);functionisNodeWithinPopover(node){returndatePickerRef?.current?nodeContainsDescendant(datePickerRef.current,node):false;}functionhandleInputValueChange(){console.log(\"handleInputValueChange\");}functionhandleOnClose({relatedTarget}){setVisible(false);}functionhandleMonthChange(month,year){setDate({month,year});}functionhandleDateSelection({end:newSelectedDate}){setSelectedDate(newSelectedDate);setVisible(false);}useEffect(()=>{if(selectedDate){setDate({month:selectedDate.getMonth(),year:selectedDate.getFullYear(),});}},[selectedDate]);return(<BlockStackinlineAlign=\"center\"gap=\"400\"><BoxminWidth=\"276px\"padding={{xs:200}}><Popoveractive={visible}autofocusTarget=\"none\"preferredAlignment=\"left\"fullWidthpreferInputActivator={false}preferredPosition=\"below\"preventCloseOnChildOverlayClickonClose={handleOnClose}activator={<TextFieldrole=\"combobox\"label={\"Start date\"}prefix={<Iconsource={CalendarIcon}/>}value={formattedValue}onFocus={()=>setVisible(true)}onChange={handleInputValueChange}autoComplete=\"off\"/>}><Cardref={datePickerRef}><DatePickermonth={month}year={year}selected={selectedDate}onMonthChange={handleMonthChange}onChange={handleDateSelection}/></Card></Popover></Box></BlockStack>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Labels need to simply depict the task at hand. Whether that be a start date, end date, start time etc.",
                        "This pattern can be duplicated to allow users to add an end date or time."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Programming timezones can be finicky. Get great tips in the articleUTC is for everyone right?",
                        "Learn about date formatting in theGrammar and mechanicsguidelines.",
                        "See how to craft effective button labels in theActionable languageguidelines."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/error-messages",
            "title": "Error messages — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Error messages should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tell merchants what happened. If there’s a solution, explain it. If possible, offer a one-click fix with a button. If there’sno solution, give troubleshooting instructions.",
                        "Be placed close to the source of the problem.",
                        "Communicate severity using the appropriatecolorandtone of voice.",
                        "Useplain language.",
                        "Be specific. For example, use precisenumbers and dates.",
                        "Be brief."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good design can reduce the need for error messages by preventing them in the first place. Think about the scope of the error when selecting a message type. Is something wrong with the entire application, with the entire current screen, or with a specific element on the screen? If the cause of the error is visible and the error just happened, show the error message immediately and as close to the source of the problem as possible. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to a text field and feedback can be provided while merchants are typing"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "The form input is valid, but you want to warn merchants of a consequence they might not expect"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to the entire page",
                        "The error is far down the page and it’s critical merchants see the message",
                        "Multiple validation errors on the page need to be summarized",
                        "The error was delayed and it’s okay to inform merchants of the problem when they return to the page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to a single card within the page, a single section within a card, or a modal",
                        "You need to direct merchants to a page with multiple sections and you want to visually call out the section with the error"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A message placed within or next to a component can help merchants make better decisions about routine tasks"
                    ]
                },
                {
                    "type": "p",
                    "text": "Note: Home notifications should rarely be used for errors. Always attempt to display an error close to the source of the problem. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A high-priority task must be completed immediately to continue using Shopify or avoid losing money",
                        "A feature doesn’t have a dedicated details page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A server error is preventing an entire page from being displayed, like with 400 or 500-series server errors",
                        "Account permissions are preventing someone from accessing Shopify"
                    ]
                },
                {
                    "type": "p",
                    "text": "Red is the scariest error color. Only use red for critical messages that merchants need to deal with immediately to avoid harm to their business. For example, if merchants don’t act on the message right away, they might lose money or their store might be suspended. Yellow error messages still demand attention, but are more appropriate for messages that are part of a daily workflow. Use critical messages to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Bring attention to urgent tasks. If not dealt with immediately, merchants' businesses will be noticeably impacted, like an account being suspended or money being lost."
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples of critical message types:"
                },
                {
                    "type": "list",
                    "items": [
                        "Update a payment method expiry date",
                        "Unsuspend an account",
                        "Review an order for fraud",
                        "Fix a problem that’s preventing payment from being processed"
                    ]
                },
                {
                    "type": "p",
                    "text": "The one exception to using red is in form validation errors because this is a standard convention merchants are used to seeing outside of Shopify. Use warning messages to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Help merchants fix issues so they can complete a common workflow or continue to the next step",
                        "Notify merchants about upcoming expirations or pending requests that, if not dealt with soon, could lead to problems in the future"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples of warning message types:"
                },
                {
                    "type": "list",
                    "items": [
                        "Fix a problem before proceeding to the next step.",
                        "Fix a problem at some point in a common workflow.",
                        "There’s a pending request.",
                        "There’s an upcoming expiration.",
                        "Changing a setting might have unintended consequences. Seesettings warning."
                    ]
                },
                {
                    "type": "p",
                    "text": "Although error toast is still available, we discourage its use. Toast messages are too short to adequately explain what went wrong and how to fix the problem. Because the toast component appears at the bottom of the screen and disappears after 3 seconds, it can easily be missed. Reserve toast for errors not caused by merchants, like a connection issue. Always try to use a banner to inform merchants about persistent errors. Modal dialogs are a good way to ask merchants to confirm a destructive action, but not to tell them an error has occurred.\nModals block merchants until a decision is made, which is likely to make merchants feel pressured. Most errors don’t need to block access to the rest of the feature. Home notification errors are for high-priority tasks that merchants must complete immediately to continue using Shopify or prevent\na negative impact to their business, like losing money.\nOne exception is errors for features that don‘t have a dedicated details page. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A text field has formatting requirements. Use this pattern to enhancevalidation on form submission."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "It takesmore than a full secondto validate input and display a message. If there’s a lag before a validation message appears, merchants might shift their attention and miss the error.\nEither find a way to improve the validation speed, or rely on thevalidation after form submission.",
                        "The field is empty. Merchants might tab through a form before filling it out, and errors on empty fields can cause confusion and frustration."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Text field"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use two or three words to explain what’s wrong or what’s needed to fix the problem.",
                        "Avoid using the word \"invalid\" to define an error. When appropriate, use \"not valid\" instead.",
                        "Since the message is directly below the text field, the copy only needs to explain why the error happened. Optionally, the message can clarify what to do next or offer a one-click fix."
                    ]
                },
                {
                    "type": "p",
                    "text": "Usage Do an initial validation check as soon as merchants finish typing in the field. Merchants can be considered to be finished typing only when keyboard focus moves away from the field and there is at least one character in the field. This helps avoid marking the field as not valid before merchants are really done typing. If the validation check fails, show an error message below the field. Once a field has an error, complete validation checks after each keystroke. Remove the error message as soon as the input becomes valid so merchants can immediately tell they fixed the issue. If the validation process is less than a second but not instant, show a spinner on the field to indicate validation progress. Validate on submit is triggered when merchants press the form’s submit button. The submit button is often [Save], but can be another call to action. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Not all fields can be validated while merchants are typing. When a form is used for saving data, always validate on submit and validate text fields while typing. For example, if merchants never interact with a required text field, there’s no change to mark it as not valid until they press the submit button. The same applies to form controls other than text fields, such as radio buttons, and selects."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A form doesn’t have specific validation requirements, or the form doesn’t save data. For example, a search form that returns no results should display an empty state, rather than a validation error."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Banner"
                    ]
                },
                {
                    "type": "p",
                    "text": "And one or more of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "[Text field]",
                        "[Select]",
                        "[Choice list]",
                        "[Checkbox]",
                        "[Radio button]"
                    ]
                },
                {
                    "type": "p",
                    "text": "Banner heading"
                },
                {
                    "type": "list",
                    "items": [
                        "Use a colon to introduce the list.",
                        "Make the heading instructional. Don’t just call out that there are {x} number of errors."
                    ]
                },
                {
                    "type": "p",
                    "text": "Banner body text"
                },
                {
                    "type": "list",
                    "items": [
                        "Use thelist componentto itemize the errors",
                        "Start each list item with the label of the field that isn't valid, and describe the action needed to fix it"
                    ]
                },
                {
                    "type": "p",
                    "text": "Individual field error messages:"
                },
                {
                    "type": "list",
                    "items": [
                        "See content guidelines forvalidation while typing"
                    ]
                },
                {
                    "type": "p",
                    "text": "Rather than pointing out that there are {x} number of errors, be more descriptive. Explain that in order to save or continue, {x} number of fields need to be changed. For the bullet point instructions, see if you can word them to be more actionable, for example, “Add a discount code,“ instead of “Discount can’t be blank.“ Usage Always indicate submission progress. If the fields aren't valid, don’t clear or alter them on behalf of merchants during validation. If the form submission has a single error:"
                },
                {
                    "type": "list",
                    "items": [
                        "Move scroll position to the field that is not valid",
                        "Focus the field",
                        "Show an error message below the field"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the form submission has multiple errors:"
                },
                {
                    "type": "list",
                    "items": [
                        "Move scroll position to the top of the screen",
                        "Use a banner to display a summary of all the errors",
                        "Show an error message below each field that is not valid so merchants can scroll through and make corrections"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use:"
                },
                {
                    "type": "list",
                    "items": [
                        "To help merchants prevent potential mistakes",
                        "When form input is valid, but you want to warn merchants of a consequence they might not be expecting"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use:"
                },
                {
                    "type": "list",
                    "items": [
                        "For actual error states"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tip: Explore ways to prevent the warning message from showing at all. Look for opportunities to add help text or other contextual information to surface or highlight potential risks or consequences of taking, or not taking, the action."
                },
                {
                    "type": "list",
                    "items": [
                        "Bannerwithout title"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Since the warning message is in close context to the action that triggered the warning, it should be short",
                        "Explain the risks or consequences of an action that’s just been taken",
                        "These messages don’t have to start with actionable language, like, “Change currency.” Here are some optionsStart with the word “This” and explain the consequence, for example, “This will affect inventory prices”Start by noting the action, then explain the consequence, “Changing {x} will affect {y}”",
                        "Start with the word “This” and explain the consequence, for example, “This will affect inventory prices”",
                        "Start by noting the action, then explain the consequence, “Changing {x} will affect {y}”",
                        "If available, link to a resource where merchants can learn more"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to the entire screen",
                        "The error is far down the page and it’s critical that they see the message",
                        "A form was submitted with fields that are not valid",
                        "If the error was delayed, for example, an action was taken and the error doesn’t immediately appear in context"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "It’s possible to place the banner [in context] because the source of the error is in view and the event that triggered the action just happened"
                    ]
                },
                {
                    "type": "p",
                    "text": "For multiple error guidelines, seevalidate on submit Page-level banner errors should explain:"
                },
                {
                    "type": "list",
                    "items": [
                        "Where the error happened",
                        "What happened",
                        "Why it happened",
                        "What to do next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Unable to process payment for checkout with negative taxes."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Banner"
                    ]
                },
                {
                    "type": "p",
                    "text": "Headings should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Clearly state the problem",
                        "Not use punctuation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Body content should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Explain how to solve the problem.",
                        "Use actionable language like “do x.” Don‘t use permissive language, like “you can x.” Be concise: no longer than 2 sentences.",
                        "Use periods."
                    ]
                },
                {
                    "type": "p",
                    "text": "Calls to action should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Be action-led (verb+noun format)",
                        "Aim for a one-click fix. If the error can be fixed via a single button or menu, offer that action directly in the error message.",
                        "Open a dedicated error-correction view for more complex problems such as reviewing a risky order or editing an unverified customer address.",
                        "Provide a link to documentation for information that may be valuable but can’t fit in a brief error message."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Merchants are engaged in a task flow and you want to warn them about potential issues with the task at hand, or inform them something has gone wrong",
                        "Directing merchants to a page with multiple sections and you want to visibly call out the section with the error"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "An error applies to the entire screen.",
                        "The error is far down the page and it’s critical that merchants see the message.",
                        "If the error was delayed. For example, an action was taken and the error doesn’t immediately appear in context. In these cases, use thepage-level banner"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Banner"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Without title"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The more contextual the message, the less you need to say, so go straight to explaining what happened and how to fix",
                        "Keep to one sentence",
                        "Contextual banners don’t have titles",
                        "Try to add a next step, whether in a button or link",
                        "Use when there is more than one call to action"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Items in a list are in a noteworthy state that you want to make merchants aware of, like a status, or piece of information (like a high risk order) that’s directly relevant to the information it’s connected to"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example:"
                },
                {
                    "type": "list",
                    "items": [
                        "High risk order"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "The source of the problem is an entire card or page"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Exception list"
                    ]
                },
                {
                    "type": "p",
                    "text": "Variant"
                },
                {
                    "type": "list",
                    "items": [
                        "Status: critical or warning"
                    ]
                },
                {
                    "type": "p",
                    "text": "Content should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Highlight an exceptional state that encourages clicking on the list item",
                        "Pair content with a warning or error icon",
                        "Always lead with what went wrong",
                        "A description is required",
                        "A title is optional",
                        "Links are optional but not common because the list item is actionable",
                        "Be concise"
                    ]
                },
                {
                    "type": "p",
                    "text": "Home notifications are primarily used to prevent merchants from losing money or help them continue using Shopify if they don’t act on the error message instructions immediately. Use for:"
                },
                {
                    "type": "list",
                    "items": [
                        "High-priority tasks that must be completed immediately to continue using\nShopify or avoid losing money.",
                        "Important enough tasks that we wouldn’t want merchants to navigate to another place in Shopify to find it, or stumble upon while completing another task.",
                        "Errors for features that don’t have a dedicated details page. For example, before\nShopify Capital had a details page, related status messages were temporarily surfaced in Home."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tips or advice",
                        "Positive feedback",
                        "Confirmation messages",
                        "New feature announcements",
                        "Status messages, other than those for Shopify Capital",
                        "Messages that can be displayed in context",
                        "Error messages that should be displayed in context",
                        "Task-related errors like a problem with saving a page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Warning home notifications are pre-emptive. They let merchants know that their finances will be impacted if action isn’t taken in a couple days or more, or that an action can be taken to make money sooner."
                },
                {
                    "type": "list",
                    "items": [
                        "Financing request is pending",
                        "Warn about upcoming expiration",
                        "Pending status, like with Shopify Capital application status"
                    ]
                },
                {
                    "type": "p",
                    "text": "Critical home notifications inform merchants of issues that:"
                },
                {
                    "type": "list",
                    "items": [
                        "Currently impact their finances",
                        "Will have an impact on their finances if action isn’t taken immediately",
                        "Prevent the normal operation of their business or account"
                    ]
                },
                {
                    "type": "p",
                    "text": "Critical home notifications can be used for these message types:"
                },
                {
                    "type": "list",
                    "items": [
                        "Trial expired",
                        "Domain expired",
                        "Credit card expired",
                        "Account is suspended",
                        "Shopify Payment payouts on hold",
                        "Payment processing issues",
                        "Payment authorizations expiring that day"
                    ]
                },
                {
                    "type": "p",
                    "text": "Sometimes the admin can’t be displayed due to a network issue, browser limitation, connection problem, or server issue. 400 and 500 series errors fall in this category. In these cases, always explain what went wrong and provide merchants with a troubleshooting step, like refreshing the page. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "A page or the entire admin can’t be displayed"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "The error can be placed in context, close to the source of the problem"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use internal language in error messages and avoid using question formats."
                },
                {
                    "type": "list",
                    "items": [
                        "Empty state"
                    ]
                },
                {
                    "type": "p",
                    "text": "Headings should:"
                },
                {
                    "type": "list",
                    "items": [
                        "Heading should explain what went wrong",
                        "Body should help merchants troubleshoot the problem",
                        "Call to action should provide the most probable fix, like reloading the page, or going to the previous page or Shopify Home"
                    ]
                },
                {
                    "type": "p",
                    "text": "When a service issue occurs in Shopify or is caused by a third party, we don’t always have a solution to offer to merchants. In these cases, always explain what went wrong so they can attempt to troubleshoot. If available, provide them with a troubleshooting step, like refreshing the page or returning at a later time. Use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Merchants are being denied access to a page or the entire adminSee admin unavailable errors",
                        "A third party issue is causing a disruption to merchants’ workflows"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use when:"
                },
                {
                    "type": "list",
                    "items": [
                        "There’s literally any solution we can offer to merchants"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use the “Something went wrong. Please try again in a few minutes.” message when there’s any option to offer more context."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This error message is a last resort: \"Something went wrong. Please try again in\na few minutes.\""
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "An error occurred",
                        "1 error",
                        "Invalid"
                    ]
                },
                {
                    "type": "p",
                    "text": "These content guidelines are based on common copy mistakes. Avoid sounding overly apologetic, too technical, or hyperbolic. Keep Shopify out of the conversation unless Shopify was the cause of the error. Don’t downplay the error by telling merchants not to worry or by adding humor to a negative situation. Avoid the word “please” so it’s not overused throughout the admin. Don’t downplay serious problems."
                },
                {
                    "type": "list",
                    "items": [
                        "Some of today’s sales data isn’t updated yet. This will be fixed soon. Your data is safe, and your actual sales are not affected."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Today’s sales datamightnot be accurate, butplease don’t worry—it’s just temporary."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t use scary, technical words in error messages."
                },
                {
                    "type": "list",
                    "items": [
                        "Product weight can’t be negative. Change the product weight to be 0 or higher and try again."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "ErrorLine items gramsmust be greater than or equal to 0."
                    ]
                },
                {
                    "type": "p",
                    "text": "Error messages are not the place for hyperbole or injecting personality."
                },
                {
                    "type": "list",
                    "items": [
                        "High risk of fraud detected"
                    ]
                },
                {
                    "type": "p",
                    "text": "Before fulfilling this order or capturing payment, review the Risk Analysis and determine if this order is fraudulent."
                },
                {
                    "type": "list",
                    "items": [
                        "Uh oh! High risk of fraud detected"
                    ]
                },
                {
                    "type": "p",
                    "text": "Looks like there’s a high fraud risk with this order. Better review the Risk\nAnalysis to make sure the order is safe! Don’t use internal Shopify terms. Only include the information merchants need."
                },
                {
                    "type": "list",
                    "items": [
                        "There’s a problem loading this page"
                    ]
                },
                {
                    "type": "p",
                    "text": "There’s a technical problem with Shopify that has prevented this page from loading. Try reloading this page or going to another page in Shopify. If that doesn’t work, visit our status page for updates and try again later."
                },
                {
                    "type": "list",
                    "items": [
                        "There’s a technical problem with Shopify that has prevented this page from loading.Our operation engineers are aware of this problem and are working hard to get it solved."
                    ]
                },
                {
                    "type": "p",
                    "text": "Keep Shopify out of the conversation. Focus on the information merchants need to complete their task efficiently."
                },
                {
                    "type": "list",
                    "items": [
                        "Before you can view earnings from your store, you need to complete your account setup. [Complete account setup]"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Beforewecan provide you with earnings from your store,weneed some additional information. [Complete account setup]"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/new-features",
            "title": "New features — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Discuss on GitHub As the Shopify admin UI continues to evolve, it's natural for teams to want to draw attention to new features and improvements. However, we strongly advise against using \"new\" badges or blue pips to highlight these additions within individual sections like Products, Orders, and Customers. Features should have all 3 of the following characteristics before highlighting them to merchants with a New Badge or PIP:"
                },
                {
                    "type": "list",
                    "items": [
                        "Shopify wants to drive adoption of this feature because it has high business value",
                        "It’s creating new and outsized value for merchants (not just an improved way of doing something they are already doing)",
                        "It’s worth distracting merchants from their current workflow to inform them about a whole new part of Shopify"
                    ]
                },
                {
                    "type": "p",
                    "text": "Things that generally meet this criteria are large and impactful. Examples could be entire new pages in settings or the introduction of an entirely new technology or capability. Different teams might use different methods to highlight features, leading to an inconsistent experience for merchants. Over time, the admin UI may become cluttered with numerous badges and pips, making it difficult for merchants to focus on their primary tasks."
                },
                {
                    "type": "list",
                    "items": [
                        "Use theinformational badge variantto achieve the correct styling and color",
                        "The badge should be right aligned or placed to the right of text",
                        "Thepage componentin Polaris already places badges to the right of headings, so following this logic brings consistency to the admin."
                    ]
                },
                {
                    "type": "p",
                    "text": "A pip can be used to highlight a status or new element in a list. For example, it could be placed next to a new notification in a list of notifications. It should not be used for representing new features. They should have a short lifespan. The badge should disappear:"
                },
                {
                    "type": "list",
                    "items": [
                        "When the user has clicked on the interactive element it’s attached to, or",
                        "5 days after they first saw it, or",
                        "after 3 sessions, such as landing on a page 3 times"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/resource-details-layout",
            "title": "Resource details layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Discuss on GitHub"
                },
                {
                    "type": "list",
                    "items": [
                        "The page header provides easy access to actions and navigation. It spans the full width of the page to show merchants that these actions represent the page as a whole.",
                        "The main content is split in two columns, primary content to the left and secondary content to the right. The primary content occupies two thirds of the page to give more space to what’s most important most of the time.",
                        "Content is placed in cards, and similar content is grouped in the same card. This helps merchant find and focus on specific subtasks."
                    ]
                },
                {
                    "type": "p",
                    "text": "This pattern uses theCard,BlockStack,InlineGridandPagecomponents."
                },
                {
                    "type": "code",
                    "code": "// This example is for guidance purposes. Copying it will come with caveats.functionResourceDetailsLayout(){constSkeletonLabel=(props)=>{return(<Boxbackground=\"bg-fill-tertiary\"minHeight=\"1rem\"maxWidth=\"5rem\"borderRadius=\"base\"{...props}/>);};return(<PagebackAction={{content:\"Products\",url:\"/products\"}}title=\"Product\"secondaryActions={[{content:\"Duplicate\",icon:DuplicateIcon,accessibilityLabel:\"Secondary action label\",onAction:()=>alert(\"Duplicate action\"),},{content:\"Archive\",icon:ArchiveIcon,accessibilityLabel:\"Secondary action label\",onAction:()=>alert(\"Archive action\"),},{content:\"Delete\",icon:DeleteIcon,destructive:true,accessibilityLabel:\"Secondary action label\",onAction:()=>alert(\"Delete action\"),},]}pagination={{hasPrevious:true,hasNext:true,}}><InlineGridcolumns={{xs:1,md:\"2fr 1fr\"}}gap=\"400\"><BlockStackgap=\"400\"><CardroundedAbove=\"sm\"><BlockStackgap=\"400\"><SkeletonLabel/><Boxborder=\"divider\"borderRadius=\"base\"minHeight=\"2rem\"/><SkeletonLabelmaxWidth=\"8rem\"/><Boxborder=\"divider\"borderRadius=\"base\"minHeight=\"20rem\"/></BlockStack></Card><CardroundedAbove=\"sm\"><BlockStackgap=\"400\"><SkeletonDisplayTextsize=\"small\"/><InlineGridcolumns={{xs:1,md:2}}><Boxborder=\"divider\"borderRadius=\"base\"minHeight=\"10rem\"/><Boxborder=\"divider\"borderRadius=\"base\"minHeight=\"10rem\"/></InlineGrid></BlockStack></Card></BlockStack><BlockStackgap={{xs:\"400\",md:\"200\"}}><CardroundedAbove=\"sm\"><BlockStackgap=\"400\"><SkeletonDisplayTextsize=\"small\"/><Boxborder=\"divider\"borderRadius=\"base\"minHeight=\"2rem\"/><Box><BleedmarginInline={{xs:400,sm:500}}><Divider/></Bleed></Box><SkeletonLabel/><Divider/><SkeletonBodyText/></BlockStack></Card><CardroundedAbove=\"sm\"><BlockStackgap=\"400\"><SkeletonLabel/><Boxborder=\"divider\"borderRadius=\"base\"minHeight=\"2rem\"/><SkeletonLabelmaxWidth=\"4rem\"/><Boxborder=\"divider\"borderRadius=\"base\"minHeight=\"2rem\"/><SkeletonLabel/><SkeletonBodyText/></BlockStack></Card></BlockStack></InlineGrid></Page>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Always use the default width. Full width tends to waste space and make the page harder to parse.",
                        "Group similar content in the same card.",
                        "Put information that defines the resource object in the primary column.",
                        "Put supporting information such as status, metadata, and summaries in the secondary column.",
                        "Arrange content in order of importance.",
                        "Place unique page actions at the top of the actions list and typical object actions at the bottom."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "TheResource index layoutpattern is a complement to the resource detail layout pattern.",
                        "Learn about the meaning of “resources” on theResource listcomponent page",
                        "Learn more aboutLayoutin the app design guidelines."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/resource-index-layout",
            "title": "Resource index layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Discuss on GitHub"
                },
                {
                    "type": "list",
                    "items": [
                        "The resource index layout is based on a single column to create a clear top-to-bottom hierarchy of tasks and to provide horizontal space for resource data.",
                        "At the top of the page, merchants find the page title and actions that affect the index as a whole.",
                        "At the top of the index, merchants can use filters, sorting, and multi-select actions that affect the list below.",
                        "In the main body of the index, merchants find the individual resource objects that they want to view or manage."
                    ]
                },
                {
                    "type": "p",
                    "text": "This pattern uses theCard,Badge,ChoiceList,IndexFilter,IndexTableandPagecomponents."
                },
                {
                    "type": "code",
                    "code": "// This example is for guidance purposes. Copying it will come with caveats.functionIndexFiltersDefault(){functiondisambiguateLabel(key,value){switch(key){case\"type\":returnvalue.map((val)=>`type:${val}`).join(\", \");case\"tone\":returnvalue.map((val)=>`tone:${val}`).join(\", \");default:returnvalue;}}functionisEmpty(value){if(Array.isArray(value)){returnvalue.length===0;}else{returnvalue===\"\"||value==null;}}constsleep=(ms)=>newPromise((resolve)=>setTimeout(resolve,ms));const[itemStrings,setItemStrings]=useState([\"All\",\"Active\",\"Draft\",\"Archived\",]);constdeleteView=(index)=>{constnewItemStrings=[...itemStrings];newItemStrings.splice(index,1);setItemStrings(newItemStrings);setSelected(0);};constduplicateView=async(name)=>{setItemStrings([...itemStrings,name]);setSelected(itemStrings.length);awaitsleep(1);returntrue;};consttabs=itemStrings.map((item,index)=>({content:item,index,onAction:()=>{},id:`${item}-${index}`,isLocked:index===0,actions:index===0?[]:[{type:\"rename\",onAction:()=>{},onPrimaryAction:async(value)=>{constnewItemsStrings=tabs.map((item,idx)=>{if(idx===index){returnvalue;}returnitem.content;});awaitsleep(1);setItemStrings(newItemsStrings);returntrue;},},{type:\"duplicate\",onPrimaryAction:async(name)=>{awaitsleep(1);duplicateView(name);returntrue;},},{type:\"edit\",},{type:\"delete\",onPrimaryAction:async()=>{awaitsleep(1);deleteView(index);returntrue;},},],}));const[selected,setSelected]=useState(0);constonCreateNewView=async(value)=>{awaitsleep(500);setItemStrings([...itemStrings,value]);setSelected(itemStrings.length);returntrue;};constsortOptions=[{label:\"Product\",value:\"product asc\",directionLabel:\"Ascending\"},{label:\"Product\",value:\"product desc\",directionLabel:\"Descending\"},{label:\"Status\",value:\"tone asc\",directionLabel:\"A-Z\"},{label:\"Status\",value:\"tone desc\",directionLabel:\"Z-A\"},{label:\"Type\",value:\"type asc\",directionLabel:\"A-Z\"},{label:\"Type\",value:\"type desc\",directionLabel:\"Z-A\"},{label:\"Vendor\",value:\"vendor asc\",directionLabel:\"Ascending\"},{label:\"Vendor\",value:\"vendor desc\",directionLabel:\"Descending\"},];const[sortSelected,setSortSelected]=useState([\"product asc\"]);const{mode,setMode}=useSetIndexFiltersMode();constonHandleCancel=()=>{};constonHandleSave=async()=>{awaitsleep(1);returntrue;};constprimaryAction=selected===0?{type:\"save-as\",onAction:onCreateNewView,disabled:false,loading:false,}:{type:\"save\",onAction:onHandleSave,disabled:false,loading:false,};const[tone,setStatus]=useState(undefined);const[type,setType]=useState(undefined);const[queryValue,setQueryValue]=useState(\"\");consthandleStatusChange=useCallback((value)=>setStatus(value),[]);consthandleTypeChange=useCallback((value)=>setType(value),[]);consthandleFiltersQueryChange=useCallback((value)=>setQueryValue(value),[]);consthandleStatusRemove=useCallback(()=>setStatus(undefined),[]);consthandleTypeRemove=useCallback(()=>setType(undefined),[]);consthandleQueryValueRemove=useCallback(()=>setQueryValue(\"\"),[]);consthandleFiltersClearAll=useCallback(()=>{handleStatusRemove();handleTypeRemove();handleQueryValueRemove();},[handleStatusRemove,handleQueryValueRemove,handleTypeRemove]);constfilters=[{key:\"tone\",label:\"Status\",filter:(<ChoiceListtitle=\"tone\"titleHiddenchoices={[{label:\"Active\",value:\"active\"},{label:\"Draft\",value:\"draft\"},{label:\"Archived\",value:\"archived\"},]}selected={tone||[]}onChange={handleStatusChange}allowMultiple/>),shortcut:true,},{key:\"type\",label:\"Type\",filter:(<ChoiceListtitle=\"Type\"titleHiddenchoices={[{label:\"Brew Gear\",value:\"brew-gear\"},{label:\"Brew Merch\",value:\"brew-merch\"},]}selected={type||[]}onChange={handleTypeChange}allowMultiple/>),shortcut:true,},];constappliedFilters=[];if(tone&&!isEmpty(tone)){constkey=\"tone\";appliedFilters.push({key,label:disambiguateLabel(key,tone),onRemove:handleStatusRemove,});}if(type&&!isEmpty(type)){constkey=\"type\";appliedFilters.push({key,label:disambiguateLabel(key,type),onRemove:handleTypeRemove,});}constproducts=[{id:\"1020\",price:\"$200\",product:\"1ZPRESSO | J-MAX Manual Coffee Grinder\",tone:<Badgetone=\"success\">Active</Badge>,inventory:\"20 in stock\",type:\"Brew Gear\",vendor:\"Espresso Shot Coffee\",},{id:\"1018\",price:\"$200\",product:\"Acaia Pearl Set\",tone:<Badgetone=\"success\">Active</Badge>,inventory:\"2 in stock for 50 variants\",type:\"Brew Gear\",vendor:\"Espresso Shot Coffee\",},{id:\"1016\",price:\"$200\",product:\"AeroPress Go Brewer\",tone:<Badgetone=\"info\">Draft</Badge>,inventory:\"3 in stock for 50 variants\",type:\"Brew Gear\",vendor:\"Espresso Shot Coffee\",},{id:\"1015\",price:\"$200\",product:\"Canadiano Brewer\",tone:<Badgetone=\"success\">Active</Badge>,inventory:\"890 in stock for 50 variants\",type:\"Brew Merch\",vendor:\"Espresso Shot Coffee\",},{id:\"1014\",price:\"200\",product:\"Canadiano Brewer White Ash\",tone:<Badgetone=\"success\">Active</Badge>,inventory:\"890 in stock for 50 variants\",type:\"Brew Gear\",vendor:\"Espresso Shot Coffee\",},];constresourceName={singular:\"product\",plural:\"products\",};const{selectedResources,allResourcesSelected,handleSelectionChange}=useIndexResourceState(products);constrowMarkup=products.map(({id,thumbnail,product,price,tone,inventory,type,vendor},index)=>(<IndexTable.Rowid={id}key={id}selected={selectedResources.includes(id)}position={index}><IndexTable.Cell><imgsrc={\"https://picsum.photos/50?random=\"+String(index)}alt={\"product thumbnail\"+product}/></IndexTable.Cell><IndexTable.Cell>{product}</IndexTable.Cell><IndexTable.Cell>{price}</IndexTable.Cell><IndexTable.Cell>{tone}</IndexTable.Cell><IndexTable.Cell>{inventory}</IndexTable.Cell><IndexTable.Cell>{type}</IndexTable.Cell><IndexTable.Cell>{vendor}</IndexTable.Cell></IndexTable.Row>));return(<Pagetitle={\"Products\"}primaryAction={{content:\"Add product\"}}secondaryActions={[{content:\"Export\",accessibilityLabel:\"Export product list\",onAction:()=>alert(\"Export action\"),},{content:\"Import\",accessibilityLabel:\"Import product list\",onAction:()=>alert(\"Import action\"),},]}><Cardpadding=\"0\"><IndexFilterssortOptions={sortOptions}sortSelected={sortSelected}queryValue={queryValue}queryPlaceholder=\"Searching in all\"onQueryChange={handleFiltersQueryChange}onQueryClear={()=>{}}onSort={setSortSelected}primaryAction={primaryAction}cancelAction={{onAction:onHandleCancel,disabled:false,loading:false,}}tabs={tabs}selected={selected}onSelect={setSelected}canCreateNewViewonCreateNewView={onCreateNewView}filters={filters}appliedFilters={appliedFilters}onClearAll={handleFiltersClearAll}mode={mode}setMode={setMode}/><IndexTableresourceName={resourceName}itemCount={products.length}selectedItemsCount={allResourcesSelected?\"All\":selectedResources.length}onSelectionChange={handleSelectionChange}sortable={[false,true,true,true,true,true,true]}headings={[{title:\"\"},{title:\"Product\"},{title:\"Price\",alignment:\"end\"},{title:\"Status\"},{title:\"Inventory\"},{title:\"Type\"},{title:\"Vendor\"},]}>{rowMarkup}</IndexTable></Card></Page>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Use the resource type as page title.",
                        "Always use the primary action in the top right corner for resource creation. Remove the button if there is no such functionality.",
                        "Set the page width to normal if the index doesn’t need full width."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "TheResource detail layoutpattern is a complement to the resource index layout pattern.",
                        "Use theEmpty state componentwhen the resource index is empty.",
                        "Learn about the meaning of “resources” on theResource listcomponent page",
                        "Learn more aboutLayoutin the app design guidelines."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/patterns/text-fields",
            "title": "Text fields — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Text fields can be grouped in a form or placed individually in the UI. Placeholder text should generally be avoided in text fields. Help text can be used below the text input area to guide the user on acceptable inputs. Field labels act as a title for the text field. Labels should typically be short and in noun form. For example, “Name”. Edge case: When a text field isn’t part of a form and is placed individually on a page (like a comment field), then you can write the field label as a call to action. For example, “Leave a comment”. This is because there’s no surrounding context and using “Comment” alone could be confusing. In general, avoid using placeholder text in text fields. It can pose a range of accessibility problems, like:"
                },
                {
                    "type": "list",
                    "items": [
                        "Low color contrast, making the text hard to read",
                        "Inconsistent behavior between browsers and screen readers",
                        "Text disappearing when the user starts typing, which can be confusing to people with cognitive impairments",
                        "Limited space available for additional context, due to field size"
                    ]
                },
                {
                    "type": "p",
                    "text": "Exception: Read the guidelines onsearch fields. Help text provides extra guidance or instructions to people filling out a form field. It can also be used to clarify how the information will be used. Use help text:"
                },
                {
                    "type": "list",
                    "items": [
                        "when the text field label doesn’t clearly explain the purpose of the text input",
                        "to provide guidance or instructions on the type of information needed",
                        "to show examples of the required format for modeled text inputs"
                    ]
                },
                {
                    "type": "p",
                    "text": "Best practices:"
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid repeating the field label. If the field label provides sufficient context for completing the action, then you likely don’t need to add help text.",
                        "If there’s not enough room to include both instructions and an example, then only include the example."
                    ]
                },
                {
                    "type": "p",
                    "text": "There are three types of text inputs: These are fields that require a specific format to be valid. They’re often used for tags, dates, and some tracking numbers. Modeled text is highly structured, so providing examples is useful.Read more These are fields that accept short strings of text. They’re often used for SKUs, barcodes, and titles. Only provide example text if you know how the text should be structured, such as a tracking number or discount code.Read more These are fields that are rendered as multiline textarea elements, as well as text input elements that accept long strings of text. They’re often used for product descriptions, order comments, and customer notes. Users can write whatever they want, so providing example text is less useful.Read more Modeled text inputs are text field inputs that require text to be formatted in a specific way. For instance, tags need to be separated by commas, and dates need to be typed in YYYY-MM-DD format. Because modeled text inputs require a particular structure, always include examples that demonstrate how the user should enter the information."
                },
                {
                    "type": "list",
                    "items": [
                        "Use help text to include an instructional call to action and an example that shows the required text format",
                        "If there’s not enough room to include both an instructional call to action and an example, then include only the example",
                        "Use the word “Example” followed by a colon to introduce the example (instead of e.g.)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Free text inputs accept a single string of text, without any particular structure. Use the field label to clearly indicate what should go in the text field. Don’t provide an example for free text inputs. The text doesn’t follow a specific format, and we shouldn’t assume what belongs in the field. If more context is needed, use help text. If a text field label has a call to action, there's no need to repeat it in the help text. Instead, add a sentence that provides extra context. For example, when a free text input is located independent of a form and has no surrounding context, you can make the field label a call to action. If the text field label isn’t clear about where the user can find the information, use help text to guide them. Don’t use placeholder text for free input titles, names, and descriptions; use help text instead. Don’t use placeholder text for codes or tracking numbers; use help text instead. If the code follows a standardized format, include an example, using the same format as help text for modeled content. If not, omit the example since the field’s contents can vary. Choose clear names for the field label, and don’t repeat it in the help text if possible. Instead, offer context that will help the user understand and complete the task quickly. Multiline fields let merchants type long blocks of text. There are a few different versions:"
                },
                {
                    "type": "list",
                    "items": [
                        "Plain textarea elements with no formatting options",
                        "Formatted textarea elements with what-you-see-is-what-you-get (WYSIWYG) menus",
                        "Plain text input elements that accept long strings of text",
                        "Plain text input elements that accept long strings of text and expand as the user types"
                    ]
                },
                {
                    "type": "p",
                    "text": "Multiline inputs hold things like product and collection descriptions, notes about an order that only store staff can access, notes that the customer can access, and anything else the merchant wants to type into them. We usually don’t know what will go in multiline fields, so providing example text isn’t helpful. Instead, include help text that explains how the text will be used and who can view it. Don’t use placeholder text for comments and notes; use help text instead. Comments and notes help merchants keep track of unstructured information they may need about an order or a buyer. Some comments and notes are not visible to customers, but some are. In the help text, describe clearly who will be able to view the note. For standard text fields, avoid placeholder text. However, regular or floating placeholder text can be used for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Search fields",
                        "Filter fields",
                        "Email entry fields"
                    ]
                },
                {
                    "type": "p",
                    "text": "Placeholder text is a common, recognizable pattern for these field types. Moving the placeholder text outside of the text field box may seem out of place and negatively impact the visual design of some marketing pages. To make search, filter, and email entry fields more accessible, always move the placeholder text above the cursor while the field is in focus. This lets the user read the placeholder text as soon as they select the field. There are some cases where help text clutters a page. For example, the minimalist design of pages like the admin login page would be significantly changed by adding another line of text. As with standard placeholder text, the placeholder should float above the text entry once the field has been selected. It’s not easy for everyone to read the small print of the floating text, so use this method sparingly."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tokens",
            "title": "Color — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/border",
            "title": "Border — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/breakpoints",
            "title": "Breakpoints — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Usage in Media Queries A transform takes the above values and generates Sass variables (which can be\nused in media conditions) for each breakpoint in `up`, `down`, and `only` directions.\nWhile we currently support `down` media conditions, we encourage developers to\nadopt a mobile first strategy and use `up` wherever possible. Example of generated output for `breakpoints-md`:"
                },
                {
                    "type": "code",
                    "code": "@media#{$p-breakpoints-md-up}{/*...*/}@media#{$p-breakpoints-md-down}{/*...*/}@media#{$p-breakpoints-md-only}{/*...*/}"
                },
                {
                    "type": "p",
                    "text": "To use these Sass variables you will need to import the `media-queries.scss`\nfile from `@shopify/polaris-tokens` in your project:"
                },
                {
                    "type": "code",
                    "code": "@import'path/to/node_modules/@shopify/polaris-tokens/dist/scss/media-queries';"
                },
                {
                    "type": "p",
                    "text": "A collection of all Sass variables for applying responsive styles at a given breakpoint alias."
                },
                {
                    "type": "code",
                    "code": "$p-breakpoints-xs-up:(min-width:0em);$p-breakpoints-xs-down:(max-width:-0.0025em);$p-breakpoints-xs-only:(min-width:0em)and(max-width:30.6225em);$p-breakpoints-sm-up:(min-width:30.625em);$p-breakpoints-sm-down:(max-width:30.6225em);$p-breakpoints-sm-only:(min-width:30.625em)and(max-width:47.9975em);$p-breakpoints-md-up:(min-width:48em);$p-breakpoints-md-down:(max-width:47.9975em);$p-breakpoints-md-only:(min-width:48em)and(max-width:64.9975em);$p-breakpoints-lg-up:(min-width:65em);$p-breakpoints-lg-down:(max-width:64.9975em);$p-breakpoints-lg-only:(min-width:65em)and(max-width:89.9975em);$p-breakpoints-xl-up:(min-width:90em);$p-breakpoints-xl-down:(max-width:89.9975em);$p-breakpoints-xl-only:(min-width:90em);"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tokens/color",
            "title": "Color — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/colors",
            "title": "Color — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/font",
            "title": "Font — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/height",
            "title": "Height — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/motion",
            "title": "Motion — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/shadow",
            "title": "Shadow — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/space",
            "title": "Space — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/text",
            "title": "Text — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/width",
            "title": "Width — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tokens/z-index",
            "title": "Z-Index — Shopify Polaris",
            "content": []
        },
        {
            "url": "https://polaris.shopify.com/tools",
            "title": "Tools — Shopify Polaris",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Polaris for VS CodeOfficial VS Code extension for building with the Shopify Polaris design system.",
                        "Polaris MigratorCodemod transformations to help upgrade your Polaris codebase.",
                        "Stylelint PolarisA configuration of Stylelint rules that promote adoption of the Polaris design system in consuming apps.",
                        "SandboxAlphaEffortless prototyping with Polaris components."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/polaris-for-vscode",
            "title": "Polaris for VS Code — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Get code autocomplete suggestions for thePolaris Design Tokens"
                },
                {
                    "type": "list",
                    "items": [
                        "🗄️ Automatically works for CSS and Sass files",
                        "🔍 Preview design token values in autocomplete description",
                        "🎨 Color previews for allcolortokens",
                        "🥇 Relevant code completions based on the current line of code"
                    ]
                },
                {
                    "type": "p",
                    "text": "Install thePolaris for VS Code extension. Once enabled, the extension will automatically run in any CSS and Sass files. To trigger the token autocomplete feature:"
                },
                {
                    "type": "list",
                    "items": [
                        "Open a CSS or Sass file from your project",
                        "Start typing the CSS property you want to set, for example:color:",
                        "Type the extension trigger characters:--. This will bring up the relevant autocomplete tokens associated with the CSS property typed."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/polaris-migrator",
            "title": "Polaris Migrator — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator <migration> <path>"
                },
                {
                    "type": "list",
                    "items": [
                        "migration- name of migration, see available migrations on the docs site below.",
                        "path- files or directory to perform migration",
                        "--dryDo a dry-run, no code will be edited",
                        "--printPrints the changed output for comparison"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you are upgrading Polaris from v13 to v14 please follow ourmigration guide. Replace deprecated font CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-font-size: var(--p-font-size-750);+font-size: var(--p-font-size-600);"
                },
                {
                    "type": "code",
                    "code": "-letter-spacing: var(--p-font-letter-spacing-denser);+letter-spacing: var(--p-font-letter-spacing-dense);"
                },
                {
                    "type": "code",
                    "code": "-line-height: var(--p-font-line-height-1000);+line-height: var(--p-font-line-height-800);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v14-styles-replace-custom-property-font <path>"
                },
                {
                    "type": "p",
                    "text": "There are no migrations for@shopify/polaris-react@13.0.0. For a full list of changes, seethe v13.0.0 changelog. Replace legacy icon names and map removed icons to new names."
                },
                {
                    "type": "code",
                    "code": "-<Icon source={AbandonedCartMajor} />-<Icon source={AbandonedCartMinor} />-<Icon source={AbandonedCartFilledMajor} />-<Icon source={AbandonedCartFilledMinor} />-<Icon source={AccessibilityMajor} />-<Icon source={AccessibilityMinor} />-<Icon source={ActivitiesMajor} />-<Icon source={ActivitiesMinor} />+<Icon source={CartAbandonedIcon} />+<Icon source={CartAbandonedIcon} />+<Icon source={CartAbandonedFilledIcon} />+<Icon source={CartAbandonedFilledIcon} />+<Icon source={EyeCheckMarkIcon} />+<Icon source={EyeCheckMarkIcon} />+<Icon source={SportsIcon} />+<Icon source={SportsIcon} />"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator icons-v8-update-names <path>"
                },
                {
                    "type": "p",
                    "text": "If you are upgrading Polaris from v11 to v12 please follow ourmigration guide. Replace deprecatedAvatarcomponentsizeprop values with corresponding replacement values."
                },
                {
                    "type": "code",
                    "code": "-<Avatar size=\"extraSmall\" />-<Avatar size=\"small\" />-<Avatar size=\"medium\" />-<Avatar size=\"large\" />-<Avatar size=\"xl-experimental\" />-<Avatar size=\"2xl-experimental\" />+<Avatar size=\"xs\" />+<Avatar size=\"sm\" />+<Avatar size=\"md\" />+<Avatar size=\"lg\" />+<Avatar size=\"xl\" />+<Avatar size=\"xl\" />"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-react-avatar-component <path>"
                },
                {
                    "type": "p",
                    "text": "ConsolidateButtonboolean props tovariantandtone. TheButtoncomponent has been updated to replace deprecatedconnectedDisclosure,outline,destructive,primary,primarySuccess,plain, andmonochromeprops with a newvariantprop that supports multiple variation options."
                },
                {
                    "type": "code",
                    "code": "-<Button plain />+<Button variant=\"plain\" />-<Button primary />+<Button variant=\"primary\" />-<Button primary plain />+<Button variant=\"tertiary\" />-<Button monochrome plain />+<Button variant=\"monochromePlain\" />-<Button destructive />+<Button variant=\"primary\" tone=\"critical\" />-<Button primarySuccess />+<Button variant=\"primary\" tone=\"success\" />-<Button destructive plain />+<Button variant=\"plain\" tone=\"critical\" />-<Button destructive />+<Button variant=\"primary\" tone=\"critical\" />-<Button primarySuccess />+<Button variant=\"primary\" tone=\"success\" />-<Button destructive outline />+<Button tone=\"critical\" />-<Button destructive plain />+<Button variant=\"plain\" tone=\"critical\" />-<Button monochrome />+<Button />-<Button outline />+<Button />"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-react-update-button-component <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated border CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-border-radius: var(--p-border-radius-1);+border-radius: var(--p-border-radius-100);"
                },
                {
                    "type": "code",
                    "code": "-border-width: var(--p-border-width-1);+border-width: var(--p-border-width-025);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-border <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated color CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-color: var(--p-color-bg);+color: var(--p-color-bg-surface);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-color <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated font CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-font-size: var(--p-font-size-75);+font-size: var(--p-font-size-300);"
                },
                {
                    "type": "code",
                    "code": "-line-height: var(--p-font-line-height-1);+line-height: var(--p-font-line-height-400);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-font <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated shadow CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-box-shadow: var(--p-shadow-xs);+box-shadow: var(--p-shadow-100);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-shadow <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated space CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-padding: var(--p-space-1);+padding: var(--p-space-100);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-space <path>"
                },
                {
                    "type": "p",
                    "text": "Replace legacy Page componentbreadcrumbsprops with the newbackActionprop which accepts aLinkActionobject."
                },
                {
                    "type": "code",
                    "code": "-<Page breadcrumbs={[{url: '/testing', content: 'Home'}]}>+<Page backAction={{url: '/testing', content: 'Home'}}>"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v11-react-update-page-breadcrumbs <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated border CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-border-radius: var(--p-border-radius-base);+border-radius: var(--p-border-radius-1);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v11-styles-replace-custom-property-border <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated color CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-color: var(--p-text);;+color: var(--p-color-text);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v11-styles-replace-custom-property-color <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated depth CSS custom properties with corresponding replacement static values."
                },
                {
                    "type": "code",
                    "code": "-box-shadow: var(--p-shadow-transparent);+box-shadow: 0 0 0 0 transparent;"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v11-styles-replace-custom-property-depth <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated legacy CSS custom properties with corresponding replacement values (either a different Polaris custom property or a static value)."
                },
                {
                    "type": "code",
                    "code": "-z-index: var(--p-override-loading-z-index);+z-index: var(--p-z-index-6);-width: var(--p-choice-size);+width: 20px;"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v11-styles-replace-custom-property-legacy <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated motion CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-transition-timing-function: var(--p-linear);+transition-timing-function: var(--p-motion-linear);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v11-styles-replace-custom-property-motion <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated z-index CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-z-index: var(--p-z-1);+z-index: var(--p-z-index-1);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v11-styles-replace-custom-property-zindex <path>"
                },
                {
                    "type": "p",
                    "text": "Replace legacy text componentsDisplayText,Heading,Subheading,Caption,TextStyle, andVisuallyHiddenwith the new singleTextcomponent."
                },
                {
                    "type": "code",
                    "code": "-<DisplayText size=\"medium\">Display text</DisplayText>-<Heading>Heading</Heading>+<Text variant=\"headingXl\" as=\"p\">Display text</Text>+<Text variant=\"headingMd\" as=\"h2\">Heading</Text>"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v10-react-replace-text-components <path>"
                },
                {
                    "type": "p",
                    "text": "For projects that use the@userule, all Sass related migrations (ex:replace-sass-spacing) accept anamespaceflag to target a specific<namespace>.<variable|function|mixin>."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-<scss-migration> <path> --namespace=\"legacy-polaris-v8\""
                },
                {
                    "type": "p",
                    "text": "Replace legacy static breakpoint mixins with the new Polarismedia query variables."
                },
                {
                    "type": "code",
                    "code": "-@include page-content-when-layout-not-stacked {}+@media #{$p-breakpoints-md-up} {}"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-breakpoints <path>"
                },
                {
                    "type": "p",
                    "text": "Replace usage of the legacy SCSSborder()function inborderdeclarations with corresponding Polarisshapetoken."
                },
                {
                    "type": "code",
                    "code": "-border: border();+border: var(--p-border-base);-border: border(divider);+border: var(--p-border-divider);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-border <path>"
                },
                {
                    "type": "p",
                    "text": "Replace usage of the legacy SCSSborder-radius()) function inborder-radiusdeclarations with corresponding Polarisshapetokens."
                },
                {
                    "type": "code",
                    "code": "-border-radius: border-radius();+border-radius: var(--p-border-radius-1);-border-radius: border-radius(large);+border-radius: var(--p-border-radius-large);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-border-radius <path>"
                },
                {
                    "type": "p",
                    "text": "Replace usage of the legacy SCSSborder-width()) function inborderandborder-widthdeclarations with corresponding Polarisshapetokens."
                },
                {
                    "type": "code",
                    "code": "-border-width: border-width();+border-width: var(--p-border-width-1);-border-width: border-width(thick);+border-width: var(--p-border-width-2);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-border-width <path>"
                },
                {
                    "type": "p",
                    "text": "Replace the legacy SCSScolor()function with the supported CSS custom property token equivalent (ex:var(--p-surface)). This will only replace a limited subset of mapped values. See thecolor-maps.tsfor a full list of color mappings based on the CSS property."
                },
                {
                    "type": "code",
                    "code": "-color: color('ink');-background: color('white');+color: var(--p-text);+background: var(--p-surface);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-color <path>"
                },
                {
                    "type": "p",
                    "text": "Replace the legacy SCSSduration()function with the corresponding Polarismotiontoken."
                },
                {
                    "type": "code",
                    "code": "-transition-duration: legacy-polaris-v8.duration('slow');+transition-duration: var(--p-duration-300);-transition: opacity legacy-polaris-v8.duration('slow') linear;+transition: opacity var(--p-duration-300) linear;"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-duration <path>"
                },
                {
                    "type": "p",
                    "text": "Replace the legacy SCSSeasing()function with the corresponding Polarismotiontoken."
                },
                {
                    "type": "code",
                    "code": "-transition-timing-function: legacy-polaris-v8.easing('in');+transition-timing-function: var(--p-ease-in);-transition: opacity 300ms legacy-polaris-v8.easing('in');+transition: opacity 300ms var(--p-ease-in);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-easing <path>"
                },
                {
                    "type": "p",
                    "text": "Replace legacy SCSSfont-family()function with the corresponding Polarisfonttoken."
                },
                {
                    "type": "code",
                    "code": "-font-family: font-family(monospace);+font-family: var(--p-font-family-mono);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-font-family <path>"
                },
                {
                    "type": "p",
                    "text": "Replace legacy SCSSfont-size()function with the corresponding Polarisfonttoken."
                },
                {
                    "type": "code",
                    "code": "-font-size: font-size(input, base);+font-size: var(--p-font-size-200);;"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-font-size <path>"
                },
                {
                    "type": "p",
                    "text": "Replace legacy SCSSline-height()function with the corresponding Polarisfonttoken."
                },
                {
                    "type": "code",
                    "code": "-line-height: line-height(caption, base);+font-family: var(--p-font-line-height-2);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-line-height <path>"
                },
                {
                    "type": "p",
                    "text": "Replace the legacy SCSSspacing()function with the supported CSS custom property token equivalent (ex:var(--p-space-4))."
                },
                {
                    "type": "code",
                    "code": "-padding: spacing();-margin: spacing(loose) spacing(tight);+padding: var(--p-space-4);+margin: var(--p-space-5) var(--p-space-2);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-spacing <path>"
                },
                {
                    "type": "p",
                    "text": "Replace legacy static mixins with their corresponding declarations and CSS custom properties."
                },
                {
                    "type": "code",
                    "code": "-@include text-emphasis-normal;+color: var(--p-text);+font-weight: var(--p-font-weight-regular);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-text-emphasis <path>"
                },
                {
                    "type": "p",
                    "text": "Replace the legacy SCSSz-index()function with the supported CSS custom property token equivalent (ex:var(--p-z-1)). Any invocations ofz-index()that correspond to a z-index design-token i.e.--p-z-1will be replaced with a css variable declaration.\nThis includes invocations to the$fixed-element-stacking-ordersass map i.e.z-index(modal, $fixed-element-stacking-order)."
                },
                {
                    "type": "code",
                    "code": "-.decl-1 {-z-index: z-index(content);-}-.decl-2 {-z-index: z-index(modal, $fixed-element-stacking-order)-}+decl-1 {+z-index: var(--p-z-1);+}+.decl-2 {+z-index: var(--p-z-11)+}"
                },
                {
                    "type": "p",
                    "text": "Invocations ofz-indexwithin an arithmetic expression will be appended with a comment for review and manual migration.\nGenerally in these instances you'll want to wrap the suggested code change in acalchowever this may defer on a case by case basis in your codebase."
                },
                {
                    "type": "code",
                    "code": ".decl-3 {+/* polaris-migrator: Unable to migrate the following expression. Please upgrade manually. */+/* z-index: var(--p-z-1) + 1 */z-index: z-index(content) + 1}"
                },
                {
                    "type": "p",
                    "text": "Invocations ofz-indexwith a custom sass map property, will also be appended with a comment for review and manual migration."
                },
                {
                    "type": "code",
                    "code": ".decl-3 {+/* polaris-migrator: Unable to migrate the following expression. Please upgrade manually. */+/* z-index: map.get($custom-sass-map, modal) */z-index: z-index(modal, $custom-sass-map)}"
                },
                {
                    "type": "p",
                    "text": "In these cases you may also want to runnpx sass-migrator module <path> --migrate-deps --load-path <load-path>to ensure thatmap.getis in scope**. Be aware that this may also create additional code changes in your codebase, we recommend running this only if there are large number of instances of migrations fromz-indextomap.get. Otherwise it may be easier to adduse 'sass:map'to the top of your.scssfile manually."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-scss-replace-z-index <path>"
                },
                {
                    "type": "p",
                    "text": "Replace legacy static font values with Polaris custom properties forfont-size,font-weight, andline-heightdeclarations."
                },
                {
                    "type": "code",
                    "code": "-font-size: 16px;+font-size: var(--p-font-size-200);-font-weight: 400;+font-weight: var(--p-font-weight-regular);-line-height: 20px;+font-family: var(--p-font-line-height-2);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-styles-tokenize-font <path>"
                },
                {
                    "type": "p",
                    "text": "Replace timings (ms,s) in transition declarations (transition,transition-duration,transition-delay, andtransition-timing-function) and animation declarations (animation,animation-duration,animation-delay, andanimation-timing-function) with the corresponding Polarismotiontoken."
                },
                {
                    "type": "code",
                    "code": "-transition-duration: 100ms;+transition-duration: var(--p-duration-100);-transition-timing-function: linear;+transition-timing-function: var(--p-linear);-transition: opacity 100ms linear;+transition: opacity var(--p-duration-100) linear;-transition: opacity 100ms linear, left 100ms linear;+transition: opacity var(--p-duration-100) linear, left var(--p-duration-100) linear;-animation-duration: 100ms;+animation-duration: var(--p-duration-100);-animation-timing-function: linear;+animation-timing-function: var(--p-linear);-animation: 100ms linear fadeIn;+animation: var(--p-duration-100) linear fadeIn;-animation: 100ms linear slideIn, 100ms linear slideIn;+animation: var(--p-duration-100) linear slideIn, var(--p-duration-100) linear slideIn;"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-styles-tokenize-motion <path>"
                },
                {
                    "type": "p",
                    "text": "Replace usage of the legacy SCSSrem()function and hard-coded lengths (px,rem) inborder,border-width, andborder-radiusdeclarations with corresponding Polarisshapetoken."
                },
                {
                    "type": "code",
                    "code": "-border: 1px solid transparent;+border: var(--p-border-width-1) solid transparent;-border-width: 0.0625rem;+border-width: var(--p-border-width-1);-border-radius: 4px;+border-radius: var(--p-border-radius-1);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-replace-border-declarations <path>"
                },
                {
                    "type": "p",
                    "text": "Replace lengths and functions (px,remandrem()) in spacing declarations (padding,margin, andgap) with the corresponding Polaris spacing token."
                },
                {
                    "type": "code",
                    "code": "-padding: 16px;+padding: var(--p-space-4);-margin: 1rem;+margin: var(--p-space-4);-gap: rem(16px);+gap: var(--p-space-4);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-styles-tokenize-space <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated border CSS custom properties with corresponding replacement values (either a different Polaris custom property or a static value)."
                },
                {
                    "type": "code",
                    "code": "-border-radius: var(--p-border-radius-base);+border-radius: var(--p-border-radius-1);-border-radius: var(--p-text-field-focus-ring-border-radius);+border-radius: 7px;"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-styles-replace-custom-property-border <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated depth CSS custom properties with corresponding replacement values (either a different Polaris custom property or a static value)."
                },
                {
                    "type": "code",
                    "code": "-box-shadow: var(--p-button-drop-shadow);+box-shadow: var(--p-shadow-button);-box-shadow: 1px 1px var(--p-shadow-from-ambient-light);+box-shadow: 1px 1px rgba(23, 24, 24, 0.05);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-styles-replace-custom-property-depth <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated font CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-font-weight: var(--p-badge-font-weight);+font-weight: var(--p-font-weight-regular);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-styles-replace-custom-property-font <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated motion CSS custom properties with corresponding Polaris custom property replacement values."
                },
                {
                    "type": "code",
                    "code": "-transition: transform var(--p-duration-1-0-0) var(--p-ease);+transition: transform var(--p-duration-100) var(--p-ease);"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-styles-replace-custom-property-motion <path>"
                },
                {
                    "type": "p",
                    "text": "Replace deprecated legacy CSS custom properties with corresponding replacement values (either a different Polaris custom property or a static value)."
                },
                {
                    "type": "code",
                    "code": "-width: var(--p-icon-size);+width: var(--p-icon-size-small);-display: var(--p-override-none);+display: none;"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v9-styles-replace-custom-property-legacy <path>"
                },
                {
                    "type": "p",
                    "text": "A generic codemod to replace CSS custom properties with mapped values (either a different Polaris custom property or a static value)."
                },
                {
                    "type": "code",
                    "code": "-color: var(--p-text);+color: var(--p-color-text);-animation-duration: var(--p-fast);+animation-duration: 100ms;"
                },
                {
                    "type": "p",
                    "text": "This migration can be run in two ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using a combination of--decl,--from, and--toflags to replace a single custom property, or",
                        "Using a--mapsflag which points to a file defining replacements for multiple custom properties"
                    ]
                },
                {
                    "type": "p",
                    "text": "Option 1:"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator styles-replace-custom-property \\--decl=\"<name>\" --from=\"<prop>\" --to=\"<prop>\" <path>"
                },
                {
                    "type": "p",
                    "text": "Option 2:"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator styles-replace-custom-property \\--maps=\"<replacement-maps>\" <path>"
                },
                {
                    "type": "p",
                    "text": "Examplereplacement-maps.js(with option 2):"
                },
                {
                    "type": "code",
                    "code": "exportdefault{color:{'--p-text':'--p-color-text',},'/^animation/':{'--p-fast':'100ms',},};"
                },
                {
                    "type": "p",
                    "text": "Insert stylelint disable comments forstylelint-polaris>= v5 so that\nexisting failures are not blocking a codebase from initializing the linter."
                },
                {
                    "type": "code",
                    "code": "+// stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPYpadding: 1rem;"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator styles-insert-stylelint-disable <path>"
                },
                {
                    "type": "p",
                    "text": "A generic codemod to rename any component and its prop type."
                },
                {
                    "type": "code",
                    "code": "-<MyComponent prop />+<MyRenamedComponent prop />-export interface MyComponentPropType {}+export interface MyRenamedComponentPropType {}"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"MyComponent\" --renameTo=\"MyRenamedComponent\" --renamePropsFrom=\"MyComponentPropType\" --renamePropsTo=\"MyRenamedComponentPropType\""
                },
                {
                    "type": "p",
                    "text": "A generic codemod to rename any component prop."
                },
                {
                    "type": "code",
                    "code": "-<MyComponent prop=\"value\" />-<MyComponent prop />+<MyComponent newProp=\"value\" />+<MyComponent newProp />"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-rename-component-prop <path> --componentName=\"MyComponent\" --from=\"prop\" --to=\"newProp\""
                },
                {
                    "type": "p",
                    "text": "A generic codemod to remove unused@useimports in SCSS files."
                },
                {
                    "type": "code",
                    "code": "-@use 'global-styles/legacy';// No usages of the `legacy` namespace. Can be safely removed..class {color: blue;}"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator scss-remove-unused-at-use <path> --url='import/url'"
                },
                {
                    "type": "p",
                    "text": "Sometimes referred to as \"codemods\", migrations are JavaScript functions which modify some code from one form to another (eg; to move between breaking versions of@shopify/polaris). ASTs (Abstract Syntax Trees) are used to \"walk\" through the code in discreet, strongly typed steps, called \"nodes\". All changes made to nodes (and thus the AST) are then written out as the new/\"migrated\" version of the code. polaris-migratorsupports two types of migrations:"
                },
                {
                    "type": "list",
                    "items": [
                        "SCSS Migrations",
                        "Typescript Migrations"
                    ]
                },
                {
                    "type": "p",
                    "text": "Runpnpm new-migrationto generate a new migration from thescss-migrationtemplate:"
                },
                {
                    "type": "code",
                    "code": "❯ pnpm new-migration$ pnpm --filter=@shopify/polaris-migrator generate$ plop? [PLOP] Please choose a generator. (Use arrow keys)❯ scss-migrationtypescript-migration"
                },
                {
                    "type": "p",
                    "text": "Next, provide the name of your migration. For example;v9-scss-replace-function:"
                },
                {
                    "type": "code",
                    "code": "? [PLOP] Please choose a generator. sass-migration? Name of the migration (e.g. scss-replace-function) scss-replace-function"
                },
                {
                    "type": "p",
                    "text": "The generator will create the following files in themigrationsfolder:"
                },
                {
                    "type": "code",
                    "code": "migrations└── v9-scss-replace-function├── v9-scss-replace-function.ts└── tests+├── v9-scss-replace-function.input.scss+├── v9-scss-replace-function.output.scss+└── v9-scss-replace-function.test.ts"
                },
                {
                    "type": "p",
                    "text": "Each migrator has a default export adhering to theStylelint Rule API. A PostCSS AST is passed as therootand can be mutated inline, or emit warning/error reports. Continuing the example, here is what the migration may look like if our goal is to replace the Sass functionhello()withworld()."
                },
                {
                    "type": "code",
                    "code": "// polaris-migrator/src/migrations/replace-sass-function/replace-sass-function.tsimport{isSassFunction,StopWalkingFunctionNodes,createSassMigratorasv9ReplaceHelloWorld,}from'../../utilities/sass';importtype{PolarisMigrator}from'../../utilities/sass';constreplaceHelloWorld:PolarisMigrator=(_,{methods},context)=>{return(root)=>{methods.walkDecls(root,(decl)=>{+constparsedValue=valueParser(decl.value);+parsedValue.walk((node)=>{+if(isSassFunction('hello',node)){+if(context.fix){+node.value='world';+}else{+methods.report({+node:decl,+severity:'error',+message:+'Method hello() is no longer supported. Please migrate to world().',+});+}+returnStopWalkingFunctionNodes;+}+});+if(context.fix){+decl.value=parsedValue.toString();+}});};};exportdefaultv9ReplaceHelloWorld('replace-hello-world',replaceHelloWorld);"
                },
                {
                    "type": "p",
                    "text": "A more complete example can be seen instyles-tokenize-space.ts. The template will also generate starting test files you can use to test your migration. In your migrationstestsfolder, you can see 3 files:"
                },
                {
                    "type": "list",
                    "items": [
                        "v9-scss-replace-function.test.ts– Runs the fixtures and sets up additional migration options",
                        "v9-scss-replace-function.input.scss– The starting source input",
                        "v9-scss-replace-function.output.scss– The expected output after migration"
                    ]
                },
                {
                    "type": "p",
                    "text": "The main test file will load the input/output fixtures to test your migration against. You can configure additional fixtures and test migration options (see thereplace-sass-spacing.test.tsas an example). Run tests locally from workspace root by filtering to the migrations package:"
                },
                {
                    "type": "code",
                    "code": "npx turbo run test --filter=polaris-migrator -- v9-scss-replace-function"
                },
                {
                    "type": "p",
                    "text": "Once you are confident the migration is ready, create a new pull request including your migration and a newchangeset. In your PR, you can add a comment with the text/snapitto create a newsnapshot release. Once created, this snapshot can be used in a separate codebase:"
                },
                {
                    "type": "code",
                    "code": "# example snapshot releasenpx @shopify/polaris-migrator@0.0.0-snapshot-release-20220919213536 v9-scss-replace-function \"./app/**/*.scss\""
                },
                {
                    "type": "p",
                    "text": "The migrator doesn't include a default formatter. It is recommended to run your own linter and formatter after running migrations. For example, if you are usingESLintand/orPrettier:"
                },
                {
                    "type": "code",
                    "code": "npx eslint --fix .npx prettier --write ."
                },
                {
                    "type": "p",
                    "text": "Running a migration can potentially modify thousands of files. For more complex migrations, a comment may be added suggesting the change is manually checked. You can quickly perform a manual search for this comment in your text editor:"
                },
                {
                    "type": "code",
                    "code": "polaris-migrator:Unableto migrate the following expression.Pleaseupgrade manually."
                },
                {
                    "type": "p",
                    "text": "After applying a migration, it might be helpful to commit the changes that do not need a manual check from those that do. You can do this a few different ways, but we suggest staging all your changes, then unstaging those that include the manual check comment:"
                },
                {
                    "type": "code",
                    "code": "# Stash files with \"polaris-migrator:\" commentsgit stash push $(grep -r -l \"polaris-migrator:\" $(git ls-files -m))# Stage all files without \"polaris-migrator:\" commentsgit add .# Bring back the change with \"polaris-migrator:\" commentsgit stash pop# (optional) if there a files that have both \"polaris-migrator:\" comments# _and_ complete fixes, add the complete fixes nowgit add -p# Commit all the complete fixes:git commit# Now you're left with changes that have \"polaris-migrator:\" comments only"
                },
                {
                    "type": "list",
                    "items": [
                        "The jscodeshift API",
                        "Writing a PostCSS plugin",
                        "CodeshiftCommunity Recipes",
                        "Common utilities:jsx.tsimports.ts0",
                        "jsx.ts",
                        "imports.ts0"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris",
            "title": "Stylelint Polaris — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "code",
                    "code": "yarn add -D @shopify/stylelint-polaris stylelint"
                },
                {
                    "type": "p",
                    "text": "Note:stylelint-polarisrequires a peer dependency ofstylelint@>=14.15.0 Source code Extend@shopify/stylelint-polarisin yourStylelint config. Example inpackage.json"
                },
                {
                    "type": "code",
                    "code": "{\"stylelint\":{\"extends\":[\"@shopify/stylelint-polaris\"]}}"
                },
                {
                    "type": "p",
                    "text": "IMPORTANT:@shopify/stylelint-polarismust be added to the end of theextendsarray"
                },
                {
                    "type": "code",
                    "code": "npx stylelint '**/*.{css,scss}'"
                },
                {
                    "type": "code",
                    "code": "npx stylelint --fix '**/*.{css,scss}'"
                },
                {
                    "type": "p",
                    "text": "Enabling the linter could result in a large amount of warnings and errors in existing codebases. It is important to fix as many failures upfront as possible, but that shouldn't block the linter from being added. Thestyles-insert-stylelint-disablemigration insertsignore commentsso that enablingstylelint-polariscan be unblocked. The migration will insert comments as follows:"
                },
                {
                    "type": "code",
                    "code": "+// stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPYpadding: 1rem;"
                },
                {
                    "type": "p",
                    "text": "Run the following command substituting<path>with a glob pattern of files to run against:"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator styles-insert-stylelint-disable <path>"
                },
                {
                    "type": "p",
                    "text": "There are over 40 rules configured in Stylelint Polaris to help you avoid errors and follow stylistic and non-stylistic conventions while building for the Shopify admin. These rules help us measure the Polaris design system's coverage in the Shopify admin code base using the following categories:"
                },
                {
                    "type": "list",
                    "items": [
                        "Border",
                        "Color",
                        "Conventions",
                        "Layout",
                        "Media queries",
                        "Motion",
                        "Shadow",
                        "Space",
                        "Typography",
                        "Z-index"
                    ]
                },
                {
                    "type": "p",
                    "text": "*@shopify/stylelint-polaris v5.0.0 was the first stable release"
                },
                {
                    "type": "list",
                    "items": [
                        "Navigate to the rootstylelint-polarisconfig",
                        "Locate thestylelint-polaris/coverageoptions",
                        "Identify the appropriate category for the new rule",
                        "Insert the rule using standard Stylelintrule configurations",
                        "Add documentation for the rule with examples of code that will be reported as a problem and code that will fix the problem",
                        "The title should be the category + the stylelint rule name, for example### colors/color-named"
                    ]
                },
                {
                    "type": "code",
                    "code": "module.exports={rules:{'polaris/coverage':{color:{...},// Standard Stylelint rules configlayout:{...},// Standard Stylelint rules configmotion:{'new-rule':'new-rule-options',},},},};"
                },
                {
                    "type": "list",
                    "items": [
                        "Refer to theWriting pluginsguide of the Stylelint documentation",
                        "Create your rule in thepluginsdirectory",
                        "Validate your plugin withtests(reference sibling plugins for examples)",
                        "Refer to theAdd new rulessection to add your custom rule to thestylelint-polarisconfig"
                    ]
                },
                {
                    "type": "p",
                    "text": "Custom messages are surfaced in the command line, CI, and supported editors along side the defaultstylelintrule messages. They are added to the root level config and aim to provide more insight on how to resolve rule violations. In a majority of cases, the default rule messages are clear and concise. However, they don't always guide developers to a desired outcome. Thus, there are two mechanisms we suggest for improving and providing custom rule messages: Set a generic custom message on themessageproperty of the secondary options of a givenstylelint-polaris/coveragecategory. This message is appended to the default rule message and we expect will cover most cases."
                },
                {
                    "type": "code",
                    "code": "module.exports={rules:{'polaris/coverage':{color:[{'color-named':'never''color-no-hex':true,},{message:'Please use a Polaris color token: https://polaris.shopify.com/tokens/color'},],},},}"
                },
                {
                    "type": "p",
                    "text": "Example failure message:"
                },
                {
                    "type": "code",
                    "code": "-Unexpected named color \"red\" (color-named)+Unexpected named color \"red\" (color-named) Please use a Polaris color token"
                },
                {
                    "type": "p",
                    "text": "Set a custom message on themessageproperty in theStylelint rule config's secondary optionsif supported. This message is appended to the default rule message instead of the generic category message when provided."
                },
                {
                    "type": "code",
                    "code": "module.exports={rules:{'polaris/coverage':{layout:[{'property-disallowed-list':[['position'],{message:'Please use the Polaris \"Sticky\" component'},],},{message:'Please use a Polaris layout component'},],},},};"
                },
                {
                    "type": "p",
                    "text": "Example failure message:"
                },
                {
                    "type": "code",
                    "code": "-Unexpected value \"sticky\" for property \"position\" (declaration-property-value-disallowed-list) Please use a Polaris layout component+Unexpected value \"sticky\" for property \"position\" (declaration-property-value-disallowed-list) Please use the Polaris \"Sticky\" component"
                },
                {
                    "type": "p",
                    "text": "Open your terminal to the root of thepolarismonorepo:"
                },
                {
                    "type": "list",
                    "items": [
                        "Install and symlink dependencies"
                    ]
                },
                {
                    "type": "code",
                    "code": "pnpm install"
                },
                {
                    "type": "list",
                    "items": [
                        "Build@shopify/polarisdependencies, but not@shopify/polarisitself"
                    ]
                },
                {
                    "type": "code",
                    "code": "pnpm build -- --filter=@shopify/polaris^..."
                },
                {
                    "type": "p",
                    "text": "Note: Remove the^character if you do want to build@shopify/polaris"
                },
                {
                    "type": "list",
                    "items": [
                        "Runstylelintinpolaris-react"
                    ]
                },
                {
                    "type": "p",
                    "text": "All files"
                },
                {
                    "type": "code",
                    "code": "pnpm turbo run lint:styles --filter=@shopify/polaris"
                },
                {
                    "type": "p",
                    "text": "Specific file"
                },
                {
                    "type": "code",
                    "code": "pnpm run stylelint path/to/component.scss// pnpm run stylelint polaris-react/src/components/TopBar/TopBar.scss"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules",
            "title": "Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "There are over 40 rules configured in Stylelint Polaris to help you avoid errors and follow stylistic and non-stylistic conventions while building for the Shopify admin. These rules are grouped into categories that help us measure the Polaris design system's coverage in the Shopify admin code base."
                },
                {
                    "type": "list",
                    "items": [
                        "border/at-rule-disallowed-list: Disallows use of legacy Sass border mixins.",
                        "border/custom-property-disallowed-list: Disallows use of legacy border custom properties.",
                        "border/declaration-property-unit-disallowed-list: Disallows hard-codedpx,em, andremunits in border property values.",
                        "border/function-disallowed-list: Disallows use of legacy Sass border functions."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "color/at-rule-disallowed-list: Disallows use of legacy color mixins.",
                        "color/color-named: Disallows named colors.",
                        "color/color-no-hex: Disallows hex colors.",
                        "color/custom-property-disallowed-list: Disallows use of legacy color custom properties.",
                        "color/function-disallowed-list: Disallows allows use of built in and legacy color functions.",
                        "color/global-disallowed-list: Disallows use of legacy color Sass APIs."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "conventions/custom-property-allowed-list: Allows definition of custom properties not using Polaris prefixes, flags declaration property values that are not valid Polaris tokens, flags declaration property values using private tokens.",
                        "conventions/selector-disallowed-list: Disallows overrides of Polaris component styles."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "layout/at-rule-disallowed-list: Disallows use of legacy Sass mixins.",
                        "layout/custom-property-disallowed-list: Disallows use of legacy layout custom properties.",
                        "layout/function-disallowed-list: Disallows use of internal Sass layout functions.",
                        "layout/global-disallowed-list: Disallows use of legacy layout Sass APIs."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "legacy/at-rule-disallowed-list: Disallows use of legacy Sass mixins.",
                        "legacy/function-disallowed-list: Disallows use off legacy Sass functions.",
                        "legacy/global-disallowed-list: Disallows use of legacy custom properties and Sass mixin map data."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "media-queries/at-rule-disallowed-list: Disallows use of legacy breakpoint Sass mixins.",
                        "media-queries/function-disallowed-list: Disallows use of legacy breakpoint sass functions.",
                        "media-queries/media-queries-allowed-list: Allows declaration ofprintandscreen@mediaqueries, allows@mediaqueries forforced-colorsandms-high-contrastfeatures, allows@mediaqueries using Polaris breakpoints."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "motion/at-rule-disallowed-list: Disallows use of CSS @keyframes.",
                        "motion/custom-property-disallowed-list: Disallows use of legacy motion custom properties.",
                        "motion/declaration-property-unit-disallowed-list: Disallows use of hard-coded millisecondmsand secondsvalues on transition and animation properties.",
                        "motion/function-disallowed-list: Disallows use of legacy Sass motion functions.",
                        "motion/global-disallowed-list: Disallows use of legacy motion Sass APIs."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "shadow/custom-property-disallowed-list: Disallows use of legacy shadow custom properties.",
                        "shadow/declaration-property-unit-disallowed-list: Disallows box-shadow declarations with hard coded px, rem, or em units.",
                        "shadow/function-disallowed-list: Disallows use of built-in and legacy shadow functions.",
                        "shadow/global-disallowed-list: Disallows use of legacy shadow Sass APIs.",
                        "shadow/property-disallowed-list: Disallows text shadow property."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "space/custom-property-disallowed-list: Disallows use of legacy space custom properties.",
                        "space/declaration-property-unit-disallowed-list: Disallows use of hard-coded px, em, and rem values on gap, margin, and padding properties.",
                        "space/function-disallowed-list: Disallows use of legacy Sass space functions.",
                        "space/global-disallowed-list: Disallows use of legacy spacing Sass APIs."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "typography/at-rule-disallowed-list: Disallows use of legacy Sass typography mixins.",
                        "typography/declaration-property-unit-disallowed-list: Disallows hard-codedpx,em, andremvalues for font-size and line-height properties.",
                        "typography/declaration-property-value-disallowed-list: Disallows hard-coded alphanumeric font-weight values.",
                        "typography/function-disallowed-list: Disallows use of legacy Sass typography functions.",
                        "typography/global-disallowed-list: Disallows use of legacy typography Sass APIs.",
                        "typography/property-disallowed-list: Disallows declarations of text style properties."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "z-index/custom-property-disallowed-list: Disallows use of legacy z-index custom properties.",
                        "z-index/declaration-property-value-allowed-list: Disallows declaration ofz-indexvalues that are not Polaris z-index tokens.",
                        "z-index/function-disallowed-list: Disallows use of the legacy z-index Sass function.",
                        "z-index/global-disallowed-list: Disallows use of legacy z-index Sass APIs."
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/border-at-rule-disallowed-list",
            "title": "border/at-rule-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisshape tokensinstead of custom styles so thatborderisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatborderisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+outline: var(--p-border-width-025) solid transparent;// Don't-@include high-contrast-outline()"
                },
                {
                    "type": "p",
                    "text": "NOTE: Thefocus-ringat rule does not currently have an equivalent token or component. If you need to use it, feel free to add a stylelint ignore comment until a solution from Polaris is ready."
                },
                {
                    "type": "code",
                    "code": "// Do+&:focus {+ outline: var(--p-border-width-050) solid var(--p-color-border-focus);+ outline-offset: var(--p-space-050);+}// Don't-@include focus-ring"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/border-custom-property-disallowed-list",
            "title": "border/custom-property-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisshape tokensinstead of custom styles so thatborderisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatborderisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+border-radius: var(--p-border-radius-200);// Don't-border-radius: var(--p-border-radius-large);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/border-declaration-property-unit-disallowed-list",
            "title": "border/declaration-property-unit-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisshape tokensinstead of custom styles so thatborderisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatborderisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+border-width: var(--p-border-width-050);+border-radius: var(--p-border-radius-200);// Don't-border-width: 2px;-border-radius: 0.5rem;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/border-function-disallowed-list",
            "title": "border/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisshape tokensinstead of custom styles so thatborderisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatborderisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+border-radius: var(--p-border-radius-100);// Don't-border-radius: border-radius();"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/color-at-rule-disallowed-list",
            "title": "color/at-rule-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolariscolor tokensinstead of custom styles so thatcolorisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatcolorisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+svg {+fill: var(--p-color-icon-secondary);+}// Don't-@include recolor-icon(--p-text-secondary);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/color-color-named",
            "title": "color/color-named — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolariscolor tokensinstead of custom styles so thatcolorisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatcolorisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+color: var(--p-color-text);+fill: var(--p-color-icon)// Don't-color: black;-fill: dimgray;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/color-color-no-hex",
            "title": "color/color-no-hex — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolariscolor tokensinstead of custom styles so thatcolorisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatcolorisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+color: var(--p-color-text);+fill: var(--p-color-icon)// Don't-color: #202223;-fill: #5c5f62;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/color-custom-property-disallowed-list",
            "title": "color/custom-property-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolariscolor tokensinstead of custom styles so thatcolorisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatcolorisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+color: var(--p-color-text-caution);// Don't-color: var(--p-text-warning);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/color-function-disallowed-list",
            "title": "color/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolariscolor tokensinstead of custom styles so thatcolorisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatcolorisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+color: var(--p-color-text-disabled);+background: var(--p-color-bg-fill-inverse-hover);// Don't-color: rgb(140, 145, 150);-background: color('hover');"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/color-global-disallowed-list",
            "title": "color/global-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolariscolor tokensinstead of custom styles so thatcolorisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatcolorisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Don't-@type map $filter-palette-data: $polaris-color-filters;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/conventions-custom-property-allowed-list",
            "title": "conventions/custom-property-allowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Allows definition of custom properties not prefixed with--p-,--pc-, or--polaris-version-."
                },
                {
                    "type": "code",
                    "code": "root: {// Do+--osui_animation-name-drag-handle-pulse: osui_drag-handle-pulse;// Don't---p-animation-name-drag-handle-pulse: osui_drag-handle-pulse;};"
                },
                {
                    "type": "p",
                    "text": "Flags declaration property values using--p-*that are not valid Polaris tokens."
                },
                {
                    "type": "code",
                    "code": "// Do+font-size: var(--p-font-size-400);// Don't-font-size: var(--p-fontsize-200);"
                },
                {
                    "type": "p",
                    "text": "Flags declaration property values using private--pc-*tokens."
                },
                {
                    "type": "code",
                    "code": "// Do+background: var(--p-color-bg-fill-inverse);// Don't-background: var(--pc-button-color-depressed);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/conventions-selector-disallowed-list",
            "title": "conventions/selector-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Avoid overriding the styles of Polaris components in your SCSS. Consider contributing an extension or enhancement to the component's API instead. Overrides of component classnames are liable to break, as Polaris styles are private and may change at any time without notice."
                },
                {
                    "type": "code",
                    "code": "// Do+<Textfield monospaced />// Don't-[class*='Polaris-TextField--Input'] {-font-family: var(--p-font-family-mono);-};"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/layout-at-rule-disallowed-list",
            "title": "layout/at-rule-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarislayout componentsinstead of custom styles so thatlayoutisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatlayoutisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+@media print {+display: none;+}// Don't-@include print-hidden;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/layout-custom-property-disallowed-list",
            "title": "layout/custom-property-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarislayout componentsinstead of custom styles so thatlayoutisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatlayoutisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+<Checkbox />// Don't-height: var(--p-choice-size);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/layout-function-disallowed-list",
            "title": "layout/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarislayout componentsinstead of custom styles so thatlayoutisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatlayoutisin sync with the design system. Use hard coded pixel or rem values forwidthandheightinstead of legacy mixins/variables or spacing tokens."
                },
                {
                    "type": "code",
                    "code": "// Do+height: 56px;// Don't-height: top-bar-height();"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/layout-global-disallowed-list",
            "title": "layout/global-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarislayout componentsinstead of custom styles so thatlayoutisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatlayoutisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+width: 240px !default;// Don't-width: $navigation-width;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/legacy-at-rule-disallowed-list",
            "title": "legacy/at-rule-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatlegacyisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatlegacyisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+<UnstyledButton />// Don't-@include unstyled-button;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/legacy-function-disallowed-list",
            "title": "legacy/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatlegacyisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatlegacyisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Don't-@include available-names"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/legacy-global-disallowed-list",
            "title": "legacy/global-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatlegacyisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatlegacyisin sync with the design system. UsePolaris tokenswhen possible. Otherwise use hard coded pixel or rem values instead of legacy mixins/variables."
                },
                {
                    "type": "code",
                    "code": "// Do+left: calc(-1 * var(--p-space-100));// Don't-left: -1 * $timeline-border-width;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/media-queries-at-rule-disallowed-list",
            "title": "media-queries/at-rule-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatmediaisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatmediaisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+@media (max-width: var(--p-breakpoints-md)) {}// Don't-@include breakpoint-before(layout-width(page-with-nav)) {}"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/media-queries-function-disallowed-list",
            "title": "media-queries/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatmediaisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatmediaisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+@media (min-width: var(--p-breakpoints-md)) {}// Don't-@include breakpoint-after(layout-width(page-with-nav)) {}"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/media-queries-media-queries-allowed-list",
            "title": "media-queries/media-queries-allowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatmediaisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatmediaisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+@include @media #{$p-breakpoints-sm-up} {}// Don't-@include @media #{$my-var} {}"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/motion-at-rule-disallowed-list",
            "title": "motion/at-rule-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarismotion tokensinstead of custom styles so thatmotionisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatmotionisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+animation: var(--p-motion-keyframes-spin) var(--p-motion-duration-500) linear infinite;// Don't-@keyframes spin {-from {-transform: rotate(0deg);-}-to {-transform: rotate(360deg);-}-}"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/motion-custom-property-disallowed-list",
            "title": "motion/custom-property-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarismotion tokensinstead of custom styles so thatmotionisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatmotionisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+transition: var(--p-motion-duration-500) var(--p-motion-ease);// Don't-transition: var(--p-duration-500) var(--p-ease);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/motion-declaration-property-unit-disallowed-list",
            "title": "motion/declaration-property-unit-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarismotion tokensinstead of custom styles so thatmotionisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatmotionisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+transition-duration: var(--p-motion-duration-200);// Don't-transition-duration: 200ms;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/motion-function-disallowed-list",
            "title": "motion/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarismotion tokensinstead of custom styles so thatmotionisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatmotionisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+transition-duration: var(--p-motion-duration-200);// Don't-transition-duration: 200ms;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/motion-global-disallowed-list",
            "title": "motion/global-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarismotion tokensinstead of custom styles so thatmotionisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatmotionisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+transition: var(--p-motion-duration-500) var(--p-motion-ease);// Don't-duration: $skeleton-shimmer-duration var(--p-motion-ease);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/shadow-custom-property-disallowed-list",
            "title": "shadow/custom-property-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisdepth tokensinstead of custom styles so thatshadowisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatshadowisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+box-shadow: var(--p-shadow-300);// Don't-box-shadow: var(--p-shadow-deep)"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/shadow-declaration-property-unit-disallowed-list",
            "title": "shadow/declaration-property-unit-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisdepth tokensinstead of custom styles so thatshadowisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatshadowisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+box-shadow: var(--p-shadow-300);// Don't-box-shadow: 0px 2px 4px rgba(31, 33, 36, 0.1), 0px 1px 6px rgba(31, 33, 36, 0.05);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/shadow-function-disallowed-list",
            "title": "shadow/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisdepth tokensinstead of custom styles so thatshadowisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatshadowisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+box-shadow: var(--p-shadow-300);// Don't-filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/shadow-global-disallowed-list",
            "title": "shadow/global-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisdepth tokensinstead of custom styles so thatshadowisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatshadowisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Don't-@type map $depth-data: $shadows-data;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/shadow-property-disallowed-list",
            "title": "shadow/property-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisdepth tokensinstead of custom styles so thatshadowisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatshadowisin sync with the design system. Instead of using properties liketext-shadow, make sure the text has proper contrast with the background so that it is readable without a shadow."
                },
                {
                    "type": "code",
                    "code": "// Don't-text-shadow: 2px 2px #ff0000;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/space-custom-property-disallowed-list",
            "title": "space/custom-property-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisspace tokensinstead of custom styles so thatspaceisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatspaceisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+margin-bottom: var(--p-space-025);// Don't-margin-bottom: var(--p-choice-margin);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/space-declaration-property-unit-disallowed-list",
            "title": "space/declaration-property-unit-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisspace tokensinstead of custom styles so thatspaceisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatspaceisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+gap: var(--p-space-050);+margin: var(--p-space-300) 0;// Don't-gap: 2px;-margin: 12px  0;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/space-function-disallowed-list",
            "title": "space/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisspace tokensinstead of custom styles so thatspaceisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatspaceisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+padding: var(--p-space-100);// Don't-padding: rem(4px);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/space-global-disallowed-list",
            "title": "space/global-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolarisspace tokensinstead of custom styles so thatspaceisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatspaceisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Don't-@type map $spacing-data: $polaris-spacing;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/typography-at-rule-disallowed-list",
            "title": "typography/at-rule-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaristext componentinstead of custom styles so thattypographyisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thattypographyisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+<Text breakWord truncate />// Don't-@include text-breakword;-@include truncate;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/typography-declaration-property-unit-disallowed-list",
            "title": "typography/declaration-property-unit-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaristext componentinstead of custom styles so thattypographyisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thattypographyisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+font-size: var(--p-font-size-300);+line-height: var(--p-font-line-height-600);// Don't-font-size: 12px;-line-height: 1.5rem"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/typography-declaration-property-value-disallowed-list",
            "title": "typography/declaration-property-value-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaristext componentinstead of custom styles so thattypographyisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thattypographyisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+<Text fontWeight='bold' />// Do+font-weight: var(--p-font-weight-bold);// Don't-font-weight: 700;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/typography-function-disallowed-list",
            "title": "typography/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaristext componentinstead of custom styles so thattypographyisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thattypographyisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+<Text variant=\"headingXs\" as=\"p\" />// Do+font-size: var(--p-font-size-300);// Don't-font-size: font-size('caption');"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/typography-global-disallowed-list",
            "title": "typography/global-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaristext componentinstead of custom styles so thattypographyisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thattypographyisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+font-size: var(--p-font-size-400);// Don't-font-size: $base-font-size;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/typography-property-disallowed-list",
            "title": "typography/property-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaristext componentinstead of custom styles so thattypographyisconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thattypographyisin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+<Text variant=\"headingXs\" as=\"p\" />// Don't-font-size: var(--p-font-size-300);-font-weight: var(--p-font-weight-semibold);-line-height: var(--p-font-line-height-400);-letter-spacing: var(--p-font-letter-spacing-normal);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/z-index-custom-property-disallowed-list",
            "title": "z-index/custom-property-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatz-isconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatz-isin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+z-index: var(--p-z-index-1);// Don't-z-index: var(--p-z-1);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/z-index-declaration-property-value-allowed-list",
            "title": "z-index/declaration-property-value-allowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatz-isconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatz-isin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+z-index: var(--p-z-index-1);// Don't-z-index: 1;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/z-index-function-disallowed-list",
            "title": "z-index/function-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatz-isconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatz-isin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Do+z-index: var(--p-z-index-1);// Don't-z-index: z-index(content);"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/tools/stylelint-polaris/rules/z-index-global-disallowed-list",
            "title": "z-index/global-disallowed-list — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "UsePolaris tokensinstead of custom styles so thatz-isconsistent across the Admin. This helps merchants have a coherent user experience and also ensures thatz-isin sync with the design system."
                },
                {
                    "type": "code",
                    "code": "// Don't-@type map $elevation-data: $global-elements;"
                },
                {
                    "type": "p",
                    "text": "Have you found that merchants benefit from styles or components that aren't in Polaris? We'd love to learn more. You can jumpstart a contribution to Polaris in GitHub by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Starting adiscussionto collaborate with the community to find a solution",
                        "Submitting afeature proposal issueto share context on your suggestion",
                        "Drafting apull requestwith your proposed improvement or addition"
                    ]
                },
                {
                    "type": "p",
                    "text": "If styles are intentionally designed to diverge from Polaris and it isn't viable to contribute back to the design system, you canignore the failing rule. Make sure to provide context as to why you are writing custom styles with a disable description."
                },
                {
                    "type": "code",
                    "code": "// stylelint-disable-next-line -- why custom styles are being used instead of Polaris"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/version-guides",
            "title": "Version guides — Shopify Polaris",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Migrating from v11 to v12Polaris v12.0.0 prop replacement, removal of components, renamed components, and token changes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Guides before v12"
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/version-guides/migrating-from-v11-to-v12",
            "title": "Migrating from v11 to v12 — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Upgrading to Polaris v12 from v11 requires several automated and manual migrations of token, component, and component prop names that have been removed, replaced, or renamed. The bulk of migrations are automated using the@shopify/polaris-migratorCLI tool, with the edge cases handled by find and replace in your code editor using provided RegExp searches. You can reference therecommended migration workfloworglossarysections for additional migration support. Not on v11 yet? You'll need to follow themigration guidesfor previous major versions before upgrading to v12."
                },
                {
                    "type": "code",
                    "code": "npminstall@shopify/polaris@12# oryarnadd@shopify/polaris@12"
                },
                {
                    "type": "list",
                    "items": [
                        "What's new in this version",
                        "v12.0.0 release notes"
                    ]
                },
                {
                    "type": "p",
                    "text": "When running token and component migrations, we recommend the following workflow: Thepolaris-migratorCLI commands are scaffolded for you to paste into your terminal:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tailor the directories in the command glob paths to those relevant to your app's file structure. For example, this generic monorepo glob**/*.{css,scss}might need to be changed to explicitly target stylesheets in{src}/**/*.{css,scss}in your app.",
                        "Adjust the file extensions for the migrations you are running. For example, React component migrations in a TypeScript app should target*.{ts,tsx}files, while token migrations should target*.{css,scss}files."
                    ]
                },
                {
                    "type": "code",
                    "code": "# Example migrationnpx @shopify/polaris-migrator...# Find modified files containing \"polaris-migrator:\" manual migration commentsmatching_files=$(grep-r -l\"polaris-migrator:\"$(git ls-files -m))# Stash the files needing manual migrations if there are anyif[[-n\"$matching_files\"]];thengitstash push$matching_fileselseecho\"No modified files contain 'polaris-migrator:'\"fi# Stage all migrated files without \"polaris-migrator:\" commentsgitadd.# Format staged files onlygitdiff--staged --name-only|xargsnpx prettier --write# Stage formatted filesgitadd.#  Commit automatic migrationgitcommit -m\"[Automated] Migrate X from Polaris v11 to v12\""
                },
                {
                    "type": "p",
                    "text": "Thepolaris-migratorcould insert comments or skip instances that are unsafe to automatically migrate. You will need to resolve those issues in the next manual migration step. Now, you need to validate the automatic migration and manually update any outstanding issues. The migration guide sections may have additional resources to help you resolve the migrations manually, such as💡 Migration example,➡️ Replacement mappingstables, and descriptions of what the automated migrations are doing. Unstash the polaris migrator comments if you stashed any in step 1."
                },
                {
                    "type": "code",
                    "code": "gitstash pop"
                },
                {
                    "type": "p",
                    "text": "Go through each of the changed files and search forpolaris-migrator:comments. Migrate the instance the comment refers to, then delete the comment. Next, search for each of the token RegExp searches which are found under the✅ Post-migration RegExp validationtoggle in the guide. Update any outstanding migrations until there are no more results for the RegExp search. If you're unsure on how to search in a code editor using RegExp, check out theglossary."
                },
                {
                    "type": "code",
                    "code": "# Stage all manually migrated filesgitadd.# Format staged files onlygitdiff--staged --name-only|xargsnpx prettier --write# Optional: run stylelint if using stylelint-polaris and running migrations on stylesheetsnpx stylelint\"**/*.{css,scss}\"#  Commit manual migrationsgitcommit -m\"[Manual] Migrate X from Polaris v11 to v12\""
                },
                {
                    "type": "p",
                    "text": "TheAppProviderfeaturesprop no longer accepts the keyspolarisSummerEditions2023andpolarisSummerEditions2023ShadowBevelOptOut. If these were the only features passed into yourAppProvider, you can safely remove thefeaturesprop completely from your PolarisAppProvider. If that is not the case, you will need to remove the features specifically related topolarisSummerEditions2023andpolarisSummerEditions2023ShadowBevelOptOutfrom being passed into thefeaturesprop."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-react-avatar-component\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "TheAvatarshapeprop was deprecated because circular shapes are no longer part of the admin design language. Remove theshapeprop fromAvatar."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Badge --fromProp status --toProp tone\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Badge --fromProp statusAndProgressLabelOverride --toProp toneAndProgressLabelOverride\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Banner --fromProp status --toProp tone\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "This border radius property rename aligns withCSS border radius constituent propertiesto be consistent with other Polaris component APIs as well as wider web conventions."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Box --fromProp borderRadiusEndStart --toProp borderEndStartRadius\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Box --fromProp borderRadiusEndEnd --toProp borderEndEndRadius\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Box --fromProp borderRadiusStartStart --toProp borderStartStartRadius\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Box --fromProp borderRadiusStartEnd --toProp borderStartEndRadius\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "TheButtoncomponent has been updated to replace deprecatedconnectedDisclosure,outline,destructive,primary,primarySuccess,plain, andmonochromeprops with a newvariantprop that supports multiple variation options."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-react-update-button-component\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName ButtonGroup --fromProp spacing --toProp gap\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName ButtonGroup --fromPropType boolean --fromProp segmented --toProp variant --toValue segmented\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName DescriptionList --fromProp spacing --toProp gap\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "Directional components now useInlineandBlocknaming conventions which are defined byCSS logical properties. This ensures consistency with other Polaris component APIs as well as wider web conventions."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-rename-component --renameFrom HorizontalGrid --renameTo InlineGrid --renamePropsFrom HorizontalGridProps --renamePropsTo InlineGridProps\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "Directional components now useInlineandBlocknaming conventions which are defined byCSS logical properties. This ensures consistency with other Polaris component APIs as well as wider web conventions."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-rename-component --renameFrom HorizontalStack --renameTo InlineStack --renamePropsFrom HorizontalStackProps --renamePropsTo InlineStackProps\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "🔔 Stepped migration: You must run thecolor->tonemigration after running the tone rename migrations."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Icon --fromProp color --toProp tone --fromValue warning --toValue caution\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Icon --fromProp color --toProp tone --fromValue highlight --toValue info\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Icon --fromProp color --toProp tone\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "Backdrop is not a pattern in the new Polaris design language. If you must use a backdrop on your icon, use Box."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName IndexTable.Row --fromProp status --toProp tone\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName IndexTable.Row --fromPropType boolean --fromProp subdued --toProp tone --toValue subdued\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Layout.Section --fromPropType boolean --fromProp oneThird --toProp variant --toValue oneThird\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Layout.Section --fromPropType boolean --fromProp oneHalf --toProp variant --toValue oneHalf\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Layout.Section --fromPropType boolean --fromProp fullWidth --toProp variant --toValue fullWidth\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Layout.Section --fromPropType boolean --fromProp secondary --toProp variant --toValue oneThird\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName List --fromProp spacing --toProp gap\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Modal --fromPropType boolean --fromProp small --toProp size --toValue small\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Modal --fromPropType boolean --fromProp large --toProp size --toValue large\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Modal --fromPropType boolean --fromProp fullScreen --toProp size --toValue fullScreen\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "Page dividers are no longer a pattern in the new Polaris design language. If you must use a divider, use theDividercomponent to add them back in where needed."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName ProgressBar --fromProp color --toProp tone\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "🔔 Stepped migration: You must run thecolor->tonemigration after running the tone rename migrations."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Text --fromProp color --toProp tone --fromValue warning --toValue caution\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Text --fromProp color --toProp tone\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Text --fromProp variant --fromValue headingXs --toValue headingSm\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName Text --fromProp variant --fromValue heading4xl --toValue heading3xl\"**/*.{ts,tsx}\""
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-update-component-prop --componentName TextField --fromPropType boolean --fromProp borderless --toProp variant --toValue borderless\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "Directional components now useInlineandBlocknaming conventions which are defined byCSS logical properties. This ensures consistency with other Polaris component APIs as well as wider web conventions."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator react-rename-component --renameFrom VerticalStack --renameTo BlockStack --renamePropsFrom VerticalStackProps --renamePropsTo BlockStackProps\"**/*.{ts,tsx}\""
                },
                {
                    "type": "p",
                    "text": "The following tokens have either been renamed or removed. You will need to replace any instances of them with their new name or value equivalents. Please review each token section for migrations that can be run to resolve these breaking changes. To replace deprecatedbordercustom properties, you can run thev12-styles-replace-custom-property-bordermigration then validate with RegExp. Please reference therecommended migration workflowsection below for additional migration support."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-border\"**/*.{css,scss}\""
                },
                {
                    "type": "p",
                    "text": "To replace deprecatedcolorcustom properties, you can run thev12-styles-replace-custom-property-colormigration then validate with RegExp. Please reference therecommended migration workflowsection below for additional migration support. 🔔 Stepped migration: The color migration needs to be run in4sequential steps due to overlappingcolortoken names and context dependent manual migrations."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-color\"**/*.{css,scss}\"--step=1"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-color\"**/*.{css,scss}\"--step=2"
                },
                {
                    "type": "p",
                    "text": "Manually migrate the following tokens to their hardcoded values: on-coloris being replaced byon-bg-filltokens. These tokens will no longer be the same value but tailored to the background color the element is sitting on. This gives us greater control over the visual design of the admin. If you want to unblock your migration quickly you can manually hardcode the values using the following replacement map: To replace deprecatedfontcustom properties, you can run thev12-styles-replace-custom-property-fontmigration then validate with RegExp. Please reference therecommended migration workflowsection below for additional migration support. 🔔 Stepped migration: The font migration needs to be run in4sequential steps due to overlappingfont-sizetoken names."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-font\"**/*.{css,scss}\"--step=1"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-font\"**/*.{css,scss}\"--step=2"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-font\"**/*.{css,scss}\"--step=3"
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-font\"**/*.{css,scss}\"--step=4"
                },
                {
                    "type": "p",
                    "text": "To replace deprecatedshadowcustom properties, you can run thev12-styles-replace-custom-property-shadowmigration then validate with RegExp. Please reference therecommended migration workflowsection below for additional migration support. 🔔 Stepped migration: The shadow migration needs to be run in2sequential steps due to context dependent manual migrations."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-shadow\"**/*.{css,scss}\""
                },
                {
                    "type": "p",
                    "text": "The following tokens need to be manually migrated because their values are context dependent: To replace deprecatedspacecustom properties, you can run thev12-styles-replace-custom-property-spacemigration then validate with RegExp. Please reference therecommended migration workflowsection below for additional migration support."
                },
                {
                    "type": "code",
                    "code": "npx @shopify/polaris-migrator v12-styles-replace-custom-property-space\"**/*.{css,scss}\""
                },
                {
                    "type": "list",
                    "items": [
                        "getCustomPropertyNamesrenamed togetThemeVarNames",
                        "createVarrenamed tocreateVarName"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you are using these utilities, feel free to copy them from v11 into your own codebase."
                },
                {
                    "type": "list",
                    "items": [
                        "createExact",
                        "createMetadata",
                        "getKeyframeNames",
                        "getUnit",
                        "isKeyOf",
                        "rem",
                        "removeMetadata",
                        "toEm",
                        "tokensToRems"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "BreakpointsAliasDirectionMediaConditions",
                        "BreakpointsMediaConditions",
                        "MetaBreakpointsTokenGroup",
                        "Tokens(replaced byTheme)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "@shopify/polaris-tokens/json/border.json",
                        "@shopify/polaris-tokens/json/breakpoints.json",
                        "@shopify/polaris-tokens/json/color.json",
                        "@shopify/polaris-tokens/json/font.json",
                        "@shopify/polaris-tokens/json/height.json",
                        "@shopify/polaris-tokens/json/motion.json",
                        "@shopify/polaris-tokens/json/shadow.json",
                        "@shopify/polaris-tokens/json/space.json",
                        "@shopify/polaris-tokens/json/text.json",
                        "@shopify/polaris-tokens/json/width.json",
                        "@shopify/polaris-tokens/json/zIndex.json"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you are using these exports, update the implementation to importthemesandJSON.stringifythe theme you need."
                },
                {
                    "type": "code",
                    "code": "-const color = require('@shopify/polaris-tokens/json/color.json');+const {themes} = require('@shopify/polaris-tokens');+const color = JSON.stringify(themes.light.color);"
                },
                {
                    "type": "p",
                    "text": "Instead of importingtokensdirectly you should use theuseThemehook when you have to access token values. If you must access the tokens directly, you can importtokens->defaultThemefrom@shopify/polaris-tokens."
                },
                {
                    "type": "code",
                    "code": "-import {tokens} from '@shopify/polaris-tokens';+import {useTheme} from '@shopify/polaris';+const theme = useTheme();-tokens.space['1'];+theme.space['100'];"
                },
                {
                    "type": "p",
                    "text": "The new design language comes with a web font calledInter. Polaris references this font but does not load it. Your app will need to load the font, otherwise it will fallback to the user's system font. You can load this font from Shopify by adding the following to your app's<head>:"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"preconnect\"href=\"https://cdn.shopify.com/\"/><linkrel=\"stylesheet\"href=\"https://cdn.shopify.com/static/fonts/inter/v4/styles.css\"/>"
                },
                {
                    "type": "p",
                    "text": "Major and minor icon sizes are now identical.\nYou may need to update custom icons in your app as they may look much larger than Polaris icons now.\nAll icons still maintain the 20x20 viewbox. We removed dividers across Polaris components, most noticeably inPageandLegacyCard.\nWe now recommend using spacing to create a visual hierarchy.\nIf you must use a divider, use theDividercomponent to add them back in where needed. Default buttons have decreased in height and no longer match the height of some inputs, namelyTextFieldandSelect.\nTo update a button's height to match the new height of input fields, use the large size by using thelargesize variant ofButton."
                },
                {
                    "type": "code",
                    "code": "-<TextField connectedRight={<Button icon={DeleteMajor} />} />+<TextField connectedRight={<Button icon={DeleteMajor} size=\"large\" />} />"
                },
                {
                    "type": "p",
                    "text": "TheLegacyCardnow enforces thath1andh2content uses theTextheadingSmvariant (--p-font-size-325).\nIf you want to use custom heading sizes, please refactorLegacyCardtoCard. TheLegacyCardnow has much tighter spacing and does not have dividers between sections and subsections.\nThis may result in some visual hierarchy/padding issues depending on how your cards are composed.\nYou can resolve this in a number of ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "recommended– UseCardandBlockStackto compose a new card layout",
                        "Remove any custom content spacing wrappers and use<LegacyCard.Section />,<LegacyCard.Header />, or<LegacyCard.Section flush />instead.\nIssues involving a lack of top or bottom padding on the card is likely caused by this.",
                        "Update all custom content padding using--p-space-500to use--p-space-400.\nThis includes content wrapped in aLegacyStackcomponent.Example-spacing='loose'+spacing={undefined}or forInlineStackExample-gap='5'+gap='4'",
                        "Add back dividers usingDividerwhere needed",
                        "As a last resort, you can add space withBoxor remove space withBleed."
                    ]
                },
                {
                    "type": "p",
                    "text": "The new design language introduces a shadow bevel in numerous components.\nThe following component's children cannot be above the bevel'sz-indexelevation: Custom elements that were styled to look like the previous Polaris design language will need to be updated.\nTake the opportunity to put custom styles and components on mainline Polaris using ourcomponentsandtokens. The<html>element no longer receives the.Polaris-Summer-Editions-2023class.\nIf your styles rely on this class as part of a CSS selector, you can safely remove it."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/whats-new",
            "title": "What’s new — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This version introduces Shopify's new admin design language, refined tokens, aligned component APIs, and an updated Figma UI kit. The process of evolving a large scale design system. Learn about what changes are coming to Polaris typography. Learn about what changes were introduced to color in Polaris v11. Start using the new Polaris layout components. Crafting a more robust and cohesive token system in Polaris."
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/whats-new/version-10-typography",
            "title": "Version 10 Typography — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This is an Alpha release of the new type system. That means we’re making the new Text component and Figma text styles available but there could still be significant developments made. Our goal is to share the work so that you can:understand what’s changing,start using the typography updates, andprovide feedback to help us improve. 🚧 Please note: Since significant changes could still be made, please work with your team and the Polaris team to determine what's best for your situation. Want more details? Let’s dive in! As more merchants use the Shopify admin to run their businesses, we need to evolve it to feel less like a website and more like a power tool. To do this, we need to establish a strong foundation at the center of our design system and typography plays an important role. Earlier this year, we invested a lot of time inbuilding up our design tokensas a first step in strengthening the foundation and increasing Polaris token coverage. After that release, we saw that there was still only ~8% coverage of typography in custom components inshopify/web. We discovered that teams were creating new components or hard coding css values for type to work around the system. Here are key reasons for this divergence:"
                },
                {
                    "type": "list",
                    "items": [
                        "A lack of flexibility in our 6 typography components (DisplayText, Heading, Subheading, Caption, TextStyle, and VisuallyHidden)",
                        "Little guidance on how to design with typography",
                        "A lack of range in font weights and sizes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Simplifying our type components and improving our foundation will add the flexibility that will help product teams quickly make significant changes across Shopify’s admin. Polaris typography is getting a refresh. Currently, there are4 Display,1 Heading,1 Subheading,1 Button,1 Body, and1 Captionvariants. The updates will simplify type into two categories:HeadingandBody. Each has a default set of variants along with a set of options to allow for flexibility and a wide range of applications within the UI. We’ve updated the type scale and we’re moving from two scales to one for both desktop and mobile web. Some values have been removed and others added to cover a wide range of uses in the UI. All font sizes have a ratio of 1.2, known as the major third type scale. This means that each size is multiplied or divided by 1.2 from the previous size, starting with the base size, and rounded to a multiple of 4px. For example, if I take my base value of 14px and multiply it by 1.2, I get a value of 16px as the next increment in the scale. The smaller sizes in the scale have largely stayed the same with the majority of the changes made to the larger values. Changing valuesThe first change we made was updating the values of both size and line-height to be multiples of 4 with the exception of the 14px base size. This helps us be critical about the size values we use for other elements in the UI. This is important because it affects the rhythm of the page. Adding valuesWe added32pxto have an extra step at the larger end of the scale. We made this decision after looking at what font sizes are being used across the different pages in the Shopify admin. Pages that are geared towards learning or celebrating key moments often use the larger sizes. We also found that additional sizes were being added or adjusted to fill in the gaps. We considered those common values that we were noticing being added and adjusted the scale to work for those different pages. We looked at how type changes between the different screen sizes and found that it’s often a difference of 1px. While 1px can make a visual difference, after talking to designers and developers, we came to the conclusion that the added complexity of having two distinct scales and two sets of text styles just wasn’t worth it. They often didn’t even realize a change in size happened or expected the size to actually decrease instead of increase as it does now. However, for the larger sizes in the scale, we believe, in most cases, it makes sense for those sizes to adjust automatically so the sizes look appropriate for the screen size they’re being displayed on. This behavior hasn’t been added yet but, in the next release, we’ll update the larger styles to respond automatically at certain breakpoints with all other sizes staying the same unless specified otherwise. We’re moving from 6 components (DisplayText, Heading, Subheading, Caption, VisuallyHidden, TextStyle) to a singular Text component. To start, the team prototyped both a singular and multiple component approach. We then tested these prototypes with developers and the response was overwhelmingly in favor of the singular Text component. Overall, developers perceived the singular component as easier to use and understand. They could type in a property and see all the possible options right from their code editor. They didn’t have to import 6+ components and figure out the right one to use. Other benefits of the singular component:"
                },
                {
                    "type": "list",
                    "items": [
                        "One component to learn and read documentation on",
                        "Autocompleting props helps developers to learn the different typography options quickly",
                        "Less complexity in code which results in improved performance",
                        "Decouples layout from type",
                        "Easier to make sweeping changes to type",
                        "Provides us with a more flexible way to control type within components",
                        "Sets us up for future style override work to provide even more flexibility",
                        "Provides one way to control typography",
                        "There is low usage of a lot of the old typography components"
                    ]
                },
                {
                    "type": "p",
                    "text": "We have updated and streamlined token values, and updated token names to reflect a token naming convention that makes tokens easier to use and understand. We updated the size tokens to use increments of 100 for the variants. This allows us to set--p-font-size-100as the base and go lower (--p-font-size-75) or higher (--p-font-size-200) as needed numerically. The newTextcomponent and Figma text styles are available in alpha. You can start using the new component and styles now but be aware they’re still in development and there could be breaking changes. The existing type components will continue to be available for use until the newTextcomponent is finalized. As you start to use the new component, please share feedback with the Polaris team to help us continuously improve the type system. Next, we’ll be releasing the beta version of the component. The beta release will include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Updating Polaris components to use the newTextcomponent",
                        "Adding a deprecation warning to the old type components",
                        "Adding responsive styles",
                        "Updating components in the Figma UI Kit to use the new text styles",
                        "Updating design and API documentation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Don’t worry, we’ll also provide a timeline and guidance for migration."
                },
                {
                    "type": "list",
                    "items": [
                        "Text component",
                        "Figma text styles",
                        "Figma guides"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/whats-new/version-11-color",
            "title": "Version 11 Color — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Over the past year we have invested a lot of time and energy into creating a more robust and cohesive token system in Polaris. We have updated typography, spacing, shadows and breakpoints. All of this work has made it easier than ever to build with Polaris and has unlocked new levels of composability within the system itself. We knew we needed to bring this same thinking to our color tokens as well. These were the main drivers for this update."
                },
                {
                    "type": "list",
                    "items": [
                        "Create a defined color palette with multiple lightness values that is used to create new tokens. This will eliminate color sprawl and ensure a more consistent and cohesive use of color across the admin.",
                        "Update key colors to bring more contrast and vibrancy into the admin. Key components like cards often were invisible to merchants because they had so little contrast to the app background itself. This really made it hard for merchants to quickly understand the structure of a given screen.",
                        "Create a consistent and thoughtful naming convention that was much simpler and more intuitive for builders to use.",
                        "Build an entirely new architecture that allows us to evolve and roll out design changes a lot easier. The previous architecture was rigid and didn’t let us easily cascade changes across the entire system."
                    ]
                },
                {
                    "type": "p",
                    "text": "We started with an audit of the colors used in Polaris. Previously we didn’t have a defined color palette to create tokens from. This led to massive sprawl and inconsistency of hue, saturation, and vibrancy within our colors. We learned that there were 22 different gray values in Polaris, some of which were nearly identical to each other, providing no value while introducing added complexity. Every hue had a different range of tints and shades with no consistency or relationship between them. We took the previous colors and created a new color palette with 10 shades for each hue. Each shade should be meaningfully different from the ones next to it on the scale. This makes choices purposeful and clear and eliminates the sprawl and muddiness we had before. These colors power every token provided within the admin. This means that we can update a single color value within our palette and it will cascade down to every token referencing it, updating the entire admin from a single and simple change. There are now two types of color tokens in Polaris. The palette tokens which are private and used to create new aliases and the alias tokens which is what designers and developers use. These tokens are not available to use directly, rather, they are where we define the color palette itself. Each color has 10 total shades. These are the tokens used to actually build the admin. Each token references a palette token to define its value. For example,--p-color-text-subduedand--p-color-iconare all referencing the palette tokengray-800. This allows us two ways of updating colors in the admin. First, we can change the color itself by updatinggray-800. That change then cascades to every token that is referencing it system wide. Second, we can also change a specific token by changing which color it is referencing. So if we want to change the default color of icons, we can remap--p-color-iconfromgray-800togray-900. Each color token follows the same naming convention. The purpose and intent of a color token is built into the name itself. This makes it easy to understand how and when any given token should be used. --p-color-[element]-[role]-[variant]-[state] Wherever default none is chosen that piece of the naming formula is omitted.\nFor example, the default background color token, used for things like cards, is simply--p-color-bg. The new color tokens are now available via the same CSS custom properties as before. All components and necessary repositories have been migrated to the new tokens. Our Figma UI Kit has also been updated and all alias tokens are now available as color styles."
                },
                {
                    "type": "list",
                    "items": [
                        "Tokens",
                        "Figma color styles"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/whats-new/version-11-layout",
            "title": "Version 11 Layout — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "This is an alpha release of the new layout components. That means we’re making the new layout components and Figma components available, but there could still be significant developments. Our goal is to share the work so that you canunderstand what’s changing,start using the layout updates, andprovide feedback to help us improve. 🚧 Please note: Since significant changes could still be made, please work with your team and the Polaris team to determine what's best for your situation. Feel free to create anissuefor any feedback related to the layout components. Let’s dive in! Users building new layouts are restricted by Polaris and often create custom solutions. Polaris currently only provides two layout components which aren’t always the best solution for a specific problem. Even inside the Polaris components, our own layout components are only used 20% of the time. Creating new layout components and applying them to the existing Polaris components will allow us to create a flexible system. These layout components will enable users to create more intentional layouts with minimal tweaks and more flexibility. The original Stack and Card components have been removed and replaced withLegacyStackandLegacyCard. We plan to replace LegacyStack and LegacyCard with the newCardandVerticalStack (renamed to BlockStack in v12)components in the next major release. AlphaCard has been renamed toCardto mitigate confusion with component names being tied to component lifecycle stages. TheTextcomponent has been moved from beta to stable phase. Its API is stable and ready for full adoption. Text can support most, if not all, environments. We are working on aligning layout component APIs across the platform for consistency. Once those are finalized and implemented, we will mark the remaining layout components as beta. Additionally, we will be creating codemod transformations for users to migrate from LegacyCard to Card, LegacyStack to BlockStack, and TextContainer to BlockStack."
                },
                {
                    "type": "list",
                    "items": [
                        "Layout design",
                        "Layout components"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/whats-new/version-11-tokens",
            "title": "Version 11 Tokens — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "We are currently in the process of reworking our token values to give product teams more flexibility and leverage. Before Polaris v9, our tokens were difficult to reference and modify, which led many product teams to hard code their own values. After consolidating our tokens in Polaris v9 and v10, we're refining and evolving them in v11 to start aligning them with our new design vision. This includes removing tokens, renaming tokens/groups, and overhauling values. These changes will set our system up for implementing a more robust and cohesive token system in subsequent major versions. We completely overhauled our color token values, naming conventions, and architecture. Please read ourWhat’s New Version 11 Colorsection for more detailed information about these changes. Find more in-depth information on migrating color tokens from v10 to v11 in ourmigration guide. We reworked our shadow values so that they have a more consistent scale and higher contrast. We also updated the token group name to improve clarity. Find more in-depth information on migrating shadow tokens from v10 to v11 in ourmigration guide. We removed this token group since these tokens do not fit into our new design vision. Find more in-depth information on migrating legacy tokens from v10 to v11 in ourmigration guide. We added a “motion” prefix to all token names to ensure consistency with other token group naming conventions. Find more in-depth information on migrating motion tokens from v10 to v11 in ourmigration guide. We removed border values that no longer fit into our new design vision. We also updated the token group name to improve clarity. Find more in-depth information on migrating border tokens from v10 to v11 in ourmigration guide. We updated the token group name to ensure consistency between token groups. We changed the token name prefix from “z” to “z-index” to improve naming clarity. Find more in-depth information on migrating z-index tokens from v10 to v11 in ourmigration guide. We plan to continue refining and evolving our token system to better align with our design vision and provide more flexibility for product teams. This will include further consolidating and streamlining token groups, as well as introducing new tokens to support emerging design patterns and use cases."
                },
                {
                    "type": "list",
                    "items": [
                        "Tokens",
                        "What’s New Version 11 Color"
                    ]
                }
            ]
        },
        {
            "url": "https://polaris.shopify.com/whats-new/version-12",
            "title": "Version 12 — Shopify Polaris",
            "content": [
                {
                    "type": "p",
                    "text": "Follow ourmigration guideto upgrade Polaris from v11 to v12. Polaris version 12 introduces a new design language for Shopify's admin. This includes a style uplift for all of ourcomponents, updates to our token values, and anew web font, Inter. \"Pro\", in Shopify's context, refers to a design language that prioritizes efficiency and intuitive interactions, catering to the daily tasks merchants perform everyday."
                },
                {
                    "type": "list",
                    "items": [
                        "Assign meaning: Visual language is clear for merchants.",
                        "Increase density: Space is optimized while maintaining high usability.",
                        "Craft juicy interactions: Interfaces incorporate a sense of realness.",
                        "Make it predictable: Objects with similar appearance share a common behavior."
                    ]
                },
                {
                    "type": "p",
                    "text": "Read more about Polaris'Pro design languageto start designing in the new language. The version 12 updates aim to create an intentional set of tokens that clearly communicates intent so that builders have exactly what they need to apply the new design language on their surfaces. To do this, v12 introduces primitive and semantic token layers. For more information on how to migrate from v11 tokens, check out themigration guide. Primitive tokens are generic keys for the base values of a token scale. Primitive tokens are not context dependent and can be used anywhere in the admin. For example,--p-space-100is a primitive space token. Semantic tokens are references to base values that are used in specific contexts within the admin. These tokens should never be used for anything other than the concept they’re referencing. When no semantic token is a good fit, a primitive token should be used instead. For example,--p-space-table-cell-paddingis a semantic token."
                },
                {
                    "type": "list",
                    "items": [
                        "Color token list",
                        "Font token list",
                        "Shadow token list",
                        "Space token list"
                    ]
                },
                {
                    "type": "p",
                    "text": "The version 12 breaking component changes aim to simplify inconsistent and complicated component APIs. For a comprehensive list on all component changes and how to migrate from v11's component APIs, check out themigration guide. At a high level the API changes aimed to simplify, consolidate, and align by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Renaming directional components to useInlineandBlockwhich are defined byCSS logical properties",
                        "Renaming border radius properties to align withCSS border radius constituent properties",
                        "Renaming various color control props totoneand space control props togap. This creates more consistent APIs across components",
                        "Consolidating boolean props to a singlevariantprop on various components to make logical combinations more intentional"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Polariscomponents,styles, andiconslibraries have been updated to reflect the new design language, updated tokens, and component API changes. The kits have been updated to use Figma variables for color, space, and size. Color variables are accessible via fill, stroke, and text color menus in the right panel. Space variables are accessible via auto layout's gap and padding."
                },
                {
                    "type": "list",
                    "items": [
                        "v11 to v12 migration guide",
                        "Add the new web font",
                        "Pro design language",
                        "Uplifted components",
                        "Updated token lists",
                        "Figma component library",
                        "Figma styles library",
                        "Figma icons library"
                    ]
                }
            ]
        }
    ]
}