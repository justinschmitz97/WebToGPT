{
    "name": "https://nextjs.org",
    "url": "https://https://nextjs.org",
    "pages": [
        {
            "url": "https://nextjs.org/docs",
            "title": "Introduction | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Introduction"
                },
                {
                    "type": "p",
                    "text": "Welcome to the Next.js documentation!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Next.js?"
                },
                {
                    "type": "p",
                    "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations."
                },
                {
                    "type": "p",
                    "text": "Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration."
                },
                {
                    "type": "p",
                    "text": "Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Main Features"
                },
                {
                    "type": "p",
                    "text": "Some of the main Next.js features include:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How to Use These Docs"
                },
                {
                    "type": "p",
                    "text": "On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case."
                },
                {
                    "type": "p",
                    "text": "On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut (Ctrl+KorCmd+K)."
                },
                {
                    "type": "p",
                    "text": "To get started, checkout theInstallationguide."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "App Router vs Pages Router"
                },
                {
                    "type": "p",
                    "text": "Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications."
                },
                {
                    "type": "p",
                    "text": "At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between theApp Routerand thePages Routerfeatures. Since there are features that are unique to each directory, it's important to keep track of which tab is selected."
                },
                {
                    "type": "p",
                    "text": "The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-Requisite Knowledge"
                },
                {
                    "type": "p",
                    "text": "Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept."
                },
                {
                    "type": "p",
                    "text": "To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out ourReact Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js bybuilding a dashboard application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Accessibility"
                },
                {
                    "type": "p",
                    "text": "For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Join our Community"
                },
                {
                    "type": "p",
                    "text": "If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub Discussions,Discord,Twitter, andReddit."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Getting Started"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Building Your Application"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Building Your Application"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Architecture"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Community"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/advanced-features/custom-app",
            "title": "Routing: Custom App | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Custom App"
                },
                {
                    "type": "p",
                    "text": "Next.js uses theAppcomponent to initialize pages. You can override it and control the page initialization and:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a shared layout between page changes",
                        "Inject additional data into pages",
                        "Add global CSS"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage"
                },
                {
                    "type": "p",
                    "text": "To override the defaultApp, create the filepages/_appas shown below:"
                },
                {
                    "type": "code",
                    "code": "importtype{ AppProps }from'next/app'exportdefaultfunctionMyApp({ Component,pageProps }:AppProps) {return<Component{...pageProps} />}"
                },
                {
                    "type": "p",
                    "text": "TheComponentprop is the activepage, so whenever you navigate between routes,Componentwill change to the newpage. Therefore, any props you send toComponentwill be received by thepage."
                },
                {
                    "type": "p",
                    "text": "pagePropsis an object with the initial props that were preloaded for your page by one of ourdata fetching methods, otherwise it's an empty object."
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "If your app is running and you added a customApp, you'll need to restart the development server. Only required ifpages/_app.jsdidn't exist before.",
                        "Appdoes not support Next.jsData Fetching methodslikegetStaticPropsorgetServerSideProps."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "getInitialPropswithApp"
                },
                {
                    "type": "p",
                    "text": "UsinggetInitialPropsinAppwill disableAutomatic Static Optimizationfor pages withoutgetStaticProps."
                },
                {
                    "type": "p",
                    "text": "We do not recommend using this pattern.Instead, considerincrementally adoptingthe App Router, which allows you to more easily fetch data forpages and layouts."
                },
                {
                    "type": "code",
                    "code": "importApp,{ AppContext,AppInitialProps,AppProps }from'next/app'typeAppOwnProps={ example:string}exportdefaultfunctionMyApp({Component,pageProps,example,}:AppProps&AppOwnProps) {return(<><p>Data: {example}</p><Component{...pageProps} /></>)}MyApp.getInitialProps=async(context:AppContext):Promise<AppOwnProps&AppInitialProps>=>{constctx=awaitApp.getInitialProps(context)return{...ctx,example:'data'}}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/api-reference/next/image",
            "title": "Components: <Image> | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "<Image>"
                },
                {
                    "type": "list",
                    "items": [
                        "Image Component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: If you are using a version of Next.js prior to 13, you'll want to use thenext/legacy/imagedocumentation since the component was renamed."
                },
                {
                    "type": "p",
                    "text": "This API reference will help you understand how to usepropsandconfiguration optionsavailable for the Image Component. For features and usage, please see theImage Componentpage."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<Imagesrc=\"/profile.png\"width={500}height={500}alt=\"Picture of the author\"/>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "p",
                    "text": "Here's a summary of the props available for the Image Component:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Required Props"
                },
                {
                    "type": "p",
                    "text": "The Image Component requires the following properties:src,width,height, andalt."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<div><Imagesrc=\"/profile.png\"width={500}height={500}alt=\"Picture of the author\"/></div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "src"
                },
                {
                    "type": "p",
                    "text": "Must be one of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Astatically importedimage file",
                        "A path string. This can be either an absolute external URL, or an internal path depending on theloaderprop."
                    ]
                },
                {
                    "type": "p",
                    "text": "When using an external URL, you must add it toremotePatternsinnext.config.js."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "width"
                },
                {
                    "type": "p",
                    "text": "Thewidthproperty represents therenderedwidth in pixels, so it will affect how large the image appears."
                },
                {
                    "type": "p",
                    "text": "Required, except forstatically imported imagesor images with thefillproperty."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "height"
                },
                {
                    "type": "p",
                    "text": "Theheightproperty represents therenderedheight in pixels, so it will affect how large the image appears."
                },
                {
                    "type": "p",
                    "text": "Required, except forstatically imported imagesor images with thefillproperty."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "alt"
                },
                {
                    "type": "p",
                    "text": "Thealtproperty is used to describe the image for screen readers and search engines. It is also the fallback text if images have been disabled or an error occurs while loading the image."
                },
                {
                    "type": "p",
                    "text": "It should contain text that could replace the imagewithout changing the meaning of the page. It is not meant to supplement the image and should not repeat information that is already provided in the captions above or below the image."
                },
                {
                    "type": "p",
                    "text": "If the image ispurely decorativeornot intended for the user, thealtproperty should be an empty string (alt=\"\")."
                },
                {
                    "type": "p",
                    "text": "Learn more"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Optional Props"
                },
                {
                    "type": "p",
                    "text": "The<Image />component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in theAdvanced Propssection."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "loader"
                },
                {
                    "type": "p",
                    "text": "A custom function used to resolve image URLs."
                },
                {
                    "type": "p",
                    "text": "Aloaderis a function returning a URL string for the image, given the following parameters:"
                },
                {
                    "type": "list",
                    "items": [
                        "src",
                        "width",
                        "quality"
                    ]
                },
                {
                    "type": "p",
                    "text": "Here is an example of using a custom loader:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'constimageLoader=({ src,width,quality })=>{return`https://example.com/${src}?w=${width}&q=${quality||75}`}exportdefaultfunctionPage() {return(<Imageloader={imageLoader}src=\"me.png\"alt=\"Picture of the author\"width={500}height={500}/>)}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use theloaderFileconfiguration innext.config.jsto configure every instance ofnext/imagein your application, without passing a prop."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "fill"
                },
                {
                    "type": "code",
                    "code": "fill={true}// {true} | {false}"
                },
                {
                    "type": "p",
                    "text": "A boolean that causes the image to fill the parent element, which is useful when thewidthandheightare unknown."
                },
                {
                    "type": "p",
                    "text": "The parent elementmustassignposition: \"relative\",position: \"fixed\", orposition: \"absolute\"style."
                },
                {
                    "type": "p",
                    "text": "By default, the img element will automatically be assigned theposition: \"absolute\"style."
                },
                {
                    "type": "p",
                    "text": "If no styles are applied to the image, the image will stretch to fit the container. You may prefer to setobject-fit: \"contain\"for an image which is letterboxed to fit the container and preserve aspect ratio."
                },
                {
                    "type": "p",
                    "text": "Alternatively,object-fit: \"cover\"will cause the image to fill the entire container and be cropped to preserve aspect ratio. For this to look correct, theoverflow: \"hidden\"style should be assigned to the parent element."
                },
                {
                    "type": "p",
                    "text": "For more information, see also:"
                },
                {
                    "type": "list",
                    "items": [
                        "position",
                        "object-fit",
                        "object-position"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "sizes"
                },
                {
                    "type": "p",
                    "text": "A string, similar to a media query, that provides information about how wide the image will be at different breakpoints. The value ofsizeswill greatly affect performance for images usingfillor which arestyled to have a responsive size."
                },
                {
                    "type": "p",
                    "text": "Thesizesproperty serves two important purposes related to image performance:"
                },
                {
                    "type": "list",
                    "items": [
                        "First, the value ofsizesis used by the browser to determine which size of the image to download, fromnext/image's automatically generatedsrcset. When the browser chooses, it does not yet know the size of the image on the page, so it selects an image that is the same size or larger than the viewport. Thesizesproperty allows you to tell the browser that the image will actually be smaller than full screen. If you don't specify asizesvalue in an image with thefillproperty, a default value of100vw(full screen width) is used.",
                        "Second, thesizesproperty changes the behavior of the automatically generatedsrcsetvalue. If nosizesvalue is present, a smallsrcsetis generated, suitable for a fixed-size image (1x/2x/etc). Ifsizesis defined, a largesrcsetis generated, suitable for a responsive image (640w/750w/etc). If thesizesproperty includes sizes such as50vw, which represent a percentage of the viewport width, then thesrcsetis trimmed to not include any values which are too small to ever be necessary."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, if you know your styling will cause an image to be full-width on mobile devices, in a 2-column layout on tablets, and a 3-column layout on desktop displays, you should include a sizes property such as the following:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<divclassName=\"grid-element\"><Imagefillsrc=\"/example.png\"sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"/></div>)}"
                },
                {
                    "type": "p",
                    "text": "This examplesizescould have a dramatic effect on performance metrics. Without the33vwsizes, the image selected from the server would be 3 times as wide as it needs to be. Because file size is proportional to the square of the width, withoutsizesthe user would download an image that's 9 times larger than necessary."
                },
                {
                    "type": "p",
                    "text": "Learn more aboutsrcsetandsizes:"
                },
                {
                    "type": "list",
                    "items": [
                        "web.dev",
                        "mdn"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "quality"
                },
                {
                    "type": "code",
                    "code": "quality={75}// {number 1-100}"
                },
                {
                    "type": "p",
                    "text": "The quality of the optimized image, an integer between1and100, where100is the best quality and therefore largest file size. Defaults to75."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "priority"
                },
                {
                    "type": "code",
                    "code": "priority={false}// {false} | {true}"
                },
                {
                    "type": "p",
                    "text": "When true, the image will be considered high priority andpreload. Lazy loading is automatically disabled for images usingpriority."
                },
                {
                    "type": "p",
                    "text": "You should use thepriorityproperty on any image detected as theLargest Contentful Paint (LCP)element. It may be appropriate to have multiple priority images, as different images may be the LCP element for different viewport sizes."
                },
                {
                    "type": "p",
                    "text": "Should only be used when the image is visible above the fold. Defaults tofalse."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "placeholder"
                },
                {
                    "type": "code",
                    "code": "placeholder='empty'// \"empty\" | \"blur\" | \"data:image/...\""
                },
                {
                    "type": "p",
                    "text": "A placeholder to use while the image is loading. Possible values areblur,empty, ordata:image/.... Defaults toempty."
                },
                {
                    "type": "p",
                    "text": "Whenblur, theblurDataURLproperty will be used as the placeholder. Ifsrcis an object from astatic importand the imported image is.jpg,.png,.webp, or.avif, thenblurDataURLwill be automatically populated, except when the image is detected to be animated."
                },
                {
                    "type": "p",
                    "text": "For dynamic images, you must provide theblurDataURLproperty. Solutions such asPlaiceholdercan help withbase64generation."
                },
                {
                    "type": "p",
                    "text": "Whendata:image/..., theData URLwill be used as the placeholder while the image is loading."
                },
                {
                    "type": "p",
                    "text": "Whenempty, there will be no placeholder while the image is loading, only empty space."
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo theblurplaceholder",
                        "Demo the shimmer effect with data URLplaceholderprop",
                        "Demo the color effect withblurDataURLprop"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Advanced Props"
                },
                {
                    "type": "p",
                    "text": "In some cases, you may need more advanced usage. The<Image />component optionally accepts the following advanced properties."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "style"
                },
                {
                    "type": "p",
                    "text": "Allows passing CSS styles to the underlying image element."
                },
                {
                    "type": "code",
                    "code": "constimageStyle={borderRadius:'50%',border:'1px solid #fff',}exportdefaultfunctionProfileImage() {return<Imagesrc=\"...\"style={imageStyle} />}"
                },
                {
                    "type": "p",
                    "text": "Remember that the required width and height props can interact with your styling. If you use styling to modify an image's width, you should also style its height toautoto preserve its intrinsic aspect ratio, or your image will be distorted."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onLoadingComplete"
                },
                {
                    "type": "code",
                    "code": "<ImageonLoadingComplete={(img)=>console.log(img.naturalWidth)} />"
                },
                {
                    "type": "p",
                    "text": "Warning: Deprecated since Next.js 14 in favor ofonLoad."
                },
                {
                    "type": "p",
                    "text": "A callback function that is invoked once the image is completely loaded and theplaceholderhas been removed."
                },
                {
                    "type": "p",
                    "text": "The callback function will be called with one argument, a reference to the underlying<img>element."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onLoad"
                },
                {
                    "type": "code",
                    "code": "<ImageonLoad={(e)=>console.log(e.target.naturalWidth)} />"
                },
                {
                    "type": "p",
                    "text": "A callback function that is invoked once the image is completely loaded and theplaceholderhas been removed."
                },
                {
                    "type": "p",
                    "text": "The callback function will be called with one argument, the Event which has atargetthat references the underlying<img>element."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onError"
                },
                {
                    "type": "code",
                    "code": "<ImageonError={(e)=>console.error(e.target.id)} />"
                },
                {
                    "type": "p",
                    "text": "A callback function that is invoked if the image fails to load."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "loading"
                },
                {
                    "type": "p",
                    "text": "Recommendation: This property is only meant for advanced use cases. Switching an image to load witheagerwill normallyhurt performance. We recommend using thepriorityproperty instead, which will eagerly preload the image."
                },
                {
                    "type": "code",
                    "code": "loading='lazy'// {lazy} | {eager}"
                },
                {
                    "type": "p",
                    "text": "The loading behavior of the image. Defaults tolazy."
                },
                {
                    "type": "p",
                    "text": "Whenlazy, defer loading the image until it reaches a calculated distance from\nthe viewport."
                },
                {
                    "type": "p",
                    "text": "Wheneager, load the image immediately."
                },
                {
                    "type": "p",
                    "text": "Learn more about theloadingattribute."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "blurDataURL"
                },
                {
                    "type": "p",
                    "text": "AData URLto\nbe used as a placeholder image before thesrcimage successfully loads. Only takes effect when combined\nwithplaceholder=\"blur\"."
                },
                {
                    "type": "p",
                    "text": "Must be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or\nless) is recommended. Including larger images as placeholders may harm your application performance."
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the defaultblurDataURLprop",
                        "Demo the color effect withblurDataURLprop"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can alsogenerate a solid color Data URLto match the image."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "unoptimized"
                },
                {
                    "type": "code",
                    "code": "unoptimized={false}// {false} | {true}"
                },
                {
                    "type": "p",
                    "text": "When true, the source image will be served as-is instead of changing quality,\nsize, or format. Defaults tofalse."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'constUnoptimizedImage=(props)=>{return<Image{...props}unoptimized/>}"
                },
                {
                    "type": "p",
                    "text": "Since Next.js 12.3.0, this prop can be assigned to all images by updatingnext.config.jswith the following configuration:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{unoptimized:true,},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "overrideSrc"
                },
                {
                    "type": "p",
                    "text": "When providing thesrcprop to the<Image>component, both thesrcsetandsrcattributes are generated automatically for the resulting<img>."
                },
                {
                    "type": "code",
                    "code": "<Imagesrc=\"/me.jpg\"/>"
                },
                {
                    "type": "code",
                    "code": "<imgsrcset=\"/_next/image?url=%2Fme.jpg&w=640&q=75 1x,/_next/image?url=%2Fme.jpg&w=828&q=75 2x\"src=\"/_next/image?url=%2Fme.jpg&w=828&q=75\"/>"
                },
                {
                    "type": "p",
                    "text": "In some cases, it is not desirable to have thesrcattribute generated and you may wish to override it using theoverrideSrcprop."
                },
                {
                    "type": "p",
                    "text": "For example, when upgrading an existing website from<img>to<Image>, you may wish to maintain the samesrcattribute for SEO purposes such as image ranking or avoiding recrawl."
                },
                {
                    "type": "code",
                    "code": "<Imagesrc=\"/me.jpg\"overrideSrc=\"/override.jpg\"/>"
                },
                {
                    "type": "code",
                    "code": "<imgsrcset=\"/_next/image?url=%2Fme.jpg&w=640&q=75 1x,/_next/image?url=%2Fme.jpg&w=828&q=75 2x\"src=\"/override.jpg\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "decoding"
                },
                {
                    "type": "p",
                    "text": "A hint to the browser indicating if it should wait for the image to be decoded before presenting other content updates or not. Defaults toasync."
                },
                {
                    "type": "p",
                    "text": "Possible values are the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "async- Asynchronously decode the image and allow other content to be rendered before it completes.",
                        "sync- Synchronously decode the image for atomic presentation with other content.",
                        "auto- No preference for the decoding mode; the browser decides what's best."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about thedecodingattribute."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Other Props"
                },
                {
                    "type": "p",
                    "text": "Other properties on the<Image />component will be passed to the underlyingimgelement with the exception of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "srcSet. UseDevice Sizesinstead."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configuration Options"
                },
                {
                    "type": "p",
                    "text": "In addition to props, you can configure the Image Component innext.config.js. The following options are available:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "localPatterns"
                },
                {
                    "type": "p",
                    "text": "You can optionally configurelocalPatternsin yournext.config.jsfile in order to allow specific paths to be optimized and block all others paths."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{localPatterns:[{pathname:'/assets/images/**',search:'',},],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start with/assets/images/and must not have a query string. Attempting to optimize any other path will respond with 400 Bad Request."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "remotePatterns"
                },
                {
                    "type": "p",
                    "text": "To protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with theremotePatternsproperty in yournext.config.jsfile, as shown below:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'example.com',port:'',pathname:'/account123/**',search:'',},],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start withhttps://example.com/account123/and must not have a query string. Any other protocol, hostname, port, or unmatched path will respond with 400 Bad Request."
                },
                {
                    "type": "p",
                    "text": "Below is an example of theremotePatternsproperty in thenext.config.jsfile using a wildcard pattern in thehostname:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'**.example.com',port:'',search:'',},],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start withhttps://img1.example.comorhttps://me.avatar.example.comor any number of subdomains. It cannot have a port or query string. Any other protocol or unmatched hostname will respond with 400 Bad Request."
                },
                {
                    "type": "p",
                    "text": "Wildcard patterns can be used for bothpathnameandhostnameand have the following syntax:"
                },
                {
                    "type": "list",
                    "items": [
                        "*match a single path segment or subdomain",
                        "**match any number of path segments at the end or subdomains at the beginning"
                    ]
                },
                {
                    "type": "p",
                    "text": "The**syntax does not work in the middle of the pattern."
                },
                {
                    "type": "p",
                    "text": "Good to know: When omittingprotocol,port,pathname, orsearchthen the wildcard**is implied. This is not recommended because it may allow malicious actors to optimize urls you did not intend."
                },
                {
                    "type": "p",
                    "text": "Below is an example of theremotePatternsproperty in thenext.config.jsfile usingsearch:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'assets.example.com',search:'?v=1727111025337',},],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start withhttps://assets.example.comand must have the exact query string?v=1727111025337. Any other protocol or query string will respond with 400 Bad Request."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "domains"
                },
                {
                    "type": "p",
                    "text": "Warning: Deprecated since Next.js 14 in favor of strictremotePatternsin order to protect your application from malicious users. Only usedomainsif you own all the content served from the domain."
                },
                {
                    "type": "p",
                    "text": "Similar toremotePatterns, thedomainsconfiguration can be used to provide a list of allowed hostnames for external images."
                },
                {
                    "type": "p",
                    "text": "However, thedomainsconfiguration does not support wildcard pattern matching and it cannot restrict protocol, port, or pathname."
                },
                {
                    "type": "p",
                    "text": "Below is an example of thedomainsproperty in thenext.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{domains:['assets.acme.com'],},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "loaderFile"
                },
                {
                    "type": "p",
                    "text": "If you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure theloaderFilein yournext.config.jslike the following:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{loader:'custom',loaderFile:'./my/image/loader.js',},}"
                },
                {
                    "type": "p",
                    "text": "This must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionmyImageLoader({ src,width,quality }) {return`https://example.com/${src}?w=${width}&q=${quality||75}`}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use theloaderpropto configure each instance ofnext/image."
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Image Loader Configuration"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Advanced"
                },
                {
                    "type": "p",
                    "text": "The following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "deviceSizes"
                },
                {
                    "type": "p",
                    "text": "If you know the expected device widths of your users, you can specify a list of device width breakpoints using thedeviceSizesproperty innext.config.js. These widths are used when thenext/imagecomponent usessizesprop to ensure the correct image is served for user's device."
                },
                {
                    "type": "p",
                    "text": "If no configuration is provided, the default below is used."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{deviceSizes:[640,750,828,1080,1200,1920,2048,3840],},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "imageSizes"
                },
                {
                    "type": "p",
                    "text": "You can specify a list of image widths using theimages.imageSizesproperty in yournext.config.jsfile. These widths are concatenated with the array ofdevice sizesto form the full array of sizes used to generate imagesrcsets."
                },
                {
                    "type": "p",
                    "text": "The reason there are two separate lists is that imageSizes is only used for images which provide asizesprop, which indicates that the image is less than the full width of the screen.Therefore, the sizes in imageSizes should all be smaller than the smallest size in deviceSizes."
                },
                {
                    "type": "p",
                    "text": "If no configuration is provided, the default below is used."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{imageSizes:[16,32,48,64,96,128,256,384],},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "formats"
                },
                {
                    "type": "p",
                    "text": "The defaultImage Optimization APIwill automatically detect the browser's supported image formats via the request'sAcceptheader."
                },
                {
                    "type": "p",
                    "text": "If theAccepthead matches more than one of the configured formats, the first match in the array is used. Therefore, the array order matters. If there is no match (or the source image isanimated), the Image Optimization API will fallback to the original image's format."
                },
                {
                    "type": "p",
                    "text": "If no configuration is provided, the default below is used."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{formats:['image/webp'],},}"
                },
                {
                    "type": "p",
                    "text": "You can enable AVIF support with the following configuration."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{formats:['image/avif','image/webp'],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "AVIF generally takes 20% longer to encode but it compresses 20% smaller compared to WebP. This means that the first time an image is requested, it will typically be slower and then subsequent requests that are cached will be faster.",
                        "If you self-host with a Proxy/CDN in front of Next.js, you must configure the Proxy to forward theAcceptheader."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Caching Behavior"
                },
                {
                    "type": "p",
                    "text": "The following describes the caching algorithm for the defaultloader. For all other loaders, please refer to your cloud provider's documentation."
                },
                {
                    "type": "p",
                    "text": "Images are optimized dynamically upon request and stored in the<distDir>/cache/imagesdirectory. The optimized image file will be served for subsequent requests until the expiration is reached. When a request is made that matches a cached but expired file, the expired image is served stale immediately. Then the image is optimized again in the background (also called revalidation) and saved to the cache with the new expiration date."
                },
                {
                    "type": "p",
                    "text": "The cache status of an image can be determined by reading the value of thex-nextjs-cacheresponse header. The possible values are the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "MISS- the path is not in the cache (occurs at most once, on the first visit)",
                        "STALE- the path is in the cache but exceeded the revalidate time so it will be updated in the background",
                        "HIT- the path is in the cache and has not exceeded the revalidate time"
                    ]
                },
                {
                    "type": "p",
                    "text": "The expiration (or rather Max Age) is defined by either theminimumCacheTTLconfiguration or the upstream imageCache-Controlheader, whichever is larger. Specifically, themax-agevalue of theCache-Controlheader is used. If boths-maxageandmax-ageare found, thens-maxageis preferred. Themax-ageis also passed-through to any downstream clients including CDNs and browsers."
                },
                {
                    "type": "list",
                    "items": [
                        "You can configureminimumCacheTTLto increase the cache duration when the upstream image does not includeCache-Controlheader or the value is very low.",
                        "You can configuredeviceSizesandimageSizesto reduce the total number of possible generated images.",
                        "You can configureformatsto disable multiple formats in favor of a single image format."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "minimumCacheTTL"
                },
                {
                    "type": "p",
                    "text": "You can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use aStatic Image Importwhich will automatically hash the file contents and cache the image forever with aCache-Controlheader ofimmutable."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{minimumCacheTTL:60,},}"
                },
                {
                    "type": "p",
                    "text": "The expiration (or rather Max Age) of the optimized image is defined by either theminimumCacheTTLor the upstream imageCache-Controlheader, whichever is larger."
                },
                {
                    "type": "p",
                    "text": "If you need to change the caching behavior per image, you can configureheadersto set theCache-Controlheader on the upstream image (e.g./some-asset.jpg, not/_next/imageitself)."
                },
                {
                    "type": "p",
                    "text": "There is no mechanism to invalidate the cache at this time, so its best to keepminimumCacheTTLlow. Otherwise you may need to manually change thesrcprop or delete<distDir>/cache/images."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "disableStaticImages"
                },
                {
                    "type": "p",
                    "text": "The default behavior allows you to import static files such asimport icon from './icon.png'and then pass that to thesrcproperty."
                },
                {
                    "type": "p",
                    "text": "In some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently."
                },
                {
                    "type": "p",
                    "text": "You can disable static image imports inside yournext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{disableStaticImages:true,},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "dangerouslyAllowSVG"
                },
                {
                    "type": "p",
                    "text": "The defaultloaderdoes not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without properContent Security Policy (CSP) headers."
                },
                {
                    "type": "p",
                    "text": "Therefore, we recommended using theunoptimizedprop when thesrcprop is known to be SVG. This happens automatically whensrcends with\".svg\"."
                },
                {
                    "type": "p",
                    "text": "However, if you need to serve SVG images with the default Image Optimization API, you can setdangerouslyAllowSVGinside yournext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{dangerouslyAllowSVG:true,contentDispositionType:'attachment',contentSecurityPolicy:\"default-src 'self'; script-src 'none'; sandbox;\",},}"
                },
                {
                    "type": "p",
                    "text": "In addition, it is strongly recommended to also setcontentDispositionTypeto force the browser to download the image, as well ascontentSecurityPolicyto prevent scripts embedded in the image from executing."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Animated Images"
                },
                {
                    "type": "p",
                    "text": "The defaultloaderwill automatically bypass Image Optimization for animated images and serve the image as-is."
                },
                {
                    "type": "p",
                    "text": "Auto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use theunoptimizedprop."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Responsive Images"
                },
                {
                    "type": "p",
                    "text": "The default generatedsrcsetcontains1xand2ximages in order to support different device pixel ratios. However, you may wish to render a responsive image that stretches with the viewport. In that case, you'll need to setsizesas well asstyle(orclassName)."
                },
                {
                    "type": "p",
                    "text": "You can render a responsive image using one of the following methods below."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive image using a static import"
                },
                {
                    "type": "p",
                    "text": "If the source image is not dynamic, you can statically import to create a responsive image:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'importmefrom'../photos/me.jpg'exportdefaultfunctionAuthor() {return(<Imagesrc={me}alt=\"Picture of the author\"sizes=\"100vw\"style={{width:'100%',height:'auto',}}/>)}"
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the image responsive to viewport"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive image with aspect ratio"
                },
                {
                    "type": "p",
                    "text": "If the source image is a dynamic or a remote url, you will also need to providewidthandheightto set the correct aspect ratio of the responsive image:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage({ photoUrl }) {return(<Imagesrc={photoUrl}alt=\"Picture of the author\"sizes=\"100vw\"style={{width:'100%',height:'auto',}}width={500}height={300}/>)}"
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the image responsive to viewport"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive image withfill"
                },
                {
                    "type": "p",
                    "text": "If you don't know the aspect ratio, you will need to set thefillprop and setposition: relativeon the parent. Optionally, you can setobject-fitstyle depending on the desired stretch vs crop behavior:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage({ photoUrl }) {return(<divstyle={{ position:'relative',width:'300px',height:'500px'}}><Imagesrc={photoUrl}alt=\"Picture of the author\"sizes=\"300px\"fillstyle={{objectFit:'contain',}}/></div>)}"
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo thefillprop"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Theme Detection CSS"
                },
                {
                    "type": "p",
                    "text": "If you want to display a different image for light and dark mode, you can create a new component that wraps two<Image>components and reveals the correct one based on a CSS media query."
                },
                {
                    "type": "code",
                    "code": ".imgDark{display:none;}@media(prefers-color-scheme:dark) {.imgLight{display:none;}.imgDark{display:unset;}}"
                },
                {
                    "type": "code",
                    "code": "importstylesfrom'./theme-image.module.css'importImage,{ ImageProps }from'next/image'typeProps=Omit<ImageProps,'src'|'priority'|'loading'>&{srcLight:stringsrcDark:string}constThemeImage=(props:Props)=>{const{srcLight,srcDark,...rest}=propsreturn(<><Image{...rest}src={srcLight}className={styles.imgLight} /><Image{...rest}src={srcDark}className={styles.imgDark} /></>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The default behavior ofloading=\"lazy\"ensures that only the correct image is loaded. You cannot usepriorityorloading=\"eager\"because that would cause both images to load. Instead, you can usefetchPriority=\"high\"."
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo light/dark mode theme detection"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "getImageProps"
                },
                {
                    "type": "p",
                    "text": "For more advanced use cases, you can callgetImageProps()to get the props that would be passed to the underlying<img>element, and instead pass to them to another component, style, canvas, etc."
                },
                {
                    "type": "p",
                    "text": "This also avoid calling ReactuseState()so it can lead to better performance, but it cannot be used with theplaceholderprop because the placeholder will never be removed."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Theme Detection Picture"
                },
                {
                    "type": "p",
                    "text": "If you want to display a different image for light and dark mode, you can use the<picture>element to display a different image based on the user'spreferred color scheme."
                },
                {
                    "type": "code",
                    "code": "import{ getImageProps }from'next/image'exportdefaultfunctionPage() {constcommon={ alt:'Theme Example',width:800,height:400}const{props: { srcSet:dark},}=getImageProps({...common,src:'/dark.png'})const{props: { srcSet:light,...rest},}=getImageProps({...common,src:'/light.png'})return(<picture><sourcemedia=\"(prefers-color-scheme: dark)\"srcSet={dark} /><sourcemedia=\"(prefers-color-scheme: light)\"srcSet={light} /><img{...rest} /></picture>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Art Direction"
                },
                {
                    "type": "p",
                    "text": "If you want to display a different image for mobile and desktop, sometimes calledArt Direction, you can provide differentsrc,width,height, andqualityprops togetImageProps()."
                },
                {
                    "type": "code",
                    "code": "import{ getImageProps }from'next/image'exportdefaultfunctionHome() {constcommon={ alt:'Art Direction Example',sizes:'100vw'}const{props: { srcSet:desktop},}=getImageProps({...common,width:1440,height:875,quality:80,src:'/desktop.jpg',})const{props: { srcSet:mobile,...rest},}=getImageProps({...common,width:750,height:1334,quality:70,src:'/mobile.jpg',})return(<picture><sourcemedia=\"(min-width: 1000px)\"srcSet={desktop} /><sourcemedia=\"(min-width: 500px)\"srcSet={mobile} /><img{...rest}style={{ width:'100%',height:'auto'}} /></picture>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Background CSS"
                },
                {
                    "type": "p",
                    "text": "You can even convert thesrcSetstring to theimage-set()CSS function to optimize a background image."
                },
                {
                    "type": "code",
                    "code": "import{ getImageProps }from'next/image'functiongetBackgroundImage(srcSet='') {constimageSet=srcSet.split(', ').map((str)=>{const[url,dpi]=str.split(' ')return`url(\"${url}\")${dpi}`}).join(', ')return`image-set(${imageSet})`}exportdefaultfunctionHome() {const{props: {srcSet},}=getImageProps({ alt:'',width:128,height:128,src:'/img.png'})constbackgroundImage=getBackgroundImage(srcSet)conststyle={ height:'100vh',width:'100vw',backgroundImage }return(<mainstyle={style}><h1>Hello World</h1></main>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Known Browser Bugs"
                },
                {
                    "type": "p",
                    "text": "Thisnext/imagecomponent uses browser nativelazy loading, which may fallback to eager loading for older browsers before Safari 15.4. When using the blur-up placeholder, older browsers before Safari 12 will fallback to empty placeholder. When using styles withwidth/heightofauto, it is possible to causeLayout Shifton older browsers before Safari 15 that don'tpreserve the aspect ratio. For more details, seethis MDN video."
                },
                {
                    "type": "list",
                    "items": [
                        "Safari 15 - 16.3display a gray border while loading. Safari 16.4fixed this issue. Possible solutions:Use CSS@supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }Usepriorityif the image is above the fold",
                        "Use CSS@supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }",
                        "Usepriorityif the image is above the fold",
                        "Firefox 67+displays a white background while loading. Possible solutions:EnableAVIFformatsUseplaceholder",
                        "EnableAVIFformats",
                        "Useplaceholder"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use CSS@supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }",
                        "Usepriorityif the image is above the fold"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "EnableAVIFformats",
                        "Useplaceholder"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/api-routes/introduction",
            "title": "Routing: API Routes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "API Routes"
                },
                {
                    "type": "list",
                    "items": [
                        "Basic API Routes",
                        "API Routes Request Helpers",
                        "API Routes with GraphQL",
                        "API Routes with REST",
                        "API Routes with CORS"
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: If you are using the App Router, you can useServer ComponentsorRoute Handlersinstead of API Routes."
                },
                {
                    "type": "p",
                    "text": "API routes provide a solution to build apublic APIwith Next.js."
                },
                {
                    "type": "p",
                    "text": "Any file inside the folderpages/apiis mapped to/api/*and will be treated as an API endpoint instead of apage. They are server-side only bundles and won't increase your client-side bundle size."
                },
                {
                    "type": "p",
                    "text": "For example, the following API route returns a JSON response with a status code of200:"
                },
                {
                    "type": "code",
                    "code": "importtype{ NextApiRequest,NextApiResponse }from'next'typeResponseData={message:string}exportdefaultfunctionhandler(req:NextApiRequest,res:NextApiResponse<ResponseData>) {res.status(200).json({ message:'Hello from Next.js!'})}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "API Routesdo not specify CORS headers, meaning they aresame-origin onlyby default. You can customize such behavior by wrapping the request handler with theCORS request helpers."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "API Routes can't be used withstatic exports. However,Route Handlersin the App Router can.API Routes will be affected bypageExtensionsconfigurationinnext.config.js.",
                        "API Routes will be affected bypageExtensionsconfigurationinnext.config.js."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "API Routes will be affected bypageExtensionsconfigurationinnext.config.js."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionhandler(req:NextApiRequest,res:NextApiResponse) {// ...}"
                },
                {
                    "type": "list",
                    "items": [
                        "req: An instance ofhttp.IncomingMessage",
                        "res: An instance ofhttp.ServerResponse"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "HTTP Methods"
                },
                {
                    "type": "p",
                    "text": "To handle different HTTP methods in an API route, you can usereq.methodin your request handler, like so:"
                },
                {
                    "type": "code",
                    "code": "importtype{ NextApiRequest,NextApiResponse }from'next'exportdefaultfunctionhandler(req:NextApiRequest,res:NextApiResponse) {if(req.method==='POST') {// Process a POST request}else{// Handle any other HTTP method}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Request Helpers"
                },
                {
                    "type": "p",
                    "text": "API Routes provide built-in request helpers which parse the incoming request (req):"
                },
                {
                    "type": "list",
                    "items": [
                        "req.cookies- An object containing the cookies sent by the request. Defaults to{}",
                        "req.query- An object containing thequery string. Defaults to{}",
                        "req.body- An object containing the body parsed bycontent-type, ornullif no body was sent"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom config"
                },
                {
                    "type": "p",
                    "text": "Every API Route can export aconfigobject to change the default configuration, which is the following:"
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={api:{bodyParser:{sizeLimit:'1mb',},},// Specifies the maximum allowed duration for this function to execute (in seconds)maxDuration:5,}"
                },
                {
                    "type": "p",
                    "text": "bodyParseris automatically enabled. If you want to consume the body as aStreamor withraw-body, you can set this tofalse."
                },
                {
                    "type": "p",
                    "text": "One use case for disabling the automaticbodyParsingis to allow you to verify the raw body of awebhookrequest, for examplefrom GitHub."
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={api:{bodyParser:false,},}"
                },
                {
                    "type": "p",
                    "text": "bodyParser.sizeLimitis the maximum size allowed for the parsed body, in any format supported bybytes, like so:"
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={api:{bodyParser:{sizeLimit:'500kb',},},}"
                },
                {
                    "type": "p",
                    "text": "externalResolveris an explicit flag that tells the server that this route is being handled by an external resolver likeexpressorconnect. Enabling this option disables warnings for unresolved requests."
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={api:{externalResolver:true,},}"
                },
                {
                    "type": "p",
                    "text": "responseLimitis automatically enabled, warning when an API Routes' response body is over 4MB."
                },
                {
                    "type": "p",
                    "text": "If you are not using Next.js in a serverless environment, and understand the performance implications of not using a CDN or dedicated media host, you can set this limit tofalse."
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={api:{responseLimit:false,},}"
                },
                {
                    "type": "p",
                    "text": "responseLimitcan also take the number of bytes or any string format supported bybytes, for example1000,'500kb'or'3mb'.\nThis value will be the maximum response size before a warning is displayed. Default is 4MB. (see above)"
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={api:{responseLimit:'8mb',},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Response Helpers"
                },
                {
                    "type": "p",
                    "text": "TheServer Response object, (often abbreviated asres) includes a set of Express.js-like helper methods to improve the developer experience and increase the speed of creating new API endpoints."
                },
                {
                    "type": "p",
                    "text": "The included helpers are:"
                },
                {
                    "type": "list",
                    "items": [
                        "res.status(code)- A function to set the status code.codemust be a validHTTP status code",
                        "res.json(body)- Sends a JSON response.bodymust be aserializable object",
                        "res.send(body)- Sends the HTTP response.bodycan be astring, anobjector aBuffer",
                        "res.redirect([status,] path)- Redirects to a specified path or URL.statusmust be a validHTTP status code. If not specified,statusdefaults to \"307\" \"Temporary redirect\".",
                        "res.revalidate(urlPath)-Revalidate a page on demandusinggetStaticProps.urlPathmust be astring."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Setting the status code of a response"
                },
                {
                    "type": "p",
                    "text": "When sending a response back to the client, you can set the status code of the response."
                },
                {
                    "type": "p",
                    "text": "The following example sets the status code of the response to200(OK) and returns amessageproperty with the value ofHello from Next.js!as a JSON response:"
                },
                {
                    "type": "code",
                    "code": "importtype{ NextApiRequest,NextApiResponse }from'next'typeResponseData={message:string}exportdefaultfunctionhandler(req:NextApiRequest,res:NextApiResponse<ResponseData>) {res.status(200).json({ message:'Hello from Next.js!'})}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sending a JSON response"
                },
                {
                    "type": "p",
                    "text": "When sending a response back to the client you can send a JSON response, this must be aserializable object.\nIn a real world application you might want to let the client know the status of the request depending on the result of the requested endpoint."
                },
                {
                    "type": "p",
                    "text": "The following example sends a JSON response with the status code200(OK) and the result of the async operation. It's contained in a try catch block to handle any errors that may occur, with the appropriate status code and error message caught and sent back to the client:"
                },
                {
                    "type": "code",
                    "code": "importtype{ NextApiRequest,NextApiResponse }from'next'exportdefaultasyncfunctionhandler(req:NextApiRequest,res:NextApiResponse) {try{constresult=awaitsomeAsyncOperation()res.status(200).json({ result })}catch(err) {res.status(500).json({ error:'failed to load data'})}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sending a HTTP response"
                },
                {
                    "type": "p",
                    "text": "Sending an HTTP response works the same way as when sending a JSON response. The only difference is that the response body can be astring, anobjector aBuffer."
                },
                {
                    "type": "p",
                    "text": "The following example sends a HTTP response with the status code200(OK) and the result of the async operation."
                },
                {
                    "type": "code",
                    "code": "importtype{ NextApiRequest,NextApiResponse }from'next'exportdefaultasyncfunctionhandler(req:NextApiRequest,res:NextApiResponse) {try{constresult=awaitsomeAsyncOperation()res.status(200).send({ result })}catch(err) {res.status(500).send({ error:'failed to fetch data'})}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Redirects to a specified path or URL"
                },
                {
                    "type": "p",
                    "text": "Taking a form as an example, you may want to redirect your client to a specified path or URL once they have submitted the form."
                },
                {
                    "type": "p",
                    "text": "The following example redirects the client to the/path if the form is successfully submitted:"
                },
                {
                    "type": "code",
                    "code": "importtype{ NextApiRequest,NextApiResponse }from'next'exportdefaultasyncfunctionhandler(req:NextApiRequest,res:NextApiResponse) {const{name,message}=req.bodytry{awaithandleFormInputAsync({ name,message })res.redirect(307,'/')}catch(err) {res.status(500).send({ error:'Failed to fetch data'})}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding TypeScript types"
                },
                {
                    "type": "p",
                    "text": "You can make your API Routes more type-safe by importing theNextApiRequestandNextApiResponsetypes fromnext, in addition to those, you can also type your response data:"
                },
                {
                    "type": "code",
                    "code": "importtype{ NextApiRequest,NextApiResponse }from'next'typeResponseData={message:string}exportdefaultfunctionhandler(req:NextApiRequest,res:NextApiResponse<ResponseData>) {res.status(200).json({ message:'Hello from Next.js!'})}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The body ofNextApiRequestisanybecause the client may include any payload. You should validate the type/shape of the body at runtime before using it."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic API Routes"
                },
                {
                    "type": "p",
                    "text": "API Routes supportdynamic routes, and follow the same file naming rules used forpages/."
                },
                {
                    "type": "code",
                    "code": "importtype{ NextApiRequest,NextApiResponse }from'next'exportdefaultfunctionhandler(req:NextApiRequest,res:NextApiResponse) {const{pid}=req.queryres.end(`Post:${pid}`)}"
                },
                {
                    "type": "p",
                    "text": "Now, a request to/api/post/abcwill respond with the text:Post: abc."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Catch all API routes"
                },
                {
                    "type": "p",
                    "text": "API Routes can be extended to catch all paths by adding three dots (...) inside the brackets. For example:"
                },
                {
                    "type": "list",
                    "items": [
                        "pages/api/post/[...slug].jsmatches/api/post/a, but also/api/post/a/b,/api/post/a/b/cand so on."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: You can use names other thanslug, such as:[...param]"
                },
                {
                    "type": "p",
                    "text": "Matched parameters will be sent as a query parameter (slugin the example) to the page, and it will always be an array, so, the path/api/post/awill have the followingqueryobject:"
                },
                {
                    "type": "code",
                    "code": "{\"slug\":[\"a\"] }"
                },
                {
                    "type": "p",
                    "text": "And in the case of/api/post/a/b, and any other matching path, new parameters will be added to the array, like so:"
                },
                {
                    "type": "code",
                    "code": "{\"slug\":[\"a\",\"b\"] }"
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "importtype{ NextApiRequest,NextApiResponse }from'next'exportdefaultfunctionhandler(req:NextApiRequest,res:NextApiResponse) {const{slug}=req.queryres.end(`Post:${slug.join(', ')}`)}"
                },
                {
                    "type": "p",
                    "text": "Now, a request to/api/post/a/b/cwill respond with the text:Post: a, b, c."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Optional catch all API routes"
                },
                {
                    "type": "p",
                    "text": "Catch all routes can be made optional by including the parameter in double brackets ([[...slug]])."
                },
                {
                    "type": "p",
                    "text": "For example,pages/api/post/[[...slug]].jswill match/api/post,/api/post/a,/api/post/a/b, and so on."
                },
                {
                    "type": "p",
                    "text": "The main difference between catch all and optional catch all routes is that with optional, the route without the parameter is also matched (/api/postin the example above)."
                },
                {
                    "type": "p",
                    "text": "Thequeryobjects are as follows:"
                },
                {
                    "type": "code",
                    "code": "{ }// GET `/api/post` (empty object){\"slug\":[\"a\"] }// `GET /api/post/a` (single-element array){\"slug\":[\"a\",\"b\"] }// `GET /api/post/a/b` (multi-element array)"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caveats"
                },
                {
                    "type": "list",
                    "items": [
                        "Predefined API routes take precedence over dynamic API routes, and dynamic API routes over catch all API routes. Take a look at the following examples:pages/api/post/create.js- Will match/api/post/createpages/api/post/[pid].js- Will match/api/post/1,/api/post/abc, etc. But not/api/post/createpages/api/post/[...slug].js- Will match/api/post/1/2,/api/post/a/b/c, etc. But not/api/post/create,/api/post/abc",
                        "pages/api/post/create.js- Will match/api/post/create",
                        "pages/api/post/[pid].js- Will match/api/post/1,/api/post/abc, etc. But not/api/post/create",
                        "pages/api/post/[...slug].js- Will match/api/post/1/2,/api/post/a/b/c, etc. But not/api/post/create,/api/post/abc"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "pages/api/post/create.js- Will match/api/post/create",
                        "pages/api/post/[pid].js- Will match/api/post/1,/api/post/abc, etc. But not/api/post/create",
                        "pages/api/post/[...slug].js- Will match/api/post/1/2,/api/post/a/b/c, etc. But not/api/post/create,/api/post/abc"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Edge API Routes"
                },
                {
                    "type": "p",
                    "text": "If you would like to use API Routes with the Edge Runtime, we recommend incrementally adopting the App Router and usingRoute Handlersinstead."
                },
                {
                    "type": "p",
                    "text": "The Route Handlers function signature is isomorphic, meaning you can use the same function for both Edge and Node.js runtimes."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app",
            "title": "Introduction: App Router | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "App Router"
                },
                {
                    "type": "p",
                    "text": "The Next.js App Router introduces a new model for building applications using React's latest features such asServer Components,Streaming with Suspense, andServer Actions."
                },
                {
                    "type": "p",
                    "text": "Get started with the App Router bycreating your first page."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Frequently Asked Questions"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How can I access the request object in a layout?"
                },
                {
                    "type": "p",
                    "text": "You intentionally cannot access the raw request object. However, you can accessheadersandcookiesthrough server-only functions. You can alsoset cookies."
                },
                {
                    "type": "p",
                    "text": "Layoutsdo not rerender. They can be cached and reused to avoid unnecessary computation when navigating between pages. By restricting layouts from accessing the raw request, Next.js can prevent the execution of potentially slow or expensive user code within the layout, which could negatively impact performance."
                },
                {
                    "type": "p",
                    "text": "This design also enforces consistent and predictable behavior for layouts across different pages, which simplifies development and debugging."
                },
                {
                    "type": "p",
                    "text": "Depending on the UI pattern you're building,Parallel Routesallow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How can I access the URL on a page?"
                },
                {
                    "type": "p",
                    "text": "By default, pages are Server Components. You can access the route segments through theparamsprop and the URL search params through thesearchParamsprop for a given page."
                },
                {
                    "type": "p",
                    "text": "If you are using Client Components, you can useusePathname,useSelectedLayoutSegment, anduseSelectedLayoutSegmentsfor more complex routes."
                },
                {
                    "type": "p",
                    "text": "Further, depending on the UI pattern you're building,Parallel Routesallow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How can I redirect from a Server Component?"
                },
                {
                    "type": "p",
                    "text": "You can useredirectto redirect from a page to a relative or absolute URL.redirectis a temporary (307) redirect, whilepermanentRedirectis a permanent (308) redirect. When these functions are used while streaming UI, they will insert a meta tag to emit the redirect on the client side."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How can I handle authentication with the App Router?"
                },
                {
                    "type": "p",
                    "text": "Here are some common authentication solutions that support the App Router:"
                },
                {
                    "type": "list",
                    "items": [
                        "NextAuth.js",
                        "Clerk",
                        "Lucia",
                        "Auth0",
                        "Stytch",
                        "Kinde",
                        "Or manually handling sessions or JWTs"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How can I set cookies?"
                },
                {
                    "type": "p",
                    "text": "You can set cookies inServer ActionsorRoute Handlersusing thecookiesfunction."
                },
                {
                    "type": "p",
                    "text": "Since HTTP does not allow setting cookies after streaming starts, you cannot set cookies from a page or layout directly. You can also set cookies fromMiddleware."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How can I build multi-tenant apps?"
                },
                {
                    "type": "p",
                    "text": "If you are looking to build a single Next.js application that serves multiple tenants, we havebuilt an exampleshowing our recommended architecture."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How can I invalidate the App Router cache?"
                },
                {
                    "type": "p",
                    "text": "There are multiple layers of caching in Next.js, and thus, multiple ways to invalidate different parts of the cache.Learn more about caching."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Are there any comprehensive, open-source applications built on the App Router?"
                },
                {
                    "type": "p",
                    "text": "Yes. You can viewNext.js Commerceor thePlatforms Starter Kitfor two larger examples of using the App Router that are open-source."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Learn More"
                },
                {
                    "type": "list",
                    "items": [
                        "Routing Fundamentals",
                        "Data Fetching, Caching, and Revalidating",
                        "Forms and Mutations",
                        "Caching",
                        "Rendering Fundamentals",
                        "Server Components",
                        "Client Components"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Building Your Application"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "API Reference"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference",
            "title": "App Router: API Reference | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "API Reference"
                },
                {
                    "type": "p",
                    "text": "The Next.js API reference is divided into the following sections:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "File Conventions"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Functions"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next.config.js Options"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CLI"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Edge Runtime"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/cli",
            "title": "API Reference: CLI | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "CLI"
                },
                {
                    "type": "p",
                    "text": "Next.js comes withtwoCommand Line Interface (CLI) tools:"
                },
                {
                    "type": "list",
                    "items": [
                        "create-next-app: Quickly create a new Next.js application using the default template or anexamplefrom a public Github repository.",
                        "next: Run the Next.js development server, build your application, and more."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "create-next-app"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next CLI"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/cli/create-next-app",
            "title": "CLI: create-next-app | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "create-next-app"
                },
                {
                    "type": "p",
                    "text": "Thecreate-next-appCLI allow you to quickly create a new Next.js application using the default template or anexamplefrom a public Github repository. It is the easiest way to get started with Next.js."
                },
                {
                    "type": "p",
                    "text": "Basic usage:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest[project-name] [options]"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reference"
                },
                {
                    "type": "p",
                    "text": "The following options are available:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "With the default template"
                },
                {
                    "type": "p",
                    "text": "To create a new app using the default template, run the following command in your terminal:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest"
                },
                {
                    "type": "p",
                    "text": "You will then be asked the following prompts:"
                },
                {
                    "type": "code",
                    "code": "What is your project named?  my-appWould you like to use TypeScript?  No / YesWould you like to use ESLint?  No / YesWould you like to use Tailwind CSS?  No / YesWould you like your code inside a `src/` directory?  No / YesWould you like to use App Router? (recommended)  No / YesWould you like to use Turbopack for `next dev`?  No / YesWould you like to customize the import alias (`@/*` by default)?  No / Yes"
                },
                {
                    "type": "p",
                    "text": "Once you've answered the prompts, a new project will be created with your chosen configuration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "With an official Next.js example"
                },
                {
                    "type": "p",
                    "text": "To create a new app using an official Next.js example, use the--exampleflag with the following command:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest--example[your-project-name] [example-name]"
                },
                {
                    "type": "p",
                    "text": "You can view a list of all available examples along with setup instructions in theNext.js repository."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "With any public Github example"
                },
                {
                    "type": "p",
                    "text": "To create a new app using any public Github example, use the--exampleoption with the Github repo's URL. For example:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest--example[your-project-name]\"https://github.com/.../\""
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/cli/next",
            "title": "CLI: next CLI | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "next CLI"
                },
                {
                    "type": "p",
                    "text": "The Next.js CLI allows you to develop, build, start your application, and more."
                },
                {
                    "type": "p",
                    "text": "Basic usage:"
                },
                {
                    "type": "code",
                    "code": "npmrunnext[command] [options]"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reference"
                },
                {
                    "type": "p",
                    "text": "The following options are available:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Commands"
                },
                {
                    "type": "p",
                    "text": "The following commands are available:"
                },
                {
                    "type": "p",
                    "text": "Good to know: Runningnextwithout a command is an alias fornext dev."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next devoptions"
                },
                {
                    "type": "p",
                    "text": "next devstarts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when runningnext dev:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next buildoptions"
                },
                {
                    "type": "p",
                    "text": "next buildcreates an optimized production build of your application. The output displays information about each route. For example:"
                },
                {
                    "type": "code",
                    "code": "Route (app)SizeFirstLoadJS┌○/_not-found0B0kB└ƒ/products/[id]0B0kB○  (Static)prerenderedasstaticcontentƒ  (Dynamic)server-renderedondemand"
                },
                {
                    "type": "list",
                    "items": [
                        "Size: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.",
                        "First Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric."
                    ]
                },
                {
                    "type": "p",
                    "text": "Both of these values arecompressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext buildcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next startoptions"
                },
                {
                    "type": "p",
                    "text": "next startstarts the application in production mode. The application should be compiled withnext buildfirst."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext startcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next infooptions"
                },
                {
                    "type": "p",
                    "text": "next infoprints relevant details about the current system which can be used to report Next.js bugs when opening aGitHub issue. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next,react,react-dom), and more."
                },
                {
                    "type": "p",
                    "text": "The output should look like this:"
                },
                {
                    "type": "code",
                    "code": "OperatingSystem:Platform:darwinArch:arm64Version:DarwinKernelVersion23.6.0Availablememory(MB):65536AvailableCPUcores:10Binaries:Node:20.12.0npm:10.5.0Yarn:1.22.19pnpm:9.6.0RelevantPackages:next:15.0.0-canary.115//Latestavailableversionisdetected(15.0.0-canary.115).eslint-config-next:14.2.5react:19.0.0-rcreact-dom:19.0.0typescript:5.5.4Next.jsConfig:output:N/A"
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext infocommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next lintoptions"
                },
                {
                    "type": "p",
                    "text": "next lintruns ESLint for all files in thepages/,app/,components/,lib/, andsrc/directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext lintcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next telemetryoptions"
                },
                {
                    "type": "p",
                    "text": "Next.js collectscompletely anonymoustelemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext telemetrycommand:"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutTelemetry."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Changing the default port"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js useshttp://localhost:3000during development and withnext start. The default port can be changed with the-poption, like so:"
                },
                {
                    "type": "code",
                    "code": "nextdev-p4000"
                },
                {
                    "type": "p",
                    "text": "Or using thePORTenvironment variable:"
                },
                {
                    "type": "code",
                    "code": "PORT=4000next dev"
                },
                {
                    "type": "p",
                    "text": "Good to know:PORTcannot be set in.envas booting up the HTTP server happens before any other code is initialized."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using HTTPS during development"
                },
                {
                    "type": "p",
                    "text": "For certain use cases like webhooks or authentication, it may be required to use HTTPS to have a secure environment onlocalhost. Next.js can generate a self-signed certificate withnext devusing the--experimental-httpsflag:"
                },
                {
                    "type": "code",
                    "code": "nextdev--experimental-https"
                },
                {
                    "type": "p",
                    "text": "You can also provide a custom certificate and key with--experimental-https-keyand--experimental-https-cert. Optionally, you can provide a custom CA certificate with--experimental-https-caas well."
                },
                {
                    "type": "code",
                    "code": "nextdev--experimental-https--experimental-https-key./certificates/localhost-key.pem--experimental-https-cert./certificates/localhost.pem"
                },
                {
                    "type": "p",
                    "text": "next dev --experimental-httpsis only intended for development and creates a locally trusted certificate withmkcert. In production, use properly issued certificates from trusted authorities."
                },
                {
                    "type": "p",
                    "text": "Good to know: When deploying to Vercel, HTTPS isautomatically configuredfor your Next.js application."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Configuring a timeout for downstream proxies"
                },
                {
                    "type": "p",
                    "text": "When deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server withkeep-alive timeoutsthat arelargerthan the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated."
                },
                {
                    "type": "p",
                    "text": "To configure the timeout values for the production Next.js server, pass--keepAliveTimeout(in milliseconds) tonext start, like so:"
                },
                {
                    "type": "code",
                    "code": "nextstart--keepAliveTimeout70000"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing Node.js arguments"
                },
                {
                    "type": "p",
                    "text": "You can pass anynode argumentstonextcommands. For example:"
                },
                {
                    "type": "code",
                    "code": "NODE_OPTIONS='--throw-deprecation'nextNODE_OPTIONS='-r esm'nextNODE_OPTIONS='--inspect'next"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/cli/next-info-options",
            "title": "CLI: next CLI | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "next CLI"
                },
                {
                    "type": "p",
                    "text": "The Next.js CLI allows you to develop, build, start your application, and more."
                },
                {
                    "type": "p",
                    "text": "Basic usage:"
                },
                {
                    "type": "code",
                    "code": "npmrunnext[command] [options]"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reference"
                },
                {
                    "type": "p",
                    "text": "The following options are available:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Commands"
                },
                {
                    "type": "p",
                    "text": "The following commands are available:"
                },
                {
                    "type": "p",
                    "text": "Good to know: Runningnextwithout a command is an alias fornext dev."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next devoptions"
                },
                {
                    "type": "p",
                    "text": "next devstarts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when runningnext dev:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next buildoptions"
                },
                {
                    "type": "p",
                    "text": "next buildcreates an optimized production build of your application. The output displays information about each route. For example:"
                },
                {
                    "type": "code",
                    "code": "Route (app)SizeFirstLoadJS┌○/_not-found0B0kB└ƒ/products/[id]0B0kB○  (Static)prerenderedasstaticcontentƒ  (Dynamic)server-renderedondemand"
                },
                {
                    "type": "list",
                    "items": [
                        "Size: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.",
                        "First Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric."
                    ]
                },
                {
                    "type": "p",
                    "text": "Both of these values arecompressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext buildcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next startoptions"
                },
                {
                    "type": "p",
                    "text": "next startstarts the application in production mode. The application should be compiled withnext buildfirst."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext startcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next infooptions"
                },
                {
                    "type": "p",
                    "text": "next infoprints relevant details about the current system which can be used to report Next.js bugs when opening aGitHub issue. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next,react,react-dom), and more."
                },
                {
                    "type": "p",
                    "text": "The output should look like this:"
                },
                {
                    "type": "code",
                    "code": "OperatingSystem:Platform:darwinArch:arm64Version:DarwinKernelVersion23.6.0Availablememory(MB):65536AvailableCPUcores:10Binaries:Node:20.12.0npm:10.5.0Yarn:1.22.19pnpm:9.6.0RelevantPackages:next:15.0.0-canary.115//Latestavailableversionisdetected(15.0.0-canary.115).eslint-config-next:14.2.5react:19.0.0-rcreact-dom:19.0.0typescript:5.5.4Next.jsConfig:output:N/A"
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext infocommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next lintoptions"
                },
                {
                    "type": "p",
                    "text": "next lintruns ESLint for all files in thepages/,app/,components/,lib/, andsrc/directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext lintcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next telemetryoptions"
                },
                {
                    "type": "p",
                    "text": "Next.js collectscompletely anonymoustelemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext telemetrycommand:"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutTelemetry."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Changing the default port"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js useshttp://localhost:3000during development and withnext start. The default port can be changed with the-poption, like so:"
                },
                {
                    "type": "code",
                    "code": "nextdev-p4000"
                },
                {
                    "type": "p",
                    "text": "Or using thePORTenvironment variable:"
                },
                {
                    "type": "code",
                    "code": "PORT=4000next dev"
                },
                {
                    "type": "p",
                    "text": "Good to know:PORTcannot be set in.envas booting up the HTTP server happens before any other code is initialized."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using HTTPS during development"
                },
                {
                    "type": "p",
                    "text": "For certain use cases like webhooks or authentication, it may be required to use HTTPS to have a secure environment onlocalhost. Next.js can generate a self-signed certificate withnext devusing the--experimental-httpsflag:"
                },
                {
                    "type": "code",
                    "code": "nextdev--experimental-https"
                },
                {
                    "type": "p",
                    "text": "You can also provide a custom certificate and key with--experimental-https-keyand--experimental-https-cert. Optionally, you can provide a custom CA certificate with--experimental-https-caas well."
                },
                {
                    "type": "code",
                    "code": "nextdev--experimental-https--experimental-https-key./certificates/localhost-key.pem--experimental-https-cert./certificates/localhost.pem"
                },
                {
                    "type": "p",
                    "text": "next dev --experimental-httpsis only intended for development and creates a locally trusted certificate withmkcert. In production, use properly issued certificates from trusted authorities."
                },
                {
                    "type": "p",
                    "text": "Good to know: When deploying to Vercel, HTTPS isautomatically configuredfor your Next.js application."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Configuring a timeout for downstream proxies"
                },
                {
                    "type": "p",
                    "text": "When deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server withkeep-alive timeoutsthat arelargerthan the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated."
                },
                {
                    "type": "p",
                    "text": "To configure the timeout values for the production Next.js server, pass--keepAliveTimeout(in milliseconds) tonext start, like so:"
                },
                {
                    "type": "code",
                    "code": "nextstart--keepAliveTimeout70000"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing Node.js arguments"
                },
                {
                    "type": "p",
                    "text": "You can pass anynode argumentstonextcommands. For example:"
                },
                {
                    "type": "code",
                    "code": "NODE_OPTIONS='--throw-deprecation'nextNODE_OPTIONS='-r esm'nextNODE_OPTIONS='--inspect'next"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/cli/next-lint-options",
            "title": "CLI: next CLI | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "next CLI"
                },
                {
                    "type": "p",
                    "text": "The Next.js CLI allows you to develop, build, start your application, and more."
                },
                {
                    "type": "p",
                    "text": "Basic usage:"
                },
                {
                    "type": "code",
                    "code": "npmrunnext[command] [options]"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reference"
                },
                {
                    "type": "p",
                    "text": "The following options are available:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Commands"
                },
                {
                    "type": "p",
                    "text": "The following commands are available:"
                },
                {
                    "type": "p",
                    "text": "Good to know: Runningnextwithout a command is an alias fornext dev."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next devoptions"
                },
                {
                    "type": "p",
                    "text": "next devstarts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when runningnext dev:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next buildoptions"
                },
                {
                    "type": "p",
                    "text": "next buildcreates an optimized production build of your application. The output displays information about each route. For example:"
                },
                {
                    "type": "code",
                    "code": "Route (app)SizeFirstLoadJS┌○/_not-found0B0kB└ƒ/products/[id]0B0kB○  (Static)prerenderedasstaticcontentƒ  (Dynamic)server-renderedondemand"
                },
                {
                    "type": "list",
                    "items": [
                        "Size: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.",
                        "First Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric."
                    ]
                },
                {
                    "type": "p",
                    "text": "Both of these values arecompressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext buildcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next startoptions"
                },
                {
                    "type": "p",
                    "text": "next startstarts the application in production mode. The application should be compiled withnext buildfirst."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext startcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next infooptions"
                },
                {
                    "type": "p",
                    "text": "next infoprints relevant details about the current system which can be used to report Next.js bugs when opening aGitHub issue. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next,react,react-dom), and more."
                },
                {
                    "type": "p",
                    "text": "The output should look like this:"
                },
                {
                    "type": "code",
                    "code": "OperatingSystem:Platform:darwinArch:arm64Version:DarwinKernelVersion23.6.0Availablememory(MB):65536AvailableCPUcores:10Binaries:Node:20.12.0npm:10.5.0Yarn:1.22.19pnpm:9.6.0RelevantPackages:next:15.0.0-canary.115//Latestavailableversionisdetected(15.0.0-canary.115).eslint-config-next:14.2.5react:19.0.0-rcreact-dom:19.0.0typescript:5.5.4Next.jsConfig:output:N/A"
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext infocommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next lintoptions"
                },
                {
                    "type": "p",
                    "text": "next lintruns ESLint for all files in thepages/,app/,components/,lib/, andsrc/directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext lintcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next telemetryoptions"
                },
                {
                    "type": "p",
                    "text": "Next.js collectscompletely anonymoustelemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext telemetrycommand:"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutTelemetry."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Changing the default port"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js useshttp://localhost:3000during development and withnext start. The default port can be changed with the-poption, like so:"
                },
                {
                    "type": "code",
                    "code": "nextdev-p4000"
                },
                {
                    "type": "p",
                    "text": "Or using thePORTenvironment variable:"
                },
                {
                    "type": "code",
                    "code": "PORT=4000next dev"
                },
                {
                    "type": "p",
                    "text": "Good to know:PORTcannot be set in.envas booting up the HTTP server happens before any other code is initialized."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using HTTPS during development"
                },
                {
                    "type": "p",
                    "text": "For certain use cases like webhooks or authentication, it may be required to use HTTPS to have a secure environment onlocalhost. Next.js can generate a self-signed certificate withnext devusing the--experimental-httpsflag:"
                },
                {
                    "type": "code",
                    "code": "nextdev--experimental-https"
                },
                {
                    "type": "p",
                    "text": "You can also provide a custom certificate and key with--experimental-https-keyand--experimental-https-cert. Optionally, you can provide a custom CA certificate with--experimental-https-caas well."
                },
                {
                    "type": "code",
                    "code": "nextdev--experimental-https--experimental-https-key./certificates/localhost-key.pem--experimental-https-cert./certificates/localhost.pem"
                },
                {
                    "type": "p",
                    "text": "next dev --experimental-httpsis only intended for development and creates a locally trusted certificate withmkcert. In production, use properly issued certificates from trusted authorities."
                },
                {
                    "type": "p",
                    "text": "Good to know: When deploying to Vercel, HTTPS isautomatically configuredfor your Next.js application."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Configuring a timeout for downstream proxies"
                },
                {
                    "type": "p",
                    "text": "When deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server withkeep-alive timeoutsthat arelargerthan the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated."
                },
                {
                    "type": "p",
                    "text": "To configure the timeout values for the production Next.js server, pass--keepAliveTimeout(in milliseconds) tonext start, like so:"
                },
                {
                    "type": "code",
                    "code": "nextstart--keepAliveTimeout70000"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing Node.js arguments"
                },
                {
                    "type": "p",
                    "text": "You can pass anynode argumentstonextcommands. For example:"
                },
                {
                    "type": "code",
                    "code": "NODE_OPTIONS='--throw-deprecation'nextNODE_OPTIONS='-r esm'nextNODE_OPTIONS='--inspect'next"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/cli/next-telemetry-options",
            "title": "CLI: next CLI | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "next CLI"
                },
                {
                    "type": "p",
                    "text": "The Next.js CLI allows you to develop, build, start your application, and more."
                },
                {
                    "type": "p",
                    "text": "Basic usage:"
                },
                {
                    "type": "code",
                    "code": "npmrunnext[command] [options]"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reference"
                },
                {
                    "type": "p",
                    "text": "The following options are available:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Commands"
                },
                {
                    "type": "p",
                    "text": "The following commands are available:"
                },
                {
                    "type": "p",
                    "text": "Good to know: Runningnextwithout a command is an alias fornext dev."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next devoptions"
                },
                {
                    "type": "p",
                    "text": "next devstarts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when runningnext dev:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next buildoptions"
                },
                {
                    "type": "p",
                    "text": "next buildcreates an optimized production build of your application. The output displays information about each route. For example:"
                },
                {
                    "type": "code",
                    "code": "Route (app)SizeFirstLoadJS┌○/_not-found0B0kB└ƒ/products/[id]0B0kB○  (Static)prerenderedasstaticcontentƒ  (Dynamic)server-renderedondemand"
                },
                {
                    "type": "list",
                    "items": [
                        "Size: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.",
                        "First Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric."
                    ]
                },
                {
                    "type": "p",
                    "text": "Both of these values arecompressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext buildcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next startoptions"
                },
                {
                    "type": "p",
                    "text": "next startstarts the application in production mode. The application should be compiled withnext buildfirst."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext startcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next infooptions"
                },
                {
                    "type": "p",
                    "text": "next infoprints relevant details about the current system which can be used to report Next.js bugs when opening aGitHub issue. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next,react,react-dom), and more."
                },
                {
                    "type": "p",
                    "text": "The output should look like this:"
                },
                {
                    "type": "code",
                    "code": "OperatingSystem:Platform:darwinArch:arm64Version:DarwinKernelVersion23.6.0Availablememory(MB):65536AvailableCPUcores:10Binaries:Node:20.12.0npm:10.5.0Yarn:1.22.19pnpm:9.6.0RelevantPackages:next:15.0.0-canary.115//Latestavailableversionisdetected(15.0.0-canary.115).eslint-config-next:14.2.5react:19.0.0-rcreact-dom:19.0.0typescript:5.5.4Next.jsConfig:output:N/A"
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext infocommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next lintoptions"
                },
                {
                    "type": "p",
                    "text": "next lintruns ESLint for all files in thepages/,app/,components/,lib/, andsrc/directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext lintcommand:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next telemetryoptions"
                },
                {
                    "type": "p",
                    "text": "Next.js collectscompletely anonymoustelemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information."
                },
                {
                    "type": "p",
                    "text": "The following options are available for thenext telemetrycommand:"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutTelemetry."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Changing the default port"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js useshttp://localhost:3000during development and withnext start. The default port can be changed with the-poption, like so:"
                },
                {
                    "type": "code",
                    "code": "nextdev-p4000"
                },
                {
                    "type": "p",
                    "text": "Or using thePORTenvironment variable:"
                },
                {
                    "type": "code",
                    "code": "PORT=4000next dev"
                },
                {
                    "type": "p",
                    "text": "Good to know:PORTcannot be set in.envas booting up the HTTP server happens before any other code is initialized."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using HTTPS during development"
                },
                {
                    "type": "p",
                    "text": "For certain use cases like webhooks or authentication, it may be required to use HTTPS to have a secure environment onlocalhost. Next.js can generate a self-signed certificate withnext devusing the--experimental-httpsflag:"
                },
                {
                    "type": "code",
                    "code": "nextdev--experimental-https"
                },
                {
                    "type": "p",
                    "text": "You can also provide a custom certificate and key with--experimental-https-keyand--experimental-https-cert. Optionally, you can provide a custom CA certificate with--experimental-https-caas well."
                },
                {
                    "type": "code",
                    "code": "nextdev--experimental-https--experimental-https-key./certificates/localhost-key.pem--experimental-https-cert./certificates/localhost.pem"
                },
                {
                    "type": "p",
                    "text": "next dev --experimental-httpsis only intended for development and creates a locally trusted certificate withmkcert. In production, use properly issued certificates from trusted authorities."
                },
                {
                    "type": "p",
                    "text": "Good to know: When deploying to Vercel, HTTPS isautomatically configuredfor your Next.js application."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Configuring a timeout for downstream proxies"
                },
                {
                    "type": "p",
                    "text": "When deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server withkeep-alive timeoutsthat arelargerthan the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated."
                },
                {
                    "type": "p",
                    "text": "To configure the timeout values for the production Next.js server, pass--keepAliveTimeout(in milliseconds) tonext start, like so:"
                },
                {
                    "type": "code",
                    "code": "nextstart--keepAliveTimeout70000"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing Node.js arguments"
                },
                {
                    "type": "p",
                    "text": "You can pass anynode argumentstonextcommands. For example:"
                },
                {
                    "type": "code",
                    "code": "NODE_OPTIONS='--throw-deprecation'nextNODE_OPTIONS='-r esm'nextNODE_OPTIONS='--inspect'next"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components",
            "title": "API Reference: Components | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Font"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<Image>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<Link>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<Script>"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components/font",
            "title": "Components: Font | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Font Module"
                },
                {
                    "type": "p",
                    "text": "This API reference will help you understand how to usenext/font/googleandnext/font/local. For features and usage, please see theOptimizing Fontspage."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Font Function Arguments"
                },
                {
                    "type": "p",
                    "text": "For usage, reviewGoogle FontsandLocal Fonts."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "src"
                },
                {
                    "type": "p",
                    "text": "The path of the font file as a string or an array of objects (with typeArray<{path: string, weight?: string, style?: string}>) relative to the directory where the font loader function is called."
                },
                {
                    "type": "p",
                    "text": "Used innext/font/local"
                },
                {
                    "type": "list",
                    "items": [
                        "Required"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "src:'./fonts/my-font.woff2'wheremy-font.woff2is placed in a directory namedfontsinside theappdirectory",
                        "src:[{path: './inter/Inter-Thin.ttf', weight: '100',},{path: './inter/Inter-Regular.ttf',weight: '400',},{path: './inter/Inter-Bold-Italic.ttf', weight: '700',style: 'italic',},]",
                        "if the font loader function is called inapp/page.tsxusingsrc:'../styles/fonts/my-font.ttf', thenmy-font.ttfis placed instyles/fontsat the root of the project"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "weight"
                },
                {
                    "type": "p",
                    "text": "The fontweightwith the following possibilities:"
                },
                {
                    "type": "list",
                    "items": [
                        "A string with possible values of the weights available for the specific font or a range of values if it's avariablefont",
                        "An array of weight values if the font is not avariable google font. It applies tonext/font/googleonly."
                    ]
                },
                {
                    "type": "p",
                    "text": "Used innext/font/googleandnext/font/local"
                },
                {
                    "type": "list",
                    "items": [
                        "Required if the font being used isnotvariable"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "weight: '400': A string for a single weight value - for the fontInter, the possible values are'100','200','300','400','500','600','700','800','900'or'variable'where'variable'is the default)",
                        "weight: '100 900': A string for the range between100and900for a variable font",
                        "weight: ['100','400','900']: An array of 3 possible values for a non variable font"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "style"
                },
                {
                    "type": "p",
                    "text": "The fontstylewith the following possibilities:"
                },
                {
                    "type": "list",
                    "items": [
                        "A stringvaluewith default value of'normal'",
                        "An array of style values if the font is not avariable google font. It applies tonext/font/googleonly."
                    ]
                },
                {
                    "type": "p",
                    "text": "Used innext/font/googleandnext/font/local"
                },
                {
                    "type": "list",
                    "items": [
                        "Optional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "style: 'italic': A string - it can benormaloritalicfornext/font/google",
                        "style: 'oblique': A string - it can take any value fornext/font/localbut is expected to come fromstandard font styles",
                        "style: ['italic','normal']: An array of 2 values fornext/font/google- the values are fromnormalanditalic"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "subsets"
                },
                {
                    "type": "p",
                    "text": "The fontsubsetsdefined by an array of string values with the names of each subset you would like to bepreloaded. Fonts specified viasubsetswill have a link preload tag injected into the head when thepreloadoption is true, which is the default."
                },
                {
                    "type": "p",
                    "text": "Used innext/font/google"
                },
                {
                    "type": "list",
                    "items": [
                        "Optional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "subsets: ['latin']: An array with the subsetlatin"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can find a list of all subsets on the Google Fonts page for your font."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "axes"
                },
                {
                    "type": "p",
                    "text": "Some variable fonts have extraaxesthat can be included. By default, only the font weight is included to keep the file size down. The possible values ofaxesdepend on the specific font."
                },
                {
                    "type": "p",
                    "text": "Used innext/font/google"
                },
                {
                    "type": "list",
                    "items": [
                        "Optional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "axes: ['slnt']: An array with valueslntfor theIntervariable font which hasslntas additionalaxesas shownhere. You can find the possibleaxesvalues for your font by using the filter on theGoogle variable fonts pageand looking for axes other thanwght"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "display"
                },
                {
                    "type": "p",
                    "text": "The fontdisplaywith possible stringvaluesof'auto','block','swap','fallback'or'optional'with default value of'swap'."
                },
                {
                    "type": "p",
                    "text": "Used innext/font/googleandnext/font/local"
                },
                {
                    "type": "list",
                    "items": [
                        "Optional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "display: 'optional': A string assigned to theoptionalvalue"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "preload"
                },
                {
                    "type": "p",
                    "text": "A boolean value that specifies whether the font should bepreloadedor not. The default istrue."
                },
                {
                    "type": "p",
                    "text": "Used innext/font/googleandnext/font/local"
                },
                {
                    "type": "list",
                    "items": [
                        "Optional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "preload: false"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "fallback"
                },
                {
                    "type": "p",
                    "text": "The fallback font to use if the font cannot be loaded. An array of strings of fallback fonts with no default."
                },
                {
                    "type": "list",
                    "items": [
                        "Optional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Used innext/font/googleandnext/font/local"
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "fallback: ['system-ui', 'arial']: An array setting the fallback fonts tosystem-uiorarial"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "adjustFontFallback"
                },
                {
                    "type": "list",
                    "items": [
                        "Fornext/font/google: A boolean value that sets whether an automatic fallback font should be used to reduceCumulative Layout Shift. The default istrue.",
                        "Fornext/font/local: A string or booleanfalsevalue that sets whether an automatic fallback font should be used to reduceCumulative Layout Shift. The possible values are'Arial','Times New Roman'orfalse. The default is'Arial'."
                    ]
                },
                {
                    "type": "p",
                    "text": "Used innext/font/googleandnext/font/local"
                },
                {
                    "type": "list",
                    "items": [
                        "Optional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "adjustFontFallback: false: fornext/font/google",
                        "adjustFontFallback: 'Times New Roman': fornext/font/local"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "variable"
                },
                {
                    "type": "p",
                    "text": "A string value to define the CSS variable name to be used if the style is applied with theCSS variable method."
                },
                {
                    "type": "p",
                    "text": "Used innext/font/googleandnext/font/local"
                },
                {
                    "type": "list",
                    "items": [
                        "Optional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "variable: '--my-font': The CSS variable--my-fontis declared"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "declarations"
                },
                {
                    "type": "p",
                    "text": "An array of font facedescriptorkey-value pairs that define the generated@font-facefurther."
                },
                {
                    "type": "p",
                    "text": "Used innext/font/local"
                },
                {
                    "type": "list",
                    "items": [
                        "Optional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "declarations: [{ prop: 'ascent-override', value: '90%' }]"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Applying Styles"
                },
                {
                    "type": "p",
                    "text": "You can apply the font styles in three ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "className",
                        "style",
                        "CSS Variables"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "className"
                },
                {
                    "type": "p",
                    "text": "Returns a read-only CSSclassNamefor the loaded font to be passed to an HTML element."
                },
                {
                    "type": "code",
                    "code": "<pclassName={inter.className}>Hello, Next.js!</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "style"
                },
                {
                    "type": "p",
                    "text": "Returns a read-only CSSstyleobject for the loaded font to be passed to an HTML element, includingstyle.fontFamilyto access the font family name and fallback fonts."
                },
                {
                    "type": "code",
                    "code": "<pstyle={inter.style}>Hello World</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CSS Variables"
                },
                {
                    "type": "p",
                    "text": "If you would like to set your styles in an external style sheet and specify additional options there, use the CSS variable method."
                },
                {
                    "type": "p",
                    "text": "In addition to importing the font, also import the CSS file where the CSS variable is defined and set the variable option of the font loader object as follows:"
                },
                {
                    "type": "code",
                    "code": "import{ Inter }from'next/font/google'importstylesfrom'../styles/component.module.css'constinter=Inter({variable:'--font-inter',})"
                },
                {
                    "type": "p",
                    "text": "To use the font, set theclassNameof the parent container of the text you would like to style to the font loader'svariablevalue and theclassNameof the text to thestylesproperty from the external CSS file."
                },
                {
                    "type": "code",
                    "code": "<mainclassName={inter.variable}><pclassName={styles.text}>Hello World</p></main>"
                },
                {
                    "type": "p",
                    "text": "Define thetextselector class in thecomponent.module.cssCSS file as follows:"
                },
                {
                    "type": "code",
                    "code": ".text{font-family:var(--font-inter);font-weight:200;font-style:italic;}"
                },
                {
                    "type": "p",
                    "text": "In the example above, the textHello Worldis styled using theInterfont and the generated font fallback withfont-weight: 200andfont-style: italic."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using a font definitions file"
                },
                {
                    "type": "p",
                    "text": "Every time you call thelocalFontor Google font function, that font will be hosted as one instance in your application. Therefore, if you need to use the same font in multiple places, you should load it in one place and import the related font object where you need it. This is done using a font definitions file."
                },
                {
                    "type": "p",
                    "text": "For example, create afonts.tsfile in astylesfolder at the root of your app directory."
                },
                {
                    "type": "p",
                    "text": "Then, specify your font definitions as follows:"
                },
                {
                    "type": "code",
                    "code": "import{ Inter,Lora,Source_Sans_3 }from'next/font/google'importlocalFontfrom'next/font/local'// define your variable fontsconstinter=Inter()constlora=Lora()// define 2 weights of a non-variable fontconstsourceCodePro400=Source_Sans_3({ weight:'400'})constsourceCodePro700=Source_Sans_3({ weight:'700'})// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folderconstgreatVibes=localFont({ src:'./GreatVibes-Regular.ttf'})export{ inter,lora,sourceCodePro400,sourceCodePro700,greatVibes }"
                },
                {
                    "type": "p",
                    "text": "You can now use these definitions in your code as follows:"
                },
                {
                    "type": "code",
                    "code": "import{ inter,lora,sourceCodePro700,greatVibes }from'../styles/fonts'exportdefaultfunctionPage() {return(<div><pclassName={inter.className}>Hello world using Inter font</p><pstyle={lora.style}>Hello world using Lora font</p><pclassName={sourceCodePro700.className}>Hello world using Source_Sans_3 font with weight 700</p><pclassName={greatVibes.className}>My title in Great Vibes font</p></div>)}"
                },
                {
                    "type": "p",
                    "text": "To make it easier to access the font definitions in your code, you can define a path alias in yourtsconfig.jsonorjsconfig.jsonfiles as follows:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\":{\"paths\":{\"@/fonts\":[\"./styles/fonts\"]}}}"
                },
                {
                    "type": "p",
                    "text": "You can now import any font definition as follows:"
                },
                {
                    "type": "code",
                    "code": "import{ greatVibes,sourceCodePro400 }from'@/fonts'"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version Changes"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components/image",
            "title": "Components: <Image> | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "<Image>"
                },
                {
                    "type": "list",
                    "items": [
                        "Image Component"
                    ]
                },
                {
                    "type": "p",
                    "text": "This API reference will help you understand how to usepropsandconfiguration optionsavailable for the Image Component. For features and usage, please see theImage Componentpage."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<Imagesrc=\"/profile.png\"width={500}height={500}alt=\"Picture of the author\"/>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "p",
                    "text": "Here's a summary of the props available for the Image Component:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Required Props"
                },
                {
                    "type": "p",
                    "text": "The Image Component requires the following properties:src,width,height, andalt."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<div><Imagesrc=\"/profile.png\"width={500}height={500}alt=\"Picture of the author\"/></div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "src"
                },
                {
                    "type": "p",
                    "text": "Must be one of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Astatically importedimage file",
                        "A path string. This can be either an absolute external URL, or an internal path depending on theloaderprop."
                    ]
                },
                {
                    "type": "p",
                    "text": "When using an external URL, you must add it toremotePatternsinnext.config.js."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "width"
                },
                {
                    "type": "p",
                    "text": "Thewidthproperty represents therenderedwidth in pixels, so it will affect how large the image appears."
                },
                {
                    "type": "p",
                    "text": "Required, except forstatically imported imagesor images with thefillproperty."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "height"
                },
                {
                    "type": "p",
                    "text": "Theheightproperty represents therenderedheight in pixels, so it will affect how large the image appears."
                },
                {
                    "type": "p",
                    "text": "Required, except forstatically imported imagesor images with thefillproperty."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "alt"
                },
                {
                    "type": "p",
                    "text": "Thealtproperty is used to describe the image for screen readers and search engines. It is also the fallback text if images have been disabled or an error occurs while loading the image."
                },
                {
                    "type": "p",
                    "text": "It should contain text that could replace the imagewithout changing the meaning of the page. It is not meant to supplement the image and should not repeat information that is already provided in the captions above or below the image."
                },
                {
                    "type": "p",
                    "text": "If the image ispurely decorativeornot intended for the user, thealtproperty should be an empty string (alt=\"\")."
                },
                {
                    "type": "p",
                    "text": "Learn more"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Optional Props"
                },
                {
                    "type": "p",
                    "text": "The<Image />component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in theAdvanced Propssection."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "loader"
                },
                {
                    "type": "p",
                    "text": "A custom function used to resolve image URLs."
                },
                {
                    "type": "p",
                    "text": "Aloaderis a function returning a URL string for the image, given the following parameters:"
                },
                {
                    "type": "list",
                    "items": [
                        "src",
                        "width",
                        "quality"
                    ]
                },
                {
                    "type": "p",
                    "text": "Here is an example of using a custom loader:"
                },
                {
                    "type": "code",
                    "code": "'use client'importImagefrom'next/image'constimageLoader=({ src,width,quality })=>{return`https://example.com/${src}?w=${width}&q=${quality||75}`}exportdefaultfunctionPage() {return(<Imageloader={imageLoader}src=\"me.png\"alt=\"Picture of the author\"width={500}height={500}/>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Using props likeloader, which accept a function, requires usingClient Componentsto serialize the provided function."
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use theloaderFileconfiguration innext.config.jsto configure every instance ofnext/imagein your application, without passing a prop."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "fill"
                },
                {
                    "type": "code",
                    "code": "fill={true}// {true} | {false}"
                },
                {
                    "type": "p",
                    "text": "A boolean that causes the image to fill the parent element, which is useful when thewidthandheightare unknown."
                },
                {
                    "type": "p",
                    "text": "The parent elementmustassignposition: \"relative\",position: \"fixed\", orposition: \"absolute\"style."
                },
                {
                    "type": "p",
                    "text": "By default, the img element will automatically be assigned theposition: \"absolute\"style."
                },
                {
                    "type": "p",
                    "text": "If no styles are applied to the image, the image will stretch to fit the container. You may prefer to setobject-fit: \"contain\"for an image which is letterboxed to fit the container and preserve aspect ratio."
                },
                {
                    "type": "p",
                    "text": "Alternatively,object-fit: \"cover\"will cause the image to fill the entire container and be cropped to preserve aspect ratio. For this to look correct, theoverflow: \"hidden\"style should be assigned to the parent element."
                },
                {
                    "type": "p",
                    "text": "For more information, see also:"
                },
                {
                    "type": "list",
                    "items": [
                        "position",
                        "object-fit",
                        "object-position"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "sizes"
                },
                {
                    "type": "p",
                    "text": "A string, similar to a media query, that provides information about how wide the image will be at different breakpoints. The value ofsizeswill greatly affect performance for images usingfillor which arestyled to have a responsive size."
                },
                {
                    "type": "p",
                    "text": "Thesizesproperty serves two important purposes related to image performance:"
                },
                {
                    "type": "list",
                    "items": [
                        "First, the value ofsizesis used by the browser to determine which size of the image to download, fromnext/image's automatically generatedsrcset. When the browser chooses, it does not yet know the size of the image on the page, so it selects an image that is the same size or larger than the viewport. Thesizesproperty allows you to tell the browser that the image will actually be smaller than full screen. If you don't specify asizesvalue in an image with thefillproperty, a default value of100vw(full screen width) is used.",
                        "Second, thesizesproperty changes the behavior of the automatically generatedsrcsetvalue. If nosizesvalue is present, a smallsrcsetis generated, suitable for a fixed-size image (1x/2x/etc). Ifsizesis defined, a largesrcsetis generated, suitable for a responsive image (640w/750w/etc). If thesizesproperty includes sizes such as50vw, which represent a percentage of the viewport width, then thesrcsetis trimmed to not include any values which are too small to ever be necessary."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, if you know your styling will cause an image to be full-width on mobile devices, in a 2-column layout on tablets, and a 3-column layout on desktop displays, you should include a sizes property such as the following:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<divclassName=\"grid-element\"><Imagefillsrc=\"/example.png\"sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"/></div>)}"
                },
                {
                    "type": "p",
                    "text": "This examplesizescould have a dramatic effect on performance metrics. Without the33vwsizes, the image selected from the server would be 3 times as wide as it needs to be. Because file size is proportional to the square of the width, withoutsizesthe user would download an image that's 9 times larger than necessary."
                },
                {
                    "type": "p",
                    "text": "Learn more aboutsrcsetandsizes:"
                },
                {
                    "type": "list",
                    "items": [
                        "web.dev",
                        "mdn"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "quality"
                },
                {
                    "type": "code",
                    "code": "quality={75}// {number 1-100}"
                },
                {
                    "type": "p",
                    "text": "The quality of the optimized image, an integer between1and100, where100is the best quality and therefore largest file size. Defaults to75."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "priority"
                },
                {
                    "type": "code",
                    "code": "priority={false}// {false} | {true}"
                },
                {
                    "type": "p",
                    "text": "When true, the image will be considered high priority andpreload. Lazy loading is automatically disabled for images usingpriority."
                },
                {
                    "type": "p",
                    "text": "You should use thepriorityproperty on any image detected as theLargest Contentful Paint (LCP)element. It may be appropriate to have multiple priority images, as different images may be the LCP element for different viewport sizes."
                },
                {
                    "type": "p",
                    "text": "Should only be used when the image is visible above the fold. Defaults tofalse."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "placeholder"
                },
                {
                    "type": "code",
                    "code": "placeholder='empty'// \"empty\" | \"blur\" | \"data:image/...\""
                },
                {
                    "type": "p",
                    "text": "A placeholder to use while the image is loading. Possible values areblur,empty, ordata:image/.... Defaults toempty."
                },
                {
                    "type": "p",
                    "text": "Whenblur, theblurDataURLproperty will be used as the placeholder. Ifsrcis an object from astatic importand the imported image is.jpg,.png,.webp, or.avif, thenblurDataURLwill be automatically populated, except when the image is detected to be animated."
                },
                {
                    "type": "p",
                    "text": "For dynamic images, you must provide theblurDataURLproperty. Solutions such asPlaiceholdercan help withbase64generation."
                },
                {
                    "type": "p",
                    "text": "Whendata:image/..., theData URLwill be used as the placeholder while the image is loading."
                },
                {
                    "type": "p",
                    "text": "Whenempty, there will be no placeholder while the image is loading, only empty space."
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo theblurplaceholder",
                        "Demo the shimmer effect with data URLplaceholderprop",
                        "Demo the color effect withblurDataURLprop"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Advanced Props"
                },
                {
                    "type": "p",
                    "text": "In some cases, you may need more advanced usage. The<Image />component optionally accepts the following advanced properties."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "style"
                },
                {
                    "type": "p",
                    "text": "Allows passing CSS styles to the underlying image element."
                },
                {
                    "type": "code",
                    "code": "constimageStyle={borderRadius:'50%',border:'1px solid #fff',}exportdefaultfunctionProfileImage() {return<Imagesrc=\"...\"style={imageStyle} />}"
                },
                {
                    "type": "p",
                    "text": "Remember that the required width and height props can interact with your styling. If you use styling to modify an image's width, you should also style its height toautoto preserve its intrinsic aspect ratio, or your image will be distorted."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onLoadingComplete"
                },
                {
                    "type": "code",
                    "code": "'use client'<ImageonLoadingComplete={(img)=>console.log(img.naturalWidth)} />"
                },
                {
                    "type": "p",
                    "text": "Warning: Deprecated since Next.js 14 in favor ofonLoad."
                },
                {
                    "type": "p",
                    "text": "A callback function that is invoked once the image is completely loaded and theplaceholderhas been removed."
                },
                {
                    "type": "p",
                    "text": "The callback function will be called with one argument, a reference to the underlying<img>element."
                },
                {
                    "type": "p",
                    "text": "Good to know: Using props likeonLoadingComplete, which accept a function, requires usingClient Componentsto serialize the provided function."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onLoad"
                },
                {
                    "type": "code",
                    "code": "<ImageonLoad={(e)=>console.log(e.target.naturalWidth)} />"
                },
                {
                    "type": "p",
                    "text": "A callback function that is invoked once the image is completely loaded and theplaceholderhas been removed."
                },
                {
                    "type": "p",
                    "text": "The callback function will be called with one argument, the Event which has atargetthat references the underlying<img>element."
                },
                {
                    "type": "p",
                    "text": "Good to know: Using props likeonLoad, which accept a function, requires usingClient Componentsto serialize the provided function."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onError"
                },
                {
                    "type": "code",
                    "code": "<ImageonError={(e)=>console.error(e.target.id)} />"
                },
                {
                    "type": "p",
                    "text": "A callback function that is invoked if the image fails to load."
                },
                {
                    "type": "p",
                    "text": "Good to know: Using props likeonError, which accept a function, requires usingClient Componentsto serialize the provided function."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "loading"
                },
                {
                    "type": "p",
                    "text": "Recommendation: This property is only meant for advanced use cases. Switching an image to load witheagerwill normallyhurt performance. We recommend using thepriorityproperty instead, which will eagerly preload the image."
                },
                {
                    "type": "code",
                    "code": "loading='lazy'// {lazy} | {eager}"
                },
                {
                    "type": "p",
                    "text": "The loading behavior of the image. Defaults tolazy."
                },
                {
                    "type": "p",
                    "text": "Whenlazy, defer loading the image until it reaches a calculated distance from\nthe viewport."
                },
                {
                    "type": "p",
                    "text": "Wheneager, load the image immediately."
                },
                {
                    "type": "p",
                    "text": "Learn more about theloadingattribute."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "blurDataURL"
                },
                {
                    "type": "p",
                    "text": "AData URLto\nbe used as a placeholder image before thesrcimage successfully loads. Only takes effect when combined\nwithplaceholder=\"blur\"."
                },
                {
                    "type": "p",
                    "text": "Must be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or\nless) is recommended. Including larger images as placeholders may harm your application performance."
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the defaultblurDataURLprop",
                        "Demo the color effect withblurDataURLprop"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can alsogenerate a solid color Data URLto match the image."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "unoptimized"
                },
                {
                    "type": "code",
                    "code": "unoptimized={false}// {false} | {true}"
                },
                {
                    "type": "p",
                    "text": "When true, the source image will be served as-is instead of changing quality,\nsize, or format. Defaults tofalse."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'constUnoptimizedImage=(props)=>{return<Image{...props}unoptimized/>}"
                },
                {
                    "type": "p",
                    "text": "Since Next.js 12.3.0, this prop can be assigned to all images by updatingnext.config.jswith the following configuration:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{unoptimized:true,},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "overrideSrc"
                },
                {
                    "type": "p",
                    "text": "When providing thesrcprop to the<Image>component, both thesrcsetandsrcattributes are generated automatically for the resulting<img>."
                },
                {
                    "type": "code",
                    "code": "<Imagesrc=\"/me.jpg\"/>"
                },
                {
                    "type": "code",
                    "code": "<imgsrcset=\"/_next/image?url=%2Fme.jpg&w=640&q=75 1x,/_next/image?url=%2Fme.jpg&w=828&q=75 2x\"src=\"/_next/image?url=%2Fme.jpg&w=828&q=75\"/>"
                },
                {
                    "type": "p",
                    "text": "In some cases, it is not desirable to have thesrcattribute generated and you may wish to override it using theoverrideSrcprop."
                },
                {
                    "type": "p",
                    "text": "For example, when upgrading an existing website from<img>to<Image>, you may wish to maintain the samesrcattribute for SEO purposes such as image ranking or avoiding recrawl."
                },
                {
                    "type": "code",
                    "code": "<Imagesrc=\"/me.jpg\"overrideSrc=\"/override.jpg\"/>"
                },
                {
                    "type": "code",
                    "code": "<imgsrcset=\"/_next/image?url=%2Fme.jpg&w=640&q=75 1x,/_next/image?url=%2Fme.jpg&w=828&q=75 2x\"src=\"/override.jpg\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "decoding"
                },
                {
                    "type": "p",
                    "text": "A hint to the browser indicating if it should wait for the image to be decoded before presenting other content updates or not. Defaults toasync."
                },
                {
                    "type": "p",
                    "text": "Possible values are the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "async- Asynchronously decode the image and allow other content to be rendered before it completes.",
                        "sync- Synchronously decode the image for atomic presentation with other content.",
                        "auto- No preference for the decoding mode; the browser decides what's best."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about thedecodingattribute."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Other Props"
                },
                {
                    "type": "p",
                    "text": "Other properties on the<Image />component will be passed to the underlyingimgelement with the exception of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "srcSet. UseDevice Sizesinstead."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configuration Options"
                },
                {
                    "type": "p",
                    "text": "In addition to props, you can configure the Image Component innext.config.js. The following options are available:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "localPatterns"
                },
                {
                    "type": "p",
                    "text": "You can optionally configurelocalPatternsin yournext.config.jsfile in order to allow specific paths to be optimized and block all others paths."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{localPatterns:[{pathname:'/assets/images/**',search:'',},],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start with/assets/images/and must not have a query string. Attempting to optimize any other path will respond with 400 Bad Request."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "remotePatterns"
                },
                {
                    "type": "p",
                    "text": "To protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with theremotePatternsproperty in yournext.config.jsfile, as shown below:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'example.com',port:'',pathname:'/account123/**',search:'',},],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start withhttps://example.com/account123/and must not have a query string. Any other protocol, hostname, port, or unmatched path will respond with 400 Bad Request."
                },
                {
                    "type": "p",
                    "text": "Below is an example of theremotePatternsproperty in thenext.config.jsfile using a wildcard pattern in thehostname:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'**.example.com',port:'',search:'',},],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start withhttps://img1.example.comorhttps://me.avatar.example.comor any number of subdomains. It cannot have a port or query string. Any other protocol or unmatched hostname will respond with 400 Bad Request."
                },
                {
                    "type": "p",
                    "text": "Wildcard patterns can be used for bothpathnameandhostnameand have the following syntax:"
                },
                {
                    "type": "list",
                    "items": [
                        "*match a single path segment or subdomain",
                        "**match any number of path segments at the end or subdomains at the beginning"
                    ]
                },
                {
                    "type": "p",
                    "text": "The**syntax does not work in the middle of the pattern."
                },
                {
                    "type": "p",
                    "text": "Good to know: When omittingprotocol,port,pathname, orsearchthen the wildcard**is implied. This is not recommended because it may allow malicious actors to optimize urls you did not intend."
                },
                {
                    "type": "p",
                    "text": "Below is an example of theremotePatternsproperty in thenext.config.jsfile usingsearch:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'assets.example.com',search:'?v=1727111025337',},],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start withhttps://assets.example.comand must have the exact query string?v=1727111025337. Any other protocol or query string will respond with 400 Bad Request."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "domains"
                },
                {
                    "type": "p",
                    "text": "Warning: Deprecated since Next.js 14 in favor of strictremotePatternsin order to protect your application from malicious users. Only usedomainsif you own all the content served from the domain."
                },
                {
                    "type": "p",
                    "text": "Similar toremotePatterns, thedomainsconfiguration can be used to provide a list of allowed hostnames for external images."
                },
                {
                    "type": "p",
                    "text": "However, thedomainsconfiguration does not support wildcard pattern matching and it cannot restrict protocol, port, or pathname."
                },
                {
                    "type": "p",
                    "text": "Below is an example of thedomainsproperty in thenext.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{domains:['assets.acme.com'],},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "loaderFile"
                },
                {
                    "type": "p",
                    "text": "If you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure theloaderFilein yournext.config.jslike the following:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{loader:'custom',loaderFile:'./my/image/loader.js',},}"
                },
                {
                    "type": "p",
                    "text": "This must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:"
                },
                {
                    "type": "code",
                    "code": "'use client'exportdefaultfunctionmyImageLoader({ src,width,quality }) {return`https://example.com/${src}?w=${width}&q=${quality||75}`}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use theloaderpropto configure each instance ofnext/image."
                },
                {
                    "type": "p",
                    "text": "Examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Image Loader Configuration"
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: Customizing the image loader file, which accepts a function, requires usingClient Componentsto serialize the provided function."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Advanced"
                },
                {
                    "type": "p",
                    "text": "The following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "deviceSizes"
                },
                {
                    "type": "p",
                    "text": "If you know the expected device widths of your users, you can specify a list of device width breakpoints using thedeviceSizesproperty innext.config.js. These widths are used when thenext/imagecomponent usessizesprop to ensure the correct image is served for user's device."
                },
                {
                    "type": "p",
                    "text": "If no configuration is provided, the default below is used."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{deviceSizes:[640,750,828,1080,1200,1920,2048,3840],},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "imageSizes"
                },
                {
                    "type": "p",
                    "text": "You can specify a list of image widths using theimages.imageSizesproperty in yournext.config.jsfile. These widths are concatenated with the array ofdevice sizesto form the full array of sizes used to generate imagesrcsets."
                },
                {
                    "type": "p",
                    "text": "The reason there are two separate lists is that imageSizes is only used for images which provide asizesprop, which indicates that the image is less than the full width of the screen.Therefore, the sizes in imageSizes should all be smaller than the smallest size in deviceSizes."
                },
                {
                    "type": "p",
                    "text": "If no configuration is provided, the default below is used."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{imageSizes:[16,32,48,64,96,128,256,384],},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "formats"
                },
                {
                    "type": "p",
                    "text": "The defaultImage Optimization APIwill automatically detect the browser's supported image formats via the request'sAcceptheader."
                },
                {
                    "type": "p",
                    "text": "If theAccepthead matches more than one of the configured formats, the first match in the array is used. Therefore, the array order matters. If there is no match (or the source image isanimated), the Image Optimization API will fallback to the original image's format."
                },
                {
                    "type": "p",
                    "text": "If no configuration is provided, the default below is used."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{formats:['image/webp'],},}"
                },
                {
                    "type": "p",
                    "text": "You can enable AVIF support with the following configuration."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{formats:['image/avif','image/webp'],},}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "AVIF generally takes 20% longer to encode but it compresses 20% smaller compared to WebP. This means that the first time an image is requested, it will typically be slower and then subsequent requests that are cached will be faster.",
                        "If you self-host with a Proxy/CDN in front of Next.js, you must configure the Proxy to forward theAcceptheader."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Caching Behavior"
                },
                {
                    "type": "p",
                    "text": "The following describes the caching algorithm for the defaultloader. For all other loaders, please refer to your cloud provider's documentation."
                },
                {
                    "type": "p",
                    "text": "Images are optimized dynamically upon request and stored in the<distDir>/cache/imagesdirectory. The optimized image file will be served for subsequent requests until the expiration is reached. When a request is made that matches a cached but expired file, the expired image is served stale immediately. Then the image is optimized again in the background (also called revalidation) and saved to the cache with the new expiration date."
                },
                {
                    "type": "p",
                    "text": "The cache status of an image can be determined by reading the value of thex-nextjs-cacheresponse header. The possible values are the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "MISS- the path is not in the cache (occurs at most once, on the first visit)",
                        "STALE- the path is in the cache but exceeded the revalidate time so it will be updated in the background",
                        "HIT- the path is in the cache and has not exceeded the revalidate time"
                    ]
                },
                {
                    "type": "p",
                    "text": "The expiration (or rather Max Age) is defined by either theminimumCacheTTLconfiguration or the upstream imageCache-Controlheader, whichever is larger. Specifically, themax-agevalue of theCache-Controlheader is used. If boths-maxageandmax-ageare found, thens-maxageis preferred. Themax-ageis also passed-through to any downstream clients including CDNs and browsers."
                },
                {
                    "type": "list",
                    "items": [
                        "You can configureminimumCacheTTLto increase the cache duration when the upstream image does not includeCache-Controlheader or the value is very low.",
                        "You can configuredeviceSizesandimageSizesto reduce the total number of possible generated images.",
                        "You can configureformatsto disable multiple formats in favor of a single image format."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "minimumCacheTTL"
                },
                {
                    "type": "p",
                    "text": "You can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use aStatic Image Importwhich will automatically hash the file contents and cache the image forever with aCache-Controlheader ofimmutable."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{minimumCacheTTL:60,},}"
                },
                {
                    "type": "p",
                    "text": "The expiration (or rather Max Age) of the optimized image is defined by either theminimumCacheTTLor the upstream imageCache-Controlheader, whichever is larger."
                },
                {
                    "type": "p",
                    "text": "If you need to change the caching behavior per image, you can configureheadersto set theCache-Controlheader on the upstream image (e.g./some-asset.jpg, not/_next/imageitself)."
                },
                {
                    "type": "p",
                    "text": "There is no mechanism to invalidate the cache at this time, so its best to keepminimumCacheTTLlow. Otherwise you may need to manually change thesrcprop or delete<distDir>/cache/images."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "disableStaticImages"
                },
                {
                    "type": "p",
                    "text": "The default behavior allows you to import static files such asimport icon from './icon.png'and then pass that to thesrcproperty."
                },
                {
                    "type": "p",
                    "text": "In some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently."
                },
                {
                    "type": "p",
                    "text": "You can disable static image imports inside yournext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{disableStaticImages:true,},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "dangerouslyAllowSVG"
                },
                {
                    "type": "p",
                    "text": "The defaultloaderdoes not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without properContent Security Policy (CSP) headers."
                },
                {
                    "type": "p",
                    "text": "Therefore, we recommended using theunoptimizedprop when thesrcprop is known to be SVG. This happens automatically whensrcends with\".svg\"."
                },
                {
                    "type": "p",
                    "text": "However, if you need to serve SVG images with the default Image Optimization API, you can setdangerouslyAllowSVGinside yournext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{dangerouslyAllowSVG:true,contentDispositionType:'attachment',contentSecurityPolicy:\"default-src 'self'; script-src 'none'; sandbox;\",},}"
                },
                {
                    "type": "p",
                    "text": "In addition, it is strongly recommended to also setcontentDispositionTypeto force the browser to download the image, as well ascontentSecurityPolicyto prevent scripts embedded in the image from executing."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Animated Images"
                },
                {
                    "type": "p",
                    "text": "The defaultloaderwill automatically bypass Image Optimization for animated images and serve the image as-is."
                },
                {
                    "type": "p",
                    "text": "Auto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use theunoptimizedprop."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Responsive Images"
                },
                {
                    "type": "p",
                    "text": "The default generatedsrcsetcontains1xand2ximages in order to support different device pixel ratios. However, you may wish to render a responsive image that stretches with the viewport. In that case, you'll need to setsizesas well asstyle(orclassName)."
                },
                {
                    "type": "p",
                    "text": "You can render a responsive image using one of the following methods below."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive image using a static import"
                },
                {
                    "type": "p",
                    "text": "If the source image is not dynamic, you can statically import to create a responsive image:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'importmefrom'../photos/me.jpg'exportdefaultfunctionAuthor() {return(<Imagesrc={me}alt=\"Picture of the author\"sizes=\"100vw\"style={{width:'100%',height:'auto',}}/>)}"
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the image responsive to viewport"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive image with aspect ratio"
                },
                {
                    "type": "p",
                    "text": "If the source image is a dynamic or a remote url, you will also need to providewidthandheightto set the correct aspect ratio of the responsive image:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage({ photoUrl }) {return(<Imagesrc={photoUrl}alt=\"Picture of the author\"sizes=\"100vw\"style={{width:'100%',height:'auto',}}width={500}height={300}/>)}"
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the image responsive to viewport"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive image withfill"
                },
                {
                    "type": "p",
                    "text": "If you don't know the aspect ratio, you will need to set thefillprop and setposition: relativeon the parent. Optionally, you can setobject-fitstyle depending on the desired stretch vs crop behavior:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage({ photoUrl }) {return(<divstyle={{ position:'relative',width:'300px',height:'500px'}}><Imagesrc={photoUrl}alt=\"Picture of the author\"sizes=\"300px\"fillstyle={{objectFit:'contain',}}/></div>)}"
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo thefillprop"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Theme Detection CSS"
                },
                {
                    "type": "p",
                    "text": "If you want to display a different image for light and dark mode, you can create a new component that wraps two<Image>components and reveals the correct one based on a CSS media query."
                },
                {
                    "type": "code",
                    "code": ".imgDark{display:none;}@media(prefers-color-scheme:dark) {.imgLight{display:none;}.imgDark{display:unset;}}"
                },
                {
                    "type": "code",
                    "code": "importstylesfrom'./theme-image.module.css'importImage,{ ImageProps }from'next/image'typeProps=Omit<ImageProps,'src'|'priority'|'loading'>&{srcLight:stringsrcDark:string}constThemeImage=(props:Props)=>{const{srcLight,srcDark,...rest}=propsreturn(<><Image{...rest}src={srcLight}className={styles.imgLight} /><Image{...rest}src={srcDark}className={styles.imgDark} /></>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: The default behavior ofloading=\"lazy\"ensures that only the correct image is loaded. You cannot usepriorityorloading=\"eager\"because that would cause both images to load. Instead, you can usefetchPriority=\"high\"."
                },
                {
                    "type": "p",
                    "text": "Try it out:"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo light/dark mode theme detection"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "getImageProps"
                },
                {
                    "type": "p",
                    "text": "For more advanced use cases, you can callgetImageProps()to get the props that would be passed to the underlying<img>element, and instead pass to them to another component, style, canvas, etc."
                },
                {
                    "type": "p",
                    "text": "This also avoid calling ReactuseState()so it can lead to better performance, but it cannot be used with theplaceholderprop because the placeholder will never be removed."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Theme Detection Picture"
                },
                {
                    "type": "p",
                    "text": "If you want to display a different image for light and dark mode, you can use the<picture>element to display a different image based on the user'spreferred color scheme."
                },
                {
                    "type": "code",
                    "code": "import{ getImageProps }from'next/image'exportdefaultfunctionPage() {constcommon={ alt:'Theme Example',width:800,height:400}const{props: { srcSet:dark},}=getImageProps({...common,src:'/dark.png'})const{props: { srcSet:light,...rest},}=getImageProps({...common,src:'/light.png'})return(<picture><sourcemedia=\"(prefers-color-scheme: dark)\"srcSet={dark} /><sourcemedia=\"(prefers-color-scheme: light)\"srcSet={light} /><img{...rest} /></picture>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Art Direction"
                },
                {
                    "type": "p",
                    "text": "If you want to display a different image for mobile and desktop, sometimes calledArt Direction, you can provide differentsrc,width,height, andqualityprops togetImageProps()."
                },
                {
                    "type": "code",
                    "code": "import{ getImageProps }from'next/image'exportdefaultfunctionHome() {constcommon={ alt:'Art Direction Example',sizes:'100vw'}const{props: { srcSet:desktop},}=getImageProps({...common,width:1440,height:875,quality:80,src:'/desktop.jpg',})const{props: { srcSet:mobile,...rest},}=getImageProps({...common,width:750,height:1334,quality:70,src:'/mobile.jpg',})return(<picture><sourcemedia=\"(min-width: 1000px)\"srcSet={desktop} /><sourcemedia=\"(min-width: 500px)\"srcSet={mobile} /><img{...rest}style={{ width:'100%',height:'auto'}} /></picture>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Background CSS"
                },
                {
                    "type": "p",
                    "text": "You can even convert thesrcSetstring to theimage-set()CSS function to optimize a background image."
                },
                {
                    "type": "code",
                    "code": "import{ getImageProps }from'next/image'functiongetBackgroundImage(srcSet='') {constimageSet=srcSet.split(', ').map((str)=>{const[url,dpi]=str.split(' ')return`url(\"${url}\")${dpi}`}).join(', ')return`image-set(${imageSet})`}exportdefaultfunctionHome() {const{props: {srcSet},}=getImageProps({ alt:'',width:128,height:128,src:'/img.png'})constbackgroundImage=getBackgroundImage(srcSet)conststyle={ height:'100vh',width:'100vw',backgroundImage }return(<mainstyle={style}><h1>Hello World</h1></main>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Known Browser Bugs"
                },
                {
                    "type": "p",
                    "text": "Thisnext/imagecomponent uses browser nativelazy loading, which may fallback to eager loading for older browsers before Safari 15.4. When using the blur-up placeholder, older browsers before Safari 12 will fallback to empty placeholder. When using styles withwidth/heightofauto, it is possible to causeLayout Shifton older browsers before Safari 15 that don'tpreserve the aspect ratio. For more details, seethis MDN video."
                },
                {
                    "type": "list",
                    "items": [
                        "Safari 15 - 16.3display a gray border while loading. Safari 16.4fixed this issue. Possible solutions:Use CSS@supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }Usepriorityif the image is above the fold",
                        "Use CSS@supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }",
                        "Usepriorityif the image is above the fold",
                        "Firefox 67+displays a white background while loading. Possible solutions:EnableAVIFformatsUseplaceholder",
                        "EnableAVIFformats",
                        "Useplaceholder"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use CSS@supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }",
                        "Usepriorityif the image is above the fold"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "EnableAVIFformats",
                        "Useplaceholder"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components/link",
            "title": "Components: <Link> | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "<Link>"
                },
                {
                    "type": "p",
                    "text": "<Link>is a React component that extends the HTML<a>element to provideprefetchingand client-side navigation between routes. It is the primary way to navigate between routes in Next.js."
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return<Linkhref=\"/dashboard\">Dashboard</Link>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "p",
                    "text": "Here's a summary of the props available for the Link Component:"
                },
                {
                    "type": "p",
                    "text": "Good to know:<a>tag attributes such asclassNameortarget=\"_blank\"can be added to<Link>as props and will be passed to the underlying<a>element."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "href(required)"
                },
                {
                    "type": "p",
                    "text": "The path or URL to navigate to."
                },
                {
                    "type": "code",
                    "code": "<Linkhref=\"/dashboard\">Dashboard</Link>"
                },
                {
                    "type": "p",
                    "text": "hrefcan also accept an object, for example:"
                },
                {
                    "type": "code",
                    "code": "// Navigate to /about?name=test<Linkhref={{pathname:'/about',query:{ name:'test'},}}>About</Link>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "replace"
                },
                {
                    "type": "p",
                    "text": "Defaults tofalse.Whentrue,next/linkwill replace the current history state instead of adding a new URL into thebrowser’s historystack."
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<Linkhref=\"/dashboard\"replace>Dashboard</Link>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "scroll"
                },
                {
                    "type": "p",
                    "text": "Defaults totrue.The default behavior of<Link>is to scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation.Whenfalse,next/linkwillnotscroll to the top of the page after a navigation."
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<Linkhref=\"/dashboard\"scroll={false}>Dashboard</Link>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js will scroll to thePageif it is not visible in the viewport upon navigation."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "prefetch"
                },
                {
                    "type": "p",
                    "text": "Prefetching happens when a<Link />component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by thehref) and its data in the background to improve the performance of client-side navigations. Prefetching is only enabled in production."
                },
                {
                    "type": "list",
                    "items": [
                        "null(default): Prefetch behavior depends on whether the route is static or dynamic. For static routes, the full route will be prefetched (including all its data). For dynamic routes, the partial route down to the nearest segment with aloading.jsboundary will be prefetched.",
                        "true: The full route will be prefetched for both static and dynamic routes.",
                        "false: Prefetching will never happen both on entering the viewport and on hover."
                    ]
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<Linkhref=\"/dashboard\"prefetch={false}>Dashboard</Link>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Linking to Dynamic Routes"
                },
                {
                    "type": "p",
                    "text": "For dynamic routes, it can be handy to use template literals to create the link's path."
                },
                {
                    "type": "p",
                    "text": "For example, you can generate a list of links to the dynamic routeapp/blog/[slug]/page.js:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'functionPage({ posts }) {return(<ul>{posts.map((post)=>(<likey={post.id}><Linkhref={`/blog/${post.slug}`}>{post.title}</Link></li>))}</ul>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "If the child is a custom component that wraps an<a>tag"
                },
                {
                    "type": "p",
                    "text": "If the child ofLinkis a custom component that wraps an<a>tag, you must addpassHreftoLink. This is necessary if you’re using libraries likestyled-components. Without this, the<a>tag will not have thehrefattribute, which hurts your site's accessibility and might affect SEO. If you're usingESLint, there is a built-in rulenext/link-passhrefto ensure correct usage ofpassHref."
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'importstyledfrom'styled-components'// This creates a custom component that wraps an <a> tagconstRedLink=styled.a`color: red;`functionNavLink({ href,name }) {return(<Linkhref={href}passHreflegacyBehavior><RedLink>{name}</RedLink></Link>)}exportdefaultNavLink"
                },
                {
                    "type": "list",
                    "items": [
                        "If you’re usingemotion’s JSX pragma feature (@jsx jsx), you must usepassHrefeven if you use an<a>tag directly.",
                        "The component should supportonClickproperty to trigger navigation correctly"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "If the child is a functional component"
                },
                {
                    "type": "p",
                    "text": "If the child ofLinkis a functional component, in addition to usingpassHrefandlegacyBehavior, you must wrap the component inReact.forwardRef:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'// `onClick`, `href`, and `ref` need to be passed to the DOM element// for proper handlingconstMyButton=React.forwardRef(({ onClick,href },ref)=>{return(<ahref={href}onClick={onClick}ref={ref}>Click Me</a>)})functionHome() {return(<Linkhref=\"/about\"passHreflegacyBehavior><MyButton/></Link>)}exportdefaultHome"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "With URL Object"
                },
                {
                    "type": "p",
                    "text": "Linkcan also receive a URL object and it will automatically format it to create the URL string. Here's how to do it:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'functionHome() {return(<ul><li><Linkhref={{pathname:'/about',query:{ name:'test'},}}>About us</Link></li><li><Linkhref={{pathname:'/blog/[slug]',query:{ slug:'my-post'},}}>Blog Post</Link></li></ul>)}exportdefaultHome"
                },
                {
                    "type": "p",
                    "text": "The above example has a link to:"
                },
                {
                    "type": "list",
                    "items": [
                        "A predefined route:/about?name=test",
                        "Adynamic route:/blog/my-post"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can use every property as defined in theNode.js URL module documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Replace the URL instead of push"
                },
                {
                    "type": "p",
                    "text": "The default behavior of theLinkcomponent is topusha new URL into thehistorystack. You can use thereplaceprop to prevent adding a new entry, as in the following example:"
                },
                {
                    "type": "code",
                    "code": "<Linkhref=\"/about\"replace>About us</Link>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Disable scrolling to the top of the page"
                },
                {
                    "type": "p",
                    "text": "The default behavior ofLinkis to scroll to the top of the page. When there is a hash defined it will scroll to the specific id, like a normal<a>tag. To prevent scrolling to the top / hashscroll={false}can be added toLink:"
                },
                {
                    "type": "code",
                    "code": "<Linkhref=\"/#hashid\"scroll={false}>Disables scrolling to the top</Link>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Middleware"
                },
                {
                    "type": "p",
                    "text": "It's common to useMiddlewarefor authentication or other purposes that involve rewriting the user to a different page. In order for the<Link />component to properly prefetch links with rewrites via Middleware, you need to tell Next.js both the URL to display and the URL to prefetch. This is required to avoid un-necessary fetches to middleware to know the correct route to prefetch."
                },
                {
                    "type": "p",
                    "text": "For example, if you want to serve a/dashboardroute that has authenticated and visitor views, you may add something similar to the following in your Middleware to redirect the user to the correct page:"
                },
                {
                    "type": "code",
                    "code": "exportfunctionmiddleware(req) {constnextUrl=req.nextUrlif(nextUrl.pathname==='/dashboard') {if(req.cookies.authToken) {returnNextResponse.rewrite(newURL('/auth/dashboard',req.url))}else{returnNextResponse.rewrite(newURL('/public/dashboard',req.url))}}}"
                },
                {
                    "type": "p",
                    "text": "In this case, you would want to use the following code in your<Link />component:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'importuseIsAuthedfrom'./hooks/useIsAuthed'exportdefaultfunctionPage() {constisAuthed=useIsAuthed()constpath=isAuthed?'/auth/dashboard':'/public/dashboard'return(<Linkas=\"/dashboard\"href={path}>Dashboard</Link>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components/script",
            "title": "Components: <Script> | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "<Script>"
                },
                {
                    "type": "p",
                    "text": "This API reference will help you understand how to usepropsavailable for the Script Component. For features and usage, please see theOptimizing Scriptspage."
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionDashboard() {return(<><Scriptsrc=\"https://example.com/script.js\"/></>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "p",
                    "text": "Here's a summary of the props available for the Script Component:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Required Props"
                },
                {
                    "type": "p",
                    "text": "The<Script />component requires the following properties."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "src"
                },
                {
                    "type": "p",
                    "text": "A path string specifying the URL of an external script. This can be either an absolute external URL or an internal path. Thesrcproperty is required unless an inline script is used."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Optional Props"
                },
                {
                    "type": "p",
                    "text": "The<Script />component accepts a number of additional properties beyond those which are required."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "strategy"
                },
                {
                    "type": "p",
                    "text": "The loading strategy of the script. There are four different strategies that can be used:"
                },
                {
                    "type": "list",
                    "items": [
                        "beforeInteractive: Load before any Next.js code and before any page hydration occurs.",
                        "afterInteractive: (default) Load early but after some hydration on the page occurs.",
                        "lazyOnload: Load during browser idle time.",
                        "worker: (experimental) Load in a web worker."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "beforeInteractive"
                },
                {
                    "type": "p",
                    "text": "Scripts that load with thebeforeInteractivestrategy are injected into the initial HTML from the server, downloaded before any Next.js module, and executed in the order they are placed beforeanyhydration occurs on the page."
                },
                {
                    "type": "p",
                    "text": "Scripts denoted with this strategy are preloaded and fetched before any first-party code, but their execution does not block page hydration from occurring."
                },
                {
                    "type": "p",
                    "text": "beforeInteractivescripts must be placed inside the root layout (app/layout.tsx) and are designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side)."
                },
                {
                    "type": "p",
                    "text": "This strategy should only be used for critical scripts that need to be fetched before any part of the page becomes interactive."
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}<Scriptsrc=\"https://example.com/script.js\"strategy=\"beforeInteractive\"/></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Scripts withbeforeInteractivewill always be injected inside theheadof the HTML document regardless of where it's placed in the component."
                },
                {
                    "type": "p",
                    "text": "Some examples of scripts that should be loaded as soon as possible withbeforeInteractiveinclude:"
                },
                {
                    "type": "list",
                    "items": [
                        "Bot detectors",
                        "Cookie consent managers"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "afterInteractive"
                },
                {
                    "type": "p",
                    "text": "Scripts that use theafterInteractivestrategy are injected into the HTML client-side and will load after some (or all) hydration occurs on the page.This is the default strategyof the Script component and should be used for any script that needs to load as soon as possible but not before any first-party Next.js code."
                },
                {
                    "type": "p",
                    "text": "afterInteractivescripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser."
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"strategy=\"afterInteractive\"/></>)}"
                },
                {
                    "type": "p",
                    "text": "Some examples of scripts that are good candidates forafterInteractiveinclude:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tag managers",
                        "Analytics"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "lazyOnload"
                },
                {
                    "type": "p",
                    "text": "Scripts that use thelazyOnloadstrategy are injected into the HTML client-side during browser idle time and will load after all resources on the page have been fetched. This strategy should be used for any background or low priority scripts that do not need to load early."
                },
                {
                    "type": "p",
                    "text": "lazyOnloadscripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser."
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"strategy=\"lazyOnload\"/></>)}"
                },
                {
                    "type": "p",
                    "text": "Examples of scripts that do not need to load immediately and can be fetched withlazyOnloadinclude:"
                },
                {
                    "type": "list",
                    "items": [
                        "Chat support plugins",
                        "Social media widgets"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "worker"
                },
                {
                    "type": "p",
                    "text": "Warning:Theworkerstrategy is not yet stable and does not yet work with theappdirectory. Use with caution."
                },
                {
                    "type": "p",
                    "text": "Scripts that use theworkerstrategy are off-loaded to a web worker in order to free up the main thread and ensure that only critical, first-party resources are processed on it. While this strategy can be used for any script, it is an advanced use case that is not guaranteed to support all third-party scripts."
                },
                {
                    "type": "p",
                    "text": "To useworkeras a strategy, thenextScriptWorkersflag must be enabled innext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{nextScriptWorkers:true,},}"
                },
                {
                    "type": "p",
                    "text": "workerscripts canonly currently be used in thepages/directory:"
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionHome() {return(<><Scriptsrc=\"https://example.com/script.js\"strategy=\"worker\"/></>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onLoad"
                },
                {
                    "type": "p",
                    "text": "Warning:onLoaddoes not yet work with Server Components and can only be used in Client Components. Further,onLoadcan't be used withbeforeInteractive– consider usingonReadyinstead."
                },
                {
                    "type": "p",
                    "text": "Some third-party scripts require users to run JavaScript code once after the script has finished loading in order to instantiate content or call a function. If you are loading a script with either afterInteractive or lazyOnload as a loading strategy, you can execute code after it has loaded using the onLoad property."
                },
                {
                    "type": "p",
                    "text": "Here's an example of executing a lodash method only after the library has been loaded."
                },
                {
                    "type": "code",
                    "code": "'use client'importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"onLoad={()=>{console.log(_.sample([1,2,3,4]))}}/></>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onReady"
                },
                {
                    "type": "p",
                    "text": "Warning:onReadydoes not yet work with Server Components and can only be used in Client Components."
                },
                {
                    "type": "p",
                    "text": "Some third-party scripts require users to run JavaScript code after the script has finished loading and every time the component is mounted (after a route navigation for example). You can execute code after the script's load event when it first loads and then after every subsequent component re-mount using the onReady property."
                },
                {
                    "type": "p",
                    "text": "Here's an example of how to re-instantiate a Google Maps JS embed every time the component is mounted:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useRef }from'react'importScriptfrom'next/script'exportdefaultfunctionPage() {constmapRef=useRef()return(<><divref={mapRef}></div><Scriptid=\"google-maps\"src=\"https://maps.googleapis.com/maps/api/js\"onReady={()=>{newgoogle.maps.Map(mapRef.current,{center:{ lat:-34.397,lng:150.644},zoom:8,})}}/></>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onError"
                },
                {
                    "type": "p",
                    "text": "Warning:onErrordoes not yet work with Server Components and can only be used in Client Components.onErrorcannot be used with thebeforeInteractiveloading strategy."
                },
                {
                    "type": "p",
                    "text": "Sometimes it is helpful to catch when a script fails to load. These errors can be handled with the onError property:"
                },
                {
                    "type": "code",
                    "code": "'use client'importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"onError={(e:Error)=>{console.error('Script failed to load',e)}}/></>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
            "title": "CLI: create-next-app | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "create-next-app"
                },
                {
                    "type": "p",
                    "text": "Thecreate-next-appCLI allow you to quickly create a new Next.js application using the default template or anexamplefrom a public Github repository. It is the easiest way to get started with Next.js."
                },
                {
                    "type": "p",
                    "text": "Basic usage:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest[project-name] [options]"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reference"
                },
                {
                    "type": "p",
                    "text": "The following options are available:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "With the default template"
                },
                {
                    "type": "p",
                    "text": "To create a new app using the default template, run the following command in your terminal:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest"
                },
                {
                    "type": "p",
                    "text": "You will then be asked the following prompts:"
                },
                {
                    "type": "code",
                    "code": "What is your project named?  my-appWould you like to use TypeScript?  No / YesWould you like to use ESLint?  No / YesWould you like to use Tailwind CSS?  No / YesWould you like your code inside a `src/` directory?  No / YesWould you like to use App Router? (recommended)  No / YesWould you like to use Turbopack for `next dev`?  No / YesWould you like to customize the import alias (`@/*` by default)?  No / Yes"
                },
                {
                    "type": "p",
                    "text": "Once you've answered the prompts, a new project will be created with your chosen configuration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "With an official Next.js example"
                },
                {
                    "type": "p",
                    "text": "To create a new app using an official Next.js example, use the--exampleflag with the following command:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest--example[your-project-name] [example-name]"
                },
                {
                    "type": "p",
                    "text": "You can view a list of all available examples along with setup instructions in theNext.js repository."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "With any public Github example"
                },
                {
                    "type": "p",
                    "text": "To create a new app using any public Github example, use the--exampleoption with the Github repo's URL. For example:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest--example[your-project-name]\"https://github.com/.../\""
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/edge",
            "title": "API Reference: Edge Runtime | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Edge Runtime"
                },
                {
                    "type": "p",
                    "text": "The Next.js Edge Runtime is based on standard Web APIs, it supports the following APIs:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Network APIs"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Encoding APIs"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Stream APIs"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Crypto APIs"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Web Standard APIs"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next.js Specific Polyfills"
                },
                {
                    "type": "list",
                    "items": [
                        "AsyncLocalStorage"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Environment Variables"
                },
                {
                    "type": "p",
                    "text": "You can useprocess.envto accessEnvironment Variablesfor bothnext devandnext build."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Unsupported APIs"
                },
                {
                    "type": "p",
                    "text": "The Edge Runtime has some restrictions including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Native Node.js APIsare not supported. For example, you can't read or write to the filesystem.",
                        "node_modulescanbe used, as long as they implement ES Modules and do not use native Node.js APIs.",
                        "Callingrequiredirectly isnot allowed. Use ES Modules instead."
                    ]
                },
                {
                    "type": "p",
                    "text": "The following JavaScript language features are disabled, andwill not work:"
                },
                {
                    "type": "p",
                    "text": "In rare cases, your code could contain (or import) some dynamic code evaluation statements whichcan not be reached at runtimeand which can not be removed by treeshaking.\nYou can relax the check to allow specific files with your Middleware or Edge API Route exported configuration:"
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={runtime:'edge',// for Edge API Routes onlyunstable_allowDynamic:[// allows a single file'/lib/utilities.js',// use a glob to allow anything in the function-bind 3rd party module'/node_modules/function-bind/**',],}"
                },
                {
                    "type": "p",
                    "text": "unstable_allowDynamicis aglob, or an array of globs, ignoring dynamic code evaluation for specific files. The globs are relative to your application root folder."
                },
                {
                    "type": "p",
                    "text": "Be warned that if these statements are executed on the Edge,they will throw and cause a runtime error."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions",
            "title": "API Reference: File Conventions | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "File Conventions"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "default.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "error.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "instrumentation.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "layout.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "loading.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "middleware.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "not-found.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "page.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "route.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Segment Config"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "template.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata Files"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/default",
            "title": "File Conventions: default.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "default.js"
                },
                {
                    "type": "p",
                    "text": "Thedefault.jsfile is used to render a fallback withinParallel Routeswhen Next.js cannot recover aslot'sactive state after a full-page load."
                },
                {
                    "type": "p",
                    "text": "Duringsoft navigation, Next.js keeps track of the activestate(subpage) for each slot. However, for hard navigations (full-page load), Next.js cannot recover the active state. In this case, adefault.jsfile can be rendered for subpages that don't match the current URL."
                },
                {
                    "type": "p",
                    "text": "Consider the following folder structure. The@teamslot has asettingspage, but@analyticsdoes not."
                },
                {
                    "type": "p",
                    "text": "When navigating to/settings, the@teamslot will render thesettingspage while maintaining the currently active page for the@analyticsslot."
                },
                {
                    "type": "p",
                    "text": "On refresh, Next.js will render adefault.jsfor@analytics. Ifdefault.jsdoesn't exist, a404is rendered instead."
                },
                {
                    "type": "p",
                    "text": "Additionally, sincechildrenis an implicit slot, you also need to create adefault.jsfile to render a fallback forchildrenwhen Next.js cannot recover the active state of the parent page."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "params(optional)"
                },
                {
                    "type": "p",
                    "text": "An object containing thedynamic route parametersfrom the root segment down to the slot's subpages. For example:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Learn more about Parallel Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Parallel Routes"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/error",
            "title": "File Conventions: error.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "error.js"
                },
                {
                    "type": "p",
                    "text": "Anerrorfile defines an error UI boundary for a route segment."
                },
                {
                    "type": "p",
                    "text": "It is useful for catchingunexpectederrors that occur in Server Components and Client Components and displaying a fallback UI."
                },
                {
                    "type": "code",
                    "code": "'use client'// Error components must be Client Componentsimport{ useEffect }from'react'exportdefaultfunctionError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {useEffect(()=>{// Log the error to an error reporting serviceconsole.error(error)},[error])return(<div><h2>Something went wrong!</h2><buttononClick={// Attempt to recover by trying to re-render the segment()=>reset()}>Try again</button></div>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "error"
                },
                {
                    "type": "p",
                    "text": "An instance of anErrorobject forwarded to theerror.jsClient Component."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "error.message"
                },
                {
                    "type": "p",
                    "text": "The error message."
                },
                {
                    "type": "list",
                    "items": [
                        "For errors forwarded from Client Components, this will be the original Error's message.",
                        "For errors forwarded from Server Components, this will be a generic error message to avoid leaking sensitive details.errors.digestcan be used to match the corresponding error in server-side logs."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "error.digest"
                },
                {
                    "type": "p",
                    "text": "An automatically generated hash of the error thrown in a Server Component. It can be used to match the corresponding error in server-side logs."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "reset"
                },
                {
                    "type": "p",
                    "text": "A function to reset the error boundary. When executed, the function will try to re-render the Error boundary's contents. If successful, the fallback error component is replaced with the result of the re-render."
                },
                {
                    "type": "p",
                    "text": "Can be used to prompt the user to attempt to recover from the error."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "error.jsboundaries must beClient Components.",
                        "In Production builds, errors forwarded from Server Components will be stripped of specific error details to avoid leaking sensitive information.",
                        "Anerror.jsboundary willnothandle errors thrown in alayout.jscomponent in thesamesegment because the error boundary is nestedinsidethat layouts component.To handle errors for a specific layout, place anerror.jsfile in the layouts parent segment.To handle errors within the root layout or template, use a variation oferror.jscalledapp/global-error.js.",
                        "To handle errors for a specific layout, place anerror.jsfile in the layouts parent segment.",
                        "To handle errors within the root layout or template, use a variation oferror.jscalledapp/global-error.js."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To handle errors for a specific layout, place anerror.jsfile in the layouts parent segment.",
                        "To handle errors within the root layout or template, use a variation oferror.jscalledapp/global-error.js."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "global-error.js"
                },
                {
                    "type": "p",
                    "text": "To specifically handle errors in rootlayout.js, use a variation oferror.jscalledapp/global-error.jslocated in the rootappdirectory."
                },
                {
                    "type": "code",
                    "code": "'use client'exportdefaultfunctionGlobalError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {return(<html><body><h2>Something went wrong!</h2><buttononClick={()=>reset()}>Try again</button></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "global-error.jsreplaces the rootlayout.jswhen active and somustdefine its own<html>and<body>tags.",
                        "While designing error UI, you may find it helpful to use theReact Developer Toolsto manually toggle Error boundaries."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "not-found.js"
                },
                {
                    "type": "p",
                    "text": "Thenot-foundfile is used to render UI when thenotFound()function is thrown within a route segment."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Learn more about error handling"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Error Handling"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation",
            "title": "File Conventions: instrumentation.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "instrumentation.js"
                },
                {
                    "type": "p",
                    "text": "Theinstrumentation.js|tsfile is used to integrate monitoring and logging tools into your application. This allows you to track the performance and behavior of your application, and to debug issues in production."
                },
                {
                    "type": "p",
                    "text": "To use it, place the file in therootof your application or inside asrcfolderif using one."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Config Option"
                },
                {
                    "type": "p",
                    "text": "Instrumentation is currently an experimental feature, to use theinstrumentationfile, you must explicitly opt-in by definingexperimental.instrumentationHook = true;in yournext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{instrumentationHook:true,},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Exports"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "register(required)"
                },
                {
                    "type": "p",
                    "text": "The file exports aregisterfunction that is calledoncewhen a new Next.js server instance is initiated.registercan be an async function."
                },
                {
                    "type": "code",
                    "code": "import{ registerOTel }from'@vercel/otel'exportfunctionregister() {registerOTel('next-app')}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Learn more about Instrumentation"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Instrumentation"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/layout",
            "title": "File Conventions: layout.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "layout.js"
                },
                {
                    "type": "p",
                    "text": "Alayoutis UI that is shared between routes."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionDashboardLayout({children,}:{children:React.ReactNode}) {return<section>{children}</section>}"
                },
                {
                    "type": "p",
                    "text": "Aroot layoutis the top-most layout in the rootappdirectory. It is used to define the<html>and<body>tags and other globally shared UI."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "children(required)"
                },
                {
                    "type": "p",
                    "text": "Layout components should accept and use achildrenprop. During rendering,childrenwill be populated with the route segments the layout is wrapping. These will primarily be the component of a childLayout(if it exists) orPage, but could also be other special files likeLoadingorErrorwhen applicable."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "params(optional)"
                },
                {
                    "type": "p",
                    "text": "Thedynamic route parametersobject from the root segment down to that layout."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionShopLayout({children,params,}:{children:React.ReactNodeparams:{tag:stringitem:string}}) {// URL -> /shop/shoes/nike-air-max-97// `params` -> { tag: 'shoes', item: 'nike-air-max-97' }return<section>{children}</section>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Good to know"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Layouts do not receivesearchParams"
                },
                {
                    "type": "p",
                    "text": "UnlikePages, Layout componentsdo notreceive thesearchParamsprop. This is because a shared layout isnot re-rendered during navigationwhich could lead to stalesearchParamsbetween navigations."
                },
                {
                    "type": "p",
                    "text": "When using client-side navigation, Next.js automatically only renders the part of the page below the common layout between two routes."
                },
                {
                    "type": "p",
                    "text": "For example, in the following directory structure,dashboard/layout.tsxis the common layout for both/dashboard/settingsand/dashboard/analytics:"
                },
                {
                    "type": "p",
                    "text": "When navigating from/dashboard/settingsto/dashboard/analytics,page.tsxin/dashboard/analyticswill rerender on the server, whiledashboard/layout.tsxwillnotrerender because it's a common UI shared between the two routes."
                },
                {
                    "type": "p",
                    "text": "This performance optimization allows navigation between pages that share a layout to be quicker as only the data fetching and rendering for the page has to run, instead of the entire route that could include shared layouts that fetch their own data."
                },
                {
                    "type": "p",
                    "text": "Becausedashboard/layout.tsxdoesn't re-render, thesearchParamsprop in the layout Server Component might becomestaleafter navigation."
                },
                {
                    "type": "list",
                    "items": [
                        "Instead, use the PagesearchParamsprop or theuseSearchParamshook in a Client Component, which is re-rendered on the client with the latestsearchParams."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Root Layouts"
                },
                {
                    "type": "list",
                    "items": [
                        "Theappdirectorymustinclude a rootapp/layout.js.",
                        "The root layoutmustdefine<html>and<body>tags.You shouldnotmanually add<head>tags such as<title>and<meta>to root layouts. Instead, you should use theMetadata APIwhich automatically handles advanced requirements such as streaming and de-duplicating<head>elements.",
                        "You shouldnotmanually add<head>tags such as<title>and<meta>to root layouts. Instead, you should use theMetadata APIwhich automatically handles advanced requirements such as streaming and de-duplicating<head>elements.",
                        "You can useroute groupsto create multiple root layouts.Navigatingacross multiple root layoutswill cause afull page load(as opposed to a client-side navigation). For example, navigating from/cartthat usesapp/(shop)/layout.jsto/blogthat usesapp/(marketing)/layout.jswill cause a full page load. Thisonlyapplies to multiple root layouts.",
                        "Navigatingacross multiple root layoutswill cause afull page load(as opposed to a client-side navigation). For example, navigating from/cartthat usesapp/(shop)/layout.jsto/blogthat usesapp/(marketing)/layout.jswill cause a full page load. Thisonlyapplies to multiple root layouts."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "You shouldnotmanually add<head>tags such as<title>and<meta>to root layouts. Instead, you should use theMetadata APIwhich automatically handles advanced requirements such as streaming and de-duplicating<head>elements."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Navigatingacross multiple root layoutswill cause afull page load(as opposed to a client-side navigation). For example, navigating from/cartthat usesapp/(shop)/layout.jsto/blogthat usesapp/(marketing)/layout.jswill cause a full page load. Thisonlyapplies to multiple root layouts."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/loading",
            "title": "File Conventions: loading.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "loading.js"
                },
                {
                    "type": "p",
                    "text": "Aloadingfile can create instant loading states built onSuspense."
                },
                {
                    "type": "p",
                    "text": "By default, this file is aServer Component- but can also be used as a Client Component through the\"use client\"directive."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionLoading() {// Or a custom loading skeleton componentreturn<p>Loading...</p>}"
                },
                {
                    "type": "p",
                    "text": "Loading UI components do not accept any parameters."
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "While designing loading UI, you may find it helpful to use theReact Developer Toolsto manually toggle Suspense boundaries."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata",
            "title": "File Conventions: Metadata Files | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Metadata Files API Reference"
                },
                {
                    "type": "p",
                    "text": "This section of the docs coversMetadata file conventions. File-based metadata can be defined by adding special metadata files to route segments."
                },
                {
                    "type": "p",
                    "text": "Each file convention can be defined using a static file (e.g.opengraph-image.jpg), or a dynamic variant that uses code to generate the file (e.g.opengraph-image.js)."
                },
                {
                    "type": "p",
                    "text": "Once a file is defined, Next.js will automatically serve the file (with hashes in production for caching) and update the relevant head elements with the correct metadata, such as the asset's URL, file type, and image size."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "favicon, icon, and apple-icon"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "manifest.json"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "opengraph-image and twitter-image"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "robots.txt"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "sitemap.xml"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/app-icons",
            "title": "Metadata Files: favicon, icon, and apple-icon | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "favicon, icon, and apple-icon"
                },
                {
                    "type": "p",
                    "text": "Thefavicon,icon, orapple-iconfile conventions allow you to set icons for your application."
                },
                {
                    "type": "p",
                    "text": "They are useful for adding app icons that appear in places like web browser tabs, phone home screens, and search engine results."
                },
                {
                    "type": "p",
                    "text": "There are two ways to set app icons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using image files (.ico, .jpg, .png)",
                        "Using code to generate an icon (.js, .ts, .tsx)"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Image files (.ico, .jpg, .png)"
                },
                {
                    "type": "p",
                    "text": "Use an image file to set an app icon by placing afavicon,icon, orapple-iconimage file within your/appdirectory.\nThefaviconimage can only be located in the top level ofapp/."
                },
                {
                    "type": "p",
                    "text": "Next.js will evaluate the file and automatically add the appropriate tags to your app's<head>element."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "favicon"
                },
                {
                    "type": "p",
                    "text": "Add afavicon.icoimage file to the root/approute segment."
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"icon\"href=\"/favicon.ico\"sizes=\"any\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "icon"
                },
                {
                    "type": "p",
                    "text": "Add anicon.(ico|jpg|jpeg|png|svg)image file."
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"icon\"href=\"/icon?<generated>\"type=\"image/<generated>\"sizes=\"<generated>\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "apple-icon"
                },
                {
                    "type": "p",
                    "text": "Add anapple-icon.(jpg|jpeg|png)image file."
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"apple-touch-icon\"href=\"/apple-icon?<generated>\"type=\"image/<generated>\"sizes=\"<generated>\"/>"
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "You can set multiple icons by adding a number suffix to the file name. For example,icon1.png,icon2.png, etc. Numbered files will sort lexically.",
                        "Favicons can only be set in the root/appsegment. If you need more granularity, you can useicon.",
                        "The appropriate<link>tags and attributes such asrel,href,type, andsizesare determined by the icon type and metadata of the evaluated file.For example, a 32 by 32px.pngfile will havetype=\"image/png\"andsizes=\"32x32\"attributes.",
                        "For example, a 32 by 32px.pngfile will havetype=\"image/png\"andsizes=\"32x32\"attributes.",
                        "sizes=\"any\"is added tofavicon.icooutput toavoid a browser bugwhere an.icoicon is favored over.svg."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For example, a 32 by 32px.pngfile will havetype=\"image/png\"andsizes=\"32x32\"attributes."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Generate icons using code (.js, .ts, .tsx)"
                },
                {
                    "type": "p",
                    "text": "In addition to usingliteral image files, you can programmaticallygenerateicons using code."
                },
                {
                    "type": "p",
                    "text": "Generate an app icon by creating aniconorapple-iconroute that default exports a function."
                },
                {
                    "type": "p",
                    "text": "The easiest way to generate an icon is to use theImageResponseAPI fromnext/og."
                },
                {
                    "type": "code",
                    "code": "import{ ImageResponse }from'next/og'// Route segment configexportconstruntime='edge'// Image metadataexportconstsize={width:32,height:32,}exportconstcontentType='image/png'// Image generationexportdefaultfunctionIcon() {returnnewImageResponse((// ImageResponse JSX element<divstyle={{fontSize:24,background:'black',width:'100%',height:'100%',display:'flex',alignItems:'center',justifyContent:'center',color:'white',}}>A</div>),// ImageResponse options{// For convenience, we can re-use the exported icons size metadata// config to also set the ImageResponse's width and height....size,})}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"icon\"href=\"/icon?<generated>\"type=\"image/png\"sizes=\"32x32\"/>"
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "By default, generated icons arestatically optimized(generated at build time and cached) unless they usedynamic functionsor uncached data.",
                        "You can generate multiple icons in the same file usinggenerateImageMetadata.",
                        "You cannot generate afaviconicon. Useiconor afavicon.icofile instead."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Props"
                },
                {
                    "type": "p",
                    "text": "The default export function receives the following props:"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "params(optional)"
                },
                {
                    "type": "p",
                    "text": "An object containing thedynamic route parametersobject from the root segment down to the segmenticonorapple-iconis colocated in."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionIcon({ params }:{ params:{ slug:string} }) {// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "The default export function should return aBlob|ArrayBuffer|TypedArray|DataView|ReadableStream|Response."
                },
                {
                    "type": "p",
                    "text": "Good to know:ImageResponsesatisfies this return type."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Config exports"
                },
                {
                    "type": "p",
                    "text": "You can optionally configure the icon's metadata by exportingsizeandcontentTypevariables from theiconorapple-iconroute."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "size"
                },
                {
                    "type": "code",
                    "code": "exportconstsize={ width:32,height:32}exportdefaultfunctionIcon() {}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"icon\"sizes=\"32x32\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "contentType"
                },
                {
                    "type": "code",
                    "code": "exportconstcontentType='image/png'exportdefaultfunctionIcon() {}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"icon\"type=\"image/png\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Route Segment Config"
                },
                {
                    "type": "p",
                    "text": "iconandapple-iconare specializedRoute Handlersthat can use the sameroute segment configurationoptions as Pages and Layouts."
                },
                {
                    "type": "code",
                    "code": "exportconstruntime='edge'exportdefaultfunctionIcon() {}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/manifest",
            "title": "Metadata Files: manifest.json | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "manifest.json"
                },
                {
                    "type": "p",
                    "text": "Add or generate amanifest.(json|webmanifest)file that matches theWeb Manifest Specificationin therootofappdirectory to provide information about your web application for the browser."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Static Manifest file"
                },
                {
                    "type": "code",
                    "code": "{\"name\":\"My Next.js Application\",\"short_name\":\"Next.js App\",\"description\":\"An application built with Next.js\",\"start_url\":\"/\"// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Generate a Manifest file"
                },
                {
                    "type": "p",
                    "text": "Add amanifest.jsormanifest.tsfile that returns aManifestobject."
                },
                {
                    "type": "code",
                    "code": "import{ MetadataRoute }from'next'exportdefaultfunctionmanifest():MetadataRoute.Manifest{return{name:'Next.js App',short_name:'Next.js App',description:'Next.js App',start_url:'/',display:'standalone',background_color:'#fff',theme_color:'#fff',icons:[{src:'/favicon.ico',sizes:'any',type:'image/x-icon',},],}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Manifest Object"
                },
                {
                    "type": "p",
                    "text": "The manifest object contains an extensive list of options that may be updated due to new web standards. For information on all the current options, refer to theMetadataRoute.Manifesttype in your code editor if usingTypeScriptor see theMDNdocs."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image",
            "title": "Metadata Files: opengraph-image and twitter-image | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "opengraph-image and twitter-image"
                },
                {
                    "type": "p",
                    "text": "Theopengraph-imageandtwitter-imagefile conventions allow you to set Open Graph and Twitter images for a route segment."
                },
                {
                    "type": "p",
                    "text": "They are useful for setting the images that appear on social networks and messaging apps when a user shares a link to your site."
                },
                {
                    "type": "p",
                    "text": "There are two ways to set Open Graph and Twitter images:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using image files (.jpg, .png, .gif)",
                        "Using code to generate images (.js, .ts, .tsx)"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Image files (.jpg, .png, .gif)"
                },
                {
                    "type": "p",
                    "text": "Use an image file to set a route segment's shared image by placing anopengraph-imageortwitter-imageimage file in the segment."
                },
                {
                    "type": "p",
                    "text": "Next.js will evaluate the file and automatically add the appropriate tags to your app's<head>element."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "opengraph-image"
                },
                {
                    "type": "p",
                    "text": "Add anopengraph-image.(jpg|jpeg|png|gif)image file to any route segment."
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"og:image\"content=\"<generated>\"/><metaproperty=\"og:image:type\"content=\"<generated>\"/><metaproperty=\"og:image:width\"content=\"<generated>\"/><metaproperty=\"og:image:height\"content=\"<generated>\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "twitter-image"
                },
                {
                    "type": "p",
                    "text": "Add atwitter-image.(jpg|jpeg|png|gif)image file to any route segment."
                },
                {
                    "type": "code",
                    "code": "<metaname=\"twitter:image\"content=\"<generated>\"/><metaname=\"twitter:image:type\"content=\"<generated>\"/><metaname=\"twitter:image:width\"content=\"<generated>\"/><metaname=\"twitter:image:height\"content=\"<generated>\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "opengraph-image.alt.txt"
                },
                {
                    "type": "p",
                    "text": "Add an accompanyingopengraph-image.alt.txtfile in the same route segment as theopengraph-image.(jpg|jpeg|png|gif)image it's alt text."
                },
                {
                    "type": "code",
                    "code": "About Acme"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"og:image:alt\"content=\"About Acme\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "twitter-image.alt.txt"
                },
                {
                    "type": "p",
                    "text": "Add an accompanyingtwitter-image.alt.txtfile in the same route segment as thetwitter-image.(jpg|jpeg|png|gif)image it's alt text."
                },
                {
                    "type": "code",
                    "code": "About Acme"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"twitter:image:alt\"content=\"About Acme\"/>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Generate images using code (.js, .ts, .tsx)"
                },
                {
                    "type": "p",
                    "text": "In addition to usingliteral image files, you can programmaticallygenerateimages using code."
                },
                {
                    "type": "p",
                    "text": "Generate a route segment's shared image by creating anopengraph-imageortwitter-imageroute that default exports a function."
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "By default, generated images arestatically optimized(generated at build time and cached) unless they usedynamic functionsor uncached data.",
                        "You can generate multiple Images in the same file usinggenerateImageMetadata."
                    ]
                },
                {
                    "type": "p",
                    "text": "The easiest way to generate an image is to use theImageResponseAPI fromnext/og."
                },
                {
                    "type": "code",
                    "code": "import{ ImageResponse }from'next/og'// Route segment configexportconstruntime='edge'// Image metadataexportconstalt='About Acme'exportconstsize={width:1200,height:630,}exportconstcontentType='image/png'// Image generationexportdefaultasyncfunctionImage() {// FontconstinterSemiBold=fetch(newURL('./Inter-SemiBold.ttf',import.meta.url)).then((res)=>res.arrayBuffer())returnnewImageResponse((// ImageResponse JSX element<divstyle={{fontSize:128,background:'white',width:'100%',height:'100%',display:'flex',alignItems:'center',justifyContent:'center',}}>About Acme</div>),// ImageResponse options{// For convenience, we can re-use the exported opengraph-image// size config to also set the ImageResponse's width and height....size,fonts:[{name:'Inter',data:awaitinterSemiBold,style:'normal',weight:400,},],})}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"og:image\"content=\"<generated>\"/><metaproperty=\"og:image:alt\"content=\"About Acme\"/><metaproperty=\"og:image:type\"content=\"image/png\"/><metaproperty=\"og:image:width\"content=\"1200\"/><metaproperty=\"og:image:height\"content=\"630\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Props"
                },
                {
                    "type": "p",
                    "text": "The default export function receives the following props:"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "params(optional)"
                },
                {
                    "type": "p",
                    "text": "An object containing thedynamic route parametersobject from the root segment down to the segmentopengraph-imageortwitter-imageis colocated in."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionImage({ params }:{ params:{ slug:string} }) {// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "The default export function should return aBlob|ArrayBuffer|TypedArray|DataView|ReadableStream|Response."
                },
                {
                    "type": "p",
                    "text": "Good to know:ImageResponsesatisfies this return type."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Config exports"
                },
                {
                    "type": "p",
                    "text": "You can optionally configure the image's metadata by exportingalt,size, andcontentTypevariables fromopengraph-imageortwitter-imageroute."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "alt"
                },
                {
                    "type": "code",
                    "code": "exportconstalt='My images alt text'exportdefaultfunctionImage() {}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"og:image:alt\"content=\"My images alt text\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "size"
                },
                {
                    "type": "code",
                    "code": "exportconstsize={ width:1200,height:630}exportdefaultfunctionImage() {}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"og:image:width\"content=\"1200\"/><metaproperty=\"og:image:height\"content=\"630\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "contentType"
                },
                {
                    "type": "code",
                    "code": "exportconstcontentType='image/png'exportdefaultfunctionImage() {}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"og:image:type\"content=\"image/png\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Route Segment Config"
                },
                {
                    "type": "p",
                    "text": "opengraph-imageandtwitter-imageare specializedRoute Handlersthat can use the sameroute segment configurationoptions as Pages and Layouts."
                },
                {
                    "type": "code",
                    "code": "exportconstruntime='edge'exportdefaultfunctionImage() {}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Using external data"
                },
                {
                    "type": "p",
                    "text": "This example uses theparamsobject and external data to generate the image."
                },
                {
                    "type": "p",
                    "text": "Good to know:\nBy default, this generated image will bestatically optimized. You can configure the individualfetchoptionsor route segmentsoptionsto change this behavior."
                },
                {
                    "type": "code",
                    "code": "import{ ImageResponse }from'next/og'exportconstruntime='edge'exportconstalt='About Acme'exportconstsize={width:1200,height:630,}exportconstcontentType='image/png'exportdefaultasyncfunctionImage({ params }:{ params:{ slug:string} }) {constpost=awaitfetch(`https://.../posts/${params.slug}`).then((res)=>res.json())returnnewImageResponse((<divstyle={{fontSize:48,background:'white',width:'100%',height:'100%',display:'flex',alignItems:'center',justifyContent:'center',}}>{post.title}</div>),{...size,})}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/robots",
            "title": "Metadata Files: robots.txt | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "robots.txt"
                },
                {
                    "type": "p",
                    "text": "Add or generate arobots.txtfile that matches theRobots Exclusion Standardin therootofappdirectory to tell search engine crawlers which URLs they can access on your site."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Staticrobots.txt"
                },
                {
                    "type": "code",
                    "code": "User-Agent: *Allow: /Disallow: /private/Sitemap: https://acme.com/sitemap.xml"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Generate a Robots file"
                },
                {
                    "type": "p",
                    "text": "Add arobots.jsorrobots.tsfile that returns aRobotsobject."
                },
                {
                    "type": "code",
                    "code": "import{ MetadataRoute }from'next'exportdefaultfunctionrobots():MetadataRoute.Robots{return{rules:{userAgent:'*',allow:'/',disallow:'/private/',},sitemap:'https://acme.com/sitemap.xml',}}"
                },
                {
                    "type": "p",
                    "text": "Output:"
                },
                {
                    "type": "code",
                    "code": "User-Agent: *Allow: /Disallow: /private/Sitemap: https://acme.com/sitemap.xml"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing specific user agents"
                },
                {
                    "type": "p",
                    "text": "You can customise how individual search engine bots crawl your site by passing an array of user agents to therulesproperty. For example:"
                },
                {
                    "type": "code",
                    "code": "importtype{ MetadataRoute }from'next'exportdefaultfunctionrobots():MetadataRoute.Robots{return{rules:[{userAgent:'Googlebot',allow:['/'],disallow:'/private/',},{userAgent:['Applebot','Bingbot'],disallow:['/'],},],sitemap:'https://acme.com/sitemap.xml',}}"
                },
                {
                    "type": "p",
                    "text": "Output:"
                },
                {
                    "type": "code",
                    "code": "User-Agent: GooglebotAllow: /Disallow: /private/User-Agent: ApplebotDisallow: /User-Agent: BingbotDisallow: /Sitemap: https://acme.com/sitemap.xml"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Robots object"
                },
                {
                    "type": "code",
                    "code": "typeRobots={rules:|{userAgent?:string|string[]allow?:string|string[]disallow?:string|string[]crawlDelay?:number}|Array<{userAgent:string|string[]allow?:string|string[]disallow?:string|string[]crawlDelay?:number}>sitemap?:string|string[]host?:string}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/sitemap",
            "title": "Metadata Files: sitemap.xml | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "sitemap.xml"
                },
                {
                    "type": "p",
                    "text": "sitemap.(xml|js|ts)is a special file that matches theSitemaps XML formatto help search engine crawlers index your site more efficiently."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sitemap files (.xml)"
                },
                {
                    "type": "p",
                    "text": "For smaller applications, you can create asitemap.xmlfile and place it in the root of yourappdirectory."
                },
                {
                    "type": "code",
                    "code": "<urlsetxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"><url><loc>https://acme.com</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>yearly</changefreq><priority>1</priority></url><url><loc>https://acme.com/about</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>monthly</changefreq><priority>0.8</priority></url><url><loc>https://acme.com/blog</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>weekly</changefreq><priority>0.5</priority></url></urlset>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Generating a sitemap using code (.js, .ts)"
                },
                {
                    "type": "p",
                    "text": "You can use thesitemap.(js|ts)file convention to programmaticallygeneratea sitemap by exporting a default function that returns an array of URLs. If using TypeScript, aSitemaptype is available."
                },
                {
                    "type": "code",
                    "code": "import{ MetadataRoute }from'next'exportdefaultfunctionsitemap():MetadataRoute.Sitemap{return[{url:'https://acme.com',lastModified:newDate(),changeFrequency:'yearly',priority:1,},{url:'https://acme.com/about',lastModified:newDate(),changeFrequency:'monthly',priority:0.8,},{url:'https://acme.com/blog',lastModified:newDate(),changeFrequency:'weekly',priority:0.5,},]}"
                },
                {
                    "type": "p",
                    "text": "Output:"
                },
                {
                    "type": "code",
                    "code": "<urlsetxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"><url><loc>https://acme.com</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>yearly</changefreq><priority>1</priority></url><url><loc>https://acme.com/about</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>monthly</changefreq><priority>0.8</priority></url><url><loc>https://acme.com/blog</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>weekly</changefreq><priority>0.5</priority></url></urlset>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Generate a localized Sitemap"
                },
                {
                    "type": "code",
                    "code": "import{ MetadataRoute }from'next'exportdefaultfunctionsitemap():MetadataRoute.Sitemap{return[{url:'https://acme.com',lastModified:newDate(),alternates:{languages:{es:'https://acme.com/es',de:'https://acme.com/de',},},},{url:'https://acme.com/about',lastModified:newDate(),alternates:{languages:{es:'https://acme.com/es/about',de:'https://acme.com/de/about',},},},{url:'https://acme.com/blog',lastModified:newDate(),alternates:{languages:{es:'https://acme.com/es/blog',de:'https://acme.com/de/blog',},},},]}"
                },
                {
                    "type": "p",
                    "text": "Output:"
                },
                {
                    "type": "code",
                    "code": "<urlsetxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"><url><loc>https://acme.com</loc><xhtml:linkrel=\"alternate\"hreflang=\"es\"href=\"https://acme.com/es\"/><xhtml:linkrel=\"alternate\"hreflang=\"de\"href=\"https://acme.com/de\"/><lastmod>2023-04-06T15:02:24.021Z</lastmod></url><url><loc>https://acme.com/about</loc><xhtml:linkrel=\"alternate\"hreflang=\"es\"href=\"https://acme.com/es/about\"/><xhtml:linkrel=\"alternate\"hreflang=\"de\"href=\"https://acme.com/de/about\"/><lastmod>2023-04-06T15:02:24.021Z</lastmod></url><url><loc>https://acme.com/blog</loc><xhtml:linkrel=\"alternate\"hreflang=\"es\"href=\"https://acme.com/es/blog\"/><xhtml:linkrel=\"alternate\"hreflang=\"de\"href=\"https://acme.com/de/blog\"/><lastmod>2023-04-06T15:02:24.021Z</lastmod></url></urlset>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Generating multiple sitemaps"
                },
                {
                    "type": "p",
                    "text": "While a single sitemap will work for most applications. For large web applications, you may need to split a sitemap into multiple files."
                },
                {
                    "type": "p",
                    "text": "There are two ways you can create multiple sitemaps:"
                },
                {
                    "type": "list",
                    "items": [
                        "By nestingsitemap.(xml|js|ts)inside multiple route segments e.g.app/sitemap.xmlandapp/products/sitemap.xml.",
                        "By using thegenerateSitemapsfunction."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, to split a sitemap usinggenerateSitemaps, return an array of objects with the sitemapid. Then, use theidto generate the unique sitemaps."
                },
                {
                    "type": "code",
                    "code": "import{ BASE_URL }from'@/app/lib/constants'exportasyncfunctiongenerateSitemaps() {// Fetch the total number ofproducts and calculate the number of sitemaps neededreturn[{ id:0},{ id:1},{ id:2},{ id:3}]}exportdefaultasyncfunctionsitemap({id,}:{id:number}):Promise<MetadataRoute.Sitemap> {// Google's limit is 50,000 URLs per sitemapconststart=id*50000constend=start+50000constproducts=awaitgetProducts(`SELECT id, date FROMproducts WHERE id BETWEEN${start}AND${end}`)returnproducts.map((product)=>({url:`${BASE_URL}/product/${id}`,lastModified:product.date,}))}"
                },
                {
                    "type": "p",
                    "text": "In production, your generated sitemaps will be available at/.../sitemap/[id].xml. For example,/product/sitemap/1.xml."
                },
                {
                    "type": "p",
                    "text": "In development, you can view the generated sitemap on/.../sitemap.xml/[id]. For example,/product/sitemap.xml/1. This difference is temporary and will follow the production format."
                },
                {
                    "type": "p",
                    "text": "See thegenerateSitemapsAPI referencefor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "The default function exported fromsitemap.(xml|ts|js)should return an array of objects with the following properties:"
                },
                {
                    "type": "code",
                    "code": "typeSitemap=Array<{url:stringlastModified?:string|DatechangeFrequency?:|'always'|'hourly'|'daily'|'weekly'|'monthly'|'yearly'|'never'priority?:numberalternates?:{languages?:Languages<string>}}>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateSitemaps"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/middleware",
            "title": "File Conventions: middleware.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "middleware.js"
                },
                {
                    "type": "p",
                    "text": "Themiddleware.js|tsfile is used to writeMiddlewareand run code on the server before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly."
                },
                {
                    "type": "p",
                    "text": "Middleware executes before routes are rendered. It's particularly useful for implementing custom server-side logic like authentication, logging, or handling redirects."
                },
                {
                    "type": "p",
                    "text": "Use the filemiddleware.ts(or .js) in the root of your project to define Middleware. For example, at the same level asapporpages, or insidesrcif applicable."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse,NextRequest }from'next/server'// This function can be marked `async` if using `await` insideexportfunctionmiddleware(request:NextRequest) {returnNextResponse.redirect(newURL('/home',request.url))}exportconstconfig={matcher:'/about/:path*',}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Exports"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Middleware function"
                },
                {
                    "type": "p",
                    "text": "The file must export a single function, either as a default export or namedmiddleware. Note that multiple middleware from the same file are not supported."
                },
                {
                    "type": "code",
                    "code": "// Example of default exportexportdefaultfunctionmiddleware(request) {// Middleware logic}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Config object (optional)"
                },
                {
                    "type": "p",
                    "text": "Optionally, a config object can be exported alongside the Middleware function. This object includes thematcherto specify paths where the Middleware applies."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Matcher"
                },
                {
                    "type": "p",
                    "text": "Thematcheroption allows you to target specific paths for the Middleware to run on. You can specify these paths in several ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "For a single path: Directly use a string to define the path, like'/about'.",
                        "For multiple paths: Use an array to list multiple paths, such asmatcher: ['/about', '/contact'], which applies the Middleware to both/aboutand/contact."
                    ]
                },
                {
                    "type": "p",
                    "text": "Additionally,matchersupports complex path specifications through regular expressions, such asmatcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'], enabling precise control over which paths to include or exclude."
                },
                {
                    "type": "p",
                    "text": "Thematcheroption also accepts an array of objects with the following keys:"
                },
                {
                    "type": "list",
                    "items": [
                        "source: The path or pattern used to match the request paths. It can be a string for direct path matching or a pattern for more complex matching.",
                        "regexp(optional): A regular expression string that fine-tunes the matching based on the source. It provides additional control over which paths are included or excluded.",
                        "locale(optional): A boolean that, when set tofalse, ignores locale-based routing in path matching.",
                        "has(optional): Specifies conditions based on the presence of specific request elements such as headers, query parameters, or cookies.",
                        "missing(optional): Focuses on conditions where certain request elements are absent, like missing headers or cookies."
                    ]
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={matcher:[{source:'/api/*',regexp:'^/api/(.*)',locale:false,has:[{ type:'header',key:'Authorization',value:'Bearer Token'},{ type:'query',key:'userId',value:'123'},],missing:[{ type:'cookie',key:'session',value:'active'}],},],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Params"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "request"
                },
                {
                    "type": "p",
                    "text": "When defining Middleware, the default export function accepts a single parameter,request. This parameter is an instance ofNextRequest, which represents the incoming HTTP request."
                },
                {
                    "type": "code",
                    "code": "importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {// Middleware logic goes here}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "NextRequestis a type that represents incoming HTTP requests in Next.js Middleware, whereasNextResponseis a class used to manipulate and send back HTTP responses."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "NextResponse"
                },
                {
                    "type": "p",
                    "text": "Middleware can use theNextResponseobject which extends theWeb Response API. By returning aNextResponseobject, you can directly manipulate cookies, set headers, implement redirects, and rewrite paths."
                },
                {
                    "type": "p",
                    "text": "Good to know: For redirects, you can also useResponse.redirectinstead ofNextResponse.redirect."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Runtime"
                },
                {
                    "type": "p",
                    "text": "Middleware only supports theEdge runtime. The Node.js runtime cannot be used."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Learn more about Middleware"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Middleware"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/not-found",
            "title": "File Conventions: not-found.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "not-found.js"
                },
                {
                    "type": "p",
                    "text": "Thenot-foundfile is used to render UI when thenotFoundfunction is thrown within a route segment. Along with serving a custom UI, Next.js will return a200HTTP status code for streamed responses, and404for non-streamed responses."
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionNotFound() {return(<div><h2>Not Found</h2><p>Could not find requested resource</p><Linkhref=\"/\">Return Home</Link></div>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: In addition to catching expectednotFound()errors, the rootapp/not-found.jsfile also handles any unmatched URLs for your whole application. This means users that visit a URL that is not handled by your app will be shown the UI exported by theapp/not-found.jsfile."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "p",
                    "text": "not-found.jscomponents do not accept any props."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Data Fetching"
                },
                {
                    "type": "p",
                    "text": "By default,not-foundis a Server Component. You can mark it asasyncto fetch and display data:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'import{ headers }from'next/headers'exportdefaultasyncfunctionNotFound() {constheadersList=headers()constdomain=headersList.get('host')constdata=awaitgetSiteData(domain)return(<div><h2>Not Found: {data.name}</h2><p>Could not find requested resource</p><p>View <Linkhref=\"/blog\">all posts</Link></p></div>)}"
                },
                {
                    "type": "p",
                    "text": "If you need to use Client Component hooks likeusePathnameto display content based on the path, you must fetch data on the client-side instead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/page",
            "title": "File Conventions: page.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "page.js"
                },
                {
                    "type": "p",
                    "text": "Apageis UI that is unique to a route."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage({params,searchParams,}:{params:{ slug:string}searchParams:{ [key:string]:string|string[]|undefined}}) {return<h1>My Page</h1>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "params(optional)"
                },
                {
                    "type": "p",
                    "text": "An object containing thedynamic route parametersfrom the root segment down to that page. For example:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "searchParams(optional)"
                },
                {
                    "type": "p",
                    "text": "An object containing thesearch parametersof the current URL. For example:"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "searchParamsis aDynamic APIwhose values cannot be known ahead of time. Using it will opt the page intodynamic renderingat request time.",
                        "searchParamsreturns a plain JavaScript object and not aURLSearchParamsinstance."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/route",
            "title": "File Conventions: route.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "route.js"
                },
                {
                    "type": "p",
                    "text": "Route Handlers allow you to create custom request handlers for a given route using the WebRequestandResponseAPIs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "HTTP Methods"
                },
                {
                    "type": "p",
                    "text": "Aroutefile allows you to create custom request handlers for a given route. The followingHTTP methodsare supported:GET,POST,PUT,PATCH,DELETE,HEAD, andOPTIONS."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET(request:Request) {}exportasyncfunctionHEAD(request:Request) {}exportasyncfunctionPOST(request:Request) {}exportasyncfunctionPUT(request:Request) {}exportasyncfunctionDELETE(request:Request) {}exportasyncfunctionPATCH(request:Request) {}// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and  set the appropriate Response `Allow` header depending on the other methods defined in the route handler.exportasyncfunctionOPTIONS(request:Request) {}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Route Handlers are only available inside theappdirectory. Youdo notneed to use API Routes (pages) and Route Handlers (app) together, as Route Handlers should be able to handle all use cases."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "request(optional)"
                },
                {
                    "type": "p",
                    "text": "Therequestobject is aNextRequestobject, which is an extension of the WebRequestAPI.NextRequestgives you further control over the incoming request, including easily accessingcookiesand an extended, parsed, URL objectnextUrl."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "context(optional)"
                },
                {
                    "type": "code",
                    "code": "typeParams={team:string}exportasyncfunctionGET(request:Request,context:{ params:Params}) {constteam=context.params.team// '1'}// Define params type according to your route parameters (see table below)"
                },
                {
                    "type": "p",
                    "text": "Currently, the only value ofcontextisparams, which is an object containing thedynamic route parametersfor the current route."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "NextResponse"
                },
                {
                    "type": "p",
                    "text": "Route Handlers can extend the Web Response API by returning aNextResponseobject. This allows you to easily set cookies, headers, redirect, and rewrite.View the API reference."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config",
            "title": "File Conventions: Route Segment Config | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Route Segment Config"
                },
                {
                    "type": "p",
                    "text": "The Route Segment options allows you to configure the behavior of aPage,Layout, orRoute Handlerby directly exporting the following variables:"
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='auto'exportconstdynamicParams=trueexportconstrevalidate=falseexportconstfetchCache='auto'exportconstruntime='nodejs'exportconstpreferredRegion='auto'exportconstmaxDuration=5exportdefaultfunctionMyComponent() {}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "The values of the config options currently need be statically analyzable. For examplerevalidate = 600is valid, butrevalidate = 60 * 10is not."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Options"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "dynamic"
                },
                {
                    "type": "p",
                    "text": "Change the dynamic behavior of a layout or page to fully static or fully dynamic."
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='auto'// 'auto' | 'force-dynamic' | 'error' | 'force-static'"
                },
                {
                    "type": "p",
                    "text": "Good to know: The new model in theappdirectory favors granular caching control at thefetchrequest level over the binary all-or-nothing model ofgetServerSidePropsandgetStaticPropsat the page-level in thepagesdirectory. Thedynamicoption is a way to opt back in to the previous model as a convenience and provides a simpler migration path."
                },
                {
                    "type": "list",
                    "items": [
                        "'auto'(default): The default option to cache as much as possible without preventing any components from opting into dynamic behavior.",
                        "'force-dynamic': Forcedynamic rendering, which will result in routes being rendered for each user at request time. This option is equivalent togetServerSideProps()in thepagesdirectory.",
                        "'error': Force static rendering and cache the data of a layout or page by causing an error if any components usedynamic functionsor uncached data. This option is equivalent to:getStaticProps()in thepagesdirectory.Setting the option of everyfetch()request in a layout or page to{ cache: 'force-cache' }.Setting the segment config tofetchCache = 'only-cache', dynamicParams = false.dynamic = 'error'changes the default ofdynamicParamsfromtruetofalse. You can opt back into dynamically rendering pages for dynamic params not generated bygenerateStaticParamsby manually settingdynamicParams = true.",
                        "getStaticProps()in thepagesdirectory.",
                        "Setting the option of everyfetch()request in a layout or page to{ cache: 'force-cache' }.",
                        "Setting the segment config tofetchCache = 'only-cache', dynamicParams = false.",
                        "dynamic = 'error'changes the default ofdynamicParamsfromtruetofalse. You can opt back into dynamically rendering pages for dynamic params not generated bygenerateStaticParamsby manually settingdynamicParams = true.",
                        "'force-static': Force static rendering and cache the data of a layout or page by forcingcookies(),headers()anduseSearchParams()to return empty values."
                    ]
                },
                {
                    "type": "p",
                    "text": "'auto'(default): The default option to cache as much as possible without preventing any components from opting into dynamic behavior."
                },
                {
                    "type": "p",
                    "text": "'force-dynamic': Forcedynamic rendering, which will result in routes being rendered for each user at request time. This option is equivalent togetServerSideProps()in thepagesdirectory."
                },
                {
                    "type": "p",
                    "text": "'error': Force static rendering and cache the data of a layout or page by causing an error if any components usedynamic functionsor uncached data. This option is equivalent to:"
                },
                {
                    "type": "list",
                    "items": [
                        "getStaticProps()in thepagesdirectory.",
                        "Setting the option of everyfetch()request in a layout or page to{ cache: 'force-cache' }.",
                        "Setting the segment config tofetchCache = 'only-cache', dynamicParams = false.",
                        "dynamic = 'error'changes the default ofdynamicParamsfromtruetofalse. You can opt back into dynamically rendering pages for dynamic params not generated bygenerateStaticParamsby manually settingdynamicParams = true."
                    ]
                },
                {
                    "type": "p",
                    "text": "'force-static': Force static rendering and cache the data of a layout or page by forcingcookies(),headers()anduseSearchParams()to return empty values."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Instructions onhow to migratefromgetServerSidePropsandgetStaticPropstodynamic: 'force-dynamic'anddynamic: 'error'can be found in theupgrade guide."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "dynamicParams"
                },
                {
                    "type": "p",
                    "text": "Control what happens when a dynamic segment is visited that was not generated withgenerateStaticParams."
                },
                {
                    "type": "code",
                    "code": "exportconstdynamicParams=true// true | false,"
                },
                {
                    "type": "list",
                    "items": [
                        "true(default): Dynamic segments not included ingenerateStaticParamsare generated on demand.",
                        "false: Dynamic segments not included ingenerateStaticParamswill return a 404."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "This option replaces thefallback: true | false | blockingoption ofgetStaticPathsin thepagesdirectory.",
                        "WhendynamicParams = true, the segment usesStreaming Server Rendering.",
                        "If thedynamic = 'error'anddynamic = 'force-static'are used, it'll change the default ofdynamicParamstofalse."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "revalidate"
                },
                {
                    "type": "p",
                    "text": "Set the default revalidation time for a layout or page. This option does not override therevalidatevalue set by individualfetchrequests."
                },
                {
                    "type": "code",
                    "code": "exportconstrevalidate=false// false | 0 | number"
                },
                {
                    "type": "list",
                    "items": [
                        "false(default): The default heuristic to cache anyfetchrequests that set theircacheoption to'force-cache'or are discovered before adynamic functionis used. Semantically equivalent torevalidate: Infinitywhich effectively means the resource should be cached indefinitely. It is still possible for individualfetchrequests to usecache: 'no-store'orrevalidate: 0to avoid being cached and make the route dynamically rendered. Or setrevalidateto a positive number lower than the route default to increase the revalidation frequency of a route.",
                        "0: Ensure a layout or page is alwaysdynamically renderedeven if no dynamic functions or uncached data fetches are discovered. This option changes the default offetchrequests that do not set acacheoption to'no-store'but leavesfetchrequests that opt into'force-cache'or use a positiverevalidateas is.",
                        "number: (in seconds) Set the default revalidation frequency of a layout or page tonseconds."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: Therevalidateoption is only available when using theNode.js Runtime. This means using therevalidateoption withruntime = 'edge'will not work."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Revalidation Frequency"
                },
                {
                    "type": "list",
                    "items": [
                        "The lowestrevalidateacross each layout and page of a single route will determine the revalidation frequency of theentireroute. This ensures that child pages are revalidated as frequently as their parent layouts.",
                        "Individualfetchrequests can set a lowerrevalidatethan the route's defaultrevalidateto increase the revalidation frequency of the entire route. This allows you to dynamically opt-in to more frequent revalidation for certain routes based on some criteria."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "fetchCache"
                },
                {
                    "type": "p",
                    "text": "By default, Next.jswill cacheanyfetch()requests that are reachablebeforeanydynamic functionsare used andwill not cachefetchrequests that are discoveredafterdynamic functions are used."
                },
                {
                    "type": "p",
                    "text": "fetchCacheallows you to override the defaultcacheoption of allfetchrequests in a layout or page."
                },
                {
                    "type": "code",
                    "code": "exportconstfetchCache='auto'// 'auto' | 'default-cache' | 'only-cache'// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'"
                },
                {
                    "type": "list",
                    "items": [
                        "'auto'(default): The default option to cachefetchrequests before dynamic functions with thecacheoption they provide and not cachefetchrequests after dynamic functions.",
                        "'default-cache': Allow anycacheoption to be passed tofetchbut if no option is provided then set thecacheoption to'force-cache'. This means that evenfetchrequests after dynamic functions are considered static.",
                        "'only-cache': Ensure allfetchrequests opt into caching by changing the default tocache: 'force-cache'if no option is provided and causing an error if anyfetchrequests usecache: 'no-store'.",
                        "'force-cache': Ensure allfetchrequests opt into caching by setting thecacheoption of allfetchrequests to'force-cache'.",
                        "'default-no-store': Allow anycacheoption to be passed tofetchbut if no option is provided then set thecacheoption to'no-store'. This means that evenfetchrequests before dynamic functions are considered dynamic.",
                        "'only-no-store': Ensure allfetchrequests opt out of caching by changing the default tocache: 'no-store'if no option is provided and causing an error if anyfetchrequests usecache: 'force-cache'",
                        "'force-no-store': Ensure allfetchrequests opt out of caching by setting thecacheoption of allfetchrequests to'no-store'. This forces allfetchrequests to be re-fetched every request even if they provide a'force-cache'option."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Cross-route segment behavior"
                },
                {
                    "type": "list",
                    "items": [
                        "Any options set across each layout and page of a single route need to be compatible with each other.If both the'only-cache'and'force-cache'are provided, then'force-cache'wins. If both'only-no-store'and'force-no-store'are provided, then'force-no-store'wins. The force option changes the behavior across the route so a single segment with'force-*'would prevent any errors caused by'only-*'.The intention of the'only-*'andforce-*'options is to guarantee the whole route is either fully static or fully dynamic. This means:A combination of'only-cache'and'only-no-store'in a single route is not allowed.A combination of'force-cache'and'force-no-store'in a single route is not allowed.A parent cannot provide'default-no-store'if a child provides'auto'or'*-cache'since that could make the same fetch have different behavior.",
                        "If both the'only-cache'and'force-cache'are provided, then'force-cache'wins. If both'only-no-store'and'force-no-store'are provided, then'force-no-store'wins. The force option changes the behavior across the route so a single segment with'force-*'would prevent any errors caused by'only-*'.",
                        "The intention of the'only-*'andforce-*'options is to guarantee the whole route is either fully static or fully dynamic. This means:A combination of'only-cache'and'only-no-store'in a single route is not allowed.A combination of'force-cache'and'force-no-store'in a single route is not allowed.",
                        "A combination of'only-cache'and'only-no-store'in a single route is not allowed.",
                        "A combination of'force-cache'and'force-no-store'in a single route is not allowed.",
                        "A parent cannot provide'default-no-store'if a child provides'auto'or'*-cache'since that could make the same fetch have different behavior.",
                        "It is generally recommended to leave shared parent layouts as'auto'and customize the options where child segments diverge."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "If both the'only-cache'and'force-cache'are provided, then'force-cache'wins. If both'only-no-store'and'force-no-store'are provided, then'force-no-store'wins. The force option changes the behavior across the route so a single segment with'force-*'would prevent any errors caused by'only-*'.",
                        "The intention of the'only-*'andforce-*'options is to guarantee the whole route is either fully static or fully dynamic. This means:A combination of'only-cache'and'only-no-store'in a single route is not allowed.A combination of'force-cache'and'force-no-store'in a single route is not allowed.",
                        "A combination of'only-cache'and'only-no-store'in a single route is not allowed.",
                        "A combination of'force-cache'and'force-no-store'in a single route is not allowed.",
                        "A parent cannot provide'default-no-store'if a child provides'auto'or'*-cache'since that could make the same fetch have different behavior."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "A combination of'only-cache'and'only-no-store'in a single route is not allowed.",
                        "A combination of'force-cache'and'force-no-store'in a single route is not allowed."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "runtime"
                },
                {
                    "type": "code",
                    "code": "exportconstruntime='nodejs'// 'nodejs' | 'edge'"
                },
                {
                    "type": "list",
                    "items": [
                        "'nodejs'(default)",
                        "'edge'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about theEdge and Node.js runtimes."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "preferredRegion"
                },
                {
                    "type": "code",
                    "code": "exportconstpreferredRegion='auto'// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']"
                },
                {
                    "type": "p",
                    "text": "Support forpreferredRegion, and regions supported, is dependent on your deployment platform."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "If apreferredRegionis not specified, it will inherit the option of the nearest parent layout.",
                        "The root layout defaults toallregions."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "maxDuration"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js does not limit the execution of server-side logic (rendering a page or handling an API).\nDeployment platforms can usemaxDurationfrom the Next.js build output to add specific execution limits.\nFor example, onVercel."
                },
                {
                    "type": "p",
                    "text": "Note: This settings requires Next.js13.4.10or higher."
                },
                {
                    "type": "code",
                    "code": "exportconstmaxDuration=5"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "If usingServer Actions, set themaxDurationat the page level to change the default timeout of all Server Actions used on the page."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateStaticParams"
                },
                {
                    "type": "p",
                    "text": "ThegenerateStaticParamsfunction can be used in combination withdynamic route segmentsto define the list of route segment parameters that will be statically generated at build time instead of on-demand at request time."
                },
                {
                    "type": "p",
                    "text": "See theAPI referencefor more details."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/template",
            "title": "File Conventions: template.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "template.js"
                },
                {
                    "type": "p",
                    "text": "Atemplatefile is similar to alayoutin that it wraps each child layout or page. Unlike layouts that persist across routes and maintain state, templates create a new instance for each of their children on navigation."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionTemplate({ children }:{ children:React.ReactNode}) {return<div>{children}</div>}"
                },
                {
                    "type": "p",
                    "text": "While less common, you might choose a template over a layout if you want:"
                },
                {
                    "type": "list",
                    "items": [
                        "Features that rely onuseEffect(e.g logging page views) anduseState(e.g a per-page feedback form).",
                        "To change the default framework behavior. For example, Suspense Boundaries inside layouts only show the fallback the first time the Layout is loaded and not when switching pages. For templates, the fallback is shown on each navigation."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "children(required)"
                },
                {
                    "type": "p",
                    "text": "Template components should accept and use achildrenprop.templateis rendered between alayoutand its children. For example:"
                },
                {
                    "type": "code",
                    "code": "<Layout>{/* Note that the template is given a unique key. */}<Templatekey={routeParam}>{children}</Template></Layout>"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "By default,templateis aServer Component, but can also be used as aClient Componentthrough the\"use client\"directive.",
                        "When a user navigates between routes that share atemplate, a new instance of the component is mounted, DOM elements are recreated, state isnotpreserved, and effects are re-synchronized."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions",
            "title": "API Reference: Functions | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Functions"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "cookies"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "draftMode"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "fetch"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateImageMetadata"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateMetadata"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateSitemaps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateStaticParams"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateViewport"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "headers"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "ImageResponse"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "NextRequest"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "NextResponse"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "notFound"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "permanentRedirect"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "redirect"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "revalidatePath"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "revalidateTag"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "unstable_cache"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "unstable_noStore"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "useParams"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "usePathname"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "useReportWebVitals"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "useRouter"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "useSearchParams"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "useSelectedLayoutSegment"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "useSelectedLayoutSegments"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "userAgent"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/cookies",
            "title": "Functions: cookies | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "cookies"
                },
                {
                    "type": "p",
                    "text": "Thecookiesfunction allows you to read the HTTP incoming request cookies from aServer Componentor write outgoing request cookies in aServer ActionorRoute Handler."
                },
                {
                    "type": "p",
                    "text": "Good to know:cookies()is aDynamic Functionwhose returned values cannot be known ahead of time. Using it in a layout or page will opt a route intodynamic renderingat request time."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "cookies().get(name)"
                },
                {
                    "type": "p",
                    "text": "A method that takes a cookie name and returns an object with name and value. If a cookie withnameisn't found, it returnsundefined. If multiple cookies match, it will only return the first match."
                },
                {
                    "type": "code",
                    "code": "import{ cookies }from'next/headers'exportdefaultfunctionPage() {constcookieStore=cookies()consttheme=cookieStore.get('theme')return'...'}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "cookies().getAll()"
                },
                {
                    "type": "p",
                    "text": "A method that is similar toget, but returns a list of all the cookies with a matchingname. Ifnameis unspecified, it returns all the available cookies."
                },
                {
                    "type": "code",
                    "code": "import{ cookies }from'next/headers'exportdefaultfunctionPage() {constcookieStore=cookies()returncookieStore.getAll().map((cookie)=>(<divkey={cookie.name}><p>Name: {cookie.name}</p><p>Value: {cookie.value}</p></div>))}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "cookies().has(name)"
                },
                {
                    "type": "p",
                    "text": "A method that takes a cookie name and returns abooleanbased on if the cookie exists (true) or not (false)."
                },
                {
                    "type": "code",
                    "code": "import{ cookies }from'next/headers'exportdefaultfunctionPage() {constcookieStore=cookies()consthasCookie=cookieStore.has('theme')return'...'}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "cookies().set(name, value, options)"
                },
                {
                    "type": "p",
                    "text": "A method that takes a cookie name, value, and options and sets the outgoing request cookie."
                },
                {
                    "type": "p",
                    "text": "Good to know: HTTP does not allow setting cookies after streaming starts, so you must use.set()in aServer ActionorRoute Handler."
                },
                {
                    "type": "code",
                    "code": "'use server'import{ cookies }from'next/headers'asyncfunctioncreate(data) {cookies().set('name','lee')// orcookies().set('name','lee',{ secure:true})// orcookies().set({name:'name',value:'lee',httpOnly:true,path:'/',})}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deleting cookies"
                },
                {
                    "type": "p",
                    "text": "Good to know: You can only delete cookies in aServer ActionorRoute Handler."
                },
                {
                    "type": "p",
                    "text": "There are several options for deleting a cookie:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "cookies().delete(name)"
                },
                {
                    "type": "p",
                    "text": "You can explicitly delete a cookie with a given name."
                },
                {
                    "type": "code",
                    "code": "'use server'import{ cookies }from'next/headers'asyncfunctiondelete(data) {cookies().delete('name')}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "cookies().set(name, '')"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can set a new cookie with the same name and an empty value."
                },
                {
                    "type": "code",
                    "code": "'use server'import{ cookies }from'next/headers'asyncfunctiondelete(data) {cookies().set('name','')}"
                },
                {
                    "type": "p",
                    "text": "Good to know:.set()is only available in aServer ActionorRoute Handler."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "cookies().set(name, value, { maxAge: 0 })"
                },
                {
                    "type": "p",
                    "text": "SettingmaxAgeto 0 will immediately expire a cookie."
                },
                {
                    "type": "code",
                    "code": "'use server'import{ cookies }from'next/headers'asyncfunctiondelete(data) {cookies().set('name','value',{ maxAge:0})}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "cookies().set(name, value, { expires: timestamp })"
                },
                {
                    "type": "p",
                    "text": "Settingexpiresto any value in the past will immediately expire a cookie."
                },
                {
                    "type": "code",
                    "code": "'use server'import{ cookies }from'next/headers'asyncfunctiondelete(data) {constoneDay=24*60*60*1000cookies().set('name','value',{ expires:Date.now()-oneDay })}"
                },
                {
                    "type": "p",
                    "text": "Good to know: You can only delete cookies that belong to the same domain from which.set()is called. Additionally, the code must be executed on the same protocol (HTTP or HTTPS) as the cookie you want to delete."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Actions and Mutations"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/draft-mode",
            "title": "Functions: draftMode | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "draftMode"
                },
                {
                    "type": "p",
                    "text": "ThedraftModefunction allows you to detectDraft Modeinside aServer Component."
                },
                {
                    "type": "code",
                    "code": "import{ draftMode }from'next/headers'exportdefaultfunctionPage() {const{isEnabled}=draftMode()return(<main><h1>My Blog Post</h1><p>Draft Mode is currently {isEnabled?'Enabled':'Disabled'}</p></main>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/fetch",
            "title": "Functions: fetch | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "fetch"
                },
                {
                    "type": "p",
                    "text": "Next.js extends the nativeWebfetch()APIto allow each request on the server to set its own persistent caching semantics."
                },
                {
                    "type": "p",
                    "text": "In the browser, thecacheoption indicates how a fetch request will interact with thebrowser'sHTTP cache. With this extension,cacheindicates how aserver-sidefetch request will interact with the framework's persistent HTTP cache."
                },
                {
                    "type": "p",
                    "text": "You can callfetchwithasyncandawaitdirectly within Server Components."
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {// This request should be cached until manually invalidated.// Similar to `getStaticProps`.// `force-cache` is the default and can be omitted.conststaticData=awaitfetch(`https://...`,{ cache:'force-cache'})// This request should be refetched on every request.// Similar to `getServerSideProps`.constdynamicData=awaitfetch(`https://...`,{ cache:'no-store'})// This request should be cached with a lifetime of 10 seconds.// Similar to `getStaticProps` with the `revalidate` option.constrevalidatedData=awaitfetch(`https://...`,{next:{ revalidate:10},})return<div>...</div>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "fetch(url, options)"
                },
                {
                    "type": "p",
                    "text": "Since Next.js extends theWebfetch()API, you can use any of thenative options available."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "options.cache"
                },
                {
                    "type": "p",
                    "text": "Configure how the request should interact with Next.jsData Cache."
                },
                {
                    "type": "code",
                    "code": "fetch(`https://...`,{ cache:'force-cache'|'no-store'})"
                },
                {
                    "type": "list",
                    "items": [
                        "force-cache(default) - Next.js looks for a matching request in its Data Cache.If there is a match and it is fresh, it will be returned from the cache.If there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource.",
                        "If there is a match and it is fresh, it will be returned from the cache.",
                        "If there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource.",
                        "no-store- Next.js fetches the resource from the remote server on every request without looking in the cache, and it will not update the cache with the downloaded resource."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "If there is a match and it is fresh, it will be returned from the cache.",
                        "If there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "If you don't provide acacheoption, Next.js will default toforce-cache, unless adynamic functionsuch ascookies()is used, in which case it will default tono-store.",
                        "Theno-cacheoption behaves the same way asno-storein Next.js."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "options.next.revalidate"
                },
                {
                    "type": "code",
                    "code": "fetch(`https://...`,{ next:{ revalidate:false|0|number } })"
                },
                {
                    "type": "p",
                    "text": "Set the cache lifetime of a resource (in seconds)."
                },
                {
                    "type": "list",
                    "items": [
                        "false- Cache the resource indefinitely. Semantically equivalent torevalidate: Infinity. The HTTP cache may evict older resources over time.",
                        "0- Prevent the resource from being cached.",
                        "number- (in seconds) Specify the resource should have a cache lifetime of at mostnseconds."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "If an individualfetch()request sets arevalidatenumber lower than thedefaultrevalidateof a route, the whole route revalidation interval will be decreased.",
                        "If two fetch requests with the same URL in the same route have differentrevalidatevalues, the lower value will be used.",
                        "As a convenience, it is not necessary to set thecacheoption ifrevalidateis set to a number since0impliescache: 'no-store'and a positive value impliescache: 'force-cache'.",
                        "Conflicting options such as{ revalidate: 0, cache: 'force-cache' }or{ revalidate: 10, cache: 'no-store' }will cause an error."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "options.next.tags"
                },
                {
                    "type": "code",
                    "code": "fetch(`https://...`,{ next:{ tags:['collection'] } })"
                },
                {
                    "type": "p",
                    "text": "Set the cache tags of a resource. Data can then be revalidated on-demand usingrevalidateTag. The max length for a custom tag is 256 characters and the max tag items is 64."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-image-metadata",
            "title": "Functions: generateImageMetadata | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "generateImageMetadata"
                },
                {
                    "type": "p",
                    "text": "You can usegenerateImageMetadatato generate different versions of one image or return multiple images for one route segment. This is useful for when you want to avoid hard-coding metadata values, such as for icons."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "p",
                    "text": "generateImageMetadatafunction accepts the following parameters:"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "params(optional)"
                },
                {
                    "type": "p",
                    "text": "An object containing thedynamic route parametersobject from the root segment down to the segmentgenerateImageMetadatais called from."
                },
                {
                    "type": "code",
                    "code": "exportfunctiongenerateImageMetadata({params,}:{params:{ slug:string}}) {// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "ThegenerateImageMetadatafunction should return anarrayof objects containing the image's metadata such asaltandsize. In addition, each itemmustinclude anidvalue which will be passed to the props of the image generating function."
                },
                {
                    "type": "code",
                    "code": "import{ ImageResponse }from'next/og'exportfunctiongenerateImageMetadata() {return[{contentType:'image/png',size:{ width:48,height:48},id:'small',},{contentType:'image/png',size:{ width:72,height:72},id:'medium',},]}exportdefaultfunctionIcon({ id }:{ id:string}) {returnnewImageResponse((<divstyle={{width:'100%',height:'100%',display:'flex',alignItems:'center',justifyContent:'center',fontSize:88,background:'#000',color:'#fafafa',}}>Icon {id}</div>))}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Using external data"
                },
                {
                    "type": "p",
                    "text": "This example uses theparamsobject and external data to generate multipleOpen Graph imagesfor a route segment."
                },
                {
                    "type": "code",
                    "code": "import{ ImageResponse }from'next/og'import{ getCaptionForImage,getOGImages }from'@/app/utils/images'exportasyncfunctiongenerateImageMetadata({params,}:{params:{ id:string}}) {constimages=awaitgetOGImages(params.id)returnimages.map((image,idx)=>({id:idx,size:{ width:1200,height:600},alt:image.text,contentType:'image/png',}))}exportdefaultasyncfunctionImage({params,id,}:{params:{ id:string}id:number}) {constproductId=params.idconstimageId=idconsttext=awaitgetCaptionForImage(productId,imageId)returnnewImageResponse((<divstyle={{// ...}}>{text}</div>))}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata Files"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-metadata",
            "title": "Functions: generateMetadata | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Metadata Object and generateMetadata Options"
                },
                {
                    "type": "p",
                    "text": "This page covers allConfig-based Metadataoptions withgenerateMetadataand the static metadata object."
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'// either Static metadataexportconstmetadata:Metadata={title:'...',}// or Dynamic metadataexportasyncfunctiongenerateMetadata({ params }) {return{title:'...',}}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Themetadataobject andgenerateMetadatafunction exports areonly supported in Server Components.",
                        "You cannot export both themetadataobject andgenerateMetadatafunction from the same route segment."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Themetadataobject"
                },
                {
                    "type": "p",
                    "text": "To define static metadata, export aMetadataobjectfrom alayout.jsorpage.jsfile."
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'exportconstmetadata:Metadata={title:'...',description:'...',}exportdefaultfunctionPage() {}"
                },
                {
                    "type": "p",
                    "text": "See theMetadata Fieldsfor a complete list of supported options."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "generateMetadatafunction"
                },
                {
                    "type": "p",
                    "text": "Dynamic metadata depends ondynamic information, such as the current route parameters, external data, ormetadatain parent segments, can be set by exporting agenerateMetadatafunction that returns aMetadataobject."
                },
                {
                    "type": "code",
                    "code": "import{ Metadata,ResolvingMetadata }from'next'typeProps={params:{ id:string}searchParams:{ [key:string]:string|string[]|undefined}}exportasyncfunctiongenerateMetadata({ params,searchParams }:Props,parent:ResolvingMetadata):Promise<Metadata> {// read route paramsconstid=params.id// fetch dataconstproduct=awaitfetch(`https://.../${id}`).then((res)=>res.json())// optionally access and extend (rather than replace) parent metadataconstpreviousImages=(awaitparent).openGraph?.images||[]return{title:product.title,openGraph:{images:['/some-specific-page-image.jpg',...previousImages],},}}exportdefaultfunctionPage({ params,searchParams }:Props) {}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Parameters"
                },
                {
                    "type": "p",
                    "text": "generateMetadatafunction accepts the following parameters:"
                },
                {
                    "type": "list",
                    "items": [
                        "props- An object containing the parameters of the current route:params- An object containing thedynamic route parametersobject from the root segment down to the segmentgenerateMetadatais called from. Examples:RouteURLparamsapp/shop/[slug]/page.js/shop/1{ slug: '1' }app/shop/[tag]/[item]/page.js/shop/1/2{ tag: '1', item: '2' }app/shop/[...slug]/page.js/shop/1/2{ slug: ['1', '2'] }searchParams- An object containing the current URL'ssearch params. Examples:URLsearchParams/shop?a=1{ a: '1' }/shop?a=1&b=2{ a: '1', b: '2' }/shop?a=1&a=2{ a: ['1', '2'] }",
                        "params- An object containing thedynamic route parametersobject from the root segment down to the segmentgenerateMetadatais called from. Examples:RouteURLparamsapp/shop/[slug]/page.js/shop/1{ slug: '1' }app/shop/[tag]/[item]/page.js/shop/1/2{ tag: '1', item: '2' }app/shop/[...slug]/page.js/shop/1/2{ slug: ['1', '2'] }",
                        "searchParams- An object containing the current URL'ssearch params. Examples:URLsearchParams/shop?a=1{ a: '1' }/shop?a=1&b=2{ a: '1', b: '2' }/shop?a=1&a=2{ a: ['1', '2'] }",
                        "parent- A promise of the resolved metadata from parent route segments."
                    ]
                },
                {
                    "type": "p",
                    "text": "props- An object containing the parameters of the current route:"
                },
                {
                    "type": "list",
                    "items": [
                        "params- An object containing thedynamic route parametersobject from the root segment down to the segmentgenerateMetadatais called from. Examples:RouteURLparamsapp/shop/[slug]/page.js/shop/1{ slug: '1' }app/shop/[tag]/[item]/page.js/shop/1/2{ tag: '1', item: '2' }app/shop/[...slug]/page.js/shop/1/2{ slug: ['1', '2'] }",
                        "searchParams- An object containing the current URL'ssearch params. Examples:URLsearchParams/shop?a=1{ a: '1' }/shop?a=1&b=2{ a: '1', b: '2' }/shop?a=1&a=2{ a: ['1', '2'] }"
                    ]
                },
                {
                    "type": "p",
                    "text": "params- An object containing thedynamic route parametersobject from the root segment down to the segmentgenerateMetadatais called from. Examples:"
                },
                {
                    "type": "p",
                    "text": "searchParams- An object containing the current URL'ssearch params. Examples:"
                },
                {
                    "type": "p",
                    "text": "parent- A promise of the resolved metadata from parent route segments."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "generateMetadatashould return aMetadataobjectcontaining one or more metadata fields."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "If metadata doesn't depend on runtime information, it should be defined using the staticmetadataobjectrather thangenerateMetadata.",
                        "fetchrequests are automaticallymemoizedfor the same data acrossgenerateMetadata,generateStaticParams, Layouts, Pages, and Server Components. Reactcachecan be usediffetchis unavailable.",
                        "searchParamsare only available inpage.jssegments.",
                        "Theredirect()andnotFound()Next.js methods can also be used insidegenerateMetadata."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Metadata Fields"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "title"
                },
                {
                    "type": "p",
                    "text": "Thetitleattribute is used to set the title of the document. It can be defined as a simplestringor an optionaltemplate object."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "String"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={title:'Next.js',}"
                },
                {
                    "type": "code",
                    "code": "<title>Next.js</title>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Template object"
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'exportconstmetadata:Metadata={title:{template:'...',default:'...',absolute:'...',},}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Default"
                },
                {
                    "type": "p",
                    "text": "title.defaultcan be used to provide afallback titleto child route segments that don't define atitle."
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:{default:'Acme',},}"
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={}// Output: <title>Acme</title>"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Template"
                },
                {
                    "type": "p",
                    "text": "title.templatecan be used to add a prefix or a suffix totitlesdefined inchildroute segments."
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'exportconstmetadata:Metadata={title:{template:'%s | Acme',default:'Acme',// a default is required when creating a template},}"
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'exportconstmetadata:Metadata={title:'About',}// Output: <title>About | Acme</title>"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "title.templateapplies tochildroute segments andnotthe segment it's defined in. This means:title.defaultisrequiredwhen you add atitle.template.title.templatedefined inlayout.jswill not apply to atitledefined in apage.jsof the same route segment.title.templatedefined inpage.jshas no effect because a page is always the terminating segment (it doesn't have any children route segments).",
                        "title.defaultisrequiredwhen you add atitle.template.",
                        "title.templatedefined inlayout.jswill not apply to atitledefined in apage.jsof the same route segment.",
                        "title.templatedefined inpage.jshas no effect because a page is always the terminating segment (it doesn't have any children route segments).",
                        "title.templatehasno effectif a route has not defined atitleortitle.default."
                    ]
                },
                {
                    "type": "p",
                    "text": "title.templateapplies tochildroute segments andnotthe segment it's defined in. This means:"
                },
                {
                    "type": "list",
                    "items": [
                        "title.defaultisrequiredwhen you add atitle.template.",
                        "title.templatedefined inlayout.jswill not apply to atitledefined in apage.jsof the same route segment.",
                        "title.templatedefined inpage.jshas no effect because a page is always the terminating segment (it doesn't have any children route segments)."
                    ]
                },
                {
                    "type": "p",
                    "text": "title.templatehasno effectif a route has not defined atitleortitle.default."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Absolute"
                },
                {
                    "type": "p",
                    "text": "title.absolutecan be used to provide a title thatignorestitle.templateset in parent segments."
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'exportconstmetadata:Metadata={title:{template:'%s | Acme',},}"
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'exportconstmetadata:Metadata={title:{absolute:'About',},}// Output: <title>About</title>"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "layout.jstitle(string) andtitle.defaultdefine the default title for child segments (that do not define their owntitle). It will augmenttitle.templatefrom the closest parent segment if it exists.title.absolutedefines the default title for child segments. It ignorestitle.templatefrom parent segments.title.templatedefines a new title template for child segments.",
                        "title(string) andtitle.defaultdefine the default title for child segments (that do not define their owntitle). It will augmenttitle.templatefrom the closest parent segment if it exists.",
                        "title.absolutedefines the default title for child segments. It ignorestitle.templatefrom parent segments.",
                        "title.templatedefines a new title template for child segments.",
                        "page.jsIf a page does not define its own title the closest parents resolved title will be used.title(string) defines the routes title. It will augmenttitle.templatefrom the closest parent segment if it exists.title.absolutedefines the route title. It ignorestitle.templatefrom parent segments.title.templatehas no effect inpage.jsbecause a page is always the terminating segment of a route.",
                        "If a page does not define its own title the closest parents resolved title will be used.",
                        "title(string) defines the routes title. It will augmenttitle.templatefrom the closest parent segment if it exists.",
                        "title.absolutedefines the route title. It ignorestitle.templatefrom parent segments.",
                        "title.templatehas no effect inpage.jsbecause a page is always the terminating segment of a route."
                    ]
                },
                {
                    "type": "p",
                    "text": "layout.js"
                },
                {
                    "type": "list",
                    "items": [
                        "title(string) andtitle.defaultdefine the default title for child segments (that do not define their owntitle). It will augmenttitle.templatefrom the closest parent segment if it exists.",
                        "title.absolutedefines the default title for child segments. It ignorestitle.templatefrom parent segments.",
                        "title.templatedefines a new title template for child segments."
                    ]
                },
                {
                    "type": "p",
                    "text": "page.js"
                },
                {
                    "type": "list",
                    "items": [
                        "If a page does not define its own title the closest parents resolved title will be used.",
                        "title(string) defines the routes title. It will augmenttitle.templatefrom the closest parent segment if it exists.",
                        "title.absolutedefines the route title. It ignorestitle.templatefrom parent segments.",
                        "title.templatehas no effect inpage.jsbecause a page is always the terminating segment of a route."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "description"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={description:'The React Framework for the Web',}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"description\"content=\"The React Framework for the Web\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Basic Fields"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={generator:'Next.js',applicationName:'Next.js',referrer:'origin-when-cross-origin',keywords:['Next.js','React','JavaScript'],authors:[{ name:'Seb'},{ name:'Josh',url:'https://nextjs.org'}],creator:'Jiachi Liu',publisher:'Sebastian Markbåge',formatDetection:{email:false,address:false,telephone:false,},}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"application-name\"content=\"Next.js\"/><metaname=\"author\"content=\"Seb\"/><linkrel=\"author\"href=\"https://nextjs.org\"/><metaname=\"author\"content=\"Josh\"/><metaname=\"generator\"content=\"Next.js\"/><metaname=\"keywords\"content=\"Next.js,React,JavaScript\"/><metaname=\"referrer\"content=\"origin-when-cross-origin\"/><metaname=\"color-scheme\"content=\"dark\"/><metaname=\"creator\"content=\"Jiachi Liu\"/><metaname=\"publisher\"content=\"Sebastian Markbåge\"/><metaname=\"format-detection\"content=\"telephone=no, address=no, email=no\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "metadataBase"
                },
                {
                    "type": "p",
                    "text": "metadataBaseis a convenience option to set a base URL prefix formetadatafields that require a fully qualified URL."
                },
                {
                    "type": "list",
                    "items": [
                        "metadataBaseallows URL-basedmetadatafields defined in thecurrent route segment and belowto use arelative pathinstead of an otherwise required absolute URL.",
                        "The field's relative path will be composed withmetadataBaseto form a fully qualified URL.",
                        "If not configured,metadataBaseisautomatically populatedwith adefault value."
                    ]
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={metadataBase:newURL('https://acme.com'),alternates:{canonical:'/',languages:{'en-US':'/en-US','de-DE':'/de-DE',},},openGraph:{images:'/og-image.png',},}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"canonical\"href=\"https://acme.com\"/><linkrel=\"alternate\"hreflang=\"en-US\"href=\"https://acme.com/en-US\"/><linkrel=\"alternate\"hreflang=\"de-DE\"href=\"https://acme.com/de-DE\"/><metaproperty=\"og:image\"content=\"https://acme.com/og-image.png\"/>"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "metadataBaseis typically set in rootapp/layout.jsto apply to URL-basedmetadatafields across all routes.",
                        "All URL-basedmetadatafields that require absolute URLs can be configured with ametadataBaseoption.",
                        "metadataBasecan contain a subdomain e.g.https://app.acme.comor base path e.g.https://acme.com/start/from/here",
                        "If ametadatafield provides an absolute URL,metadataBasewill be ignored.",
                        "Using a relative path in a URL-basedmetadatafield without configuring ametadataBasewill cause a build error.",
                        "Next.js will normalize duplicate slashes betweenmetadataBase(e.g.https://acme.com/) and a relative field (e.g./path) to a single slash (e.g.https://acme.com/path)"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Default value"
                },
                {
                    "type": "p",
                    "text": "If not configured,metadataBasehas adefault value"
                },
                {
                    "type": "list",
                    "items": [
                        "WhenVERCEL_URLis detected:https://${process.env.VERCEL_URL}otherwise it falls back tohttp://localhost:${process.env.PORT || 3000}.",
                        "When overriding the default, we recommend using environment variables to compute the URL. This allows configuring a URL for local development, staging, and production environments."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "URL Composition"
                },
                {
                    "type": "p",
                    "text": "URL composition favors developer intent over default directory traversal semantics."
                },
                {
                    "type": "list",
                    "items": [
                        "Trailing slashes betweenmetadataBaseandmetadatafields are normalized.",
                        "An \"absolute\" path in ametadatafield (that typically would replace the whole URL path) is treated as a \"relative\" path (starting from the end ofmetadataBase)."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, given the followingmetadataBase:"
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'exportconstmetadata:Metadata={metadataBase:newURL('https://acme.com'),}"
                },
                {
                    "type": "p",
                    "text": "Anymetadatafields that inherit the abovemetadataBaseand set their own value will be resolved as follows:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "openGraph"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={openGraph:{title:'Next.js',description:'The React Framework for the Web',url:'https://nextjs.org',siteName:'Next.js',images:[{url:'https://nextjs.org/og.png',// Must be an absolute URLwidth:800,height:600,},{url:'https://nextjs.org/og-alt.png',// Must be an absolute URLwidth:1800,height:1600,alt:'My custom alt',},],videos:[{url:'https://nextjs.org/video.mp4',// Must be an absolute URLwidth:800,height:600,},],audio:[{url:'https://nextjs.org/audio.mp3',// Must be an absolute URL},],locale:'en_US',type:'website',},}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"og:title\"content=\"Next.js\"/><metaproperty=\"og:description\"content=\"The React Framework for the Web\"/><metaproperty=\"og:url\"content=\"https://nextjs.org/\"/><metaproperty=\"og:site_name\"content=\"Next.js\"/><metaproperty=\"og:locale\"content=\"en_US\"/><metaproperty=\"og:image:url\"content=\"https://nextjs.org/og.png\"/><metaproperty=\"og:image:width\"content=\"800\"/><metaproperty=\"og:image:height\"content=\"600\"/><metaproperty=\"og:image:url\"content=\"https://nextjs.org/og-alt.png\"/><metaproperty=\"og:image:width\"content=\"1800\"/><metaproperty=\"og:image:height\"content=\"1600\"/><metaproperty=\"og:image:alt\"content=\"My custom alt\"/><metaproperty=\"og:video\"content=\"https://nextjs.org/video.mp4\"/><metaproperty=\"og:video:width\"content=\"800\"/><metaproperty=\"og:video:height\"content=\"600\"/><metaproperty=\"og:audio\"content=\"https://nextjs.org/audio.mp3\"/><metaproperty=\"og:type\"content=\"website\"/>"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={openGraph:{title:'Next.js',description:'The React Framework for the Web',type:'article',publishedTime:'2023-01-01T00:00:00.000Z',authors:['Seb','Josh'],},}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"og:title\"content=\"Next.js\"/><metaproperty=\"og:description\"content=\"The React Framework for the Web\"/><metaproperty=\"og:type\"content=\"article\"/><metaproperty=\"article:published_time\"content=\"2023-01-01T00:00:00.000Z\"/><metaproperty=\"article:author\"content=\"Seb\"/><metaproperty=\"article:author\"content=\"Josh\"/>"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "It may be more convenient to use thefile-based Metadata APIfor Open Graph images. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "robots"
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={robots:{index:false,follow:true,nocache:true,googleBot:{index:true,follow:false,noimageindex:true,'max-video-preview':-1,'max-image-preview':'large','max-snippet':-1,},},}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"robots\"content=\"noindex, follow, nocache\"/><metaname=\"googlebot\"content=\"index, nofollow, noimageindex, max-video-preview:-1, max-image-preview:large, max-snippet:-1\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "icons"
                },
                {
                    "type": "p",
                    "text": "Good to know: We recommend using thefile-based Metadata APIfor icons where possible. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you."
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={icons:{icon:'/icon.png',shortcut:'/shortcut-icon.png',apple:'/apple-icon.png',other:{rel:'apple-touch-icon-precomposed',url:'/apple-touch-icon-precomposed.png',},},}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"shortcut icon\"href=\"/shortcut-icon.png\"/><linkrel=\"icon\"href=\"/icon.png\"/><linkrel=\"apple-touch-icon\"href=\"/apple-icon.png\"/><linkrel=\"apple-touch-icon-precomposed\"href=\"/apple-touch-icon-precomposed.png\"/>"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={icons:{icon:[{ url:'/icon.png'},newURL('/icon.png','https://example.com'),{ url:'/icon-dark.png',media:'(prefers-color-scheme: dark)'},],shortcut:['/shortcut-icon.png'],apple:[{ url:'/apple-icon.png'},{ url:'/apple-icon-x3.png',sizes:'180x180',type:'image/png'},],other:[{rel:'apple-touch-icon-precomposed',url:'/apple-touch-icon-precomposed.png',},],},}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"shortcut icon\"href=\"/shortcut-icon.png\"/><linkrel=\"icon\"href=\"/icon.png\"/><linkrel=\"icon\"href=\"https://example.com/icon.png\"/><linkrel=\"icon\"href=\"/icon-dark.png\"media=\"(prefers-color-scheme: dark)\"/><linkrel=\"apple-touch-icon\"href=\"/apple-icon.png\"/><linkrel=\"apple-touch-icon-precomposed\"href=\"/apple-touch-icon-precomposed.png\"/><linkrel=\"apple-touch-icon\"href=\"/apple-icon-x3.png\"sizes=\"180x180\"type=\"image/png\"/>"
                },
                {
                    "type": "p",
                    "text": "Good to know: Themsapplication-*meta tags are no longer supported in Chromium builds of Microsoft Edge, and thus no longer needed."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "themeColor"
                },
                {
                    "type": "p",
                    "text": "Deprecated: ThethemeColoroption inmetadatais deprecated as of Next.js 14. Please use theviewportconfigurationinstead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "manifest"
                },
                {
                    "type": "p",
                    "text": "A web application manifest, as defined in theWeb Application Manifest specification."
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={manifest:'https://nextjs.org/manifest.json',}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"manifest\"href=\"https://nextjs.org/manifest.json\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "twitter"
                },
                {
                    "type": "p",
                    "text": "The Twitter specification is (surprisingly) used for more than just X (formerly known as Twitter)."
                },
                {
                    "type": "p",
                    "text": "Learn more about theTwitter Card markup reference."
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={twitter:{card:'summary_large_image',title:'Next.js',description:'The React Framework for the Web',siteId:'1467726470533754880',creator:'@nextjs',creatorId:'1467726470533754880',images:['https://nextjs.org/og.png'],// Must be an absolute URL},}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"twitter:card\"content=\"summary_large_image\"/><metaname=\"twitter:site:id\"content=\"1467726470533754880\"/><metaname=\"twitter:creator\"content=\"@nextjs\"/><metaname=\"twitter:creator:id\"content=\"1467726470533754880\"/><metaname=\"twitter:title\"content=\"Next.js\"/><metaname=\"twitter:description\"content=\"The React Framework for the Web\"/><metaname=\"twitter:image\"content=\"https://nextjs.org/og.png\"/>"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={twitter:{card:'app',title:'Next.js',description:'The React Framework for the Web',siteId:'1467726470533754880',creator:'@nextjs',creatorId:'1467726470533754880',images:{url:'https://nextjs.org/og.png',alt:'Next.js Logo',},app:{name:'twitter_app',id:{iphone:'twitter_app://iphone',ipad:'twitter_app://ipad',googleplay:'twitter_app://googleplay',},url:{iphone:'https://iphone_url',ipad:'https://ipad_url',},},},}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"twitter:site:id\"content=\"1467726470533754880\"/><metaname=\"twitter:creator\"content=\"@nextjs\"/><metaname=\"twitter:creator:id\"content=\"1467726470533754880\"/><metaname=\"twitter:title\"content=\"Next.js\"/><metaname=\"twitter:description\"content=\"The React Framework for the Web\"/><metaname=\"twitter:card\"content=\"app\"/><metaname=\"twitter:image\"content=\"https://nextjs.org/og.png\"/><metaname=\"twitter:image:alt\"content=\"Next.js Logo\"/><metaname=\"twitter:app:name:iphone\"content=\"twitter_app\"/><metaname=\"twitter:app:id:iphone\"content=\"twitter_app://iphone\"/><metaname=\"twitter:app:id:ipad\"content=\"twitter_app://ipad\"/><metaname=\"twitter:app:id:googleplay\"content=\"twitter_app://googleplay\"/><metaname=\"twitter:app:url:iphone\"content=\"https://iphone_url\"/><metaname=\"twitter:app:url:ipad\"content=\"https://ipad_url\"/><metaname=\"twitter:app:name:ipad\"content=\"twitter_app\"/><metaname=\"twitter:app:name:googleplay\"content=\"twitter_app\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "viewport"
                },
                {
                    "type": "p",
                    "text": "Deprecated: Theviewportoption inmetadatais deprecated as of Next.js 14. Please use theviewportconfigurationinstead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "verification"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={verification:{google:'google',yandex:'yandex',yahoo:'yahoo',other:{me:['my-email','my-link'],},},}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"google-site-verification\"content=\"google\"/><metaname=\"y_key\"content=\"yahoo\"/><metaname=\"yandex-verification\"content=\"yandex\"/><metaname=\"me\"content=\"my-email\"/><metaname=\"me\"content=\"my-link\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "appleWebApp"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={itunes:{appId:'myAppStoreID',appArgument:'myAppArgument',},appleWebApp:{title:'Apple Web App',statusBarStyle:'black-translucent',startupImage:['/assets/startup/apple-touch-startup-image-768x1004.png',{url:'/assets/startup/apple-touch-startup-image-1536x2008.png',media:'(device-width: 768px) and (device-height: 1024px)',},],},}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"apple-itunes-app\"content=\"app-id=myAppStoreID, app-argument=myAppArgument\"/><metaname=\"apple-mobile-web-app-capable\"content=\"yes\"/><metaname=\"apple-mobile-web-app-title\"content=\"Apple Web App\"/><linkhref=\"/assets/startup/apple-touch-startup-image-768x1004.png\"rel=\"apple-touch-startup-image\"/><linkhref=\"/assets/startup/apple-touch-startup-image-1536x2008.png\"media=\"(device-width: 768px) and (device-height: 1024px)\"rel=\"apple-touch-startup-image\"/><metaname=\"apple-mobile-web-app-status-bar-style\"content=\"black-translucent\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "alternates"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={alternates:{canonical:'https://nextjs.org',languages:{'en-US':'https://nextjs.org/en-US','de-DE':'https://nextjs.org/de-DE',},media:{'only screen and (max-width: 600px)':'https://nextjs.org/mobile',},types:{'application/rss+xml':'https://nextjs.org/rss',},},}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"canonical\"href=\"https://nextjs.org\"/><linkrel=\"alternate\"hreflang=\"en-US\"href=\"https://nextjs.org/en-US\"/><linkrel=\"alternate\"hreflang=\"de-DE\"href=\"https://nextjs.org/de-DE\"/><linkrel=\"alternate\"media=\"only screen and (max-width: 600px)\"href=\"https://nextjs.org/mobile\"/><linkrel=\"alternate\"type=\"application/rss+xml\"href=\"https://nextjs.org/rss\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "appLinks"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={appLinks:{ios:{url:'https://nextjs.org/ios',app_store_id:'app_store_id',},android:{package:'com.example.android/package',app_name:'app_name_android',},web:{url:'https://nextjs.org/web',should_fallback:true,},},}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"al:ios:url\"content=\"https://nextjs.org/ios\"/><metaproperty=\"al:ios:app_store_id\"content=\"app_store_id\"/><metaproperty=\"al:android:package\"content=\"com.example.android/package\"/><metaproperty=\"al:android:app_name\"content=\"app_name_android\"/><metaproperty=\"al:web:url\"content=\"https://nextjs.org/web\"/><metaproperty=\"al:web:should_fallback\"content=\"true\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "archives"
                },
                {
                    "type": "p",
                    "text": "Describes a collection of records, documents, or other materials of historical interest (source)."
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={archives:['https://nextjs.org/13'],}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"archives\"href=\"https://nextjs.org/13\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "assets"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={assets:['https://nextjs.org/assets'],}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"assets\"href=\"https://nextjs.org/assets\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "bookmarks"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={bookmarks:['https://nextjs.org/13'],}"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"bookmarks\"href=\"https://nextjs.org/13\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "category"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={category:'technology',}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"category\"content=\"technology\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "facebook"
                },
                {
                    "type": "p",
                    "text": "You can connect a Facebook app or Facebook account to you webpage for certain Facebook Social PluginsFacebook Documentation"
                },
                {
                    "type": "p",
                    "text": "Good to know: You can specify either appId or admins, but not both."
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={facebook:{appId:'12345678',},}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"fb:app_id\"content=\"12345678\"/>"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={facebook:{admins:'12345678',},}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"fb:admins\"content=\"12345678\"/>"
                },
                {
                    "type": "p",
                    "text": "If you want to generate multiple fb:admins meta tags you can use array value."
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={facebook:{admins:['12345678','87654321'],},}"
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"fb:admins\"content=\"12345678\"/><metaproperty=\"fb:admins\"content=\"87654321\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "other"
                },
                {
                    "type": "p",
                    "text": "All metadata options should be covered using the built-in support. However, there may be custom metadata tags specific to your site, or brand new metadata tags just released. You can use theotheroption to render any custom metadata tag."
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={other:{custom:'meta',},}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"custom\"content=\"meta\"/>"
                },
                {
                    "type": "p",
                    "text": "If you want to generate multiple same key meta tags you can use array value."
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={other:{custom:['meta1','meta2'],},}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"custom\"content=\"meta1\"/> <metaname=\"custom\"content=\"meta2\"/>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Unsupported Metadata"
                },
                {
                    "type": "p",
                    "text": "The following metadata types do not currently have built-in support. However, they can still be rendered in the layout or page itself."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Resource hints"
                },
                {
                    "type": "p",
                    "text": "The<link>element has a number ofrelkeywords that can be used to hint to the browser that an external resource is likely to be needed. The browser uses this information to apply preloading optimizations depending on the keyword."
                },
                {
                    "type": "p",
                    "text": "While the Metadata API doesn't directly support these hints, you can use newReactDOMmethodsto safely insert them into the<head>of the document."
                },
                {
                    "type": "code",
                    "code": "'use client'importReactDOMfrom'react-dom'exportfunctionPreloadResources() {ReactDOM.preload('...',{ as:'...'})ReactDOM.preconnect('...',{ crossOrigin:'...'})ReactDOM.prefetchDNS('...')returnnull}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "<link rel=\"preload\">"
                },
                {
                    "type": "p",
                    "text": "Start loading a resource early in the page rendering (browser) lifecycle.MDN Docs."
                },
                {
                    "type": "code",
                    "code": "ReactDOM.preload(href: string,options: { as:string })"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"preload\"href=\"...\"as=\"...\"/>"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "<link rel=\"preconnect\">"
                },
                {
                    "type": "p",
                    "text": "Preemptively initiate a connection to an origin.MDN Docs."
                },
                {
                    "type": "code",
                    "code": "ReactDOM.preconnect(href: string,options?:{ crossOrigin?:string })"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"preconnect\"href=\"...\"crossorigin/>"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "<link rel=\"dns-prefetch\">"
                },
                {
                    "type": "p",
                    "text": "Attempt to resolve a domain name before resources get requested.MDN Docs."
                },
                {
                    "type": "code",
                    "code": "ReactDOM.prefetchDNS(href: string)"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"dns-prefetch\"href=\"...\"/>"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "These methods are currently only supported in Client Components, which are still Server Side Rendered on initial page load.",
                        "Next.js in-built features such asnext/font,next/imageandnext/scriptautomatically handle relevant resource hints.",
                        "React 18.3 does not yet include type definitions forReactDOM.preload,ReactDOM.preconnect, andReactDOM.preconnectDNS. You can use// @ts-ignoreas a temporary solution to avoid type errors."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Types"
                },
                {
                    "type": "p",
                    "text": "You can add type safety to your metadata by using theMetadatatype. If you are using thebuilt-in TypeScript pluginin your IDE, you do not need to manually add the type, but you can still explicitly add it if you want."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "metadataobject"
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'Next.js',}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateMetadatafunction"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Regular function"
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'exportfunctiongenerateMetadata():Metadata{return{title:'Next.js',}}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Async function"
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'exportasyncfunctiongenerateMetadata():Promise<Metadata> {return{title:'Next.js',}}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "With segment props"
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'typeProps={params:{ id:string}searchParams:{ [key:string]:string|string[]|undefined}}exportfunctiongenerateMetadata({ params,searchParams }:Props):Metadata{return{title:'Next.js',}}exportdefaultfunctionPage({ params,searchParams }:Props) {}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "With parent metadata"
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata,ResolvingMetadata }from'next'exportasyncfunctiongenerateMetadata({ params,searchParams }:Props,parent:ResolvingMetadata):Promise<Metadata> {return{title:'Next.js',}}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "JavaScript Projects"
                },
                {
                    "type": "p",
                    "text": "For JavaScript projects, you can use JSDoc to add type safety."
                },
                {
                    "type": "code",
                    "code": "/**@type{import(\"next\").Metadata}*/exportconstmetadata={title:'Next.js',}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata Files"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateViewport"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-sitemaps",
            "title": "Functions: generateSitemaps | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "generateSitemaps"
                },
                {
                    "type": "p",
                    "text": "You can use thegenerateSitemapsfunction to generate multiple sitemaps for your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "ThegenerateSitemapsreturns an array of objects with anidproperty."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "URLs"
                },
                {
                    "type": "p",
                    "text": "In production, your generated sitemaps will be available at/.../sitemap/[id].xml. For example,/product/sitemap/1.xml."
                },
                {
                    "type": "p",
                    "text": "In development, you can view the generated sitemap on/.../sitemap.xml/[id]. For example,/product/sitemap.xml/1. This difference is temporary and will follow the production format."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "For example, to split a sitemap usinggenerateSitemaps, return an array of objects with the sitemapid. Then, use theidto generate the unique sitemaps."
                },
                {
                    "type": "code",
                    "code": "import{ BASE_URL }from'@/app/lib/constants'exportasyncfunctiongenerateSitemaps() {// Fetch the total number ofproducts and calculate the number of sitemaps neededreturn[{ id:0},{ id:1},{ id:2},{ id:3}]}exportdefaultasyncfunctionsitemap({id,}:{id:number}):Promise<MetadataRoute.Sitemap> {// Google's limit is 50,000 URLs per sitemapconststart=id*50000constend=start+50000constproducts=awaitgetProducts(`SELECT id, date FROMproducts WHERE id BETWEEN${start}AND${end}`)returnproducts.map((product)=>({url:`${BASE_URL}/product/${product.id}`,lastModified:product.date,}))}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "sitemap.xml"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-static-params",
            "title": "Functions: generateStaticParams | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "generateStaticParams"
                },
                {
                    "type": "p",
                    "text": "ThegenerateStaticParamsfunction can be used in combination withdynamic route segmentstostatically generateroutes at build time instead of on-demand at request time."
                },
                {
                    "type": "code",
                    "code": "// Return a list of `params` to populate the [slug] dynamic segmentexportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())returnposts.map((post)=>({slug:post.slug,}))}// Multiple versions of this page will be statically generated// using the `params` returned by `generateStaticParams`exportdefaultfunctionPage({ params }) {const{slug}=params// ...}"
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "You can use thedynamicParamssegment config option to control what happens when a dynamic segment is visited that was not generated withgenerateStaticParams.",
                        "Duringnext dev,generateStaticParamswill be called when you navigate to a route.",
                        "Duringnext build,generateStaticParamsruns before the corresponding Layouts or Pages are generated.",
                        "During revalidation (ISR),generateStaticParamswill not be called again.",
                        "generateStaticParamsreplaces thegetStaticPathsfunction in the Pages Router."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "p",
                    "text": "options.params(optional)"
                },
                {
                    "type": "p",
                    "text": "If multiple dynamic segments in a route usegenerateStaticParams, the childgenerateStaticParamsfunction is executed once for each set ofparamsthe parent generates."
                },
                {
                    "type": "p",
                    "text": "Theparamsobject contains the populatedparamsfrom the parentgenerateStaticParams, which can be used togenerate theparamsin a child segment."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "generateStaticParamsshould return an array of objects where each object represents the populated dynamic segments of a single route."
                },
                {
                    "type": "list",
                    "items": [
                        "Each property in the object is a dynamic segment to be filled in for the route.",
                        "The properties name is the segment's name, and the properties value is what that segment should be filled in with."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Single Dynamic Segment"
                },
                {
                    "type": "code",
                    "code": "exportfunctiongenerateStaticParams() {return[{ id:'1'},{ id:'2'},{ id:'3'}]}// Three versions of this page will be statically generated// using the `params` returned by `generateStaticParams`// - /product/1// - /product/2// - /product/3exportdefaultfunctionPage({ params }:{ params:{ id:string} }) {const{id}=params// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Multiple Dynamic Segments"
                },
                {
                    "type": "code",
                    "code": "exportfunctiongenerateStaticParams() {return[{ category:'a',product:'1'},{ category:'b',product:'2'},{ category:'c',product:'3'},]}// Three versions of this page will be statically generated// using the `params` returned by `generateStaticParams`// - /products/a/1// - /products/b/2// - /products/c/3exportdefaultfunctionPage({params,}:{params:{ category:string; product:string}}) {const{category,product}=params// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Catch-all Dynamic Segment"
                },
                {
                    "type": "code",
                    "code": "exportfunctiongenerateStaticParams() {return[{ slug:['a','1'] },{ slug:['b','2'] },{ slug:['c','3'] }]}// Three versions of this page will be statically generated// using the `params` returned by `generateStaticParams`// - /product/a/1// - /product/b/2// - /product/c/3exportdefaultfunctionPage({ params }:{ params:{ slug:string[] } }) {const{slug}=params// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Multiple Dynamic Segments in a Route"
                },
                {
                    "type": "p",
                    "text": "You can generate params for dynamic segments above the current layout or page, butnot below. For example, given theapp/products/[category]/[product]route:"
                },
                {
                    "type": "list",
                    "items": [
                        "app/products/[category]/[product]/page.jscan generate params forboth[category]and[product].",
                        "app/products/[category]/layout.jscanonlygenerate params for[category]."
                    ]
                },
                {
                    "type": "p",
                    "text": "There are two approaches to generating params for a route with multiple dynamic segments:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Generate params from the bottom up"
                },
                {
                    "type": "p",
                    "text": "Generate multiple dynamic segments from the child route segment."
                },
                {
                    "type": "code",
                    "code": "// Generate segments for both [category] and [product]exportasyncfunctiongenerateStaticParams() {constproducts=awaitfetch('https://.../products').then((res)=>res.json())returnproducts.map((product)=>({category:product.category.slug,product:product.id,}))}exportdefaultfunctionPage({params,}:{params:{ category:string; product:string}}) {// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Generate params from the top down"
                },
                {
                    "type": "p",
                    "text": "Generate the parent segments first and use the result to generate the child segments."
                },
                {
                    "type": "code",
                    "code": "// Generate segments for [category]exportasyncfunctiongenerateStaticParams() {constproducts=awaitfetch('https://.../products').then((res)=>res.json())returnproducts.map((product)=>({category:product.category.slug,}))}exportdefaultfunctionLayout({ params }:{ params:{ category:string} }) {// ...}"
                },
                {
                    "type": "p",
                    "text": "A child route segment'sgenerateStaticParamsfunction is executed once for each segment a parentgenerateStaticParamsgenerates."
                },
                {
                    "type": "p",
                    "text": "The childgenerateStaticParamsfunction can use theparamsreturned from the parentgenerateStaticParamsfunction to dynamically generate its own segments."
                },
                {
                    "type": "code",
                    "code": "// Generate segments for [product] using the `params` passed from// the parent segment's `generateStaticParams` functionexportasyncfunctiongenerateStaticParams({params: { category },}:{params:{ category:string}}) {constproducts=awaitfetch(`https://.../products?category=${category}`).then((res)=>res.json())returnproducts.map((product)=>({product:product.id,}))}exportdefaultfunctionPage({params,}:{params:{ category:string; product:string}}) {// ...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:fetchrequests are automaticallymemoizedfor the same data across allgenerate-prefixed functions, Layouts, Pages, and Server Components. Reactcachecan be usediffetchis unavailable."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Generate only a subset of params"
                },
                {
                    "type": "p",
                    "text": "You can generate a subset of params for a route by returning an array of objects with only the dynamic segments you want to generate. Then, by using thedynamicParamssegment config option, you can control what happens when a dynamic segment is visited that was not generated withgenerateStaticParams."
                },
                {
                    "type": "code",
                    "code": "// All posts besides the top 10 will be a 404exportconstdynamicParams=falseexportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())consttopPosts=posts.slice(0,10)returntopPosts.map((post)=>({slug:post.slug,}))}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-viewport",
            "title": "Functions: generateViewport | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "generateViewport"
                },
                {
                    "type": "p",
                    "text": "You can customize the initial viewport of the page with the staticviewportobject or the dynamicgenerateViewportfunction."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Theviewportobject andgenerateViewportfunction exports areonly supported in Server Components.",
                        "You cannot export both theviewportobject andgenerateViewportfunction from the same route segment.",
                        "If you're coming from migratingmetadataexports, you can usemetadata-to-viewport-export codemodto update your changes."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Theviewportobject"
                },
                {
                    "type": "p",
                    "text": "To define the viewport options, export aviewportobject from alayout.jsxorpage.jsxfile."
                },
                {
                    "type": "code",
                    "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={themeColor:'black',}exportdefaultfunctionPage() {}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "generateViewportfunction"
                },
                {
                    "type": "p",
                    "text": "generateViewportshould return aViewportobjectcontaining one or more viewport fields."
                },
                {
                    "type": "code",
                    "code": "exportfunctiongenerateViewport({ params }) {return{themeColor:'...',}}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "If the viewport doesn't depend on runtime information, it should be defined using the staticviewportobjectrather thangenerateMetadata."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Viewport Fields"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "themeColor"
                },
                {
                    "type": "p",
                    "text": "Learn more abouttheme-color."
                },
                {
                    "type": "p",
                    "text": "Simple theme color"
                },
                {
                    "type": "code",
                    "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={themeColor:'black',}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"theme-color\"content=\"black\"/>"
                },
                {
                    "type": "p",
                    "text": "With media attribute"
                },
                {
                    "type": "code",
                    "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={themeColor:[{ media:'(prefers-color-scheme: light)',color:'cyan'},{ media:'(prefers-color-scheme: dark)',color:'black'},],}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"theme-color\"media=\"(prefers-color-scheme: light)\"content=\"cyan\"/><metaname=\"theme-color\"media=\"(prefers-color-scheme: dark)\"content=\"black\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "width,initialScale,maximumScaleanduserScalable"
                },
                {
                    "type": "p",
                    "text": "Good to know: Theviewportmeta tag is automatically set, and manual configuration is usually unnecessary as the default is sufficient. However, the information is provided for completeness."
                },
                {
                    "type": "code",
                    "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={width:'device-width',initialScale:1,maximumScale:1,userScalable:false,// Also supported by less commonly used// interactiveWidget: 'resizes-visual',}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"viewport\"content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "colorScheme"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutcolor-scheme."
                },
                {
                    "type": "code",
                    "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={colorScheme:'dark',}"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"color-scheme\"content=\"dark\"/>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Types"
                },
                {
                    "type": "p",
                    "text": "You can add type safety to your viewport object by using theViewporttype. If you are using thebuilt-in TypeScript pluginin your IDE, you do not need to manually add the type, but you can still explicitly add it if you want."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "viewportobject"
                },
                {
                    "type": "code",
                    "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={themeColor:'black',}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateViewportfunction"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Regular function"
                },
                {
                    "type": "code",
                    "code": "importtype{ Viewport }from'next'exportfunctiongenerateViewport():Viewport{return{themeColor:'black',}}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "With segment props"
                },
                {
                    "type": "code",
                    "code": "importtype{ Viewport }from'next'typeProps={params:{ id:string}searchParams:{ [key:string]:string|string[]|undefined}}exportfunctiongenerateViewport({ params,searchParams }:Props):Viewport{return{themeColor:'black',}}exportdefaultfunctionPage({ params,searchParams }:Props) {}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "JavaScript Projects"
                },
                {
                    "type": "p",
                    "text": "For JavaScript projects, you can use JSDoc to add type safety."
                },
                {
                    "type": "code",
                    "code": "/**@type{import(\"next\").Viewport}*/exportconstviewport={themeColor:'black',}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata Files"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/headers",
            "title": "Functions: headers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "headers"
                },
                {
                    "type": "p",
                    "text": "Theheadersfunction allows you to read the HTTP incoming request headers from aServer Component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "headers()"
                },
                {
                    "type": "p",
                    "text": "This API extends theWeb Headers API. It isread-only, meaning you cannotset/deletethe outgoing request headers."
                },
                {
                    "type": "code",
                    "code": "import{ headers }from'next/headers'exportdefaultfunctionPage() {constheadersList=headers()constreferer=headersList.get('referer')return<div>Referer: {referer}</div>}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "headers()is aDynamic Functionwhose returned values cannot be known ahead of time. Using it in a layout or page will opt a route intodynamic renderingat request time."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "API Reference"
                },
                {
                    "type": "code",
                    "code": "constheadersList=headers()"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Parameters"
                },
                {
                    "type": "p",
                    "text": "headersdoes not take any parameters."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "headersreturns aread-onlyWeb Headersobject."
                },
                {
                    "type": "list",
                    "items": [
                        "Headers.entries(): Returns aniteratorallowing to go through all key/value pairs contained in this object.",
                        "Headers.forEach(): Executes a provided function once for each key/value pair in thisHeadersobject.",
                        "Headers.get(): Returns aStringsequence of all the values of a header within aHeadersobject with a given name.",
                        "Headers.has(): Returns a boolean stating whether aHeadersobject contains a certain header.",
                        "Headers.keys(): Returns aniteratorallowing you to go through all keys of the key/value pairs contained in this object.",
                        "Headers.values(): Returns aniteratorallowing you to go through all values of the key/value pairs contained in this object."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Usage with Data Fetching"
                },
                {
                    "type": "p",
                    "text": "headers()can be used in combination withSuspense for Data Fetching."
                },
                {
                    "type": "code",
                    "code": "import{ Suspense }from'react'import{ headers }from'next/headers'asyncfunctionUser() {constauthorization=headers().get('authorization')constres=awaitfetch('...',{headers:{ authorization },// Forward the authorization header})constuser=awaitres.json()return<h1>{user.name}</h1>}exportdefaultfunctionPage() {return(<Suspensefallback={null}><User/></Suspense>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "IP Address"
                },
                {
                    "type": "p",
                    "text": "headers()can be used to get the IP address of the client."
                },
                {
                    "type": "code",
                    "code": "import{ Suspense }from'react'import{ headers }from'next/headers'functionIP() {constFALLBACK_IP_ADDRESS='0.0.0.0'constforwardedFor=headers().get('x-forwarded-for')if(forwardedFor) {returnforwardedFor.split(',')[0]??FALLBACK_IP_ADDRESS}returnheaders().get('x-real-ip')??FALLBACK_IP_ADDRESS}exportdefaultfunctionPage() {return(<Suspensefallback={null}><IP/></Suspense>)}"
                },
                {
                    "type": "p",
                    "text": "In addition tox-forwarded-for,headers()can also read:"
                },
                {
                    "type": "list",
                    "items": [
                        "x-real-ip",
                        "x-forwarded-host",
                        "x-forwarded-port",
                        "x-forwarded-proto"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/image-response",
            "title": "Functions: ImageResponse | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "ImageResponse"
                },
                {
                    "type": "p",
                    "text": "TheImageResponseconstructor allows you to generate dynamic images using JSX and CSS. This is useful for generating social media images such as Open Graph images, Twitter cards, and more."
                },
                {
                    "type": "p",
                    "text": "The following options are available forImageResponse:"
                },
                {
                    "type": "code",
                    "code": "import{ ImageResponse }from'next/og'newImageResponse(element: ReactElement,options: {width?:number=1200height?:number=630emoji?:'twemoji'|'blobmoji'|'noto'|'openmoji'='twemoji',fonts?:{name:string,data:ArrayBuffer,weight:number,style:'normal'|'italic'}[]debug?:boolean=false// Options that will be passed to the HTTP responsestatus?:number=200statusText?:stringheaders?:Record<string,string>},)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Supported CSS Properties"
                },
                {
                    "type": "p",
                    "text": "Please refer toSatori’s documentationfor a list of supported HTML and CSS features."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/next-request",
            "title": "Functions: NextRequest | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "NextRequest"
                },
                {
                    "type": "p",
                    "text": "NextRequest extends theWeb Request APIwith additional convenience methods."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "cookies"
                },
                {
                    "type": "p",
                    "text": "Read or mutate theSet-Cookieheader of the request."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "set(name, value)"
                },
                {
                    "type": "p",
                    "text": "Given a name, set a cookie with the given value on the request."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home// Set a cookie to hide the banner// request will have a `Set-Cookie:show-banner=false;path=/home` headerrequest.cookies.set('show-banner','false')"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "get(name)"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, return the value of the cookie. If the cookie is not found,undefinedis returned. If multiple cookies are found, the first one is returned."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home// { name: 'show-banner', value: 'false', Path: '/home' }request.cookies.get('show-banner')"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "getAll()"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, return the values of the cookie. If no name is given, return all cookies on the request."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home// [//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },//   { name: 'experiments', value: 'winter-launch', Path: '/home' },// ]request.cookies.getAll('experiments')// Alternatively, get all cookies for the requestrequest.cookies.getAll()"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "delete(name)"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, delete the cookie from the request."
                },
                {
                    "type": "code",
                    "code": "// Returns true for deleted, false is nothing is deletedrequest.cookies.delete('experiments')"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "has(name)"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, returntrueif the cookie exists on the request."
                },
                {
                    "type": "code",
                    "code": "// Returns true if cookie exists, false if it does notrequest.cookies.has('experiments')"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "clear()"
                },
                {
                    "type": "p",
                    "text": "Remove theSet-Cookieheader from the request."
                },
                {
                    "type": "code",
                    "code": "request.cookies.clear()"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "nextUrl"
                },
                {
                    "type": "p",
                    "text": "Extends the nativeURLAPI with additional convenience methods, including Next.js specific properties."
                },
                {
                    "type": "code",
                    "code": "// Given a request to /home, pathname is /homerequest.nextUrl.pathname// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }request.nextUrl.searchParams"
                },
                {
                    "type": "p",
                    "text": "The following options are available:"
                },
                {
                    "type": "p",
                    "text": "Note:The internationalization properties from the Pages Router are not available for usage in the App Router. Learn more aboutinternationalization with the App Router."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ip"
                },
                {
                    "type": "p",
                    "text": "Theipproperty is a string that contains the IP address of the request. This value can optionally be provided by your hosting platform."
                },
                {
                    "type": "p",
                    "text": "Good to know:OnVercel, this value is provided by default. On other platforms, you can use theX-Forwarded-Forheader to provide the IP address."
                },
                {
                    "type": "code",
                    "code": "// Provided by Vercelrequest.ip// Self-hostingrequest.headers.get('X-Forwarded-For')"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "geo"
                },
                {
                    "type": "p",
                    "text": "Thegeoproperty is an object that contains the geographic information of the request. This value can optionally be provided by your hosting platform."
                },
                {
                    "type": "p",
                    "text": "Good to know:OnVercel, this value is provided by default. On other platforms, you can use theX-Forwarded-Forheader to provide the IP address, then use athird-party serviceto lookup the geographic information."
                },
                {
                    "type": "code",
                    "code": "// Provided by Vercelrequest.geo.cityrequest.geo.countryrequest.geo.regionrequest.geo.latituderequest.geo.longitude// Self-hostingfunctiongetGeo(request) {letip=request.headers.get('X-Forwarded-For')// Use a third-party service to lookup the geographic information}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/next-response",
            "title": "Functions: NextResponse | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "NextResponse"
                },
                {
                    "type": "p",
                    "text": "NextResponse extends theWeb Response APIwith additional convenience methods."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "cookies"
                },
                {
                    "type": "p",
                    "text": "Read or mutate theSet-Cookieheader of the response."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "set(name, value)"
                },
                {
                    "type": "p",
                    "text": "Given a name, set a cookie with the given value on the response."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /homeletresponse=NextResponse.next()// Set a cookie to hide the bannerresponse.cookies.set('show-banner','false')// Response will have a `Set-Cookie:show-banner=false;path=/home` headerreturnresponse"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "get(name)"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, return the value of the cookie. If the cookie is not found,undefinedis returned. If multiple cookies are found, the first one is returned."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /homeletresponse=NextResponse.next()// { name: 'show-banner', value: 'false', Path: '/home' }response.cookies.get('show-banner')"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "getAll()"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, return the values of the cookie. If no name is given, return all cookies on the response."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /homeletresponse=NextResponse.next()// [//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },//   { name: 'experiments', value: 'winter-launch', Path: '/home' },// ]response.cookies.getAll('experiments')// Alternatively, get all cookies for the responseresponse.cookies.getAll()"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "delete(name)"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, delete the cookie from the response."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /homeletresponse=NextResponse.next()// Returns true for deleted, false is nothing is deletedresponse.cookies.delete('experiments')"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "json()"
                },
                {
                    "type": "p",
                    "text": "Produce a response with the given JSON body."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'exportasyncfunctionGET(request:Request) {returnNextResponse.json({ error:'Internal Server Error'},{ status:500})}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "redirect()"
                },
                {
                    "type": "p",
                    "text": "Produce a response that redirects to aURL."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'returnNextResponse.redirect(newURL('/new',request.url))"
                },
                {
                    "type": "p",
                    "text": "TheURLcan be created and modified before being used in theNextResponse.redirect()method. For example, you can use therequest.nextUrlproperty to get the current URL, and then modify it to redirect to a different URL."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'// Given an incoming request...constloginUrl=newURL('/login',request.url)// Add ?from=/incoming-url to the /login URLloginUrl.searchParams.set('from',request.nextUrl.pathname)// And redirect to the new URLreturnNextResponse.redirect(loginUrl)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "rewrite()"
                },
                {
                    "type": "p",
                    "text": "Produce a response that rewrites (proxies) the givenURLwhile preserving the original URL."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'// Incoming request: /about, browser shows /about// Rewritten request: /proxy, browser shows /aboutreturnNextResponse.rewrite(newURL('/proxy',request.url))"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "next()"
                },
                {
                    "type": "p",
                    "text": "Thenext()method is useful for Middleware, as it allows you to return early and continue routing."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'returnNextResponse.next()"
                },
                {
                    "type": "p",
                    "text": "You can also forwardheaderswhen producing the response:"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'// Given an incoming request...constnewHeaders=newHeaders(request.headers)// Add a new headernewHeaders.set('x-version','123')// And produce a response with the new headersreturnNextResponse.next({request:{// New request headersheaders:newHeaders,},})"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/not-found",
            "title": "Functions: notFound | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "notFound"
                },
                {
                    "type": "p",
                    "text": "ThenotFoundfunction allows you to render thenot-found filewithin a route segment as well as inject a<meta name=\"robots\" content=\"noindex\" />tag."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "notFound()"
                },
                {
                    "type": "p",
                    "text": "Invoking thenotFound()function throws aNEXT_NOT_FOUNDerror and terminates rendering of the route segment in which it was thrown. Specifying anot-foundfileallows you to gracefully handle such errors by rendering a Not Found UI within the segment."
                },
                {
                    "type": "code",
                    "code": "import{ notFound }from'next/navigation'asyncfunctionfetchUser(id) {constres=awaitfetch('https://...')if(!res.ok)returnundefinedreturnres.json()}exportdefaultasyncfunctionProfile({ params }) {constuser=awaitfetchUser(params.id)if(!user) {notFound()}// ...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:notFound()does not require you to usereturn notFound()due to using the TypeScriptnevertype."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/permanentRedirect",
            "title": "Functions: permanentRedirect | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "permanentRedirect"
                },
                {
                    "type": "p",
                    "text": "ThepermanentRedirectfunction allows you to redirect the user to another URL.permanentRedirectcan be used in Server Components, Client Components,Route Handlers, andServer Actions."
                },
                {
                    "type": "p",
                    "text": "When used in a streaming context, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 308 (Permanent) HTTP redirect response to the caller."
                },
                {
                    "type": "p",
                    "text": "If a resource doesn't exist, you can use thenotFoundfunctioninstead."
                },
                {
                    "type": "p",
                    "text": "Good to know: If you prefer to return a 307 (Temporary) HTTP redirect instead of 308 (Permanent), you can use theredirectfunctioninstead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "p",
                    "text": "ThepermanentRedirectfunction accepts two arguments:"
                },
                {
                    "type": "code",
                    "code": "permanentRedirect(path,type)"
                },
                {
                    "type": "p",
                    "text": "By default,permanentRedirectwill usepush(adding a new entry to the browser history stack) inServer Actionsandreplace(replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying thetypeparameter."
                },
                {
                    "type": "p",
                    "text": "Thetypeparameter has no effect when used in Server Components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "permanentRedirectdoes not return any value."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Invoking thepermanentRedirect()function throws aNEXT_REDIRECTerror and terminates rendering of the route segment in which it was thrown."
                },
                {
                    "type": "code",
                    "code": "import{ permanentRedirect }from'next/navigation'asyncfunctionfetchTeam(id) {constres=awaitfetch('https://...')if(!res.ok)returnundefinedreturnres.json()}exportdefaultasyncfunctionProfile({ params }) {constteam=awaitfetchTeam(params.id)if(!team) {permanentRedirect('/login')}// ...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:permanentRedirectdoes not require you to usereturn permanentRedirect()as it uses the TypeScriptnevertype."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "redirect"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/redirect",
            "title": "Functions: redirect | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "redirect"
                },
                {
                    "type": "p",
                    "text": "Theredirectfunction allows you to redirect the user to another URL.redirectcan be used inServer Components,Route Handlers, andServer Actions."
                },
                {
                    "type": "p",
                    "text": "When used in astreaming context, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 307 HTTP redirect response to the caller."
                },
                {
                    "type": "p",
                    "text": "If a resource doesn't exist, you can use thenotFoundfunctioninstead."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "In Server Actions and Route Handlers,redirectshould be called after thetry/catchblock.",
                        "If you prefer to return a 308 (Permanent) HTTP redirect instead of 307 (Temporary), you can use thepermanentRedirectfunctioninstead."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "p",
                    "text": "Theredirectfunction accepts two arguments:"
                },
                {
                    "type": "code",
                    "code": "redirect(path,type)"
                },
                {
                    "type": "p",
                    "text": "By default,redirectwill usepush(adding a new entry to the browser history stack) inServer Actionsandreplace(replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying thetypeparameter."
                },
                {
                    "type": "p",
                    "text": "Thetypeparameter has no effect when used in Server Components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "redirectdoes not return any value."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Example"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Component"
                },
                {
                    "type": "p",
                    "text": "Invoking theredirect()function throws aNEXT_REDIRECTerror and terminates rendering of the route segment in which it was thrown."
                },
                {
                    "type": "code",
                    "code": "import{ redirect }from'next/navigation'asyncfunctionfetchTeam(id) {constres=awaitfetch('https://...')if(!res.ok)returnundefinedreturnres.json()}exportdefaultasyncfunctionProfile({ params }) {constteam=awaitfetchTeam(params.id)if(!team) {redirect('/login')}// ...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:redirectdoes not require you to usereturn redirect()as it uses the TypeScriptnevertype."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client Component"
                },
                {
                    "type": "p",
                    "text": "redirectcan be used in a Client Component through a Server Action. If you need to use an event handler to redirect the user, you can use theuseRouterhook."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ navigate }from'./actions'exportfunctionClientRedirect() {return(<formaction={navigate}><inputtype=\"text\"name=\"id\"/><button>Submit</button></form>)}"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ redirect }from'next/navigation'exportasyncfunctionnavigate(data:FormData) {redirect(`/posts/${data.get('id')}`)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "FAQ"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Why doesredirectuse 307 and 308?"
                },
                {
                    "type": "p",
                    "text": "When usingredirect()you may notice that the status codes used are307for a temporary redirect, and308for a permanent redirect. While traditionally a302was used for a temporary redirect, and a301for a permanent redirect, many browsers changed the request method of the redirect, from aPOSTtoGETrequest when using a302, regardless of the origins request method."
                },
                {
                    "type": "p",
                    "text": "Taking the following example of a redirect from/usersto/people, if you make aPOSTrequest to/usersto create a new user, and are conforming to a302temporary redirect, the request method will be changed from aPOSTto aGETrequest. This doesn't make sense, as to create a new user, you should be making aPOSTrequest to/people, and not aGETrequest."
                },
                {
                    "type": "p",
                    "text": "The introduction of the307status code means that the request method is preserved asPOST."
                },
                {
                    "type": "list",
                    "items": [
                        "302- Temporary redirect, will change the request method fromPOSTtoGET",
                        "307- Temporary redirect, will preserve the request method asPOST"
                    ]
                },
                {
                    "type": "p",
                    "text": "Theredirect()method uses a307by default, instead of a302temporary redirect, meaning your requests willalwaysbe preserved asPOSTrequests."
                },
                {
                    "type": "p",
                    "text": "Learn moreabout HTTP Redirects."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "permanentRedirect"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/revalidatePath",
            "title": "Functions: revalidatePath | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "revalidatePath"
                },
                {
                    "type": "p",
                    "text": "revalidatePathallows you to purgecached dataon-demand for a specific path."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "revalidatePathis available in bothNode.js and Edge runtimes.",
                        "revalidatePathonly invalidates the cache when the included path is next visited. This means callingrevalidatePathwith a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited.",
                        "Currently,revalidatePathinvalidates all the routes in theclient-side Router Cache. This behavior is temporary and will be updated in the future to apply only to the specific path.",
                        "UsingrevalidatePathinvalidatesonly the specific pathin theserver-side Route Cache."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "code",
                    "code": "revalidatePath(path: string,type?:'page'|'layout'):void;"
                },
                {
                    "type": "list",
                    "items": [
                        "path: Either a string representing the filesystem path associated with the data you want to revalidate (for example,/product/[slug]/page), or the literal route segment (for example,/product/123). Must be less than 1024 characters. This value is case-sensitive.",
                        "type: (optional)'page'or'layout'string to change the type of path to revalidate. Ifpathcontains a dynamic segment (for example,/product/[slug]/page), this parameter is required."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "revalidatePathdoes not return any value."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating A Specific URL"
                },
                {
                    "type": "code",
                    "code": "import{ revalidatePath }from'next/cache'revalidatePath('/blog/post-1')"
                },
                {
                    "type": "p",
                    "text": "This will revalidate one specific URL on the next page visit."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating A Page Path"
                },
                {
                    "type": "code",
                    "code": "import{ revalidatePath }from'next/cache'revalidatePath('/blog/[slug]','page')// or with route groupsrevalidatePath('/(main)/post/[slug]','page')"
                },
                {
                    "type": "p",
                    "text": "This will revalidate any URL that matches the providedpagefile on the next page visit. This willnotinvalidate pages beneath the specific page. For example,/blog/[slug]won't invalidate/blog/[slug]/[author]."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating A Layout Path"
                },
                {
                    "type": "code",
                    "code": "import{ revalidatePath }from'next/cache'revalidatePath('/blog/[slug]','layout')// or with route groupsrevalidatePath('/(main)/post/[slug]','layout')"
                },
                {
                    "type": "p",
                    "text": "This will revalidate any URL that matches the providedlayoutfile on the next page visit. This will cause pages beneath with the same layout to revalidate on the next visit. For example, in the above case,/blog/[slug]/[another]would also revalidate on the next visit."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating All Data"
                },
                {
                    "type": "code",
                    "code": "import{ revalidatePath }from'next/cache'revalidatePath('/','layout')"
                },
                {
                    "type": "p",
                    "text": "This will purge the Client-side Router Cache, and revalidate the Data Cache on the next page visit."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Action"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ revalidatePath }from'next/cache'exportdefaultasyncfunctionsubmit() {awaitsubmitForm()revalidatePath('/')}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Handler"
                },
                {
                    "type": "code",
                    "code": "import{ revalidatePath }from'next/cache'import{ NextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {constpath=request.nextUrl.searchParams.get('path')if(path) {revalidatePath(path)returnResponse.json({ revalidated:true,now:Date.now() })}returnResponse.json({revalidated:false,now:Date.now(),message:'Missing path to revalidate',})}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/revalidateTag",
            "title": "Functions: revalidateTag | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "revalidateTag"
                },
                {
                    "type": "p",
                    "text": "revalidateTagallows you to purgecached dataon-demand for a specific cache tag."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "revalidateTagis available in bothNode.js and Edge runtimes.",
                        "revalidateTagonly invalidates the cache when the path is next visited. This means callingrevalidateTagwith a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "code",
                    "code": "revalidateTag(tag: string):void;"
                },
                {
                    "type": "list",
                    "items": [
                        "tag: A string representing the cache tag associated with the data you want to revalidate. Must be less than or equal to 256 characters. This value is case-sensitive."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can add tags tofetchas follows:"
                },
                {
                    "type": "code",
                    "code": "fetch(url,{ next:{ tags:[...] } });"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "revalidateTagdoes not return any value."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Action"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ revalidateTag }from'next/cache'exportdefaultasyncfunctionsubmit() {awaitaddPost()revalidateTag('posts')}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Handler"
                },
                {
                    "type": "code",
                    "code": "import{ NextRequest }from'next/server'import{ revalidateTag }from'next/cache'exportasyncfunctionGET(request:NextRequest) {consttag=request.nextUrl.searchParams.get('tag')revalidateTag(tag)returnResponse.json({ revalidated:true,now:Date.now() })}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_cache",
            "title": "Functions: unstable_cache | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "unstable_cache"
                },
                {
                    "type": "p",
                    "text": "unstable_cacheallows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests."
                },
                {
                    "type": "code",
                    "code": "import{ getUser }from'./data';import{ unstable_cache }from'next/cache';constgetCachedUser=unstable_cache(async(id)=>getUser(id),['my-app-user']);exportdefaultasyncfunctionComponent({ userID }) {constuser=awaitgetCachedUser(userID);...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:\nAccessing dynamic data sources such asheadersorcookiesinside a cache scope is not supported. If you need this data inside a cached function useheadersoutside of the cached function and pass the required dynamic data in as an argument."
                },
                {
                    "type": "p",
                    "text": "Warning: This API is unstable and may change in the future. We will provide migration documentation and codemods, if needed, as this API stabilizes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "code",
                    "code": "constdata=unstable_cache(fetchData,keyParts,options)()"
                },
                {
                    "type": "list",
                    "items": [
                        "fetchData: This is an asynchronous function that fetches the data you want to cache. It must be a function that returns aPromise.",
                        "keyParts: This is an array that identifies the cached key. It must contain globally unique values that together identify the key of the data being cached. The cache key also includes the arguments passed to the function.",
                        "options: This is an object that controls how the cache behaves. It can contain the following properties:tags: An array of tags that can be used to control cache invalidation.revalidate: The number of seconds after which the cache should be revalidated. Omit or passfalseto cache indefinitely or until matchingrevalidateTag()orrevalidatePath()methods are called.",
                        "tags: An array of tags that can be used to control cache invalidation.",
                        "revalidate: The number of seconds after which the cache should be revalidated. Omit or passfalseto cache indefinitely or until matchingrevalidateTag()orrevalidatePath()methods are called."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "tags: An array of tags that can be used to control cache invalidation.",
                        "revalidate: The number of seconds after which the cache should be revalidated. Omit or passfalseto cache indefinitely or until matchingrevalidateTag()orrevalidatePath()methods are called."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "unstable_cachereturns a function that when invoked, returns a Promise that resolves to the cached data. If the data is not in the cache, the provided function will be invoked, and its result will be cached and returned."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_noStore",
            "title": "Functions: unstable_noStore | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "unstable_noStore"
                },
                {
                    "type": "p",
                    "text": "unstable_noStorecan be used to declaratively opt out of static rendering and indicate a particular component should not be cached."
                },
                {
                    "type": "code",
                    "code": "import{ unstable_noStoreasnoStore }from'next/cache';exportdefaultasyncfunctionComponent() {noStore();constresult=awaitdb.query(...);...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "unstable_noStoreis equivalent tocache: 'no-store'on afetch",
                        "unstable_noStoreis preferred overexport const dynamic = 'force-dynamic'as it is more granular and can be used on a per-component basis"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Usingunstable_noStoreinsideunstable_cachewill not opt out of static generation. Instead, it will defer to the cache configuration to determine whether to cache the result or not."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage"
                },
                {
                    "type": "p",
                    "text": "If you prefer not to pass additional options tofetch, likecache: 'no-store'ornext: { revalidate: 0 }, you can usenoStore()as a replacement for all of these use cases."
                },
                {
                    "type": "code",
                    "code": "import{ unstable_noStoreasnoStore }from'next/cache';exportdefaultasyncfunctionComponent() {noStore();constresult=awaitdb.query(...);...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-params",
            "title": "Functions: useParams | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "useParams"
                },
                {
                    "type": "p",
                    "text": "useParamsis aClient Componenthook that lets you read a route'sdynamic paramsfilled in by the current URL."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useParams }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constparams=useParams<{ tag:string; item:string}>()// Route -> /shop/[tag]/[item]// URL -> /shop/shoes/nike-air-max-97// `params` -> { tag: 'shoes', item: 'nike-air-max-97' }console.log(params)return<></>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "code",
                    "code": "constparams=useParams()"
                },
                {
                    "type": "p",
                    "text": "useParamsdoes not take any parameters."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "useParamsreturns an object containing the current route's filled indynamic parameters."
                },
                {
                    "type": "list",
                    "items": [
                        "Each property in the object is an active dynamic segment.",
                        "The properties name is the segment's name, and the properties value is what the segment is filled in with.",
                        "The properties value will either be astringor array ofstring's depending on thetype of dynamic segment.",
                        "If the route contains no dynamic parameters,useParamsreturns an empty object.",
                        "If used in Pages Router,useParamswill returnnullon the initial render and updates with properties following the rules above once the router is ready."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-pathname",
            "title": "Functions: usePathname | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "usePathname"
                },
                {
                    "type": "p",
                    "text": "usePathnameis aClient Componenthook that lets you read the current URL'spathname."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ usePathname }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constpathname=usePathname()return<p>Current pathname: {pathname}</p>}"
                },
                {
                    "type": "p",
                    "text": "usePathnameintentionally requires using aClient Component. It's important to note Client Components are not a de-optimization. They are an integral part of theServer Componentsarchitecture."
                },
                {
                    "type": "p",
                    "text": "For example, a Client Component withusePathnamewill be rendered into HTML on the initial page load. When navigating to a new route, this component does not need to be re-fetched. Instead, the component is downloaded once (in the client JavaScript bundle), and re-renders based on the current state."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Reading the current URL from aServer Componentis not supported. This design is intentional to support layout state being preserved across page navigations.",
                        "Compatibility mode:usePathnamecan returnnullwhen afallback routeis being rendered or when apagesdirectory page has beenautomatically statically optimizedby Next.js and the router is not ready.Next.js will automatically update your types if it detects both anappandpagesdirectory in your project.",
                        "usePathnamecan returnnullwhen afallback routeis being rendered or when apagesdirectory page has beenautomatically statically optimizedby Next.js and the router is not ready.",
                        "Next.js will automatically update your types if it detects both anappandpagesdirectory in your project."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "usePathnamecan returnnullwhen afallback routeis being rendered or when apagesdirectory page has beenautomatically statically optimizedby Next.js and the router is not ready.",
                        "Next.js will automatically update your types if it detects both anappandpagesdirectory in your project."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "code",
                    "code": "constpathname=usePathname()"
                },
                {
                    "type": "p",
                    "text": "usePathnamedoes not take any parameters."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "usePathnamereturns a string of the current URL's pathname. For example:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Do something in response to a route change"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ usePathname,useSearchParams }from'next/navigation'functionExampleClientComponent() {constpathname=usePathname()constsearchParams=useSearchParams()useEffect(()=>{// Do something here...},[pathname,searchParams])}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals",
            "title": "Functions: useReportWebVitals | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "useReportWebVitals"
                },
                {
                    "type": "p",
                    "text": "TheuseReportWebVitalshook allows you to reportCore Web Vitals, and can be used in combination with your analytics service."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useReportWebVitals }from'next/web-vitals'exportfunctionWebVitals() {useReportWebVitals((metric)=>{console.log(metric)})}"
                },
                {
                    "type": "code",
                    "code": "import{ WebVitals }from'./_components/web-vitals'exportdefaultfunctionLayout({ children }) {return(<html><body><WebVitals/>{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Since theuseReportWebVitalshook requires the\"use client\"directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to theWebVitalscomponent."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useReportWebVitals"
                },
                {
                    "type": "p",
                    "text": "Themetricobject passed as the hook's argument consists of a number of properties:"
                },
                {
                    "type": "list",
                    "items": [
                        "id: Unique identifier for the metric in the context of the current page load",
                        "name: The name of the performance metric. Possible values include names ofWeb Vitalsmetrics (TTFB, FCP, LCP, FID, CLS) specific to a web application.",
                        "delta: The difference between the current value and the previous value of the metric. The value is typically in milliseconds and represents the change in the metric's value over time.",
                        "entries: An array ofPerformance Entriesassociated with the metric. These entries provide detailed information about the performance events related to the metric.",
                        "navigationType: Indicates thetype of navigationthat triggered the metric collection. Possible values include\"navigate\",\"reload\",\"back_forward\", and\"prerender\".",
                        "rating: A qualitative rating of the metric value, providing an assessment of the performance. Possible values are\"good\",\"needs-improvement\", and\"poor\". The rating is typically determined by comparing the metric value against predefined thresholds that indicate acceptable or suboptimal performance.",
                        "value: The actual value or duration of the performance entry, typically in milliseconds. The value provides a quantitative measure of the performance aspect being tracked by the metric. The source of the value depends on the specific metric being measured and can come from variousPerformance APIs."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Web Vitals"
                },
                {
                    "type": "p",
                    "text": "Web Vitalsare a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:"
                },
                {
                    "type": "list",
                    "items": [
                        "Time to First Byte(TTFB)",
                        "First Contentful Paint(FCP)",
                        "Largest Contentful Paint(LCP)",
                        "First Input Delay(FID)",
                        "Cumulative Layout Shift(CLS)",
                        "Interaction to Next Paint(INP)"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can handle all the results of these metrics using thenameproperty."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useReportWebVitals }from'next/web-vitals'exportfunctionWebVitals() {useReportWebVitals((metric)=>{switch(metric.name) {case'FCP': {// handle FCP results}case'LCP': {// handle LCP results}// ...}})}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage on Vercel"
                },
                {
                    "type": "p",
                    "text": "Vercel Speed Insightsare automatically configured on Vercel deployments, and don't require the use ofuseReportWebVitals. This hook is useful in local development, or if you're using a different analytics service."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Sending results to external systems"
                },
                {
                    "type": "p",
                    "text": "You can send results to any endpoint to measure and track\nreal user performance on your site. For example:"
                },
                {
                    "type": "code",
                    "code": "useReportWebVitals((metric)=>{constbody=JSON.stringify(metric)consturl='https://example.com/analytics'// Use `navigator.sendBeacon()` if available, falling back to `fetch()`.if(navigator.sendBeacon) {navigator.sendBeacon(url,body)}else{fetch(url,{ body,method:'POST',keepalive:true})}})"
                },
                {
                    "type": "p",
                    "text": "Good to know: If you useGoogle Analytics, using theidvalue can allow you to construct metric distributions manually (to calculate percentiles,\netc.)"
                },
                {
                    "type": "code",
                    "code": "useReportWebVitals(metric=>{// Use `window.gtag` if you initialized Google Analytics as this example:// https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.jswindow.gtag('event',metric.name,{value:Math.round(metric.name==='CLS'?metric.value*1000:metric.value),// values must be integersevent_label:metric.id,// id unique to current page loadnon_interaction:true,// avoids affecting bounce rate.});}"
                },
                {
                    "type": "p",
                    "text": "Read more aboutsending results to Google Analytics."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-router",
            "title": "Functions: useRouter | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "useRouter"
                },
                {
                    "type": "p",
                    "text": "TheuseRouterhook allows you to programmatically change routes insideClient Components."
                },
                {
                    "type": "p",
                    "text": "Recommendation:Use the<Link>componentfor navigation unless you have a specific requirement for usinguseRouter."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useRouter }from'next/navigation'exportdefaultfunctionPage() {constrouter=useRouter()return(<buttontype=\"button\"onClick={()=>router.push('/dashboard')}>Dashboard</button>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useRouter()"
                },
                {
                    "type": "list",
                    "items": [
                        "router.push(href: string, { scroll: boolean }): Perform a client-side navigation to the provided route. Adds a new entry into thebrowser’s historystack.",
                        "router.replace(href: string, { scroll: boolean }): Perform a client-side navigation to the provided route without adding a new entry into thebrowser’s history stack.",
                        "router.refresh(): Refresh the current route. Making a new request to the server, re-fetching data requests, and re-rendering Server Components. The client will merge the updated React Server Component payload without losing unaffected client-side React (e.g.useState) or browser state (e.g. scroll position).",
                        "router.prefetch(href: string):Prefetchthe provided route for faster client-side transitions.",
                        "router.back(): Navigate back to the previous route in the browser’s history stack.",
                        "router.forward(): Navigate forwards to the next page in the browser’s history stack."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "The<Link>component automatically prefetch routes as they become visible in the viewport.",
                        "refresh()could re-produce the same result if fetch requests are cached. Other dynamic functions likecookiesandheaderscould also change the response."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Migrating fromnext/router"
                },
                {
                    "type": "list",
                    "items": [
                        "TheuseRouterhook should be imported fromnext/navigationand notnext/routerwhen using the App Router",
                        "Thepathnamestring has been removed and is replaced byusePathname()",
                        "Thequeryobject has been removed and is replaced byuseSearchParams()",
                        "router.eventshas been replaced.See below."
                    ]
                },
                {
                    "type": "p",
                    "text": "View the full migration guide."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Router events"
                },
                {
                    "type": "p",
                    "text": "You can listen for page changes by composing other Client Component hooks likeusePathnameanduseSearchParams."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useEffect }from'react'import{ usePathname,useSearchParams }from'next/navigation'exportfunctionNavigationEvents() {constpathname=usePathname()constsearchParams=useSearchParams()useEffect(()=>{consturl=`${pathname}?${searchParams}`console.log(url)// You can now use the current URL// ...},[pathname,searchParams])returnnull}"
                },
                {
                    "type": "p",
                    "text": "Which can be imported into a layout."
                },
                {
                    "type": "code",
                    "code": "import{ Suspense }from'react'import{ NavigationEvents }from'./components/navigation-events'exportdefaultfunctionLayout({ children }) {return(<htmllang=\"en\"><body>{children}<Suspensefallback={null}><NavigationEvents/></Suspense></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:<NavigationEvents>is wrapped in aSuspenseboundarybecauseuseSearchParams()causes client-side rendering up to the closestSuspenseboundary duringstatic rendering.Learn more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Disabling scroll restoration"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js will scroll to the top of the page when navigating to a new route. You can disable this behavior by passingscroll: falsetorouter.push()orrouter.replace()."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useRouter }from'next/navigation'exportdefaultfunctionPage() {constrouter=useRouter()return(<buttontype=\"button\"onClick={()=>router.push('/dashboard',{ scroll:false})}>Dashboard</button>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params",
            "title": "Functions: useSearchParams | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "useSearchParams"
                },
                {
                    "type": "p",
                    "text": "useSearchParamsis aClient Componenthook that lets you read the current URL'squery string."
                },
                {
                    "type": "p",
                    "text": "useSearchParamsreturns aread-onlyversion of theURLSearchParamsinterface."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useSearchParams }from'next/navigation'exportdefaultfunctionSearchBar() {constsearchParams=useSearchParams()constsearch=searchParams.get('search')// URL -> `/dashboard?search=my-project`// `search` -> 'my-project'return<>Search: {search}</>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "code",
                    "code": "constsearchParams=useSearchParams()"
                },
                {
                    "type": "p",
                    "text": "useSearchParamsdoes not take any parameters."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "useSearchParamsreturns aread-onlyversion of theURLSearchParamsinterface, which includes utility methods for reading the URL's query string:"
                },
                {
                    "type": "list",
                    "items": [
                        "URLSearchParams.get(): Returns the first value associated with the search parameter. For example:URLsearchParams.get(\"a\")/dashboard?a=1'1'/dashboard?a=''/dashboard?b=3null/dashboard?a=1&a=2'1'- usegetAll()to get all values",
                        "URLSearchParams.has(): Returns a boolean value indicating if the given parameter exists. For example:URLsearchParams.has(\"a\")/dashboard?a=1true/dashboard?b=3false",
                        "Learn more about otherread-onlymethods ofURLSearchParams, including thegetAll(),keys(),values(),entries(),forEach(), andtoString()."
                    ]
                },
                {
                    "type": "p",
                    "text": "URLSearchParams.get(): Returns the first value associated with the search parameter. For example:"
                },
                {
                    "type": "p",
                    "text": "URLSearchParams.has(): Returns a boolean value indicating if the given parameter exists. For example:"
                },
                {
                    "type": "p",
                    "text": "Learn more about otherread-onlymethods ofURLSearchParams, including thegetAll(),keys(),values(),entries(),forEach(), andtoString()."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "useSearchParamsis aClient Componenthook and isnot supportedinServer Componentsto prevent stale values duringpartial rendering.",
                        "If an application includes the/pagesdirectory,useSearchParamswill returnReadonlyURLSearchParams | null. Thenullvalue is for compatibility during migration since search params cannot be known during pre-rendering of a page that doesn't usegetServerSideProps"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static Rendering"
                },
                {
                    "type": "p",
                    "text": "If a route isstatically rendered, callinguseSearchParamswill cause the Client Component tree up to the closestSuspenseboundaryto be client-side rendered."
                },
                {
                    "type": "p",
                    "text": "This allows a part of the route to be statically rendered while the dynamic part that usesuseSearchParamsis client-side rendered."
                },
                {
                    "type": "p",
                    "text": "We recommend wrapping the Client Component that usesuseSearchParamsin a<Suspense/>boundary. This will allow any Client Components above it to be statically rendered and sent as part of initial HTML.Example."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useSearchParams }from'next/navigation'exportdefaultfunctionSearchBar() {constsearchParams=useSearchParams()constsearch=searchParams.get('search')// This will not be logged on the server when using static renderingconsole.log(search)return<>Search: {search}</>}"
                },
                {
                    "type": "code",
                    "code": "import{ Suspense }from'react'importSearchBarfrom'./search-bar'// This component passed as a fallback to the Suspense boundary// will be rendered in place of the search bar in the initial HTML.// When the value is available during React hydration the fallback// will be replaced with the `<SearchBar>` component.functionSearchBarFallback() {return<>placeholder</>}exportdefaultfunctionPage() {return(<><nav><Suspensefallback={<SearchBarFallback/>}><SearchBar/></Suspense></nav><h1>Dashboard</h1></>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Behavior"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Rendering"
                },
                {
                    "type": "p",
                    "text": "If a route isdynamically rendered,useSearchParamswill be available on the server during the initial server render of the Client Component."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useSearchParams }from'next/navigation'exportdefaultfunctionSearchBar() {constsearchParams=useSearchParams()constsearch=searchParams.get('search')// This will be logged on the server during the initial render// and on the client on subsequent navigations.console.log(search)return<>Search: {search}</>}"
                },
                {
                    "type": "code",
                    "code": "importSearchBarfrom'./search-bar'exportconstdynamic='force-dynamic'exportdefaultfunctionPage() {return(<><nav><SearchBar/></nav><h1>Dashboard</h1></>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Setting thedynamicroute segment config optiontoforce-dynamiccan be used to force dynamic rendering."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Pages"
                },
                {
                    "type": "p",
                    "text": "To access search params inPages(Server Components), use thesearchParamsprop."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Layouts"
                },
                {
                    "type": "p",
                    "text": "Unlike Pages,Layouts(Server Components)do notreceive thesearchParamsprop. This is because a shared layout isnot re-rendered during navigationwhich could lead to stalesearchParamsbetween navigations. Viewdetailed explanation."
                },
                {
                    "type": "p",
                    "text": "Instead, use the PagesearchParamsprop or theuseSearchParamshook in a Client Component, which is re-rendered on the client with the latestsearchParams."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "UpdatingsearchParams"
                },
                {
                    "type": "p",
                    "text": "You can useuseRouterorLinkto set newsearchParams. After a navigation is performed, the currentpage.jswill receive an updatedsearchParamsprop."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionExampleClientComponent() {constrouter=useRouter()constpathname=usePathname()constsearchParams=useSearchParams()// Get a new searchParams string by merging the current// searchParams with a provided key/value pairconstcreateQueryString=useCallback((name:string,value:string)=>{constparams=newURLSearchParams(searchParams.toString())params.set(name,value)returnparams.toString()},[searchParams])return(<><p>Sort By</p>{/* using useRouter */}<buttononClick={()=>{// <pathname>?sort=ascrouter.push(pathname+'?'+createQueryString('sort','asc'))}}>ASC</button>{/* using <Link> */}<Linkhref={// <pathname>?sort=descpathname+'?'+createQueryString('sort','desc')}>DESC</Link></>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segment",
            "title": "Functions: useSelectedLayoutSegment | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "useSelectedLayoutSegment"
                },
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegmentis aClient Componenthook that lets you read the active route segmentone level belowthe Layout it is called from."
                },
                {
                    "type": "p",
                    "text": "It is useful for navigation UI, such as tabs inside a parent layout that change style depending on the active child segment."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useSelectedLayoutSegment }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constsegment=useSelectedLayoutSegment()return<p>Active segment: {segment}</p>}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "SinceuseSelectedLayoutSegmentis aClient Componenthook, and Layouts areServer Componentsby default,useSelectedLayoutSegmentis usually called via a Client Component that is imported into a Layout.",
                        "useSelectedLayoutSegmentonly returns the segment one level down. To return all active segments, seeuseSelectedLayoutSegments"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "code",
                    "code": "constsegment=useSelectedLayoutSegment(parallelRoutesKey?:string)"
                },
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegmentoptionallyaccepts aparallelRoutesKey, which allows you to read the active route segment within that slot."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegmentreturns a string of the active segment ornullif one doesn't exist."
                },
                {
                    "type": "p",
                    "text": "For example, given the Layouts and URLs below, the returned segment would be:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Creating an active link component"
                },
                {
                    "type": "p",
                    "text": "You can useuseSelectedLayoutSegmentto create an active link component that changes style depending on the active segment. For example, a featured posts list in the sidebar of a blog:"
                },
                {
                    "type": "code",
                    "code": "'use client'importLinkfrom'next/link'import{ useSelectedLayoutSegment }from'next/navigation'// This *client* component will be imported into abloglayoutexportdefaultfunctionBlogNavLink({slug,children,}:{slug:stringchildren:React.ReactNode}) {// Navigating to `/blog/hello-world` will return 'hello-world'// for the selected layout segmentconstsegment=useSelectedLayoutSegment()constisActive=slug===segmentreturn(<Linkhref={`/blog/${slug}`}// Change style depending on whether the link is activestyle={{ fontWeight:isActive?'bold':'normal'}}>{children}</Link>)}"
                },
                {
                    "type": "code",
                    "code": "// Import the Client Component into a parent Layout (Server Component)import{ BlogNavLink }from'./blog-nav-link'importgetFeaturedPostsfrom'./get-featured-posts'exportdefaultasyncfunctionLayout({children,}:{children:React.ReactNode}) {constfeaturedPosts=awaitgetFeaturedPosts()return(<div>{featuredPosts.map((post)=>(<divkey={post.id}><BlogNavLinkslug={post.slug}>{post.title}</BlogNavLink></div>))}<div>{children}</div></div>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segments",
            "title": "Functions: useSelectedLayoutSegments | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "useSelectedLayoutSegments"
                },
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegmentsis aClient Componenthook that lets you read the active route segmentsbelowthe Layout it is called from."
                },
                {
                    "type": "p",
                    "text": "It is useful for creating UI in parent Layouts that need knowledge of active child segments such as breadcrumbs."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useSelectedLayoutSegments }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constsegments=useSelectedLayoutSegments()return(<ul>{segments.map((segment,index)=>(<likey={index}>{segment}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "SinceuseSelectedLayoutSegmentsis aClient Componenthook, and Layouts areServer Componentsby default,useSelectedLayoutSegmentsis usually called via a Client Component that is imported into a Layout.",
                        "The returned segments includeRoute Groups, which you might not want to be included in your UI. You can use thefilter()array method to remove items that start with a bracket."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parameters"
                },
                {
                    "type": "code",
                    "code": "constsegments=useSelectedLayoutSegments(parallelRoutesKey?:string)"
                },
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegmentsoptionallyaccepts aparallelRoutesKey, which allows you to read the active route segment within that slot."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Returns"
                },
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegmentsreturns an array of strings containing the active segments one level down from the layout the hook was called from. Or an empty array if none exist."
                },
                {
                    "type": "p",
                    "text": "For example, given the Layouts and URLs below, the returned segments would be:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/userAgent",
            "title": "Functions: userAgent | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "userAgent"
                },
                {
                    "type": "p",
                    "text": "TheuserAgenthelper extends theWeb Request APIwith additional properties and methods to interact with the user agent object from the request."
                },
                {
                    "type": "code",
                    "code": "import{ NextRequest,NextResponse,userAgent }from'next/server'exportfunctionmiddleware(request:NextRequest) {consturl=request.nextUrlconst{device}=userAgent(request)constviewport=device.type==='mobile'?'mobile':'desktop'url.searchParams.set('viewport',viewport)returnNextResponse.rewrite(url)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "isBot"
                },
                {
                    "type": "p",
                    "text": "A boolean indicating whether the request comes from a known bot."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "browser"
                },
                {
                    "type": "p",
                    "text": "An object containing information about the browser used in the request."
                },
                {
                    "type": "list",
                    "items": [
                        "name: A string representing the browser's name, orundefinedif not identifiable.",
                        "version: A string representing the browser's version, orundefined."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "device"
                },
                {
                    "type": "p",
                    "text": "An object containing information about the device used in the request."
                },
                {
                    "type": "list",
                    "items": [
                        "model: A string representing the model of the device, orundefined.",
                        "type: A string representing the type of the device, such asconsole,mobile,tablet,smarttv,wearable,embedded, orundefined.",
                        "vendor: A string representing the vendor of the device, orundefined."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "engine"
                },
                {
                    "type": "p",
                    "text": "An object containing information about the browser's engine."
                },
                {
                    "type": "list",
                    "items": [
                        "name: A string representing the engine's name. Possible values include:Amaya,Blink,EdgeHTML,Flow,Gecko,Goanna,iCab,KHTML,Links,Lynx,NetFront,NetSurf,Presto,Tasman,Trident,w3m,WebKitorundefined.",
                        "version: A string representing the engine's version, orundefined."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "os"
                },
                {
                    "type": "p",
                    "text": "An object containing information about the operating system."
                },
                {
                    "type": "list",
                    "items": [
                        "name: A string representing the name of the OS, orundefined.",
                        "version: A string representing the version of the OS, orundefined."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "cpu"
                },
                {
                    "type": "p",
                    "text": "An object containing information about the CPU architecture."
                },
                {
                    "type": "list",
                    "items": [
                        "architecture: A string representing the architecture of the CPU. Possible values include:68k,amd64,arm,arm64,armhf,avr,ia32,ia64,irix,irix64,mips,mips64,pa-risc,ppc,sparc,sparc64orundefined"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js",
            "title": "API Reference: next.config.js Options | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "next.config.js Options"
                },
                {
                    "type": "p",
                    "text": "Next.js can be configured through anext.config.jsfile in the root of your project directory (for example, bypackage.json) with a default export."
                },
                {
                    "type": "code",
                    "code": "// @ts-check/**@type{import('next').NextConfig}*/constnextConfig={/* config options here */}module.exports=nextConfig"
                },
                {
                    "type": "p",
                    "text": "next.config.jsis a regular Node.js module, not a JSON file. It gets used by the Next.js server and build phases, and it's not included in the browser build."
                },
                {
                    "type": "p",
                    "text": "If you needECMAScript modules, you can usenext.config.mjs:"
                },
                {
                    "type": "code",
                    "code": "// @ts-check/***@type{import('next').NextConfig}*/constnextConfig={/* config options here */}exportdefaultnextConfig"
                },
                {
                    "type": "p",
                    "text": "You can also use a function:"
                },
                {
                    "type": "code",
                    "code": "// @ts-checkexportdefault(phase,{ defaultConfig })=>{/***@type{import('next').NextConfig}*/constnextConfig={/* config options here */}returnnextConfig}"
                },
                {
                    "type": "p",
                    "text": "Since Next.js 12.1.0, you can use an async function:"
                },
                {
                    "type": "code",
                    "code": "// @ts-checkmodule.exports=async(phase,{ defaultConfig })=>{/***@type{import('next').NextConfig}*/constnextConfig={/* config options here */}returnnextConfig}"
                },
                {
                    "type": "p",
                    "text": "phaseis the current context in which the configuration is loaded. You can see theavailable phases. Phases can be imported fromnext/constants:"
                },
                {
                    "type": "code",
                    "code": "// @ts-checkconst{PHASE_DEVELOPMENT_SERVER}=require('next/constants')module.exports=(phase,{ defaultConfig })=>{if(phase===PHASE_DEVELOPMENT_SERVER) {return{/* development only config options here */}}return{/* config options for all phases except development here */}}"
                },
                {
                    "type": "p",
                    "text": "The commented lines are the place where you can put the configs allowed bynext.config.js, which aredefined in this file."
                },
                {
                    "type": "p",
                    "text": "However, none of the configs are required, and it's not necessary to understand what each config does. Instead, search for the features you need to enable or modify in this section and they will show you what to do."
                },
                {
                    "type": "p",
                    "text": "Avoid using new JavaScript features not available in your target Node.js version.next.config.jswill not be parsed by Webpack, Babel or TypeScript."
                },
                {
                    "type": "p",
                    "text": "This page documents all the available configuration options:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "appDir"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "assetPrefix"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "basePath"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "compress"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "crossOrigin"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "devIndicators"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "distDir"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "env"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "eslint"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "exportPathMap"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateBuildId"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateEtags"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "headers"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "httpAgentOptions"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "images"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "cacheHandler"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "instrumentationHook"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "logging"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "mdxRs"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "onDemandEntries"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "optimizePackageImports"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "output"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "pageExtensions"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Partial Prerendering (experimental)"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "poweredByHeader"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "productionBrowserSourceMaps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "reactStrictMode"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "redirects"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "rewrites"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "serverActions"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "serverComponentsExternalPackages"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "serverExternalPackages"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "StaleTimes (experimental)"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "trailingSlash"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "transpilePackages"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "turbo"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "typedRoutes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "typescript"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "urlImports"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "webpack"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "webVitalsAttribution"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/appDir",
            "title": "next.config.js Options: appDir | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "appDir"
                },
                {
                    "type": "p",
                    "text": "Good to know: This option isno longerneeded as of Next.js 13.4. The App Router is now stable."
                },
                {
                    "type": "p",
                    "text": "The App Router (appdirectory) enables support forlayouts,Server Components,streaming, andcolocated data fetching."
                },
                {
                    "type": "p",
                    "text": "Using theappdirectory will automatically enableReact Strict Mode. Learn how toincrementally adoptapp."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/assetPrefix",
            "title": "next.config.js Options: assetPrefix | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "assetPrefix"
                },
                {
                    "type": "p",
                    "text": "Attention:Deploying to Vercelautomatically configures a global CDN for your Next.js project.\nYou do not need to manually setup an Asset Prefix."
                },
                {
                    "type": "p",
                    "text": "Good to know: Next.js 9.5+ added support for a customizableBase Path, which is better\nsuited for hosting your application on a sub-path like/docs.\nWe do not suggest you use a custom Asset Prefix for this use case."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Set up a CDN"
                },
                {
                    "type": "p",
                    "text": "To set up aCDN, you can set up an asset prefix and configure your CDN's origin to resolve to the domain that Next.js is hosted on."
                },
                {
                    "type": "p",
                    "text": "Opennext.config.mjsand add theassetPrefixconfig based on thephase:"
                },
                {
                    "type": "code",
                    "code": "// @ts-checkimport{ PHASE_DEVELOPMENT_SERVER }from'next/constants'exportdefault(phase)=>{constisDev=phase===PHASE_DEVELOPMENT_SERVER/***@type{import('next').NextConfig}*/constnextConfig={assetPrefix:isDev?undefined:'https://cdn.mydomain.com',}returnnextConfig}"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically use your asset prefix for the JavaScript and CSS files it loads from the/_next/path (.next/static/folder). For example, with the above configuration, the following request for a JS chunk:"
                },
                {
                    "type": "code",
                    "code": "/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js"
                },
                {
                    "type": "p",
                    "text": "Would instead become:"
                },
                {
                    "type": "code",
                    "code": "https://cdn.mydomain.com/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js"
                },
                {
                    "type": "p",
                    "text": "The exact configuration for uploading your files to a given CDN will depend on your CDN of choice. The only folder you need to host on your CDN is the contents of.next/static/, which should be uploaded as_next/static/as the above URL request indicates.Do not upload the rest of your.next/folder, as you should not expose your server code and other configuration to the public."
                },
                {
                    "type": "p",
                    "text": "WhileassetPrefixcovers requests to_next/static, it does not influence the following paths:"
                },
                {
                    "type": "list",
                    "items": [
                        "Files in thepublicfolder; if you want to serve those assets over a CDN, you'll have to introduce the prefix yourself"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/basePath",
            "title": "next.config.js Options: basePath | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "basePath"
                },
                {
                    "type": "p",
                    "text": "To deploy a Next.js application under a sub-path of a domain you can use thebasePathconfig option."
                },
                {
                    "type": "p",
                    "text": "basePathallows you to set a path prefix for the application. For example, to use/docsinstead of''(an empty string, the default), opennext.config.jsand add thebasePathconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={basePath:'/docs',}"
                },
                {
                    "type": "p",
                    "text": "Good to know: This value must be set at build time and cannot be changed without re-building as the value is inlined in the client-side bundles."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Links"
                },
                {
                    "type": "p",
                    "text": "When linking to other pages usingnext/linkandnext/routerthebasePathwill be automatically applied."
                },
                {
                    "type": "p",
                    "text": "For example, using/aboutwill automatically become/docs/aboutwhenbasePathis set to/docs."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionHomePage() {return(<><Linkhref=\"/about\">About Page</Link></>)}"
                },
                {
                    "type": "p",
                    "text": "Output html:"
                },
                {
                    "type": "code",
                    "code": "<ahref=\"/docs/about\">About Page</a>"
                },
                {
                    "type": "p",
                    "text": "This makes sure that you don't have to change all links in your application when changing thebasePathvalue."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Images"
                },
                {
                    "type": "p",
                    "text": "When using thenext/imagecomponent, you will need to add thebasePathin front ofsrc."
                },
                {
                    "type": "p",
                    "text": "For example, using/docs/me.pngwill properly serve your image whenbasePathis set to/docs."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'functionHome() {return(<><h1>My Homepage</h1><Imagesrc=\"/docs/me.png\"alt=\"Picture of the author\"width={500}height={500}/><p>Welcome to my homepage!</p></>)}exportdefaultHome"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/compress",
            "title": "next.config.js Options: compress | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "compress"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js usesgzipto compress rendered content and static files when usingnext startor a custom server. This is an optimization for applications that do not have compression configured. If compression isalreadyconfigured in your application via a custom server, Next.js will not add compression."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "When hosting your application onVercel, compression usesbrotlifirst, thengzip.",
                        "You can check if compression is enabled and which algorithm is used by looking at theAccept-Encoding(browser accepted options) andContent-Encoding(currently used) headers in the response."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Disabling compression"
                },
                {
                    "type": "p",
                    "text": "To disablecompression, set thecompressconfig option tofalse:"
                },
                {
                    "type": "code",
                    "code": "module.exports={compress:false,}"
                },
                {
                    "type": "p",
                    "text": "We do not recommend disabling compression unless you have compression configured on your server, as compression reduces bandwidth usage and improves the performance of your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Changing the compression algorithm"
                },
                {
                    "type": "p",
                    "text": "To change your compression algorithm, you will need to configure your custom server and set thecompressoption tofalsein yournext.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "For example, you're usingnginxand want to switch tobrotli, set thecompressoption tofalseto allow nginx to handle compression."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "For Next.js applications on Vercel, compression is handled by the Vercel's Edge Network and not Next.js. See theVercel documentationfor more information."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/crossOrigin",
            "title": "next.config.js Options: crossOrigin | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "crossOrigin"
                },
                {
                    "type": "p",
                    "text": "Use thecrossOriginoption to add acrossOriginattributein all<script>tags generated by thenext/scriptcomponent, and define how cross-origin requests should be handled."
                },
                {
                    "type": "code",
                    "code": "module.exports={crossOrigin:'anonymous',}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Options"
                },
                {
                    "type": "list",
                    "items": [
                        "'anonymous': AddscrossOrigin=\"anonymous\"attribute.",
                        "'use-credentials': AddscrossOrigin=\"use-credentials\"."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/devIndicators",
            "title": "next.config.js Options: devIndicators | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "devIndicators"
                },
                {
                    "type": "p",
                    "text": "When you edit your code, and Next.js is compiling the application, a compilation indicator appears in the bottom right corner of the page."
                },
                {
                    "type": "p",
                    "text": "Good to know: This indicator is only present in development mode and will not appear when building and running the app in production mode."
                },
                {
                    "type": "p",
                    "text": "In some cases this indicator can be misplaced on your page, for example, when conflicting with a chat launcher. To change its position, opennext.config.jsand set thebuildActivityPositionin thedevIndicatorsobject tobottom-right(default),bottom-left,top-rightortop-left:"
                },
                {
                    "type": "code",
                    "code": "module.exports={devIndicators:{buildActivityPosition:'bottom-right',},}"
                },
                {
                    "type": "p",
                    "text": "In some cases this indicator might not be useful for you. To remove it, opennext.config.jsand disable thebuildActivityconfig indevIndicatorsobject:"
                },
                {
                    "type": "code",
                    "code": "module.exports={devIndicators:{buildActivity:false,},}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/distDir",
            "title": "next.config.js Options: distDir | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "distDir"
                },
                {
                    "type": "p",
                    "text": "You can specify a name to use for a custom build directory to use instead of.next."
                },
                {
                    "type": "p",
                    "text": "Opennext.config.jsand add thedistDirconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={distDir:'build',}"
                },
                {
                    "type": "p",
                    "text": "Now if you runnext buildNext.js will usebuildinstead of the default.nextfolder."
                },
                {
                    "type": "p",
                    "text": "distDirshould notleave your project directory. For example,../buildis aninvaliddirectory."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/env",
            "title": "next.config.js Options: env | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "env"
                },
                {
                    "type": "p",
                    "text": "Since the release ofNext.js 9.4we now have a more intuitive and ergonomic experience foradding environment variables. Give it a try!"
                },
                {
                    "type": "p",
                    "text": "Good to know: environment variables specified in this way willalwaysbe included in the JavaScript bundle, prefixing the environment variable name withNEXT_PUBLIC_only has an effect when specifying themthrough the environment or .env files."
                },
                {
                    "type": "p",
                    "text": "To add environment variables to the JavaScript bundle, opennext.config.jsand add theenvconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={env:{customKey:'my-value',},}"
                },
                {
                    "type": "p",
                    "text": "Now you can accessprocess.env.customKeyin your code. For example:"
                },
                {
                    "type": "code",
                    "code": "functionPage() {return<h1>The value of customKey is: {process.env.customKey}</h1>}exportdefaultPage"
                },
                {
                    "type": "p",
                    "text": "Next.js will replaceprocess.env.customKeywith'my-value'at build time. Trying to destructureprocess.envvariables won't work due to the nature of webpackDefinePlugin."
                },
                {
                    "type": "p",
                    "text": "For example, the following line:"
                },
                {
                    "type": "code",
                    "code": "return<h1>The value of customKey is: {process.env.customKey}</h1>"
                },
                {
                    "type": "p",
                    "text": "Will end up being:"
                },
                {
                    "type": "code",
                    "code": "return<h1>The value of customKey is: {'my-value'}</h1>"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/eslint",
            "title": "next.config.js Options: eslint | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "eslint"
                },
                {
                    "type": "p",
                    "text": "When ESLint is detected in your project, Next.js fails yourproduction build(next build) when errors are present."
                },
                {
                    "type": "p",
                    "text": "If you'd like Next.js to produce production code even when your application has ESLint errors, you can disable the built-in linting step completely. This is not recommended unless you already have ESLint configured to run in a separate part of your workflow (for example, in CI or a pre-commit hook)."
                },
                {
                    "type": "p",
                    "text": "Opennext.config.jsand enable theignoreDuringBuildsoption in theeslintconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={eslint:{// Warning: This allows production builds to successfully complete even if// your project has ESLint errors.ignoreDuringBuilds:true,},}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/exportPathMap",
            "title": "next.config.js Options: exportPathMap | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "exportPathMap (Deprecated)"
                },
                {
                    "type": "p",
                    "text": "This feature is exclusive tonext exportand currentlydeprecatedin favor ofgetStaticPathswithpagesorgenerateStaticParamswithapp."
                },
                {
                    "type": "list",
                    "items": [
                        "Static Export"
                    ]
                },
                {
                    "type": "p",
                    "text": "exportPathMapallows you to specify a mapping of request paths to page destinations, to be used during export. Paths defined inexportPathMapwill also be available when usingnext dev."
                },
                {
                    "type": "p",
                    "text": "Let's start with an example, to create a customexportPathMapfor an app with the following pages:"
                },
                {
                    "type": "list",
                    "items": [
                        "pages/index.js",
                        "pages/about.js",
                        "pages/post.js"
                    ]
                },
                {
                    "type": "p",
                    "text": "Opennext.config.jsand add the followingexportPathMapconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={exportPathMap:asyncfunction(defaultPathMap,{ dev,dir,outDir,distDir,buildId }) {return{'/':{ page:'/'},'/about':{ page:'/about'},'/p/hello-nextjs':{ page:'/post',query:{ title:'hello-nextjs'} },'/p/learn-nextjs':{ page:'/post',query:{ title:'learn-nextjs'} },'/p/deploy-nextjs':{ page:'/post',query:{ title:'deploy-nextjs'} },}},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: thequeryfield inexportPathMapcannot be used withautomatically statically optimized pagesorgetStaticPropspagesas they are rendered to HTML files at build-time and additional query information cannot be provided duringnext export."
                },
                {
                    "type": "p",
                    "text": "The pages will then be exported as HTML files, for example,/aboutwill become/about.html."
                },
                {
                    "type": "p",
                    "text": "exportPathMapis anasyncfunction that receives 2 arguments: the first one isdefaultPathMap, which is the default map used by Next.js. The second argument is an object with:"
                },
                {
                    "type": "list",
                    "items": [
                        "dev-truewhenexportPathMapis being called in development.falsewhen runningnext export. In developmentexportPathMapis used to define routes.",
                        "dir- Absolute path to the project directory",
                        "outDir- Absolute path to theout/directory (configurable with-o). Whendevistruethe value ofoutDirwill benull.",
                        "distDir- Absolute path to the.next/directory (configurable with thedistDirconfig)",
                        "buildId- The generated build id"
                    ]
                },
                {
                    "type": "p",
                    "text": "The returned object is a map of pages where thekeyis thepathnameand thevalueis an object that accepts the following fields:"
                },
                {
                    "type": "list",
                    "items": [
                        "page:String- the page inside thepagesdirectory to render",
                        "query:Object- thequeryobject passed togetInitialPropswhen prerendering. Defaults to{}"
                    ]
                },
                {
                    "type": "p",
                    "text": "The exportedpathnamecan also be a filename (for example,/readme.md), but you may need to set theContent-Typeheader totext/htmlwhen serving its content if it is different than.html."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Adding a trailing slash"
                },
                {
                    "type": "p",
                    "text": "It is possible to configure Next.js to export pages asindex.htmlfiles and require trailing slashes,/aboutbecomes/about/index.htmland is routable via/about/. This was the default behavior prior to Next.js 9."
                },
                {
                    "type": "p",
                    "text": "To switch back and add a trailing slash, opennext.config.jsand enable thetrailingSlashconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={trailingSlash:true,}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Customizing the output directory"
                },
                {
                    "type": "p",
                    "text": "next exportwill useoutas the default output directory, you can customize this using the-oargument, like so:"
                },
                {
                    "type": "code",
                    "code": "nextexport-ooutdir"
                },
                {
                    "type": "p",
                    "text": "Warning: UsingexportPathMapis deprecated and is overridden bygetStaticPathsinsidepages. We don't recommend using them together."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/generateBuildId",
            "title": "next.config.js Options: generateBuildId | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "generateBuildId"
                },
                {
                    "type": "p",
                    "text": "Next.js generates an ID duringnext buildto identify which version of your application is being served. The same build should be used and boot up multiple containers."
                },
                {
                    "type": "p",
                    "text": "If you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use thegenerateBuildIdcommand innext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={generateBuildId:async()=>{// This could be anything, using the latest git hashreturnprocess.env.GIT_HASH},}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/generateEtags",
            "title": "next.config.js Options: generateEtags | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "generateEtags"
                },
                {
                    "type": "p",
                    "text": "Next.js will generateetagsfor every page by default. You may want to disable etag generation for HTML pages depending on your cache strategy."
                },
                {
                    "type": "p",
                    "text": "Opennext.config.jsand disable thegenerateEtagsoption:"
                },
                {
                    "type": "code",
                    "code": "module.exports={generateEtags:false,}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/headers",
            "title": "next.config.js Options: headers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "headers"
                },
                {
                    "type": "p",
                    "text": "Headers allow you to set custom HTTP headers on the response to an incoming request on a given path."
                },
                {
                    "type": "p",
                    "text": "To set custom HTTP headers you can use theheaderskey innext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncheaders() {return[{source:'/about',headers:[{key:'x-custom-header',value:'my custom header value',},{key:'x-another-custom-header',value:'my other custom header value',},],},]},}"
                },
                {
                    "type": "p",
                    "text": "headersis an async function that expects an array to be returned holding objects withsourceandheadersproperties:"
                },
                {
                    "type": "list",
                    "items": [
                        "sourceis the incoming request path pattern.",
                        "headersis an array of response header objects, withkeyandvalueproperties.",
                        "basePath:falseorundefined- if false the basePath won't be included when matching, can be used for external rewrites only.",
                        "locale:falseorundefined- whether the locale should not be included when matching.",
                        "hasis an array ofhas objectswith thetype,keyandvalueproperties.",
                        "missingis an array ofmissing objectswith thetype,keyandvalueproperties."
                    ]
                },
                {
                    "type": "p",
                    "text": "Headers are checked before the filesystem which includes pages and/publicfiles."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Header Overriding Behavior"
                },
                {
                    "type": "p",
                    "text": "If two headers match the same path and set the same header key, the last header key will override the first. Using the below headers, the path/hellowill result in the headerx-hellobeingworlddue to the last header value set beingworld."
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncheaders() {return[{source:'/:path*',headers:[{key:'x-hello',value:'there',},],},{source:'/hello',headers:[{key:'x-hello',value:'world',},],},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Path Matching"
                },
                {
                    "type": "p",
                    "text": "Path matches are allowed, for example/blog/:slugwill match/blog/hello-world(no nested paths):"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncheaders() {return[{source:'/blog/:slug',headers:[{key:'x-slug',value:':slug',// Matched parameters can be used in the value},{key:'x-slug-:slug',// Matched parameters can be used in the keyvalue:'my other custom header value',},],},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Wildcard Path Matching"
                },
                {
                    "type": "p",
                    "text": "To match a wildcard path you can use*after a parameter, for example/blog/:slug*will match/blog/a/b/c/d/hello-world:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncheaders() {return[{source:'/blog/:slug*',headers:[{key:'x-slug',value:':slug*',// Matched parameters can be used in the value},{key:'x-slug-:slug*',// Matched parameters can be used in the keyvalue:'my other custom header value',},],},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Regex Path Matching"
                },
                {
                    "type": "p",
                    "text": "To match a regex path you can wrap the regex in parenthesis after a parameter, for example/blog/:slug(\\\\d{1,})will match/blog/123but not/blog/abc:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncheaders() {return[{source:'/blog/:post(\\\\d{1,})',headers:[{key:'x-post',value:':post',},],},]},}"
                },
                {
                    "type": "p",
                    "text": "The following characters(,),{,},:,*,+,?are used for regex path matching, so when used in thesourceas non-special values they must be escaped by adding\\\\before them:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncheaders() {return[{// this will match `/english(default)/something` being requestedsource:'/english\\\\(default\\\\)/:slug',headers:[{key:'x-header',value:'value',},],},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Header, Cookie, and Query Matching"
                },
                {
                    "type": "p",
                    "text": "To only apply a header when header, cookie, or query values also match thehasfield or don't match themissingfield can be used. Both thesourceand allhasitems must match and allmissingitems must not match for the header to be applied."
                },
                {
                    "type": "p",
                    "text": "hasandmissingitems can have the following fields:"
                },
                {
                    "type": "list",
                    "items": [
                        "type:String- must be eitherheader,cookie,host, orquery.",
                        "key:String- the key from the selected type to match against.",
                        "value:Stringorundefined- the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the valuefirst-(?<paramName>.*)is used forfirst-secondthensecondwill be usable in the destination with:paramName."
                    ]
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncheaders() {return[// if the header `x-add-header` is present,// the `x-another-header` header will be applied{source:'/:path*',has:[{type:'header',key:'x-add-header',},],headers:[{key:'x-another-header',value:'hello',},],},// if the header `x-no-header` is not present,// the `x-another-header` header will be applied{source:'/:path*',missing:[{type:'header',key:'x-no-header',},],headers:[{key:'x-another-header',value:'hello',},],},// if the source, query, and cookie are matched,// the `x-authorized` header will be applied{source:'/specific/:path*',has:[{type:'query',key:'page',// the page value will not be available in the// header key/values since value is provided and// doesn't use a named capture group e.g. (?<page>home)value:'home',},{type:'cookie',key:'authorized',value:'true',},],headers:[{key:'x-authorized',value:':authorized',},],},// if the header `x-authorized` is present and// contains a matching value, the `x-another-header` will be applied{source:'/:path*',has:[{type:'header',key:'x-authorized',value:'(?<authorized>yes|true)',},],headers:[{key:'x-another-header',value:':authorized',},],},// if the host is `example.com`,// this header will be applied{source:'/:path*',has:[{type:'host',value:'example.com',},],headers:[{key:'x-another-header',value:':authorized',},],},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Headers with basePath support"
                },
                {
                    "type": "p",
                    "text": "When leveragingbasePathsupportwith headers eachsourceis automatically prefixed with thebasePathunless you addbasePath: falseto the header:"
                },
                {
                    "type": "code",
                    "code": "module.exports={basePath:'/docs',asyncheaders() {return[{source:'/with-basePath',// becomes /docs/with-basePathheaders:[{key:'x-hello',value:'world',},],},{source:'/without-basePath',// is not modified since basePath: false is setheaders:[{key:'x-hello',value:'world',},],basePath:false,},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Headers with i18n support"
                },
                {
                    "type": "p",
                    "text": "When leveragingi18nsupportwith headers eachsourceis automatically prefixed to handle the configuredlocalesunless you addlocale: falseto the header. Iflocale: falseis used you must prefix thesourcewith a locale for it to be matched correctly."
                },
                {
                    "type": "code",
                    "code": "module.exports={i18n:{locales:['en','fr','de'],defaultLocale:'en',},asyncheaders() {return[{source:'/with-locale',// automatically handles all localesheaders:[{key:'x-hello',value:'world',},],},{// does not handle locales automatically since locale: false is setsource:'/nl/with-locale-manual',locale:false,headers:[{key:'x-hello',value:'world',},],},{// this matches '/' since `en` is the defaultLocalesource:'/en',locale:false,headers:[{key:'x-hello',value:'world',},],},{// this gets converted to /(en|fr|de)/(.*) so will not match the top-level// `/` or `/fr` routes like /:path* wouldsource:'/(.*)',headers:[{key:'x-hello',value:'world',},],},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Cache-Control"
                },
                {
                    "type": "p",
                    "text": "You cannot setCache-Controlheaders innext.config.jsfor pages or assets, as these headers will be overwritten in production to ensure that responses and static assets are cached effectively."
                },
                {
                    "type": "p",
                    "text": "Learn more aboutcachingwith the App Router."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Options"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CORS"
                },
                {
                    "type": "p",
                    "text": "Cross-Origin Resource Sharing (CORS)is a security feature that allows you to control which sites can access your resources. You can set theAccess-Control-Allow-Originheader to allow a specific origin to access yourRoute Handlers."
                },
                {
                    "type": "code",
                    "code": "asyncheaders() {return[{source:\"/api/:path*\",headers:[{key:\"Access-Control-Allow-Origin\",value:\"*\",// Set your origin},{key:\"Access-Control-Allow-Methods\",value:\"GET, POST, PUT, DELETE, OPTIONS\",},{key:\"Access-Control-Allow-Headers\",value:\"Content-Type, Authorization\",},],},];},"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "X-DNS-Prefetch-Control"
                },
                {
                    "type": "p",
                    "text": "This headercontrols DNS prefetching, allowing browsers to proactively perform domain name resolution on external links, images, CSS, JavaScript, and more. This prefetching is performed in the background, so theDNSis more likely to be resolved by the time the referenced items are needed. This reduces latency when the user clicks a link."
                },
                {
                    "type": "code",
                    "code": "{key:'X-DNS-Prefetch-Control',value:'on'}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Strict-Transport-Security"
                },
                {
                    "type": "p",
                    "text": "This headerinforms browsers it should only be accessed using HTTPS, instead of using HTTP. Using the configuration below, all present and future subdomains will use HTTPS for amax-ageof 2 years. This blocks access to pages or subdomains that can only be served over HTTP."
                },
                {
                    "type": "p",
                    "text": "If you're deploying toVercel, this header is not necessary as it's automatically added to all deployments unless you declareheadersin yournext.config.js."
                },
                {
                    "type": "code",
                    "code": "{key:'Strict-Transport-Security',value:'max-age=63072000; includeSubDomains; preload'}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "X-Frame-Options"
                },
                {
                    "type": "p",
                    "text": "This headerindicates whether the site should be allowed to be displayed within aniframe. This can prevent against clickjacking attacks."
                },
                {
                    "type": "p",
                    "text": "This header has been superseded by CSP'sframe-ancestorsoption, which has better support in modern browsers (seeContent Security Policyfor configuration details)."
                },
                {
                    "type": "code",
                    "code": "{key:'X-Frame-Options',value:'SAMEORIGIN'}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Permissions-Policy"
                },
                {
                    "type": "p",
                    "text": "This headerallows you to control which features and APIs can be used in the browser. It was previously namedFeature-Policy."
                },
                {
                    "type": "code",
                    "code": "{key:'Permissions-Policy',value:'camera=(), microphone=(), geolocation=(), browsing-topics=()'}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "X-Content-Type-Options"
                },
                {
                    "type": "p",
                    "text": "This headerprevents the browser from attempting to guess the type of content if theContent-Typeheader is not explicitly set. This can prevent XSS exploits for websites that allow users to upload and share files."
                },
                {
                    "type": "p",
                    "text": "For example, a user trying to download an image, but having it treated as a differentContent-Typelike an executable, which could be malicious. This header also applies to downloading browser extensions. The only valid value for this header isnosniff."
                },
                {
                    "type": "code",
                    "code": "{key:'X-Content-Type-Options',value:'nosniff'}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Referrer-Policy"
                },
                {
                    "type": "p",
                    "text": "This headercontrols how much information the browser includes when navigating from the current website (origin) to another."
                },
                {
                    "type": "code",
                    "code": "{key:'Referrer-Policy',value:'origin-when-cross-origin'}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Content-Security-Policy"
                },
                {
                    "type": "p",
                    "text": "Learn more about adding aContent Security Policyto your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/httpAgentOptions",
            "title": "next.config.js Options: httpAgentOptions | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "httpAgentOptions"
                },
                {
                    "type": "p",
                    "text": "In Node.js versions prior to 18, Next.js automatically polyfillsfetch()withundiciand enablesHTTP Keep-Aliveby default."
                },
                {
                    "type": "p",
                    "text": "To disable HTTP Keep-Alive for allfetch()calls on the server-side, opennext.config.jsand add thehttpAgentOptionsconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={httpAgentOptions:{keepAlive:false,},}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/images",
            "title": "next.config.js Options: images | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "images"
                },
                {
                    "type": "p",
                    "text": "If you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configurenext.config.jswith the following:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{loader:'custom',loaderFile:'./my/image/loader.js',},}"
                },
                {
                    "type": "p",
                    "text": "ThisloaderFilemust point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:"
                },
                {
                    "type": "code",
                    "code": "'use client'exportdefaultfunctionmyImageLoader({ src,width,quality }) {return`https://example.com/${src}?w=${width}&q=${quality||75}`}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use theloaderpropto pass the function to each instance ofnext/image."
                },
                {
                    "type": "p",
                    "text": "Good to know: Customizing the image loader file, which accepts a function, requires usingClient Componentsto serialize the provided function."
                },
                {
                    "type": "p",
                    "text": "To learn more about configuring the behavior of the built-inImage Optimization APIand theImage Component, seeImage Configuration Optionsfor available options."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Example Loader Configuration"
                },
                {
                    "type": "list",
                    "items": [
                        "Akamai",
                        "AWS CloudFront",
                        "Cloudinary",
                        "Cloudflare",
                        "Contentful",
                        "Fastly",
                        "Gumlet",
                        "ImageEngine",
                        "Imgix",
                        "Thumbor",
                        "Sanity",
                        "Sirv",
                        "Supabase"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Akamai"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://techdocs.akamai.com/ivm/reference/test-images-on-demandexportdefaultfunctionakamaiLoader({ src,width,quality }) {return`https://example.com/${src}?imwidth=${width}`}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "AWS CloudFront"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://aws.amazon.com/developer/application-security-performance/articles/image-optimizationexportdefaultfunctioncloudfrontLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('format','auto')url.searchParams.set('width',width.toString())url.searchParams.set('quality',(quality||75).toString())returnurl.href"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Cloudinary"
                },
                {
                    "type": "code",
                    "code": "// Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit,q_auto/turtles.jpgexportdefaultfunctioncloudinaryLoader({ src,width,quality }) {constparams=['f_auto','c_limit',`w_${width}`,`q_${quality||'auto'}`]return`https://example.com/${params.join(',')}${src}`}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Cloudflare"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://developers.cloudflare.com/images/url-formatexportdefaultfunctioncloudflareLoader({ src,width,quality }) {constparams=[`width=${width}`,`quality=${quality||75}`,'format=auto']return`https://example.com/cdn-cgi/image/${params.join(',')}/${src}`}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Contentful"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://www.contentful.com/developers/docs/references/images-api/exportdefaultfunctioncontentfulLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('fm','webp')url.searchParams.set('w',width.toString())url.searchParams.set('q',(quality||75).toString())returnurl.href}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fastly"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://developer.fastly.com/reference/io/exportdefaultfunctionfastlyLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('auto','webp')url.searchParams.set('width',width.toString())url.searchParams.set('quality',(quality||75).toString())returnurl.href}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Gumlet"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://docs.gumlet.com/reference/image-transform-sizeexportdefaultfunctiongumletLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('format','auto')url.searchParams.set('w',width.toString())url.searchParams.set('q',(quality||75).toString())returnurl.href}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "ImageEngine"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://support.imageengine.io/hc/en-us/articles/360058880672-DirectivesexportdefaultfunctionimageengineLoader({ src,width,quality }) {constcompression=100-(quality||50)constparams=[`w_${width}`,`cmpr_${compression}`)]return`https://example.com${src}?imgeng=/${params.join('/')`}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Imgix"
                },
                {
                    "type": "code",
                    "code": "// Demo: https://static.imgix.net/daisy.png?format=auto&fit=max&w=300exportdefaultfunctionimgixLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)constparams=url.searchParamsparams.set('auto',params.getAll('auto').join(',')||'format')params.set('fit',params.get('fit')||'max')params.set('w',params.get('w')||width.toString())params.set('q',(quality||50).toString())returnurl.href}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Thumbor"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://thumbor.readthedocs.io/en/latest/exportdefaultfunctionthumborLoader({ src,width,quality }) {constparams=[`${width}x0`,`filters:quality(${quality||75})`]return`https://example.com${params.join('/')}${src}`}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sanity"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://www.sanity.io/docs/image-urlsexportdefaultfunctionsanityLoader({ src,width,quality }) {constprj='zp7mbokg'constdataset='production'consturl=newURL(`https://cdn.sanity.io/images/${prj}/${dataset}${src}`)url.searchParams.set('auto','format')url.searchParams.set('fit','max')url.searchParams.set('w',width.toString())if(quality) {url.searchParams.set('q',quality.toString())}returnurl.href}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sirv"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://sirv.com/help/articles/dynamic-imaging/exportdefaultfunctionsirvLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)constparams=url.searchParamsparams.set('format',params.getAll('format').join(',')||'optimal')params.set('w',params.get('w')||width.toString())params.set('q',(quality||85).toString())returnurl.href}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Supabase"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://supabase.com/docs/guides/storage/image-transformations#nextjs-loaderexportdefaultfunctionsupabaseLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('width',width.toString())url.searchParams.set('quality',(quality||75).toString())returnurl.href}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/incrementalCacheHandlerPath",
            "title": "next.config.js Options: cacheHandler | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Custom Next.js Cache Handler"
                },
                {
                    "type": "p",
                    "text": "In Next.js, thedefault cache handlerfor the Pages and App Router uses the filesystem cache. This requires no configuration, however, you can customize the cache handler by using thecacheHandlerfield innext.config.js."
                },
                {
                    "type": "code",
                    "code": "module.exports={cacheHandler:require.resolve('./cache-handler.js'),cacheMaxMemorySize:0,// disable default in-memory caching}"
                },
                {
                    "type": "p",
                    "text": "View an example of acustom cache handlerand learn more about implementation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Reference"
                },
                {
                    "type": "p",
                    "text": "The cache handler can implement the following methods:get,set, andrevalidateTag."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "get()"
                },
                {
                    "type": "p",
                    "text": "Returns the cached value ornullif not found."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "set()"
                },
                {
                    "type": "p",
                    "text": "ReturnsPromise<void>."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "revalidateTag()"
                },
                {
                    "type": "p",
                    "text": "ReturnsPromise<void>. Learn more aboutrevalidating dataor therevalidateTag()function."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "revalidatePathis a convenience layer on top of cache tags. CallingrevalidatePathwill call yourrevalidateTagfunction, which you can then choose if you want to tag cache keys based on the path."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/instrumentationHook",
            "title": "next.config.js Options: instrumentationHook | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "instrumentationHook"
                },
                {
                    "type": "p",
                    "text": "The experimentalinstrumentationHookoption allows you to set up instrumentation via theinstrumentationfilein your Next.js App."
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{instrumentationHook:true,},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Learn more about Instrumentation"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "instrumentation.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Instrumentation"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/logging",
            "title": "next.config.js Options: logging | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "logging"
                },
                {
                    "type": "p",
                    "text": "You can configure the logging level and whether the full URL is logged to the console when running Next.js in development mode."
                },
                {
                    "type": "p",
                    "text": "Currently,loggingonly applies to data fetching using thefetchAPI. It does not yet apply to other logs inside of Next.js."
                },
                {
                    "type": "code",
                    "code": "module.exports={logging:{fetches:{fullUrl:true,},},}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/mdxRs",
            "title": "next.config.js Options: mdxRs | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "mdxRs"
                },
                {
                    "type": "p",
                    "text": "For use with@next/mdx. Compile MDX files using the new Rust compiler."
                },
                {
                    "type": "code",
                    "code": "constwithMDX=require('@next/mdx')()/**@type{import('next').NextConfig}*/constnextConfig={pageExtensions:['ts','tsx','mdx'],experimental:{mdxRs:true,},}module.exports=withMDX(nextConfig)"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/onDemandEntries",
            "title": "next.config.js Options: onDemandEntries | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "onDemandEntries"
                },
                {
                    "type": "p",
                    "text": "Next.js exposes some options that give you some control over how the server will dispose or keep in memory built pages in development."
                },
                {
                    "type": "p",
                    "text": "To change the defaults, opennext.config.jsand add theonDemandEntriesconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={onDemandEntries:{// period (in ms) where the server will keep pages in the buffermaxInactiveAge:25*1000,// number of pages that should be kept simultaneously without being disposedpagesBufferLength:2,},}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/optimizePackageImports",
            "title": "next.config.js Options: optimizePackageImports | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "optimizePackageImports"
                },
                {
                    "type": "p",
                    "text": "Some packages can export hundreds or thousands of modules, which can cause performance issues in development and production."
                },
                {
                    "type": "p",
                    "text": "Adding a package toexperimental.optimizePackageImportswill only load the modules you are actually using, while still giving you the convenience of writing import statements with many named exports."
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{optimizePackageImports:['package-name'],},}"
                },
                {
                    "type": "p",
                    "text": "The following libraries are optimized by default:"
                },
                {
                    "type": "list",
                    "items": [
                        "lucide-react",
                        "date-fns",
                        "lodash-es",
                        "ramda",
                        "antd",
                        "react-bootstrap",
                        "ahooks",
                        "@ant-design/icons",
                        "@headlessui/react",
                        "@headlessui-float/react",
                        "@heroicons/react/20/solid",
                        "@heroicons/react/24/solid",
                        "@heroicons/react/24/outline",
                        "@visx/visx",
                        "@tremor/react",
                        "rxjs",
                        "@mui/material",
                        "@mui/icons-material",
                        "recharts",
                        "react-use",
                        "@material-ui/core",
                        "@material-ui/icons",
                        "@tabler/icons-react",
                        "mui-core",
                        "react-icons/*"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/output",
            "title": "next.config.js Options: output | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "output"
                },
                {
                    "type": "p",
                    "text": "During a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application."
                },
                {
                    "type": "p",
                    "text": "This feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package'sdependenciesinstalled to runnext start. Starting with Next.js 12, you can leverage Output File Tracing in the.next/directory to only include the necessary files."
                },
                {
                    "type": "p",
                    "text": "Furthermore, this removes the need for the deprecatedserverlesstarget which can cause various issues and also creates unnecessary duplication."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How it Works"
                },
                {
                    "type": "p",
                    "text": "Duringnext build, Next.js will use@vercel/nftto statically analyzeimport,require, andfsusage to determine all files that a page might load."
                },
                {
                    "type": "p",
                    "text": "Next.js' production server is also traced for its needed files and output at.next/next-server.js.nft.jsonwhich can be leveraged in production."
                },
                {
                    "type": "p",
                    "text": "To leverage the.nft.jsonfiles emitted to the.nextoutput directory, you can read the list of files in each trace that are relative to the.nft.jsonfile and then copy them to your deployment location."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Automatically Copying Traced Files"
                },
                {
                    "type": "p",
                    "text": "Next.js can automatically create astandalonefolder that copies only the necessary files for a production deployment including select files innode_modules."
                },
                {
                    "type": "p",
                    "text": "To leverage this automatic copying you can enable it in yournext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={output:'standalone',}"
                },
                {
                    "type": "p",
                    "text": "This will create a folder at.next/standalonewhich can then be deployed on its own without installingnode_modules."
                },
                {
                    "type": "p",
                    "text": "Additionally, a minimalserver.jsfile is also output which can be used instead ofnext start. This minimal server does not copy thepublicor.next/staticfolders by default as these should ideally be handled by a CDN instead, although these folders can be copied to thestandalone/publicandstandalone/.next/staticfolders manually, after whichserver.jsfile will serve these automatically."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "If your project needs to listen to a specific port or hostname, you can definePORTorHOSTNAMEenvironment variables before runningserver.js. For example, runPORT=8080 HOSTNAME=0.0.0.0 node server.jsto start the server onhttp://0.0.0.0:8080.",
                        "If your project usesImage Optimizationwith the defaultloader, you must installsharpas a dependency:"
                    ]
                },
                {
                    "type": "code",
                    "code": "npmisharp"
                },
                {
                    "type": "code",
                    "code": "yarnaddsharp"
                },
                {
                    "type": "code",
                    "code": "pnpmaddsharp"
                },
                {
                    "type": "code",
                    "code": "bunaddsharp"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Caveats"
                },
                {
                    "type": "list",
                    "items": [
                        "While tracing in monorepo setups, the project directory is used for tracing by default. Fornext build packages/web-app,packages/web-appwould be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can setexperimental.outputFileTracingRootin yournext.config.js."
                    ]
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{// this includes files from the monorepo base two directories upoutputFileTracingRoot:path.join(__dirname,'../../'),},}"
                },
                {
                    "type": "list",
                    "items": [
                        "There are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can leverageexperimental.outputFileTracingExcludesandexperimental.outputFileTracingIncludesrespectively innext.config.js. Each config accepts an object withminimatch globsfor the key to match specific pages and a value of an array with globs relative to the project's root to either include or exclude in the trace."
                    ]
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{outputFileTracingExcludes:{'/api/hello':['./un-necessary-folder/**/*'],},outputFileTracingIncludes:{'/api/another':['./necessary-folder/**/*'],},},}"
                },
                {
                    "type": "list",
                    "items": [
                        "Currently, Next.js does not do anything with the emitted.nft.jsonfiles. The files must be read by your deployment platform, for exampleVercel, to create a minimal deployment. In a future release, a new command is planned to utilize these.nft.jsonfiles."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Experimentalturbotrace"
                },
                {
                    "type": "p",
                    "text": "Tracing dependencies can be slow because it requires very complex computations and analysis. We createdturbotracein Rust as a faster and smarter alternative to the JavaScript implementation."
                },
                {
                    "type": "p",
                    "text": "To enable it, you can add the following configuration to yournext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{turbotrace:{// control the log level of the turbotrace, default is `error`logLevel?:|'bug'|'fatal'|'error'|'warning'|'hint'|'note'|'suggestions'|'info',// control if the log of turbotrace should contain the details of the analysis, default is `false`logDetail?:boolean// show all log messages without limit// turbotrace only show 1 log message for each categories by defaultlogAll?:boolean// control the context directory of the turbotrace// files outside of the context directory will not be traced// set the `experimental.outputFileTracingRoot` has the same effect// if the `experimental.outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be usedcontextDirectory?:string// if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.// for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')processCwd?:string// control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.memoryLimit?:number},},}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/pageExtensions",
            "title": "next.config.js Options: pageExtensions | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "pageExtensions"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js accepts files with the following extensions:.tsx,.ts,.jsx,.js. This can be modified to allow other extensions like markdown (.md,.mdx)."
                },
                {
                    "type": "code",
                    "code": "constwithMDX=require('@next/mdx')()/**@type{import('next').NextConfig}*/constnextConfig={pageExtensions:['ts','tsx','mdx'],experimental:{mdxRs:true,},}module.exports=withMDX(nextConfig)"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/partial-prerendering",
            "title": "next.config.js Options: Partial Prerendering (experimental) | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Partial Prerendering (experimental)"
                },
                {
                    "type": "p",
                    "text": "Warning: Partial Prerendering is an experimental feature and is currentlynot suitable for production environments."
                },
                {
                    "type": "p",
                    "text": "Partial Prerendering is an experimental feature that allows static portions of a route to be prerendered and served from the cache with dynamic holes streamed in, all in a single HTTP request."
                },
                {
                    "type": "p",
                    "text": "Partial Prerendering is available innext@canary:"
                },
                {
                    "type": "code",
                    "code": "npminstallnext@canary"
                },
                {
                    "type": "p",
                    "text": "You can enable Partial Prerendering by setting the experimentalpprflag:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{ppr:true,},}module.exports=nextConfig"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Partial Prerendering does not yet apply to client-side navigations. We are actively working on this.",
                        "Partial Prerendering is designed for theNode.js runtimeonly. Using the subset of the Node.js runtime is not needed when you can instantly serve the static shell."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about Partial Prerendering in theNext.js Learn course."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/poweredByHeader",
            "title": "next.config.js Options: poweredByHeader | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "poweredByHeader"
                },
                {
                    "type": "p",
                    "text": "By default Next.js will add thex-powered-byheader. To opt-out of it, opennext.config.jsand disable thepoweredByHeaderconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={poweredByHeader:false,}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/productionBrowserSourceMaps",
            "title": "next.config.js Options: productionBrowserSourceMaps | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "productionBrowserSourceMaps"
                },
                {
                    "type": "p",
                    "text": "Source Maps are enabled by default during development. During production builds, they are disabled to prevent you leaking your source on the client, unless you specifically opt-in with the configuration flag."
                },
                {
                    "type": "p",
                    "text": "Next.js provides a configuration flag you can use to enable browser source map generation during the production build:"
                },
                {
                    "type": "code",
                    "code": "module.exports={productionBrowserSourceMaps:true,}"
                },
                {
                    "type": "p",
                    "text": "When theproductionBrowserSourceMapsoption is enabled, the source maps will be output in the same directory as the JavaScript files. Next.js will automatically serve these files when requested."
                },
                {
                    "type": "list",
                    "items": [
                        "Adding source maps can increasenext buildtime",
                        "Increases memory usage duringnext build"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/reactStrictMode",
            "title": "next.config.js Options: reactStrictMode | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "reactStrictMode"
                },
                {
                    "type": "p",
                    "text": "Good to know: Since Next.js 13.4, Strict Mode istrueby default withapprouter, so the above configuration is only necessary forpages. You can still disable Strict Mode by settingreactStrictMode: false."
                },
                {
                    "type": "p",
                    "text": "Suggested: We strongly suggest you enable Strict Mode in your Next.js application to better prepare your application for the future of React."
                },
                {
                    "type": "p",
                    "text": "React'sStrict Modeis a development mode only feature for highlighting potential problems in an application. It helps to identify unsafe lifecycles, legacy API usage, and a number of other features."
                },
                {
                    "type": "p",
                    "text": "The Next.js runtime is Strict Mode-compliant. To opt-in to Strict Mode, configure the following option in yournext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={reactStrictMode:true,}"
                },
                {
                    "type": "p",
                    "text": "If you or your team are not ready to use Strict Mode in your entire application, that's OK! You can incrementally migrate on a page-by-page basis using<React.StrictMode>."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/redirects",
            "title": "next.config.js Options: redirects | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "redirects"
                },
                {
                    "type": "p",
                    "text": "Redirects allow you to redirect an incoming request path to a different destination path."
                },
                {
                    "type": "p",
                    "text": "To use redirects you can use theredirectskey innext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncredirects() {return[{source:'/about',destination:'/',permanent:true,},]},}"
                },
                {
                    "type": "p",
                    "text": "redirectsis an async function that expects an array to be returned holding objects withsource,destination, andpermanentproperties:"
                },
                {
                    "type": "list",
                    "items": [
                        "sourceis the incoming request path pattern.",
                        "destinationis the path you want to route to.",
                        "permanenttrueorfalse- iftruewill use the 308 status code which instructs clients/search engines to cache the redirect forever, iffalsewill use the 307 status code which is temporary and is not cached."
                    ]
                },
                {
                    "type": "p",
                    "text": "Why does Next.js use 307 and 308?Traditionally a 302 was used for a temporary redirect, and a 301 for a permanent redirect, but many browsers changed the request method of the redirect toGET, regardless of the original method. For example, if the browser made a request toPOST /v1/userswhich returned status code302with location/v2/users, the subsequent request might beGET /v2/usersinstead of the expectedPOST /v2/users. Next.js uses the 307 temporary redirect, and 308 permanent redirect status codes to explicitly preserve the request method used."
                },
                {
                    "type": "list",
                    "items": [
                        "basePath:falseorundefined- if false thebasePathwon't be included when matching, can be used for external redirects only.",
                        "locale:falseorundefined- whether the locale should not be included when matching.",
                        "hasis an array ofhas objectswith thetype,keyandvalueproperties.",
                        "missingis an array ofmissing objectswith thetype,keyandvalueproperties."
                    ]
                },
                {
                    "type": "p",
                    "text": "Redirects are checked before the filesystem which includes pages and/publicfiles."
                },
                {
                    "type": "p",
                    "text": "When using the Pages Router, redirects are not applied to client-side routing (Link,router.push) unlessMiddlewareis present and matches the path."
                },
                {
                    "type": "p",
                    "text": "When a redirect is applied, any query values provided in the request will be passed through to the redirect destination. For example, see the following redirect configuration:"
                },
                {
                    "type": "code",
                    "code": "{source:'/old-blog/:path*',destination:'/blog/:path*',permanent:false}"
                },
                {
                    "type": "p",
                    "text": "When/old-blog/post-1?hello=worldis requested, the client will be redirected to/blog/post-1?hello=world."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Path Matching"
                },
                {
                    "type": "p",
                    "text": "Path matches are allowed, for example/old-blog/:slugwill match/old-blog/hello-world(no nested paths):"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncredirects() {return[{source:'/old-blog/:slug',destination:'/news/:slug',// Matched parameters can be used in the destinationpermanent:true,},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Wildcard Path Matching"
                },
                {
                    "type": "p",
                    "text": "To match a wildcard path you can use*after a parameter, for example/blog/:slug*will match/blog/a/b/c/d/hello-world:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncredirects() {return[{source:'/blog/:slug*',destination:'/news/:slug*',// Matched parameters can be used in the destinationpermanent:true,},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Regex Path Matching"
                },
                {
                    "type": "p",
                    "text": "To match a regex path you can wrap the regex in parentheses after a parameter, for example/post/:slug(\\\\d{1,})will match/post/123but not/post/abc:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncredirects() {return[{source:'/post/:slug(\\\\d{1,})',destination:'/news/:slug',// Matched parameters can be used in the destinationpermanent:false,},]},}"
                },
                {
                    "type": "p",
                    "text": "The following characters(,),{,},:,*,+,?are used for regex path matching, so when used in thesourceas non-special values they must be escaped by adding\\\\before them:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncredirects() {return[{// this will match `/english(default)/something` being requestedsource:'/english\\\\(default\\\\)/:slug',destination:'/en-us/:slug',permanent:false,},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Header, Cookie, and Query Matching"
                },
                {
                    "type": "p",
                    "text": "To only match a redirect when header, cookie, or query values also match thehasfield or don't match themissingfield can be used. Both thesourceand allhasitems must match and allmissingitems must not match for the redirect to be applied."
                },
                {
                    "type": "p",
                    "text": "hasandmissingitems can have the following fields:"
                },
                {
                    "type": "list",
                    "items": [
                        "type:String- must be eitherheader,cookie,host, orquery.",
                        "key:String- the key from the selected type to match against.",
                        "value:Stringorundefined- the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the valuefirst-(?<paramName>.*)is used forfirst-secondthensecondwill be usable in the destination with:paramName."
                    ]
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncredirects() {return[// if the header `x-redirect-me` is present,// this redirect will be applied{source:'/:path((?!another-page$).*)',has:[{type:'header',key:'x-redirect-me',},],permanent:false,destination:'/another-page',},// if the header `x-dont-redirect` is present,// this redirect will NOT be applied{source:'/:path((?!another-page$).*)',missing:[{type:'header',key:'x-do-not-redirect',},],permanent:false,destination:'/another-page',},// if the source, query, and cookie are matched,// this redirect will be applied{source:'/specific/:path*',has:[{type:'query',key:'page',// the page value will not be available in the// destination since value is provided and doesn't// use a named capture group e.g. (?<page>home)value:'home',},{type:'cookie',key:'authorized',value:'true',},],permanent:false,destination:'/another/:path*',},// if the header `x-authorized` is present and// contains a matching value, this redirect will be applied{source:'/',has:[{type:'header',key:'x-authorized',value:'(?<authorized>yes|true)',},],permanent:false,destination:'/home?authorized=:authorized',},// if the host is `example.com`,// this redirect will be applied{source:'/:path((?!another-page$).*)',has:[{type:'host',value:'example.com',},],permanent:false,destination:'/another-page',},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Redirects with basePath support"
                },
                {
                    "type": "p",
                    "text": "When leveragingbasePathsupportwith redirects eachsourceanddestinationis automatically prefixed with thebasePathunless you addbasePath: falseto the redirect:"
                },
                {
                    "type": "code",
                    "code": "module.exports={basePath:'/docs',asyncredirects() {return[{source:'/with-basePath',// automatically becomes /docs/with-basePathdestination:'/another',// automatically becomes /docs/anotherpermanent:false,},{// does not add /docs since basePath: false is setsource:'/without-basePath',destination:'https://example.com',basePath:false,permanent:false,},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Redirects with i18n support"
                },
                {
                    "type": "p",
                    "text": "When leveragingi18nsupportwith redirects eachsourceanddestinationis automatically prefixed to handle the configuredlocalesunless you addlocale: falseto the redirect. Iflocale: falseis used you must prefix thesourceanddestinationwith a locale for it to be matched correctly."
                },
                {
                    "type": "code",
                    "code": "module.exports={i18n:{locales:['en','fr','de'],defaultLocale:'en',},asyncredirects() {return[{source:'/with-locale',// automatically handles all localesdestination:'/another',// automatically passes the locale onpermanent:false,},{// does not handle locales automatically since locale: false is setsource:'/nl/with-locale-manual',destination:'/nl/another',locale:false,permanent:false,},{// this matches '/' since `en` is the defaultLocalesource:'/en',destination:'/en/another',locale:false,permanent:false,},// it's possible to match all locales even when locale: false is set{source:'/:locale/page',destination:'/en/newpage',permanent:false,locale:false,},{// this gets converted to /(en|fr|de)/(.*) so will not match the top-level// `/` or `/fr` routes like /:path* wouldsource:'/(.*)',destination:'/another',permanent:false,},]},}"
                },
                {
                    "type": "p",
                    "text": "In some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use thestatusCodeproperty instead of thepermanentproperty, but not both. To to ensure IE11 compatibility, aRefreshheader is automatically added for the 308 status code."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Other Redirects"
                },
                {
                    "type": "list",
                    "items": [
                        "InsideAPI RoutesandRoute Handlers, you can redirect based on the incoming request.",
                        "InsidegetStaticPropsandgetServerSideProps, you can redirect specific pages at request-time."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/rewrites",
            "title": "next.config.js Options: rewrites | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "rewrites"
                },
                {
                    "type": "p",
                    "text": "Rewrites allow you to map an incoming request path to a different destination path."
                },
                {
                    "type": "p",
                    "text": "Rewrites act as a URL proxy and mask the destination path, making it appear the user hasn't changed their location on the site. In contrast,redirectswill reroute to a new page and show the URL changes."
                },
                {
                    "type": "p",
                    "text": "To use rewrites you can use therewriteskey innext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[{source:'/about',destination:'/',},]},}"
                },
                {
                    "type": "p",
                    "text": "Rewrites are applied to client-side routing, a<Link href=\"/about\">will have the rewrite applied in the above example."
                },
                {
                    "type": "p",
                    "text": "rewritesis an async function that expects to return either an array or an object of arrays (see below) holding objects withsourceanddestinationproperties:"
                },
                {
                    "type": "list",
                    "items": [
                        "source:String- is the incoming request path pattern.",
                        "destination:Stringis the path you want to route to.",
                        "basePath:falseorundefined- if false the basePath won't be included when matching, can be used for external rewrites only.",
                        "locale:falseorundefined- whether the locale should not be included when matching.",
                        "hasis an array ofhas objectswith thetype,keyandvalueproperties.",
                        "missingis an array ofmissing objectswith thetype,keyandvalueproperties."
                    ]
                },
                {
                    "type": "p",
                    "text": "When therewritesfunction returns an array, rewrites are applied after checking the filesystem (pages and/publicfiles) and before dynamic routes. When therewritesfunction returns an object of arrays with a specific shape, this behavior can be changed and more finely controlled, as ofv10.1of Next.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return{beforeFiles:[// These rewrites are checked after headers/redirects// and before all files including _next/public files which// allows overriding page files{source:'/some-page',destination:'/somewhere-else',has:[{ type:'query',key:'overrideMe'}],},],afterFiles:[// These rewrites are checked after pages/public files// are checked but before dynamic routes{source:'/non-existent',destination:'/somewhere-else',},],fallback:[// These rewrites are checked after both pages/public files// and dynamic routes are checked{source:'/:path*',destination:`https://my-old-site.com/:path*`,},],}},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: rewrites inbeforeFilesdo not check the filesystem/dynamic routes immediately after matching a source, they continue until allbeforeFileshave been checked."
                },
                {
                    "type": "p",
                    "text": "The order Next.js routes are checked is:"
                },
                {
                    "type": "list",
                    "items": [
                        "headersare checked/applied",
                        "redirectsare checked/applied",
                        "beforeFilesrewrites are checked/applied",
                        "static files from thepublic directory,_next/staticfiles, and non-dynamic pages are checked/served",
                        "afterFilesrewrites are checked/applied, if one of these rewrites is matched we check dynamic routes/static files after each match",
                        "fallbackrewrites are checked/applied, these are applied before rendering the 404 page and after dynamic routes/all static assets have been checked. If you usefallback: true/'blocking'ingetStaticPaths, the fallbackrewritesdefined in yournext.config.jswillnotbe run."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rewrite parameters"
                },
                {
                    "type": "p",
                    "text": "When using parameters in a rewrite the parameters will be passed in the query by default when none of the parameters are used in thedestination."
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[{source:'/old-about/:path*',destination:'/about',// The :path parameter isn't used here so will be automatically passed in the query},]},}"
                },
                {
                    "type": "p",
                    "text": "If a parameter is used in the destination none of the parameters will be automatically passed in the query."
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[{source:'/docs/:path*',destination:'/:path*',// The :path parameter is used here so will not be automatically passed in the query},]},}"
                },
                {
                    "type": "p",
                    "text": "You can still pass the parameters manually in the query if one is already used in the destination by specifying the query in thedestination."
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[{source:'/:first/:second',destination:'/:first?second=:second',// Since the :first parameter is used in the destination the :second parameter// will not automatically be added in the query although we can manually add it// as shown above},]},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Static pages fromAutomatic Static Optimizationorprerenderingparams from rewrites will be parsed on the client after hydration and provided in the query."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Path Matching"
                },
                {
                    "type": "p",
                    "text": "Path matches are allowed, for example/blog/:slugwill match/blog/hello-world(no nested paths):"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[{source:'/blog/:slug',destination:'/news/:slug',// Matched parameters can be used in the destination},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Wildcard Path Matching"
                },
                {
                    "type": "p",
                    "text": "To match a wildcard path you can use*after a parameter, for example/blog/:slug*will match/blog/a/b/c/d/hello-world:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[{source:'/blog/:slug*',destination:'/news/:slug*',// Matched parameters can be used in the destination},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Regex Path Matching"
                },
                {
                    "type": "p",
                    "text": "To match a regex path you can wrap the regex in parenthesis after a parameter, for example/blog/:slug(\\\\d{1,})will match/blog/123but not/blog/abc:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[{source:'/old-blog/:post(\\\\d{1,})',destination:'/blog/:post',// Matched parameters can be used in the destination},]},}"
                },
                {
                    "type": "p",
                    "text": "The following characters(,),{,},[,],|,\\,^,.,:,*,+,-,?,$are used for regex path matching, so when used in thesourceas non-special values they must be escaped by adding\\\\before them:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[{// this will match `/english(default)/something` being requestedsource:'/english\\\\(default\\\\)/:slug',destination:'/en-us/:slug',},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Header, Cookie, and Query Matching"
                },
                {
                    "type": "p",
                    "text": "To only match a rewrite when header, cookie, or query values also match thehasfield or don't match themissingfield can be used. Both thesourceand allhasitems must match and allmissingitems must not match for the rewrite to be applied."
                },
                {
                    "type": "p",
                    "text": "hasandmissingitems can have the following fields:"
                },
                {
                    "type": "list",
                    "items": [
                        "type:String- must be eitherheader,cookie,host, orquery.",
                        "key:String- the key from the selected type to match against.",
                        "value:Stringorundefined- the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the valuefirst-(?<paramName>.*)is used forfirst-secondthensecondwill be usable in the destination with:paramName."
                    ]
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[// if the header `x-rewrite-me` is present,// this rewrite will be applied{source:'/:path*',has:[{type:'header',key:'x-rewrite-me',},],destination:'/another-page',},// if the header `x-rewrite-me` is not present,// this rewrite will be applied{source:'/:path*',missing:[{type:'header',key:'x-rewrite-me',},],destination:'/another-page',},// if the source, query, and cookie are matched,// this rewrite will be applied{source:'/specific/:path*',has:[{type:'query',key:'page',// the page value will not be available in the// destination since value is provided and doesn't// use a named capture group e.g. (?<page>home)value:'home',},{type:'cookie',key:'authorized',value:'true',},],destination:'/:path*/home',},// if the header `x-authorized` is present and// contains a matching value, this rewrite will be applied{source:'/:path*',has:[{type:'header',key:'x-authorized',value:'(?<authorized>yes|true)',},],destination:'/home?authorized=:authorized',},// if the host is `example.com`,// this rewrite will be applied{source:'/:path*',has:[{type:'host',value:'example.com',},],destination:'/another-page',},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rewriting to an external URL"
                },
                {
                    "type": "list",
                    "items": [
                        "Incremental adoption of Next.js",
                        "Using Multiple Zones"
                    ]
                },
                {
                    "type": "p",
                    "text": "Rewrites allow you to rewrite to an external url. This is especially useful for incrementally adopting Next.js. The following is an example rewrite for redirecting the/blogroute of your main app to an external site."
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return[{source:'/blog',destination:'https://example.com/blog',},{source:'/blog/:slug',destination:'https://example.com/blog/:slug',// Matched parameters can be used in the destination},]},}"
                },
                {
                    "type": "p",
                    "text": "If you're usingtrailingSlash: true, you also need to insert a trailing slash in thesourceparameter. If the destination server is also expecting a trailing slash it should be included in thedestinationparameter as well."
                },
                {
                    "type": "code",
                    "code": "module.exports={trailingSlash:true,asyncrewrites() {return[{source:'/blog/',destination:'https://example.com/blog/',},{source:'/blog/:path*/',destination:'https://example.com/blog/:path*/',},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Incremental adoption of Next.js"
                },
                {
                    "type": "p",
                    "text": "You can also have Next.js fall back to proxying to an existing website after checking all Next.js routes."
                },
                {
                    "type": "p",
                    "text": "This way you don't have to change the rewrites configuration when migrating more pages to Next.js"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncrewrites() {return{fallback:[{source:'/:path*',destination:`https://custom-routes-proxying-endpoint.vercel.app/:path*`,},],}},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Rewrites with basePath support"
                },
                {
                    "type": "p",
                    "text": "When leveragingbasePathsupportwith rewrites eachsourceanddestinationis automatically prefixed with thebasePathunless you addbasePath: falseto the rewrite:"
                },
                {
                    "type": "code",
                    "code": "module.exports={basePath:'/docs',asyncrewrites() {return[{source:'/with-basePath',// automatically becomes /docs/with-basePathdestination:'/another',// automatically becomes /docs/another},{// does not add /docs to /without-basePath since basePath: false is set// Note: this can not be used for internal rewrites e.g. `destination: '/another'`source:'/without-basePath',destination:'https://example.com',basePath:false,},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Rewrites with i18n support"
                },
                {
                    "type": "p",
                    "text": "When leveragingi18nsupportwith rewrites eachsourceanddestinationis automatically prefixed to handle the configuredlocalesunless you addlocale: falseto the rewrite. Iflocale: falseis used you must prefix thesourceanddestinationwith a locale for it to be matched correctly."
                },
                {
                    "type": "code",
                    "code": "module.exports={i18n:{locales:['en','fr','de'],defaultLocale:'en',},asyncrewrites() {return[{source:'/with-locale',// automatically handles all localesdestination:'/another',// automatically passes the locale on},{// does not handle locales automatically since locale: false is setsource:'/nl/with-locale-manual',destination:'/nl/another',locale:false,},{// this matches '/' since `en` is the defaultLocalesource:'/en',destination:'/en/another',locale:false,},{// it's possible to match all locales even when locale: false is setsource:'/:locale/api-alias/:path*',destination:'/api/:path*',locale:false,},{// this gets converted to /(en|fr|de)/(.*) so will not match the top-level// `/` or `/fr` routes like /:path* wouldsource:'/(.*)',destination:'/another',},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverActions",
            "title": "next.config.js Options: serverActions | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "serverActions"
                },
                {
                    "type": "p",
                    "text": "Options for configuring Server Actions behavior in your Next.js application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "allowedOrigins"
                },
                {
                    "type": "p",
                    "text": "A list of extra safe origin domains from which Server Actions can be invoked. Next.js compares the origin of a Server Action request with the host domain, ensuring they match to prevent CSRF attacks. If not provided, only the same origin is allowed."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/module.exports={experimental:{serverActions:{allowedOrigins:['my-proxy.com','*.my-proxy.com'],},},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "bodySizeLimit"
                },
                {
                    "type": "p",
                    "text": "By default, the maximum size of the request body sent to a Server Action is 1MB, to prevent the consumption of excessive server resources in parsing large amounts of data, as well as potential DDoS attacks."
                },
                {
                    "type": "p",
                    "text": "However, you can configure this limit using theserverActions.bodySizeLimitoption. It can take the number of bytes or any string format supported by bytes, for example1000,'500kb'or'3mb'."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/module.exports={experimental:{serverActions:{bodySizeLimit:'2mb',},},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enabling Server Actions (v13)"
                },
                {
                    "type": "p",
                    "text": "Server Actions became a stable feature in Next.js 14, and are enabled by default. However, if you are using an earlier version of Next.js, you can enable them by settingexperimental.serverActionstotrue."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constconfig={experimental:{serverActions:true,},}module.exports=config"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverComponentsExternalPackages",
            "title": "next.config.js Options: serverExternalPackages | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "serverComponentsExternalPackages"
                },
                {
                    "type": "p",
                    "text": "Dependencies used insideServer ComponentsandRoute Handlerswill automatically be bundled by Next.js."
                },
                {
                    "type": "p",
                    "text": "If a dependency is using Node.js specific features, you can choose to opt-out specific dependencies from the Server Components bundling and use native Node.jsrequire."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{serverComponentsExternalPackages:['@acme/ui'],},}module.exports=nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js includes ashort list of popular packagesthat currently are working on compatibility and automatically opt-ed out:"
                },
                {
                    "type": "list",
                    "items": [
                        "@aws-sdk/client-s3",
                        "@aws-sdk/s3-presigned-post",
                        "@blockfrost/blockfrost-js",
                        "@highlight-run/node",
                        "@jpg-store/lucid-cardano",
                        "@libsql/client",
                        "@mikro-orm/core",
                        "@mikro-orm/knex",
                        "@prisma/client",
                        "@react-pdf/renderer",
                        "@sentry/profiling-node",
                        "@swc/core",
                        "argon2",
                        "autoprefixer",
                        "aws-crt",
                        "bcrypt",
                        "better-sqlite3",
                        "canvas",
                        "cpu-features",
                        "cypress",
                        "eslint",
                        "express",
                        "firebase-admin",
                        "jest",
                        "jsdom",
                        "libsql",
                        "mdx-bundler",
                        "mongodb",
                        "mongoose",
                        "next-mdx-remote",
                        "next-seo",
                        "node-pty",
                        "node-web-audio-api",
                        "pg",
                        "playwright",
                        "postcss",
                        "prettier",
                        "prisma",
                        "puppeteer-core",
                        "puppeteer",
                        "rimraf",
                        "sharp",
                        "shiki",
                        "sqlite3",
                        "tailwindcss",
                        "ts-node",
                        "typescript",
                        "vscode-oniguruma",
                        "webpack",
                        "websocket",
                        "zeromq"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverExternalPackages",
            "title": "next.config.js Options: serverExternalPackages | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "serverComponentsExternalPackages"
                },
                {
                    "type": "p",
                    "text": "Dependencies used insideServer ComponentsandRoute Handlerswill automatically be bundled by Next.js."
                },
                {
                    "type": "p",
                    "text": "If a dependency is using Node.js specific features, you can choose to opt-out specific dependencies from the Server Components bundling and use native Node.jsrequire."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{serverComponentsExternalPackages:['@acme/ui'],},}module.exports=nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js includes ashort list of popular packagesthat currently are working on compatibility and automatically opt-ed out:"
                },
                {
                    "type": "list",
                    "items": [
                        "@aws-sdk/client-s3",
                        "@aws-sdk/s3-presigned-post",
                        "@blockfrost/blockfrost-js",
                        "@highlight-run/node",
                        "@jpg-store/lucid-cardano",
                        "@libsql/client",
                        "@mikro-orm/core",
                        "@mikro-orm/knex",
                        "@prisma/client",
                        "@react-pdf/renderer",
                        "@sentry/profiling-node",
                        "@swc/core",
                        "argon2",
                        "autoprefixer",
                        "aws-crt",
                        "bcrypt",
                        "better-sqlite3",
                        "canvas",
                        "cpu-features",
                        "cypress",
                        "eslint",
                        "express",
                        "firebase-admin",
                        "jest",
                        "jsdom",
                        "libsql",
                        "mdx-bundler",
                        "mongodb",
                        "mongoose",
                        "next-mdx-remote",
                        "next-seo",
                        "node-pty",
                        "node-web-audio-api",
                        "pg",
                        "playwright",
                        "postcss",
                        "prettier",
                        "prisma",
                        "puppeteer-core",
                        "puppeteer",
                        "rimraf",
                        "sharp",
                        "shiki",
                        "sqlite3",
                        "tailwindcss",
                        "ts-node",
                        "typescript",
                        "vscode-oniguruma",
                        "webpack",
                        "websocket",
                        "zeromq"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/staleTimes",
            "title": "next.config.js Options: StaleTimes (experimental) | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "StaleTimes (experimental)"
                },
                {
                    "type": "p",
                    "text": "Warning: ThestaleTimesconfiguration is an experimental feature. This configuration strategy will likely change in the future."
                },
                {
                    "type": "p",
                    "text": "staleTimesis an experimental feature that allows configuring theinvalidation periodof the client router cache."
                },
                {
                    "type": "p",
                    "text": "This configuration option is available as of v14.2.0-canary.53."
                },
                {
                    "type": "p",
                    "text": "You can enable this experimental feature & provide custom revalidation times by setting the experimentalstaleTimesflag:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{staleTimes:{dynamic:30,static:180,},},}module.exports=nextConfig"
                },
                {
                    "type": "p",
                    "text": "Thestaticanddynamicproperties correspond with the time period (in seconds) based on different types oflink prefetching."
                },
                {
                    "type": "list",
                    "items": [
                        "Thedynamicproperty is used when the page is neither statically generated nor fully prefetched (i.e., with prefetch=).Default: 0 seconds (not cached)",
                        "Default: 0 seconds (not cached)",
                        "Thestaticproperty is used for statically generated pages, or when theprefetchprop onLinkis set totrue, or when callingrouter.prefetch.Default: 5 minutes",
                        "Default: 5 minutes"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Default: 0 seconds (not cached)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Default: 5 minutes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Loading boundariesare considered reusable for thestaticperiod defined in this configuration.",
                        "This doesn't affectpartial rendering,meaning shared layouts won't automatically be refetched on every navigation, only the page segment that changes.",
                        "This doesn't changeback/forward cachingbehavior to prevent layout shift and to prevent losing the browser scroll position."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can learn more about the Client Router Cachehere."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/trailingSlash",
            "title": "next.config.js Options: trailingSlash | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "trailingSlash"
                },
                {
                    "type": "p",
                    "text": "By default Next.js will redirect urls with trailing slashes to their counterpart without a trailing slash. For example/about/will redirect to/about. You can configure this behavior to act the opposite way, where urls without trailing slashes are redirected to their counterparts with trailing slashes."
                },
                {
                    "type": "p",
                    "text": "Opennext.config.jsand add thetrailingSlashconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={trailingSlash:true,}"
                },
                {
                    "type": "p",
                    "text": "With this option set, urls like/aboutwill redirect to/about/."
                },
                {
                    "type": "p",
                    "text": "When used withoutput: \"export\"configuration, the/aboutpage will output/about/index.html(instead of the default/about.html)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/transpilePackages",
            "title": "next.config.js Options: transpilePackages | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "transpilePackages"
                },
                {
                    "type": "p",
                    "text": "Next.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (node_modules). This replaces thenext-transpile-modulespackage."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={transpilePackages:['@acme/ui','lodash-es'],}module.exports=nextConfig"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/turbo",
            "title": "next.config.js Options: turbo | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "turbo (Experimental)"
                },
                {
                    "type": "p",
                    "text": "Turbopack can be customized to transform different files and change how modules are resolved."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "These features are experimental and will only work withnext --turbo.",
                        "Turbopack for Next.js does not require loaders nor loader configuration for built-in functionality. Turbopack has built-in support for css and compiling modern JavaScript, so there's no need forcss-loader,postcss-loader, orbabel-loaderif you're using@babel/preset-env."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "webpack loaders"
                },
                {
                    "type": "p",
                    "text": "If you need loader support beyond what's built in, many webpack loaders already work with Turbopack. There are currently some limitations:"
                },
                {
                    "type": "list",
                    "items": [
                        "Only a core subset of the webpack loader API is implemented. Currently, there is enough coverage for some popular loaders, and we'll expand our API support in the future.",
                        "Only loaders that return JavaScript code are supported. Loaders that transform files like stylesheets or images are not currently supported.",
                        "Options passed to webpack loaders must be plain JavaScript primitives, objects, and arrays. For example, it's not possible to passrequire()d plugin modules as option values."
                    ]
                },
                {
                    "type": "p",
                    "text": "To configure loaders, add the names of the loaders you've installed and any options innext.config.js, mapping file extensions to a list of loaders:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{turbo:{rules:{'*.svg':{loaders:['@svgr/webpack'],as:'*.js',},},},},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Prior to Next.js version 13.4.4,experimental.turbo.ruleswas namedexperimental.turbo.loadersand only accepted file extensions like.mdxinstead of*.mdx."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Supported loaders"
                },
                {
                    "type": "p",
                    "text": "The following loaders have been tested to work with Turbopack's webpack loader implementation:"
                },
                {
                    "type": "list",
                    "items": [
                        "babel-loader",
                        "@svgr/webpack",
                        "svg-inline-loader",
                        "yaml-loader",
                        "string-replace-loader",
                        "raw-loader",
                        "'sass-loader'"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Resolve aliases"
                },
                {
                    "type": "p",
                    "text": "Throughnext.config.js, Turbopack can be configured to modify module resolution through aliases, similar to webpack'sresolve.aliasconfiguration."
                },
                {
                    "type": "p",
                    "text": "To configure resolve aliases, map imported patterns to their new destination innext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{turbo:{resolveAlias:{underscore:'lodash',mocha:{ browser:'mocha/browser-entry.js'},},},},}"
                },
                {
                    "type": "p",
                    "text": "This aliases imports of theunderscorepackage to thelodashpackage. In other words,import underscore from 'underscore'will load thelodashmodule instead ofunderscore."
                },
                {
                    "type": "p",
                    "text": "Turbopack also supports conditional aliasing through this field, similar to Node.js'sconditional exports. At the moment only thebrowsercondition is supported. In the case above, imports of themochamodule will be aliased tomocha/browser-entry.jswhen Turbopack targets browser environments."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Resolve extensions"
                },
                {
                    "type": "p",
                    "text": "Throughnext.config.js, Turbopack can be configured to resolve modules with custom extensions, similar to webpack'sresolve.extensionsconfiguration."
                },
                {
                    "type": "p",
                    "text": "To configure resolve extensions, use theresolveExtensionsfield innext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{turbo:{resolveExtensions:['.mdx','.tsx','.ts','.jsx','.js','.mjs','.json',],},},}"
                },
                {
                    "type": "p",
                    "text": "This overwrites the original resolve extensions with the provided list. Make sure to include the default extensions."
                },
                {
                    "type": "p",
                    "text": "For more information and guidance for how to migrate your app to Turbopack from webpack, seeTurbopack's documentation on webpack compatibility."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/typedRoutes",
            "title": "next.config.js Options: typedRoutes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "typedRoutes (experimental)"
                },
                {
                    "type": "p",
                    "text": "Experimental support forstatically typed links. This feature requires using the App Router as well as TypeScript in your project."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{typedRoutes:true,},}module.exports=nextConfig"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/typescript",
            "title": "next.config.js Options: typescript | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "typescript"
                },
                {
                    "type": "p",
                    "text": "Next.js fails yourproduction build(next build) when TypeScript errors are present in your project."
                },
                {
                    "type": "p",
                    "text": "If you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step."
                },
                {
                    "type": "p",
                    "text": "If disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous."
                },
                {
                    "type": "p",
                    "text": "Opennext.config.jsand enable theignoreBuildErrorsoption in thetypescriptconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={typescript:{// !! WARN !!// Dangerously allow production builds to successfully complete even if// your project has type errors.// !! WARN !!ignoreBuildErrors:true,},}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/urlImports",
            "title": "next.config.js Options: urlImports | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "urlImports"
                },
                {
                    "type": "p",
                    "text": "URL imports are an experimental feature that allows you to import modules directly from external servers (instead of from the local disk)."
                },
                {
                    "type": "p",
                    "text": "Warning: This feature is experimental. Only use domains that you trust to download and execute on your machine. Please exercise\ndiscretion, and caution until the feature is flagged as stable."
                },
                {
                    "type": "p",
                    "text": "To opt-in, add the allowed URL prefixes insidenext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{urlImports:['https://example.com/assets/','https://cdn.skypack.dev'],},}"
                },
                {
                    "type": "p",
                    "text": "Then, you can import modules directly from URLs:"
                },
                {
                    "type": "code",
                    "code": "import{ a,b,c }from'https://example.com/assets/some/module.js'"
                },
                {
                    "type": "p",
                    "text": "URL Imports can be used everywhere normal package imports can be used."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Security Model"
                },
                {
                    "type": "p",
                    "text": "This feature is being designed withsecurity as the top priority. To start, we added an experimental flag forcing you to explicitly allow the domains you accept URL imports from. We're working to take this further by limiting URL imports to execute in the browser sandbox using theEdge Runtime."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Lockfile"
                },
                {
                    "type": "p",
                    "text": "When using URL imports, Next.js will create anext.lockdirectory containing a lockfile and fetched assets.\nThis directorymust be committed to Git, not ignored by.gitignore."
                },
                {
                    "type": "list",
                    "items": [
                        "When runningnext dev, Next.js will download and add all newly discovered URL Imports to your lockfile",
                        "When runningnext build, Next.js will use only the lockfile to build the application for production"
                    ]
                },
                {
                    "type": "p",
                    "text": "Typically, no network requests are needed and any outdated lockfile will cause the build to fail.\nOne exception is resources that respond withCache-Control: no-cache.\nThese resources will have ano-cacheentry in the lockfile and will always be fetched from the network on each build."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Skypack"
                },
                {
                    "type": "code",
                    "code": "importconfettifrom'https://cdn.skypack.dev/canvas-confetti'import{ useEffect }from'react'exportdefault()=>{useEffect(()=>{confetti()})return<p>Hello</p>}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static Image Imports"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'importlogofrom'https://example.com/assets/logo.png'exportdefault()=>(<div><Imagesrc={logo}placeholder=\"blur\"/></div>)"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "URLs in CSS"
                },
                {
                    "type": "code",
                    "code": ".className{background:url('https://example.com/assets/hero.jpg');}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Asset Imports"
                },
                {
                    "type": "code",
                    "code": "constlogo=newURL('https://example.com/assets/file.txt',import.meta.url)console.log(logo.pathname)// prints \"/_next/static/media/file.a9727b5d.txt\""
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/webVitalsAttribution",
            "title": "next.config.js Options: webVitalsAttribution | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "webVitalsAttribution"
                },
                {
                    "type": "p",
                    "text": "When debugging issues related to Web Vitals, it is often helpful if we can pinpoint the source of the problem.\nFor example, in the case of Cumulative Layout Shift (CLS), we might want to know the first element that shifted when the single largest layout shift occurred.\nOr, in the case of Largest Contentful Paint (LCP), we might want to identify the element corresponding to the LCP for the page.\nIf the LCP element is an image, knowing the URL of the image resource can help us locate the asset we need to optimize."
                },
                {
                    "type": "p",
                    "text": "Pinpointing the biggest contributor to the Web Vitals score, akaattribution,\nallows us to obtain more in-depth information like entries forPerformanceEventTiming,PerformanceNavigationTimingandPerformanceResourceTiming."
                },
                {
                    "type": "p",
                    "text": "Attribution is disabled by default in Next.js but can be enabledper metricby specifying the following innext.config.js."
                },
                {
                    "type": "code",
                    "code": "experimental:{webVitalsAttribution:['CLS','LCP']}"
                },
                {
                    "type": "p",
                    "text": "Valid attribution values are allweb-vitalsmetrics specified in theNextWebVitalsMetrictype."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/webpack",
            "title": "next.config.js Options: webpack | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Custom Webpack Config"
                },
                {
                    "type": "p",
                    "text": "Good to know: changes to webpack config are not covered by semver so proceed at your own risk"
                },
                {
                    "type": "p",
                    "text": "Before continuing to add custom webpack configuration to your application make sure Next.js doesn't already support your use-case:"
                },
                {
                    "type": "list",
                    "items": [
                        "CSS imports",
                        "CSS modules",
                        "Sass/SCSS imports",
                        "Sass/SCSS modules"
                    ]
                },
                {
                    "type": "p",
                    "text": "Some commonly asked for features are available as plugins:"
                },
                {
                    "type": "list",
                    "items": [
                        "@next/mdx",
                        "@next/bundle-analyzer"
                    ]
                },
                {
                    "type": "p",
                    "text": "In order to extend our usage ofwebpack, you can define a function that extends its config insidenext.config.js, like so:"
                },
                {
                    "type": "code",
                    "code": "module.exports={webpack:(config,{ buildId,dev,isServer,defaultLoaders,nextRuntime,webpack })=>{// Important: return the modified configreturnconfig},}"
                },
                {
                    "type": "p",
                    "text": "Thewebpackfunction is executed three times, twice for the server (nodejs / edge runtime) and once for the client. This allows you to distinguish between client and server configuration using theisServerproperty."
                },
                {
                    "type": "p",
                    "text": "The second argument to thewebpackfunction is an object with the following properties:"
                },
                {
                    "type": "list",
                    "items": [
                        "buildId:String- The build id, used as a unique identifier between builds",
                        "dev:Boolean- Indicates if the compilation will be done in development",
                        "isServer:Boolean- It'struefor server-side compilation, andfalsefor client-side compilation",
                        "nextRuntime:String | undefined- The target runtime for server-side compilation; either\"edge\"or\"nodejs\", it'sundefinedfor client-side compilation.",
                        "defaultLoaders:Object- Default loaders used internally by Next.js:babel:Object- Defaultbabel-loaderconfiguration",
                        "babel:Object- Defaultbabel-loaderconfiguration"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "babel:Object- Defaultbabel-loaderconfiguration"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example usage ofdefaultLoaders.babel:"
                },
                {
                    "type": "code",
                    "code": "// Example config for adding a loader that depends on babel-loader// This source was taken from the @next/mdx plugin source:// https://github.com/vercel/next.js/tree/canary/packages/next-mdxmodule.exports={webpack:(config,options)=>{config.module.rules.push({test:/\\.mdx/,use:[options.defaultLoaders.babel,{loader:'@mdx-js/loader',options:pluginOptions.options,},],})returnconfig},}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "nextRuntime"
                },
                {
                    "type": "p",
                    "text": "Notice thatisServeristruewhennextRuntimeis\"edge\"or\"nodejs\", nextRuntime \"edge\" is currently for middleware and Server Components in edge runtime only."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application",
            "title": "App Router: Building Your Application | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Building Your Application"
                },
                {
                    "type": "p",
                    "text": "Next.js provides the building blocks to create flexible, full-stack web applications. The guides inBuilding Your Applicationexplain how to use these features and how to customize your application's behavior."
                },
                {
                    "type": "p",
                    "text": "The sections and pages are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your Next.js application. However, you can read them in any order or skip to the pages that apply to your use case."
                },
                {
                    "type": "p",
                    "text": "If you're new to Next.js, we recommend starting with theRouting,Rendering,Data FetchingandStylingsections, as they introduce the fundamental Next.js and web concepts to help you get started. Then, you can dive deeper into the other sections such asOptimizingandConfiguring. Finally, once you're ready, checkout theDeployingandUpgradingsections."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Routing"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Data Fetching"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Rendering"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caching"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Styling"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Optimizing"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Configuring"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Testing"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Authentication"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Deploying"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Upgrading"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring",
            "title": "Building Your Application: Configuring | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Configuring"
                },
                {
                    "type": "p",
                    "text": "Next.js allows you to customize your project to meet specific requirements. This includes integrations with TypeScript, ESlint, and more, as well as internal configuration options such as Absolute Imports and Environment Variables."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "TypeScript"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "ESLint"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Environment Variables"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Absolute Imports and Module Path Aliases"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "MDX"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "src Directory"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Draft Mode"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Content Security Policy"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Progressive Web Applications (PWA)"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/absolute-imports-and-module-aliases",
            "title": "Configuring: Absolute Imports and Module Path Aliases | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Absolute Imports and Module Path Aliases"
                },
                {
                    "type": "list",
                    "items": [
                        "Absolute Imports and Aliases"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js has in-built support for the\"paths\"and\"baseUrl\"options oftsconfig.jsonandjsconfig.jsonfiles."
                },
                {
                    "type": "p",
                    "text": "These options allow you to alias project directories to absolute paths, making it easier to import modules. For example:"
                },
                {
                    "type": "code",
                    "code": "// beforeimport{ Button }from'../../../components/button'// afterimport{ Button }from'@/components/button'"
                },
                {
                    "type": "p",
                    "text": "Good to know:create-next-appwill prompt to configure these options for you."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Absolute Imports"
                },
                {
                    "type": "p",
                    "text": "ThebaseUrlconfiguration option allows you to import directly from the root of the project."
                },
                {
                    "type": "p",
                    "text": "An example of this configuration:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\":{\"baseUrl\":\".\"}}"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionButton() {return<button>Click me</button>}"
                },
                {
                    "type": "code",
                    "code": "importButtonfrom'components/button'exportdefaultfunctionHomePage() {return(<><h1>Hello World</h1><Button/></>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Module Aliases"
                },
                {
                    "type": "p",
                    "text": "In addition to configuring thebaseUrlpath, you can use the\"paths\"option to \"alias\" module paths."
                },
                {
                    "type": "p",
                    "text": "For example, the following configuration maps@/components/*tocomponents/*:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\":{\"baseUrl\":\".\",\"paths\":{\"@/components/*\":[\"components/*\"]}}}"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionButton() {return<button>Click me</button>}"
                },
                {
                    "type": "code",
                    "code": "importButtonfrom'@/components/button'exportdefaultfunctionHomePage() {return(<><h1>Hello World</h1><Button/></>)}"
                },
                {
                    "type": "p",
                    "text": "Each of the\"paths\"are relative to thebaseUrllocation. For example:"
                },
                {
                    "type": "code",
                    "code": "// tsconfig.json or jsconfig.json{\"compilerOptions\":{\"baseUrl\":\"src/\",\"paths\":{\"@/styles/*\":[\"styles/*\"],\"@/components/*\":[\"components/*\"]}}}"
                },
                {
                    "type": "code",
                    "code": "// pages/index.jsimportButtonfrom'@/components/button'import'@/styles/styles.css'importHelperfrom'utils/helper'exportdefaultfunctionHomePage() {return(<Helper><h1>Hello World</h1><Button/></Helper>)}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/content-security-policy",
            "title": "Configuring: Content Security Policy | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Content Security Policy"
                },
                {
                    "type": "p",
                    "text": "Content Security Policy (CSP)is important to guard your Next.js application against various security threats such as cross-site scripting (XSS), clickjacking, and other code injection attacks."
                },
                {
                    "type": "p",
                    "text": "By using CSP, developers can specify which origins are permissible for content sources, scripts, stylesheets, images, fonts, objects, media (audio, video), iframes, and more."
                },
                {
                    "type": "list",
                    "items": [
                        "Strict CSP"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Nonces"
                },
                {
                    "type": "p",
                    "text": "Anonceis a unique, random string of characters created for a one-time use. It is used in conjunction with CSP to selectively allow certain inline scripts or styles to execute, bypassing strict CSP directives."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Why use a nonce?"
                },
                {
                    "type": "p",
                    "text": "Even though CSPs are designed to block malicious scripts, there are legitimate scenarios where inline scripts are necessary. In such cases, nonces offer a way to allow these scripts to execute if they have the correct nonce."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding a nonce with Middleware"
                },
                {
                    "type": "p",
                    "text": "Middlewareenables you to add headers and generate nonces before the page renders."
                },
                {
                    "type": "p",
                    "text": "Every time a page is viewed, a fresh nonce should be generated. This means that youmust use dynamic rendering to add nonces."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "import{ NextRequest,NextResponse }from'next/server'exportfunctionmiddleware(request:NextRequest) {constnonce=Buffer.from(crypto.randomUUID()).toString('base64')constcspHeader=`default-src 'self';script-src 'self' 'nonce-${nonce}' 'strict-dynamic';style-src 'self' 'nonce-${nonce}';img-src 'self' blob: data:;font-src 'self';object-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'none';upgrade-insecure-requests;`// Replace newline characters and spacesconstcontentSecurityPolicyHeaderValue=cspHeader.replace(/\\s{2,}/g,' ').trim()constrequestHeaders=newHeaders(request.headers)requestHeaders.set('x-nonce',nonce)requestHeaders.set('Content-Security-Policy',contentSecurityPolicyHeaderValue)constresponse=NextResponse.next({request:{headers:requestHeaders,},})response.headers.set('Content-Security-Policy',contentSecurityPolicyHeaderValue)returnresponse}"
                },
                {
                    "type": "p",
                    "text": "By default, Middleware runs on all requests. You can filter Middleware to run on specific paths using amatcher."
                },
                {
                    "type": "p",
                    "text": "We recommend ignoring matching prefetches (fromnext/link) and static assets that don't need the CSP header."
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={matcher:[/** Match all request paths except for the ones starting with:* - api (API routes)* - _next/static (static files)* - _next/image (image optimization files)* - favicon.ico (favicon file)*/{source:'/((?!api|_next/static|_next/image|favicon.ico).*)',missing:[{ type:'header',key:'next-router-prefetch'},{ type:'header',key:'purpose',value:'prefetch'},],},],}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reading the nonce"
                },
                {
                    "type": "p",
                    "text": "You can now read the nonce from aServer Componentusingheaders:"
                },
                {
                    "type": "code",
                    "code": "import{ headers }from'next/headers'importScriptfrom'next/script'exportdefaultfunctionPage() {constnonce=headers().get('x-nonce')return(<Scriptsrc=\"https://www.googletagmanager.com/gtag/js\"strategy=\"afterInteractive\"nonce={nonce}/>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Without Nonces"
                },
                {
                    "type": "p",
                    "text": "For applications that do not require nonces, you can set the CSP header directly in yournext.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "constcspHeader=`default-src 'self';script-src 'self' 'unsafe-eval' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' blob: data:;font-src 'self';object-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'none';upgrade-insecure-requests;`module.exports={asyncheaders() {return[{source:'/(.*)',headers:[{key:'Content-Security-Policy',value:cspHeader.replace(/\\n/g,''),},],},]},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "We recommend usingv13.4.20+of Next.js to properly handle and apply nonces."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Middleware"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "headers"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode",
            "title": "Configuring: Draft Mode | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Draft Mode"
                },
                {
                    "type": "p",
                    "text": "Static rendering is useful when your pages fetch data from a headless CMS. However, it’s not ideal when you’re writing a draft on your headless CMS and want to view the draft immediately on your page. You’d want Next.js to render these pages atrequest timeinstead of build time and fetch the draft content instead of the published content. You’d want Next.js to switch todynamic renderingonly for this specific case."
                },
                {
                    "type": "p",
                    "text": "Next.js has a feature calledDraft Modewhich solves this problem. Here are instructions on how to use it."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Step 1: Create and access the Route Handler"
                },
                {
                    "type": "p",
                    "text": "First, create aRoute Handler. It can have any name - e.g.app/api/draft/route.ts"
                },
                {
                    "type": "p",
                    "text": "Then, importdraftModefromnext/headersand call theenable()method."
                },
                {
                    "type": "code",
                    "code": "// route handler enabling draft modeimport{ draftMode }from'next/headers'exportasyncfunctionGET(request:Request) {draftMode().enable()returnnewResponse('Draft mode is enabled')}"
                },
                {
                    "type": "p",
                    "text": "This will set acookieto enable draft mode. Subsequent requests containing this cookie will triggerDraft Modechanging the behavior for statically generated pages (more on this later)."
                },
                {
                    "type": "p",
                    "text": "You can test this manually by visiting/api/draftand looking at your browser’s developer tools. Notice theSet-Cookieresponse header with a cookie named__prerender_bypass."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Securely accessing it from your Headless CMS"
                },
                {
                    "type": "p",
                    "text": "In practice, you’d want to call this Route Handlersecurelyfrom your headless CMS. The specific steps will vary depending on which headless CMS you’re using, but here are some common steps you could take."
                },
                {
                    "type": "p",
                    "text": "These steps assume that the headless CMS you’re using supports settingcustom draft URLs. If it doesn’t, you can still use this method to secure your draft URLs, but you’ll need to construct and access the draft URL manually."
                },
                {
                    "type": "p",
                    "text": "First, you should create asecret token stringusing a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS. This secret prevents people who don’t have access to your CMS from accessing draft URLs."
                },
                {
                    "type": "p",
                    "text": "Second, if your headless CMS supports setting custom draft URLs, specify the following as the draft URL. This assumes that your Route Handler is located atapp/api/draft/route.ts"
                },
                {
                    "type": "code",
                    "code": "https://<your-site>/api/draft?secret=<token>&slug=<path>"
                },
                {
                    "type": "list",
                    "items": [
                        "<your-site>should be your deployment domain.",
                        "<token>should be replaced with the secret token you generated.",
                        "<path>should be the path for the page that you want to view. If you want to view/posts/foo, then you should use&slug=/posts/foo."
                    ]
                },
                {
                    "type": "p",
                    "text": "Your headless CMS might allow you to include a variable in the draft URL so that<path>can be set dynamically based on the CMS’s data like so:&slug=/posts/{entry.fields.slug}"
                },
                {
                    "type": "p",
                    "text": "Finally, in the Route Handler:"
                },
                {
                    "type": "list",
                    "items": [
                        "Check that the secret matches and that theslugparameter exists (if not, the request should fail).",
                        "CalldraftMode.enable()to set the cookie.",
                        "Then redirect the browser to the path specified byslug."
                    ]
                },
                {
                    "type": "code",
                    "code": "// route handler with secret and slugimport{ draftMode }from'next/headers'import{ redirect }from'next/navigation'exportasyncfunctionGET(request:Request) {// Parse query string parametersconst{searchParams}=newURL(request.url)constsecret=searchParams.get('secret')constslug=searchParams.get('slug')// Check the secret and next parameters// This secret should only be known to this route handler and the CMSif(secret!=='MY_SECRET_TOKEN'||!slug) {returnnewResponse('Invalid token',{ status:401})}// Fetch the headless CMS to check if the provided `slug` exists// getPostBySlug would implement the required fetching logic to the headless CMSconstpost=awaitgetPostBySlug(slug)// If the slug doesn't exist prevent draft mode from being enabledif(!post) {returnnewResponse('Invalid slug',{ status:401})}// Enable Draft Mode by setting the cookiedraftMode().enable()// Redirect to the path from the fetched post// We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilitiesredirect(post.slug)}"
                },
                {
                    "type": "p",
                    "text": "If it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Step 2: Update page"
                },
                {
                    "type": "p",
                    "text": "The next step is to update your page to check the value ofdraftMode().isEnabled."
                },
                {
                    "type": "p",
                    "text": "If you request a page which has the cookie set, then data will be fetched atrequest time(instead of at build time)."
                },
                {
                    "type": "p",
                    "text": "Furthermore, the value ofisEnabledwill betrue."
                },
                {
                    "type": "code",
                    "code": "// page that fetches dataimport{ draftMode }from'next/headers'asyncfunctiongetData() {const{isEnabled}=draftMode()consturl=isEnabled?'https://draft.example.com':'https://production.example.com'constres=awaitfetch(url)returnres.json()}exportdefaultasyncfunctionPage() {const{title,desc}=awaitgetData()return(<main><h1>{title}</h1><p>{desc}</p></main>)}"
                },
                {
                    "type": "p",
                    "text": "That's it! If you access the draft Route Handler (withsecretandslug) from your headless CMS or manually, you should now be able to see the draft content. And if you update your draft without publishing, you should be able to view the draft."
                },
                {
                    "type": "p",
                    "text": "Set this as the draft URL on your headless CMS or access manually, and you should be able to see the draft."
                },
                {
                    "type": "code",
                    "code": "https://<your-site>/api/draft?secret=<token>&slug=<path>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "More Details"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Clear the Draft Mode cookie"
                },
                {
                    "type": "p",
                    "text": "By default, the Draft Mode session ends when the browser is closed."
                },
                {
                    "type": "p",
                    "text": "To clear the Draft Mode cookie manually, create a Route Handler that callsdraftMode().disable():"
                },
                {
                    "type": "code",
                    "code": "import{ draftMode }from'next/headers'exportasyncfunctionGET(request:Request) {draftMode().disable()returnnewResponse('Draft mode is disabled')}"
                },
                {
                    "type": "p",
                    "text": "Then, send a request to/api/disable-draftto invoke the Route Handler. If calling this route usingnext/link, you must passprefetch={false}to prevent accidentally deleting the cookie on prefetch."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Unique pernext build"
                },
                {
                    "type": "p",
                    "text": "A new bypass cookie value will be generated each time you runnext build."
                },
                {
                    "type": "p",
                    "text": "This ensures that the bypass cookie can’t be guessed."
                },
                {
                    "type": "p",
                    "text": "Good to know: To test Draft Mode locally over HTTP, your browser will need to allow third-party cookies and local storage access."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/environment-variables",
            "title": "Configuring: Environment Variables | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Environment Variables"
                },
                {
                    "type": "list",
                    "items": [
                        "Environment Variables"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js comes with built-in support for environment variables, which allows you to do the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use.env.localto load environment variables",
                        "Bundle environment variables for the browser by prefixing withNEXT_PUBLIC_"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Loading Environment Variables"
                },
                {
                    "type": "p",
                    "text": "Next.js has built-in support for loading environment variables from.env.localintoprocess.env."
                },
                {
                    "type": "code",
                    "code": "DB_HOST=localhostDB_USER=myuserDB_PASS=mypassword"
                },
                {
                    "type": "p",
                    "text": "Note: Next.js also supports multiline variables inside of your.env*files:"
                },
                {
                    "type": "code",
                    "code": "# .env.local# you can write with line breaksPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----...Kh9NV......-----END DSA PRIVATE KEY-----\"# or with `\\n` inside double quotesPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\\nKh9NV...\\n-----END DSA PRIVATE KEY-----\\n\""
                },
                {
                    "type": "p",
                    "text": "Note: If you are using a/srcfolder, please note that Next.js will load the .env filesonlyfrom the parent folder andnotfrom the/srcfolder.\nThis loadsprocess.env.DB_HOST,process.env.DB_USER, andprocess.env.DB_PASSinto the Node.js environment automatically allowing you to use them inRoute Handlers."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET() {constdb=awaitmyDB.connect({host:process.env.DB_HOST,username:process.env.DB_USER,password:process.env.DB_PASS,})// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Referencing Other Variables"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically expand variables that use$to reference other variables e.g.$VARIABLEinside of your.env*files. This allows you to reference other secrets. For example:"
                },
                {
                    "type": "code",
                    "code": "TWITTER_USER=nextjsTWITTER_URL=https://twitter.com/$TWITTER_USER"
                },
                {
                    "type": "p",
                    "text": "In the above example,process.env.TWITTER_URLwould be set tohttps://twitter.com/nextjs."
                },
                {
                    "type": "p",
                    "text": "Good to know: If you need to use variable with a$in the actual value, it needs to be escaped e.g.\\$."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Bundling Environment Variables for the Browser"
                },
                {
                    "type": "p",
                    "text": "Non-NEXT_PUBLIC_environment variables are only available in the Node.js environment, meaning they aren't accessible to the browser (the client runs in a differentenvironment)."
                },
                {
                    "type": "p",
                    "text": "In order to make the value of an environment variable accessible in the browser, Next.js can \"inline\" a value, at build time, into the js bundle that is delivered to the client, replacing all references toprocess.env.[variable]with a hard-coded value. To tell it to do this, you just have to prefix the variable withNEXT_PUBLIC_. For example:"
                },
                {
                    "type": "code",
                    "code": "NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk"
                },
                {
                    "type": "p",
                    "text": "This will tell Next.js to replace all references toprocess.env.NEXT_PUBLIC_ANALYTICS_IDin the Node.js environment with the value from the environment in which you runnext build, allowing you to use it anywhere in your code. It will be inlined into any JavaScript sent to the browser."
                },
                {
                    "type": "p",
                    "text": "Note: After being built, your app will no longer respond to changes to these environment variables. For instance, if you use a Heroku pipeline to promote slugs built in one environment to another environment, or if you build and deploy a single Docker image to multiple environments, allNEXT_PUBLIC_variables will be frozen with the value evaluated at build time, so these values need to be set appropriately when the project is built. If you need access to runtime environment values, you'll have to setup your own API to provide them to the client (either on demand or during initialization)."
                },
                {
                    "type": "code",
                    "code": "importsetupAnalyticsServicefrom'../lib/my-analytics-service'// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.setupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)functionHomePage() {return<h1>Hello World</h1>}exportdefaultHomePage"
                },
                {
                    "type": "p",
                    "text": "Note that dynamic lookups willnotbe inlined, such as:"
                },
                {
                    "type": "code",
                    "code": "// This will NOT be inlined, because it uses a variableconstvarName='NEXT_PUBLIC_ANALYTICS_ID'setupAnalyticsService(process.env[varName])// This will NOT be inlined, because it uses a variableconstenv=process.envsetupAnalyticsService(env.NEXT_PUBLIC_ANALYTICS_ID)"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Runtime Environment Variables"
                },
                {
                    "type": "p",
                    "text": "Next.js can support both build time and runtime environment variables."
                },
                {
                    "type": "p",
                    "text": "By default, environment variables are only available on the server. To expose an environment variable to the browser, it must be prefixed withNEXT_PUBLIC_. However, these public environment variables will be inlined into the JavaScript bundle duringnext build."
                },
                {
                    "type": "p",
                    "text": "To read runtime environment variables, we recommend usinggetServerSidePropsorincrementally adopting the App Router. With the App Router, we can safely read environment variables on the server during dynamic rendering. This allows you to use a singular Docker image that can be promoted through multiple environments with different values."
                },
                {
                    "type": "code",
                    "code": "import{ unstable_noStoreasnoStore }from'next/cache'exportdefaultfunctionComponent() {noStore()// cookies(), headers(), and other dynamic functions// will also opt into dynamic rendering, meaning// this env variable is evaluated at runtimeconstvalue=process.env.MY_VALUE// ...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "You can run code on server startup using theregisterfunction.",
                        "We do not recommend using theruntimeConfigoption, as this does not work with the standalone output mode. Instead, we recommendincrementally adoptingthe App Router."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Default Environment Variables"
                },
                {
                    "type": "p",
                    "text": "In general only one.env.localfile is needed. However, sometimes you might want to add some defaults for thedevelopment(next dev) orproduction(next start) environment."
                },
                {
                    "type": "p",
                    "text": "Next.js allows you to set defaults in.env(all environments),.env.development(development environment), and.env.production(production environment)."
                },
                {
                    "type": "p",
                    "text": ".env.localalways overrides the defaults set."
                },
                {
                    "type": "p",
                    "text": "Good to know:.env,.env.development, and.env.productionfiles should be included in your repository as they define defaults..env*.localshould be added to.gitignore, as those files are intended to be ignored..env.localis where secrets can be stored."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Environment Variables on Vercel"
                },
                {
                    "type": "p",
                    "text": "When deploying your Next.js application toVercel, Environment Variables can be configuredin the Project Settings."
                },
                {
                    "type": "p",
                    "text": "All types of Environment Variables should be configured there. Even Environment Variables used in Development – which can bedownloaded onto your local deviceafterwards."
                },
                {
                    "type": "p",
                    "text": "If you've configuredDevelopment Environment Variablesyou can pull them into a.env.localfor usage on your local machine using the following command:"
                },
                {
                    "type": "code",
                    "code": "vercelenvpull.env.local"
                },
                {
                    "type": "p",
                    "text": "Good to know: When deploying your Next.js application toVercel, your environment variables in.env*files will not be made available to Edge Runtime, unless their name are prefixed withNEXT_PUBLIC_. We strongly recommend managing your environment variables inProject Settingsinstead, from where all environment variables are available."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Test Environment Variables"
                },
                {
                    "type": "p",
                    "text": "Apart fromdevelopmentandproductionenvironments, there is a 3rd option available:test. In the same way you can set defaults for development or production environments, you can do the same with a.env.testfile for thetestingenvironment (though this one is not as common as the previous two). Next.js will not load environment variables from.env.developmentor.env.productionin thetestingenvironment."
                },
                {
                    "type": "p",
                    "text": "This one is useful when running tests with tools likejestorcypresswhere you need to set specific environment vars only for testing purposes. Test default values will be loaded ifNODE_ENVis set totest, though you usually don't need to do this manually as testing tools will address it for you."
                },
                {
                    "type": "p",
                    "text": "There is a small difference betweentestenvironment, and bothdevelopmentandproductionthat you need to bear in mind:.env.localwon't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use the same env defaults across different executions by ignoring your.env.local(which is intended to override the default set)."
                },
                {
                    "type": "p",
                    "text": "Good to know: similar to Default Environment Variables,.env.testfile should be included in your repository, but.env.test.localshouldn't, as.env*.localare intended to be ignored through.gitignore."
                },
                {
                    "type": "p",
                    "text": "While running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging theloadEnvConfigfunction from the@next/envpackage."
                },
                {
                    "type": "code",
                    "code": "// The below can be used in a Jest global setup file or similar for your testing set-upimport{ loadEnvConfig }from'@next/env'exportdefaultasync()=>{constprojectDir=process.cwd()loadEnvConfig(projectDir)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Environment Variable Load Order"
                },
                {
                    "type": "p",
                    "text": "Environment variables are looked up in the following places, in order, stopping once the variable is found."
                },
                {
                    "type": "list",
                    "items": [
                        "process.env",
                        ".env.$(NODE_ENV).local",
                        ".env.local(Not checked whenNODE_ENVistest.)",
                        ".env.$(NODE_ENV)",
                        ".env"
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, ifNODE_ENVisdevelopmentand you define a variable in both.env.development.localand.env, the value in.env.development.localwill be used."
                },
                {
                    "type": "p",
                    "text": "Good to know: The allowed values forNODE_ENVareproduction,developmentandtest."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "If you are using a/srcdirectory,.env.*files should remain in the root of your project.",
                        "If the environment variableNODE_ENVis unassigned, Next.js automatically assignsdevelopmentwhen running thenext devcommand, orproductionfor all other commands."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/eslint",
            "title": "Configuring: ESLint | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "ESLint"
                },
                {
                    "type": "p",
                    "text": "Next.js provides an integratedESLintexperience out of the box. Addnext lintas a script topackage.json:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"lint\":\"next lint\"}}"
                },
                {
                    "type": "p",
                    "text": "Then runnpm run lintoryarn lint:"
                },
                {
                    "type": "code",
                    "code": "yarnlint"
                },
                {
                    "type": "p",
                    "text": "If you don't already have ESLint configured in your application, you will be guided through the installation and configuration process."
                },
                {
                    "type": "code",
                    "code": "yarnlint"
                },
                {
                    "type": "p",
                    "text": "You'll see a prompt like this:"
                },
                {
                    "type": "p",
                    "text": "? How would you like to configure ESLint?"
                },
                {
                    "type": "p",
                    "text": "❯ Strict (recommended)BaseCancel"
                },
                {
                    "type": "p",
                    "text": "One of the following three options can be selected:"
                },
                {
                    "type": "list",
                    "items": [
                        "Strict: Includes Next.js' base ESLint configuration along with a stricterCore Web Vitals rule-set. This is the recommended configuration for developers setting up ESLint for the first time..eslintrc.json{\"extends\":\"next/core-web-vitals\"}",
                        "Base: Includes Next.js' base ESLint configuration..eslintrc.json{\"extends\":\"next\"}",
                        "Cancel: Does not include any ESLint configuration. Only select this option if you plan on setting up your own custom ESLint configuration."
                    ]
                },
                {
                    "type": "p",
                    "text": "Strict: Includes Next.js' base ESLint configuration along with a stricterCore Web Vitals rule-set. This is the recommended configuration for developers setting up ESLint for the first time."
                },
                {
                    "type": "code",
                    "code": "{\"extends\":\"next/core-web-vitals\"}"
                },
                {
                    "type": "p",
                    "text": "Base: Includes Next.js' base ESLint configuration."
                },
                {
                    "type": "code",
                    "code": "{\"extends\":\"next\"}"
                },
                {
                    "type": "p",
                    "text": "Cancel: Does not include any ESLint configuration. Only select this option if you plan on setting up your own custom ESLint configuration."
                },
                {
                    "type": "p",
                    "text": "If either of the two configuration options are selected, Next.js will automatically installeslintandeslint-config-nextas dependencies in your application and create an.eslintrc.jsonfile in the root of your project that includes your selected configuration."
                },
                {
                    "type": "p",
                    "text": "You can now runnext lintevery time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically run during every build (next build). Errors will fail the build, while warnings will not."
                },
                {
                    "type": "p",
                    "text": "If you do not want ESLint to run duringnext build, refer to the documentation forIgnoring ESLint."
                },
                {
                    "type": "p",
                    "text": "We recommend using an appropriateintegrationto view warnings and errors directly in your code editor during development."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ESLint Config"
                },
                {
                    "type": "p",
                    "text": "The default configuration (eslint-config-next) includes everything you need to have an optimal out-of-the-box linting experience in Next.js. If you do not have ESLint already configured in your application, we recommend usingnext lintto set up ESLint along with this configuration."
                },
                {
                    "type": "p",
                    "text": "If you would like to useeslint-config-nextalong with other ESLint configurations, refer to theAdditional Configurationssection to learn how to do so without causing any conflicts."
                },
                {
                    "type": "p",
                    "text": "Recommended rule-sets from the following ESLint plugins are all used withineslint-config-next:"
                },
                {
                    "type": "list",
                    "items": [
                        "eslint-plugin-react",
                        "eslint-plugin-react-hooks",
                        "eslint-plugin-next"
                    ]
                },
                {
                    "type": "p",
                    "text": "This will take precedence over the configuration fromnext.config.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ESLint Plugin"
                },
                {
                    "type": "p",
                    "text": "Next.js provides an ESLint plugin,eslint-plugin-next, already bundled within the base configuration that makes it possible to catch common issues and problems in a Next.js application. The full set of rules is as follows:"
                },
                {
                    "type": "p",
                    "text": "Enabled in the recommended configuration"
                },
                {
                    "type": "p",
                    "text": "If you already have ESLint configured in your application, we recommend extending from this plugin directly instead of includingeslint-config-nextunless a few conditions are met. Refer to theRecommended Plugin Rulesetto learn more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Settings"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "rootDir"
                },
                {
                    "type": "p",
                    "text": "If you're usingeslint-plugin-nextin a project where Next.js isn't installed in your root directory (such as a monorepo), you can telleslint-plugin-nextwhere to find your Next.js application using thesettingsproperty in your.eslintrc:"
                },
                {
                    "type": "code",
                    "code": "{\"extends\":\"next\",\"settings\":{\"next\":{\"rootDir\":\"packages/my-app/\"}}}"
                },
                {
                    "type": "p",
                    "text": "rootDircan be a path (relative or absolute), a glob (i.e.\"packages/*/\"), or an array of paths and/or globs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Linting Custom Directories and Files"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js will run ESLint for all files in thepages/,app/,components/,lib/, andsrc/directories. However, you can specify which directories using thedirsoption in theeslintconfig innext.config.jsfor production builds:"
                },
                {
                    "type": "code",
                    "code": "module.exports={eslint:{dirs:['pages','utils'],// Only run ESLint on the 'pages' and 'utils' directories during production builds (next build)},}"
                },
                {
                    "type": "p",
                    "text": "Similarly, the--dirand--fileflags can be used fornext lintto lint specific directories and files:"
                },
                {
                    "type": "code",
                    "code": "nextlint--dirpages--dirutils--filebar.js"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Caching"
                },
                {
                    "type": "p",
                    "text": "To improve performance, information of files processed by ESLint are cached by default. This is stored in.next/cacheor in your definedbuild directory. If you include any ESLint rules that depend on more than the contents of a single source file and need to disable the cache, use the--no-cacheflag withnext lint."
                },
                {
                    "type": "code",
                    "code": "nextlint--no-cache"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Disabling Rules"
                },
                {
                    "type": "p",
                    "text": "If you would like to modify or disable any rules provided by the supported plugins (react,react-hooks,next), you can directly change them using therulesproperty in your.eslintrc:"
                },
                {
                    "type": "code",
                    "code": "{\"extends\":\"next\",\"rules\":{\"react/no-unescaped-entities\":\"off\",\"@next/next/no-page-custom-font\":\"off\"}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Core Web Vitals"
                },
                {
                    "type": "p",
                    "text": "Thenext/core-web-vitalsrule set is enabled whennext lintis run for the first time and thestrictoption is selected."
                },
                {
                    "type": "code",
                    "code": "{\"extends\":\"next/core-web-vitals\"}"
                },
                {
                    "type": "p",
                    "text": "next/core-web-vitalsupdateseslint-plugin-nextto error on a number of rules that are warnings by default if they affectCore Web Vitals."
                },
                {
                    "type": "p",
                    "text": "Thenext/core-web-vitalsentry point is automatically included for new applications built withCreate Next App."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "TypeScript"
                },
                {
                    "type": "p",
                    "text": "In addition to the Next.js ESLint rules,create-next-app --typescriptwill also add TypeScript-specific lint rules withnext/typescriptto your config:"
                },
                {
                    "type": "code",
                    "code": "{\"extends\":[\"next/core-web-vitals\",\"next/typescript\"]}"
                },
                {
                    "type": "p",
                    "text": "Those rules are based onplugin:@typescript-eslint/recommended.\nSeetypescript-eslint > Configsfor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage With Other Tools"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Prettier"
                },
                {
                    "type": "p",
                    "text": "ESLint also contains code formatting rules, which can conflict with your existingPrettiersetup. We recommend includingeslint-config-prettierin your ESLint config to make ESLint and Prettier work together."
                },
                {
                    "type": "p",
                    "text": "First, install the dependency:"
                },
                {
                    "type": "code",
                    "code": "npminstall--save-deveslint-config-prettieryarnadd--deveslint-config-prettierpnpmadd--save-deveslint-config-prettierbunadd--deveslint-config-prettier"
                },
                {
                    "type": "p",
                    "text": "Then, addprettierto your existing ESLint config:"
                },
                {
                    "type": "code",
                    "code": "{\"extends\":[\"next\",\"prettier\"]}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "lint-staged"
                },
                {
                    "type": "p",
                    "text": "If you would like to usenext lintwithlint-stagedto run the linter on staged git files, you'll have to add the following to the.lintstagedrc.jsfile in the root of your project in order to specify usage of the--fileflag."
                },
                {
                    "type": "code",
                    "code": "constpath=require('path')constbuildEslintCommand=(filenames)=>`next lint --fix --file${filenames.map((f)=>path.relative(process.cwd(),f)).join(' --file ')}`module.exports={'*.{js,jsx,ts,tsx}':[buildEslintCommand],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Migrating Existing Config"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Recommended Plugin Ruleset"
                },
                {
                    "type": "p",
                    "text": "If you already have ESLint configured in your application and any of the following conditions are true:"
                },
                {
                    "type": "list",
                    "items": [
                        "You have one or more of the following plugins already installed (either separately or through a different config such asairbnborreact-app):reactreact-hooksjsx-a11yimport",
                        "react",
                        "react-hooks",
                        "jsx-a11y",
                        "import",
                        "You've defined specificparserOptionsthat are different from how Babel is configured within Next.js (this is not recommended unless you havecustomized your Babel configuration)",
                        "You haveeslint-plugin-importinstalled with Node.js and/or TypeScriptresolversdefined to handle imports"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "react",
                        "react-hooks",
                        "jsx-a11y",
                        "import"
                    ]
                },
                {
                    "type": "p",
                    "text": "Then we recommend either removing these settings if you prefer how these properties have been configured withineslint-config-nextor extending directly from the Next.js ESLint plugin instead:"
                },
                {
                    "type": "code",
                    "code": "module.exports={extends:[//...'plugin:@next/next/recommended',],}"
                },
                {
                    "type": "p",
                    "text": "The plugin can be installed normally in your project without needing to runnext lint:"
                },
                {
                    "type": "code",
                    "code": "npminstall--save-dev@next/eslint-plugin-nextyarnadd--dev@next/eslint-plugin-nextpnpmadd--save-dev@next/eslint-plugin-nextbunadd--dev@next/eslint-plugin-next"
                },
                {
                    "type": "p",
                    "text": "This eliminates the risk of collisions or errors that can occur due to importing the same plugin or parser across multiple configurations."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Additional Configurations"
                },
                {
                    "type": "p",
                    "text": "If you already use a separate ESLint configuration and want to includeeslint-config-next, ensure that it is extended last after other configurations. For example:"
                },
                {
                    "type": "code",
                    "code": "{\"extends\":[\"eslint:recommended\",\"next\"]}"
                },
                {
                    "type": "p",
                    "text": "Thenextconfiguration already handles setting default values for theparser,pluginsandsettingsproperties. There is no need to manually re-declare any of these properties unless you need a different configuration for your use case."
                },
                {
                    "type": "p",
                    "text": "If you include any other shareable configurations,you will need to make sure that these properties are not overwritten or modified. Otherwise, we recommend removing any configurations that share behavior with thenextconfiguration or extending directly from the Next.js ESLint plugin as mentioned above."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx",
            "title": "Configuring: MDX | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Markdown and MDX"
                },
                {
                    "type": "p",
                    "text": "Markdownis a lightweight markup language used to format text. It allows you to write using plain text syntax and convert it to structurally valid HTML. It's commonly used for writing content on websites and blogs."
                },
                {
                    "type": "p",
                    "text": "You write..."
                },
                {
                    "type": "code",
                    "code": "I**love**using[Next.js](https://nextjs.org/)"
                },
                {
                    "type": "p",
                    "text": "Output:"
                },
                {
                    "type": "code",
                    "code": "<p>I <strong>love</strong> using <ahref=\"https://nextjs.org/\">Next.js</a></p>"
                },
                {
                    "type": "p",
                    "text": "MDXis a superset of markdown that lets you writeJSXdirectly in your markdown files. It is a powerful way to add dynamic interactivity and embed React components within your content."
                },
                {
                    "type": "p",
                    "text": "Next.js can support both local MDX content inside your application, as well as remote MDX files fetched dynamically on the server. The Next.js plugin handles transforming markdown and React components into HTML, including support for usage in Server Components (the default in App Router)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "@next/mdx"
                },
                {
                    "type": "p",
                    "text": "The@next/mdxpackage is used to configure Next.js so it can process markdown and MDX.It sources data from local files, allowing you to create pages with a.mdxextension, directly in your/pagesor/appdirectory."
                },
                {
                    "type": "p",
                    "text": "Let's walk through how to configure and use MDX with Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Getting Started"
                },
                {
                    "type": "p",
                    "text": "Install packages needed to render MDX:"
                },
                {
                    "type": "code",
                    "code": "npminstall@next/mdx@mdx-js/loader@mdx-js/react@types/mdx"
                },
                {
                    "type": "p",
                    "text": "Create amdx-components.tsxfile at the root of your application (src/or the parent folder ofapp/):"
                },
                {
                    "type": "p",
                    "text": "Good to know:mdx-components.tsxis required to use MDX with App Router and will not work without it."
                },
                {
                    "type": "code",
                    "code": "importtype{ MDXComponents }from'mdx/types'exportfunctionuseMDXComponents(components:MDXComponents):MDXComponents{return{...components,}}"
                },
                {
                    "type": "p",
                    "text": "Update thenext.config.jsfile at your project's root to configure it to use MDX:"
                },
                {
                    "type": "code",
                    "code": "constwithMDX=require('@next/mdx')()/**@type{import('next').NextConfig}*/constnextConfig={// Configure `pageExtensions` to include MDX filespageExtensions:['js','jsx','mdx','ts','tsx'],// Optionally, add any other Next.js config below}module.exports=withMDX(nextConfig)"
                },
                {
                    "type": "p",
                    "text": "Then, create a new MDX page within the/appdirectory:"
                },
                {
                    "type": "code",
                    "code": "your-project├── app│   └── my-mdx-page│       └── page.mdx└── package.json"
                },
                {
                    "type": "p",
                    "text": "Now you can use markdown and import React components directly inside your MDX page:"
                },
                {
                    "type": "code",
                    "code": "import{ MyComponent }from'my-components'# Welcome to myMDXpage!This is some**bold**and _italics_ text.This is a listinmarkdown:-One-Two-ThreeCheckout my React component:<MyComponent/>"
                },
                {
                    "type": "p",
                    "text": "Navigating to the/my-mdx-pageroute should display your rendered MDX."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Remote MDX"
                },
                {
                    "type": "p",
                    "text": "If your markdown or MDX files or content livessomewhere else, you can fetch it dynamically on the server. This is useful for content stored in a separate local folder, CMS, database, or anywhere else. A popular community package for this use isnext-mdx-remote."
                },
                {
                    "type": "p",
                    "text": "Good to know: Please proceed with caution. MDX compiles to JavaScript and is executed on the server. You should only fetch MDX content from a trusted source, otherwise this can lead to remote code execution (RCE)."
                },
                {
                    "type": "p",
                    "text": "The following example usesnext-mdx-remote:"
                },
                {
                    "type": "code",
                    "code": "import{ MDXRemote }from'next-mdx-remote/rsc'exportdefaultasyncfunctionRemoteMdxPage() {// MDX text - can be from a local file, database, CMS, fetch, anywhere...constres=awaitfetch('https://...')constmarkdown=awaitres.text()return<MDXRemotesource={markdown} />}"
                },
                {
                    "type": "p",
                    "text": "Navigating to the/my-mdx-page-remoteroute should display your rendered MDX."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Layouts"
                },
                {
                    "type": "p",
                    "text": "To share a layout across MDX pages, you can use thebuilt-in layouts supportwith the App Router."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionMdxLayout({ children }:{ children:React.ReactNode}) {// Create any shared layout or styles herereturn<divstyle={{ color:'blue'}}>{children}</div>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Remark and Rehype Plugins"
                },
                {
                    "type": "p",
                    "text": "You can optionally provideremarkandrehypeplugins to transform the MDX content."
                },
                {
                    "type": "p",
                    "text": "For example, you can useremark-gfmto support GitHub Flavored Markdown."
                },
                {
                    "type": "p",
                    "text": "Since theremarkandrehypeecosystem is ESM only, you'll need to usenext.config.mjsas the configuration file."
                },
                {
                    "type": "code",
                    "code": "importremarkGfmfrom'remark-gfm'importcreateMDXfrom'@next/mdx'/**@type{import('next').NextConfig}*/constnextConfig={// Configure `pageExtensions`` to include MDX filespageExtensions:['js','jsx','mdx','ts','tsx'],// Optionally, add any other Next.js config below}constwithMDX=createMDX({// Add markdown plugins here, as desiredoptions:{remarkPlugins:[remarkGfm],rehypePlugins:[],},})// Wrap MDX and Next.js config with each otherexportdefaultwithMDX(nextConfig)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Frontmatter"
                },
                {
                    "type": "p",
                    "text": "Frontmatter is a YAML like key/value pairing that can be used to store data about a page.@next/mdxdoesnotsupport frontmatter by default, though there are many solutions for adding frontmatter to your MDX content, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "remark-frontmatter",
                        "remark-mdx-frontmatter",
                        "gray-matter."
                    ]
                },
                {
                    "type": "p",
                    "text": "To access page metadata with@next/mdx, you can export a metadata object from within the.mdxfile:"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={author:'John Doe',}# MyMDXpage"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Custom Elements"
                },
                {
                    "type": "p",
                    "text": "One of the pleasant aspects of using markdown, is that it maps to nativeHTMLelements, making writing fast, and intuitive:"
                },
                {
                    "type": "code",
                    "code": "This is a list in markdown:- One- Two- Three"
                },
                {
                    "type": "p",
                    "text": "The above generates the followingHTML:"
                },
                {
                    "type": "code",
                    "code": "<p>This is a list in markdown:</p><ul><li>One</li><li>Two</li><li>Three</li></ul>"
                },
                {
                    "type": "p",
                    "text": "When you want to style your own elements for a custom feel to your website or application, you can pass in shortcodes. These are your own custom components that map toHTMLelements."
                },
                {
                    "type": "p",
                    "text": "To do this, open themdx-components.tsxfile at the root of your application and add custom elements:"
                },
                {
                    "type": "code",
                    "code": "importtype{ MDXComponents }from'mdx/types'importImage,{ ImageProps }from'next/image'// This file allows you to provide custom React components// to be used in MDX files. You can import and use any// React component you want, including inline styles,// components from other libraries, and more.exportfunctionuseMDXComponents(components:MDXComponents):MDXComponents{return{// Allows customizing built-in components, e.g. to add styling.h1:({ children })=><h1style={{ fontSize:'100px'}}>{children}</h1>,img:(props)=>(<Imagesizes=\"100vw\"style={{ width:'100%',height:'auto'}}{...(propsasImageProps)}/>),...components,}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deep Dive: How do you transform markdown into HTML?"
                },
                {
                    "type": "p",
                    "text": "React does not natively understand markdown. The markdown plaintext needs to first be transformed into HTML. This can be accomplished withremarkandrehype."
                },
                {
                    "type": "p",
                    "text": "remarkis an ecosystem of tools around markdown.rehypeis the same, but for HTML. For example, the following code snippet transforms markdown into HTML:"
                },
                {
                    "type": "code",
                    "code": "import{ unified }from'unified'importremarkParsefrom'remark-parse'importremarkRehypefrom'remark-rehype'importrehypeSanitizefrom'rehype-sanitize'importrehypeStringifyfrom'rehype-stringify'main()asyncfunctionmain() {constfile=awaitunified().use(remarkParse)// Convert into markdown AST.use(remarkRehype)// Transform to HTML AST.use(rehypeSanitize)// Sanitize HTML input.use(rehypeStringify)// Convert AST into serialized HTML.process('Hello, Next.js!')console.log(String(file))// <p>Hello, Next.js!</p>}"
                },
                {
                    "type": "p",
                    "text": "Theremarkandrehypeecosystem contains plugins forsyntax highlighting,linking headings,generating a table of contents, and more."
                },
                {
                    "type": "p",
                    "text": "When using@next/mdxas shown above, youdo notneed to useremarkorrehypedirectly, as it is handled for you. We're describing it here for a deeper understanding of what the@next/mdxpackage is doing underneath."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using the Rust-based MDX compiler (Experimental)"
                },
                {
                    "type": "p",
                    "text": "Next.js supports a new MDX compiler written in Rust. This compiler is still experimental and is not recommended for production use. To use the new compiler, you need to configurenext.config.jswhen you pass it towithMDX:"
                },
                {
                    "type": "code",
                    "code": "module.exports=withMDX({experimental:{mdxRs:true,},})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Helpful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "MDX",
                        "@next/mdx",
                        "remark",
                        "rehype",
                        "Markdoc"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/src-directory",
            "title": "Configuring: src Directory | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "src Directory"
                },
                {
                    "type": "p",
                    "text": "As an alternative to having the special Next.jsapporpagesdirectories in the root of your project, Next.js also supports the common pattern of placing application code under thesrcdirectory."
                },
                {
                    "type": "p",
                    "text": "This separates application code from project configuration files which mostly live in the root of a project, which is preferred by some individuals and teams."
                },
                {
                    "type": "p",
                    "text": "To use thesrcdirectory, move theappRouter folder orpagesRouter folder tosrc/apporsrc/pagesrespectively."
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "The/publicdirectory should remain in the root of your project.",
                        "Config files likepackage.json,next.config.jsandtsconfig.jsonshould remain in the root of your project.",
                        ".env.*files should remain in the root of your project.",
                        "src/apporsrc/pageswill be ignored ifapporpagesare present in the root directory.",
                        "If you're usingsrc, you'll probably also move other application folders such as/componentsor/lib.",
                        "If you're using Middleware, ensure it is placed inside thesrcdirectory.",
                        "If you're using Tailwind CSS, you'll need to add the/srcprefix to thetailwind.config.jsfile in thecontent section.",
                        "If you are using TypeScript paths for imports such as@/*, you should update thepathsobject intsconfig.jsonto includesrc/."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Project Organization"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/typescript",
            "title": "Configuring: TypeScript | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "TypeScript"
                },
                {
                    "type": "p",
                    "text": "Next.js provides a TypeScript-first development experience for building your React application."
                },
                {
                    "type": "p",
                    "text": "It comes with built-in TypeScript support for automatically installing the necessary packages and configuring the proper settings."
                },
                {
                    "type": "p",
                    "text": "As well as aTypeScript Pluginfor your editor."
                },
                {
                    "type": "p",
                    "text": "🎥 Watch:Learn about the built-in TypeScript plugin →YouTube (3 minutes)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "New Projects"
                },
                {
                    "type": "p",
                    "text": "create-next-appnow ships with TypeScript by default."
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Existing Projects"
                },
                {
                    "type": "p",
                    "text": "Add TypeScript to your project by renaming a file to.ts/.tsx. Runnext devandnext buildto automatically install the necessary dependencies and add atsconfig.jsonfile with the recommended config options."
                },
                {
                    "type": "p",
                    "text": "If you already had ajsconfig.jsonfile, copy thepathscompiler option from the oldjsconfig.jsoninto the newtsconfig.jsonfile, and delete the oldjsconfig.jsonfile."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "TypeScript Plugin"
                },
                {
                    "type": "p",
                    "text": "Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion."
                },
                {
                    "type": "p",
                    "text": "You can enable the plugin in VS Code by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Opening the command palette (Ctrl/⌘+Shift+P)",
                        "Searching for \"TypeScript: Select TypeScript Version\"",
                        "Selecting \"Use Workspace Version\""
                    ]
                },
                {
                    "type": "p",
                    "text": "Now, when editing files, the custom plugin will be enabled. When runningnext build, the custom type checker will be used."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Plugin Features"
                },
                {
                    "type": "p",
                    "text": "The TypeScript plugin can help with:"
                },
                {
                    "type": "list",
                    "items": [
                        "Warning if the invalid values forsegment config optionsare passed.",
                        "Showing available options and in-context documentation.",
                        "Ensuring theuse clientdirective is used correctly.",
                        "Ensuring client hooks (likeuseState) are only used in Client Components."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: More features will be added in the future."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Minimum TypeScript Version"
                },
                {
                    "type": "p",
                    "text": "It is highly recommended to be on at leastv4.5.2of TypeScript to get syntax features such astype modifiers on import namesandperformance improvements."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Statically Typed Links"
                },
                {
                    "type": "p",
                    "text": "Next.js can statically type links to prevent typos and other errors when usingnext/link, improving type safety when navigating between pages."
                },
                {
                    "type": "p",
                    "text": "To opt-into this feature,experimental.typedRoutesneed to be enabled and the project needs to be using TypeScript."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{typedRoutes:true,},}module.exports=nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js will generate a link definition in.next/typesthat contains information about all existing routes in your application, which TypeScript can then use to provide feedback in your editor about invalid links."
                },
                {
                    "type": "p",
                    "text": "Currently, experimental support includes any string literal, including dynamic segments. For non-literal strings, you currently need to manually cast thehrefwithas Route:"
                },
                {
                    "type": "code",
                    "code": "importtype{ Route }from'next';importLinkfrom'next/link'// No TypeScript errors if href is a valid route<Linkhref=\"/about\"/><Linkhref=\"/blog/nextjs\"/><Linkhref={`/blog/${slug}`} /><Linkhref={('/blog'+slug)asRoute} />// TypeScript errors if href is not a valid route<Linkhref=\"/aboot\"/>"
                },
                {
                    "type": "p",
                    "text": "To accepthrefin a custom component wrappingnext/link, use a generic:"
                },
                {
                    "type": "code",
                    "code": "importtype{ Route }from'next'importLinkfrom'next/link'functionCard<Textendsstring>({ href }:{ href:Route<T>|URL}) {return(<Linkhref={href}><div>My Card</div></Link>)}"
                },
                {
                    "type": "p",
                    "text": "How does it work?"
                },
                {
                    "type": "p",
                    "text": "When runningnext devornext build, Next.js generates a hidden.d.tsfile inside.nextthat contains information about all existing routes in your application (all valid routes as thehreftype ofLink). This.d.tsfile is included intsconfig.jsonand the TypeScript compiler will check that.d.tsand provide feedback in your editor about invalid links."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "End-to-End Type Safety"
                },
                {
                    "type": "p",
                    "text": "The Next.js App Router hasenhanced type safety. This includes:"
                },
                {
                    "type": "list",
                    "items": [
                        "No serialization of data between fetching function and page: You canfetchdirectly in components, layouts, and pages on the server. This datadoes notneed to be serialized (converted to a string) to be passed to the client side for consumption in React. Instead, sinceappuses Server Components by default, we can use values likeDate,Map,Set, and more without any extra steps. Previously, you needed to manually type the boundary between server and client with Next.js-specific types.",
                        "Streamlined data flow between components: With the removal of_appin favor of root layouts, it is now easier to visualize the data flow between components and pages. Previously, data flowing between individualpagesand_appwere difficult to type and could introduce confusing bugs. Withcolocated data fetchingin the App Router, this is no longer an issue."
                    ]
                },
                {
                    "type": "p",
                    "text": "Data Fetching in Next.jsnow provides as close to end-to-end type safety as possible without being prescriptive about your database or content provider selection."
                },
                {
                    "type": "p",
                    "text": "We're able to type the response data as you would expect with normal TypeScript. For example:"
                },
                {
                    "type": "code",
                    "code": "asyncfunctiongetData() {constres=awaitfetch('https://api.example.com/...')// The return value is *not* serialized// You can return Date, Map, Set, etc.returnres.json()}exportdefaultasyncfunctionPage() {constname=awaitgetData()return'...'}"
                },
                {
                    "type": "p",
                    "text": "Forcompleteend-to-end type safety, this also requires your database or content provider to support TypeScript. This could be through using anORMor type-safe query builder."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Async Server Component TypeScript Error"
                },
                {
                    "type": "p",
                    "text": "To use anasyncServer Component with TypeScript, ensure you are using TypeScript5.1.3or higher and@types/react18.2.8or higher."
                },
                {
                    "type": "p",
                    "text": "If you are using an older version of TypeScript, you may see a'Promise<Element>' is not a valid JSX elementtype error. Updating to the latest version of TypeScript and@types/reactshould resolve this issue."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Passing Data Between Server & Client Components"
                },
                {
                    "type": "p",
                    "text": "When passing data between a Server and Client Component through props, the data is still serialized (converted to a string) for use in the browser. However, it does not need a special type. It’s typed the same as passing any other props between components."
                },
                {
                    "type": "p",
                    "text": "Further, there is less code to be serialized, as un-rendered data does not cross between the server and client (it remains on the server). This is only now possible through support for Server Components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Path aliases and baseUrl"
                },
                {
                    "type": "p",
                    "text": "Next.js automatically supports thetsconfig.json\"paths\"and\"baseUrl\"options."
                },
                {
                    "type": "p",
                    "text": "You can learn more about this feature on theModule Path aliases documentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Type checking next.config.js"
                },
                {
                    "type": "p",
                    "text": "Thenext.config.jsfile must be a JavaScript file as it does not get parsed by Babel or TypeScript, however you can add some type checking in your IDE using JSDoc as below:"
                },
                {
                    "type": "code",
                    "code": "// @ts-check/***@type{import('next').NextConfig}**/constnextConfig={/* config options here */}module.exports=nextConfig"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Incremental type checking"
                },
                {
                    "type": "p",
                    "text": "Sincev10.2.1Next.js supportsincremental type checkingwhen enabled in yourtsconfig.json, this can help speed up type checking in larger applications."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Ignoring TypeScript Errors"
                },
                {
                    "type": "p",
                    "text": "Next.js fails yourproduction build(next build) when TypeScript errors are present in your project."
                },
                {
                    "type": "p",
                    "text": "If you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step."
                },
                {
                    "type": "p",
                    "text": "If disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous."
                },
                {
                    "type": "p",
                    "text": "Opennext.config.jsand enable theignoreBuildErrorsoption in thetypescriptconfig:"
                },
                {
                    "type": "code",
                    "code": "module.exports={typescript:{// !! WARN !!// Dangerously allow production builds to successfully complete even if// your project has type errors.// !! WARN !!ignoreBuildErrors:true,},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Custom Type Declarations"
                },
                {
                    "type": "p",
                    "text": "When you need to declare custom types, you might be tempted to modifynext-env.d.ts. However, this file is automatically generated, so any changes you make will be overwritten. Instead, you should create a new file, let's call itnew-types.d.ts, and reference it in yourtsconfig.json:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\":{\"skipLibCheck\":true//...truncated...},\"include\":[\"new-types.d.ts\",\"next-env.d.ts\",\".next/types/**/*.ts\",\"**/*.ts\",\"**/*.tsx\"],\"exclude\":[\"node_modules\"]}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version Changes"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching",
            "title": "Building Your Application: Data Fetching | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Data Fetching"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Data Fetching and Caching"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fetching, Caching, and Revalidating"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Actions and Mutations"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Data Fetching Patterns and Best Practices"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/fetching",
            "title": "Data Fetching: Data Fetching and Caching | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Data Fetching and Caching"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Commerce",
                        "On-Demand ISR",
                        "Next.js Forms"
                    ]
                },
                {
                    "type": "p",
                    "text": "This guide will walk you through the basics of data fetching and caching in Next.js, providing practical examples and best practices."
                },
                {
                    "type": "p",
                    "text": "Here's a minimal example of data fetching in Next.js:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {letdata=awaitfetch('https://api.vercel.app/blog')letposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "This example demonstrates a basic server-side data fetch using thefetchAPI in an asynchronous React Server Component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reference"
                },
                {
                    "type": "list",
                    "items": [
                        "fetch",
                        "Reactcache",
                        "Next.jsunstable_cache"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fetching data on the server with thefetchAPI"
                },
                {
                    "type": "p",
                    "text": "This component will fetch and display a list of blog posts. The response fromfetchwill be automatically cached."
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {letdata=awaitfetch('https://api.vercel.app/blog')letposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "If you are not using anyDynamic APIsanywhere else in this route, it will be prerendered duringnext buildto a static page. The data can then be updated usingIncremental Static Regeneration."
                },
                {
                    "type": "p",
                    "text": "If you donotwant to cache the response fromfetch, you can do the following:"
                },
                {
                    "type": "code",
                    "code": "letdata=awaitfetch('https://api.vercel.app/blog',{ cache:'no-store'})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fetching data on the server with an ORM or database"
                },
                {
                    "type": "p",
                    "text": "This component will fetch and display a list of blog posts. The response from the database is not cached by default but could be withadditional configuration."
                },
                {
                    "type": "code",
                    "code": "import{ db,posts }from'@/lib/db'exportdefaultasyncfunctionPage() {letallPosts=awaitdb.select().from(posts)return(<ul>{allPosts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "If you are not using anyDynamic APIsanywhere else in this route, it will be prerendered duringnext buildto a static page. The data can then be updated usingIncremental Static Regeneration."
                },
                {
                    "type": "p",
                    "text": "To prevent the page from prerendering, you can add the following to your file:"
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='force-dynamic'"
                },
                {
                    "type": "p",
                    "text": "However, you will commonly use functions likecookies,headers, or reading the incomingsearchParamsfrom the page props, which will automatically make the page render dynamically. In this case, you donotneed to explicitly useforce-dynamic."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fetching data on the client"
                },
                {
                    "type": "p",
                    "text": "We recommend first attempting to fetch data on the server-side."
                },
                {
                    "type": "p",
                    "text": "However, there are still cases where client-side data fetching makes sense. In these scenarios, you can manually callfetchin auseEffect(not recommended), or lean on popular React libraries in the community (such asSWRorReact Query) for client fetching."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useState,useEffect }from'react'exportfunctionPosts() {const[posts,setPosts]=useState(null)useEffect(()=>{asyncfunctionfetchPosts() {letres=awaitfetch('https://api.vercel.app/blog')letdata=awaitres.json()setPosts(data)}fetchPosts()},[])if(!posts)return<div>Loading...</div>return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caching data with an ORM or Database"
                },
                {
                    "type": "p",
                    "text": "You can use theunstable_cacheAPI to cache the response to allow pages to be prerendered when runningnext build."
                },
                {
                    "type": "code",
                    "code": "import{ unstable_cache }from'next/cache'import{ db,posts }from'@/lib/db'constgetPosts=unstable_cache(async()=>{returnawaitdb.select().from(posts)},['posts'],{ revalidate:3600,tags:['posts'] })exportdefaultasyncfunctionPage() {constallPosts=awaitgetPosts()return(<ul>{allPosts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "This example caches the result of the database query for 1 hour (3600 seconds). It also adds the cache tagpostswhich can then be invalidated withIncremental Static Regeneration."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reusing data across multiple functions"
                },
                {
                    "type": "p",
                    "text": "Next.js uses APIs likegenerateMetadataandgenerateStaticParamswhere you will need to use the same data fetched in thepage."
                },
                {
                    "type": "p",
                    "text": "If you are usingfetch, requests are automaticallymemoized. This means you can safely call the same URL with the same options, and only one request will be made."
                },
                {
                    "type": "code",
                    "code": "import{ notFound }from'next/navigation'interfacePost{id:stringtitle:stringcontent:string}asyncfunctiongetPost(id:string) {letres=awaitfetch(`https://api.vercel.app/blog/${id}`)letpost:Post=awaitres.json()if(!post)notFound()returnpost}exportasyncfunctiongenerateStaticParams() {letposts=awaitfetch('https://api.vercel.app/blog').then((res)=>res.json())returnposts.map((post:Post)=>({id:post.id,}))}exportasyncfunctiongenerateMetadata({ params }:{ params:{ id:string} }) {letpost=awaitgetPost(params.id)return{title:post.title,}}exportdefaultasyncfunctionPage({ params }:{ params:{ id:string} }) {letpost=awaitgetPost(params.id)return(<article><h1>{post.title}</h1><p>{post.content}</p></article>)}"
                },
                {
                    "type": "p",
                    "text": "If you arenotusingfetch, and instead using an ORM or database directly, you can wrap your data fetch with the Reactcachefunction. This will de-duplicate and only make one query."
                },
                {
                    "type": "code",
                    "code": "import{ cache }from'react'import{ db,posts,eq }from'@/lib/db'// Example with Drizzle ORMimport{ notFound }from'next/navigation'exportconstgetPost=cache(async(id)=>{constpost=awaitdb.query.posts.findFirst({where:eq(posts.id,parseInt(id)),})if(!post)notFound()returnpost})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating cached data"
                },
                {
                    "type": "p",
                    "text": "Learn more about revalidating cached data withIncremental Static Regeneration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Patterns"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Parallel and sequential data fetching"
                },
                {
                    "type": "p",
                    "text": "When fetching data inside components, you need to be aware of two data fetching patterns: Parallel and Sequential."
                },
                {
                    "type": "list",
                    "items": [
                        "Sequential: requests in a component tree are dependent on each other. This can lead to longer loading times.",
                        "Parallel: requests in a route are eagerly initiated and will load data at the same time. This reduces the total time it takes to load data."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Sequential data fetching"
                },
                {
                    "type": "p",
                    "text": "If you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are notmemoized."
                },
                {
                    "type": "p",
                    "text": "There may be cases where you want this pattern because one fetch depends on the result of the other. For example, thePlaylistscomponent will only start fetching data once theArtistcomponent has finished fetching data becausePlaylistsdepends on theartistIDprop:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage({params: { username },}:{params:{ username:string}}) {// Getartistinformationconstartist=awaitgetArtist(username)return(<><h1>{artist.name}</h1>{/* Show fallback UI while the Playlists component is loading */}<Suspensefallback={<div>Loading...</div>}>{/* Pass theartistID to the Playlists component */}<PlaylistsartistID={artist.id} /></Suspense></>)}asyncfunctionPlaylists({artistID }:{artistID:string}) {// Use theartistID to fetch playlistsconstplaylists=awaitgetArtistPlaylists(artistID)return(<ul>{playlists.map((playlist)=>(<likey={playlist.id}>{playlist.name}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "You can useloading.js(for route segments) orReact<Suspense>(for nested components) to show an instant loading state while React streams in the result."
                },
                {
                    "type": "p",
                    "text": "This will prevent the whole route from being blocked by data requests, and the user will be able to interact with the parts of the page that are ready."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Parallel Data Fetching"
                },
                {
                    "type": "p",
                    "text": "By default, layout and page segments are rendered in parallel. This means requests will be initiated in parallel."
                },
                {
                    "type": "p",
                    "text": "However, due to the nature ofasync/await, an awaited request inside the same segment or component will block any requests below it."
                },
                {
                    "type": "p",
                    "text": "To fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved."
                },
                {
                    "type": "p",
                    "text": "In the example below, thegetArtistandgetAlbumsfunctions are defined outside thePagecomponent and initiated inside the component usingPromise.all:"
                },
                {
                    "type": "code",
                    "code": "importAlbumsfrom'./albums'asyncfunctiongetArtist(username:string) {constres=awaitfetch(`https://api.example.com/artist/${username}`)returnres.json()}asyncfunctiongetAlbums(username:string) {constres=awaitfetch(`https://api.example.com/artist/${username}/albums`)returnres.json()}exportdefaultasyncfunctionPage({params: { username },}:{params:{ username:string}}) {constartistData=getArtist(username)constalbumsData=getAlbums(username)// Initiate both requests in parallelconst[artist,albums]=awaitPromise.all([artistData,albumsData])return(<><h1>{artist.name}</h1><Albumslist={albums} /></>)}"
                },
                {
                    "type": "p",
                    "text": "In addition, you can add aSuspense Boundaryto break up the rendering work and show part of the result as soon as possible."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Preloading Data"
                },
                {
                    "type": "p",
                    "text": "Another way to prevent waterfalls is to use thepreloadpattern by creating an utility function that you eagerly call above blocking requests. For example,checkIsAvailable()blocks<Item/>from rendering, so you can callpreload()before it to eagerly initiate<Item/>data dependencies. By the time<Item/>is rendered, its data has already been fetched."
                },
                {
                    "type": "p",
                    "text": "Note thatpreloadfunction doesn't blockcheckIsAvailable()from running."
                },
                {
                    "type": "code",
                    "code": "import{ getItem }from'@/utils/get-item'exportconstpreload=(id:string)=>{// void evaluates the given expression and returns undefined// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/voidvoidgetItem(id)}exportdefaultasyncfunctionItem({ id }:{ id:string}) {constresult=awaitgetItem(id)// ...}"
                },
                {
                    "type": "code",
                    "code": "importItem,{ preload,checkIsAvailable }from'@/components/Item'exportdefaultasyncfunctionPage({params: { id },}:{params:{ id:string}}) {// starting loadingitemdatapreload(id)// perform another asynchronous taskconstisAvailable=awaitcheckIsAvailable()returnisAvailable?<Itemid={id} />:null}"
                },
                {
                    "type": "p",
                    "text": "Good to know:The \"preload\" function can also have any name as it's a pattern, not an API."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Using Reactcacheandserver-onlywith the Preload Pattern"
                },
                {
                    "type": "p",
                    "text": "You can combine thecachefunction, thepreloadpattern, and theserver-onlypackage to create a data fetching utility that can be used throughout your app."
                },
                {
                    "type": "code",
                    "code": "import{ cache }from'react'import'server-only'exportconstpreload=(id:string)=>{voidgetItem(id)}exportconstgetItem=cache(async(id:string)=>{// ...})"
                },
                {
                    "type": "p",
                    "text": "With this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetchingonly happens on the server."
                },
                {
                    "type": "p",
                    "text": "Theutils/get-itemexports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "We recommend using theserver-onlypackageto make sure server data fetching functions are never used on the client."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Preventing sensitive data from being exposed to the client"
                },
                {
                    "type": "p",
                    "text": "We recommend using React's taint APIs,taintObjectReferenceandtaintUniqueValue, to prevent whole object instances or sensitive values from being passed to the client."
                },
                {
                    "type": "p",
                    "text": "To enable tainting in your application, set the Next.js Configexperimental.taintoption totrue:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{taint:true,},}"
                },
                {
                    "type": "p",
                    "text": "Then pass the object or value you want to taint to theexperimental_taintObjectReferenceorexperimental_taintUniqueValuefunctions:"
                },
                {
                    "type": "code",
                    "code": "import{ queryDataFromDB }from'./api'import{experimental_taintObjectReference,experimental_taintUniqueValue,}from'react'exportasyncfunctiongetUserData() {constdata=awaitqueryDataFromDB()experimental_taintObjectReference('Do not pass the whole user object to the client',data)experimental_taintUniqueValue(\"Do not pass the user's address to the client\",data,data.address)returndata}"
                },
                {
                    "type": "code",
                    "code": "import{ getUserData }from'./data'exportasyncfunctionPage() {constuserData=getUserData()return(<ClientComponentuser={userData}// this will cause an error because of taintObjectReferenceaddress={userData.address}// this will cause an error because of taintUniqueValue/>)}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating",
            "title": "Data Fetching: Fetching, Caching, and Revalidating | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Data Fetching, Caching, and Revalidating"
                },
                {
                    "type": "p",
                    "text": "Data fetching is a core part of any application. This page goes through how you can fetch, cache, and revalidate data in React and Next.js."
                },
                {
                    "type": "p",
                    "text": "There are four ways you can fetch data:"
                },
                {
                    "type": "list",
                    "items": [
                        "On the server, withfetch",
                        "On the server, with third-party libraries",
                        "On the client, via a Route Handler",
                        "On the client, with third-party libraries."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fetching Data on the Server withfetch"
                },
                {
                    "type": "p",
                    "text": "Next.js extends the nativefetchWeb APIto allow you to configure thecachingandrevalidatingbehavior for each fetch request on the server. React extendsfetchto automaticallymemoizefetch requests while rendering a React component tree."
                },
                {
                    "type": "p",
                    "text": "You can usefetchwithasync/awaitin Server Components, inRoute Handlers, and inServer Actions."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "asyncfunctiongetData() {constres=awaitfetch('https://api.example.com/...')// The return value is *not* serialized// You can return Date, Map, Set, etc.if(!res.ok) {// This will activate the closest `error.js` Error BoundarythrownewError('Failed to fetch data')}returnres.json()}exportdefaultasyncfunctionPage() {constdata=awaitgetData()return<main></main>}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js provides helpful functions you may need when fetching data in Server Components such ascookiesandheaders. These will cause the route to be dynamically rendered as they rely on request time information.",
                        "In Route handlers,fetchrequests are not memoized as Route Handlers are not part of the React component tree.",
                        "InServer Actions,fetchrequests are not cached (defaultscache: no-store).",
                        "To useasync/awaitin a Server Component with TypeScript, you'll need to use TypeScript5.1.3or higher and@types/react18.2.8or higher."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caching Data"
                },
                {
                    "type": "p",
                    "text": "Caching stores data so it doesn't need to be re-fetched from your data source on every request."
                },
                {
                    "type": "p",
                    "text": "By default, Next.js automatically caches the returned values offetchin theData Cacheon the server. This means that the data can be fetched at build time or request time, cached, and reused on each data request."
                },
                {
                    "type": "code",
                    "code": "// 'force-cache' is the default, and can be omittedfetch('https://...',{ cache:'force-cache'})"
                },
                {
                    "type": "p",
                    "text": "However, there are exceptions,fetchrequests are not cached when:"
                },
                {
                    "type": "list",
                    "items": [
                        "Used inside aServer Action.",
                        "Used inside aRoute Handlerthat uses thePOSTmethod."
                    ]
                },
                {
                    "type": "p",
                    "text": "What is the Data Cache?"
                },
                {
                    "type": "p",
                    "text": "The Data Cache is a persistentHTTP cache. Depending on your platform, the cache can scale automatically and beshared across multiple regions."
                },
                {
                    "type": "p",
                    "text": "Learn more about theData Cache."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating Data"
                },
                {
                    "type": "p",
                    "text": "Revalidation is the process of purging the Data Cache and re-fetching the latest data. This is useful when your data changes and you want to ensure you show the latest information."
                },
                {
                    "type": "p",
                    "text": "Cached data can be revalidated in two ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Time-based revalidation: Automatically revalidate data after a certain amount of time has passed. This is useful for data that changes infrequently and freshness is not as critical.",
                        "On-demand revalidation: Manually revalidate data based on an event (e.g. form submission). On-demand revalidation can use a tag-based or path-based approach to revalidate groups of data at once. This is useful when you want to ensure the latest data is shown as soon as possible (e.g. when content from your headless CMS is updated)."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Time-based Revalidation"
                },
                {
                    "type": "p",
                    "text": "To revalidate data at a timed interval, you can use thenext.revalidateoption offetchto set the cache lifetime of a resource (in seconds)."
                },
                {
                    "type": "code",
                    "code": "fetch('https://...',{ next:{ revalidate:3600} })"
                },
                {
                    "type": "p",
                    "text": "Alternatively, to revalidate allfetchrequests in a route segment, you can use theSegment Config Options."
                },
                {
                    "type": "code",
                    "code": "exportconstrevalidate=3600// revalidate at most every hour"
                },
                {
                    "type": "p",
                    "text": "If you have multiple fetch requests in a statically rendered route, and each has a different revalidation frequency. The lowest time will be used for all requests. For dynamically rendered routes, eachfetchrequest will be revalidated independently."
                },
                {
                    "type": "p",
                    "text": "Learn more abouttime-based revalidation."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "On-demand Revalidation"
                },
                {
                    "type": "p",
                    "text": "Data can be revalidated on-demand by path (revalidatePath) or by cache tag (revalidateTag) inside aServer ActionorRoute Handler."
                },
                {
                    "type": "p",
                    "text": "Next.js has a cache tagging system for invalidatingfetchrequests across routes."
                },
                {
                    "type": "list",
                    "items": [
                        "When usingfetch, you have the option to tag cache entries with one or more tags.",
                        "Then, you can callrevalidateTagto revalidate all entries associated with that tag."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, the followingfetchrequest adds the cache tagcollection:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {constres=awaitfetch('https://...',{ next:{ tags:['collection'] } })constdata=awaitres.json()// ...}"
                },
                {
                    "type": "p",
                    "text": "You can then revalidate thisfetchcall tagged withcollectionby callingrevalidateTagin a Server Action:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ revalidateTag }from'next/cache'exportdefaultasyncfunctionaction() {revalidateTag('collection')}"
                },
                {
                    "type": "p",
                    "text": "Learn more abouton-demand revalidation."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Error handling and revalidation"
                },
                {
                    "type": "p",
                    "text": "If an error is thrown while attempting to revalidate data, the last successfully generated data will continue to be served from the cache. On the next subsequent request, Next.js will retry revalidating the data."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Opting out of Data Caching"
                },
                {
                    "type": "p",
                    "text": "fetchrequests arenotcached if:"
                },
                {
                    "type": "list",
                    "items": [
                        "Thecache: 'no-store'is added tofetchrequests.",
                        "Therevalidate: 0option is added to individualfetchrequests.",
                        "Thefetchrequest is inside a Router Handler that uses thePOSTmethod.",
                        "Thefetchrequest comes after the usage ofheadersorcookies.",
                        "Theconst dynamic = 'force-dynamic'route segment option is used.",
                        "ThefetchCacheroute segment option is configured to skip cache by default.",
                        "Thefetchrequest usesAuthorizationorCookieheaders and there's an uncached request above it in the component tree."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "IndividualfetchRequests"
                },
                {
                    "type": "p",
                    "text": "To opt out of caching for individualfetchrequests, you can set thecacheoption infetchto'no-store'. This will fetch data dynamically, on every request."
                },
                {
                    "type": "code",
                    "code": "fetch('https://...',{ cache:'no-store'})"
                },
                {
                    "type": "p",
                    "text": "View all the availablecacheoptions in thefetchAPI reference."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "MultiplefetchRequests"
                },
                {
                    "type": "p",
                    "text": "If you have multiplefetchrequests in a route segment (e.g. a Layout or Page), you can configure the caching behavior of all data requests in the segment using theSegment Config Options."
                },
                {
                    "type": "p",
                    "text": "However, we recommend configuring the caching behavior of eachfetchrequest individually. This gives you more granular control over the caching behavior."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fetching data on the Server with third-party libraries"
                },
                {
                    "type": "p",
                    "text": "In cases where you're using a third-party library that doesn't support or exposefetch(for example, a database, CMS, or ORM client), you can configure the caching and revalidating behavior of those requests using theRoute Segment Config Optionand React'scachefunction."
                },
                {
                    "type": "p",
                    "text": "Whether the data is cached or not will depend on whether the route segment isstatically or dynamically rendered. If the segment is static (default), the output of the request will be cached and revalidated as part of the route segment. If the segment is dynamic, the output of the request willnotbe cached and will be re-fetched on every request when the segment is rendered."
                },
                {
                    "type": "p",
                    "text": "You can also use the experimentalunstable_cacheAPI."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "In the example below:"
                },
                {
                    "type": "list",
                    "items": [
                        "The Reactcachefunction is used tomemoizedata requests.",
                        "Therevalidateoption is set to3600in the Layout and Page segments, meaning the data will be cached and revalidated at most every hour."
                    ]
                },
                {
                    "type": "code",
                    "code": "import{ cache }from'react'exportconstgetItem=cache(async(id:string)=>{constitem=awaitdb.item.findUnique({ id })returnitem})"
                },
                {
                    "type": "p",
                    "text": "Although thegetItemfunction is called twice, only one query will be made to the database."
                },
                {
                    "type": "code",
                    "code": "import{ getItem }from'@/utils/get-item'exportconstrevalidate=3600// revalidate the data at most every hourexportdefaultasyncfunctionLayout({params: { id },}:{params:{ id:string}}) {constitem=awaitgetItem(id)// ...}"
                },
                {
                    "type": "code",
                    "code": "import{ getItem }from'@/utils/get-item'exportconstrevalidate=3600// revalidate the data at most every hourexportdefaultasyncfunctionPage({params: { id },}:{params:{ id:string}}) {constitem=awaitgetItem(id)// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fetching Data on the Client with Route Handlers"
                },
                {
                    "type": "p",
                    "text": "If you need to fetch data in a client component, you can call aRoute Handlerfrom the client. Route Handlers execute on the server and return the data to the client. This is useful when you don't want to expose sensitive information to the client, such as API tokens."
                },
                {
                    "type": "p",
                    "text": "See theRoute Handlerdocumentation for examples."
                },
                {
                    "type": "p",
                    "text": "Server Components and Route Handlers"
                },
                {
                    "type": "p",
                    "text": "Since Server Components render on the server, you don't need to call a Route Handler from a Server Component to fetch data. Instead, you can fetch the data directly inside the Server Component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fetching Data on the Client with third-party libraries"
                },
                {
                    "type": "p",
                    "text": "You can also fetch data on the client using a third-party library such asSWRorTanStack Query. These libraries provide their own APIs for memoizing requests, caching, revalidating, and mutating data."
                },
                {
                    "type": "p",
                    "text": "Future APIs:"
                },
                {
                    "type": "p",
                    "text": "useis a React function thataccepts and handles a promisereturned by a function. Wrappingfetchinuseis currentlynotrecommended in Client Components and may trigger multiple re-renders. Learn more aboutusein theReact docs."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/forms-and-mutations",
            "title": "Data Fetching: Server Actions and Mutations | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Server Actions and Mutations"
                },
                {
                    "type": "p",
                    "text": "Server Actions areasynchronous functionsthat are executed on the server. They can be used in Server and Client Components to handle form submissions and data mutations in Next.js applications."
                },
                {
                    "type": "p",
                    "text": "🎥 Watch:Learn more about forms and mutations with Server Actions →YouTube (10 minutes)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "A Server Action can be defined with the React\"use server\"directive. You can place the directive at the top of anasyncfunction to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Components"
                },
                {
                    "type": "p",
                    "text": "Server Components can use the inline function level or module level\"use server\"directive. To inline a Server Action, add\"use server\"to the top of the function body:"
                },
                {
                    "type": "code",
                    "code": "// Server ComponentexportdefaultfunctionPage() {// Server Actionasyncfunctioncreate() {'use server'// ...}return(// ...)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client Components"
                },
                {
                    "type": "p",
                    "text": "Client Components can only import actions that use the module-level\"use server\"directive."
                },
                {
                    "type": "p",
                    "text": "To call a Server Action in a Client Component, create a new file and add the\"use server\"directive at the top of it. All functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:"
                },
                {
                    "type": "code",
                    "code": "'use server'exportasyncfunctioncreate() {// ...}"
                },
                {
                    "type": "code",
                    "code": "import{ create }from'@/app/actions'exportfunctionButton() {return(// ...)}"
                },
                {
                    "type": "p",
                    "text": "You can also pass a Server Action to a Client Component as a prop:"
                },
                {
                    "type": "code",
                    "code": "<ClientComponentupdateItem={updateItem} />"
                },
                {
                    "type": "code",
                    "code": "'use client'exportdefaultfunctionClientComponent({ updateItem }) {return<formaction={updateItem}>{/* ... */}</form>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Behavior"
                },
                {
                    "type": "list",
                    "items": [
                        "Server actions can be invoked using theactionattribute in a<form>element:Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.After hydration, the browser does not refresh on form submission.",
                        "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
                        "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
                        "After hydration, the browser does not refresh on form submission.",
                        "Server Actions are not limited to<form>and can be invoked from event handlers,useEffect, third-party libraries, and other form elements like<button>.",
                        "Server Actions integrate with the Next.jscaching and revalidationarchitecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.",
                        "Behind the scenes, actions use thePOSTmethod, and only this HTTP method can invoke them.",
                        "The arguments and return value of Server Actions must be serializable by React. See the React docs for a list ofserializable arguments and values.",
                        "Server Actions are functions. This means they can be reused anywhere in your application.",
                        "Server Actions inherit theruntimefrom the page or layout they are used on.",
                        "Server Actions inherit theRoute Segment Configfrom the page or layout they are used on, including fields likemaxDuration."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
                        "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
                        "After hydration, the browser does not refresh on form submission."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Forms"
                },
                {
                    "type": "p",
                    "text": "React extends the HTML<form>element to allow Server Actions to be invoked with theactionprop."
                },
                {
                    "type": "p",
                    "text": "When invoked in a form, the action automatically receives theFormDataobject. You don't need to use ReactuseStateto manage fields, instead, you can extract the data using the nativeFormDatamethods:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {asyncfunctioncreateInvoice(formData:FormData) {'use server'constrawFormData={customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),}// mutate data// revalidate cache}return<formaction={createInvoice}>...</form>}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Example:Form with Loading & Error States",
                        "When working with forms that have many fields, you may want to consider using theentries()method with JavaScript'sObject.fromEntries(). For example:const rawFormData = Object.fromEntries(formData). One thing to note is that theformDatawill include additional$ACTION_properties.",
                        "SeeReact<form>documentationto learn more."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Passing Additional Arguments"
                },
                {
                    "type": "p",
                    "text": "You can pass additional arguments to a Server Action using the JavaScriptbindmethod."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ updateUser }from'./actions'exportfunctionUserProfile({ userId }:{ userId:string}) {constupdateUserWithId=updateUser.bind(null,userId)return(<formaction={updateUserWithId}><inputtype=\"text\"name=\"name\"/><buttontype=\"submit\">Update User Name</button></form>)}"
                },
                {
                    "type": "p",
                    "text": "The Server Action will receive theuserIdargument, in addition to the form data:"
                },
                {
                    "type": "code",
                    "code": "'use server'exportasyncfunctionupdateUser(userId,formData) {// ...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "An alternative is to pass arguments as hidden input fields in the form (e.g.<input type=\"hidden\" name=\"userId\" value={userId} />). However, the value will be part of the rendered HTML and will not be encoded.",
                        ".bindworks in both Server and Client Components. It also supports progressive enhancement."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Pending states"
                },
                {
                    "type": "p",
                    "text": "You can use the ReactuseFormStatushook to show a pending state while the form is being submitted."
                },
                {
                    "type": "list",
                    "items": [
                        "useFormStatusreturns the status for a specific<form>, so itmust be defined as a child of the<form>element.",
                        "useFormStatusis a React hook and therefore must be used in a Client Component."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useFormStatus }from'react-dom'exportfunctionSubmitButton() {const{pending}=useFormStatus()return(<buttontype=\"submit\"disabled={pending}>Add</button>)}"
                },
                {
                    "type": "p",
                    "text": "<SubmitButton />can then be nested in any form:"
                },
                {
                    "type": "code",
                    "code": "import{ SubmitButton }from'@/app/submit-button'import{ createItem }from'@/app/actions'// Server ComponentexportdefaultasyncfunctionHome() {return(<formaction={createItem}><inputtype=\"text\"name=\"field-name\"/><SubmitButton/></form>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Server-side validation and error handling"
                },
                {
                    "type": "p",
                    "text": "We recommend using HTML validation likerequiredandtype=\"email\"for basic client-side form validation."
                },
                {
                    "type": "p",
                    "text": "For more advanced server-side validation, you can use a library likezodto validate the form fields before mutating the data:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ z }from'zod'constschema=z.object({email:z.string({invalid_type_error:'Invalid Email',}),})exportdefaultasyncfunctioncreateUser(formData:FormData) {constvalidatedFields=schema.safeParse({email:formData.get('email'),})// Return early if the form data is invalidif(!validatedFields.success) {return{errors:validatedFields.error.flatten().fieldErrors,}}// Mutate data}"
                },
                {
                    "type": "p",
                    "text": "Once the fields have been validated on the server, you can return a serializable object in your action and use the ReactuseFormStatehook to show a message to the user."
                },
                {
                    "type": "list",
                    "items": [
                        "By passing the action touseFormState, the action's function signature changes to receive a newprevStateorinitialStateparameter as its first argument.",
                        "useFormStateis a React hook and therefore must be used in a Client Component."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use server'exportasyncfunctioncreateUser(prevState:any,formData:FormData) {// ...return{message:'Please enter a valid email',}}"
                },
                {
                    "type": "p",
                    "text": "Then, you can pass your action to theuseFormStatehook and use the returnedstateto display an error message."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useFormState }from'react-dom'import{ createUser }from'@/app/actions'constinitialState={message:'',}exportfunctionSignup() {const[state,formAction]=useFormState(createUser,initialState)return(<formaction={formAction}><labelhtmlFor=\"email\">Email</label><inputtype=\"text\"id=\"email\"name=\"email\"required/>{/* ... */}<paria-live=\"polite\"className=\"sr-only\">{state?.message}</p><button>Sign up</button></form>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Before mutating data, you should always ensure a user is also authorized to perform the action. SeeAuthentication and Authorization."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Optimistic updates"
                },
                {
                    "type": "p",
                    "text": "You can use the ReactuseOptimistichook to optimistically update the UI before the Server Action finishes, rather than waiting for the response:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useOptimistic }from'react'import{ send }from'./actions'typeMessage={message:string}exportfunctionThread({ messages }:{ messages:Message[] }) {const[optimisticMessages,addOptimisticMessage]=useOptimistic<Message[],string>(messages,(state,newMessage)=>[...state,{ message:newMessage }])return(<div>{optimisticMessages.map((m,k)=>(<divkey={k}>{m.message}</div>))}<formaction={async(formData:FormData)=>{constmessage=formData.get('message')addOptimisticMessage(message)awaitsend(message)}}><inputtype=\"text\"name=\"message\"/><buttontype=\"submit\">Send</button></form></div>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Nested elements"
                },
                {
                    "type": "p",
                    "text": "You can invoke a Server Action in elements nested inside<form>such as<button>,<input type=\"submit\">, and<input type=\"image\">. These elements accept theformActionprop orevent handlers."
                },
                {
                    "type": "p",
                    "text": "This is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific<button>element for saving a post draft in addition to publishing it. See theReact<form>docsfor more information."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Programmatic form submission"
                },
                {
                    "type": "p",
                    "text": "You can trigger a form submission using therequestSubmit()method. For example, when the user presses⌘+Enter, you can listen for theonKeyDownevent:"
                },
                {
                    "type": "code",
                    "code": "'use client'exportfunctionEntry() {consthandleKeyDown=(e:React.KeyboardEvent<HTMLTextAreaElement>)=>{if((e.ctrlKey||e.metaKey)&&(e.key==='Enter'||e.key==='NumpadEnter')) {e.preventDefault()e.currentTarget.form?.requestSubmit()}}return(<div><textareaname=\"entry\"rows={20}requiredonKeyDown={handleKeyDown} /></div>)}"
                },
                {
                    "type": "p",
                    "text": "This will trigger the submission of the nearest<form>ancestor, which will invoke the Server Action."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Non-form Elements"
                },
                {
                    "type": "p",
                    "text": "While it's common to use Server Actions within<form>elements, they can also be invoked from other parts of your code such as event handlers anduseEffect."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Event Handlers"
                },
                {
                    "type": "p",
                    "text": "You can invoke a Server Action from event handlers such asonClick. For example, to increment a like count:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ incrementLike }from'./actions'import{ useState }from'react'exportdefaultfunctionLikeButton({ initialLikes }:{ initialLikes:number}) {const[likes,setLikes]=useState(initialLikes)return(<><p>Total Likes: {likes}</p><buttononClick={async()=>{constupdatedLikes=awaitincrementLike()setLikes(updatedLikes)}}>Like</button></>)}"
                },
                {
                    "type": "p",
                    "text": "To improve the user experience, we recommend using other React APIs likeuseOptimisticanduseTransitionto update the UI before the Server Action finishes executing on the server, or to show a pending state."
                },
                {
                    "type": "p",
                    "text": "You can also add event handlers to form elements, for example, to save a form fieldonChange:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ publishPost,saveDraft }from'./actions'exportdefaultfunctionEditPost() {return(<formaction={publishPost}><textareaname=\"content\"onChange={async(e)=>{awaitsaveDraft(e.target.value)}}/><buttontype=\"submit\">Publish</button></form>)}"
                },
                {
                    "type": "p",
                    "text": "For cases like this, where multiple events might be fired in quick succession, we recommenddebouncingto prevent unnecessary Server Action invocations."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "useEffect"
                },
                {
                    "type": "p",
                    "text": "You can use the ReactuseEffecthook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example,onKeyDownfor app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ incrementViews }from'./actions'import{ useState,useEffect }from'react'exportdefaultfunctionViewCount({ initialViews }:{ initialViews:number}) {const[views,setViews]=useState(initialViews)useEffect(()=>{constupdateViews=async()=>{constupdatedViews=awaitincrementViews()setViews(updatedViews)}updateViews()},[])return<p>Total Views: {views}</p>}"
                },
                {
                    "type": "p",
                    "text": "Remember to consider thebehavior and caveatsofuseEffect."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Error Handling"
                },
                {
                    "type": "p",
                    "text": "When an error is thrown, it'll be caught by the nearesterror.jsor<Suspense>boundary on the client. We recommend usingtry/catchto return errors to be handled by your UI."
                },
                {
                    "type": "p",
                    "text": "For example, your Server Action might handle errors from creating a new item by returning a message:"
                },
                {
                    "type": "code",
                    "code": "'use server'exportasyncfunctioncreateTodo(prevState:any,formData:FormData) {try{// Mutate data}catch(e) {thrownewError('Failed to create task')}}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Aside from throwing the error, you can also return an object to be handled byuseFormState. SeeServer-side validation and error handling."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating data"
                },
                {
                    "type": "p",
                    "text": "You can revalidate theNext.js Cacheinside your Server Actions with therevalidatePathAPI:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ revalidatePath }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidatePath('/posts')}"
                },
                {
                    "type": "p",
                    "text": "Or invalidate a specific data fetch with a cache tag usingrevalidateTag:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidateTag('posts')}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Redirecting"
                },
                {
                    "type": "p",
                    "text": "If you would like to redirect the user to a different route after the completion of a Server Action, you can useredirectAPI.redirectneeds to be called outside of thetry/catchblock:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ redirect }from'next/navigation'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost(id:string) {try{// ...}catch(error) {// ...}revalidateTag('posts')// Update cached postsredirect(`/post/${id}`)// Navigate to the new post page}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Cookies"
                },
                {
                    "type": "p",
                    "text": "You canget,set, anddeletecookies inside a Server Action using thecookiesAPI:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ cookies }from'next/headers'exportasyncfunctionexampleAction() {// Get cookieconstvalue=cookies().get('name')?.value// Set cookiecookies().set('name','Delba')// Delete cookiecookies().delete('name')}"
                },
                {
                    "type": "p",
                    "text": "Seeadditional examplesfor deleting cookies from Server Actions."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Security"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Authentication and authorization"
                },
                {
                    "type": "p",
                    "text": "You should treat Server Actions as you would public-facing API endpoints, and ensure that the user is authorized to perform the action. For example:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ auth }from'./lib'exportfunctionaddItem() {const{user}=auth()if(!user) {thrownewError('You must be signed in to perform this action')}// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Closures and encryption"
                },
                {
                    "type": "p",
                    "text": "Defining a Server Action inside a component creates aclosurewhere the action has access to the outer function's scope. For example, thepublishaction has access to thepublishVersionvariable:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {constpublishVersion=awaitgetLatestVersion();asyncfunctionpublish(formData:FormData) {\"use server\";if(publishVersion!==awaitgetLatestVersion()) {thrownewError('The version has changed since pressing publish');}...}return<buttonaction={publish}>Publish</button>;}"
                },
                {
                    "type": "p",
                    "text": "Closures are useful when you need to capture asnapshotof data (e.g.publishVersion) at the time of rendering so that it can be used later when the action is invoked."
                },
                {
                    "type": "p",
                    "text": "However, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build."
                },
                {
                    "type": "p",
                    "text": "Good to know:We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use theReact taint APIsto proactively prevent specific data from being sent to the client."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Overwriting encryption keys (advanced)"
                },
                {
                    "type": "p",
                    "text": "When self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies."
                },
                {
                    "type": "p",
                    "text": "To mitigate this, you can overwrite the encryption key using theprocess.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEYenvironment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key."
                },
                {
                    "type": "p",
                    "text": "This is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing."
                },
                {
                    "type": "p",
                    "text": "Good to know:Next.js applications deployed to Vercel automatically handle this."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Allowed origins (advanced)"
                },
                {
                    "type": "p",
                    "text": "Since Server Actions can be invoked in a<form>element, this opens them up toCSRF attacks."
                },
                {
                    "type": "p",
                    "text": "Behind the scenes, Server Actions use thePOSTmethod, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly withSameSite cookiesbeing the default."
                },
                {
                    "type": "p",
                    "text": "As an additional protection, Server Actions in Next.js also compare theOrigin headerto theHost header(orX-Forwarded-Host). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it."
                },
                {
                    "type": "p",
                    "text": "For large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration optionserverActions.allowedOriginsoption to specify a list of safe origins. The option accepts an array of strings."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/module.exports={experimental:{serverActions:{allowedOrigins:['my-proxy.com','*.my-proxy.com'],},},}"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutSecurity and Server Actions."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Additional resources"
                },
                {
                    "type": "p",
                    "text": "For more information on Server Actions, check out the following React docs:"
                },
                {
                    "type": "list",
                    "items": [
                        "\"use server\"",
                        "<form>",
                        "useFormStatus",
                        "useFormState",
                        "useOptimistic"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "serverActions"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration",
            "title": "Data Fetching: Incremental Static Regeneration (ISR) | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Canary Version"
                },
                {
                    "type": "p",
                    "text": "v15.0.0"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Incremental Static Regeneration (ISR)"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Commerce",
                        "On-Demand ISR",
                        "Next.js Forms"
                    ]
                },
                {
                    "type": "p",
                    "text": "Incremental Static Regeneration (ISR) enables you to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Update static content without rebuilding the entire site",
                        "Reduce server load by serving prerendered, static pages for most requests",
                        "Ensure propercache-controlheaders are automatically added to pages",
                        "Handle large amounts of content pages without longnext buildtimes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Here's a minimal example:"
                },
                {
                    "type": "code",
                    "code": "interfacePost{id:stringtitle:stringcontent:string}// Next.js will invalidate the cache when a// request comes in, at most once every 60 seconds.exportconstrevalidate=60// We'll prerender only the params from `generateStaticParams` at build time.// If a request comes in for a path that hasn't been generated,// Next.js will server-render the page on-demand.exportconstdynamicParams=true// or false, to 404 on unknown pathsexportasyncfunctiongenerateStaticParams() {constposts:Post[]=awaitfetch('https://api.vercel.app/blog').then((res)=>res.json())returnposts.map((post)=>({id:String(post.id),}))}exportdefaultasyncfunctionPage({ params }:{ params:{ id:string} }) {constpost=awaitfetch(`https://api.vercel.app/blog/${params.id}`).then((res)=>res.json())return(<main><h1>{post.title}</h1><p>{post.content}</p></main>)}"
                },
                {
                    "type": "p",
                    "text": "Here's how this example works:"
                },
                {
                    "type": "list",
                    "items": [
                        "Duringnext build, all known blog posts are generated (there are 25 in this example)",
                        "All requests made to these pages (e.g./blog/1) are cached and instantaneous",
                        "After 60 seconds has passed, the next request will still show the cached (stale) page",
                        "The cache is invalidated and a new version of the page begins generating in the background",
                        "Once generated successfully, Next.js will display and cache the updated page",
                        "If/blog/26is requested, Next.js will generate and cache this page on-demand"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route segment config"
                },
                {
                    "type": "list",
                    "items": [
                        "revalidate",
                        "dynamicParams"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Functions"
                },
                {
                    "type": "list",
                    "items": [
                        "revalidatePath",
                        "revalidateTag"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Time-based revalidation"
                },
                {
                    "type": "p",
                    "text": "This fetches and displays a list of blog posts on/blog. After an hour, the cache for this page is invalidated on the next visit to the page. Then, in the background, a new version of the page is generated with the latest blog posts."
                },
                {
                    "type": "code",
                    "code": "exportconstrevalidate=3600// invalidate every hourexportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog')constposts=awaitdata.json()return(<main><h1>Blog Posts</h1><ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul></main>)}"
                },
                {
                    "type": "p",
                    "text": "We recommend setting a high revalidation time. For instance, 1 hour instead of 1 second. If you need more precision, consider using on-demand revalidation. If you need real-time data, consider switching todynamic rendering."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "On-demand revalidation withrevalidatePath"
                },
                {
                    "type": "p",
                    "text": "For a more precise method of revalidation, invalidate pages on-demand with therevalidatePathfunction."
                },
                {
                    "type": "p",
                    "text": "For example, this Server Action would get called after adding a new post. Regardless of how you retrieve your data in your Server Component, either usingfetchor connecting to a database, this will clear the cache for the entire route and allow the Server Component to fetch fresh data."
                },
                {
                    "type": "code",
                    "code": "'use server'import{ revalidatePath }from'next/cache'exportasyncfunctioncreatePost() {// Invalidate the /posts route in the cacherevalidatePath('/posts')}"
                },
                {
                    "type": "p",
                    "text": "View a demoandexplore the source code."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "On-demand revalidation withrevalidateTag"
                },
                {
                    "type": "p",
                    "text": "For most use cases, prefer revalidating entire paths. If you need more granular control, you can use therevalidateTagfunction. For example, you can tag individualfetchcalls:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog',{next:{ tags:['posts'] },})constposts=awaitdata.json()// ...}"
                },
                {
                    "type": "p",
                    "text": "If you are using an ORM or connecting to a database, you can useunstable_cache:"
                },
                {
                    "type": "code",
                    "code": "import{ unstable_cache }from'next/cache'import{ db,posts }from'@/lib/db'constgetCachedPosts=unstable_cache(async()=>{returnawaitdb.select().from(posts)},['posts'],{ revalidate:3600,tags:['posts'] })exportdefaultasyncfunctionPage() {constposts=getCachedPosts()// ...}"
                },
                {
                    "type": "p",
                    "text": "You can then userevalidateTagin aServer ActionsorRoute Handler:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost() {// Invalidate all data tagged with 'posts' in the cacherevalidateTag('posts')}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Handling uncaught exceptions"
                },
                {
                    "type": "p",
                    "text": "If an error is thrown while attempting to revalidate data, the last successfully generated data will continue to be served from the cache. On the next subsequent request, Next.js will retry revalidating the data.Learn more about error handling."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing the cache location"
                },
                {
                    "type": "p",
                    "text": "Caching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. Whendeploying to Vercel, the ISR cache is automatically persisted to durable storage."
                },
                {
                    "type": "p",
                    "text": "When self-hosting, the ISR cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router."
                },
                {
                    "type": "p",
                    "text": "You can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application.Learn more."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Troubleshooting"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Debugging cached data in local development"
                },
                {
                    "type": "p",
                    "text": "If you are using thefetchAPI, you can add additional logging to understand which requests are cached or uncached.Learn more about theloggingoption."
                },
                {
                    "type": "code",
                    "code": "module.exports={logging:{fetches:{fullUrl:true,},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Verifying correct production behavior"
                },
                {
                    "type": "p",
                    "text": "To verify your pages are cached and revalidated correctly in production, you can test locally by runningnext buildand thennext startto run the production Next.js server."
                },
                {
                    "type": "p",
                    "text": "This will allow you to test ISR behavior as it would work in a production environment. For further debugging, add the following environment variable to your.envfile:"
                },
                {
                    "type": "code",
                    "code": "NEXT_PRIVATE_DEBUG_CACHE=1"
                },
                {
                    "type": "p",
                    "text": "This will make the Next.js server console log ISR cache hits and misses. You can inspect the output to see which pages are generated duringnext build, as well as how pages are updated as paths are accessed on-demand."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Caveats"
                },
                {
                    "type": "list",
                    "items": [
                        "ISR is only supported when using the Node.js runtime (default).",
                        "ISR is not supported when creating aStatic Export.",
                        "If you have multiplefetchrequests in a statically rendered route, and each has a differentrevalidatefrequency, the lowest time will be used for ISR. However, those revalidate frequencies will still be respected by theData Cache.",
                        "If any of thefetchrequests used on a route have arevalidatetime of0, or an explicitno-store, the route will bedynamically rendered.",
                        "Middleware won't be executed for on-demand ISR requests, meaning any path rewrites or logic in Middleware will not be applied. Ensure you are revalidating the exact path. For example,/post/1instead of a rewritten/post-1."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version history"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/patterns",
            "title": "Data Fetching: Data Fetching and Caching | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Data Fetching and Caching"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Commerce",
                        "On-Demand ISR",
                        "Next.js Forms"
                    ]
                },
                {
                    "type": "p",
                    "text": "This guide will walk you through the basics of data fetching and caching in Next.js, providing practical examples and best practices."
                },
                {
                    "type": "p",
                    "text": "Here's a minimal example of data fetching in Next.js:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {letdata=awaitfetch('https://api.vercel.app/blog')letposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "This example demonstrates a basic server-side data fetch using thefetchAPI in an asynchronous React Server Component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reference"
                },
                {
                    "type": "list",
                    "items": [
                        "fetch",
                        "Reactcache",
                        "Next.jsunstable_cache"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fetching data on the server with thefetchAPI"
                },
                {
                    "type": "p",
                    "text": "This component will fetch and display a list of blog posts. The response fromfetchwill be automatically cached."
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {letdata=awaitfetch('https://api.vercel.app/blog')letposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "If you are not using anyDynamic APIsanywhere else in this route, it will be prerendered duringnext buildto a static page. The data can then be updated usingIncremental Static Regeneration."
                },
                {
                    "type": "p",
                    "text": "If you donotwant to cache the response fromfetch, you can do the following:"
                },
                {
                    "type": "code",
                    "code": "letdata=awaitfetch('https://api.vercel.app/blog',{ cache:'no-store'})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fetching data on the server with an ORM or database"
                },
                {
                    "type": "p",
                    "text": "This component will fetch and display a list of blog posts. The response from the database is not cached by default but could be withadditional configuration."
                },
                {
                    "type": "code",
                    "code": "import{ db,posts }from'@/lib/db'exportdefaultasyncfunctionPage() {letallPosts=awaitdb.select().from(posts)return(<ul>{allPosts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "If you are not using anyDynamic APIsanywhere else in this route, it will be prerendered duringnext buildto a static page. The data can then be updated usingIncremental Static Regeneration."
                },
                {
                    "type": "p",
                    "text": "To prevent the page from prerendering, you can add the following to your file:"
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='force-dynamic'"
                },
                {
                    "type": "p",
                    "text": "However, you will commonly use functions likecookies,headers, or reading the incomingsearchParamsfrom the page props, which will automatically make the page render dynamically. In this case, you donotneed to explicitly useforce-dynamic."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fetching data on the client"
                },
                {
                    "type": "p",
                    "text": "We recommend first attempting to fetch data on the server-side."
                },
                {
                    "type": "p",
                    "text": "However, there are still cases where client-side data fetching makes sense. In these scenarios, you can manually callfetchin auseEffect(not recommended), or lean on popular React libraries in the community (such asSWRorReact Query) for client fetching."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useState,useEffect }from'react'exportfunctionPosts() {const[posts,setPosts]=useState(null)useEffect(()=>{asyncfunctionfetchPosts() {letres=awaitfetch('https://api.vercel.app/blog')letdata=awaitres.json()setPosts(data)}fetchPosts()},[])if(!posts)return<div>Loading...</div>return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caching data with an ORM or Database"
                },
                {
                    "type": "p",
                    "text": "You can use theunstable_cacheAPI to cache the response to allow pages to be prerendered when runningnext build."
                },
                {
                    "type": "code",
                    "code": "import{ unstable_cache }from'next/cache'import{ db,posts }from'@/lib/db'constgetPosts=unstable_cache(async()=>{returnawaitdb.select().from(posts)},['posts'],{ revalidate:3600,tags:['posts'] })exportdefaultasyncfunctionPage() {constallPosts=awaitgetPosts()return(<ul>{allPosts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "This example caches the result of the database query for 1 hour (3600 seconds). It also adds the cache tagpostswhich can then be invalidated withIncremental Static Regeneration."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reusing data across multiple functions"
                },
                {
                    "type": "p",
                    "text": "Next.js uses APIs likegenerateMetadataandgenerateStaticParamswhere you will need to use the same data fetched in thepage."
                },
                {
                    "type": "p",
                    "text": "If you are usingfetch, requests are automaticallymemoized. This means you can safely call the same URL with the same options, and only one request will be made."
                },
                {
                    "type": "code",
                    "code": "import{ notFound }from'next/navigation'interfacePost{id:stringtitle:stringcontent:string}asyncfunctiongetPost(id:string) {letres=awaitfetch(`https://api.vercel.app/blog/${id}`)letpost:Post=awaitres.json()if(!post)notFound()returnpost}exportasyncfunctiongenerateStaticParams() {letposts=awaitfetch('https://api.vercel.app/blog').then((res)=>res.json())returnposts.map((post:Post)=>({id:post.id,}))}exportasyncfunctiongenerateMetadata({ params }:{ params:{ id:string} }) {letpost=awaitgetPost(params.id)return{title:post.title,}}exportdefaultasyncfunctionPage({ params }:{ params:{ id:string} }) {letpost=awaitgetPost(params.id)return(<article><h1>{post.title}</h1><p>{post.content}</p></article>)}"
                },
                {
                    "type": "p",
                    "text": "If you arenotusingfetch, and instead using an ORM or database directly, you can wrap your data fetch with the Reactcachefunction. This will de-duplicate and only make one query."
                },
                {
                    "type": "code",
                    "code": "import{ cache }from'react'import{ db,posts,eq }from'@/lib/db'// Example with Drizzle ORMimport{ notFound }from'next/navigation'exportconstgetPost=cache(async(id)=>{constpost=awaitdb.query.posts.findFirst({where:eq(posts.id,parseInt(id)),})if(!post)notFound()returnpost})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating cached data"
                },
                {
                    "type": "p",
                    "text": "Learn more about revalidating cached data withIncremental Static Regeneration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Patterns"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Parallel and sequential data fetching"
                },
                {
                    "type": "p",
                    "text": "When fetching data inside components, you need to be aware of two data fetching patterns: Parallel and Sequential."
                },
                {
                    "type": "list",
                    "items": [
                        "Sequential: requests in a component tree are dependent on each other. This can lead to longer loading times.",
                        "Parallel: requests in a route are eagerly initiated and will load data at the same time. This reduces the total time it takes to load data."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Sequential data fetching"
                },
                {
                    "type": "p",
                    "text": "If you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are notmemoized."
                },
                {
                    "type": "p",
                    "text": "There may be cases where you want this pattern because one fetch depends on the result of the other. For example, thePlaylistscomponent will only start fetching data once theArtistcomponent has finished fetching data becausePlaylistsdepends on theartistIDprop:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage({params: { username },}:{params:{ username:string}}) {// Getartistinformationconstartist=awaitgetArtist(username)return(<><h1>{artist.name}</h1>{/* Show fallback UI while the Playlists component is loading */}<Suspensefallback={<div>Loading...</div>}>{/* Pass theartistID to the Playlists component */}<PlaylistsartistID={artist.id} /></Suspense></>)}asyncfunctionPlaylists({artistID }:{artistID:string}) {// Use theartistID to fetch playlistsconstplaylists=awaitgetArtistPlaylists(artistID)return(<ul>{playlists.map((playlist)=>(<likey={playlist.id}>{playlist.name}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "You can useloading.js(for route segments) orReact<Suspense>(for nested components) to show an instant loading state while React streams in the result."
                },
                {
                    "type": "p",
                    "text": "This will prevent the whole route from being blocked by data requests, and the user will be able to interact with the parts of the page that are ready."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Parallel Data Fetching"
                },
                {
                    "type": "p",
                    "text": "By default, layout and page segments are rendered in parallel. This means requests will be initiated in parallel."
                },
                {
                    "type": "p",
                    "text": "However, due to the nature ofasync/await, an awaited request inside the same segment or component will block any requests below it."
                },
                {
                    "type": "p",
                    "text": "To fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved."
                },
                {
                    "type": "p",
                    "text": "In the example below, thegetArtistandgetAlbumsfunctions are defined outside thePagecomponent and initiated inside the component usingPromise.all:"
                },
                {
                    "type": "code",
                    "code": "importAlbumsfrom'./albums'asyncfunctiongetArtist(username:string) {constres=awaitfetch(`https://api.example.com/artist/${username}`)returnres.json()}asyncfunctiongetAlbums(username:string) {constres=awaitfetch(`https://api.example.com/artist/${username}/albums`)returnres.json()}exportdefaultasyncfunctionPage({params: { username },}:{params:{ username:string}}) {constartistData=getArtist(username)constalbumsData=getAlbums(username)// Initiate both requests in parallelconst[artist,albums]=awaitPromise.all([artistData,albumsData])return(<><h1>{artist.name}</h1><Albumslist={albums} /></>)}"
                },
                {
                    "type": "p",
                    "text": "In addition, you can add aSuspense Boundaryto break up the rendering work and show part of the result as soon as possible."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Preloading Data"
                },
                {
                    "type": "p",
                    "text": "Another way to prevent waterfalls is to use thepreloadpattern by creating an utility function that you eagerly call above blocking requests. For example,checkIsAvailable()blocks<Item/>from rendering, so you can callpreload()before it to eagerly initiate<Item/>data dependencies. By the time<Item/>is rendered, its data has already been fetched."
                },
                {
                    "type": "p",
                    "text": "Note thatpreloadfunction doesn't blockcheckIsAvailable()from running."
                },
                {
                    "type": "code",
                    "code": "import{ getItem }from'@/utils/get-item'exportconstpreload=(id:string)=>{// void evaluates the given expression and returns undefined// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/voidvoidgetItem(id)}exportdefaultasyncfunctionItem({ id }:{ id:string}) {constresult=awaitgetItem(id)// ...}"
                },
                {
                    "type": "code",
                    "code": "importItem,{ preload,checkIsAvailable }from'@/components/Item'exportdefaultasyncfunctionPage({params: { id },}:{params:{ id:string}}) {// starting loadingitemdatapreload(id)// perform another asynchronous taskconstisAvailable=awaitcheckIsAvailable()returnisAvailable?<Itemid={id} />:null}"
                },
                {
                    "type": "p",
                    "text": "Good to know:The \"preload\" function can also have any name as it's a pattern, not an API."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Using Reactcacheandserver-onlywith the Preload Pattern"
                },
                {
                    "type": "p",
                    "text": "You can combine thecachefunction, thepreloadpattern, and theserver-onlypackage to create a data fetching utility that can be used throughout your app."
                },
                {
                    "type": "code",
                    "code": "import{ cache }from'react'import'server-only'exportconstpreload=(id:string)=>{voidgetItem(id)}exportconstgetItem=cache(async(id:string)=>{// ...})"
                },
                {
                    "type": "p",
                    "text": "With this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetchingonly happens on the server."
                },
                {
                    "type": "p",
                    "text": "Theutils/get-itemexports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "We recommend using theserver-onlypackageto make sure server data fetching functions are never used on the client."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Preventing sensitive data from being exposed to the client"
                },
                {
                    "type": "p",
                    "text": "We recommend using React's taint APIs,taintObjectReferenceandtaintUniqueValue, to prevent whole object instances or sensitive values from being passed to the client."
                },
                {
                    "type": "p",
                    "text": "To enable tainting in your application, set the Next.js Configexperimental.taintoption totrue:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{taint:true,},}"
                },
                {
                    "type": "p",
                    "text": "Then pass the object or value you want to taint to theexperimental_taintObjectReferenceorexperimental_taintUniqueValuefunctions:"
                },
                {
                    "type": "code",
                    "code": "import{ queryDataFromDB }from'./api'import{experimental_taintObjectReference,experimental_taintUniqueValue,}from'react'exportasyncfunctiongetUserData() {constdata=awaitqueryDataFromDB()experimental_taintObjectReference('Do not pass the whole user object to the client',data)experimental_taintUniqueValue(\"Do not pass the user's address to the client\",data,data.address)returndata}"
                },
                {
                    "type": "code",
                    "code": "import{ getUserData }from'./data'exportasyncfunctionPage() {constuserData=getUserData()return(<ClientComponentuser={userData}// this will cause an error because of taintObjectReferenceaddress={userData.address}// this will cause an error because of taintUniqueValue/>)}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations",
            "title": "Data Fetching: Server Actions and Mutations | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Server Actions and Mutations"
                },
                {
                    "type": "p",
                    "text": "Server Actions areasynchronous functionsthat are executed on the server. They can be used in Server and Client Components to handle form submissions and data mutations in Next.js applications."
                },
                {
                    "type": "p",
                    "text": "🎥 Watch:Learn more about forms and mutations with Server Actions →YouTube (10 minutes)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "A Server Action can be defined with the React\"use server\"directive. You can place the directive at the top of anasyncfunction to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Components"
                },
                {
                    "type": "p",
                    "text": "Server Components can use the inline function level or module level\"use server\"directive. To inline a Server Action, add\"use server\"to the top of the function body:"
                },
                {
                    "type": "code",
                    "code": "// Server ComponentexportdefaultfunctionPage() {// Server Actionasyncfunctioncreate() {'use server'// ...}return(// ...)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client Components"
                },
                {
                    "type": "p",
                    "text": "Client Components can only import actions that use the module-level\"use server\"directive."
                },
                {
                    "type": "p",
                    "text": "To call a Server Action in a Client Component, create a new file and add the\"use server\"directive at the top of it. All functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:"
                },
                {
                    "type": "code",
                    "code": "'use server'exportasyncfunctioncreate() {// ...}"
                },
                {
                    "type": "code",
                    "code": "import{ create }from'@/app/actions'exportfunctionButton() {return(// ...)}"
                },
                {
                    "type": "p",
                    "text": "You can also pass a Server Action to a Client Component as a prop:"
                },
                {
                    "type": "code",
                    "code": "<ClientComponentupdateItem={updateItem} />"
                },
                {
                    "type": "code",
                    "code": "'use client'exportdefaultfunctionClientComponent({ updateItem }) {return<formaction={updateItem}>{/* ... */}</form>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Behavior"
                },
                {
                    "type": "list",
                    "items": [
                        "Server actions can be invoked using theactionattribute in a<form>element:Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.After hydration, the browser does not refresh on form submission.",
                        "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
                        "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
                        "After hydration, the browser does not refresh on form submission.",
                        "Server Actions are not limited to<form>and can be invoked from event handlers,useEffect, third-party libraries, and other form elements like<button>.",
                        "Server Actions integrate with the Next.jscaching and revalidationarchitecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.",
                        "Behind the scenes, actions use thePOSTmethod, and only this HTTP method can invoke them.",
                        "The arguments and return value of Server Actions must be serializable by React. See the React docs for a list ofserializable arguments and values.",
                        "Server Actions are functions. This means they can be reused anywhere in your application.",
                        "Server Actions inherit theruntimefrom the page or layout they are used on.",
                        "Server Actions inherit theRoute Segment Configfrom the page or layout they are used on, including fields likemaxDuration."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
                        "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
                        "After hydration, the browser does not refresh on form submission."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Forms"
                },
                {
                    "type": "p",
                    "text": "React extends the HTML<form>element to allow Server Actions to be invoked with theactionprop."
                },
                {
                    "type": "p",
                    "text": "When invoked in a form, the action automatically receives theFormDataobject. You don't need to use ReactuseStateto manage fields, instead, you can extract the data using the nativeFormDatamethods:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {asyncfunctioncreateInvoice(formData:FormData) {'use server'constrawFormData={customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),}// mutate data// revalidate cache}return<formaction={createInvoice}>...</form>}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Example:Form with Loading & Error States",
                        "When working with forms that have many fields, you may want to consider using theentries()method with JavaScript'sObject.fromEntries(). For example:const rawFormData = Object.fromEntries(formData). One thing to note is that theformDatawill include additional$ACTION_properties.",
                        "SeeReact<form>documentationto learn more."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Passing Additional Arguments"
                },
                {
                    "type": "p",
                    "text": "You can pass additional arguments to a Server Action using the JavaScriptbindmethod."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ updateUser }from'./actions'exportfunctionUserProfile({ userId }:{ userId:string}) {constupdateUserWithId=updateUser.bind(null,userId)return(<formaction={updateUserWithId}><inputtype=\"text\"name=\"name\"/><buttontype=\"submit\">Update User Name</button></form>)}"
                },
                {
                    "type": "p",
                    "text": "The Server Action will receive theuserIdargument, in addition to the form data:"
                },
                {
                    "type": "code",
                    "code": "'use server'exportasyncfunctionupdateUser(userId,formData) {// ...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "An alternative is to pass arguments as hidden input fields in the form (e.g.<input type=\"hidden\" name=\"userId\" value={userId} />). However, the value will be part of the rendered HTML and will not be encoded.",
                        ".bindworks in both Server and Client Components. It also supports progressive enhancement."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Pending states"
                },
                {
                    "type": "p",
                    "text": "You can use the ReactuseFormStatushook to show a pending state while the form is being submitted."
                },
                {
                    "type": "list",
                    "items": [
                        "useFormStatusreturns the status for a specific<form>, so itmust be defined as a child of the<form>element.",
                        "useFormStatusis a React hook and therefore must be used in a Client Component."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useFormStatus }from'react-dom'exportfunctionSubmitButton() {const{pending}=useFormStatus()return(<buttontype=\"submit\"disabled={pending}>Add</button>)}"
                },
                {
                    "type": "p",
                    "text": "<SubmitButton />can then be nested in any form:"
                },
                {
                    "type": "code",
                    "code": "import{ SubmitButton }from'@/app/submit-button'import{ createItem }from'@/app/actions'// Server ComponentexportdefaultasyncfunctionHome() {return(<formaction={createItem}><inputtype=\"text\"name=\"field-name\"/><SubmitButton/></form>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Server-side validation and error handling"
                },
                {
                    "type": "p",
                    "text": "We recommend using HTML validation likerequiredandtype=\"email\"for basic client-side form validation."
                },
                {
                    "type": "p",
                    "text": "For more advanced server-side validation, you can use a library likezodto validate the form fields before mutating the data:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ z }from'zod'constschema=z.object({email:z.string({invalid_type_error:'Invalid Email',}),})exportdefaultasyncfunctioncreateUser(formData:FormData) {constvalidatedFields=schema.safeParse({email:formData.get('email'),})// Return early if the form data is invalidif(!validatedFields.success) {return{errors:validatedFields.error.flatten().fieldErrors,}}// Mutate data}"
                },
                {
                    "type": "p",
                    "text": "Once the fields have been validated on the server, you can return a serializable object in your action and use the ReactuseFormStatehook to show a message to the user."
                },
                {
                    "type": "list",
                    "items": [
                        "By passing the action touseFormState, the action's function signature changes to receive a newprevStateorinitialStateparameter as its first argument.",
                        "useFormStateis a React hook and therefore must be used in a Client Component."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use server'exportasyncfunctioncreateUser(prevState:any,formData:FormData) {// ...return{message:'Please enter a valid email',}}"
                },
                {
                    "type": "p",
                    "text": "Then, you can pass your action to theuseFormStatehook and use the returnedstateto display an error message."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useFormState }from'react-dom'import{ createUser }from'@/app/actions'constinitialState={message:'',}exportfunctionSignup() {const[state,formAction]=useFormState(createUser,initialState)return(<formaction={formAction}><labelhtmlFor=\"email\">Email</label><inputtype=\"text\"id=\"email\"name=\"email\"required/>{/* ... */}<paria-live=\"polite\"className=\"sr-only\">{state?.message}</p><button>Sign up</button></form>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Before mutating data, you should always ensure a user is also authorized to perform the action. SeeAuthentication and Authorization."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Optimistic updates"
                },
                {
                    "type": "p",
                    "text": "You can use the ReactuseOptimistichook to optimistically update the UI before the Server Action finishes, rather than waiting for the response:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useOptimistic }from'react'import{ send }from'./actions'typeMessage={message:string}exportfunctionThread({ messages }:{ messages:Message[] }) {const[optimisticMessages,addOptimisticMessage]=useOptimistic<Message[],string>(messages,(state,newMessage)=>[...state,{ message:newMessage }])return(<div>{optimisticMessages.map((m,k)=>(<divkey={k}>{m.message}</div>))}<formaction={async(formData:FormData)=>{constmessage=formData.get('message')addOptimisticMessage(message)awaitsend(message)}}><inputtype=\"text\"name=\"message\"/><buttontype=\"submit\">Send</button></form></div>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Nested elements"
                },
                {
                    "type": "p",
                    "text": "You can invoke a Server Action in elements nested inside<form>such as<button>,<input type=\"submit\">, and<input type=\"image\">. These elements accept theformActionprop orevent handlers."
                },
                {
                    "type": "p",
                    "text": "This is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific<button>element for saving a post draft in addition to publishing it. See theReact<form>docsfor more information."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Programmatic form submission"
                },
                {
                    "type": "p",
                    "text": "You can trigger a form submission using therequestSubmit()method. For example, when the user presses⌘+Enter, you can listen for theonKeyDownevent:"
                },
                {
                    "type": "code",
                    "code": "'use client'exportfunctionEntry() {consthandleKeyDown=(e:React.KeyboardEvent<HTMLTextAreaElement>)=>{if((e.ctrlKey||e.metaKey)&&(e.key==='Enter'||e.key==='NumpadEnter')) {e.preventDefault()e.currentTarget.form?.requestSubmit()}}return(<div><textareaname=\"entry\"rows={20}requiredonKeyDown={handleKeyDown} /></div>)}"
                },
                {
                    "type": "p",
                    "text": "This will trigger the submission of the nearest<form>ancestor, which will invoke the Server Action."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Non-form Elements"
                },
                {
                    "type": "p",
                    "text": "While it's common to use Server Actions within<form>elements, they can also be invoked from other parts of your code such as event handlers anduseEffect."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Event Handlers"
                },
                {
                    "type": "p",
                    "text": "You can invoke a Server Action from event handlers such asonClick. For example, to increment a like count:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ incrementLike }from'./actions'import{ useState }from'react'exportdefaultfunctionLikeButton({ initialLikes }:{ initialLikes:number}) {const[likes,setLikes]=useState(initialLikes)return(<><p>Total Likes: {likes}</p><buttononClick={async()=>{constupdatedLikes=awaitincrementLike()setLikes(updatedLikes)}}>Like</button></>)}"
                },
                {
                    "type": "p",
                    "text": "To improve the user experience, we recommend using other React APIs likeuseOptimisticanduseTransitionto update the UI before the Server Action finishes executing on the server, or to show a pending state."
                },
                {
                    "type": "p",
                    "text": "You can also add event handlers to form elements, for example, to save a form fieldonChange:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ publishPost,saveDraft }from'./actions'exportdefaultfunctionEditPost() {return(<formaction={publishPost}><textareaname=\"content\"onChange={async(e)=>{awaitsaveDraft(e.target.value)}}/><buttontype=\"submit\">Publish</button></form>)}"
                },
                {
                    "type": "p",
                    "text": "For cases like this, where multiple events might be fired in quick succession, we recommenddebouncingto prevent unnecessary Server Action invocations."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "useEffect"
                },
                {
                    "type": "p",
                    "text": "You can use the ReactuseEffecthook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example,onKeyDownfor app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ incrementViews }from'./actions'import{ useState,useEffect }from'react'exportdefaultfunctionViewCount({ initialViews }:{ initialViews:number}) {const[views,setViews]=useState(initialViews)useEffect(()=>{constupdateViews=async()=>{constupdatedViews=awaitincrementViews()setViews(updatedViews)}updateViews()},[])return<p>Total Views: {views}</p>}"
                },
                {
                    "type": "p",
                    "text": "Remember to consider thebehavior and caveatsofuseEffect."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Error Handling"
                },
                {
                    "type": "p",
                    "text": "When an error is thrown, it'll be caught by the nearesterror.jsor<Suspense>boundary on the client. We recommend usingtry/catchto return errors to be handled by your UI."
                },
                {
                    "type": "p",
                    "text": "For example, your Server Action might handle errors from creating a new item by returning a message:"
                },
                {
                    "type": "code",
                    "code": "'use server'exportasyncfunctioncreateTodo(prevState:any,formData:FormData) {try{// Mutate data}catch(e) {thrownewError('Failed to create task')}}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Aside from throwing the error, you can also return an object to be handled byuseFormState. SeeServer-side validation and error handling."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating data"
                },
                {
                    "type": "p",
                    "text": "You can revalidate theNext.js Cacheinside your Server Actions with therevalidatePathAPI:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ revalidatePath }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidatePath('/posts')}"
                },
                {
                    "type": "p",
                    "text": "Or invalidate a specific data fetch with a cache tag usingrevalidateTag:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidateTag('posts')}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Redirecting"
                },
                {
                    "type": "p",
                    "text": "If you would like to redirect the user to a different route after the completion of a Server Action, you can useredirectAPI.redirectneeds to be called outside of thetry/catchblock:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ redirect }from'next/navigation'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost(id:string) {try{// ...}catch(error) {// ...}revalidateTag('posts')// Update cached postsredirect(`/post/${id}`)// Navigate to the new post page}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Cookies"
                },
                {
                    "type": "p",
                    "text": "You canget,set, anddeletecookies inside a Server Action using thecookiesAPI:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ cookies }from'next/headers'exportasyncfunctionexampleAction() {// Get cookieconstvalue=cookies().get('name')?.value// Set cookiecookies().set('name','Delba')// Delete cookiecookies().delete('name')}"
                },
                {
                    "type": "p",
                    "text": "Seeadditional examplesfor deleting cookies from Server Actions."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Security"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Authentication and authorization"
                },
                {
                    "type": "p",
                    "text": "You should treat Server Actions as you would public-facing API endpoints, and ensure that the user is authorized to perform the action. For example:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ auth }from'./lib'exportfunctionaddItem() {const{user}=auth()if(!user) {thrownewError('You must be signed in to perform this action')}// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Closures and encryption"
                },
                {
                    "type": "p",
                    "text": "Defining a Server Action inside a component creates aclosurewhere the action has access to the outer function's scope. For example, thepublishaction has access to thepublishVersionvariable:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {constpublishVersion=awaitgetLatestVersion();asyncfunctionpublish(formData:FormData) {\"use server\";if(publishVersion!==awaitgetLatestVersion()) {thrownewError('The version has changed since pressing publish');}...}return<buttonaction={publish}>Publish</button>;}"
                },
                {
                    "type": "p",
                    "text": "Closures are useful when you need to capture asnapshotof data (e.g.publishVersion) at the time of rendering so that it can be used later when the action is invoked."
                },
                {
                    "type": "p",
                    "text": "However, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build."
                },
                {
                    "type": "p",
                    "text": "Good to know:We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use theReact taint APIsto proactively prevent specific data from being sent to the client."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Overwriting encryption keys (advanced)"
                },
                {
                    "type": "p",
                    "text": "When self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies."
                },
                {
                    "type": "p",
                    "text": "To mitigate this, you can overwrite the encryption key using theprocess.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEYenvironment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key."
                },
                {
                    "type": "p",
                    "text": "This is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing."
                },
                {
                    "type": "p",
                    "text": "Good to know:Next.js applications deployed to Vercel automatically handle this."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Allowed origins (advanced)"
                },
                {
                    "type": "p",
                    "text": "Since Server Actions can be invoked in a<form>element, this opens them up toCSRF attacks."
                },
                {
                    "type": "p",
                    "text": "Behind the scenes, Server Actions use thePOSTmethod, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly withSameSite cookiesbeing the default."
                },
                {
                    "type": "p",
                    "text": "As an additional protection, Server Actions in Next.js also compare theOrigin headerto theHost header(orX-Forwarded-Host). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it."
                },
                {
                    "type": "p",
                    "text": "For large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration optionserverActions.allowedOriginsoption to specify a list of safe origins. The option accepts an array of strings."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/module.exports={experimental:{serverActions:{allowedOrigins:['my-proxy.com','*.my-proxy.com'],},},}"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutSecurity and Server Actions."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Additional resources"
                },
                {
                    "type": "p",
                    "text": "For more information on Server Actions, check out the following React docs:"
                },
                {
                    "type": "list",
                    "items": [
                        "\"use server\"",
                        "<form>",
                        "useFormStatus",
                        "useFormState",
                        "useOptimistic"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "serverActions"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/deploying",
            "title": "Building Your Application: Deploying | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Deploying"
                },
                {
                    "type": "p",
                    "text": "Congratulations, it's time to ship to production."
                },
                {
                    "type": "p",
                    "text": "You can deploymanaged Next.js with Vercel, or self-host on a Node.js server, Docker image, or even static HTML files. When deploying usingnext start, all Next.js features are supported."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Production Builds"
                },
                {
                    "type": "p",
                    "text": "Runningnext buildgenerates an optimized version of your application for production. HTML, CSS, and JavaScript files are created based on your pages. JavaScript iscompiledand browser bundles areminifiedusing theNext.js Compilerto help achieve the best performance and supportall modern browsers."
                },
                {
                    "type": "p",
                    "text": "Next.js produces a standard deployment output used by managed and self-hosted Next.js. This ensures all features are supported across both methods of deployment. In the next major version, we will be transforming this output into ourBuild Output API specification."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Managed Next.js with Vercel"
                },
                {
                    "type": "p",
                    "text": "Vercel, the creators and maintainers of Next.js, provide managed infrastructure and a developer experience platform for your Next.js applications."
                },
                {
                    "type": "p",
                    "text": "Deploying to Vercel is zero-configuration and provides additional enhancements for scalability, availability, and performance globally. However, all Next.js features are still supported when self-hosted."
                },
                {
                    "type": "p",
                    "text": "Learn more aboutNext.js on Vercelordeploy a template for freeto try it out."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Self-Hosting"
                },
                {
                    "type": "p",
                    "text": "You can self-host Next.js in three different ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "A Node.js server",
                        "A Docker container",
                        "A static export"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Node.js Server"
                },
                {
                    "type": "p",
                    "text": "Next.js can be deployed to any hosting provider that supports Node.js. Ensure yourpackage.jsonhas the\"build\"and\"start\"scripts:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\"}}"
                },
                {
                    "type": "p",
                    "text": "Then, runnpm run buildto build your application. Finally, runnpm run startto start the Node.js server. This server supports all Next.js features."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Docker Image"
                },
                {
                    "type": "p",
                    "text": "Next.js can be deployed to any hosting provider that supportsDockercontainers. You can use this approach when deploying to container orchestrators such asKubernetesor when running inside a container in any cloud provider."
                },
                {
                    "type": "list",
                    "items": [
                        "Install Dockeron your machine",
                        "Clone our example(or themulti-environment example)",
                        "Build your container:docker build -t nextjs-docker .",
                        "Run your container:docker run -p 3000:3000 nextjs-docker"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js through Docker supports all Next.js features."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static HTML Export"
                },
                {
                    "type": "p",
                    "text": "Next.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server."
                },
                {
                    "type": "p",
                    "text": "Since Next.js supports thisstatic export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets. This includes tools like AWS S3, Nginx, or Apache."
                },
                {
                    "type": "p",
                    "text": "Running as astatic exportdoes not support Next.js features that require a server.Learn more."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Componentsare supported with static exports."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Features"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Image Optimization"
                },
                {
                    "type": "p",
                    "text": "Image Optimizationthroughnext/imageworks self-hosted with zero configuration when deploying usingnext start. If you would prefer to have a separate service to optimize images, you canconfigure an image loader."
                },
                {
                    "type": "p",
                    "text": "Image Optimization can be used with astatic exportby defining a custom image loader innext.config.js. Note that images are optimized at runtime, not during the build."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "When self-hosting, consider installingsharpfor more performantImage Optimizationin your production environment by runningnpm install sharpin your project directory. On Linux platforms,sharpmay requireadditional configurationto prevent excessive memory usage.",
                        "Learn more about thecaching behavior of optimized imagesand how to configure the TTL.",
                        "You can alsodisable Image Optimizationand still retain other benefits of usingnext/imageif you prefer. For example, if you are optimizing images yourself separately."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Middleware"
                },
                {
                    "type": "p",
                    "text": "Middlewareworks self-hosted with zero configuration when deploying usingnext start. Since it requires access to the incoming request, it is not supported when using astatic export."
                },
                {
                    "type": "p",
                    "text": "Middleware uses aruntimethat is a subset of all available Node.js APIs to help ensure low latency, since it may run in front of every route or asset in your application. This runtime does not require running “at the edge” and works in a single-region server. Additional configuration and infrastructure are required to run Middleware in multiple regions."
                },
                {
                    "type": "p",
                    "text": "If you are looking to add logic (or use an external package) that requires all Node.js APIs, you might be able to move this logic to alayoutas aServer Component. For example, checkingheadersandredirecting. You can also use headers, cookies, or query parameters toredirectorrewritethroughnext.config.js. If that does not work, you can also use acustom server."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Environment Variables"
                },
                {
                    "type": "p",
                    "text": "Next.js can support both build time and runtime environment variables."
                },
                {
                    "type": "p",
                    "text": "By default, environment variables are only available on the server. To expose an environment variable to the browser, it must be prefixed withNEXT_PUBLIC_. However, these public environment variables will be inlined into the JavaScript bundle duringnext build."
                },
                {
                    "type": "p",
                    "text": "To read runtime environment variables, we recommend usinggetServerSidePropsorincrementally adopting the App Router. With the App Router, we can safely read environment variables on the server during dynamic rendering. This allows you to use a singular Docker image that can be promoted through multiple environments with different values."
                },
                {
                    "type": "code",
                    "code": "import{ unstable_noStoreasnoStore }from'next/cache';exportdefaultfunctionComponent() {noStore();// cookies(), headers(), and other dynamic functions// will also opt into dynamic rendering, making// this env variable is evaluated at runtimeconstvalue=process.env.MY_VALUE...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "You can run code on server startup using theregisterfunction.",
                        "We do not recommend using theruntimeConfigoption, as this does not work with the standalone output mode. Instead, we recommendincrementally adoptingthe App Router."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caching and ISR"
                },
                {
                    "type": "p",
                    "text": "Next.js can cache responses, generated static pages, build outputs, and other static assets like images, fonts, and scripts."
                },
                {
                    "type": "p",
                    "text": "Caching and revalidating pages (using Incremental Static Regeneration (ISR) or newer functions in the App Router) use thesame shared cache. By default, this cache is stored to the filesystem (on disk) on your Next.js server.This works automatically when self-hostingusing both the Pages and App Router."
                },
                {
                    "type": "p",
                    "text": "You can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Automatic Caching"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js sets theCache-Controlheader ofpublic, max-age=31536000, immutableto truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example,Static Image Imports. You canconfigure the TTLfor images.",
                        "Incremental Static Regeneration (ISR) sets theCache-Controlheader ofs-maxage: <revalidate in getStaticProps>, stale-while-revalidate. This revalidation time is defined in yourgetStaticPropsfunctionin seconds. If you setrevalidate: false, it will default to a one-year cache duration.",
                        "Dynamically rendered pages set aCache-Controlheader ofprivate, no-cache, no-store, max-age=0, must-revalidateto prevent user-specific data from being cached. This applies to both the App Router and Pages Router. This also includesDraft Mode."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Static Assets"
                },
                {
                    "type": "p",
                    "text": "If you want to host static assets on a different domain or CDN, you can use theassetPrefixconfigurationinnext.config.js. Next.js will use this asset prefix when retrieving JavaScript or CSS files. Separating your assets to a different domain does come with the downside of extra time spent on DNS and TLS resolution."
                },
                {
                    "type": "p",
                    "text": "Learn more aboutassetPrefix."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Configuring Caching"
                },
                {
                    "type": "p",
                    "text": "By default, generated cache assets will be stored in memory (defaults to 50mb) and on disk. If you are hosting Next.js using a container orchestration platform like Kubernetes, each pod will have a copy of the cache. To prevent stale data from being shown since the cache is not shared between pods by default, you can configure the Next.js cache to provide a cache handler and disable in-memory caching."
                },
                {
                    "type": "p",
                    "text": "To configure the ISR/Data Cache location when self-hosting, you can configure a custom handler in yournext.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={cacheHandler:require.resolve('./cache-handler.js'),cacheMaxMemorySize:0,// disable default in-memory caching}"
                },
                {
                    "type": "p",
                    "text": "Then, createcache-handler.jsin the root of your project, for example:"
                },
                {
                    "type": "code",
                    "code": "constcache=newMap()module.exports=classCacheHandler{constructor(options) {this.options=options}asyncget(key) {// This could be stored anywhere, like durable storagereturncache.get(key)}asyncset(key,data,ctx) {// This could be stored anywhere, like durable storagecache.set(key,{value:data,lastModified:Date.now(),tags:ctx.tags,})}asyncrevalidateTag(tag) {// Iterate over all entries in the cachefor(let[key,value]ofcache) {// If the value's tags include the specified tag, delete this entryif(value.tags.includes(tag)) {cache.delete(key)}}}}"
                },
                {
                    "type": "p",
                    "text": "Using a custom cache handler will allow you to ensure consistency across all pods hosting your Next.js application. For instance, you can save the cached values anywhere, likeRedisor AWS S3."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "revalidatePathis a convenience layer on top of cache tags. CallingrevalidatePathwill call therevalidateTagfunction with a special default tag for the provided page."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Build Cache"
                },
                {
                    "type": "p",
                    "text": "Next.js generates an ID duringnext buildto identify which version of your application is being served. The same build should be used and boot up multiple containers."
                },
                {
                    "type": "p",
                    "text": "If you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use thegenerateBuildIdcommand innext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={generateBuildId:async()=>{// This could be anything, using the latest git hashreturnprocess.env.GIT_HASH},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Version Skew"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically mitigate most instances ofversion skewand automatically reload the application to retrieve new assets when detected. For example, if there is a mismatch in thedeploymentId, transitions between pages will perform a hard navigation versus using a prefetched value."
                },
                {
                    "type": "p",
                    "text": "When the application is reloaded, there may be a loss of application state if it's not designed to persist between page navigations. For example, using URL state or local storage would persist state after a page refresh. However, component state likeuseStatewould be lost in such navigations."
                },
                {
                    "type": "p",
                    "text": "Vercel provides additionalskew protectionfor Next.js applications to ensure assets and functions from the previous version are still available to older clients, even after the new version is deployed."
                },
                {
                    "type": "p",
                    "text": "You can manually configure thedeploymentIdproperty in yournext.config.jsfile to ensure each request uses either?dplquery string orx-deployment-idheader."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Streaming and Suspense"
                },
                {
                    "type": "p",
                    "text": "The Next.js App Router supportsstreaming responseswhen self-hosting. If you are using Nginx or a similar proxy, you will need to configure it to disable buffering to enable streaming."
                },
                {
                    "type": "p",
                    "text": "For example, you can disable buffering in Nginx by settingX-Accel-Bufferingtono:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncheaders() {return[{source:'/:path*{/}?',headers:[{key:'X-Accel-Buffering',value:'no',},],},]},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Production Checklist"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static Exports"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Multi-Zones"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/deploying/multi-zones",
            "title": "Deploying: Multi-Zones | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Multi-Zones"
                },
                {
                    "type": "list",
                    "items": [
                        "With Zones"
                    ]
                },
                {
                    "type": "p",
                    "text": "Multi-Zones are an approach to micro-frontends that separate a large application on a domain into smaller Next.js applications that each serve a set of paths. This is useful when there are collections of pages unrelated to the other pages in the application. By moving those pages to a separate zone (i.e., a separate application), you can reduce the size of each application which improves build times and removes code that is only necessary for one of the zones."
                },
                {
                    "type": "p",
                    "text": "For example, let's say you have the following set of pages that you would like to split up:"
                },
                {
                    "type": "list",
                    "items": [
                        "/blog/*for all blog posts",
                        "/dashboard/*for all pages when the user is logged-in to the dashboard",
                        "/*for the rest of your website not covered by other zones"
                    ]
                },
                {
                    "type": "p",
                    "text": "With Multi-Zones support, you can create three applications that all are served on the same domain and look the same to the user, but you can develop and deploy each of the applications independently."
                },
                {
                    "type": "p",
                    "text": "Navigating between pages in the same zone will perform soft navigations, a navigation that does not require reloading the page. For example, in this diagram, navigating from/to/productswill be a soft navigation."
                },
                {
                    "type": "p",
                    "text": "Navigating from a page in one zone to a page in another zone, such as from/to/dashboard, will perform a hard navigation, unloading the resources of the current page and loading the resources of the new page. Pages that are frequently visited together should live in the same zone to avoid hard navigations."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How to define a zone"
                },
                {
                    "type": "p",
                    "text": "There are no special APIs to define a new zone. A zone is a normal Next.js application where you also configure abasePathto avoid conflicts with pages and static files in other zones."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={basePath:'/blog',}"
                },
                {
                    "type": "p",
                    "text": "The default application that will handle all paths not sent to a more specific zone does not need abasePath."
                },
                {
                    "type": "p",
                    "text": "Next.js assets, such as JavaScript and CSS, will also be prefixed withbasePathto make sure that they don't conflict with assets from other zones. These assets will be served under/basePath/_next/...for each of the zones."
                },
                {
                    "type": "p",
                    "text": "If the zone serves pages that don't share a common path prefix, such as/homeand/blog, then you can also setassetPrefixto ensure that all Next.js assets are served under a unique path prefix for the zone without adding a path prefix to the rest of the routes in your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How to route requests to the right zone"
                },
                {
                    "type": "p",
                    "text": "With the Multi Zones set-up, you need to route the paths to the correct zone since they are served by different applications. You can use any HTTP proxy to do this, but one of the Next.js applications can also be used to route requests for the entire domain."
                },
                {
                    "type": "p",
                    "text": "To route to the correct zone using a Next.js application, you can userewrites. For each path served by a different zone, you would add a rewrite rule to send that path to the domain of the other zone. For example:"
                },
                {
                    "type": "code",
                    "code": "asyncrewrites() {return[{source:'/blog',destination:`${process.env.BLOG_DOMAIN}/blog`,},{source:'/blog/:path+',destination:`${process.env.BLOG_DOMAIN}/blog/:path+`,}];}"
                },
                {
                    "type": "p",
                    "text": "destinationshould be a URL that is served by the zone, including scheme and domain. This should point to the zone's production domain, but it can also be used to route requests tolocalhostin local development."
                },
                {
                    "type": "p",
                    "text": "Good to know: URL paths should be unique to a zone. For example, two zones trying to serve/blogwould create a routing conflict."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Linking between zones"
                },
                {
                    "type": "p",
                    "text": "Links to paths in a different zone should use anatag instead of the Next.js<Link>component. This is because Next.js will try to prefetch and soft navigate to any relative path in<Link>component, which will not work across zones."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Sharing code"
                },
                {
                    "type": "p",
                    "text": "The Next.js applications that make up the different zones can live in any repository. However, it is often convenient to put these zones in amonorepoto more easily share code. For zones that live in different repositories, code can also be shared using public or private NPM packages."
                },
                {
                    "type": "p",
                    "text": "Since the pages in different zones may be released at different times, feature flags can be useful for enabling or disabling features in unison across the different zones."
                },
                {
                    "type": "p",
                    "text": "ForNext.js on Vercelapplications, you can use amonorepoto deploy all affected zones with a singlegit push."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/deploying/production-checklist",
            "title": "Deploying: Production Checklist | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Production Checklist"
                },
                {
                    "type": "p",
                    "text": "Before taking your Next.js application to production, there are some optimizations and patterns you should consider implementing for the best user experience, performance, and security."
                },
                {
                    "type": "p",
                    "text": "This page provides best practices that you can use as a reference whenbuilding your application,before going to production, andafter deployment- as well as theautomatic Next.js optimizationsyou should be aware of."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Automatic optimizations"
                },
                {
                    "type": "p",
                    "text": "These Next.js optimizations are enabled by default and require no configuration:"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components:Next.js uses Server Components by default. Server Components run on the server, and don't require JavaScript to render on the client. As such, they have no impact on the size of your client-side JavaScript bundles. You can then useClient Componentsas needed for interactivity.",
                        "Code-splitting:Server Components enable automatic code-splitting by route segments. You may also considerlazy loadingClient Components and third-party libraries, where appropriate.",
                        "Prefetching:When a link to a new route enters the user's viewport, Next.js prefetches the route in background. This makes navigation to new routes almost instant. You can opt out of prefetching, where appropriate.",
                        "Static Rendering:Next.js statically renders Server and Client Components on the server at build time and caches the rendered result to improve your application's performance. You can opt intoDynamic Renderingfor specific routes, where appropriate.",
                        "Caching:Next.js caches data requests, the rendered result of Server and Client Components, static assets, and more, to reduce the number of network requests to your server, database, and backend services. You may opt out of caching, where appropriate."
                    ]
                },
                {
                    "type": "p",
                    "text": "These defaults aim to improve your application's performance, and reduce the cost and amount of data transferred on each network request."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "During development"
                },
                {
                    "type": "p",
                    "text": "While building your application, we recommend using the following features to ensure the best performance and user experience:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Routing and rendering"
                },
                {
                    "type": "list",
                    "items": [
                        "Layouts:Use layouts to share UI across pages and enablepartial renderingon navigation.",
                        "<Link>component:Use the<Link>component forclient-side navigation and prefetching.",
                        "Error Handling:Gracefully handlecatch-all errorsand404 errorsin production by creating custom error pages.",
                        "Composition Patterns:Follow the recommended composition patterns for Server and Client Components, and check the placement of your\"use client\"boundariesto avoid unnecessarily increasing your client-side JavaScript bundle.",
                        "Dynamic Functions:Be aware that dynamic functions likecookies()and thesearchParamsprop will opt the entire route intoDynamic Rendering(or your whole application if used in theRoot Layout). Ensure dynamic function usage is intentional and wrap them in<Suspense>boundaries where appropriate."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:Partial Prerendering (Experimental)will allow parts of a route to be dynamic without opting the whole route into dynamic rendering."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Data fetching and caching"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components:Leverage the benefits of fetching data on the server using Server Components.",
                        "Route Handlers:Use Route Handlers to access your backend resources from Client Components. But do not call Route Handlers from Server Components to avoid an additional server request.",
                        "Streaming:Use Loading UI and React Suspense to progressively send UI from the server to the client, and prevent the whole route from blocking while data is being fetched.",
                        "Parallel Data Fetching:Reduce network waterfalls by fetching data in parallel, where appropriate. Also, considerpreloading datawhere appropriate.",
                        "Data Caching:Verify whether your data requests are being cached or not, and opt into caching, where appropriate. Ensure requests that don't usefetcharecached.",
                        "Static Images:Use thepublicdirectory to automatically cache your application's static assets, e.g. images."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "UI and accessibility"
                },
                {
                    "type": "list",
                    "items": [
                        "Forms and Validation:Use Server Actions to handle form submissions, server-side validation, and handle errors."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Font Module:Optimize fonts by using the Font Module, which automatically hosts your font files with other static assets, removes external network requests, and reduceslayout shift.",
                        "<Image>Component:Optimize images by using the Image Component, which automatically optimizes images, prevents layout shift, and serves them in modern formats like WebP or AVIF.",
                        "<Script>Component:Optimize third-party scripts by using the Script Component, which automatically defers scripts and prevents them from blocking the main thread.",
                        "ESLint:Use the built-ineslint-plugin-jsx-a11yplugin to catch accessibility issues early."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Security"
                },
                {
                    "type": "list",
                    "items": [
                        "Tainting:Prevent sensitive data from being exposed to the client by tainting data objects and/or specific values.",
                        "Server Actions:Ensure users are authorized to call Server Actions. Review the the recommendedsecurity practices."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Environment Variables:Ensure your.env.*files are added to.gitignoreand only public variables are prefixed withNEXT_PUBLIC_.",
                        "Content Security Policy:Consider adding a Content Security Policy to protect your application against various security threats such as cross-site scripting, clickjacking, and other code injection attacks."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata and SEO"
                },
                {
                    "type": "list",
                    "items": [
                        "Metadata API:Use the Metadata API to improve your application's Search Engine Optimization (SEO) by adding page titles, descriptions, and more.",
                        "Open Graph (OG) images:Create OG images to prepare your application for social sharing.",
                        "SitemapsandRobots:Help Search Engines crawl and index your pages by generating sitemaps and robots files."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Type safety"
                },
                {
                    "type": "list",
                    "items": [
                        "TypeScript andTS Plugin:Use TypeScript and the TypeScript plugin for better type-safety, and to help you catch errors early."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Before going to production"
                },
                {
                    "type": "p",
                    "text": "Before going to production, you can runnext buildto build your application locally and catch any build errors, then runnext startto measure the performance of your application in a production-like environment."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Core Web Vitals"
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse:Run lighthouse in incognito to gain a better understanding of how your users will experience your site, and to identify areas for improvement. This is a simulated test and should be paired with looking at field data (such as Core Web Vitals)."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "useReportWebVitalshook:Use this hook to sendCore Web Vitalsdata to analytics tools."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Analyzing bundles"
                },
                {
                    "type": "p",
                    "text": "Use the@next/bundle-analyzerpluginto analyze the size of your JavaScript bundles and identify large modules and dependencies that might be impacting your application's performance."
                },
                {
                    "type": "p",
                    "text": "Additionally, the following tools can you understand the impact of adding new dependencies to your application:"
                },
                {
                    "type": "list",
                    "items": [
                        "Import Cost",
                        "Package Phobia",
                        "Bundle Phobia",
                        "bundlejs"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "After deployment"
                },
                {
                    "type": "p",
                    "text": "Depending on where you deploy your application, you might have access to additional tools and integrations to help you monitor and improve your application's performance."
                },
                {
                    "type": "p",
                    "text": "For Vercel deployments, we recommend the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Analytics:A built-in analytics dashboard to help you understand your application's traffic, including the number of unique visitors, page views, and more.",
                        "Speed Insights:Real-world performance insights based on visitor data, offering a practical view of how your website is performing in the field.",
                        "Logging:Runtime and Activity logs to help you debug issues and monitor your application in production. Alternatively, see theintegrations pagefor a list of third-party tools and services."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "p",
                    "text": "To get a comprehensive understanding of the best practices for production deployments on Vercel, including detailed strategies for improving website performance, refer to theVercel Production Checklist."
                },
                {
                    "type": "p",
                    "text": "Following these recommendations will help you build a faster, more reliable, and secure application for your users."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/deploying/static-exports",
            "title": "Deploying: Static Exports | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Static Exports"
                },
                {
                    "type": "p",
                    "text": "Next.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server."
                },
                {
                    "type": "p",
                    "text": "When runningnext build, Next.js generates an HTML file per route. By breaking a strict SPA into individual HTML files, Next.js can avoid loading unnecessary JavaScript code on the client-side, reducing the bundle size and enabling faster page loads."
                },
                {
                    "type": "p",
                    "text": "Since Next.js supports this static export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configuration"
                },
                {
                    "type": "p",
                    "text": "To enable a static export, change the output mode insidenext.config.js:"
                },
                {
                    "type": "code",
                    "code": "/***@type{import('next').NextConfig}*/constnextConfig={output:'export',// Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`// trailingSlash: true,// Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`// skipTrailingSlashRedirect: true,// Optional: Change the output directory `out` -> `dist`// distDir: 'dist',}module.exports=nextConfig"
                },
                {
                    "type": "p",
                    "text": "After runningnext build, Next.js will produce anoutfolder which contains the HTML/CSS/JS assets for your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Supported Features"
                },
                {
                    "type": "p",
                    "text": "The core of Next.js has been designed to support static exports."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Components"
                },
                {
                    "type": "p",
                    "text": "When you runnext buildto generate a static export, Server Components consumed inside theappdirectory will run during the build, similar to traditional static-site generation."
                },
                {
                    "type": "p",
                    "text": "The resulting component will be rendered into static HTML for the initial page load and a static payload for client navigation between routes. No changes are required for your Server Components when using the static export, unless they consumedynamic server functions."
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {// This fetch will run on the server during `next build`constres=awaitfetch('https://api.example.com/...')constdata=awaitres.json()return<main>...</main>}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client Components"
                },
                {
                    "type": "p",
                    "text": "If you want to perform data fetching on the client, you can use a Client Component withSWRto memoize requests."
                },
                {
                    "type": "code",
                    "code": "'use client'importuseSWRfrom'swr'constfetcher=(url:string)=>fetch(url).then((r)=>r.json())exportdefaultfunctionPage() {const{data,error}=useSWR(`https://jsonplaceholder.typicode.com/posts/1`,fetcher)if(error)return'Failed to load'if(!data)return'Loading...'returndata.title}"
                },
                {
                    "type": "p",
                    "text": "Since route transitions happen client-side, this behaves like a traditional SPA. For example, the following index route allows you to navigate to different posts on the client:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<><h1>Index Page</h1><hr/><ul><li><Linkhref=\"/post/1\">Post 1</Link></li><li><Linkhref=\"/post/2\">Post 2</Link></li></ul></>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Image Optimization"
                },
                {
                    "type": "p",
                    "text": "Image Optimizationthroughnext/imagecan be used with a static export by defining a custom image loader innext.config.js. For example, you can optimize images with a service like Cloudinary:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={output:'export',images:{loader:'custom',loaderFile:'./my-loader.ts',},}module.exports=nextConfig"
                },
                {
                    "type": "p",
                    "text": "This custom loader will define how to fetch images from a remote source. For example, the following loader will construct the URL for Cloudinary:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctioncloudinaryLoader({src,width,quality,}:{src:stringwidth:numberquality?:number}) {constparams=['f_auto','c_limit',`w_${width}`,`q_${quality||'auto'}`]return`https://res.cloudinary.com/demo/image/upload/${params.join(',')}${src}`}"
                },
                {
                    "type": "p",
                    "text": "You can then usenext/imagein your application, defining relative paths to the image in Cloudinary:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return<Imagealt=\"turtles\"src=\"/turtles.jpg\"width={300}height={300} />}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Handlers"
                },
                {
                    "type": "p",
                    "text": "Route Handlers will render a static response when runningnext build. Only theGETHTTP verb is supported. This can be used to generate static HTML, JSON, TXT, or other files from cached or uncached data. For example:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET() {returnResponse.json({ name:'Lee'})}"
                },
                {
                    "type": "p",
                    "text": "The above fileapp/data.json/route.tswill render to a static file duringnext build, producingdata.jsoncontaining{ name: 'Lee' }."
                },
                {
                    "type": "p",
                    "text": "If you need to read dynamic values from the incoming request, you cannot use a static export."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Browser APIs"
                },
                {
                    "type": "p",
                    "text": "Client Components are pre-rendered to HTML duringnext build. BecauseWeb APIslikewindow,localStorage, andnavigatorare not available on the server, you need to safely access these APIs only when running in the browser. For example:"
                },
                {
                    "type": "code",
                    "code": "'use client';import{ useEffect }from'react';exportdefaultfunctionClientComponent() {useEffect(()=>{// You now have access to `window`console.log(window.innerHeight);},[])return...;}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Unsupported Features"
                },
                {
                    "type": "p",
                    "text": "Features that require a Node.js server, or dynamic logic that cannot be computed during the build process, arenotsupported:"
                },
                {
                    "type": "list",
                    "items": [
                        "Dynamic RouteswithdynamicParams: true",
                        "Dynamic RouteswithoutgenerateStaticParams()",
                        "Route Handlersthat rely on Request",
                        "Cookies",
                        "Rewrites",
                        "Redirects",
                        "Headers",
                        "Middleware",
                        "Incremental Static Regeneration",
                        "Image Optimizationwith the defaultloader",
                        "Draft Mode"
                    ]
                },
                {
                    "type": "p",
                    "text": "Attempting to use any of these features withnext devwill result in an error, similar to setting thedynamicoption toerrorin the root layout."
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='error'"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deploying"
                },
                {
                    "type": "p",
                    "text": "With a static export, Next.js can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets."
                },
                {
                    "type": "p",
                    "text": "When runningnext build, Next.js generates the static export into theoutfolder. For example, let's say you have the following routes:"
                },
                {
                    "type": "list",
                    "items": [
                        "/",
                        "/blog/[id]"
                    ]
                },
                {
                    "type": "p",
                    "text": "After runningnext build, Next.js will generate the following files:"
                },
                {
                    "type": "list",
                    "items": [
                        "/out/index.html",
                        "/out/404.html",
                        "/out/blog/post-1.html",
                        "/out/blog/post-2.html"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you are using a static host like Nginx, you can configure rewrites from incoming requests to the correct files:"
                },
                {
                    "type": "code",
                    "code": "server{listen80;server_nameacme.com;root/var/www/out;location/ {try_files$uri $uri.html $uri/=404;}# This is necessary when `trailingSlash: false`.# You can omit this when `trailingSlash: true`.location/blog/ {rewrite^/blog/(.*)$/blog/$1.htmlbreak;}error_page404 /404.html;location=/404.html{internal;}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing",
            "title": "Building Your Application: Optimizing | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Optimizations"
                },
                {
                    "type": "p",
                    "text": "Next.js comes with a variety of built-in optimizations designed to improve your application's speed andCore Web Vitals. This guide will cover the optimizations you can leverage to enhance your user experience."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Built-in Components"
                },
                {
                    "type": "p",
                    "text": "Built-in components abstract away the complexity of implementing common UI optimizations. These components are:"
                },
                {
                    "type": "list",
                    "items": [
                        "Images: Built on the native<img>element. The Image Component optimizes images for performance by lazy loading and automatically resizing images based on device size.",
                        "Link: Built on the native<a>tags. The Link Component prefetches pages in the background, for faster and smoother page transitions.",
                        "Scripts: Built on the native<script>tags. The Script Component gives you control over loading and execution of third-party scripts."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Metadata"
                },
                {
                    "type": "p",
                    "text": "Metadata helps search engines understand your content better (which can result in better SEO), and allows you to customize how your content is presented on social media, helping you create a more engaging and consistent user experience across various platforms."
                },
                {
                    "type": "p",
                    "text": "The Metadata API in Next.js allows you to modify the<head>element of a page. You can configure metadata in two ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Config-based Metadata: Export astaticmetadataobjector a dynamicgenerateMetadatafunctionin alayout.jsorpage.jsfile.",
                        "File-based Metadata: Add static or dynamically generated special files to route segments."
                    ]
                },
                {
                    "type": "p",
                    "text": "Additionally, you can create dynamic Open Graph Images using JSX and CSS withimageResponseconstructor."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Static Assets"
                },
                {
                    "type": "p",
                    "text": "Next.js/publicfolder can be used to serve static assets like images, fonts, and other files. Files inside/publiccan also be cached by CDN providers so that they are delivered efficiently."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Analytics and Monitoring"
                },
                {
                    "type": "p",
                    "text": "For large applications, Next.js integrates with popular analytics and monitoring tools to help you understand how your application is performing. Learn more in theOpenTelemetryandInstrumentationguides."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Images"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Videos"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fonts"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Scripts"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bundle Analyzer"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Package Bundling"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Lazy Loading"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Analytics"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Instrumentation"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "OpenTelemetry"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static Assets"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Third Party Libraries"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Memory Usage"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/analytics",
            "title": "Optimizing: Analytics | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Analytics"
                },
                {
                    "type": "p",
                    "text": "Next.js has built-in support for measuring and reporting performance metrics. You can either use theuseReportWebVitalshook to manage reporting yourself, or alternatively, Vercel provides amanaged serviceto automatically collect and visualize metrics for you."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Build Your Own"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useReportWebVitals }from'next/web-vitals'exportfunctionWebVitals() {useReportWebVitals((metric)=>{console.log(metric)})}"
                },
                {
                    "type": "code",
                    "code": "import{ WebVitals }from'./_components/web-vitals'exportdefaultfunctionLayout({ children }) {return(<html><body><WebVitals/>{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Since theuseReportWebVitalshook requires the\"use client\"directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to theWebVitalscomponent."
                },
                {
                    "type": "p",
                    "text": "View theAPI Referencefor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Web Vitals"
                },
                {
                    "type": "p",
                    "text": "Web Vitalsare a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:"
                },
                {
                    "type": "list",
                    "items": [
                        "Time to First Byte(TTFB)",
                        "First Contentful Paint(FCP)",
                        "Largest Contentful Paint(LCP)",
                        "First Input Delay(FID)",
                        "Cumulative Layout Shift(CLS)",
                        "Interaction to Next Paint(INP)"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can handle all the results of these metrics using thenameproperty."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useReportWebVitals }from'next/web-vitals'exportfunctionWebVitals() {useReportWebVitals((metric)=>{switch(metric.name) {case'FCP': {// handle FCP results}case'LCP': {// handle LCP results}// ...}})}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Sending results to external systems"
                },
                {
                    "type": "p",
                    "text": "You can send results to any endpoint to measure and track\nreal user performance on your site. For example:"
                },
                {
                    "type": "code",
                    "code": "useReportWebVitals((metric)=>{constbody=JSON.stringify(metric)consturl='https://example.com/analytics'// Use `navigator.sendBeacon()` if available, falling back to `fetch()`.if(navigator.sendBeacon) {navigator.sendBeacon(url,body)}else{fetch(url,{ body,method:'POST',keepalive:true})}})"
                },
                {
                    "type": "p",
                    "text": "Good to know: If you useGoogle Analytics, using theidvalue can allow you to construct metric distributions manually (to calculate percentiles,\netc.)"
                },
                {
                    "type": "code",
                    "code": "useReportWebVitals((metric)=>{// Use `window.gtag` if you initialized Google Analytics as this example:// https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.jswindow.gtag('event',metric.name,{value:Math.round(metric.name==='CLS'?metric.value*1000:metric.value),// values must be integersevent_label:metric.id,// id unique to current page loadnon_interaction:true,// avoids affecting bounce rate.})})"
                },
                {
                    "type": "p",
                    "text": "Read more aboutsending results to Google Analytics."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/bundle-analyzer",
            "title": "Optimizing: Package Bundling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Bundle Analyzer"
                },
                {
                    "type": "p",
                    "text": "@next/bundle-analyzeris a plugin for Next.js that helps you manage the size of your JavaScript modules. It generates a visual report of the size of each module and their dependencies. You can use the information to remove large dependencies, split your code, or only load some parts when needed, reducing the amount of data transferred to the client."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Installation"
                },
                {
                    "type": "p",
                    "text": "Install the plugin by running the following command:"
                },
                {
                    "type": "code",
                    "code": "npmi@next/bundle-analyzer# oryarnadd@next/bundle-analyzer# orpnpmadd@next/bundle-analyzer"
                },
                {
                    "type": "p",
                    "text": "Then, add the bundle analyzer's settings to yournext.config.js."
                },
                {
                    "type": "code",
                    "code": "constwithBundleAnalyzer=require('@next/bundle-analyzer')({enabled:process.env.ANALYZE==='true',})/**@type{import('next').NextConfig}*/constnextConfig={}module.exports=withBundleAnalyzer(nextConfig)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Analyzing your bundles"
                },
                {
                    "type": "p",
                    "text": "Run the following command to analyze your bundles:"
                },
                {
                    "type": "code",
                    "code": "ANALYZE=truenpm run build# orANALYZE=trueyarn build# orANALYZE=truepnpm build"
                },
                {
                    "type": "p",
                    "text": "The report will open three new tabs in your browser, which you can inspect. Doing this regularly while you develop and before deploying your site can help you identify large bundles earlier, and architect your application to be more performant."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Production Checklist"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/fonts",
            "title": "Optimizing: Fonts | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Font Optimization"
                },
                {
                    "type": "p",
                    "text": "next/fontwill automatically optimize your fonts (including custom fonts) and remove external network requests for improved privacy and performance."
                },
                {
                    "type": "p",
                    "text": "🎥 Watch:Learn more about usingnext/font→YouTube (6 minutes)."
                },
                {
                    "type": "p",
                    "text": "next/fontincludesbuilt-in automatic self-hostingforanyfont file. This means you can optimally load web fonts with zero layout shift, thanks to the underlying CSSsize-adjustproperty used."
                },
                {
                    "type": "p",
                    "text": "This new font system also allows you to conveniently use all Google Fonts with performance and privacy in mind. CSS and font files are downloaded at build time and self-hosted with the rest of your static assets.No requests are sent to Google by the browser."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Google Fonts"
                },
                {
                    "type": "p",
                    "text": "Automatically self-host any Google Font. Fonts are included in the deployment and served from the same domain as your deployment.No requests are sent to Google by the browser."
                },
                {
                    "type": "p",
                    "text": "Get started by importing the font you would like to use fromnext/font/googleas a function. We recommend usingvariable fontsfor the best performance and flexibility."
                },
                {
                    "type": "code",
                    "code": "import{ Inter }from'next/font/google'// If loading a variable font, you don't need to specify the font weightconstinter=Inter({subsets:['latin'],display:'swap',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={inter.className}><body>{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "If you can't use a variable font, you willneed to specify a weight:"
                },
                {
                    "type": "code",
                    "code": "import{ Roboto }from'next/font/google'constroboto=Roboto({weight:'400',subsets:['latin'],display:'swap',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={roboto.className}><body>{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "You can specify multiple weights and/or styles by using an array:"
                },
                {
                    "type": "code",
                    "code": "constroboto=Roboto({weight:['400','700'],style:['normal','italic'],subsets:['latin'],display:'swap',})"
                },
                {
                    "type": "p",
                    "text": "Good to know: Use an underscore (_) for font names with multiple words. E.g.Roboto Monoshould be imported asRoboto_Mono."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Specifying a subset"
                },
                {
                    "type": "p",
                    "text": "Google Fonts are automaticallysubset. This reduces the size of the font file and improves performance. You'll need to define which of these subsets you want to preload. Failing to specify any subsets whilepreloadistruewill result in a warning."
                },
                {
                    "type": "p",
                    "text": "This can be done by adding it to the function call:"
                },
                {
                    "type": "code",
                    "code": "constinter=Inter({ subsets:['latin'] })"
                },
                {
                    "type": "p",
                    "text": "View theFont API Referencefor more information."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using Multiple Fonts"
                },
                {
                    "type": "p",
                    "text": "You can import and use multiple fonts in your application. There are two approaches you can take."
                },
                {
                    "type": "p",
                    "text": "The first approach is to create a utility function that exports a font, imports it, and applies itsclassNamewhere needed. This ensures the font is preloaded only when it's rendered:"
                },
                {
                    "type": "code",
                    "code": "import{ Inter,Roboto_Mono }from'next/font/google'exportconstinter=Inter({subsets:['latin'],display:'swap',})exportconstroboto_mono=Roboto_Mono({subsets:['latin'],display:'swap',})"
                },
                {
                    "type": "code",
                    "code": "import{ inter }from'./fonts'exportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {return(<htmllang=\"en\"className={inter.className}><body><div>{children}</div></body></html>)}"
                },
                {
                    "type": "code",
                    "code": "import{ roboto_mono }from'./fonts'exportdefaultfunctionPage() {return(<><h1className={roboto_mono.className}>My page</h1></>)}"
                },
                {
                    "type": "p",
                    "text": "In the example above,Interwill be applied globally, andRoboto Monocan be imported and applied as needed."
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can create aCSS variableand use it with your preferred CSS solution:"
                },
                {
                    "type": "code",
                    "code": "import{ Inter,Roboto_Mono }from'next/font/google'importstylesfrom'./global.css'constinter=Inter({subsets:['latin'],variable:'--font-inter',display:'swap',})constroboto_mono=Roboto_Mono({subsets:['latin'],variable:'--font-roboto-mono',display:'swap',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={`${inter.variable}${roboto_mono.variable}`}><body><h1>My App</h1><div>{children}</div></body></html>)}"
                },
                {
                    "type": "code",
                    "code": "html{font-family:var(--font-inter);}h1{font-family:var(--font-roboto-mono);}"
                },
                {
                    "type": "p",
                    "text": "In the example above,Interwill be applied globally, and any<h1>tags will be styled withRoboto Mono."
                },
                {
                    "type": "p",
                    "text": "Recommendation: Use multiple fonts conservatively since each new font is an additional resource the client has to download."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Local Fonts"
                },
                {
                    "type": "p",
                    "text": "Importnext/font/localand specify thesrcof your local font file. We recommend usingvariable fontsfor the best performance and flexibility."
                },
                {
                    "type": "code",
                    "code": "importlocalFontfrom'next/font/local'// Font files can be colocated inside of `app`constmyFont=localFont({src:'./my-font.woff2',display:'swap',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={myFont.className}><body>{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "If you want to use multiple files for a single font family,srccan be an array:"
                },
                {
                    "type": "code",
                    "code": "constroboto=localFont({src:[{path:'./Roboto-Regular.woff2',weight:'400',style:'normal',},{path:'./Roboto-Italic.woff2',weight:'400',style:'italic',},{path:'./Roboto-Bold.woff2',weight:'700',style:'normal',},{path:'./Roboto-BoldItalic.woff2',weight:'700',style:'italic',},],})"
                },
                {
                    "type": "p",
                    "text": "View theFont API Referencefor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "With Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "next/fontcan be used withTailwind CSSthrough aCSS variable."
                },
                {
                    "type": "p",
                    "text": "In the example below, we use the fontInterfromnext/font/google(you can use any font from Google or Local Fonts). Load your font with thevariableoption to define your CSS variable name and assign it tointer. Then, useinter.variableto add the CSS variable to your HTML document."
                },
                {
                    "type": "code",
                    "code": "import{ Inter,Roboto_Mono }from'next/font/google'constinter=Inter({subsets:['latin'],display:'swap',variable:'--font-inter',})constroboto_mono=Roboto_Mono({subsets:['latin'],display:'swap',variable:'--font-roboto-mono',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={`${inter.variable}${roboto_mono.variable}`}><body>{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Finally, add the CSS variable to yourTailwind CSS config:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{js,ts,jsx,tsx}','./components/**/*.{js,ts,jsx,tsx}','./app/**/*.{js,ts,jsx,tsx}',],theme:{extend:{fontFamily:{sans:['var(--font-inter)'],mono:['var(--font-roboto-mono)'],},},},plugins:[],}"
                },
                {
                    "type": "p",
                    "text": "You can now use thefont-sansandfont-monoutility classes to apply the font to your elements."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Preloading"
                },
                {
                    "type": "p",
                    "text": "When a font function is called on a page of your site, it is not globally available and preloaded on all routes. Rather, the font is only preloaded on the related routes based on the type of file where it is used:"
                },
                {
                    "type": "list",
                    "items": [
                        "If it's aunique page, it is preloaded on the unique route for that page.",
                        "If it's alayout, it is preloaded on all the routes wrapped by the layout.",
                        "If it's theroot layout, it is preloaded on all routes."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reusing fonts"
                },
                {
                    "type": "p",
                    "text": "Every time you call thelocalFontor Google font function, that font is hosted as one instance in your application. Therefore, if you load the same font function in multiple files, multiple instances of the same font are hosted. In this situation, it is recommended to do the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Call the font loader function in one shared file",
                        "Export it as a constant",
                        "Import the constant in each file where you would like to use this font"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Font"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/images",
            "title": "Optimizing: Images | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Image Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Image Component"
                    ]
                },
                {
                    "type": "p",
                    "text": "According toWeb Almanac, images account for a huge portion of the typical website’spage weightand can have a sizable impact on your website'sLCP performance."
                },
                {
                    "type": "p",
                    "text": "The Next.js Image component extends the HTML<img>element with features for automatic image optimization:"
                },
                {
                    "type": "list",
                    "items": [
                        "Size Optimization:Automatically serve correctly sized images for each device, using modern image formats like WebP and AVIF.",
                        "Visual Stability:Preventlayout shiftautomatically when images are loading.",
                        "Faster Page Loads:Images are only loaded when they enter the viewport using native browser lazy loading, with optional blur-up placeholders.",
                        "Asset Flexibility:On-demand image resizing, even for images stored on remote servers"
                    ]
                },
                {
                    "type": "p",
                    "text": "🎥 Watch:Learn more about how to usenext/image→YouTube (9 minutes)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'"
                },
                {
                    "type": "p",
                    "text": "You can then define thesrcfor your image (either local or remote)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Local Images"
                },
                {
                    "type": "p",
                    "text": "To use a local image,importyour.jpg,.png, or.webpimage files."
                },
                {
                    "type": "p",
                    "text": "Next.js willautomatically determinethewidthandheightof your image based on the imported file. These values are used to preventCumulative Layout Shiftwhile your image is loading."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'importprofilePicfrom'./me.png'exportdefaultfunctionPage() {return(<Imagesrc={profilePic}alt=\"Picture of the author\"// width={500} automatically provided// height={500} automatically provided// blurDataURL=\"data:...\" automatically provided// placeholder=\"blur\" // Optional blur-up while loading/>)}"
                },
                {
                    "type": "p",
                    "text": "Warning:Dynamicawait import()orrequire()arenotsupported. Theimportmust be static so it can be analyzed at build time."
                },
                {
                    "type": "p",
                    "text": "You can optionally configurelocalPatternsin yournext.config.jsfile in order to allow specific images and block all others."
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{localPatterns:[{pathname:'/assets/images/**',search:'',},],},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Remote Images"
                },
                {
                    "type": "p",
                    "text": "To use a remote image, thesrcproperty should be a URL string."
                },
                {
                    "type": "p",
                    "text": "Since Next.js does not have access to remote files during the build process, you'll need to provide thewidth,heightand optionalblurDataURLprops manually."
                },
                {
                    "type": "p",
                    "text": "Thewidthandheightattributes are used to infer the correct aspect ratio of image and avoid layout shift from the image loading in. Thewidthandheightdonotdetermine the rendered size of the image file. Learn more aboutImage Sizing."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<Imagesrc=\"https://s3.amazonaws.com/my-bucket/profile.png\"alt=\"Picture of the author\"width={500}height={500}/>)}"
                },
                {
                    "type": "p",
                    "text": "To safely allow optimizing images, define a list of supported URL patterns innext.config.js. Be as specific as possible to prevent malicious usage. For example, the following configuration will only allow images from a specific AWS S3 bucket:"
                },
                {
                    "type": "code",
                    "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'s3.amazonaws.com',port:'',pathname:'/my-bucket/**',},],},}"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutremotePatternsconfiguration. If you want to use relative URLs for the imagesrc, use aloader."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Domains"
                },
                {
                    "type": "p",
                    "text": "Sometimes you may want to optimize a remote image, but still use the built-in Next.js Image Optimization API. To do this, leave theloaderat its default setting and enter an absolute URL for the Imagesrcprop."
                },
                {
                    "type": "p",
                    "text": "To protect your application from malicious users, you must define a list of remote hostnames you intend to use with thenext/imagecomponent."
                },
                {
                    "type": "p",
                    "text": "Learn more aboutremotePatternsconfiguration."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Loaders"
                },
                {
                    "type": "p",
                    "text": "Note that in theexample earlier, a partial URL (\"/me.png\") is provided for a local image. This is possible because of the loader architecture."
                },
                {
                    "type": "p",
                    "text": "A loader is a function that generates the URLs for your image. It modifies the providedsrc, and generates multiple URLs to request the image at different sizes. These multiple URLs are used in the automaticsrcsetgeneration, so that visitors to your site will be served an image that is the right size for their viewport."
                },
                {
                    "type": "p",
                    "text": "The default loader for Next.js applications uses the built-in Image Optimization API, which optimizes images from anywhere on the web, and then serves them directly from the Next.js web server. If you would like to serve your images directly from a CDN or image server, you can write your own loader function with a few lines of JavaScript."
                },
                {
                    "type": "p",
                    "text": "You can define a loader per-image with theloaderprop, or at the application level with theloaderFileconfiguration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Priority"
                },
                {
                    "type": "p",
                    "text": "You should add thepriorityproperty to the image that will be theLargest Contentful Paint (LCP) elementfor each page. Doing so allows Next.js to specially prioritize the image for loading (e.g. through preload tags or priority hints), leading to a meaningful boost in LCP."
                },
                {
                    "type": "p",
                    "text": "The LCP element is typically the largest image or text block visible within the viewport of the page. When you runnext dev, you'll see a console warning if the LCP element is an<Image>without thepriorityproperty."
                },
                {
                    "type": "p",
                    "text": "Once you've identified the LCP image, you can add the property like this:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'importprofilePicfrom'../public/me.png'exportdefaultfunctionPage() {return<Imagesrc={profilePic}alt=\"Picture of the author\"priority/>}"
                },
                {
                    "type": "p",
                    "text": "See more about priority in thenext/imagecomponent documentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Image Sizing"
                },
                {
                    "type": "p",
                    "text": "One of the ways that images most commonly hurt performance is throughlayout shift, where the image pushes other elements around on the page as it loads in. This performance problem is so annoying to users that it has its own Core Web Vital, calledCumulative Layout Shift. The way to avoid image-based layout shifts is toalways size your images. This allows the browser to reserve precisely enough space for the image before it loads."
                },
                {
                    "type": "p",
                    "text": "Becausenext/imageis designed to guarantee good performance results, it cannot be used in a way that will contribute to layout shift, andmustbe sized in one of three ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Automatically, using astatic import",
                        "Explicitly, by including awidthandheightproperty",
                        "Implicitly, by usingfillwhich causes the image to expand to fill its parent element."
                    ]
                },
                {
                    "type": "p",
                    "text": "What if I don't know the size of my images?"
                },
                {
                    "type": "p",
                    "text": "If you are accessing images from a source without knowledge of the images' sizes, there are several things you can do:"
                },
                {
                    "type": "p",
                    "text": "Usefill"
                },
                {
                    "type": "p",
                    "text": "Thefillprop allows your image to be sized by its parent element. Consider using CSS to give the image's parent element space on the page alongsizesprop to match any media query break points. You can also useobject-fitwithfill,contain, orcover, andobject-positionto define how the image should occupy that space."
                },
                {
                    "type": "p",
                    "text": "Normalize your images"
                },
                {
                    "type": "p",
                    "text": "If you're serving images from a source that you control, consider modifying your image pipeline to normalize the images to a specific size."
                },
                {
                    "type": "p",
                    "text": "Modify your API calls"
                },
                {
                    "type": "p",
                    "text": "If your application is retrieving image URLs using an API call (such as to a CMS), you may be able to modify the API call to return the image dimensions along with the URL."
                },
                {
                    "type": "p",
                    "text": "If none of the suggested methods works for sizing your images, thenext/imagecomponent is designed to work well on a page alongside standard<img>elements."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Styling"
                },
                {
                    "type": "p",
                    "text": "Styling the Image component is similar to styling a normal<img>element, but there are a few guidelines to keep in mind:"
                },
                {
                    "type": "list",
                    "items": [
                        "UseclassNameorstyle, notstyled-jsx.In most cases, we recommend using theclassNameprop. This can be an importedCSS Module, aglobal stylesheet, etc.You can also use thestyleprop to assign inline styles.You cannot usestyled-jsxbecause it's scoped to the current component (unless you mark the style asglobal).",
                        "In most cases, we recommend using theclassNameprop. This can be an importedCSS Module, aglobal stylesheet, etc.",
                        "You can also use thestyleprop to assign inline styles.",
                        "You cannot usestyled-jsxbecause it's scoped to the current component (unless you mark the style asglobal).",
                        "When usingfill, the parent element must haveposition: relativeThis is necessary for the proper rendering of the image element in that layout mode.",
                        "This is necessary for the proper rendering of the image element in that layout mode.",
                        "When usingfill, the parent element must havedisplay: blockThis is the default for<div>elements but should be specified otherwise.",
                        "This is the default for<div>elements but should be specified otherwise."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "In most cases, we recommend using theclassNameprop. This can be an importedCSS Module, aglobal stylesheet, etc.",
                        "You can also use thestyleprop to assign inline styles.",
                        "You cannot usestyled-jsxbecause it's scoped to the current component (unless you mark the style asglobal)."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This is necessary for the proper rendering of the image element in that layout mode."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This is the default for<div>elements but should be specified otherwise."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'importmountainsfrom'../public/mountains.jpg'exportdefaultfunctionResponsive() {return(<divstyle={{ display:'flex',flexDirection:'column'}}><Imagealt=\"Mountains\"// Importing an image will// automatically set the width and heightsrc={mountains}sizes=\"100vw\"// Make the image display full widthstyle={{width:'100%',height:'auto',}}/></div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fill Container"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'importmountainsfrom'../public/mountains.jpg'exportdefaultfunctionFill() {return(<divstyle={{display:'grid',gridGap:'8px',gridTemplateColumns:'repeat(auto-fit, minmax(400px, auto))',}}><divstyle={{ position:'relative',height:'400px'}}><Imagealt=\"Mountains\"src={mountains}fillsizes=\"(min-width: 808px) 50vw, 100vw\"style={{objectFit:'cover',// cover, contain, none}}/></div>{/* And more images in the grid... */}</div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Background Image"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'importmountainsfrom'../public/mountains.jpg'exportdefaultfunctionBackground() {return(<Imagealt=\"Mountains\"src={mountains}placeholder=\"blur\"quality={100}fillsizes=\"100vw\"style={{objectFit:'cover',}}/>)}"
                },
                {
                    "type": "p",
                    "text": "For examples of the Image component used with the various styles, see theImage Component Demo."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Other Properties"
                },
                {
                    "type": "p",
                    "text": "View all properties available to thenext/imagecomponent."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configuration"
                },
                {
                    "type": "p",
                    "text": "Thenext/imagecomponent and Next.js Image Optimization API can be configured in thenext.config.jsfile. These configurations allow you toenable remote images,define custom image breakpoints,change caching behaviorand more."
                },
                {
                    "type": "p",
                    "text": "Read the full image configuration documentation for more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<Image>"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation",
            "title": "Optimizing: Instrumentation | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Instrumentation"
                },
                {
                    "type": "p",
                    "text": "Instrumentation is the process of using code to integrate monitoring and logging tools into your application. This allows you to track the performance and behavior of your application, and to debug issues in production."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "To set up instrumentation, createinstrumentation.ts|jsfile in theroot directoryof your project (or inside thesrcfolder if using one)."
                },
                {
                    "type": "p",
                    "text": "Then, export aregisterfunction in the file. This function will be calledoncewhen a new Next.js server instance is initiated."
                },
                {
                    "type": "p",
                    "text": "For example, to use Next.js withOpenTelemetryand@vercel/otel:"
                },
                {
                    "type": "code",
                    "code": "import{ registerOTel }from'@vercel/otel'exportfunctionregister() {registerOTel('next-app')}"
                },
                {
                    "type": "p",
                    "text": "See theNext.js with OpenTelemetry examplefor a complete implementation."
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "This feature isexperimental. To use it, you must explicitly opt in by definingexperimental.instrumentationHook = true;in yournext.config.js.",
                        "Theinstrumentationfile should be in the root of your project and not inside theapporpagesdirectory. If you're using thesrcfolder, then place the file insidesrcalongsidepagesandapp.",
                        "If you use thepageExtensionsconfig optionto add a suffix, you will also need to update theinstrumentationfilename to match."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Importing files with side effects"
                },
                {
                    "type": "p",
                    "text": "Sometimes, it may be useful to import a file in your code because of the side effects it will cause. For example, you might import a file that defines a set of global variables, but never explicitly use the imported file in your code. You would still have access to the global variables the package has declared."
                },
                {
                    "type": "p",
                    "text": "We recommend importing files using JavaScriptimportsyntax within yourregisterfunction. The following example demonstrates a basic usage ofimportin aregisterfunction:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionregister() {awaitimport('package-with-side-effect')}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "p",
                    "text": "We recommend importing the file from within theregisterfunction, rather than at the top of the file. By doing this, you can colocate all of your side effects in one place in your code, and avoid any unintended consequences from importing globally at the top of the file."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Importing runtime-specific code"
                },
                {
                    "type": "p",
                    "text": "Next.js callsregisterin all environments, so it's important to conditionally import any code that doesn't support specific runtimes (e.g.EdgeorNode.js). You can use theNEXT_RUNTIMEenvironment variable to get the current environment:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionregister() {if(process.env.NEXT_RUNTIME==='nodejs') {awaitimport('./instrumentation-node')}if(process.env.NEXT_RUNTIME==='edge') {awaitimport('./instrumentation-edge')}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Learn more about Instrumentation"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "instrumentation.js"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "instrumentationHook"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading",
            "title": "Optimizing: Lazy Loading | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Lazy Loading"
                },
                {
                    "type": "p",
                    "text": "Lazy loadingin Next.js helps improve the initial loading performance of an application by decreasing the amount of JavaScript needed to render a route."
                },
                {
                    "type": "p",
                    "text": "It allows you to defer loading ofClient Componentsand imported libraries, and only include them in the client bundle when they're needed. For example, you might want to defer loading a modal until a user clicks to open it."
                },
                {
                    "type": "p",
                    "text": "There are two ways you can implement lazy loading in Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "UsingDynamic Importswithnext/dynamic",
                        "UsingReact.lazy()withSuspense"
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, Server Components are automaticallycode split, and you can usestreamingto progressively send pieces of UI from the server to the client. Lazy loading applies to Client Components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "next/dynamic"
                },
                {
                    "type": "p",
                    "text": "next/dynamicis a composite ofReact.lazy()andSuspense. It behaves the same way in theappandpagesdirectories to allow for incremental migration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Importing Client Components"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useState }from'react'importdynamicfrom'next/dynamic'// Client Components:constComponentA=dynamic(()=>import('../components/A'))constComponentB=dynamic(()=>import('../components/B'))constComponentC=dynamic(()=>import('../components/C'),{ ssr:false})exportdefaultfunctionClientComponentExample() {const[showMore,setShowMore]=useState(false)return(<div>{/* Load immediately, but in a separate client bundle */}<ComponentA/>{/* Load on demand, only when/if the condition is met */}{showMore&&<ComponentB/>}<buttononClick={()=>setShowMore(!showMore)}>Toggle</button>{/* Load only on the client side */}<ComponentC/></div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Skipping SSR"
                },
                {
                    "type": "p",
                    "text": "When usingReact.lazy()and Suspense, Client Components will be pre-rendered (SSR) by default."
                },
                {
                    "type": "p",
                    "text": "If you want to disable pre-rendering for a Client Component, you can use thessroption set tofalse:"
                },
                {
                    "type": "code",
                    "code": "constComponentC=dynamic(()=>import('../components/C'),{ ssr:false})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Importing Server Components"
                },
                {
                    "type": "p",
                    "text": "If you dynamically import a Server Component, only the Client Components that are children of the Server Component will be lazy-loaded - not the Server Component itself."
                },
                {
                    "type": "code",
                    "code": "importdynamicfrom'next/dynamic'// Server Component:constServerComponent=dynamic(()=>import('../components/ServerComponent'))exportdefaultfunctionServerComponentExample() {return(<div><ServerComponent/></div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Loading External Libraries"
                },
                {
                    "type": "p",
                    "text": "External libraries can be loaded on demand using theimport()function. This example uses the external libraryfuse.jsfor fuzzy search. The module is only loaded on the client after the user types in the search input."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useState }from'react'constnames=['Tim','Joe','Bel','Lee']exportdefaultfunctionPage() {const[results,setResults]=useState()return(<div><inputtype=\"text\"placeholder=\"Search\"onChange={async(e)=>{const{value}=e.currentTarget// Dynamically load fuse.jsconstFuse=(awaitimport('fuse.js')).defaultconstfuse=newFuse(names)setResults(fuse.search(value))}}/><pre>Results: {JSON.stringify(results,null,2)}</pre></div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding a custom loading component"
                },
                {
                    "type": "code",
                    "code": "importdynamicfrom'next/dynamic'constWithCustomLoading=dynamic(()=>import('../components/WithCustomLoading'),{loading:()=><p>Loading...</p>,})exportdefaultfunctionPage() {return(<div>{/* The loading component will be rendered while  <WithCustomLoading/> is loading */}<WithCustomLoading/></div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Importing Named Exports"
                },
                {
                    "type": "p",
                    "text": "To dynamically import a named export, you can return it from the Promise returned byimport()function:"
                },
                {
                    "type": "code",
                    "code": "'use client'exportfunctionHello() {return<p>Hello!</p>}"
                },
                {
                    "type": "code",
                    "code": "importdynamicfrom'next/dynamic'constClientComponent=dynamic(()=>import('../components/hello').then((mod)=>mod.Hello))"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/memory-usage",
            "title": "Optimizing: Memory Usage | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Memory Usage"
                },
                {
                    "type": "p",
                    "text": "As applications grow and become more feature rich, they can demand more resources when developing locally or creating production builds."
                },
                {
                    "type": "p",
                    "text": "Let's explore some strategies and techniques to optimize memory and address common memory issues in Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reduce number of dependencies"
                },
                {
                    "type": "p",
                    "text": "Applications with a large amount of dependencies will use more memory."
                },
                {
                    "type": "p",
                    "text": "TheBundle Analyzercan help you investigate large dependencies in your application that may be able to be removed to improve performance and memory usage."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Runnext buildwith--experimental-debug-memory-usage"
                },
                {
                    "type": "p",
                    "text": "Starting in14.2.0, you can runnext build --experimental-debug-memory-usageto run the build in a mode where Next.js will print out information about memory usage continuously throughout the build, such as heap usage and garbage collection statistics. Heap snapshots will also be taken automatically when memory usage gets close to the configured limit."
                },
                {
                    "type": "p",
                    "text": "Good to know: This feature is not compatible with the Webpack build worker option which is auto-enabled unless you have custom webpack config."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Record a heap profile"
                },
                {
                    "type": "p",
                    "text": "To look for memory issues, you can record a heap profile from Node.js and load it in Chrome DevTools to identify potential sources of memory leaks."
                },
                {
                    "type": "p",
                    "text": "In your terminal, pass the--heap-profflag to Node.js when starting your Next.js build:"
                },
                {
                    "type": "code",
                    "code": "node--heap-profnode_modules/next/dist/bin/nextbuild"
                },
                {
                    "type": "p",
                    "text": "At the end of the build, a.heapprofilefile will be created by Node.js."
                },
                {
                    "type": "p",
                    "text": "In Chrome DevTools, you can open the Memory tab and click on the \"Load Profile\" button to visualize the file."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Analyze a snapshot of the heap"
                },
                {
                    "type": "p",
                    "text": "You can use an inspector tool to analyze the memory usage of the application."
                },
                {
                    "type": "p",
                    "text": "When running thenext buildornext devcommand, addNODE_OPTIONS=--inspectto the beginning of the command. This will expose the inspector agent on the default port.\nIf you wish to break before any user code starts, you can pass--inspect-brkinstead. While the process is running, you can use a tool such as Chrome DevTools to connect to the debugging port to record and analyze a snapshot of the heap to see what memory is being retained."
                },
                {
                    "type": "p",
                    "text": "Starting in14.2.0, you can also runnext buildwith the--experimental-debug-memory-usageflag to make it easier to take heap snapshots."
                },
                {
                    "type": "p",
                    "text": "While running in this mode, you can send aSIGUSR2signal to the process at any point, and the process will take a heap snapshot."
                },
                {
                    "type": "p",
                    "text": "The heap snapshot will be saved to the project root of the Next.js application and can be loaded in any heap analyzer, such as Chrome DevTools, to see what memory is retained. This mode is not yet compatible with Webpack build workers."
                },
                {
                    "type": "p",
                    "text": "Seehow to record and analyze heap snapshotsfor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Webpack build worker"
                },
                {
                    "type": "p",
                    "text": "The Webpack build worker allows you to run Webpack compilations inside a separate Node.js worker which will decrease memory usage of your application during builds."
                },
                {
                    "type": "p",
                    "text": "This option is enabled by default if your application does not have a custom Webpack configuration starting inv14.1.0."
                },
                {
                    "type": "p",
                    "text": "If you are using an older version of Next.js or you have a custom Webpack configuration, you can enable this option by settingexperimental.webpackBuildWorker: trueinside yournext.config.js."
                },
                {
                    "type": "p",
                    "text": "Good to know: This feature may not be compatible with all custom Webpack plugins."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Disable Webpack cache"
                },
                {
                    "type": "p",
                    "text": "TheWebpack cachesaves generated Webpack modules in memory and/or to disk to improve the speed of builds. This can\nhelp with performance, but it will also increase the memory usage of your application to store the cached data."
                },
                {
                    "type": "p",
                    "text": "You can disable this behavior by adding acustom Webpack configurationto your application:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={webpack:(config,{ buildId,dev,isServer,defaultLoaders,nextRuntime,webpack })=>{if(config.cache&&!dev) {config.cache=Object.freeze({type:'memory',})}// Important: return the modified configreturnconfig},}exportdefaultnextConfig"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Disable source maps"
                },
                {
                    "type": "p",
                    "text": "Generating source maps consumes extra memory during the build process."
                },
                {
                    "type": "p",
                    "text": "You can disable source map generation by addingproductionBrowserSourceMaps: falseandexperimental.serverSourceMaps: falseto your Next.js configuration."
                },
                {
                    "type": "p",
                    "text": "Good to know: Some plugins may turn on source maps and may require custom configuration to disable."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Edge memory issues"
                },
                {
                    "type": "p",
                    "text": "Next.jsv14.1.3fixed a memory issue when using the Edge runtime. Please update to this version (or later) to see if it addresses your issue."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/metadata",
            "title": "Optimizing: Metadata | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Metadata"
                },
                {
                    "type": "p",
                    "text": "Next.js has a Metadata API that can be used to define your application metadata (e.g.metaandlinktags inside your HTMLheadelement) for improved SEO and web shareability."
                },
                {
                    "type": "p",
                    "text": "There are two ways you can add metadata to your application:"
                },
                {
                    "type": "list",
                    "items": [
                        "Config-based Metadata: Export astaticmetadataobjector a dynamicgenerateMetadatafunctionin alayout.jsorpage.jsfile.",
                        "File-based Metadata: Add static or dynamically generated special files to route segments."
                    ]
                },
                {
                    "type": "p",
                    "text": "With both these options, Next.js will automatically generate the relevant<head>elements for your pages. You can also create dynamic OG images using theImageResponseconstructor."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Static Metadata"
                },
                {
                    "type": "p",
                    "text": "To define static metadata, export aMetadataobjectfrom alayout.jsor staticpage.jsfile."
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'...',description:'...',}exportdefaultfunctionPage() {}"
                },
                {
                    "type": "p",
                    "text": "For all the available options, see theAPI Reference."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Metadata"
                },
                {
                    "type": "p",
                    "text": "You can usegenerateMetadatafunction tofetchmetadata that requires dynamic values."
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata,ResolvingMetadata }from'next'typeProps={params:{ id:string}searchParams:{ [key:string]:string|string[]|undefined}}exportasyncfunctiongenerateMetadata({ params,searchParams }:Props,parent:ResolvingMetadata):Promise<Metadata> {// read route paramsconstid=params.id// fetch dataconstproduct=awaitfetch(`https://.../${id}`).then((res)=>res.json())// optionally access and extend (rather than replace) parent metadataconstpreviousImages=(awaitparent).openGraph?.images||[]return{title:product.title,openGraph:{images:['/some-specific-page-image.jpg',...previousImages],},}}exportdefaultfunctionPage({ params,searchParams }:Props) {}"
                },
                {
                    "type": "p",
                    "text": "For all the available params, see theAPI Reference."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Both static and dynamic metadata throughgenerateMetadataareonly supported in Server Components.",
                        "fetchrequests are automaticallymemoizedfor the same data acrossgenerateMetadata,generateStaticParams, Layouts, Pages, and Server Components. Reactcachecan be usediffetchis unavailable.",
                        "Next.js will wait for data fetching insidegenerateMetadatato complete before streaming UI to the client. This guarantees the first part of astreamed responseincludes<head>tags."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "File-based metadata"
                },
                {
                    "type": "p",
                    "text": "These special files are available for metadata:"
                },
                {
                    "type": "list",
                    "items": [
                        "favicon.ico, apple-icon.jpg, and icon.jpg",
                        "opengraph-image.jpg and twitter-image.jpg",
                        "robots.txt",
                        "sitemap.xml"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can use these for static metadata, or you can programmatically generate these files with code."
                },
                {
                    "type": "p",
                    "text": "For implementation and examples, see theMetadata FilesAPI Reference andDynamic Image Generation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Behavior"
                },
                {
                    "type": "p",
                    "text": "File-based metadata has the higher priority and will override any config-based metadata."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Default Fields"
                },
                {
                    "type": "p",
                    "text": "There are two defaultmetatags that are always added even if a route doesn't define metadata:"
                },
                {
                    "type": "list",
                    "items": [
                        "Themeta charset tagsets the character encoding for the website.",
                        "Themeta viewport tagsets the viewport width and scale for the website to adjust for different devices."
                    ]
                },
                {
                    "type": "code",
                    "code": "<metacharset=\"utf-8\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/>"
                },
                {
                    "type": "p",
                    "text": "Good to know: You can overwrite the defaultviewportmeta tag."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Ordering"
                },
                {
                    "type": "p",
                    "text": "Metadata is evaluated in order, starting from the root segment down to the segment closest to the finalpage.jssegment. For example:"
                },
                {
                    "type": "list",
                    "items": [
                        "app/layout.tsx(Root Layout)",
                        "app/blog/layout.tsx(Nested Blog Layout)",
                        "app/blog/[slug]/page.tsx(Blog Page)"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Merging"
                },
                {
                    "type": "p",
                    "text": "Following theevaluation order, Metadata objects exported from multiple segments in the same route areshallowlymerged together to form the final metadata output of a route. Duplicate keys arereplacedbased on their ordering."
                },
                {
                    "type": "p",
                    "text": "This means metadata with nested fields such asopenGraphandrobotsthat are defined in an earlier segment areoverwrittenby the last segment to define them."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Overwriting fields"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={title:'Acme',openGraph:{title:'Acme',description:'Acme is a...',},}"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={title:'Blog',openGraph:{title:'Blog',},}// Output:// <title>Blog</title>// <meta property=\"og:title\" content=\"Blog\" />"
                },
                {
                    "type": "p",
                    "text": "In the example above:"
                },
                {
                    "type": "list",
                    "items": [
                        "titlefromapp/layout.jsisreplacedbytitleinapp/blog/page.js.",
                        "AllopenGraphfields fromapp/layout.jsarereplacedinapp/blog/page.jsbecauseapp/blog/page.jssetsopenGraphmetadata. Note the absence ofopenGraph.description."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you'd like to share some nested fields between segments while overwriting others, you can pull them out into a separate variable:"
                },
                {
                    "type": "code",
                    "code": "exportconstopenGraphImage={ images:['http://...'] }"
                },
                {
                    "type": "code",
                    "code": "import{ openGraphImage }from'./shared-metadata'exportconstmetadata={openGraph:{...openGraphImage,title:'Home',},}"
                },
                {
                    "type": "code",
                    "code": "import{ openGraphImage }from'../shared-metadata'exportconstmetadata={openGraph:{...openGraphImage,title:'About',},}"
                },
                {
                    "type": "p",
                    "text": "In the example above, the OG image is shared betweenapp/layout.jsandapp/about/page.jswhile the titles are different."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Inheriting fields"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={title:'Acme',openGraph:{title:'Acme',description:'Acme is a...',},}"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={title:'About',}// Output:// <title>About</title>// <meta property=\"og:title\" content=\"Acme\" />// <meta property=\"og:description\" content=\"Acme is a...\" />"
                },
                {
                    "type": "p",
                    "text": "Notes"
                },
                {
                    "type": "list",
                    "items": [
                        "titlefromapp/layout.jsisreplacedbytitleinapp/about/page.js.",
                        "AllopenGraphfields fromapp/layout.jsareinheritedinapp/about/page.jsbecauseapp/about/page.jsdoesn't setopenGraphmetadata."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Image Generation"
                },
                {
                    "type": "p",
                    "text": "TheImageResponseconstructor allows you to generate dynamic images using JSX and CSS. This is useful for creating social media images such as Open Graph images, Twitter cards, and more."
                },
                {
                    "type": "p",
                    "text": "ImageResponseuses theEdge Runtime, and Next.js automatically adds the correct headers to cached images at the edge, helping improve performance and reducing recomputation."
                },
                {
                    "type": "p",
                    "text": "To use it, you can importImageResponsefromnext/og:"
                },
                {
                    "type": "code",
                    "code": "import{ ImageResponse }from'next/og'exportconstruntime='edge'exportasyncfunctionGET() {returnnewImageResponse((<divstyle={{fontSize:128,background:'white',width:'100%',height:'100%',display:'flex',textAlign:'center',alignItems:'center',justifyContent:'center',}}>Hello world!</div>),{width:1200,height:600,})}"
                },
                {
                    "type": "p",
                    "text": "ImageResponseintegrates well with other Next.js APIs, includingRoute Handlersand file-based Metadata. For example, you can useImageResponsein aopengraph-image.tsxfile to generate Open Graph images at build time or dynamically at request time."
                },
                {
                    "type": "p",
                    "text": "ImageResponsesupports common CSS properties including flexbox and absolute positioning, custom fonts, text wrapping, centering, and nested images.See the full list of supported CSS properties."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Examples are available in theVercel OG Playground.",
                        "ImageResponseuses@vercel/og,Satori, and Resvg to convert HTML and CSS into PNG.",
                        "Only the Edge Runtime is supported. The default Node.js runtime will not work.",
                        "Only flexbox and a subset of CSS properties are supported. Advanced layouts (e.g.display: grid) will not work.",
                        "Maximum bundle size of500KB. The bundle size includes your JSX, CSS, fonts, images, and any other assets. If you exceed the limit, consider reducing the size of any assets or fetching at runtime.",
                        "Onlyttf,otf, andwofffont formats are supported. To maximize the font parsing speed,ttforotfare preferred overwoff."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "JSON-LD"
                },
                {
                    "type": "p",
                    "text": "JSON-LDis a format for structured data that can be used by search engines to understand your content. For example, you can use it to describe a person, an event, an organization, a movie, a book, a recipe, and many other types of entities."
                },
                {
                    "type": "p",
                    "text": "Our current recommendation for JSON-LD is to render structured data as a<script>tag in yourlayout.jsorpage.jscomponents. For example:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage({ params }) {constproduct=awaitgetProduct(params.id)constjsonLd={'@context':'https://schema.org','@type':'Product',name:product.name,image:product.image,description:product.description,}return(<section>{/* Add JSON-LD to your page */}<scripttype=\"application/ld+json\"dangerouslySetInnerHTML={{ __html:JSON.stringify(jsonLd) }}/>{/* ... */}</section>)}"
                },
                {
                    "type": "p",
                    "text": "You can validate and test your structured data with theRich Results Testfor Google or the genericSchema Markup Validator."
                },
                {
                    "type": "p",
                    "text": "You can type your JSON-LD with TypeScript using community packages likeschema-dts:"
                },
                {
                    "type": "code",
                    "code": "import{ Product,WithContext }from'schema-dts'constjsonLd:WithContext<Product>={'@context':'https://schema.org','@type':'Product',name:'Next.js Sticker',image:'https://nextjs.org/imgs/sticker.png',description:'Dynamic at the speed of static.',}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateMetadata"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata Files"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateViewport"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/open-telemetry",
            "title": "Optimizing: OpenTelemetry | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "OpenTelemetry"
                },
                {
                    "type": "p",
                    "text": "Good to know: This feature isexperimental, you need to explicitly opt-in by providingexperimental.instrumentationHook = true;in yournext.config.js."
                },
                {
                    "type": "p",
                    "text": "Observability is crucial for understanding and optimizing the behavior and performance of your Next.js app."
                },
                {
                    "type": "p",
                    "text": "As applications become more complex, it becomes increasingly difficult to identify and diagnose issues that may arise. By leveraging observability tools, such as logging and metrics, developers can gain insights into their application's behavior and identify areas for optimization. With observability, developers can proactively address issues before they become major problems and provide a better user experience. Therefore, it is highly recommended to use observability in your Next.js applications to improve performance, optimize resources, and enhance user experience."
                },
                {
                    "type": "p",
                    "text": "We recommend using OpenTelemetry for instrumenting your apps.\nIt's a platform-agnostic way to instrument apps that allows you to change your observability provider without changing your code.\nReadOfficial OpenTelemetry docsfor more information about OpenTelemetry and how it works."
                },
                {
                    "type": "p",
                    "text": "This documentation uses terms likeSpan,TraceorExporterthroughout this doc, all of which can be found inthe OpenTelemetry Observability Primer."
                },
                {
                    "type": "p",
                    "text": "Next.js supports OpenTelemetry instrumentation out of the box, which means that we already instrumented Next.js itself.\nWhen you enable OpenTelemetry we will automatically wrap all your code likegetStaticPropsinspanswith helpful attributes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Getting Started"
                },
                {
                    "type": "p",
                    "text": "OpenTelemetry is extensible but setting it up properly can be quite verbose.\nThat's why we prepared a package@vercel/otelthat helps you get started quickly."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using@vercel/otel"
                },
                {
                    "type": "p",
                    "text": "To get started, you must install@vercel/otel:"
                },
                {
                    "type": "code",
                    "code": "npminstall@vercel/otel"
                },
                {
                    "type": "p",
                    "text": "Next, create a custominstrumentation.ts(or.js) file in theroot directoryof the project (or insidesrcfolder if using one):"
                },
                {
                    "type": "code",
                    "code": "import{ registerOTel }from'@vercel/otel'exportfunctionregister() {registerOTel({ serviceName:'next-app'})}"
                },
                {
                    "type": "p",
                    "text": "See the@vercel/oteldocumentationfor additional configuration options."
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "Theinstrumentationfile should be in the root of your project and not inside theapporpagesdirectory. If you're using thesrcfolder, then place the file insidesrcalongsidepagesandapp.",
                        "If you use thepageExtensionsconfig optionto add a suffix, you will also need to update theinstrumentationfilename to match.",
                        "We have created a basicwith-opentelemetryexample that you can use."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Manual OpenTelemetry configuration"
                },
                {
                    "type": "p",
                    "text": "The@vercel/otelpackage provides many configuration options and should serve most of common use cases. But if it doesn't suit your needs, you can configure OpenTelemetry manually."
                },
                {
                    "type": "p",
                    "text": "Firstly you need to install OpenTelemetry packages:"
                },
                {
                    "type": "code",
                    "code": "npminstall@opentelemetry/sdk-node@opentelemetry/resources@opentelemetry/semantic-conventions@opentelemetry/sdk-trace-node@opentelemetry/exporter-trace-otlp-http"
                },
                {
                    "type": "p",
                    "text": "Now you can initializeNodeSDKin yourinstrumentation.ts.\nUnlike@vercel/otel,NodeSDKis not compatible with edge runtime, so you need to make sure that you are importing them only whenprocess.env.NEXT_RUNTIME === 'nodejs'. We recommend creating a new fileinstrumentation.node.tswhich you conditionally import only when using node:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionregister() {if(process.env.NEXT_RUNTIME==='nodejs') {awaitimport('./instrumentation.node.ts')}}"
                },
                {
                    "type": "code",
                    "code": "import{ NodeSDK }from'@opentelemetry/sdk-node'import{ OTLPTraceExporter }from'@opentelemetry/exporter-trace-otlp-http'import{ Resource }from'@opentelemetry/resources'import{ SEMRESATTRS_SERVICE_NAME }from'@opentelemetry/semantic-conventions'import{ SimpleSpanProcessor }from'@opentelemetry/sdk-trace-node'constsdk=newNodeSDK({resource:newResource({[SEMRESATTRS_SERVICE_NAME]:'next-app',}),spanProcessor:newSimpleSpanProcessor(newOTLPTraceExporter()),})sdk.start()"
                },
                {
                    "type": "p",
                    "text": "Doing this is equivalent to using@vercel/otel, but it's possible to modify and extend some features that are not exposed by the@vercel/otel. If edge runtime support is necessary, you will have to use@vercel/otel."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Testing your instrumentation"
                },
                {
                    "type": "p",
                    "text": "You need an OpenTelemetry collector with a compatible backend to test OpenTelemetry traces locally.\nWe recommend using ourOpenTelemetry dev environment."
                },
                {
                    "type": "p",
                    "text": "If everything works well you should be able to see the root server span labeled asGET /requested/pathname.\nAll other spans from that particular trace will be nested under it."
                },
                {
                    "type": "p",
                    "text": "Next.js traces more spans than are emitted by default.\nTo see more spans, you must setNEXT_OTEL_VERBOSE=1."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deployment"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using OpenTelemetry Collector"
                },
                {
                    "type": "p",
                    "text": "When you are deploying with OpenTelemetry Collector, you can use@vercel/otel.\nIt will work both on Vercel and when self-hosted."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Deploying on Vercel"
                },
                {
                    "type": "p",
                    "text": "We made sure that OpenTelemetry works out of the box on Vercel."
                },
                {
                    "type": "p",
                    "text": "FollowVercel documentationto connect your project to an observability provider."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Self-hosting"
                },
                {
                    "type": "p",
                    "text": "Deploying to other platforms is also straightforward. You will need to spin up your own OpenTelemetry Collector to receive and process the telemetry data from your Next.js app."
                },
                {
                    "type": "p",
                    "text": "To do this, follow theOpenTelemetry Collector Getting Started guide, which will walk you through setting up the collector and configuring it to receive data from your Next.js app."
                },
                {
                    "type": "p",
                    "text": "Once you have your collector up and running, you can deploy your Next.js app to your chosen platform following their respective deployment guides."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Exporters"
                },
                {
                    "type": "p",
                    "text": "OpenTelemetry Collector is not necessary. You can use a custom OpenTelemetry exporter with@vercel/otelormanual OpenTelemetry configuration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Custom Spans"
                },
                {
                    "type": "p",
                    "text": "You can add a custom span withOpenTelemetry APIs."
                },
                {
                    "type": "code",
                    "code": "npminstall@opentelemetry/api"
                },
                {
                    "type": "p",
                    "text": "The following example demonstrates a function that fetches GitHub stars and adds a customfetchGithubStarsspan to track the fetch request's result:"
                },
                {
                    "type": "code",
                    "code": "import{ trace }from'@opentelemetry/api'exportasyncfunctionfetchGithubStars() {returnawaittrace.getTracer('nextjs-example').startActiveSpan('fetchGithubStars',async(span)=>{try{returnawaitgetValue()}finally{span.end()}})}"
                },
                {
                    "type": "p",
                    "text": "Theregisterfunction will execute before your code runs in a new environment.\nYou can start creating new spans, and they should be correctly added to the exported trace."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Default Spans in Next.js"
                },
                {
                    "type": "p",
                    "text": "Next.js automatically instruments several spans for you to provide useful insights into your application's performance."
                },
                {
                    "type": "p",
                    "text": "Attributes on spans followOpenTelemetry semantic conventions. We also add some custom attributes under thenextnamespace:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name- duplicates span name",
                        "next.span_type- each span type has a unique identifier",
                        "next.route- The route pattern of the request (e.g.,/[param]/user).",
                        "next.rsc(true/false) - Whether the request is an RSC request, such as prefetch.",
                        "next.pageThis is an internal value used by an app router.You can think about it as a route to a special file (likepage.ts,layout.ts,loading.tsand others)It can be used as a unique identifier only when paired withnext.routebecause/layoutcan be used to identify both/(groupA)/layout.tsand/(groupB)/layout.ts",
                        "This is an internal value used by an app router.",
                        "You can think about it as a route to a special file (likepage.ts,layout.ts,loading.tsand others)",
                        "It can be used as a unique identifier only when paired withnext.routebecause/layoutcan be used to identify both/(groupA)/layout.tsand/(groupB)/layout.ts"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This is an internal value used by an app router.",
                        "You can think about it as a route to a special file (likepage.ts,layout.ts,loading.tsand others)",
                        "It can be used as a unique identifier only when paired withnext.routebecause/layoutcan be used to identify both/(groupA)/layout.tsand/(groupB)/layout.ts"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "[http.method] [next.route]"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:BaseServer.handleRequest"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the root span for each incoming request to your Next.js application. It tracks the HTTP method, route, target, and status code of the request."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "Common HTTP attributeshttp.methodhttp.status_code",
                        "http.method",
                        "http.status_code",
                        "Server HTTP attributeshttp.routehttp.target",
                        "http.route",
                        "http.target",
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "http.method",
                        "http.status_code"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "http.route",
                        "http.target"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "render route (app) [next.route]"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:AppRender.getBodyResult."
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the process of rendering a route in the app router."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "fetch [http.method] [http.url]"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:AppRender.fetch"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the fetch request executed in your code."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "Common HTTP attributeshttp.method",
                        "http.method",
                        "Client HTTP attributeshttp.urlnet.peer.namenet.peer.port(only if specified)",
                        "http.url",
                        "net.peer.name",
                        "net.peer.port(only if specified)",
                        "next.span_name",
                        "next.span_type"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "http.method"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "http.url",
                        "net.peer.name",
                        "net.peer.port(only if specified)"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span can be turned off by settingNEXT_OTEL_FETCH_DISABLED=1in your environment. This is useful when you want to use a custom fetch instrumentation library."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "executing api route (app) [next.route]"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:AppRouteRouteHandlers.runHandler."
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the execution of an API route handler in the app router."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "getServerSideProps [next.route]"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:Render.getServerSideProps."
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the execution ofgetServerSidePropsfor a specific route."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "getStaticProps [next.route]"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:Render.getStaticProps."
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the execution ofgetStaticPropsfor a specific route."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "render route (pages) [next.route]"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:Render.renderDocument."
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the process of rendering the document for a specific route."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateMetadata [next.page]"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:ResolveMetadata.generateMetadata."
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the process of generating metadata for a specific page (a single route can have multiple of these spans)."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.page"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "resolve page components"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:NextNodeServer.findPageComponents."
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the process of resolving page components for a specific page."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "resolve segment modules"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:NextNodeServer.getLayoutOrPageModule."
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents loading of code modules for a layout or a page."
                },
                {
                    "type": "p",
                    "text": "Attributes:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.segment"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "start response"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_type:NextNodeServer.startResponse."
                    ]
                },
                {
                    "type": "p",
                    "text": "This zero-length span represents the time when the first byte has been sent in the response."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/package-bundling",
            "title": "Optimizing: Package Bundling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Bundle Analyzer"
                },
                {
                    "type": "p",
                    "text": "@next/bundle-analyzeris a plugin for Next.js that helps you manage the size of your JavaScript modules. It generates a visual report of the size of each module and their dependencies. You can use the information to remove large dependencies, split your code, or only load some parts when needed, reducing the amount of data transferred to the client."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Installation"
                },
                {
                    "type": "p",
                    "text": "Install the plugin by running the following command:"
                },
                {
                    "type": "code",
                    "code": "npmi@next/bundle-analyzer# oryarnadd@next/bundle-analyzer# orpnpmadd@next/bundle-analyzer"
                },
                {
                    "type": "p",
                    "text": "Then, add the bundle analyzer's settings to yournext.config.js."
                },
                {
                    "type": "code",
                    "code": "constwithBundleAnalyzer=require('@next/bundle-analyzer')({enabled:process.env.ANALYZE==='true',})/**@type{import('next').NextConfig}*/constnextConfig={}module.exports=withBundleAnalyzer(nextConfig)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Analyzing your bundles"
                },
                {
                    "type": "p",
                    "text": "Run the following command to analyze your bundles:"
                },
                {
                    "type": "code",
                    "code": "ANALYZE=truenpm run build# orANALYZE=trueyarn build# orANALYZE=truepnpm build"
                },
                {
                    "type": "p",
                    "text": "The report will open three new tabs in your browser, which you can inspect. Doing this regularly while you develop and before deploying your site can help you identify large bundles earlier, and architect your application to be more performant."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Production Checklist"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/scripts",
            "title": "Optimizing: Scripts | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Script Optimization"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Layout Scripts"
                },
                {
                    "type": "p",
                    "text": "To load a third-party script for multiple routes, importnext/scriptand include the script directly in your layout component:"
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionDashboardLayout({children,}:{children:React.ReactNode}) {return(<><section>{children}</section><Scriptsrc=\"https://example.com/script.js\"/></>)}"
                },
                {
                    "type": "p",
                    "text": "The third-party script is fetched when the folder route (e.g.dashboard/page.js) or any nested route (e.g.dashboard/settings/page.js) is accessed by the user. Next.js will ensure the script willonly load once, even if a user navigates between multiple routes in the same layout."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Application Scripts"
                },
                {
                    "type": "p",
                    "text": "To load a third-party script for all routes, importnext/scriptand include the script directly in your root layout:"
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body><Scriptsrc=\"https://example.com/script.js\"/></html>)}"
                },
                {
                    "type": "p",
                    "text": "This script will load and execute whenanyroute in your application is accessed. Next.js will ensure the script willonly load once, even if a user navigates between multiple pages."
                },
                {
                    "type": "p",
                    "text": "Recommendation: We recommend only including third-party scripts in specific pages or layouts in order to minimize any unnecessary impact to performance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Strategy"
                },
                {
                    "type": "p",
                    "text": "Although the default behavior ofnext/scriptallows you to load third-party scripts in any page or layout, you can fine-tune its loading behavior by using thestrategyproperty:"
                },
                {
                    "type": "list",
                    "items": [
                        "beforeInteractive: Load the script before any Next.js code and before any page hydration occurs.",
                        "afterInteractive: (default) Load the script early but after some hydration on the page occurs.",
                        "lazyOnload: Load the script later during browser idle time.",
                        "worker: (experimental) Load the script in a web worker."
                    ]
                },
                {
                    "type": "p",
                    "text": "Refer to thenext/scriptAPI reference documentation to learn more about each strategy and their use cases."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Offloading Scripts To A Web Worker (Experimental)"
                },
                {
                    "type": "p",
                    "text": "Warning:Theworkerstrategy is not yet stable and does not yet work with theappdirectory. Use with caution."
                },
                {
                    "type": "p",
                    "text": "Scripts that use theworkerstrategy are offloaded and executed in a web worker withPartytown. This can improve the performance of your site by dedicating the main thread to the rest of your application code."
                },
                {
                    "type": "p",
                    "text": "This strategy is still experimental and can only be used if thenextScriptWorkersflag is enabled innext.config.js:"
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{nextScriptWorkers:true,},}"
                },
                {
                    "type": "p",
                    "text": "Then, runnext(normallynpm run devoryarn dev) and Next.js will guide you through the installation of the required packages to finish the setup:"
                },
                {
                    "type": "code",
                    "code": "npmrundev"
                },
                {
                    "type": "p",
                    "text": "You'll see instructions like these: Please install Partytown by runningnpm install @builder.io/partytown"
                },
                {
                    "type": "p",
                    "text": "Once setup is complete, definingstrategy=\"worker\"will automatically instantiate Partytown in your application and offload the script to a web worker."
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionHome() {return(<><Scriptsrc=\"https://example.com/script.js\"strategy=\"worker\"/></>)}"
                },
                {
                    "type": "p",
                    "text": "There are a number of trade-offs that need to be considered when loading a third-party script in a web worker. Please see Partytown'stradeoffsdocumentation for more information."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Inline Scripts"
                },
                {
                    "type": "p",
                    "text": "Inline scripts, or scripts not loaded from an external file, are also supported by the Script component. They can be written by placing the JavaScript within curly braces:"
                },
                {
                    "type": "code",
                    "code": "<Scriptid=\"show-banner\">{`document.getElementById('banner').classList.remove('hidden')`}</Script>"
                },
                {
                    "type": "p",
                    "text": "Or by using thedangerouslySetInnerHTMLproperty:"
                },
                {
                    "type": "code",
                    "code": "<Scriptid=\"show-banner\"dangerouslySetInnerHTML={{__html:`document.getElementById('banner').classList.remove('hidden')`,}}/>"
                },
                {
                    "type": "p",
                    "text": "Warning: Anidproperty must be assigned for inline scripts in order for Next.js to track and optimize the script."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Executing Additional Code"
                },
                {
                    "type": "p",
                    "text": "Event handlers can be used with the Script component to execute additional code after a certain event occurs:"
                },
                {
                    "type": "list",
                    "items": [
                        "onLoad: Execute code after the script has finished loading.",
                        "onReady: Execute code after the script has finished loading and every time the component is mounted.",
                        "onError: Execute code if the script fails to load."
                    ]
                },
                {
                    "type": "p",
                    "text": "These handlers will only work whennext/scriptis imported and used inside of aClient Componentwhere\"use client\"is defined as the first line of code:"
                },
                {
                    "type": "code",
                    "code": "'use client'importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"onLoad={()=>{console.log('Script has loaded')}}/></>)}"
                },
                {
                    "type": "p",
                    "text": "Refer to thenext/scriptAPI reference to learn more about each event handler and view examples."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Additional Attributes"
                },
                {
                    "type": "p",
                    "text": "There are many DOM attributes that can be assigned to a<script>element that are not used by the Script component, likenonceorcustom data attributes. Including any additional attributes will automatically forward it to the final, optimized<script>element that is included in the HTML."
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"id=\"example-script\"nonce=\"XUENAJFW\"data-test=\"script\"/></>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<Script>"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/static-assets",
            "title": "Optimizing: Static Assets | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Static Assets in `public`"
                },
                {
                    "type": "p",
                    "text": "Next.js can serve static files, like images, under a folder calledpublicin the root directory. Files insidepubliccan then be referenced by your code starting from the base URL (/)."
                },
                {
                    "type": "p",
                    "text": "For example, the filepublic/avatars/me.pngcan be viewed by visiting the/avatars/me.pngpath. The code to display that image might look like:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportfunctionAvatar({ id,alt }) {return<Imagesrc={`/avatars/${id}.png`}alt={alt}width=\"64\"height=\"64\"/>}exportfunctionAvatarOfMe() {return<Avatarid=\"me\"alt=\"A portrait of me\"/>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Caching"
                },
                {
                    "type": "p",
                    "text": "Next.js cannot safely cache assets in thepublicfolder because they may change. The default caching headers applied are:"
                },
                {
                    "type": "code",
                    "code": "Cache-Control:public,max-age=0"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Robots, Favicons, and others"
                },
                {
                    "type": "p",
                    "text": "For static metadata files, such asrobots.txt,favicon.ico, etc, you should usespecial metadata filesinside theappfolder."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "The directory must be namedpublic. The name cannot be changed and it's the only directory used to serve static assets.",
                        "Only assets that are in thepublicdirectory atbuild timewill be served by Next.js. Files added at request time won't be available. We recommend using a third-party service likeVercel Blobfor persistent file storage."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/third-party-libraries",
            "title": "Optimizing: Third Party Libraries | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Third Party Libraries"
                },
                {
                    "type": "p",
                    "text": "@next/third-partiesis a library that provides a collection of components and utilities that\nimprove the performance and developer experience of loading popular third-party libraries in your\nNext.js application."
                },
                {
                    "type": "p",
                    "text": "All third-party integrations provided by@next/third-partieshave been optimized for performance\nand ease of use."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Getting Started"
                },
                {
                    "type": "p",
                    "text": "To get started, install the@next/third-partieslibrary:"
                },
                {
                    "type": "code",
                    "code": "npminstall@next/third-parties@latestnext@latest"
                },
                {
                    "type": "p",
                    "text": "@next/third-partiesis currently anexperimentallibrary under active development. We recommend installing it with thelatestorcanaryflags while we work on adding more third-party integrations."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Google Third-Parties"
                },
                {
                    "type": "p",
                    "text": "All supported third-party libraries from Google can be imported from@next/third-parties/google."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Google Tag Manager"
                },
                {
                    "type": "p",
                    "text": "TheGoogleTagManagercomponent can be used to instantiate aGoogle Tag\nManagercontainer to your\npage. By default, it fetches the original inline script after hydration occurs on the page."
                },
                {
                    "type": "p",
                    "text": "To load Google Tag Manager for all routes, include the component directly in your root layout and\npass in your GTM container ID:"
                },
                {
                    "type": "code",
                    "code": "import{ GoogleTagManager }from'@next/third-parties/google'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><GoogleTagManagergtmId=\"GTM-XYZ\"/><body>{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "To load Google Tag Manager for a single route, include the component in your page file:"
                },
                {
                    "type": "code",
                    "code": "import{ GoogleTagManager }from'@next/third-parties/google'exportdefaultfunctionPage() {return<GoogleTagManagergtmId=\"GTM-XYZ\"/>}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Sending Events"
                },
                {
                    "type": "p",
                    "text": "ThesendGTMEventfunction can be used to track user interactions on your page by sending events\nusing thedataLayerobject. For this function to work, the<GoogleTagManager />component must be\nincluded in either a parent layout, page, or component, or directly in the same file."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ sendGTMEvent }from'@next/third-parties/google'exportfunctionEventButton() {return(<div><buttononClick={()=>sendGTMEvent({ event:'buttonClicked',value:'xyz'})}>Send Event</button></div>)}"
                },
                {
                    "type": "p",
                    "text": "Refer to the Tag Managerdeveloper\ndocumentationto learn about the\ndifferent variables and events that can be passed into the function."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Options"
                },
                {
                    "type": "p",
                    "text": "Options to pass to the Google Tag Manager. For a full list of options, read theGoogle Tag Manager\ndocs."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Google Analytics"
                },
                {
                    "type": "p",
                    "text": "TheGoogleAnalyticscomponent can be used to includeGoogle Analytics\n4to your page via the Google tag\n(gtag.js). By default, it fetches the original scripts after hydration occurs on the page."
                },
                {
                    "type": "p",
                    "text": "Recommendation: If Google Tag Manager is already included in your application, you can\nconfigure Google Analytics directly using it, rather than including Google Analytics as a separate\ncomponent. Refer to thedocumentationto learn more about the differences between Tag Manager andgtag.js."
                },
                {
                    "type": "p",
                    "text": "To load Google Analytics for all routes, include the component directly in your root layout and pass\nin your measurement ID:"
                },
                {
                    "type": "code",
                    "code": "import{ GoogleAnalytics }from'@next/third-parties/google'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body><GoogleAnalyticsgaId=\"G-XYZ\"/></html>)}"
                },
                {
                    "type": "p",
                    "text": "To load Google Analytics for a single route, include the component in your page file:"
                },
                {
                    "type": "code",
                    "code": "import{ GoogleAnalytics }from'@next/third-parties/google'exportdefaultfunctionPage() {return<GoogleAnalyticsgaId=\"G-XYZ\"/>}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Sending Events"
                },
                {
                    "type": "p",
                    "text": "ThesendGAEventfunction can be used to measure user interactions on your page by sending events\nusing thedataLayerobject. For this function to work, the<GoogleAnalytics />component must be\nincluded in either a parent layout, page, or component, or directly in the same file."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ sendGAEvent }from'@next/third-parties/google'exportfunctionEventButton() {return(<div><buttononClick={()=>sendGAEvent({ event:'buttonClicked',value:'xyz'})}>Send Event</button></div>)}"
                },
                {
                    "type": "p",
                    "text": "Refer to the Google Analyticsdeveloper\ndocumentationto learn\nmore about event parameters."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Tracking Pageviews"
                },
                {
                    "type": "p",
                    "text": "Google Analytics automatically tracks pageviews when the browser history state changes. This means\nthat client-side navigations between Next.js routes will send pageview data without any configuration."
                },
                {
                    "type": "p",
                    "text": "To ensure that client-side navigations are being measured correctly, verify that the“Enhanced\nMeasurement”property is\nenabled in your Admin panel and the“Page changes based on browser history events”checkbox is\nselected."
                },
                {
                    "type": "p",
                    "text": "Note: If you decide to manually send pageview events, make sure to disable the default\npageview measurement to avoid having duplicate data. Refer to the Google Analyticsdeveloper\ndocumentationto learn more."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Options"
                },
                {
                    "type": "p",
                    "text": "Options to pass to the<GoogleAnalytics>component."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Google Maps Embed"
                },
                {
                    "type": "p",
                    "text": "TheGoogleMapsEmbedcomponent can be used to add aGoogle Maps\nEmbedto your page. By\ndefault, it uses theloadingattribute to lazy-load the embed below the fold."
                },
                {
                    "type": "code",
                    "code": "import{ GoogleMapsEmbed }from'@next/third-parties/google'exportdefaultfunctionPage() {return(<GoogleMapsEmbedapiKey=\"XYZ\"height={200}width=\"100%\"mode=\"place\"q=\"Brooklyn+Bridge,New+York,NY\"/>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Options"
                },
                {
                    "type": "p",
                    "text": "Options to pass to the Google Maps Embed. For a full list of options, read theGoogle Map Embed\ndocs."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "YouTube Embed"
                },
                {
                    "type": "p",
                    "text": "TheYouTubeEmbedcomponent can be used to load and display a YouTube embed. This component loads\nfaster by usinglite-youtube-embedunder the\nhood."
                },
                {
                    "type": "code",
                    "code": "import{ YouTubeEmbed }from'@next/third-parties/google'exportdefaultfunctionPage() {return<YouTubeEmbedvideoid=\"ogfYd705cRs\"height={400}params=\"controls=0\"/>}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Options"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/videos",
            "title": "Optimizing: Videos | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Video Optimization"
                },
                {
                    "type": "p",
                    "text": "This page outlines how to use videos with Next.js applications, showing how to store and display video files without affecting performance."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using<video>and<iframe>"
                },
                {
                    "type": "p",
                    "text": "Videos can be embedded on the page using the HTML<video>tag for direct video files and<iframe>for external platform-hosted videos."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<video>"
                },
                {
                    "type": "p",
                    "text": "The HTML<video>tag can embed self-hosted or directly served video content, allowing full control over the playback and appearance."
                },
                {
                    "type": "code",
                    "code": "exportfunctionVideo() {return(<videowidth=\"320\"height=\"240\"controlspreload=\"none\"><sourcesrc=\"/path/to/video.mp4\"type=\"video/mp4\"/><tracksrc=\"/path/to/captions.vtt\"kind=\"subtitles\"srcLang=\"en\"label=\"English\"/>Your browser does not support the video tag.</video>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Common<video>tag attributes"
                },
                {
                    "type": "p",
                    "text": "Good to know: When using theautoPlayattribute, it is important to also include themutedattribute to ensure the video plays automatically in most browsers and theplaysInlineattribute for compatibility with iOS devices."
                },
                {
                    "type": "p",
                    "text": "For a comprehensive list of video attributes, refer to theMDN documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Video best practices"
                },
                {
                    "type": "list",
                    "items": [
                        "Fallback Content:When using the<video>tag, include fallback content inside the tag for browsers that do not support video playback.",
                        "Subtitles or Captions:Include subtitles or captions for users who are deaf or hard of hearing. Utilize the<track>tag with your<video>elements to specify caption file sources.",
                        "Accessible Controls:Standard HTML5 video controls are recommended for keyboard navigation and screen reader compatibility. For advanced needs, consider third-party players likereact-playerorvideo.js, which offer accessible controls and consistent browser experience."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<iframe>"
                },
                {
                    "type": "p",
                    "text": "The HTML<iframe>tag allows you to embed videos from external platforms like YouTube or Vimeo."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {return(<iframesrc=\"https://www.youtube.com/watch?v=gfU1iZnjRZM\"frameborder=\"0\"allowfullscreen/>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Common<iframe>tag attributes"
                },
                {
                    "type": "p",
                    "text": "For a comprehensive list of iframe attributes, refer to theMDN documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Choosing a video embedding method"
                },
                {
                    "type": "p",
                    "text": "There are two ways you can embed videos in your Next.js application:"
                },
                {
                    "type": "list",
                    "items": [
                        "Self-hosted or direct video files:Embed self-hosted videos using the<video>tag for scenarios requiring detailed control over the player's functionality and appearance. This integration method within Next.js allows for customization and control of your video content.",
                        "Using video hosting services (YouTube, Vimeo, etc.):For video hosting services like YouTube or Vimeo, you'll embed their iframe-based players using the<iframe>tag. While this method limits some control over the player, it offers ease of use and features provided by these platforms."
                    ]
                },
                {
                    "type": "p",
                    "text": "Choose the embedding method that aligns with your application's requirements and the user experience you aim to deliver."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Embedding externally hosted videos"
                },
                {
                    "type": "p",
                    "text": "To embed videos from external platforms, you can use Next.js to fetch the video information and React Suspense to handle the fallback state while loading."
                },
                {
                    "type": "p",
                    "text": "1. Create a Server Component for video embedding"
                },
                {
                    "type": "p",
                    "text": "The first step is to create aServer Componentthat generates the appropriate iframe for embedding the video. This component will fetch the source URL for the video and render the iframe."
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionVideoComponent() {constsrc=awaitgetVideoSrc()return<iframesrc={src}frameborder=\"0\"allowfullscreen/>}"
                },
                {
                    "type": "p",
                    "text": "2. Stream the video component using React Suspense"
                },
                {
                    "type": "p",
                    "text": "After creating the Server Component to embed the video, the next step is tostreamthe component usingReact Suspense."
                },
                {
                    "type": "code",
                    "code": "import{ Suspense }from'react'importVideoComponentfrom'../ui/VideoComponent.jsx'exportdefaultfunctionPage() {return(<section><Suspensefallback={<p>Loading video...</p>}><VideoComponent/></Suspense>{/* Other content of the page */}</section>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: When embedding videos from external platforms, consider the following best practices:"
                },
                {
                    "type": "list",
                    "items": [
                        "Ensure the video embeds are responsive. Use CSS to make the iframe or video player adapt to different screen sizes.",
                        "Implementstrategies for loading videosbased on network conditions, especially for users with limited data plans."
                    ]
                },
                {
                    "type": "p",
                    "text": "This approach results in a better user experience as it prevents the page from blocking, meaning the user can interact with the page while the video component streams in."
                },
                {
                    "type": "p",
                    "text": "For a more engaging and informative loading experience, consider using a loading skeleton as the fallback UI. So instead of showing a simple loading message, you can show a skeleton that resembles the video player like this:"
                },
                {
                    "type": "code",
                    "code": "import{ Suspense }from'react'importVideoComponentfrom'../ui/VideoComponent.jsx'importVideoSkeletonfrom'../ui/VideoSkeleton.jsx'exportdefaultfunctionPage() {return(<section><Suspensefallback={<VideoSkeleton/>}><VideoComponent/></Suspense>{/* Other content of the page */}</section>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Self-hosted videos"
                },
                {
                    "type": "p",
                    "text": "Self-hosting videos may be preferable for several reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Complete control and independence: Self-hosting gives you direct management over your video content, from playback to appearance, ensuring full ownership and control, free from external platform constraints.",
                        "Customization for specific needs: Ideal for unique requirements, like dynamic background videos, it allows for tailored customization to align with design and functional needs.",
                        "Performance and scalability considerations: Choose storage solutions that are both high-performing and scalable, to support increasing traffic and content size effectively.",
                        "Cost and integration: Balance the costs of storage and bandwidth with the need for easy integration into your Next.js framework and broader tech ecosystem."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using Vercel Blob for video hosting"
                },
                {
                    "type": "p",
                    "text": "Vercel Bloboffers an efficient way to host videos, providing a scalable cloud storage solution that works well with Next.js. Here's how you can host a video using Vercel Blob:"
                },
                {
                    "type": "p",
                    "text": "1. Uploading a video to Vercel Blob"
                },
                {
                    "type": "p",
                    "text": "In your Vercel dashboard, navigate to the \"Storage\" tab and select yourVercel Blobstore. In the Blob table's upper-right corner, find and click the \"Upload\" button. Then, choose the video file you wish to upload. After the upload completes, the video file will appear in the Blob table."
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can upload your video using a server action. For detailed instructions, refer to the Vercel documentation onserver-side uploads. Vercel also supportsclient-side uploads. This method may be preferable for certain use cases."
                },
                {
                    "type": "p",
                    "text": "2. Displaying the video in Next.js"
                },
                {
                    "type": "p",
                    "text": "Once the video is uploaded and stored, you can display it in your Next.js application. Here's an example of how to do this using the<video>tag and React Suspense:"
                },
                {
                    "type": "code",
                    "code": "import{ Suspense }from'react'import{ list }from'@vercel/blob'exportdefaultfunctionPage() {return(<Suspensefallback={<p>Loading video...</p>}><VideoComponentfileName=\"my-video.mp4\"/></Suspense>)}asyncfunctionVideoComponent({ fileName }) {const{blobs}=awaitlist({prefix:fileName,limit:1,})const{url}=blobs[0]return(<videocontrolspreload=\"none\"aria-label=\"Video player\"><sourcesrc={url}type=\"video/mp4\"/>Your browser does not support the video tag.</video>)}"
                },
                {
                    "type": "p",
                    "text": "In this approach, the page uses the video's@vercel/blobURL to display the video using theVideoComponent. React Suspense is used to show a fallback until the video URL is fetched and the video is ready to be displayed."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding subtitles to your video"
                },
                {
                    "type": "p",
                    "text": "If you have subtitles for your video, you can easily add them using the<track>element inside your<video>tag. You can fetch the subtitle file fromVercel Blobin a similar way as the video file. Here's how you can update the<VideoComponent>to include subtitles."
                },
                {
                    "type": "code",
                    "code": "asyncfunctionVideoComponent({ fileName }) {const{blobs}=awaitlist({prefix:fileName,limit:2});const{url}=blobs[0];const{ url:captionsUrl}=blobs[1];return(<videocontrolspreload=\"none\"aria-label=\"Video player\"><sourcesrc={url}type=\"video/mp4\"/><tracksrc={captionsUrl}kind=\"subtitles\"srcLang=\"en\"label=\"English\">Your browser does not support the video tag.</video>);};"
                },
                {
                    "type": "p",
                    "text": "By following this approach, you can effectively self-host and integrate videos into your Next.js applications."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Resources"
                },
                {
                    "type": "p",
                    "text": "To continue learning more about video optimization and best practices, please refer to the following resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Understanding video formats and codecs: Choose the right format and codec, like MP4 for compatibility or WebM for web optimization, for your video needs. For more details, seeMozilla's guide on video codecs.",
                        "Video compression: Use tools like FFmpeg to effectively compress videos, balancing quality with file size. Learn about compression techniques atFFmpeg's official website.",
                        "Resolution and bitrate adjustment: Adjustresolution and bitratebased on the viewing platform, with lower settings for mobile devices.",
                        "Content Delivery Networks (CDNs): Utilize a CDN to enhance video delivery speed and manage high traffic. When using some storage solutions, such as Vercel Blob, CDN functionality is automatically handled for you.Learn moreabout CDNs and their benefits."
                    ]
                },
                {
                    "type": "p",
                    "text": "Explore these video streaming platforms for integrating video into your Next.js projects:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Open sourcenext-videocomponent"
                },
                {
                    "type": "list",
                    "items": [
                        "Provides a<Video>component for Next.js, compatible with various hosting services includingVercel Blob, S3, Backblaze, and Mux.",
                        "Detailed documentationfor usingnext-video.devwith different hosting services."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Cloudinary Integration"
                },
                {
                    "type": "list",
                    "items": [
                        "Officialdocumentation and integration guidefor using Cloudinary with Next.js.",
                        "Includes a<CldVideoPlayer>component fordrop-in video support.",
                        "Findexamplesof integrating Cloudinary with Next.js includingAdaptive Bitrate Streaming.",
                        "OtherCloudinary librariesincluding a Node.js SDK are also available."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Mux Video API"
                },
                {
                    "type": "list",
                    "items": [
                        "Mux provides astarter templatefor creating a video course with Mux and Next.js.",
                        "Learn about Mux's recommendations for embeddinghigh-performance video for your Next.js application.",
                        "Explore anexample projectdemonstrating Mux with Next.js."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fastly"
                },
                {
                    "type": "list",
                    "items": [
                        "Learn more about integrating Fastly's solutions forvideo on demandand streaming media into Next.js."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering",
            "title": "Building Your Application: Rendering | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Rendering"
                },
                {
                    "type": "p",
                    "text": "Rendering converts the code you write into user interfaces. React and Next.js allow you to create hybrid web applications where parts of your code can be rendered on the server or the client. This section will help you understand the differences between these rendering environments, strategies, and runtimes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fundamentals"
                },
                {
                    "type": "p",
                    "text": "To start, it's helpful to be familiar with three foundational web concepts:"
                },
                {
                    "type": "list",
                    "items": [
                        "TheEnvironmentsyour application code can be executed in: the server and the client.",
                        "TheRequest-Response Lifecyclethat's initiated when a user visits or interacts with your application.",
                        "TheNetwork Boundarythat separates server and client code."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Rendering Environments"
                },
                {
                    "type": "p",
                    "text": "There are two environments where web applications can be rendered: the client and the server."
                },
                {
                    "type": "list",
                    "items": [
                        "Theclientrefers to the browser on a user's device that sends a request to a server for your application code. It then turns the response from the server into a user interface.",
                        "Theserverrefers to the computer in a data center that stores your application code, receives requests from a client, and sends back an appropriate response."
                    ]
                },
                {
                    "type": "p",
                    "text": "Historically, developers had to use different languages (e.g. JavaScript, PHP) and frameworks when writing code for the server and the client. With React, developers can use thesame language(JavaScript), and thesame framework(e.g. Next.js or your framework of choice). This flexibility allows you to seamlessly write code for both environments without context switching."
                },
                {
                    "type": "p",
                    "text": "However, each environment has its own set of capabilities and constraints. Therefore, the code you write for the server and the client is not always the same. There are certain operations (e.g. data fetching or managing user state) that are better suited for one environment over the other."
                },
                {
                    "type": "p",
                    "text": "Understanding these differences is key to effectively using React and Next.js. We'll cover the differences and use cases in more detail on theServerandClientComponents pages, for now, let's continue building on our foundation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Request-Response Lifecycle"
                },
                {
                    "type": "p",
                    "text": "Broadly speaking, all websites follow the sameRequest-Response Lifecycle:"
                },
                {
                    "type": "list",
                    "items": [
                        "User Action:The user interacts with a web application. This could be clicking a link, submitting a form, or typing a URL directly into the browser's address bar.",
                        "HTTP Request:The client sends anHTTPrequest to the server that contains necessary information about what resources are being requested, what method is being used (e.g.GET,POST), and additional data if necessary.",
                        "Server:The server processes the request and responds with the appropriate resources. This process may take a couple of steps like routing, fetching data, etc.",
                        "HTTP Response:After processing the request, the server sends an HTTP response back to the client. This response contains a status code (which tells the client whether the request was successful or not) and requested resources (e.g. HTML, CSS, JavaScript, static assets, etc).",
                        "Client:The client parses the resources to render the user interface.",
                        "User Action:Once the user interface is rendered, the user can interact with it, and the whole process starts again."
                    ]
                },
                {
                    "type": "p",
                    "text": "A major part of building a hybrid web application is deciding how to split the work in the lifecycle, and where to place the Network Boundary."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Network Boundary"
                },
                {
                    "type": "p",
                    "text": "In web development, theNetwork Boundaryis a conceptual line that separates the different environments. For example, the client and the server, or the server and the data store."
                },
                {
                    "type": "p",
                    "text": "In React, you choose where to place the client-server network boundary wherever it makes the most sense."
                },
                {
                    "type": "p",
                    "text": "Behind the scenes, the work is split into two parts: theclient module graphand theserver module graph. The server module graph contains all the components that are rendered on the server, and the client module graph contains all components that are rendered on the client."
                },
                {
                    "type": "p",
                    "text": "It may be helpful to think about module graphs as a visual representation of how files in your application depend on each other."
                },
                {
                    "type": "p",
                    "text": "You can use the React\"use client\"convention to define the boundary. There's also a\"use server\"convention, which tells React to do some computational work on the server."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Building Hybrid Applications"
                },
                {
                    "type": "p",
                    "text": "When working in these environments, it's helpful to think of the flow of the code in your application asunidirectional. In other words, during a response, your application code flows in one direction: from the server to the client."
                },
                {
                    "type": "p",
                    "text": "If you need to access the server from the client, you send anewrequest to the server rather than re-use the same request. This makes it easier to understand where to render your components and where to place the Network Boundary."
                },
                {
                    "type": "p",
                    "text": "In practice, this model encourages developers to think about what they want to execute on the server first, before sending the result to the client and making the application interactive."
                },
                {
                    "type": "p",
                    "text": "This concept will become clearer when we look at how you caninterleave client and server componentsin the same component tree."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client Components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Composition Patterns"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Edge and Node.js Runtimes"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering/client-components",
            "title": "Rendering: Client Components | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Client Components"
                },
                {
                    "type": "p",
                    "text": "Client Components allow you to write interactive UI that isprerendered on the serverand can use client JavaScript to run in the browser."
                },
                {
                    "type": "p",
                    "text": "This page will go through how Client Components work, how they're rendered, and when you might use them."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Benefits of Client Rendering"
                },
                {
                    "type": "p",
                    "text": "There are a couple of benefits to doing the rendering work on the client, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Interactivity: Client Components can use state, effects, and event listeners, meaning they can provide immediate feedback to the user and update the UI.",
                        "Browser APIs: Client Components have access to browser APIs, likegeolocationorlocalStorage."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Client Components in Next.js"
                },
                {
                    "type": "p",
                    "text": "To use Client Components, you can add the React\"use client\"directiveat the top of a file, above your imports."
                },
                {
                    "type": "p",
                    "text": "\"use client\"is used to declare aboundarybetween a Server and Client Component modules. This means that by defining a\"use client\"in a file, all other modules imported into it, including child components, are considered part of the client bundle."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useState }from'react'exportdefaultfunctionCounter() {const[count,setCount]=useState(0)return(<div><p>You clicked {count} times</p><buttononClick={()=>setCount(count+1)}>Click me</button></div>)}"
                },
                {
                    "type": "p",
                    "text": "The diagram below shows that usingonClickanduseStatein a nested component (toggle.js) will cause an error if the\"use client\"directive is not defined. This is because, by default, all components in the App Router are Server Components where these APIs are not available. By defining the\"use client\"directive intoggle.js, you can tell React to enter the client boundary where these APIs are available."
                },
                {
                    "type": "p",
                    "text": "Defining multipleuse cliententry points:"
                },
                {
                    "type": "p",
                    "text": "You can define multiple \"use client\" entry points in your React Component tree. This allows you to split your application into multiple client bundles."
                },
                {
                    "type": "p",
                    "text": "However,\"use client\"doesn't need to be defined in every component that needs to be rendered on the client. Once you define the boundary, all child components and modules imported into it are considered part of the client bundle."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How are Client Components Rendered?"
                },
                {
                    "type": "p",
                    "text": "In Next.js, Client Components are rendered differently depending on whether the request is part of a full page load (an initial visit to your application or a page reload triggered by a browser refresh) or a subsequent navigation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Full page load"
                },
                {
                    "type": "p",
                    "text": "To optimize the initial page load, Next.js will use React's APIs to render a static HTML preview on the server for both Client and Server Components. This means, when the user first visits your application, they will see the content of the page immediately, without having to wait for the client to download, parse, and execute the Client Component JavaScript bundle."
                },
                {
                    "type": "p",
                    "text": "On the server:"
                },
                {
                    "type": "list",
                    "items": [
                        "React renders Server Components into a special data format called theReact Server Component Payload (RSC Payload), which includes references to Client Components.",
                        "Next.js uses the RSC Payload and Client Component JavaScript instructions to renderHTMLfor the route on the server."
                    ]
                },
                {
                    "type": "p",
                    "text": "Then, on the client:"
                },
                {
                    "type": "list",
                    "items": [
                        "The HTML is used to immediately show a fast non-interactive initial preview of the route.",
                        "The React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.",
                        "The JavaScript instructions are used tohydrateClient Components and make their UI interactive."
                    ]
                },
                {
                    "type": "p",
                    "text": "What is hydration?"
                },
                {
                    "type": "p",
                    "text": "Hydration is the process of attaching event listeners to the DOM, to make the static HTML interactive. Behind the scenes, hydration is done with thehydrateRootReact API."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Subsequent Navigations"
                },
                {
                    "type": "p",
                    "text": "On subsequent navigations, Client Components are rendered entirely on the client, without the server-rendered HTML."
                },
                {
                    "type": "p",
                    "text": "This means the Client Component JavaScript bundle is downloaded and parsed. Once the bundle is ready, React will use the RSC Payload to reconcile the Client and Server Component trees, and update the DOM."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Going back to the Server Environment"
                },
                {
                    "type": "p",
                    "text": "Sometimes, after you've declared the\"use client\"boundary, you may want to go back to the server environment. For example, you may want to reduce the client bundle size, fetch data on the server, or use an API that is only available on the server."
                },
                {
                    "type": "p",
                    "text": "You can keep code on the server even though it's theoretically nested inside Client Components by interleaving Client and Server Components andServer Actions. See theComposition Patternspage for more information."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns",
            "title": "Rendering: Composition Patterns | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Server and Client Composition Patterns"
                },
                {
                    "type": "p",
                    "text": "When building React applications, you will need to consider what parts of your application should be rendered on the server or the client. This page covers some recommended composition patterns when using Server and Client Components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "When to use Server and Client Components?"
                },
                {
                    "type": "p",
                    "text": "Here's a quick summary of the different use cases for Server and Client Components:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Server Component Patterns"
                },
                {
                    "type": "p",
                    "text": "Before opting into client-side rendering, you may wish to do some work on the server like fetching data, or accessing your database or backend services."
                },
                {
                    "type": "p",
                    "text": "Here are some common patterns when working with Server Components:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sharing data between components"
                },
                {
                    "type": "p",
                    "text": "When fetching data on the server, there may be cases where you need to share data across different components. For example, you may have a layout and a page that depend on the same data."
                },
                {
                    "type": "p",
                    "text": "Instead of usingReact Context(which is not available on the server) or passing data as props, you can usefetchor React'scachefunction to fetch the same data in the components that need it, without worrying about making duplicate requests for the same data. This is because React extendsfetchto automatically memoize data requests, and thecachefunction can be used whenfetchis not available."
                },
                {
                    "type": "p",
                    "text": "Learn more aboutmemoizationin React."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Keeping Server-only Code out of the Client Environment"
                },
                {
                    "type": "p",
                    "text": "Since JavaScript modules can be shared between both Server and Client Components modules, it's possible for code that was only ever intended to be run on the server to sneak its way into the client."
                },
                {
                    "type": "p",
                    "text": "For example, take the following data-fetching function:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongetData() {constres=awaitfetch('https://external-service.com/data',{headers:{authorization:process.env.API_KEY,},})returnres.json()}"
                },
                {
                    "type": "p",
                    "text": "At first glance, it appears thatgetDataworks on both the server and the client. However, this function contains anAPI_KEY, written with the intention that it would only ever be executed on the server."
                },
                {
                    "type": "p",
                    "text": "Since the environment variableAPI_KEYis not prefixed withNEXT_PUBLIC, it's a private variable that can only be accessed on the server. To prevent your environment variables from being leaked to the client, Next.js replaces private environment variables with an empty string."
                },
                {
                    "type": "p",
                    "text": "As a result, even thoughgetData()can be imported and executed on the client, it won't work as expected. And while making the variable public would make the function work on the client, you may not want to expose sensitive information to the client."
                },
                {
                    "type": "p",
                    "text": "To prevent this sort of unintended client usage of server code, we can use theserver-onlypackage to give other developers a build-time error if they ever accidentally import one of these modules into a Client Component."
                },
                {
                    "type": "p",
                    "text": "To useserver-only, first install the package:"
                },
                {
                    "type": "code",
                    "code": "npminstallserver-only"
                },
                {
                    "type": "p",
                    "text": "Then import the package into any module that contains server-only code:"
                },
                {
                    "type": "code",
                    "code": "import'server-only'exportasyncfunctiongetData() {constres=awaitfetch('https://external-service.com/data',{headers:{authorization:process.env.API_KEY,},})returnres.json()}"
                },
                {
                    "type": "p",
                    "text": "Now, any Client Component that importsgetData()will receive a build-time error explaining that this module can only be used on the server."
                },
                {
                    "type": "p",
                    "text": "The corresponding packageclient-onlycan be used to mark modules that contain client-only code – for example, code that accesses thewindowobject."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using Third-party Packages and Providers"
                },
                {
                    "type": "p",
                    "text": "Since Server Components are a new React feature, third-party packages and providers in the ecosystem are just beginning to add the\"use client\"directive to components that use client-only features likeuseState,useEffect, andcreateContext."
                },
                {
                    "type": "p",
                    "text": "Today, many components fromnpmpackages that use client-only features do not yet have the directive. These third-party components will work as expected within Client Components since they have the\"use client\"directive, but they won't work within Server Components."
                },
                {
                    "type": "p",
                    "text": "For example, let's say you've installed the hypotheticalacme-carouselpackage which has a<Carousel />component. This component usesuseState, but it doesn't yet have the\"use client\"directive."
                },
                {
                    "type": "p",
                    "text": "If you use<Carousel />within a Client Component, it will work as expected:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useState }from'react'import{ Carousel }from'acme-carousel'exportdefaultfunctionGallery() {let[isOpen,setIsOpen]=useState(false)return(<div><buttononClick={()=>setIsOpen(true)}>View pictures</button>{/* Works, since Carousel is used within a Client Component */}{isOpen&&<Carousel/>}</div>)}"
                },
                {
                    "type": "p",
                    "text": "However, if you try to use it directly within a Server Component, you'll see an error:"
                },
                {
                    "type": "code",
                    "code": "import{ Carousel }from'acme-carousel'exportdefaultfunctionPage() {return(<div><p>View pictures</p>{/* Error: `useState` can not be used within Server Components */}<Carousel/></div>)}"
                },
                {
                    "type": "p",
                    "text": "This is because Next.js doesn't know<Carousel />is using client-only features."
                },
                {
                    "type": "p",
                    "text": "To fix this, you can wrap third-party components that rely on client-only features in your own Client Components:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ Carousel }from'acme-carousel'exportdefaultCarousel"
                },
                {
                    "type": "p",
                    "text": "Now, you can use<Carousel />directly within a Server Component:"
                },
                {
                    "type": "code",
                    "code": "importCarouselfrom'./carousel'exportdefaultfunctionPage() {return(<div><p>View pictures</p>{/*  Works, since Carousel is a Client Component */}<Carousel/></div>)}"
                },
                {
                    "type": "p",
                    "text": "We don't expect you to need to wrap most third-party components since it's likely you'll be using them within Client Components. However, one exception is providers, since they rely on React state and context, and are typically needed at the root of an application.Learn more about third-party context providers below."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Using Context Providers"
                },
                {
                    "type": "p",
                    "text": "Context providers are typically rendered near the root of an application to share global concerns, like the current theme. SinceReact contextis not supported in Server Components, trying to create a context at the root of your application will cause an error:"
                },
                {
                    "type": "code",
                    "code": "import{ createContext }from'react'//  createContext is not supported in Server ComponentsexportconstThemeContext=createContext({})exportdefaultfunctionRootLayout({ children }) {return(<html><body><ThemeContext.Providervalue=\"dark\">{children}</ThemeContext.Provider></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "To fix this, create your context and render its provider inside of a Client Component:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ createContext }from'react'exportconstThemeContext=createContext({})exportdefaultfunctionThemeProvider({children,}:{children:React.ReactNode}) {return<ThemeContext.Providervalue=\"dark\">{children}</ThemeContext.Provider>}"
                },
                {
                    "type": "p",
                    "text": "Your Server Component will now be able to directly render your provider since it's been marked as a Client Component:"
                },
                {
                    "type": "code",
                    "code": "importThemeProviderfrom'./theme-provider'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body><ThemeProvider>{children}</ThemeProvider></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "With the provider rendered at the root, all other Client Components throughout your app will be able to consume this context."
                },
                {
                    "type": "p",
                    "text": "Good to know: You should render providers as deep as possible in the tree – notice howThemeProvideronly wraps{children}instead of the entire<html>document. This makes it easier for Next.js to optimize the static parts of your Server Components."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Advice for Library Authors"
                },
                {
                    "type": "p",
                    "text": "In a similar fashion, library authors creating packages to be consumed by other developers can use the\"use client\"directive to mark client entry points of their package. This allows users of the package to import package components directly into their Server Components without having to create a wrapping boundary."
                },
                {
                    "type": "p",
                    "text": "You can optimize your package by using'use client' deeper in the tree, allowing the imported modules to be part of the Server Component module graph."
                },
                {
                    "type": "p",
                    "text": "It's worth noting some bundlers might strip out\"use client\"directives. You can find an example of how to configure esbuild to include the\"use client\"directive in theReact Wrap BalancerandVercel Analyticsrepositories."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Client Components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Moving Client Components Down the Tree"
                },
                {
                    "type": "p",
                    "text": "To reduce the Client JavaScript bundle size, we recommend moving Client Components down your component tree."
                },
                {
                    "type": "p",
                    "text": "For example, you may have a Layout that has static elements (e.g. logo, links, etc) and an interactive search bar that uses state."
                },
                {
                    "type": "p",
                    "text": "Instead of making the whole layout a Client Component, move the interactive logic to a Client Component (e.g.<SearchBar />) and keep your layout as a Server Component. This means you don't have to send all the component Javascript of the layout to the client."
                },
                {
                    "type": "code",
                    "code": "// SearchBar is a Client ComponentimportSearchBarfrom'./searchbar'// Logo is a Server ComponentimportLogofrom'./logo'// Layout is a Server Component by defaultexportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {return(<><nav><Logo/><SearchBar/></nav><main>{children}</main></>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing props from Server to Client Components (Serialization)"
                },
                {
                    "type": "p",
                    "text": "If you fetch data in a Server Component, you may want to pass data down as props to Client Components. Props passed from the Server to Client Components need to beserializableby React."
                },
                {
                    "type": "p",
                    "text": "If your Client Components depend on data that is not serializable, you canfetch data on the client with a third party libraryor on the server via aRoute Handler."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Interleaving Server and Client Components"
                },
                {
                    "type": "p",
                    "text": "When interleaving Client and Server Components, it may be helpful to visualize your UI as a tree of components. Starting with theroot layout, which is a Server Component, you can then render certain subtrees of components on the client by adding the\"use client\"directive."
                },
                {
                    "type": "p",
                    "text": "Within those client subtrees, you can still nest Server Components or call Server Actions, however there are some things to keep in mind:"
                },
                {
                    "type": "list",
                    "items": [
                        "During a request-response lifecycle, your code moves from the server to the client. If you need to access data or resources on the server while on the client, you'll be making anewrequest to the server - not switching back and forth.",
                        "When a new request is made to the server, all Server Components are rendered first, including those nested inside Client Components. The rendered result (RSC Payload) will contain references to the locations of Client Components. Then, on the client, React uses the RSC Payload to reconcile Server and Client Components into a single tree."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Since Client Components are rendered after Server Components, you cannot import a Server Component into a Client Component module (since it would require a new request back to the server). Instead, you can pass a Server Component aspropsto a Client Component. See theunsupported patternandsupported patternsections below."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Unsupported Pattern: Importing Server Components into Client Components"
                },
                {
                    "type": "p",
                    "text": "The following pattern is not supported. You cannot import a Server Component into a Client Component:"
                },
                {
                    "type": "code",
                    "code": "'use client'// You cannot import a Server Component into a Client Component.importServerComponentfrom'./Server-Component'exportdefaultfunctionClientComponent({children,}:{children:React.ReactNode}) {const[count,setCount]=useState(0)return(<><buttononClick={()=>setCount(count+1)}>{count}</button><ServerComponent/></>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Supported Pattern: Passing Server Components to Client Components as Props"
                },
                {
                    "type": "p",
                    "text": "The following pattern is supported. You can pass Server Components as a prop to a Client Component."
                },
                {
                    "type": "p",
                    "text": "A common pattern is to use the Reactchildrenprop to create a\"slot\"in your Client Component."
                },
                {
                    "type": "p",
                    "text": "In the example below,<ClientComponent>accepts achildrenprop:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useState }from'react'exportdefaultfunctionClientComponent({children,}:{children:React.ReactNode}) {const[count,setCount]=useState(0)return(<><buttononClick={()=>setCount(count+1)}>{count}</button>{children}</>)}"
                },
                {
                    "type": "p",
                    "text": "<ClientComponent>doesn't know thatchildrenwill eventually be filled in by the result of a Server Component. The only responsibility<ClientComponent>has is to decidewherechildrenwill eventually be placed."
                },
                {
                    "type": "p",
                    "text": "In a parent Server Component, you can import both the<ClientComponent>and<ServerComponent>and pass<ServerComponent>as a child of<ClientComponent>:"
                },
                {
                    "type": "code",
                    "code": "// This pattern works:// You can pass a Server Component as a child or prop of a// Client Component.importClientComponentfrom'./client-component'importServerComponentfrom'./server-component'// Pages in Next.js are Server Components by defaultexportdefaultfunctionPage() {return(<ClientComponent><ServerComponent/></ClientComponent>)}"
                },
                {
                    "type": "p",
                    "text": "With this approach,<ClientComponent>and<ServerComponent>are decoupled and can be rendered independently. In this case, the child<ServerComponent>can be rendered on the server, well before<ClientComponent>is rendered on the client."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "The pattern of \"lifting content up\" has been used to avoid re-rendering a nested child component when a parent component re-renders.",
                        "You're not limited to thechildrenprop. You can use any prop to pass JSX."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes",
            "title": "Rendering: Edge and Node.js Runtimes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Edge and Node.js Runtimes"
                },
                {
                    "type": "p",
                    "text": "In the context of Next.js, runtime refers to the set of libraries, APIs, and general functionality available to your code during execution."
                },
                {
                    "type": "p",
                    "text": "On the server, there are two runtimes where parts of your application code can be rendered:"
                },
                {
                    "type": "list",
                    "items": [
                        "TheNode.js Runtime(default) has access to all Node.js APIs and compatible packages from the ecosystem.",
                        "TheEdge Runtimeis based onWeb APIs."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Runtime Differences"
                },
                {
                    "type": "p",
                    "text": "There are many considerations to make when choosing a runtime. This table shows the major differences at a glance. If you want a more in-depth analysis of the differences, check out the sections below."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Edge Runtime"
                },
                {
                    "type": "p",
                    "text": "In Next.js, the lightweight Edge Runtime is a subset of available Node.js APIs."
                },
                {
                    "type": "p",
                    "text": "The Edge Runtime is ideal if you need to deliver dynamic, personalized content at low latency with small, simple functions. The Edge Runtime's speed comes from its minimal use of resources, but that can be limiting in many scenarios."
                },
                {
                    "type": "p",
                    "text": "For example, code executed in the Edge Runtimeon Vercel cannot exceed between 1 MB and 4 MB, this limit includes imported packages, fonts and files, and will vary depending on your deployment infrastructure. In addition, the Edge Runtime does not support all Node.js APIs meaning somenpmpackages may not work. For example, \"Module not found: Can't resolve 'fs'\" or similar errors. We recommend using the Node.js runtime if you need to use these APIs or packages."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Node.js Runtime"
                },
                {
                    "type": "p",
                    "text": "Using the Node.js runtime gives you access to all Node.js APIs, and all npm packages that rely on them. However, it's not as fast to start up as routes using the Edge runtime."
                },
                {
                    "type": "p",
                    "text": "Deploying your Next.js application to a Node.js server will require managing, scaling, and configuring your infrastructure. Alternatively, you can consider deploying your Next.js application to a serverless platform like Vercel, which will handle this for you."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Serverless Node.js"
                },
                {
                    "type": "p",
                    "text": "Serverless is ideal if you need a scalable solution that can handle more complex computational loads than the Edge Runtime. With Serverless Functions on Vercel, for example, your overall code size is50MBincluding imported packages, fonts, and files."
                },
                {
                    "type": "p",
                    "text": "The downside compared to routes using theEdgeis that it can take hundreds of milliseconds for Serverless Functions to boot up before they begin processing requests. Depending on the amount of traffic your site receives, this could be a frequent occurrence as the functions are not frequently \"warm\"."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Segment Runtime Option"
                },
                {
                    "type": "p",
                    "text": "You can specify a runtime for individual route segments in your Next.js application. To do so,declare a variable calledruntimeand export it. The variable must be a string, and must have a value of either'nodejs'or'edge'runtime."
                },
                {
                    "type": "p",
                    "text": "The following example demonstrates a page route segment that exports aruntimewith a value of'edge':"
                },
                {
                    "type": "code",
                    "code": "exportconstruntime='edge'// 'nodejs' (default) | 'edge'"
                },
                {
                    "type": "p",
                    "text": "You can also defineruntimeon a layout level, which will make all routes under the layout run on the edge runtime:"
                },
                {
                    "type": "code",
                    "code": "exportconstruntime='edge'// 'nodejs' (default) | 'edge'"
                },
                {
                    "type": "p",
                    "text": "If the segment runtime isnotset, the defaultnodejsruntime will be used. You do not need to use theruntimeoption if you do not plan to change from the Node.js runtime."
                },
                {
                    "type": "p",
                    "text": "Please refer to theNode.js DocsandEdge Docsfor the full list of available APIs. Both runtimes can also supportstreamingdepending on your deployment infrastructure."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering/server-components",
            "title": "Rendering: Server Components | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Server Components"
                },
                {
                    "type": "p",
                    "text": "React Server Components allow you to write UI that can be rendered and optionally cached on the server. In Next.js, the rendering work is further split by route segments to enable streaming and partial rendering, and there are three different server rendering strategies:"
                },
                {
                    "type": "list",
                    "items": [
                        "Static Rendering",
                        "Dynamic Rendering",
                        "Streaming"
                    ]
                },
                {
                    "type": "p",
                    "text": "This page will go through how Server Components work, when you might use them, and the different server rendering strategies."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Benefits of Server Rendering"
                },
                {
                    "type": "p",
                    "text": "There are a couple of benefits to doing the rendering work on the server, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Data Fetching: Server Components allow you to move data fetching to the server, closer to your data source. This can improve performance by reducing time it takes to fetch data needed for rendering, and the number of requests the client needs to make.",
                        "Security: Server Components allow you to keep sensitive data and logic on the server, such as tokens and API keys, without the risk of exposing them to the client.",
                        "Caching: By rendering on the server, the result can be cached and reused on subsequent requests and across users. This can improve performance and reduce cost by reducing the amount of rendering and data fetching done on each request.",
                        "Performance: Server Components give you additional tools to optimize performance from the baseline. For example, if you start with an app composed of entirely Client Components, moving non-interactive pieces of your UI to Server Components can reduce the amount of client-side JavaScript needed. This is beneficial for users with slower internet or less powerful devices, as the browser has less client-side JavaScript to download, parse, and execute.",
                        "Initial Page Load andFirst Contentful Paint (FCP): On the server, we can generate HTML to allow users to view the page immediately, without waiting for the client to download, parse and execute the JavaScript needed to render the page.",
                        "Search Engine Optimization and Social Network Shareability: The rendered HTML can be used by search engine bots to index your pages and social network bots to generate social card previews for your pages.",
                        "Streaming: Server Components allow you to split the rendering work into chunks and stream them to the client as they become ready. This allows the user to see parts of the page earlier without having to wait for the entire page to be rendered on the server."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Server Components in Next.js"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js uses Server Components. This allows you to automatically implement server rendering with no additional configuration, and you can opt into using Client Components when needed, seeClient Components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How are Server Components rendered?"
                },
                {
                    "type": "p",
                    "text": "On the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks: by individual route segments andSuspense Boundaries."
                },
                {
                    "type": "p",
                    "text": "Each chunk is rendered in two steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "React renders Server Components into a special data format called theReact Server Component Payload (RSC Payload).",
                        "Next.js uses the RSC Payload and Client Component JavaScript instructions to renderHTMLon the server."
                    ]
                },
                {
                    "type": "p",
                    "text": "Then, on the client:"
                },
                {
                    "type": "list",
                    "items": [
                        "The HTML is used to immediately show a fast non-interactive preview of the route - this is for the initial page load only.",
                        "The React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.",
                        "The JavaScript instructions are used tohydrateClient Components and make the application interactive."
                    ]
                },
                {
                    "type": "p",
                    "text": "What is the React Server Component Payload (RSC)?"
                },
                {
                    "type": "p",
                    "text": "The RSC Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The RSC Payload contains:"
                },
                {
                    "type": "list",
                    "items": [
                        "The rendered result of Server Components",
                        "Placeholders for where Client Components should be rendered and references to their JavaScript files",
                        "Any props passed from a Server Component to a Client Component"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Server Rendering Strategies"
                },
                {
                    "type": "p",
                    "text": "There are three subsets of server rendering: Static, Dynamic, and Streaming."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static Rendering (Default)"
                },
                {
                    "type": "p",
                    "text": "With Static Rendering, routes are rendered atbuild time, or in the background afterdata revalidation. The result is cached and can be pushed to aContent Delivery Network (CDN). This optimization allows you to share the result of the rendering work between users and server requests."
                },
                {
                    "type": "p",
                    "text": "Static rendering is useful when a route has data that is not personalized to the user and can be known at build time, such as a static blog post or a product page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Rendering"
                },
                {
                    "type": "p",
                    "text": "With Dynamic Rendering, routes are rendered for each user atrequest time."
                },
                {
                    "type": "p",
                    "text": "Dynamic rendering is useful when a route has data that is personalized to the user or has information that can only be known at request time, such as cookies or the URL's search params."
                },
                {
                    "type": "p",
                    "text": "Dynamic Routes with Cached Data"
                },
                {
                    "type": "p",
                    "text": "In most websites, routes are not fully static or fully dynamic - it's a spectrum. For example, you can have an e-commerce page that uses cached product data that's revalidated at an interval, but also has uncached, personalized customer data."
                },
                {
                    "type": "p",
                    "text": "In Next.js, you can have dynamically rendered routes that have both cached and uncached data. This is because the RSC Payload and data are cached separately. This allows you to opt into dynamic rendering without worrying about the performance impact of fetching all the data at request time."
                },
                {
                    "type": "p",
                    "text": "Learn more about thefull-route cacheandData Cache."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Switching to Dynamic Rendering"
                },
                {
                    "type": "p",
                    "text": "During rendering, if adynamic functionoruncached data requestis discovered, Next.js will switch to dynamically rendering the whole route. This table summarizes how dynamic functions and data caching affect whether a route is statically or dynamically rendered:"
                },
                {
                    "type": "p",
                    "text": "In the table above, for a route to be fully static, all data must be cached. However, you can have a dynamically rendered route that uses both cached and uncached data fetches."
                },
                {
                    "type": "p",
                    "text": "As a developer, you do not need to choose between static and dynamic rendering as Next.js will automatically choose the best rendering strategy for each route based on the features and APIs used. Instead, you choose when tocache or revalidate specific data, and you may choose tostreamparts of your UI."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Dynamic Functions"
                },
                {
                    "type": "p",
                    "text": "Dynamic functions rely on information that can only be known at request time such as a user's cookies, current requests headers, or the URL's search params. In Next.js, these dynamic functions are:"
                },
                {
                    "type": "list",
                    "items": [
                        "cookies()andheaders(): Using these in a Server Component will opt the whole route into dynamic rendering at request time.",
                        "searchParams: Using thesearchParamsprop on aPagewill opt the page into dynamic rendering at request time."
                    ]
                },
                {
                    "type": "p",
                    "text": "Using any of these functions will opt the whole route into dynamic rendering at request time."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Streaming"
                },
                {
                    "type": "p",
                    "text": "Streaming enables you to progressively render UI from the server. Work is split into chunks and streamed to the client as it becomes ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering."
                },
                {
                    "type": "p",
                    "text": "Streaming is built into the Next.js App Router by default. This helps improve both the initial page loading performance, as well as UI that depends on slower data fetches that would block rendering the whole route. For example, reviews on a product page."
                },
                {
                    "type": "p",
                    "text": "You can start streaming route segments usingloading.jsand UI components withReact Suspense. See theLoading UI and Streamingsection for more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caching"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing",
            "title": "Building Your Application: Routing | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Routing Fundamentals"
                },
                {
                    "type": "p",
                    "text": "The skeleton of every application is routing. This page will introduce you to thefundamental conceptsof routing for the web and how to handle routing in Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Terminology"
                },
                {
                    "type": "p",
                    "text": "First, you will see these terms being used throughout the documentation. Here's a quick reference:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tree:A convention for visualizing a hierarchical structure. For example, a component tree with parent and children components, a folder structure, etc.",
                        "Subtree:Part of a tree, starting at a new root (first) and ending at the leaves (last).",
                        "Root: The first node in a tree or subtree, such as a root layout.",
                        "Leaf:Nodes in a subtree that have no children, such as the last segment in a URL path."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "URL Segment:Part of the URL path delimited by slashes.",
                        "URL Path:Part of the URL that comes after the domain (composed of segments)."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "TheappRouter"
                },
                {
                    "type": "p",
                    "text": "In version 13, Next.js introduced a newApp Routerbuilt onReact Server Components, which supports shared layouts, nested routing, loading states, error handling, and more."
                },
                {
                    "type": "p",
                    "text": "The App Router works in a new directory namedapp. Theappdirectory works alongside thepagesdirectory to allow for incremental adoption. This allows you to opt some routes of your application into the new behavior while keeping other routes in thepagesdirectory for previous behavior. If your application uses thepagesdirectory, please also see thePages Routerdocumentation."
                },
                {
                    "type": "p",
                    "text": "Good to know: The App Router takes priority over the Pages Router. Routes across directories should not resolve to the same URL path and will cause a build-time error to prevent a conflict."
                },
                {
                    "type": "p",
                    "text": "By default, components insideappareReact Server Components. This is a performance optimization and allows you to easily adopt them, and you can also useClient Components."
                },
                {
                    "type": "p",
                    "text": "Recommendation:Check out theServerpage if you're new to Server Components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Roles of Folders and Files"
                },
                {
                    "type": "p",
                    "text": "Next.js uses a file-system based router where:"
                },
                {
                    "type": "list",
                    "items": [
                        "Foldersare used to define routes. A route is a single path of nested folders, following the file-system hierarchy from theroot folderdown to a finalleaf folderthat includes apage.jsfile. SeeDefining Routes.",
                        "Filesare used to create UI that is shown for a route segment. Seespecial files."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Route Segments"
                },
                {
                    "type": "p",
                    "text": "Each folder in a route represents aroute segment. Each route segment is mapped to a correspondingsegmentin aURL path."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Nested Routes"
                },
                {
                    "type": "p",
                    "text": "To create a nested route, you can nest folders inside each other. For example, you can add a new/dashboard/settingsroute by nesting two new folders in theappdirectory."
                },
                {
                    "type": "p",
                    "text": "The/dashboard/settingsroute is composed of three segments:"
                },
                {
                    "type": "list",
                    "items": [
                        "/(Root segment)",
                        "dashboard(Segment)",
                        "settings(Leaf segment)"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "File Conventions"
                },
                {
                    "type": "p",
                    "text": "Next.js provides a set of special files to create UI with specific behavior in nested routes:"
                },
                {
                    "type": "p",
                    "text": "Good to know:.js,.jsx, or.tsxfile extensions can be used for special files."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Component Hierarchy"
                },
                {
                    "type": "p",
                    "text": "The React components defined in special files of a route segment are rendered in a specific hierarchy:"
                },
                {
                    "type": "list",
                    "items": [
                        "layout.js",
                        "template.js",
                        "error.js(React error boundary)",
                        "loading.js(React suspense boundary)",
                        "not-found.js(React error boundary)",
                        "page.jsor nestedlayout.js"
                    ]
                },
                {
                    "type": "p",
                    "text": "In a nested route, the components of a segment will be nestedinsidethe components of its parent segment."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Colocation"
                },
                {
                    "type": "p",
                    "text": "In addition to special files, you have the option to colocate your own files (e.g. components, styles, tests, etc) inside folders in theappdirectory."
                },
                {
                    "type": "p",
                    "text": "This is because while folders define routes, only the contents returned bypage.jsorroute.jsare publicly addressable."
                },
                {
                    "type": "p",
                    "text": "Learn more aboutProject Organization and Colocation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Advanced Routing Patterns"
                },
                {
                    "type": "p",
                    "text": "The App Router also provides a set of conventions to help you implement more advanced routing patterns. These include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Parallel Routes: Allow you to simultaneously show two or more pages in the same view that can be navigated independently. You can use them for split views that have their own sub-navigation. E.g. Dashboards.",
                        "Intercepting Routes: Allow you to intercept a route and show it in the context of another route. You can use these when keeping the context for the current page is important. E.g. Seeing all tasks while editing one task or expanding a photo in a feed."
                    ]
                },
                {
                    "type": "p",
                    "text": "These patterns allow you to build richer and more complex UIs, democratizing features that were historically complex for small teams and individual developers to implement."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "p",
                    "text": "Now that you understand the fundamentals of routing in Next.js, follow the links below to create your first routes:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Defining Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Pages"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Pages and Layouts"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Linking and Navigating"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Loading UI and Streaming"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Error Handling"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Redirecting"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Groups"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Project Organization"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Parallel Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Intercepting Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Handlers"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Middleware"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Internationalization"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/colocation",
            "title": "Routing: Project Organization | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Project Organization and File Colocation"
                },
                {
                    "type": "p",
                    "text": "Apart fromrouting folder and file conventions, Next.js isunopinionatedabout how you organize and colocate your project files."
                },
                {
                    "type": "p",
                    "text": "This page shares default behavior and features you can use to organize your project."
                },
                {
                    "type": "list",
                    "items": [
                        "Safe colocation by default",
                        "Project organization features",
                        "Project organization strategies"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Safe colocation by default"
                },
                {
                    "type": "p",
                    "text": "In theappdirectory,nested folder hierarchydefines route structure."
                },
                {
                    "type": "p",
                    "text": "Each folder represents a route segment that is mapped to a corresponding segment in a URL path."
                },
                {
                    "type": "p",
                    "text": "However, even though route structure is defined through folders, a route isnot publicly accessibleuntil apage.jsorroute.jsfile is added to a route segment."
                },
                {
                    "type": "p",
                    "text": "And, even when a route is made publicly accessible, only thecontent returnedbypage.jsorroute.jsis sent to the client."
                },
                {
                    "type": "p",
                    "text": "This means thatproject filescan besafely colocatedinside route segments in theappdirectory without accidentally being routable."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "This is different from thepagesdirectory, where any file inpagesis considered a route.",
                        "While youcancolocate your project files inappyou don'thaveto. If you prefer, you cankeep them outside theappdirectory."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Project organization features"
                },
                {
                    "type": "p",
                    "text": "Next.js provides several features to help you organize your project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Private Folders"
                },
                {
                    "type": "p",
                    "text": "Private folders can be created by prefixing a folder with an underscore:_folderName"
                },
                {
                    "type": "p",
                    "text": "This indicates the folder is a private implementation detail and should not be considered by the routing system, therebyopting the folder and all its subfoldersout of routing."
                },
                {
                    "type": "p",
                    "text": "Since files in theappdirectory can besafely colocated by default, private folders are not required for colocation. However, they can be useful for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Separating UI logic from routing logic.",
                        "Consistently organizing internal files across a project and the Next.js ecosystem.",
                        "Sorting and grouping files in code editors.",
                        "Avoiding potential naming conflicts with future Next.js file conventions."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know"
                },
                {
                    "type": "list",
                    "items": [
                        "While not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern.",
                        "You can create URL segments that start with an underscore by prefixing the folder name with%5F(the URL-encoded form of an underscore):%5FfolderName.",
                        "If you don't use private folders, it would be helpful to know Next.jsspecial file conventionsto prevent unexpected naming conflicts."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Groups"
                },
                {
                    "type": "p",
                    "text": "Route groups can be created by wrapping a folder in parenthesis:(folderName)"
                },
                {
                    "type": "p",
                    "text": "This indicates the folder is for organizational purposes and shouldnot be includedin the route's URL path."
                },
                {
                    "type": "p",
                    "text": "Route groups are useful for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Organizing routes into groupse.g. by site section, intent, or team.",
                        "Enabling nested layouts in the same route segment level:Creating multiple nested layouts in the same segment, including multiple root layoutsAdding a layout to a subset of routes in a common segment",
                        "Creating multiple nested layouts in the same segment, including multiple root layouts",
                        "Adding a layout to a subset of routes in a common segment"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Creating multiple nested layouts in the same segment, including multiple root layouts",
                        "Adding a layout to a subset of routes in a common segment"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "srcDirectory"
                },
                {
                    "type": "p",
                    "text": "Next.js supports storing application code (includingapp) inside an optionalsrcdirectory. This separates application code from project configuration files which mostly live in the root of a project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Module Path Aliases"
                },
                {
                    "type": "p",
                    "text": "Next.js supportsModule Path Aliaseswhich make it easier to read and maintain imports across deeply nested project files."
                },
                {
                    "type": "code",
                    "code": "// beforeimport{ Button }from'../../../components/button'// afterimport{ Button }from'@/components/button'"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Project organization strategies"
                },
                {
                    "type": "p",
                    "text": "There is no \"right\" or \"wrong\" way when it comes to organizing your own files and folders in a Next.js project."
                },
                {
                    "type": "p",
                    "text": "The following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project."
                },
                {
                    "type": "p",
                    "text": "Good to know: In our examples below, we're usingcomponentsandlibfolders as generalized placeholders, their naming has no special framework significance and your projects might use other folders likeui,utils,hooks,styles, etc."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Store project files outside ofapp"
                },
                {
                    "type": "p",
                    "text": "This strategy stores all application code in shared folders in theroot of your projectand keeps theappdirectory purely for routing purposes."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Store project files in top-level folders inside ofapp"
                },
                {
                    "type": "p",
                    "text": "This strategy stores all application code in shared folders in theroot of theappdirectory."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Split project files by feature or route"
                },
                {
                    "type": "p",
                    "text": "This strategy stores globally shared application code in the rootappdirectory andsplitsmore specific application code into the route segments that use them."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Defining Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Groups"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "src Directory"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Absolute Imports and Module Path Aliases"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/defining-routes",
            "title": "Routing: Defining Routes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Defining Routes"
                },
                {
                    "type": "p",
                    "text": "We recommend reading theRouting Fundamentalspage before continuing."
                },
                {
                    "type": "p",
                    "text": "This page will guide you through how to define and organize routes in your Next.js application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating Routes"
                },
                {
                    "type": "p",
                    "text": "Next.js uses a file-system based router wherefoldersare used to define routes."
                },
                {
                    "type": "p",
                    "text": "Each folder represents aroutesegmentthat maps to aURLsegment. To create anested route, you can nest folders inside each other."
                },
                {
                    "type": "p",
                    "text": "A specialpage.jsfileis used to make route segments publicly accessible."
                },
                {
                    "type": "p",
                    "text": "In this example, the/dashboard/analyticsURL path isnotpublicly accessible because it does not have a correspondingpage.jsfile. This folder could be used to store components, stylesheets, images, or other colocated files."
                },
                {
                    "type": "p",
                    "text": "Good to know:.js,.jsx, or.tsxfile extensions can be used for special files."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating UI"
                },
                {
                    "type": "p",
                    "text": "Special file conventionsare used to create UI for each route segment. The most common arepagesto show UI unique to a route, andlayoutsto show UI that is shared across multiple routes."
                },
                {
                    "type": "p",
                    "text": "For example, to create your first page, add apage.jsfile inside theappdirectory and export a React component:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {return<h1>Hello, Next.js!</h1>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Pages and Layouts"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes",
            "title": "Routing: Dynamic Routes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "p",
                    "text": "When you don't know the exact segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time orprerenderedat build time."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "A Dynamic Segment can be created by wrapping a folder's name in square brackets:[folderName]. For example,[id]or[slug]."
                },
                {
                    "type": "p",
                    "text": "Dynamic Segments are passed as theparamsprop tolayout,page,route, andgenerateMetadatafunctions."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "For example, a blog could include the following routeapp/blog/[slug]/page.jswhere[slug]is the Dynamic Segment for blog posts."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage({ params }:{ params:{ slug:string} }) {return<div>My Post: {params.slug}</div>}"
                },
                {
                    "type": "p",
                    "text": "See thegenerateStaticParams()page to learn how to generate the params for the segment."
                },
                {
                    "type": "p",
                    "text": "Good to know: Dynamic Segments are equivalent toDynamic Routesin thepagesdirectory."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Generating Static Params"
                },
                {
                    "type": "p",
                    "text": "ThegenerateStaticParamsfunction can be used in combination withdynamic route segmentstostatically generateroutes at build time instead of on-demand at request time."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())returnposts.map((post)=>({slug:post.slug,}))}"
                },
                {
                    "type": "p",
                    "text": "The primary benefit of thegenerateStaticParamsfunction is its smart retrieval of data. If content is fetched within thegenerateStaticParamsfunction using afetchrequest, the requests areautomatically memoized. This means afetchrequest with the same arguments across multiplegenerateStaticParams, Layouts, and Pages will only be made once, which decreases build times."
                },
                {
                    "type": "p",
                    "text": "Use themigration guideif you are migrating from thepagesdirectory."
                },
                {
                    "type": "p",
                    "text": "SeegenerateStaticParamsserver function documentationfor more information and advanced use cases."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Catch-all Segments"
                },
                {
                    "type": "p",
                    "text": "Dynamic Segments can be extended tocatch-allsubsequent segments by adding an ellipsis inside the brackets[...folderName]."
                },
                {
                    "type": "p",
                    "text": "For example,app/shop/[...slug]/page.jswill match/shop/clothes, but also/shop/clothes/tops,/shop/clothes/tops/t-shirts, and so on."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Optional Catch-all Segments"
                },
                {
                    "type": "p",
                    "text": "Catch-all Segments can be madeoptionalby including the parameter in double square brackets:[[...folderName]]."
                },
                {
                    "type": "p",
                    "text": "For example,app/shop/[[...slug]]/page.jswillalsomatch/shop, in addition to/shop/clothes,/shop/clothes/tops,/shop/clothes/tops/t-shirts."
                },
                {
                    "type": "p",
                    "text": "The difference betweencatch-allandoptional catch-allsegments is that with optional, the route without the parameter is also matched (/shopin the example above)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "TypeScript"
                },
                {
                    "type": "p",
                    "text": "When using TypeScript, you can add types forparamsdepending on your configured route segment."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage({ params }:{ params:{ slug:string} }) {return<h1>My Page</h1>}"
                },
                {
                    "type": "p",
                    "text": "Good to know: This may be done automatically by theTypeScript pluginin the future."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Linking and Navigating"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "generateStaticParams"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/error-handling",
            "title": "Routing: Error Handling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Error Handling"
                },
                {
                    "type": "p",
                    "text": "Theerror.jsfile convention allows you to gracefully handle unexpected runtime errors innested routes."
                },
                {
                    "type": "list",
                    "items": [
                        "Automatically wrap a route segment and its nested children in aReact Error Boundary.",
                        "Create error UI tailored to specific segments using the file-system hierarchy to adjust granularity.",
                        "Isolate errors to affected segments while keeping the rest of the application functional.",
                        "Add functionality to attempt to recover from an error without a full page reload."
                    ]
                },
                {
                    "type": "p",
                    "text": "Create error UI by adding anerror.jsfile inside a route segment and exporting a React component:"
                },
                {
                    "type": "code",
                    "code": "'use client'// Error components must be Client Componentsimport{ useEffect }from'react'exportdefaultfunctionError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {useEffect(()=>{// Log the error to an error reporting serviceconsole.error(error)},[error])return(<div><h2>Something went wrong!</h2><buttononClick={// Attempt to recover by trying to re-render the segment()=>reset()}>Try again</button></div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Howerror.jsWorks"
                },
                {
                    "type": "list",
                    "items": [
                        "error.jsautomatically creates aReact Error Boundarythatwrapsa nested child segment orpage.jscomponent.",
                        "The React component exported from theerror.jsfile is used as thefallbackcomponent.",
                        "If an error is thrown within the error boundary, the error iscontained, and the fallback component isrendered.",
                        "When the fallback error component is active, layoutsabovethe error boundarymaintaintheir state andremaininteractive, and the error component can display functionality to recover from the error."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Recovering From Errors"
                },
                {
                    "type": "p",
                    "text": "The cause of an error can sometimes be temporary. In these cases, simply trying again might resolve the issue."
                },
                {
                    "type": "p",
                    "text": "An error component can use thereset()function to prompt the user to attempt to recover from the error. When executed, the function will try to re-render the Error boundary's contents. If successful, the fallback error component is replaced with the result of the re-render."
                },
                {
                    "type": "code",
                    "code": "'use client'exportdefaultfunctionError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {return(<div><h2>Something went wrong!</h2><buttononClick={()=>reset()}>Try again</button></div>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Nested Routes"
                },
                {
                    "type": "p",
                    "text": "React components created throughspecial filesare rendered in aspecific nested hierarchy."
                },
                {
                    "type": "p",
                    "text": "For example, a nested route with two segments that both includelayout.jsanderror.jsfiles are rendered in the followingsimplifiedcomponent hierarchy:"
                },
                {
                    "type": "p",
                    "text": "The nested component hierarchy has implications for the behavior oferror.jsfiles across a nested route:"
                },
                {
                    "type": "list",
                    "items": [
                        "Errors bubble up to the nearest parent error boundary. This means anerror.jsfile will handle errors for all its nested child segments. More or less granular error UI can be achieved by placingerror.jsfiles at different levels in the nested folders of a route.",
                        "Anerror.jsboundary willnothandle errors thrown in alayout.jscomponent in thesamesegment because the error boundary is nestedinsidethat layout's component."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Handling Errors in Layouts"
                },
                {
                    "type": "p",
                    "text": "error.jsboundaries donotcatch errors thrown inlayout.jsortemplate.jscomponents of thesame segment. Thisintentional hierarchykeeps important UI that is shared between sibling routes (such as navigation) visible and functional when an error occurs."
                },
                {
                    "type": "p",
                    "text": "To handle errors within a specific layout or template, place anerror.jsfile in the layout's parent segment."
                },
                {
                    "type": "p",
                    "text": "To handle errors within the root layout or template, use a variation oferror.jscalledglobal-error.js."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Handling Errors in Root Layouts"
                },
                {
                    "type": "p",
                    "text": "The rootapp/error.jsboundary doesnotcatch errors thrown in the rootapp/layout.jsorapp/template.jscomponent."
                },
                {
                    "type": "p",
                    "text": "To specifically handle errors in these root components, use a variation oferror.jscalledapp/global-error.jslocated in the rootappdirectory."
                },
                {
                    "type": "p",
                    "text": "Unlike the rooterror.js, theglobal-error.jserror boundary wraps theentireapplication, and its fallback component replaces the root layout when active. Because of this, it is important to note thatglobal-error.jsmustdefine its own<html>and<body>tags."
                },
                {
                    "type": "p",
                    "text": "global-error.jsis the least granular error UI and can be considered \"catch-all\" error handling for the whole application. It is unlikely to be triggered often as root components are typically less dynamic, and othererror.jsboundaries will catch most errors."
                },
                {
                    "type": "p",
                    "text": "Even if aglobal-error.jsis defined, it is still recommended to define a rooterror.jswhose fallback component will be renderedwithinthe root layout, which includes globally shared UI and branding."
                },
                {
                    "type": "code",
                    "code": "'use client'exportdefaultfunctionGlobalError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {return(<html><body><h2>Something went wrong!</h2><buttononClick={()=>reset()}>Try again</button></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "global-error.jsis only enabled in production. In development, our error overlay will show instead."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Handling Server Errors"
                },
                {
                    "type": "p",
                    "text": "If an error is thrown inside a Server Component, Next.js will forward anErrorobject (stripped of sensitive error information in production) to the nearesterror.jsfile as theerrorprop."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Securing Sensitive Error Information"
                },
                {
                    "type": "p",
                    "text": "During production, theErrorobject forwarded to the client only includes a genericmessageanddigestproperty."
                },
                {
                    "type": "p",
                    "text": "This is a security precaution to avoid leaking potentially sensitive details included in the error to the client."
                },
                {
                    "type": "p",
                    "text": "Themessageproperty contains a generic message about the error and thedigestproperty contains an automatically generated hash of the error that can be used to match the corresponding error in server-side logs."
                },
                {
                    "type": "p",
                    "text": "During development, theErrorobject forwarded to the client will be serialized and include themessageof the original error for easier debugging."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "error.js"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/intercepting-routes",
            "title": "Routing: Intercepting Routes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Intercepting Routes"
                },
                {
                    "type": "p",
                    "text": "Intercepting routes allows you to load a route from another part of your application within the current layout. This routing paradigm can be useful when you want to display the content of a route without the user switching to a different context."
                },
                {
                    "type": "p",
                    "text": "For example, when clicking on a photo in a feed, you can display the photo in a modal, overlaying the feed. In this case, Next.js intercepts the/photo/123route, masks the URL, and overlays it over/feed."
                },
                {
                    "type": "p",
                    "text": "However, when navigating to the photo by clicking a shareable URL or by refreshing the page, the entire photo page should render instead of the modal. No route interception should occur."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "Intercepting routes can be defined with the(..)convention, which is similar to relative path convention../but for segments."
                },
                {
                    "type": "p",
                    "text": "You can use:"
                },
                {
                    "type": "list",
                    "items": [
                        "(.)to match segments on thesame level",
                        "(..)to match segmentsone level above",
                        "(..)(..)to match segmentstwo levels above",
                        "(...)to match segments from therootappdirectory"
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, you can intercept thephotosegment from within thefeedsegment by creating a(..)photodirectory."
                },
                {
                    "type": "p",
                    "text": "Note that the(..)convention is based onroute segments, not the file-system."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Modals"
                },
                {
                    "type": "p",
                    "text": "Intercepting Routes can be used together withParallel Routesto create modals. This allows you to solve common challenges when building modals, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "Making the modal contentshareable through a URL.",
                        "Preserving contextwhen the page is refreshed, instead of closing the modal.",
                        "Closing the modal on backwards navigationrather than going to the previous route.",
                        "Reopening the modal on forwards navigation."
                    ]
                },
                {
                    "type": "p",
                    "text": "Consider the following UI pattern, where a user can open a photo modal from a gallery using client-side navigation, or navigate to the photo page directly from a shareable URL:"
                },
                {
                    "type": "p",
                    "text": "In the above example, the path to thephotosegment can use the(..)matcher since@modalis a slot andnota segment. This means that thephotoroute is only one segment level higher, despite being two file-system levels higher."
                },
                {
                    "type": "p",
                    "text": "See theParallel Routesdocumentation for a step-by-step example, or see ourimage gallery example."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Other examples could include opening a login modal in a top navbar while also having a dedicated/loginpage, or opening a shopping cart in a side modal."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Parallel Routes"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/internationalization",
            "title": "Routing: Internationalization | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Internationalization"
                },
                {
                    "type": "p",
                    "text": "Next.js enables you to configure the routing and rendering of content to support multiple languages. Making your site adaptive to different locales includes translated content (localization) and internationalized routes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Terminology"
                },
                {
                    "type": "list",
                    "items": [
                        "Locale:An identifier for a set of language and formatting preferences. This usually includes the preferred language of the user and possibly their geographic region.en-US: English as spoken in the United Statesnl-NL: Dutch as spoken in the Netherlandsnl: Dutch, no specific region",
                        "en-US: English as spoken in the United States",
                        "nl-NL: Dutch as spoken in the Netherlands",
                        "nl: Dutch, no specific region"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "en-US: English as spoken in the United States",
                        "nl-NL: Dutch as spoken in the Netherlands",
                        "nl: Dutch, no specific region"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Routing Overview"
                },
                {
                    "type": "p",
                    "text": "It’s recommended to use the user’s language preferences in the browser to select which locale to use. Changing your preferred language will modify the incomingAccept-Languageheader to your application."
                },
                {
                    "type": "p",
                    "text": "For example, using the following libraries, you can look at an incomingRequestto determine which locale to select, based on theHeaders, locales you plan to support, and the default locale."
                },
                {
                    "type": "code",
                    "code": "import{ match }from'@formatjs/intl-localematcher'importNegotiatorfrom'negotiator'letheaders={'accept-language':'en-US,en;q=0.5'}letlanguages=newNegotiator({ headers }).languages()letlocales=['en-US','nl-NL','nl']letdefaultLocale='en-US'match(languages,locales,defaultLocale)// -> 'en-US'"
                },
                {
                    "type": "p",
                    "text": "Routing can be internationalized by either the sub-path (/fr/products) or domain (my-site.fr/products). With this information, you can now redirect the user based on the locale insideMiddleware."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from\"next/server\";letlocales=['en-US','nl-NL','nl']// Get the preferred locale, similar to the above or using a libraryfunctiongetLocale(request) {...}exportfunctionmiddleware(request) {// Check if there is any supported locale in the pathnameconst{pathname}=request.nextUrlconstpathnameHasLocale=locales.some((locale)=>pathname.startsWith(`/${locale}/`)||pathname===`/${locale}`)if(pathnameHasLocale)return// Redirect if there is no localeconstlocale=getLocale(request)request.nextUrl.pathname=`/${locale}${pathname}`// e.g. incoming request is /products// The new URL is now /en-US/productsreturnNextResponse.redirect(request.nextUrl)}exportconstconfig={matcher:[// Skip all internal paths (_next)'/((?!_next).*)',// Optional: only run on root (/) URL// '/'],}"
                },
                {
                    "type": "p",
                    "text": "Finally, ensure all special files insideapp/are nested underapp/[lang]. This enables the Next.js router to dynamically handle different locales in the route, and forward thelangparameter to every layout and page. For example:"
                },
                {
                    "type": "code",
                    "code": "// You now have access to the current locale// e.g. /en-US/products -> `lang` is \"en-US\"exportdefaultasyncfunctionPage({ params: { lang } }) {return...}"
                },
                {
                    "type": "p",
                    "text": "The root layout can also be nested in the new folder (e.g.app/[lang]/layout.js)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Localization"
                },
                {
                    "type": "p",
                    "text": "Changing displayed content based on the user’s preferred locale, or localization, is not something specific to Next.js. The patterns described below would work the same with any web application."
                },
                {
                    "type": "p",
                    "text": "Let’s assume we want to support both English and Dutch content inside our application. We might maintain two different “dictionaries”, which are objects that give us a mapping from some key to a localized string. For example:"
                },
                {
                    "type": "code",
                    "code": "{\"products\":{\"cart\":\"Add to Cart\"}}"
                },
                {
                    "type": "code",
                    "code": "{\"products\":{\"cart\":\"Toevoegen aan Winkelwagen\"}}"
                },
                {
                    "type": "p",
                    "text": "We can then create agetDictionaryfunction to load the translations for the requested locale:"
                },
                {
                    "type": "code",
                    "code": "import'server-only'constdictionaries={en:()=>import('./dictionaries/en.json').then((module)=>module.default),nl:()=>import('./dictionaries/nl.json').then((module)=>module.default),}exportconstgetDictionary=async(locale)=>dictionaries[locale]()"
                },
                {
                    "type": "p",
                    "text": "Given the currently selected language, we can fetch the dictionary inside of a layout or page."
                },
                {
                    "type": "code",
                    "code": "import{ getDictionary }from'./dictionaries'exportdefaultasyncfunctionPage({ params: { lang } }) {constdict=awaitgetDictionary(lang)// enreturn<button>{dict.products.cart}</button>// Add to Cart}"
                },
                {
                    "type": "p",
                    "text": "Because all layouts and pages in theapp/directory default toServer Components, we do not need to worry about the size of the translation files affecting our client-side JavaScript bundle size. This code willonly run on the server, and only the resulting HTML will be sent to the browser."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Static Generation"
                },
                {
                    "type": "p",
                    "text": "To generate static routes for a given set of locales, we can usegenerateStaticParamswith any page or layout. This can be global, for example, in the root layout:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongenerateStaticParams() {return[{ lang:'en-US'},{ lang:'de'}]}exportdefaultfunctionRoot({ children,params }) {return(<htmllang={params.lang}><body>{children}</body></html>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Resources"
                },
                {
                    "type": "list",
                    "items": [
                        "Minimal i18n routing and translations",
                        "next-intl",
                        "next-international",
                        "next-i18n-router"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating",
            "title": "Routing: Linking and Navigating | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Linking and Navigating"
                },
                {
                    "type": "p",
                    "text": "There are four ways to navigate between routes in Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using the<Link>Component",
                        "Using theuseRouterhook(Client Components)",
                        "Using theredirectfunction(Server Components)",
                        "Using the nativeHistory API"
                    ]
                },
                {
                    "type": "p",
                    "text": "This page will go through how to use each of these options, and dive deeper into how navigation works."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "<Link>Component"
                },
                {
                    "type": "p",
                    "text": "<Link>is a built-in component that extends the HTML<a>tag to provideprefetchingand client-side navigation between routes. It is the primary and recommended way to navigate between routes in Next.js."
                },
                {
                    "type": "p",
                    "text": "You can use it by importing it fromnext/link, and passing ahrefprop to the component:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return<Linkhref=\"/dashboard\">Dashboard</Link>}"
                },
                {
                    "type": "p",
                    "text": "There are other optional props you can pass to<Link>. See theAPI referencefor more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Linking to Dynamic Segments"
                },
                {
                    "type": "p",
                    "text": "When linking todynamic segments, you can usetemplate literals and interpolationto generate a list of links. For example, to generate a list of blog posts:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPostList({ posts }) {return(<ul>{posts.map((post)=>(<likey={post.id}><Linkhref={`/blog/${post.slug}`}>{post.title}</Link></li>))}</ul>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Checking Active Links"
                },
                {
                    "type": "p",
                    "text": "You can useusePathname()to determine if a link is active. For example, to add a class to the active link, you can check if the currentpathnamematches thehrefof the link:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ usePathname }from'next/navigation'importLinkfrom'next/link'exportfunctionLinks() {constpathname=usePathname()return(<nav><ul><li><LinkclassName={`link${pathname==='/'?'active':''}`}href=\"/\">Home</Link></li><li><LinkclassName={`link${pathname==='/about'?'active':''}`}href=\"/about\">About</Link></li></ul></nav>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Scrolling to anid"
                },
                {
                    "type": "p",
                    "text": "The default behavior of the Next.js App Router is toscroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation."
                },
                {
                    "type": "p",
                    "text": "If you'd like to scroll to a specificidon navigation, you can append your URL with a#hash link or just pass a hash link to thehrefprop. This is possible since<Link>renders to an<a>element."
                },
                {
                    "type": "code",
                    "code": "<Linkhref=\"/dashboard#settings\">Settings</Link>// Output<ahref=\"/dashboard#settings\">Settings</a>"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js will scroll to thePageif it is not visible in the viewport upon navigation."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Disabling scroll restoration"
                },
                {
                    "type": "p",
                    "text": "The default behavior of the Next.js App Router is toscroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation.If you'd like to disable this behavior, you can passscroll={false}to the<Link>component, orscroll: falsetorouter.push()orrouter.replace()."
                },
                {
                    "type": "code",
                    "code": "// next/link<Linkhref=\"/dashboard\"scroll={false}>Dashboard</Link>"
                },
                {
                    "type": "code",
                    "code": "// useRouterimport{ useRouter }from'next/navigation'constrouter=useRouter()router.push('/dashboard',{ scroll:false})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useRouter()hook"
                },
                {
                    "type": "p",
                    "text": "TheuseRouterhook allows you to programmatically change routes fromClient Components."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useRouter }from'next/navigation'exportdefaultfunctionPage() {constrouter=useRouter()return(<buttontype=\"button\"onClick={()=>router.push('/dashboard')}>Dashboard</button>)}"
                },
                {
                    "type": "p",
                    "text": "For a full list ofuseRoutermethods, see theAPI reference."
                },
                {
                    "type": "p",
                    "text": "Recommendation:Use the<Link>component to navigate between routes unless you have a specific requirement for usinguseRouter."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "redirectfunction"
                },
                {
                    "type": "p",
                    "text": "ForServer Components, use theredirectfunction instead."
                },
                {
                    "type": "code",
                    "code": "import{ redirect }from'next/navigation'asyncfunctionfetchTeam(id:string) {constres=awaitfetch('https://...')if(!res.ok)returnundefinedreturnres.json()}exportdefaultasyncfunctionProfile({ params }:{ params:{ id:string} }) {constteam=awaitfetchTeam(params.id)if(!team) {redirect('/login')}// ...}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "redirectreturns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.",
                        "redirectinternally throws an error so it should be called outside oftry/catchblocks.",
                        "redirectcan be called in Client Components during the rendering process but not in event handlers. You can use theuseRouterhookinstead.",
                        "redirectalso accepts absolute URLs and can be used to redirect to external links.",
                        "If you'd like to redirect before the render process, usenext.config.jsorMiddleware."
                    ]
                },
                {
                    "type": "p",
                    "text": "See theredirectAPI referencefor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using the native History API"
                },
                {
                    "type": "p",
                    "text": "Next.js allows you to use the nativewindow.history.pushStateandwindow.history.replaceStatemethods to update the browser's history stack without reloading the page."
                },
                {
                    "type": "p",
                    "text": "pushStateandreplaceStatecalls integrate into the Next.js Router, allowing you to sync withusePathnameanduseSearchParams."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "window.history.pushState"
                },
                {
                    "type": "p",
                    "text": "Use it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useSearchParams }from'next/navigation'exportdefaultfunctionSortProducts() {constsearchParams=useSearchParams()functionupdateSorting(sortOrder:string) {constparams=newURLSearchParams(searchParams.toString())params.set('sort',sortOrder)window.history.pushState(null,'',`?${params.toString()}`)}return(<><buttononClick={()=>updateSorting('asc')}>Sort Ascending</button><buttononClick={()=>updateSorting('desc')}>Sort Descending</button></>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "window.history.replaceState"
                },
                {
                    "type": "p",
                    "text": "Use it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ usePathname }from'next/navigation'exportfunctionLocaleSwitcher() {constpathname=usePathname()functionswitchLocale(locale:string) {// e.g. '/en/about' or '/fr/contact'constnewPath=`/${locale}${pathname}`window.history.replaceState(null,'',newPath)}return(<><buttononClick={()=>switchLocale('en')}>English</button><buttononClick={()=>switchLocale('fr')}>French</button></>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How Routing and Navigation Works"
                },
                {
                    "type": "p",
                    "text": "The App Router uses a hybrid approach for routing and navigation. On the server, your application code is automaticallycode-splitby route segments. And on the client, Next.jsprefetchesandcachesthe route segments. This means, when a user navigates to a new route, the browser doesn't reload the page, and only the route segments that change re-render - improving the navigation experience and performance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "1. Code Splitting"
                },
                {
                    "type": "p",
                    "text": "Code splitting allows you to split your application code into smaller bundles to be downloaded and executed by the browser. This reduces the amount of data transferred and execution time for each request, leading to improved performance."
                },
                {
                    "type": "p",
                    "text": "Server Componentsallow your application code to be automatically code-split by route segments. This means only the code needed for the current route is loaded on navigation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "2. Prefetching"
                },
                {
                    "type": "p",
                    "text": "Prefetching is a way to preload a route in the background before the user visits it."
                },
                {
                    "type": "p",
                    "text": "There are two ways routes are prefetched in Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "<Link>component: Routes are automatically prefetched as they become visible in the user's viewport. Prefetching happens when the page first loads or when it comes into view through scrolling.",
                        "router.prefetch(): TheuseRouterhook can be used to prefetch routes programmatically."
                    ]
                },
                {
                    "type": "p",
                    "text": "The<Link>'s default prefetching behavior (i.e. when theprefetchprop is left unspecified or set tonull) is different depending on your usage ofloading.js. Only the shared layout, down the rendered \"tree\" of components until the firstloading.jsfile, is prefetched and cached for30s. This reduces the cost of fetching an entire dynamic route, and it means you can show aninstant loading statefor better visual feedback to users."
                },
                {
                    "type": "p",
                    "text": "You can disable prefetching by setting theprefetchprop tofalse. Alternatively, you can prefetch the full page data beyond the loading boundaries by setting theprefetchprop totrue."
                },
                {
                    "type": "p",
                    "text": "See the<Link>API referencefor more information."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Prefetching is not enabled in development, only in production."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "3. Caching"
                },
                {
                    "type": "p",
                    "text": "Next.js has anin-memory client-side cachecalled theRouter Cache. As users navigate around the app, the React Server Component Payload ofprefetchedroute segments and visited routes are stored in the cache."
                },
                {
                    "type": "p",
                    "text": "This means on navigation, the cache is reused as much as possible, instead of making a new request to the server - improving performance by reducing the number of requests and data transferred."
                },
                {
                    "type": "p",
                    "text": "Learn more about how theRouter Cacheworks and how to configure it."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "4. Partial Rendering"
                },
                {
                    "type": "p",
                    "text": "Partial rendering means only the route segments that change on navigation re-render on the client, and any shared segments are preserved."
                },
                {
                    "type": "p",
                    "text": "For example, when navigating between two sibling routes,/dashboard/settingsand/dashboard/analytics, thesettingsandanalyticspages will be rendered, and the shareddashboardlayout will be preserved."
                },
                {
                    "type": "p",
                    "text": "Without partial rendering, each navigation would cause the full page to re-render on the client. Rendering only the segment that changes reduces the amount of data transferred and execution time, leading to improved performance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "5. Soft Navigation"
                },
                {
                    "type": "p",
                    "text": "Browsers perform a \"hard navigation\" when navigating between pages. The Next.js App Router enables \"soft navigation\" between pages, ensuring only the route segments that have changed are re-rendered (partial rendering). This enables client React state to be preserved during navigation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "6. Back and Forward Navigation"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js will maintain the scroll position for backwards and forwards navigation, and re-use route segments in theRouter Cache."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "7. Routing betweenpages/andapp/"
                },
                {
                    "type": "p",
                    "text": "When incrementally migrating frompages/toapp/, the Next.js router will automatically handle hard navigation between the two. To detect transitions frompages/toapp/, there is a client router filter that leverages probabilistic checking of app routes, which can occasionally result in false positives. By default, such occurrences should be very rare, as we configure the false positive likelihood to be 0.01%. This likelihood can be customized via theexperimental.clientRouterFilterAllowedRateoption innext.config.js. It's important to note that lowering the false positive rate will increase the size of the generated filter in the client bundle."
                },
                {
                    "type": "p",
                    "text": "Alternatively, if you prefer to disable this handling completely and manage the routing betweenpages/andapp/manually, you can setexperimental.clientRouterFilterto false innext.config.js. When this feature is disabled, any dynamic routes in pages that overlap with app routes won't be navigated to properly by default."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caching"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "TypeScript"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming",
            "title": "Routing: Loading UI and Streaming | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Loading UI and Streaming"
                },
                {
                    "type": "p",
                    "text": "The special fileloading.jshelps you create meaningful Loading UI withReact Suspense. With this convention, you can show aninstant loading statefrom the server while the content of a route segment loads. The new content is automatically swapped in once rendering is complete."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Instant Loading States"
                },
                {
                    "type": "p",
                    "text": "An instant loading state is fallback UI that is shown immediately upon navigation. You can pre-render loading indicators such as skeletons and spinners, or a small but meaningful part of future screens such as a cover photo, title, etc. This helps users understand the app is responding and provides a better user experience."
                },
                {
                    "type": "p",
                    "text": "Create a loading state by adding aloading.jsfile inside a folder."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionLoading() {// You can add any UI inside Loading, including a Skeleton.return<LoadingSkeleton/>}"
                },
                {
                    "type": "p",
                    "text": "In the same folder,loading.jswill be nested insidelayout.js. It will automatically wrap thepage.jsfile and any children below in a<Suspense>boundary."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Navigation is immediate, even withserver-centric routing.",
                        "Navigation is interruptible, meaning changing routes does not need to wait for the content of the route to fully load before navigating to another route.",
                        "Shared layouts remain interactive while new route segments load."
                    ]
                },
                {
                    "type": "p",
                    "text": "Recommendation:Use theloading.jsconvention for route segments (layouts and pages) as Next.js optimizes this functionality."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Streaming with Suspense"
                },
                {
                    "type": "p",
                    "text": "In addition toloading.js, you can also manually create Suspense Boundaries for your own UI components. The App Router supports streaming withSuspensefor bothNode.js and Edge runtimes."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Some browsersbuffer a streaming response. You may not see the streamed response until the exceeds 1024 bytes. This typically only affects “hello world” applications, but not real applications."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What is Streaming?"
                },
                {
                    "type": "p",
                    "text": "To learn how Streaming works in React and Next.js, it's helpful to understandServer-Side Rendering (SSR)and its limitations."
                },
                {
                    "type": "p",
                    "text": "With SSR, there's a series of steps that need to be completed before a user can see and interact with a page:"
                },
                {
                    "type": "list",
                    "items": [
                        "First, all data for a given page is fetched on the server.",
                        "The server then renders the HTML for the page.",
                        "The HTML, CSS, and JavaScript for the page are sent to the client.",
                        "A non-interactive user interface is shown using the generated HTML, and CSS.",
                        "Finally, Reacthydratesthe user interface to make it interactive."
                    ]
                },
                {
                    "type": "p",
                    "text": "These steps are sequential and blocking, meaning the server can only render the HTML for a page once all the data has been fetched. And, on the client, React can only hydrate the UI once the code for all components in the page has been downloaded."
                },
                {
                    "type": "p",
                    "text": "SSR with React and Next.js helps improve the perceived loading performance by showing a non-interactive page to the user as soon as possible."
                },
                {
                    "type": "p",
                    "text": "However, it can still be slow as all data fetching on server needs to be completed before the page can be shown to the user."
                },
                {
                    "type": "p",
                    "text": "Streamingallows you to break down the page's HTML into smaller chunks and progressively send those chunks from the server to the client."
                },
                {
                    "type": "p",
                    "text": "This enables parts of the page to be displayed sooner, without waiting for all the data to load before any UI can be rendered."
                },
                {
                    "type": "p",
                    "text": "Streaming works well with React's component model because each component can be considered a chunk. Components that have higher priority (e.g. product information) or that don't rely on data can be sent first (e.g. layout), and React can start hydration earlier. Components that have lower priority (e.g. reviews, related products) can be sent in the same server request after their data has been fetched."
                },
                {
                    "type": "p",
                    "text": "Streaming is particularly beneficial when you want to prevent long data requests from blocking the page from rendering as it can reduce theTime To First Byte (TTFB)andFirst Contentful Paint (FCP). It also helps improveTime to Interactive (TTI), especially on slower devices."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "<Suspense>works by wrapping a component that performs an asynchronous action (e.g. fetch data), showing fallback UI (e.g. skeleton, spinner) while it's happening, and then swapping in your component once the action completes."
                },
                {
                    "type": "code",
                    "code": "import{ Suspense }from'react'import{ PostFeed,Weather }from'./Components'exportdefaultfunctionPosts() {return(<section><Suspensefallback={<p>Loading feed...</p>}><PostFeed/></Suspense><Suspensefallback={<p>Loading weather...</p>}><Weather/></Suspense></section>)}"
                },
                {
                    "type": "p",
                    "text": "By using Suspense, you get the benefits of:"
                },
                {
                    "type": "list",
                    "items": [
                        "Streaming Server Rendering- Progressively rendering HTML from the server to the client.",
                        "Selective Hydration- React prioritizes what components to make interactive first based on user interaction."
                    ]
                },
                {
                    "type": "p",
                    "text": "For more Suspense examples and use cases, please see theReact Documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "SEO"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js will wait for data fetching insidegenerateMetadatato complete before streaming UI to the client. This guarantees the first part of a streamed response includes<head>tags.",
                        "Since streaming is server-rendered, it does not impact SEO. You can use theRich Results Testtool from Google to see how your page appears to Google's web crawlers and view the serialized HTML (source)."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Status Codes"
                },
                {
                    "type": "p",
                    "text": "When streaming, a200status code will be returned to signal that the request was successful."
                },
                {
                    "type": "p",
                    "text": "The server can still communicate errors or issues to the client within the streamed content itself, for example, when usingredirectornotFound. Since the response headers have already been sent to the client, the status code of the response cannot be updated. This does not affect SEO."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/middleware",
            "title": "Routing: Middleware | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Middleware"
                },
                {
                    "type": "p",
                    "text": "Middleware allows you to run code before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly."
                },
                {
                    "type": "p",
                    "text": "Middleware runs before cached content and routes are matched. SeeMatching Pathsfor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Use Cases"
                },
                {
                    "type": "p",
                    "text": "Integrating Middleware into your application can lead to significant improvements in performance, security, and user experience. Some common scenarios where Middleware is particularly effective include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Authentication and Authorization: Ensure user identity and check session cookies before granting access to specific pages or API routes.",
                        "Server-Side Redirects: Redirect users at the server level based on certain conditions (e.g., locale, user role).",
                        "Path Rewriting: Support A/B testing, feature rollouts, or legacy paths by dynamically rewriting paths to API routes or pages based on request properties.",
                        "Bot Detection: Protect your resources by detecting and blocking bot traffic.",
                        "Logging and Analytics: Capture and analyze request data for insights before processing by the page or API.",
                        "Feature Flagging: Enable or disable features dynamically for seamless feature rollouts or testing."
                    ]
                },
                {
                    "type": "p",
                    "text": "Recognizing situations where middleware may not be the optimal approach is just as crucial. Here are some scenarios to be mindful of:"
                },
                {
                    "type": "list",
                    "items": [
                        "Complex Data Fetching and Manipulation: Middleware is not designed for direct data fetching or manipulation, this should be done within Route Handlers or server-side utilities instead.",
                        "Heavy Computational Tasks: Middleware should be lightweight and respond quickly or it can cause delays in page load. Heavy computational tasks or long-running processes should be done within dedicated Route Handlers.",
                        "Extensive Session Management: While Middleware can manage basic session tasks, extensive session management should be managed by dedicated authentication services or within Route Handlers.",
                        "Direct Database Operations: Performing direct database operations within Middleware is not recommended. Database interactions should done within Route Handlers or server-side utilities."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "Use the filemiddleware.ts(or.js) in the root of your project to define Middleware. For example, at the same level aspagesorapp, or insidesrcif applicable."
                },
                {
                    "type": "p",
                    "text": "Note: While only onemiddleware.tsfile is supported per project, you can still organize your middleware logic modularly. Break out middleware functionalities into separate.tsor.jsfiles and import them into your mainmiddleware.tsfile. This allows for cleaner management of route-specific middleware, aggregated in themiddleware.tsfor centralized control. By enforcing a single middleware file, it simplifies configuration, prevents potential conflicts, and optimizes performance by avoiding multiple middleware layers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'// This function can be marked `async` if using `await` insideexportfunctionmiddleware(request:NextRequest) {returnNextResponse.redirect(newURL('/home',request.url))}// See \"Matching Paths\" below to learn moreexportconstconfig={matcher:'/about/:path*',}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Matching Paths"
                },
                {
                    "type": "p",
                    "text": "Middleware will be invoked forevery route in your project. Given this, it's crucial to use matchers to precisely target or exclude specific routes. The following is the execution order:"
                },
                {
                    "type": "list",
                    "items": [
                        "headersfromnext.config.js",
                        "redirectsfromnext.config.js",
                        "Middleware (rewrites,redirects, etc.)",
                        "beforeFiles(rewrites) fromnext.config.js",
                        "Filesystem routes (public/,_next/static/,pages/,app/, etc.)",
                        "afterFiles(rewrites) fromnext.config.js",
                        "Dynamic Routes (/blog/[slug])",
                        "fallback(rewrites) fromnext.config.js"
                    ]
                },
                {
                    "type": "p",
                    "text": "There are two ways to define which paths Middleware will run on:"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom matcher config",
                        "Conditional statements"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Matcher"
                },
                {
                    "type": "p",
                    "text": "matcherallows you to filter Middleware to run on specific paths."
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={matcher:'/about/:path*',}"
                },
                {
                    "type": "p",
                    "text": "You can match a single path or multiple paths with an array syntax:"
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={matcher:['/about/:path*','/dashboard/:path*'],}"
                },
                {
                    "type": "p",
                    "text": "Thematcherconfig allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:"
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={matcher:[/** Match all request paths except for the ones starting with:* - api (API routes)* - _next/static (static files)* - _next/image (image optimization files)* - favicon.ico (favicon file)*/'/((?!api|_next/static|_next/image|favicon.ico).*)',],}"
                },
                {
                    "type": "p",
                    "text": "You can also bypass Middleware for certain requests by using themissingorhasarrays, or a combination of both:"
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={matcher:[/** Match all request paths except for the ones starting with:* - api (API routes)* - _next/static (static files)* - _next/image (image optimization files)* - favicon.ico (favicon file)*/{source:'/((?!api|_next/static|_next/image|favicon.ico).*)',missing:[{ type:'header',key:'next-router-prefetch'},{ type:'header',key:'purpose',value:'prefetch'},],},{source:'/((?!api|_next/static|_next/image|favicon.ico).*)',has:[{ type:'header',key:'next-router-prefetch'},{ type:'header',key:'purpose',value:'prefetch'},],},{source:'/((?!api|_next/static|_next/image|favicon.ico).*)',has:[{ type:'header',key:'x-present'}],missing:[{ type:'header',key:'x-missing',value:'prefetch'}],},],}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Thematchervalues need to be constants so they can be statically analyzed at build-time. Dynamic values such as variables will be ignored."
                },
                {
                    "type": "p",
                    "text": "Configured matchers:"
                },
                {
                    "type": "list",
                    "items": [
                        "MUST start with/",
                        "Can include named parameters:/about/:pathmatches/about/aand/about/bbut not/about/a/c",
                        "Can have modifiers on named parameters (starting with:):/about/:path*matches/about/a/b/cbecause*iszero or more.?iszero or oneand+one or more",
                        "Can use regular expression enclosed in parenthesis:/about/(.*)is the same as/about/:path*"
                    ]
                },
                {
                    "type": "p",
                    "text": "Read more details onpath-to-regexpdocumentation."
                },
                {
                    "type": "p",
                    "text": "Good to know: For backward compatibility, Next.js always considers/publicas/public/index. Therefore, a matcher of/public/:pathwill match."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Conditional Statements"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {if(request.nextUrl.pathname.startsWith('/about')) {returnNextResponse.rewrite(newURL('/about-2',request.url))}if(request.nextUrl.pathname.startsWith('/dashboard')) {returnNextResponse.rewrite(newURL('/dashboard/user',request.url))}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "NextResponse"
                },
                {
                    "type": "p",
                    "text": "TheNextResponseAPI allows you to:"
                },
                {
                    "type": "list",
                    "items": [
                        "redirectthe incoming request to a different URL",
                        "rewritethe response by displaying a given URL",
                        "Set request headers for API Routes,getServerSideProps, andrewritedestinations",
                        "Set response cookies",
                        "Set response headers"
                    ]
                },
                {
                    "type": "p",
                    "text": "To produce a response from Middleware, you can:"
                },
                {
                    "type": "list",
                    "items": [
                        "rewriteto a route (PageorRoute Handler) that produces a response",
                        "return aNextResponsedirectly. SeeProducing a Response"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Cookies"
                },
                {
                    "type": "p",
                    "text": "Cookies are regular headers. On aRequest, they are stored in theCookieheader. On aResponsethey are in theSet-Cookieheader. Next.js provides a convenient way to access and manipulate these cookies through thecookiesextension onNextRequestandNextResponse."
                },
                {
                    "type": "list",
                    "items": [
                        "For incoming requests,cookiescomes with the following methods:get,getAll,set, anddeletecookies. You can check for the existence of a cookie withhasor remove all cookies withclear.",
                        "For outgoing responses,cookieshave the following methodsget,getAll,set, anddelete."
                    ]
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {// Assume a \"Cookie:nextjs=fast\" header to be present on the incoming request// Getting cookies from the request using the `RequestCookies` APIletcookie=request.cookies.get('nextjs')console.log(cookie)// => { name: 'nextjs', value: 'fast', Path: '/' }constallCookies=request.cookies.getAll()console.log(allCookies)// => [{ name: 'nextjs', value: 'fast' }]request.cookies.has('nextjs')// => truerequest.cookies.delete('nextjs')request.cookies.has('nextjs')// => false// Setting cookies on the response using the `ResponseCookies` APIconstresponse=NextResponse.next()response.cookies.set('vercel','fast')response.cookies.set({name:'vercel',value:'fast',path:'/',})cookie=response.cookies.get('vercel')console.log(cookie)// => { name: 'vercel', value: 'fast', Path: '/' }// The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.returnresponse}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Setting Headers"
                },
                {
                    "type": "p",
                    "text": "You can set request and response headers using theNextResponseAPI (settingrequestheaders is available since Next.js v13.0.0)."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {// Clone the request headers and set a new header `x-hello-from-middleware1`constrequestHeaders=newHeaders(request.headers)requestHeaders.set('x-hello-from-middleware1','hello')// You can also set request headers in NextResponse.rewriteconstresponse=NextResponse.next({request:{// New request headersheaders:requestHeaders,},})// Set a new response header `x-hello-from-middleware2`response.headers.set('x-hello-from-middleware2','hello')returnresponse}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Avoid setting large headers as it might cause431 Request Header Fields Too Largeerror depending on your backend web server configuration."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CORS"
                },
                {
                    "type": "p",
                    "text": "You can set CORS headers in Middleware to allow cross-origin requests, includingsimpleandpreflightedrequests."
                },
                {
                    "type": "code",
                    "code": "import{ NextRequest,NextResponse }from'next/server'constallowedOrigins=['https://acme.com','https://my-app.org']constcorsOptions={'Access-Control-Allow-Methods':'GET, POST, PUT, DELETE, OPTIONS','Access-Control-Allow-Headers':'Content-Type, Authorization',}exportfunctionmiddleware(request:NextRequest) {// Check the origin from the requestconstorigin=request.headers.get('origin')??''constisAllowedOrigin=allowedOrigins.includes(origin)// Handle preflighted requestsconstisPreflight=request.method==='OPTIONS'if(isPreflight) {constpreflightHeaders={...(isAllowedOrigin&&{'Access-Control-Allow-Origin':origin }),...corsOptions,}returnNextResponse.json({},{ headers:preflightHeaders })}// Handle simple requestsconstresponse=NextResponse.next()if(isAllowedOrigin) {response.headers.set('Access-Control-Allow-Origin',origin)}Object.entries(corsOptions).forEach(([key,value])=>{response.headers.set(key,value)})returnresponse}exportconstconfig={matcher:'/api/:path*',}"
                },
                {
                    "type": "p",
                    "text": "Good to know:You can configure CORS headers for individual routes inRoute Handlers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Producing a Response"
                },
                {
                    "type": "p",
                    "text": "You can respond from Middleware directly by returning aResponseorNextResponseinstance. (This is available sinceNext.js v13.1.0)"
                },
                {
                    "type": "code",
                    "code": "import{ NextRequest }from'next/server'import{ isAuthenticated }from'@lib/auth'// Limit the middleware to paths starting with `/api/`exportconstconfig={matcher:'/api/:function*',}exportfunctionmiddleware(request:NextRequest) {// Call our authentication function to check the requestif(!isAuthenticated(request)) {// Respond with JSON indicating an error messagereturnResponse.json({ success:false,message:'authentication failed'},{ status:401})}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "waitUntilandNextFetchEvent"
                },
                {
                    "type": "p",
                    "text": "TheNextFetchEventobject extends the nativeFetchEventobject, and includes thewaitUntil()method."
                },
                {
                    "type": "p",
                    "text": "ThewaitUntil()method takes a promise as an argument, and extends the lifetime of the Middleware until the promise settles. This is useful for performing work in the background."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextFetchEvent,NextRequest }from'next/server'exportfunctionmiddleware(req:NextRequest,event:NextFetchEvent) {event.waitUntil(fetch('https://my-analytics-platform.com',{method:'POST',body:JSON.stringify({ pathname:req.nextUrl.pathname }),}))returnNextResponse.next()}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Advanced Middleware Flags"
                },
                {
                    "type": "p",
                    "text": "Inv13.1of Next.js two additional flags were introduced for middleware,skipMiddlewareUrlNormalizeandskipTrailingSlashRedirectto handle advanced use cases."
                },
                {
                    "type": "p",
                    "text": "skipTrailingSlashRedirectdisables Next.js redirects for adding or removing trailing slashes. This allows custom handling inside middleware to maintain the trailing slash for some paths but not others, which can make incremental migrations easier."
                },
                {
                    "type": "code",
                    "code": "module.exports={skipTrailingSlashRedirect:true,}"
                },
                {
                    "type": "code",
                    "code": "constlegacyPrefixes=['/docs','/blog']exportdefaultasyncfunctionmiddleware(req) {const{pathname}=req.nextUrlif(legacyPrefixes.some((prefix)=>pathname.startsWith(prefix))) {returnNextResponse.next()}// apply trailing slash handlingif(!pathname.endsWith('/')&&!pathname.match(/((?!\\.well-known(?:\\/.*)?)(?:[^/]+\\/)*[^/]+\\.\\w+)/)) {req.nextUrl.pathname+='/'returnNextResponse.redirect(req.nextUrl)}}"
                },
                {
                    "type": "p",
                    "text": "skipMiddlewareUrlNormalizeallows for disabling the URL normalization in Next.js to make handling direct visits and client-transitions the same. In some advanced cases, this option provides full control by using the original URL."
                },
                {
                    "type": "code",
                    "code": "module.exports={skipMiddlewareUrlNormalize:true,}"
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionmiddleware(req) {const{pathname}=req.nextUrl// GET /_next/data/build-id/hello.jsonconsole.log(pathname)// with the flag this now /_next/data/build-id/hello.json// without the flag this would be normalized to /hello}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Runtime"
                },
                {
                    "type": "p",
                    "text": "Middleware currently only supports theEdge runtime. The Node.js runtime can not be used."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/parallel-routes",
            "title": "Routing: Parallel Routes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Parallel Routes"
                },
                {
                    "type": "p",
                    "text": "Parallel Routes allows you to simultaneously or conditionally render one or more pages within the same layout. They are useful for highly dynamic sections of an app, such as dashboards and feeds on social sites."
                },
                {
                    "type": "p",
                    "text": "For example, considering a dashboard, you can use parallel routes to simultaneously render theteamandanalyticspages:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Slots"
                },
                {
                    "type": "p",
                    "text": "Parallel routes are created using namedslots. Slots are defined with the@folderconvention. For example, the following file structure defines two slots:@analyticsand@team:"
                },
                {
                    "type": "p",
                    "text": "Slots are passed as props to the shared parent layout. For the example above, the component inapp/layout.jsnow accepts the@analyticsand@teamslots props, and can render them in parallel alongside thechildrenprop:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionLayout({children,team,analytics,}:{children:React.ReactNodeanalytics:React.ReactNodeteam:React.ReactNode}) {return(<>{children}{team}{analytics}</>)}"
                },
                {
                    "type": "p",
                    "text": "However, slots arenotroute segmentsand do not affect the URL structure. For example, for/@analytics/views, the URL will be/viewssince@analyticsis a slot."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Thechildrenprop is an implicit slot that does not need to be mapped to a folder. This meansapp/page.jsis equivalent toapp/@children/page.js."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Active state and navigation"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js keeps track of the activestate(or subpage) for each slot. However, the content rendered within a slot will depend on the type of navigation:"
                },
                {
                    "type": "list",
                    "items": [
                        "Soft Navigation: During client-side navigation, Next.js will perform apartial render, changing the subpage within the slot, while maintaining the other slot's active subpages, even if they don't match the current URL.",
                        "Hard Navigation: After a full-page load (browser refresh), Next.js cannot determine the active state for the slots that don't match the current URL. Instead, it will render adefault.jsfile for the unmatched slots, or404ifdefault.jsdoesn't exist."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "The404for unmatched routes helps ensure that you don't accidentally render a parallel route on a page that it was not intended for."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "default.js"
                },
                {
                    "type": "p",
                    "text": "You can define adefault.jsfile to render as a fallback for unmatched slots during the initial load or full-page reload."
                },
                {
                    "type": "p",
                    "text": "Consider the following folder structure. The@teamslot has a/settingspage, but@analyticsdoes not."
                },
                {
                    "type": "p",
                    "text": "When navigating to/settings, the@teamslot will render the/settingspage while maintaining the currently active page for the@analyticsslot."
                },
                {
                    "type": "p",
                    "text": "On refresh, Next.js will render adefault.jsfor@analytics. Ifdefault.jsdoesn't exist, a404is rendered instead."
                },
                {
                    "type": "p",
                    "text": "Additionally, sincechildrenis an implicit slot, you also need to create adefault.jsfile to render a fallback forchildrenwhen Next.js cannot recover the active state of the parent page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "useSelectedLayoutSegment(s)"
                },
                {
                    "type": "p",
                    "text": "BothuseSelectedLayoutSegmentanduseSelectedLayoutSegmentsaccept aparallelRoutesKeyparameter, which allows you to read the active route segment within a slot."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useSelectedLayoutSegment }from'next/navigation'exportdefaultfunctionLayout({ auth }:{ auth:React.ReactNode}) {constloginSegment=useSelectedLayoutSegment('auth')// ...}"
                },
                {
                    "type": "p",
                    "text": "When a user navigates toapp/@auth/login(or/loginin the URL bar),loginSegmentwill be equal to the string\"login\"."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Conditional Routes"
                },
                {
                    "type": "p",
                    "text": "You can use Parallel Routes to conditionally render routes based on certain conditions, such as user role. For example, to render a different dashboard page for the/adminor/userroles:"
                },
                {
                    "type": "code",
                    "code": "import{ checkUserRole }from'@/lib/auth'exportdefaultfunctionLayout({user,admin,}:{user:React.ReactNodeadmin:React.ReactNode}) {constrole=checkUserRole()return<>{role==='admin'?admin:user}</>}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Tab Groups"
                },
                {
                    "type": "p",
                    "text": "You can add alayoutinside a slot to allow users to navigate the slot independently. This is useful for creating tabs."
                },
                {
                    "type": "p",
                    "text": "For example, the@analyticsslot has two subpages:/page-viewsand/visitors."
                },
                {
                    "type": "p",
                    "text": "Within@analytics, create alayoutfile to share the tabs between the two pages:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {return(<><nav><Linkhref=\"/page-views\">Page Views</Link><Linkhref=\"/visitors\">Visitors</Link></nav><div>{children}</div></>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Modals"
                },
                {
                    "type": "p",
                    "text": "Parallel Routes can be used together withIntercepting Routesto create modals. This allows you to solve common challenges when building modals, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "Making the modal contentshareable through a URL.",
                        "Preserving contextwhen the page is refreshed, instead of closing the modal.",
                        "Closing the modal on backwards navigationrather than going to the previous route.",
                        "Reopening the modal on forwards navigation."
                    ]
                },
                {
                    "type": "p",
                    "text": "Consider the following UI pattern, where a user can open a login modal from a layout using client-side navigation, or access a separate/loginpage:"
                },
                {
                    "type": "p",
                    "text": "To implement this pattern, start by creating a/loginroute that renders yourmainlogin page."
                },
                {
                    "type": "code",
                    "code": "import{ Login }from'@/app/ui/login'exportdefaultfunctionPage() {return<Login/>}"
                },
                {
                    "type": "p",
                    "text": "Then, inside the@authslot, adddefault.jsfile that returnsnull. This ensures that the modal is not rendered when it's not active."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionDefault() {returnnull}"
                },
                {
                    "type": "p",
                    "text": "Inside your@authslot, intercept the/loginroute by updating the/(.)loginfolder. Import the<Modal>component and its children into the/(.)login/page.tsxfile:"
                },
                {
                    "type": "code",
                    "code": "import{ Modal }from'@/app/ui/modal'import{ Login }from'@/app/ui/login'exportdefaultfunctionPage() {return(<Modal><Login/></Modal>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "The convention used to intercept the route, e.g.(.), depends on your file-system structure. SeeIntercepting Routes convention.",
                        "By separating the<Modal>functionality from the modal content (<Login>), you can ensure any content inside the modal, e.g.forms, are Server Components. SeeInterleaving Client and Server Componentsfor more information."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Opening the modal"
                },
                {
                    "type": "p",
                    "text": "Now, you can leverage the Next.js router to open and close the modal. This ensures the URL is correctly updated when the modal is open, and when navigating backwards and forwards."
                },
                {
                    "type": "p",
                    "text": "To open the modal, pass the@authslot as a prop to the parent layout and render it alongside thechildrenprop."
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionLayout({auth,children,}:{auth:React.ReactNodechildren:React.ReactNode}) {return(<><nav><Linkhref=\"/login\">Open modal</Link></nav><div>{auth}</div><div>{children}</div></>)}"
                },
                {
                    "type": "p",
                    "text": "When the user clicks the<Link>, the modal will open instead of navigating to the/loginpage. However, on refresh or initial load, navigating to/loginwill take the user to the main login page."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Closing the modal"
                },
                {
                    "type": "p",
                    "text": "You can close the modal by callingrouter.back()or by using theLinkcomponent."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useRouter }from'next/navigation'exportfunctionModal({ children }:{ children:React.ReactNode}) {constrouter=useRouter()return(<><buttononClick={()=>{router.back()}}>Close modal</button><div>{children}</div></>)}"
                },
                {
                    "type": "p",
                    "text": "When using theLinkcomponent to navigate away from a page that shouldn't render the@authslot anymore, we use a catch-all route that returnsnull."
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportfunctionModal({ children }:{ children:React.ReactNode}) {return(<><Linkhref=\"/\">Close modal</Link><div>{children}</div></>)}"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionCatchAll() {returnnull}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "We use a catch-all route in our@authslot to close the modal because of the behavior described inActive state and navigation. Since client-side navigations to a route that no longer match the slot will remain visible, we need to match the slot to a route that returnsnullto close the modal.",
                        "Other examples could include opening a photo modal in a gallery while also having a dedicated/photo/[id]page, or opening a shopping cart in a side modal.",
                        "View an exampleof modals with Intercepted and Parallel Routes."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Loading and Error UI"
                },
                {
                    "type": "p",
                    "text": "Parallel Routes can be streamed independently, allowing you to define independent error and loading states for each route:"
                },
                {
                    "type": "p",
                    "text": "See theLoading UIandError Handlingdocumentation for more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "default.js"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/redirecting",
            "title": "Routing: Redirecting | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Redirecting"
                },
                {
                    "type": "p",
                    "text": "There are a few ways you can handle redirects in Next.js. This page will go through each available option, use cases, and how to manage large numbers of redirects."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "redirectfunction"
                },
                {
                    "type": "p",
                    "text": "Theredirectfunction allows you to redirect the user to another URL. You can callredirectinServer Components,Route Handlers, andServer Actions."
                },
                {
                    "type": "p",
                    "text": "redirectis often used after a mutation or event. For example, creating a post:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ redirect }from'next/navigation'import{ revalidatePath }from'next/cache'exportasyncfunctioncreatePost(id:string) {try{// Call database}catch(error) {// Handle errors}revalidatePath('/posts')// Update cached postsredirect(`/post/${id}`)// Navigate to the new post page}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "redirectreturns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.",
                        "redirectinternally throws an error so it should be called outside oftry/catchblocks.",
                        "redirectcan be called in Client Components during the rendering process but not in event handlers. You can use theuseRouterhookinstead.",
                        "redirectalso accepts absolute URLs and can be used to redirect to external links.",
                        "If you'd like to redirect before the render process, usenext.config.jsorMiddleware."
                    ]
                },
                {
                    "type": "p",
                    "text": "See theredirectAPI referencefor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "permanentRedirectfunction"
                },
                {
                    "type": "p",
                    "text": "ThepermanentRedirectfunction allows you topermanentlyredirect the user to another URL. You can callpermanentRedirectinServer Components,Route Handlers, andServer Actions."
                },
                {
                    "type": "p",
                    "text": "permanentRedirectis often used after a mutation or event that changes an entity's canonical URL, such as updating a user's profile URL after they change their username:"
                },
                {
                    "type": "code",
                    "code": "'use server'import{ permanentRedirect }from'next/navigation'import{ revalidateTag }from'next/cache'exportasyncfunctionupdateUsername(username:string,formData:FormData) {try{// Call database}catch(error) {// Handle errors}revalidateTag('username')// Update all references to the usernamepermanentRedirect(`/profile/${username}`)// Navigate to the new user profile}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "permanentRedirectreturns a 308 (permanent redirect) status code by default.",
                        "permanentRedirectalso accepts absolute URLs and can be used to redirect to external links.",
                        "If you'd like to redirect before the render process, usenext.config.jsorMiddleware."
                    ]
                },
                {
                    "type": "p",
                    "text": "See thepermanentRedirectAPI referencefor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useRouter()hook"
                },
                {
                    "type": "p",
                    "text": "If you need to redirect inside an event handler in a Client Component, you can use thepushmethod from theuseRouterhook. For example:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useRouter }from'next/navigation'exportdefaultfunctionPage() {constrouter=useRouter()return(<buttontype=\"button\"onClick={()=>router.push('/dashboard')}>Dashboard</button>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "If you don't need to programmatically navigate a user, you should use a<Link>component."
                    ]
                },
                {
                    "type": "p",
                    "text": "See theuseRouterAPI referencefor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "redirectsinnext.config.js"
                },
                {
                    "type": "p",
                    "text": "Theredirectsoption in thenext.config.jsfile allows you to redirect an incoming request path to a different destination path. This is useful when you change the URL structure of pages or have a list of redirects that are known ahead of time."
                },
                {
                    "type": "p",
                    "text": "redirectssupportspath,header, cookie, and query matching, giving you the flexibility to redirect users based on an incoming request."
                },
                {
                    "type": "p",
                    "text": "To useredirects, add the option to yournext.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={asyncredirects() {return[// Basic redirect{source:'/about',destination:'/',permanent:true,},// Wildcard path matching{source:'/blog/:slug',destination:'/news/:slug',permanent:true,},]},}"
                },
                {
                    "type": "p",
                    "text": "See theredirectsAPI referencefor more information."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "redirectscan return a 307 (Temporary Redirect) or 308 (Permanent Redirect) status code with thepermanentoption.",
                        "redirectsmay have a limit on platforms. For example, on Vercel, there's a limit of 1,024 redirects. To manage a large number of redirects (1000+), consider creating a custom solution usingMiddleware. Seemanaging redirects at scalefor more.",
                        "redirectsrunsbeforeMiddleware."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "NextResponse.redirectin Middleware"
                },
                {
                    "type": "p",
                    "text": "Middleware allows you to run code before a request is completed. Then, based on the incoming request, redirect to a different URL usingNextResponse.redirect. This is useful if you want to redirect users based on a condition (e.g. authentication, session management, etc) or havea large number of redirects."
                },
                {
                    "type": "p",
                    "text": "For example, to redirect the user to a/loginpage if they are not authenticated:"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse,NextRequest }from'next/server'import{ authenticate }from'auth-provider'exportfunctionmiddleware(request:NextRequest) {constisAuthenticated=authenticate(request)// If the user is authenticated, continue as normalif(isAuthenticated) {returnNextResponse.next()}// Redirect to login page if not authenticatedreturnNextResponse.redirect(newURL('/login',request.url))}exportconstconfig={matcher:'/dashboard/:path*',}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Middleware runsafterredirectsinnext.config.jsandbeforerendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "See theMiddlewaredocumentation for more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Managing redirects at scale (advanced)"
                },
                {
                    "type": "p",
                    "text": "To manage a large number of redirects (1000+), you may consider creating a custom solution using Middleware. This allows you to handle redirects programmatically without having to redeploy your application."
                },
                {
                    "type": "p",
                    "text": "To do this, you'll need to consider:"
                },
                {
                    "type": "list",
                    "items": [
                        "Creating and storing a redirect map.",
                        "Optimizing data lookup performance."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js Example: See ourMiddleware with Bloom filterexample for an implementation of the recommendations below."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "1. Creating and storing a redirect map"
                },
                {
                    "type": "p",
                    "text": "A redirect map is a list of redirects that you can store in a database (usually a key-value store) or JSON file."
                },
                {
                    "type": "p",
                    "text": "Consider the following data structure:"
                },
                {
                    "type": "code",
                    "code": "{\"/old\":{\"destination\":\"/new\",\"permanent\":true},\"/blog/post-old\":{\"destination\":\"/blog/post-new\",\"permanent\":true}}"
                },
                {
                    "type": "p",
                    "text": "InMiddleware, you can read from a database such as Vercel'sEdge ConfigorRedis, and redirect the user based on the incoming request:"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse,NextRequest }from'next/server'import{ get }from'@vercel/edge-config'typeRedirectEntry={destination:stringpermanent:boolean}exportasyncfunctionmiddleware(request:NextRequest) {constpathname=request.nextUrl.pathnameconstredirectData=awaitget(pathname)if(redirectData&&typeofredirectData==='string') {constredirectEntry:RedirectEntry=JSON.parse(redirectData)conststatusCode=redirectEntry.permanent?308:307returnNextResponse.redirect(redirectEntry.destination,statusCode)}// No redirect found, continue without redirectingreturnNextResponse.next()}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "2. Optimizing data lookup performance"
                },
                {
                    "type": "p",
                    "text": "Reading a large dataset for every incoming request can be slow and expensive. There are two ways you can optimize data lookup performance:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use a database that is optimized for fast reads, such asVercel Edge ConfigorRedis.",
                        "Use a data lookup strategy such as aBloom filterto efficiently check if a redirect existsbeforereading the larger redirects file or database."
                    ]
                },
                {
                    "type": "p",
                    "text": "Considering the previous example, you can import a generated bloom filter file into Middleware, then, check if the incoming request pathname exists in the bloom filter."
                },
                {
                    "type": "p",
                    "text": "If it does, forward the request to aRoute Handlerwhich will check the actual file and redirect the user to the appropriate URL. This avoids importing a large redirects file into Middleware, which can slow down every incoming request."
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse,NextRequest }from'next/server'import{ ScalableBloomFilter }from'bloom-filters'importGeneratedBloomFilterfrom'./redirects/bloom-filter.json'typeRedirectEntry={destination:stringpermanent:boolean}// Initialize bloom filter from a generated JSON fileconstbloomFilter=ScalableBloomFilter.fromJSON(GeneratedBloomFilterasany)exportasyncfunctionmiddleware(request:NextRequest) {// Get the path for the incoming requestconstpathname=request.nextUrl.pathname// Check if the path is in the bloom filterif(bloomFilter.has(pathname)) {// Forward the pathname to the Route Handlerconstapi=newURL(`/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,request.nextUrl.origin)try{// Fetch redirect data from the Route HandlerconstredirectData=awaitfetch(api)if(redirectData.ok) {constredirectEntry:RedirectEntry|undefined=awaitredirectData.json()if(redirectEntry) {// Determine the status codeconststatusCode=redirectEntry.permanent?308:307// Redirect to the destinationreturnNextResponse.redirect(redirectEntry.destination,statusCode)}}}catch(error) {console.error(error)}}// No redirect found, continue the request without redirectingreturnNextResponse.next()}"
                },
                {
                    "type": "p",
                    "text": "Then, in the Route Handler:"
                },
                {
                    "type": "code",
                    "code": "import{ NextRequest,NextResponse }from'next/server'importredirectsfrom'@/app/redirects/redirects.json'typeRedirectEntry={destination:stringpermanent:boolean}exportfunctionGET(request:NextRequest) {constpathname=request.nextUrl.searchParams.get('pathname')if(!pathname) {returnnewResponse('Bad Request',{ status:400})}// Get the redirect entry from theredirects.json fileconstredirect=(redirectsasRecord<string,RedirectEntry>)[pathname]// Account for bloom filter false positivesif(!redirect) {returnnewResponse('No redirect',{ status:400})}// Return the redirect entryreturnNextResponse.json(redirect)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "To generate a bloom filter, you can use a library likebloom-filters.",
                        "You should validate requests made to your Route Handler to prevent malicious requests."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "redirect"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "permanentRedirect"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Middleware"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "redirects"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups",
            "title": "Routing: Route Groups | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Route Groups"
                },
                {
                    "type": "p",
                    "text": "In theappdirectory, nested folders are normally mapped to URL paths. However, you can mark a folder as aRoute Groupto prevent the folder from being included in the route's URL path."
                },
                {
                    "type": "p",
                    "text": "This allows you to organize your route segments and project files into logical groups without affecting the URL path structure."
                },
                {
                    "type": "p",
                    "text": "Route groups are useful for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Organizing routes into groupse.g. by site section, intent, or team.",
                        "Enablingnested layoutsin the same route segment level:Creating multiple nested layouts in the same segment, including multiple root layoutsAdding a layout to a subset of routes in a common segment",
                        "Creating multiple nested layouts in the same segment, including multiple root layouts",
                        "Adding a layout to a subset of routes in a common segment"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Creating multiple nested layouts in the same segment, including multiple root layouts",
                        "Adding a layout to a subset of routes in a common segment"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "A route group can be created by wrapping a folder's name in parenthesis:(folderName)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Organize routes without affecting the URL path"
                },
                {
                    "type": "p",
                    "text": "To organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g.(marketing)or(shop))."
                },
                {
                    "type": "p",
                    "text": "Even though routes inside(marketing)and(shop)share the same URL hierarchy, you can create a different layout for each group by adding alayout.jsfile inside their folders."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Opting specific segments into a layout"
                },
                {
                    "type": "p",
                    "text": "To opt specific routes into a layout, create a new route group (e.g.(shop)) and move the routes that share the same layout into the group (e.g.accountandcart). The routes outside of the group will not share the layout (e.g.checkout)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Creating multiple root layouts"
                },
                {
                    "type": "p",
                    "text": "To create multipleroot layouts, remove the top-levellayout.jsfile, and add alayout.jsfile inside each route groups. This is useful for partitioning an application into sections that have a completely different UI or experience. The<html>and<body>tags need to be added to each root layout."
                },
                {
                    "type": "p",
                    "text": "In the example above, both(marketing)and(shop)have their own root layout."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "The naming of route groups has no special significance other than for organization. They do not affect the URL path.",
                        "Routes that include a route groupshould notresolve to the same URL path as other routes. For example, since route groups don't affect URL structure,(marketing)/about/page.jsand(shop)/about/page.jswould both resolve to/aboutand cause an error.",
                        "If you use multiple root layouts without a top-levellayout.jsfile, your homepage.jsfile should be defined in one of the route groups, For example:app/(marketing)/page.js.",
                        "Navigatingacross multiple root layoutswill cause afull page load(as opposed to a client-side navigation). For example, navigating from/cartthat usesapp/(shop)/layout.jsto/blogthat usesapp/(marketing)/layout.jswill cause a full page load. Thisonlyapplies to multiple root layouts."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/route-handlers",
            "title": "Routing: Route Handlers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Route Handlers"
                },
                {
                    "type": "p",
                    "text": "Route Handlers allow you to create custom request handlers for a given route using the WebRequestandResponseAPIs."
                },
                {
                    "type": "p",
                    "text": "Good to know: Route Handlers are only available inside theappdirectory. They are the equivalent ofAPI Routesinside thepagesdirectory meaning youdo notneed to use API Routes and Route Handlers together."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "Route Handlers are defined in aroute.js|tsfileinside theappdirectory:"
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='force-dynamic'// defaults to autoexportasyncfunctionGET(request:Request) {}"
                },
                {
                    "type": "p",
                    "text": "Route Handlers can be nested inside theappdirectory, similar topage.jsandlayout.js. But therecannotbe aroute.jsfile at the same route segment level aspage.js."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Supported HTTP Methods"
                },
                {
                    "type": "p",
                    "text": "The followingHTTP methodsare supported:GET,POST,PUT,PATCH,DELETE,HEAD, andOPTIONS. If an unsupported method is called, Next.js will return a405 Method Not Allowedresponse."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "ExtendedNextRequestandNextResponseAPIs"
                },
                {
                    "type": "p",
                    "text": "In addition to supporting nativeRequestandResponse. Next.js extends them withNextRequestandNextResponseto provide convenient helpers for advanced use cases."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Behavior"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caching"
                },
                {
                    "type": "p",
                    "text": "Route Handlers are cached by default when using theGETmethod with theResponseobject."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET() {constres=awaitfetch('https://data.mongodb-api.com/...',{headers:{'Content-Type':'application/json','API-Key':process.env.DATA_API_KEY,},})constdata=awaitres.json()returnResponse.json({ data })}"
                },
                {
                    "type": "p",
                    "text": "TypeScript Warning:Response.json()is only valid from TypeScript 5.2. If you use a lower TypeScript version, you can useNextResponse.json()for typed responses instead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Opting out of caching"
                },
                {
                    "type": "p",
                    "text": "You can opt out of caching by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using theRequestobject with theGETmethod.",
                        "Using any of the other HTTP methods.",
                        "UsingDynamic Functionslikecookiesandheaders.",
                        "TheSegment Config Optionsmanually specifies dynamic mode."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET(request:Request) {const{searchParams}=newURL(request.url)constid=searchParams.get('id')constres=awaitfetch(`https://data.mongodb-api.com/product/${id}`,{headers:{'Content-Type':'application/json','API-Key':process.env.DATA_API_KEY!,},})constproduct=awaitres.json()returnResponse.json({ product })}"
                },
                {
                    "type": "p",
                    "text": "Similarly, thePOSTmethod will cause the Route Handler to be evaluated dynamically."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionPOST() {constres=awaitfetch('https://data.mongodb-api.com/...',{method:'POST',headers:{'Content-Type':'application/json','API-Key':process.env.DATA_API_KEY!,},body:JSON.stringify({ time:newDate().toISOString() }),})constdata=awaitres.json()returnResponse.json(data)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Like API Routes, Route Handlers can be used for cases like handling form submissions. A new abstraction forhandling forms and mutationsthat integrates deeply with React is being worked on."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Resolution"
                },
                {
                    "type": "p",
                    "text": "You can consider aroutethe lowest level routing primitive."
                },
                {
                    "type": "list",
                    "items": [
                        "Theydo notparticipate in layouts or client-side navigations likepage.",
                        "Therecannotbe aroute.jsfile at the same route aspage.js."
                    ]
                },
                {
                    "type": "p",
                    "text": "Eachroute.jsorpage.jsfile takes over all HTTP verbs for that route."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {return<h1>Hello, Next.js!</h1>}// ❌ Conflict// `app/route.js`exportasyncfunctionPOST(request) {}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "p",
                    "text": "The following examples show how to combine Route Handlers with other Next.js APIs and features."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating Cached Data"
                },
                {
                    "type": "p",
                    "text": "You canrevalidate cached datausing thenext.revalidateoption:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET() {constres=awaitfetch('https://data.mongodb-api.com/...',{next:{ revalidate:60},// Revalidate every 60 seconds})constdata=awaitres.json()returnResponse.json(data)}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use therevalidatesegment config option:"
                },
                {
                    "type": "code",
                    "code": "exportconstrevalidate=60"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Functions"
                },
                {
                    "type": "p",
                    "text": "Route Handlers can be used with dynamic functions from Next.js, likecookiesandheaders."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Cookies"
                },
                {
                    "type": "p",
                    "text": "You can read or set cookies withcookiesfromnext/headers. This server function can be called directly in a Route Handler, or nested inside of another function."
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can return a newResponseusing theSet-Cookieheader."
                },
                {
                    "type": "code",
                    "code": "import{ cookies }from'next/headers'exportasyncfunctionGET(request:Request) {constcookieStore=cookies()consttoken=cookieStore.get('token')returnnewResponse('Hello, Next.js!',{status:200,headers:{'Set-Cookie':`token=${token.value}`},})}"
                },
                {
                    "type": "p",
                    "text": "You can also use the underlying Web APIs to read cookies from the request (NextRequest):"
                },
                {
                    "type": "code",
                    "code": "import{typeNextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {consttoken=request.cookies.get('token')}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Headers"
                },
                {
                    "type": "p",
                    "text": "You can read headers withheadersfromnext/headers. This server function can be called directly in a Route Handler, or nested inside of another function."
                },
                {
                    "type": "p",
                    "text": "Thisheadersinstance is read-only. To set headers, you need to return a newResponsewith newheaders."
                },
                {
                    "type": "code",
                    "code": "import{ headers }from'next/headers'exportasyncfunctionGET(request:Request) {constheadersList=headers()constreferer=headersList.get('referer')returnnewResponse('Hello, Next.js!',{status:200,headers:{ referer:referer },})}"
                },
                {
                    "type": "p",
                    "text": "You can also use the underlying Web APIs to read headers from the request (NextRequest):"
                },
                {
                    "type": "code",
                    "code": "import{typeNextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {constrequestHeaders=newHeaders(request.headers)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Redirects"
                },
                {
                    "type": "code",
                    "code": "import{ redirect }from'next/navigation'exportasyncfunctionGET(request:Request) {redirect('https://nextjs.org/')}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Route Segments"
                },
                {
                    "type": "p",
                    "text": "We recommend reading theDefining Routespage before continuing."
                },
                {
                    "type": "p",
                    "text": "Route Handlers can useDynamic Segmentsto create request handlers from dynamic data."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET(request:Request,{ params }:{ params:{ slug:string} }) {constslug=params.slug// 'a', 'b', or 'c'}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "URL Query Parameters"
                },
                {
                    "type": "p",
                    "text": "The request object passed to the Route Handler is aNextRequestinstance, which hassome additional convenience methods, including for more easily handling query parameters."
                },
                {
                    "type": "code",
                    "code": "import{typeNextRequest }from'next/server'exportfunctionGET(request:NextRequest) {constsearchParams=request.nextUrl.searchParamsconstquery=searchParams.get('query')// query is \"hello\" for /api/search?query=hello}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Streaming"
                },
                {
                    "type": "p",
                    "text": "Streaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI, for AI-generated content. Learn more about theAI SDK."
                },
                {
                    "type": "code",
                    "code": "importOpenAIfrom'openai'import{ OpenAIStream,StreamingTextResponse }from'ai'constopenai=newOpenAI({apiKey:process.env.OPENAI_API_KEY,})exportconstruntime='edge'exportasyncfunctionPOST(req:Request) {const{messages}=awaitreq.json()constresponse=awaitopenai.chat.completions.create({model:'gpt-3.5-turbo',stream:true,messages,})conststream=OpenAIStream(response)returnnewStreamingTextResponse(stream)}"
                },
                {
                    "type": "p",
                    "text": "These abstractions use the Web APIs to create a stream. You can also use the underlying Web APIs directly."
                },
                {
                    "type": "code",
                    "code": "// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_streamfunctioniteratorToStream(iterator:any) {returnnewReadableStream({asyncpull(controller) {const{value,done}=awaititerator.next()if(done) {controller.close()}else{controller.enqueue(value)}},})}functionsleep(time:number) {returnnewPromise((resolve)=>{setTimeout(resolve,time)})}constencoder=newTextEncoder()asyncfunction*makeIterator() {yieldencoder.encode('<p>One</p>')awaitsleep(200)yieldencoder.encode('<p>Two</p>')awaitsleep(200)yieldencoder.encode('<p>Three</p>')}exportasyncfunctionGET() {constiterator=makeIterator()conststream=iteratorToStream(iterator)returnnewResponse(stream)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Request Body"
                },
                {
                    "type": "p",
                    "text": "You can read theRequestbody using the standard Web API methods:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionPOST(request:Request) {constres=awaitrequest.json()returnResponse.json({ res })}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Request Body FormData"
                },
                {
                    "type": "p",
                    "text": "You can read theFormDatausing therequest.formData()function:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionPOST(request:Request) {constformData=awaitrequest.formData()constname=formData.get('name')constemail=formData.get('email')returnResponse.json({ name,email })}"
                },
                {
                    "type": "p",
                    "text": "SinceformDatadata are all strings, you may want to usezod-form-datato validate the request and retrieve data in the format you prefer (e.g.number)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CORS"
                },
                {
                    "type": "p",
                    "text": "You can set CORS headers for a specific Route Handler using the standard Web API methods:"
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='force-dynamic'// defaults to autoexportasyncfunctionGET(request:Request) {returnnewResponse('Hello, Next.js!',{status:200,headers:{'Access-Control-Allow-Origin':'*','Access-Control-Allow-Methods':'GET, POST, PUT, DELETE, OPTIONS','Access-Control-Allow-Headers':'Content-Type, Authorization',},})}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "To add CORS headers to multiple Route Handlers, you can useMiddlewareor thenext.config.jsfile.",
                        "Alternatively, see ourCORS examplepackage."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Webhooks"
                },
                {
                    "type": "p",
                    "text": "You can use a Route Handler to receive webhooks from third-party services:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionPOST(request:Request) {try{consttext=awaitrequest.text()// Process the webhook payload}catch(error) {returnnewResponse(`Webhook error:${error.message}`,{status:400,})}returnnewResponse('Success!',{status:200,})}"
                },
                {
                    "type": "p",
                    "text": "Notably, unlike API Routes with the Pages Router, you do not need to usebodyParserto use any additional configuration."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Edge and Node.js Runtimes"
                },
                {
                    "type": "p",
                    "text": "Route Handlers have an isomorphic Web API to support both Edge and Node.js runtimes seamlessly, including support for streaming. Since Route Handlers use the sameroute segment configurationas Pages and Layouts, they support long-awaited features like general-purposestatically regeneratedRoute Handlers."
                },
                {
                    "type": "p",
                    "text": "You can use theruntimesegment config option to specify the runtime:"
                },
                {
                    "type": "code",
                    "code": "exportconstruntime='edge'// 'nodejs' is the default"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Non-UI Responses"
                },
                {
                    "type": "p",
                    "text": "You can use Route Handlers to return non-UI content. Note thatsitemap.xml,robots.txt,app icons, andopen graph imagesall have built-in support."
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='force-dynamic'// defaults to autoexportasyncfunctionGET() {returnnewResponse(`<?xml version=\"1.0\" encoding=\"UTF-8\" ?><rss version=\"2.0\"><channel><title>Next.js Documentation</title><link>https://nextjs.org/docs</link><description>The React Framework for the Web</description></channel></rss>`,{headers:{'Content-Type':'text/xml',},})}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Segment Config Options"
                },
                {
                    "type": "p",
                    "text": "Route Handlers use the sameroute segment configurationas pages and layouts."
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='auto'exportconstdynamicParams=trueexportconstrevalidate=falseexportconstfetchCache='auto'exportconstruntime='nodejs'exportconstpreferredRegion='auto'"
                },
                {
                    "type": "p",
                    "text": "See theAPI referencefor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "route.js"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/router-handlers",
            "title": "Routing: Route Handlers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Route Handlers"
                },
                {
                    "type": "p",
                    "text": "Route Handlers allow you to create custom request handlers for a given route using the WebRequestandResponseAPIs."
                },
                {
                    "type": "p",
                    "text": "Good to know: Route Handlers are only available inside theappdirectory. They are the equivalent ofAPI Routesinside thepagesdirectory meaning youdo notneed to use API Routes and Route Handlers together."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "Route Handlers are defined in aroute.js|tsfileinside theappdirectory:"
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='force-dynamic'// defaults to autoexportasyncfunctionGET(request:Request) {}"
                },
                {
                    "type": "p",
                    "text": "Route Handlers can be nested inside theappdirectory, similar topage.jsandlayout.js. But therecannotbe aroute.jsfile at the same route segment level aspage.js."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Supported HTTP Methods"
                },
                {
                    "type": "p",
                    "text": "The followingHTTP methodsare supported:GET,POST,PUT,PATCH,DELETE,HEAD, andOPTIONS. If an unsupported method is called, Next.js will return a405 Method Not Allowedresponse."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "ExtendedNextRequestandNextResponseAPIs"
                },
                {
                    "type": "p",
                    "text": "In addition to supporting nativeRequestandResponse. Next.js extends them withNextRequestandNextResponseto provide convenient helpers for advanced use cases."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Behavior"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caching"
                },
                {
                    "type": "p",
                    "text": "Route Handlers are cached by default when using theGETmethod with theResponseobject."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET() {constres=awaitfetch('https://data.mongodb-api.com/...',{headers:{'Content-Type':'application/json','API-Key':process.env.DATA_API_KEY,},})constdata=awaitres.json()returnResponse.json({ data })}"
                },
                {
                    "type": "p",
                    "text": "TypeScript Warning:Response.json()is only valid from TypeScript 5.2. If you use a lower TypeScript version, you can useNextResponse.json()for typed responses instead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Opting out of caching"
                },
                {
                    "type": "p",
                    "text": "You can opt out of caching by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using theRequestobject with theGETmethod.",
                        "Using any of the other HTTP methods.",
                        "UsingDynamic Functionslikecookiesandheaders.",
                        "TheSegment Config Optionsmanually specifies dynamic mode."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET(request:Request) {const{searchParams}=newURL(request.url)constid=searchParams.get('id')constres=awaitfetch(`https://data.mongodb-api.com/product/${id}`,{headers:{'Content-Type':'application/json','API-Key':process.env.DATA_API_KEY!,},})constproduct=awaitres.json()returnResponse.json({ product })}"
                },
                {
                    "type": "p",
                    "text": "Similarly, thePOSTmethod will cause the Route Handler to be evaluated dynamically."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionPOST() {constres=awaitfetch('https://data.mongodb-api.com/...',{method:'POST',headers:{'Content-Type':'application/json','API-Key':process.env.DATA_API_KEY!,},body:JSON.stringify({ time:newDate().toISOString() }),})constdata=awaitres.json()returnResponse.json(data)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: Like API Routes, Route Handlers can be used for cases like handling form submissions. A new abstraction forhandling forms and mutationsthat integrates deeply with React is being worked on."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Resolution"
                },
                {
                    "type": "p",
                    "text": "You can consider aroutethe lowest level routing primitive."
                },
                {
                    "type": "list",
                    "items": [
                        "Theydo notparticipate in layouts or client-side navigations likepage.",
                        "Therecannotbe aroute.jsfile at the same route aspage.js."
                    ]
                },
                {
                    "type": "p",
                    "text": "Eachroute.jsorpage.jsfile takes over all HTTP verbs for that route."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {return<h1>Hello, Next.js!</h1>}// ❌ Conflict// `app/route.js`exportasyncfunctionPOST(request) {}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "p",
                    "text": "The following examples show how to combine Route Handlers with other Next.js APIs and features."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Revalidating Cached Data"
                },
                {
                    "type": "p",
                    "text": "You canrevalidate cached datausing thenext.revalidateoption:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET() {constres=awaitfetch('https://data.mongodb-api.com/...',{next:{ revalidate:60},// Revalidate every 60 seconds})constdata=awaitres.json()returnResponse.json(data)}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use therevalidatesegment config option:"
                },
                {
                    "type": "code",
                    "code": "exportconstrevalidate=60"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Functions"
                },
                {
                    "type": "p",
                    "text": "Route Handlers can be used with dynamic functions from Next.js, likecookiesandheaders."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Cookies"
                },
                {
                    "type": "p",
                    "text": "You can read or set cookies withcookiesfromnext/headers. This server function can be called directly in a Route Handler, or nested inside of another function."
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can return a newResponseusing theSet-Cookieheader."
                },
                {
                    "type": "code",
                    "code": "import{ cookies }from'next/headers'exportasyncfunctionGET(request:Request) {constcookieStore=cookies()consttoken=cookieStore.get('token')returnnewResponse('Hello, Next.js!',{status:200,headers:{'Set-Cookie':`token=${token.value}`},})}"
                },
                {
                    "type": "p",
                    "text": "You can also use the underlying Web APIs to read cookies from the request (NextRequest):"
                },
                {
                    "type": "code",
                    "code": "import{typeNextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {consttoken=request.cookies.get('token')}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Headers"
                },
                {
                    "type": "p",
                    "text": "You can read headers withheadersfromnext/headers. This server function can be called directly in a Route Handler, or nested inside of another function."
                },
                {
                    "type": "p",
                    "text": "Thisheadersinstance is read-only. To set headers, you need to return a newResponsewith newheaders."
                },
                {
                    "type": "code",
                    "code": "import{ headers }from'next/headers'exportasyncfunctionGET(request:Request) {constheadersList=headers()constreferer=headersList.get('referer')returnnewResponse('Hello, Next.js!',{status:200,headers:{ referer:referer },})}"
                },
                {
                    "type": "p",
                    "text": "You can also use the underlying Web APIs to read headers from the request (NextRequest):"
                },
                {
                    "type": "code",
                    "code": "import{typeNextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {constrequestHeaders=newHeaders(request.headers)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Redirects"
                },
                {
                    "type": "code",
                    "code": "import{ redirect }from'next/navigation'exportasyncfunctionGET(request:Request) {redirect('https://nextjs.org/')}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Route Segments"
                },
                {
                    "type": "p",
                    "text": "We recommend reading theDefining Routespage before continuing."
                },
                {
                    "type": "p",
                    "text": "Route Handlers can useDynamic Segmentsto create request handlers from dynamic data."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET(request:Request,{ params }:{ params:{ slug:string} }) {constslug=params.slug// 'a', 'b', or 'c'}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "URL Query Parameters"
                },
                {
                    "type": "p",
                    "text": "The request object passed to the Route Handler is aNextRequestinstance, which hassome additional convenience methods, including for more easily handling query parameters."
                },
                {
                    "type": "code",
                    "code": "import{typeNextRequest }from'next/server'exportfunctionGET(request:NextRequest) {constsearchParams=request.nextUrl.searchParamsconstquery=searchParams.get('query')// query is \"hello\" for /api/search?query=hello}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Streaming"
                },
                {
                    "type": "p",
                    "text": "Streaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI, for AI-generated content. Learn more about theAI SDK."
                },
                {
                    "type": "code",
                    "code": "importOpenAIfrom'openai'import{ OpenAIStream,StreamingTextResponse }from'ai'constopenai=newOpenAI({apiKey:process.env.OPENAI_API_KEY,})exportconstruntime='edge'exportasyncfunctionPOST(req:Request) {const{messages}=awaitreq.json()constresponse=awaitopenai.chat.completions.create({model:'gpt-3.5-turbo',stream:true,messages,})conststream=OpenAIStream(response)returnnewStreamingTextResponse(stream)}"
                },
                {
                    "type": "p",
                    "text": "These abstractions use the Web APIs to create a stream. You can also use the underlying Web APIs directly."
                },
                {
                    "type": "code",
                    "code": "// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_streamfunctioniteratorToStream(iterator:any) {returnnewReadableStream({asyncpull(controller) {const{value,done}=awaititerator.next()if(done) {controller.close()}else{controller.enqueue(value)}},})}functionsleep(time:number) {returnnewPromise((resolve)=>{setTimeout(resolve,time)})}constencoder=newTextEncoder()asyncfunction*makeIterator() {yieldencoder.encode('<p>One</p>')awaitsleep(200)yieldencoder.encode('<p>Two</p>')awaitsleep(200)yieldencoder.encode('<p>Three</p>')}exportasyncfunctionGET() {constiterator=makeIterator()conststream=iteratorToStream(iterator)returnnewResponse(stream)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Request Body"
                },
                {
                    "type": "p",
                    "text": "You can read theRequestbody using the standard Web API methods:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionPOST(request:Request) {constres=awaitrequest.json()returnResponse.json({ res })}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Request Body FormData"
                },
                {
                    "type": "p",
                    "text": "You can read theFormDatausing therequest.formData()function:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionPOST(request:Request) {constformData=awaitrequest.formData()constname=formData.get('name')constemail=formData.get('email')returnResponse.json({ name,email })}"
                },
                {
                    "type": "p",
                    "text": "SinceformDatadata are all strings, you may want to usezod-form-datato validate the request and retrieve data in the format you prefer (e.g.number)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CORS"
                },
                {
                    "type": "p",
                    "text": "You can set CORS headers for a specific Route Handler using the standard Web API methods:"
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='force-dynamic'// defaults to autoexportasyncfunctionGET(request:Request) {returnnewResponse('Hello, Next.js!',{status:200,headers:{'Access-Control-Allow-Origin':'*','Access-Control-Allow-Methods':'GET, POST, PUT, DELETE, OPTIONS','Access-Control-Allow-Headers':'Content-Type, Authorization',},})}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "To add CORS headers to multiple Route Handlers, you can useMiddlewareor thenext.config.jsfile.",
                        "Alternatively, see ourCORS examplepackage."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Webhooks"
                },
                {
                    "type": "p",
                    "text": "You can use a Route Handler to receive webhooks from third-party services:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionPOST(request:Request) {try{consttext=awaitrequest.text()// Process the webhook payload}catch(error) {returnnewResponse(`Webhook error:${error.message}`,{status:400,})}returnnewResponse('Success!',{status:200,})}"
                },
                {
                    "type": "p",
                    "text": "Notably, unlike API Routes with the Pages Router, you do not need to usebodyParserto use any additional configuration."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Edge and Node.js Runtimes"
                },
                {
                    "type": "p",
                    "text": "Route Handlers have an isomorphic Web API to support both Edge and Node.js runtimes seamlessly, including support for streaming. Since Route Handlers use the sameroute segment configurationas Pages and Layouts, they support long-awaited features like general-purposestatically regeneratedRoute Handlers."
                },
                {
                    "type": "p",
                    "text": "You can use theruntimesegment config option to specify the runtime:"
                },
                {
                    "type": "code",
                    "code": "exportconstruntime='edge'// 'nodejs' is the default"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Non-UI Responses"
                },
                {
                    "type": "p",
                    "text": "You can use Route Handlers to return non-UI content. Note thatsitemap.xml,robots.txt,app icons, andopen graph imagesall have built-in support."
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='force-dynamic'// defaults to autoexportasyncfunctionGET() {returnnewResponse(`<?xml version=\"1.0\" encoding=\"UTF-8\" ?><rss version=\"2.0\"><channel><title>Next.js Documentation</title><link>https://nextjs.org/docs</link><description>The React Framework for the Web</description></channel></rss>`,{headers:{'Content-Type':'text/xml',},})}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Segment Config Options"
                },
                {
                    "type": "p",
                    "text": "Route Handlers use the sameroute segment configurationas pages and layouts."
                },
                {
                    "type": "code",
                    "code": "exportconstdynamic='auto'exportconstdynamicParams=trueexportconstrevalidate=falseexportconstfetchCache='auto'exportconstruntime='nodejs'exportconstpreferredRegion='auto'"
                },
                {
                    "type": "p",
                    "text": "See theAPI referencefor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "route.js"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling",
            "title": "Building Your Application: Styling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Styling"
                },
                {
                    "type": "p",
                    "text": "Next.js supports different ways of styling your application, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Global CSS: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.",
                        "CSS Modules: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.",
                        "Tailwind CSS: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.",
                        "Sass: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.",
                        "CSS-in-JS: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about each approach by exploring their respective documentation:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CSS Modules"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Tailwind CSS"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CSS-in-JS"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sass"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling/css-in-js",
            "title": "Styling: CSS-in-JS | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "CSS-in-JS"
                },
                {
                    "type": "p",
                    "text": "Warning:CSS-in-JS libraries which require runtime JavaScript are not currently supported in Server Components. Using CSS-in-JS with newer React features like Server Components and Streaming requires library authors to support the latest version of React, includingconcurrent rendering."
                },
                {
                    "type": "p",
                    "text": "We're working with the React team on upstream APIs to handle CSS and JavaScript assets with support for React Server Components and streaming architecture."
                },
                {
                    "type": "p",
                    "text": "The following libraries are supported in Client Components in theappdirectory (alphabetical):"
                },
                {
                    "type": "list",
                    "items": [
                        "chakra-ui",
                        "kuma-ui",
                        "@mui/material",
                        "@mui/joy",
                        "pandacss",
                        "styled-jsx",
                        "styled-components",
                        "stylex",
                        "tamagui",
                        "tss-react",
                        "vanilla-extract"
                    ]
                },
                {
                    "type": "p",
                    "text": "The following are currently working on support:"
                },
                {
                    "type": "list",
                    "items": [
                        "emotion"
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: We're testing out different CSS-in-JS libraries and we'll be adding more examples for libraries that support React 18 features and/or theappdirectory."
                },
                {
                    "type": "p",
                    "text": "If you want to style Server Components, we recommend usingCSS Modulesor other solutions that output CSS files, like PostCSS orTailwind CSS."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configuring CSS-in-JS inapp"
                },
                {
                    "type": "p",
                    "text": "Configuring CSS-in-JS is a three-step opt-in process that involves:"
                },
                {
                    "type": "list",
                    "items": [
                        "Astyle registryto collect all CSS rules in a render.",
                        "The newuseServerInsertedHTMLhook to inject rules before any content that might use them.",
                        "A Client Component that wraps your app with the style registry during initial server-side rendering."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "styled-jsx"
                },
                {
                    "type": "p",
                    "text": "Usingstyled-jsxin Client Components requires usingv5.1.0. First, create a new registry:"
                },
                {
                    "type": "code",
                    "code": "'use client'importReact,{ useState }from'react'import{ useServerInsertedHTML }from'next/navigation'import{ StyleRegistry,createStyleRegistry }from'styled-jsx'exportdefaultfunctionStyledJsxRegistry({children,}:{children:React.ReactNode}) {// Only create stylesheet once with lazy initial state// x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-stateconst[jsxStyleRegistry]=useState(()=>createStyleRegistry())useServerInsertedHTML(()=>{conststyles=jsxStyleRegistry.styles()jsxStyleRegistry.flush()return<>{styles}</>})return<StyleRegistryregistry={jsxStyleRegistry}>{children}</StyleRegistry>}"
                },
                {
                    "type": "p",
                    "text": "Then, wrap yourroot layoutwith the registry:"
                },
                {
                    "type": "code",
                    "code": "importStyledJsxRegistryfrom'./registry'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body><StyledJsxRegistry>{children}</StyledJsxRegistry></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "View an example here."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Styled Components"
                },
                {
                    "type": "p",
                    "text": "Below is an example of how to configurestyled-components@6or newer:"
                },
                {
                    "type": "p",
                    "text": "First, enable styled-components innext.config.js."
                },
                {
                    "type": "code",
                    "code": "module.exports={compiler:{styledComponents:true,},}"
                },
                {
                    "type": "p",
                    "text": "Then, use thestyled-componentsAPI to create a global registry component to collect all CSS style rules generated during a render, and a function to return those rules. Then use theuseServerInsertedHTMLhook to inject the styles collected in the registry into the<head>HTML tag in the root layout."
                },
                {
                    "type": "code",
                    "code": "'use client'importReact,{ useState }from'react'import{ useServerInsertedHTML }from'next/navigation'import{ ServerStyleSheet,StyleSheetManager }from'styled-components'exportdefaultfunctionStyledComponentsRegistry({children,}:{children:React.ReactNode}) {// Only create stylesheet once with lazy initial state// x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-stateconst[styledComponentsStyleSheet]=useState(()=>newServerStyleSheet())useServerInsertedHTML(()=>{conststyles=styledComponentsStyleSheet.getStyleElement()styledComponentsStyleSheet.instance.clearTag()return<>{styles}</>})if(typeofwindow!=='undefined')return<>{children}</>return(<StyleSheetManagersheet={styledComponentsStyleSheet.instance}>{children}</StyleSheetManager>)}"
                },
                {
                    "type": "p",
                    "text": "Wrap thechildrenof the root layout with the style registry component:"
                },
                {
                    "type": "code",
                    "code": "importStyledComponentsRegistryfrom'./lib/registry'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body><StyledComponentsRegistry>{children}</StyledComponentsRegistry></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "View an example here."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "During server rendering, styles will be extracted to a global registry and flushed to the<head>of your HTML. This ensures the style rules are placed before any content that might use them. In the future, we may use an upcoming React feature to determine where to inject the styles.",
                        "During streaming, styles from each chunk will be collected and appended to existing styles. After client-side hydration is complete,styled-componentswill take over as usual and inject any further dynamic styles.",
                        "We specifically use a Client Component at the top level of the tree for the style registry because it's more efficient to extract CSS rules this way. It avoids re-generating styles on subsequent server renders, and prevents them from being sent in the Server Component payload.",
                        "For advanced use cases where you need to configure individual properties of styled-components compilation, you can read ourNext.js styled-components API referenceto learn more."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling/css-modules",
            "title": "Styling: CSS Modules | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "CSS Modules and Global Styles"
                },
                {
                    "type": "p",
                    "text": "Next.js supports different types of stylesheets, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "CSS Modules",
                        "Global Styles",
                        "External Stylesheets"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "CSS Modules"
                },
                {
                    "type": "p",
                    "text": "Next.js has built-in support for CSS Modules using the.module.cssextension."
                },
                {
                    "type": "p",
                    "text": "CSS Modules locally scope CSS by automatically creating a unique class name. This allows you to use the same class name in different files without worrying about collisions. This behavior makes CSS Modules the ideal way to include component-level CSS."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "CSS Modules can be imported into any file inside theappdirectory:"
                },
                {
                    "type": "code",
                    "code": "importstylesfrom'./styles.module.css'exportdefaultfunctionDashboardLayout({children,}:{children:React.ReactNode}) {return<sectionclassName={styles.dashboard}>{children}</section>}"
                },
                {
                    "type": "code",
                    "code": ".dashboard{padding:24px;}"
                },
                {
                    "type": "p",
                    "text": "CSS Modules areonly enabled for files with the.module.cssand.module.sassextensions."
                },
                {
                    "type": "p",
                    "text": "In production, all CSS Module files will be automatically concatenated intomany minified and code-split.cssfiles.\nThese.cssfiles represent hot execution paths in your application, ensuring the minimal amount of CSS is loaded for your application to paint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Global Styles"
                },
                {
                    "type": "p",
                    "text": "Global styles can be imported into any layout, page, or component inside theappdirectory."
                },
                {
                    "type": "p",
                    "text": "Good to know: This is different from thepagesdirectory, where you can only import global styles inside the_app.jsfile."
                },
                {
                    "type": "p",
                    "text": "For example, consider a stylesheet namedapp/global.css:"
                },
                {
                    "type": "code",
                    "code": "body{padding:20px20px60px;max-width:680px;margin:0 auto;}"
                },
                {
                    "type": "p",
                    "text": "Inside the root layout (app/layout.js), import theglobal.cssstylesheet to apply the styles to every route in your application:"
                },
                {
                    "type": "code",
                    "code": "// These styles apply to every route in the applicationimport'./global.css'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "External Stylesheets"
                },
                {
                    "type": "p",
                    "text": "Stylesheets published by external packages can be imported anywhere in theappdirectory, including colocated components:"
                },
                {
                    "type": "code",
                    "code": "import'bootstrap/dist/css/bootstrap.css'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><bodyclassName=\"container\">{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: External stylesheets must be directly imported from an npm package or downloaded and colocated with your codebase. You cannot use<link rel=\"stylesheet\" />."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Ordering and Merging"
                },
                {
                    "type": "p",
                    "text": "Next.js optimizes CSS during production builds by automatically chunking (merging) stylesheets. The CSS order is determined by the order in which you import the stylesheets into your application code."
                },
                {
                    "type": "p",
                    "text": "For example,base-button.module.csswill be ordered beforepage.module.csssince<BaseButton>is imported first in<Page>:"
                },
                {
                    "type": "code",
                    "code": "importstylesfrom'./base-button.module.css'exportfunctionBaseButton() {return<buttonclassName={styles.primary} />}"
                },
                {
                    "type": "code",
                    "code": "import{ BaseButton }from'./base-button'importstylesfrom'./page.module.css'exportfunctionPage() {return<BaseButtonclassName={styles.primary} />}"
                },
                {
                    "type": "p",
                    "text": "To maintain a predictable order, we recommend the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Only import a CSS file in a single JS/TS file.If using global class names, import the global styles in the same file in the order you want them to be applied.",
                        "If using global class names, import the global styles in the same file in the order you want them to be applied.",
                        "Prefer CSS Modules over global styles.Use a consistent naming convention for your CSS modules. For example, using<name>.module.cssover<name>.tsx.",
                        "Use a consistent naming convention for your CSS modules. For example, using<name>.module.cssover<name>.tsx.",
                        "Extract shared styles into a separate shared component.",
                        "If usingTailwind, import the stylesheet at the top of the file, preferably in theRoot Layout."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "If using global class names, import the global styles in the same file in the order you want them to be applied."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use a consistent naming convention for your CSS modules. For example, using<name>.module.cssover<name>.tsx."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:CSS ordering behaves differently in development mode, always ensure to check preview deployments to verify the final CSS order in your production build."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Additional Features"
                },
                {
                    "type": "p",
                    "text": "Next.js includes additional features to improve the authoring experience of adding styles:"
                },
                {
                    "type": "list",
                    "items": [
                        "When running locally withnext dev, local stylesheets (either global or CSS modules) will take advantage ofFast Refreshto instantly reflect changes as edits are saved.",
                        "When building for production withnext build, CSS files will be bundled into fewer minified.cssfiles to reduce the number of network requests needed to retrieve styles.",
                        "If you disable JavaScript, styles will still be loaded in the production build (next start). However, JavaScript is still required fornext devto enableFast Refresh."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling/sass",
            "title": "Styling: Sass | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Sass"
                },
                {
                    "type": "p",
                    "text": "Next.js has built-in support for integrating with Sass after the package is installed using both the.scssand.sassextensions. You can use component-level Sass via CSS Modules and the.module.scssor.module.sassextension."
                },
                {
                    "type": "p",
                    "text": "First, installsass:"
                },
                {
                    "type": "code",
                    "code": "npminstall--save-devsass"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "p",
                    "text": "Sass supportstwo different syntaxes, each with their own extension.\nThe.scssextension requires you use theSCSS syntax,\nwhile the.sassextension requires you use theIndented Syntax (\"Sass\")."
                },
                {
                    "type": "p",
                    "text": "If you're not sure which to choose, start with the.scssextension which is a superset of CSS, and doesn't require you learn the\nIndented Syntax (\"Sass\")."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing Sass Options"
                },
                {
                    "type": "p",
                    "text": "If you want to configure the Sass compiler, usesassOptionsinnext.config.js."
                },
                {
                    "type": "code",
                    "code": "constpath=require('path')module.exports={sassOptions:{includePaths:[path.join(__dirname,'styles')],},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sass Variables"
                },
                {
                    "type": "p",
                    "text": "Next.js supports Sass variables exported from CSS Module files."
                },
                {
                    "type": "p",
                    "text": "For example, using the exportedprimaryColorSass variable:"
                },
                {
                    "type": "code",
                    "code": "$primary-color:#64ff00;:export {primaryColor:$primary-color;}"
                },
                {
                    "type": "code",
                    "code": "// maps to root `/` URLimportvariablesfrom'./variables.module.scss'exportdefaultfunctionPage() {return<h1style={{ color:variables.primaryColor }}>Hello, Next.js!</h1>}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling/tailwind-css",
            "title": "Styling: Tailwind CSS | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSSis a utility-first CSS framework that works exceptionally well with Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Installing Tailwind"
                },
                {
                    "type": "p",
                    "text": "Install the Tailwind CSS packages and run theinitcommand to generate both thetailwind.config.jsandpostcss.config.jsfiles:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dtailwindcsspostcssautoprefixernpxtailwindcssinit-p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configuring Tailwind"
                },
                {
                    "type": "p",
                    "text": "Insidetailwind.config.js, add paths to the files that will use Tailwind CSS class names:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./app/**/*.{js,ts,jsx,tsx,mdx}',// Note the addition of the `app` directory.'./pages/**/*.{js,ts,jsx,tsx,mdx}','./components/**/*.{js,ts,jsx,tsx,mdx}',// Or if using `src` directory:'./src/**/*.{js,ts,jsx,tsx,mdx}',],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "p",
                    "text": "You do not need to modifypostcss.config.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Importing Styles"
                },
                {
                    "type": "p",
                    "text": "Add theTailwind CSS directivesthat Tailwind will use to inject its generated styles to aGlobal Stylesheetin your application, for example:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "p",
                    "text": "Inside theroot layout(app/layout.tsx), import theglobals.cssstylesheet to apply the styles to every route in your application."
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'// These styles apply to every route in the applicationimport'./globals.css'exportconstmetadata:Metadata={title:'Create Next App',description:'Generated by create next app',}exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Classes"
                },
                {
                    "type": "p",
                    "text": "After installing Tailwind CSS and adding the global styles, you can use Tailwind's utility classes in your application."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {return<h1className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage with Turbopack"
                },
                {
                    "type": "p",
                    "text": "As of Next.js 13.1, Tailwind CSS and PostCSS are supported withTurbopack."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing",
            "title": "Building Your Application: Testing | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Testing"
                },
                {
                    "type": "p",
                    "text": "In React and Next.js, there are a few different types of tests you can write, each with its own purpose and use cases. This page provides an overview of types and commonly used tools you can use to test your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Types of tests"
                },
                {
                    "type": "list",
                    "items": [
                        "Unit testinginvolves testing individual units (or blocks of code) in isolation. In React, a unit can be a single function, hook, or component.Component testingis a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events.Integration testinginvolves testing how multiple units work together. This can be a combination of components, hooks, and functions.",
                        "Component testingis a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events.",
                        "Integration testinginvolves testing how multiple units work together. This can be a combination of components, hooks, and functions.",
                        "End-to-End (E2E) Testinginvolves testing user flows in an environment that simulates real user scenarios, like the browser. This means testing specific tasks (e.g. signup flow) in a production-like environment.",
                        "Snapshot testinginvolves capturing the rendered output of a component and saving it to a snapshot file. When tests run, the current rendered output of the component is compared against the saved snapshot. Changes in the snapshot are used to indicate unexpected changes in behavior."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Component testingis a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events.",
                        "Integration testinginvolves testing how multiple units work together. This can be a combination of components, hooks, and functions."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Async Server Components"
                },
                {
                    "type": "p",
                    "text": "SinceasyncServer Components are new to the React ecosystem, some tools do not fully support them. In the meantime, we recommend usingEnd-to-End TestingoverUnit Testingforasynccomponents."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Guides"
                },
                {
                    "type": "p",
                    "text": "See the guides below to learn how to set up Next.js with these commonly used testing tools:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Vitest"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Jest"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Playwright"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Cypress"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing/cypress",
            "title": "Testing: Cypress | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Setting up Cypress with Next.js"
                },
                {
                    "type": "p",
                    "text": "Cypressis a test runner used forEnd-to-End (E2E)andComponent Testing. This page will show you how to set up Cypress with Next.js and write your first tests."
                },
                {
                    "type": "p",
                    "text": "Warning:"
                },
                {
                    "type": "list",
                    "items": [
                        "Forcomponent testing, Cypress currently does not supportNext.js version 14andasyncServer Components. These issues are being tracked. For now, component testing works with Next.js version 13, and we recommend E2E testing forasyncServer Components.",
                        "Cypress currently does not supportTypeScript version 5withmoduleResolution:\"bundler\". This issue is being tracked."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Quickstart"
                },
                {
                    "type": "p",
                    "text": "You can usecreate-next-appwith thewith-cypress exampleto quickly get started."
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest--examplewith-cypresswith-cypress-app"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Manual setup"
                },
                {
                    "type": "p",
                    "text": "To manually set up Cypress, installcypressas a dev dependency:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dcypress# oryarnadd-Dcypress# orpnpminstall-Dcypress"
                },
                {
                    "type": "p",
                    "text": "Add the Cypressopencommand to thepackage.jsonscripts field:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\",\"lint\":\"next lint\",\"cypress:open\":\"cypress open\"}}"
                },
                {
                    "type": "p",
                    "text": "Run Cypress for the first time to open the Cypress testing suite:"
                },
                {
                    "type": "code",
                    "code": "npmruncypress:open"
                },
                {
                    "type": "p",
                    "text": "You can choose to configureE2E Testingand/orComponent Testing. Selecting any of these options will automatically create acypress.config.jsfile and acypressfolder in your project."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating your first Cypress E2E test"
                },
                {
                    "type": "p",
                    "text": "Ensure yourcypress.config.jsfile has the following configuration:"
                },
                {
                    "type": "code",
                    "code": "import{ defineConfig }from'cypress'exportdefaultdefineConfig({e2e:{setupNodeEvents(on,config) {},},})"
                },
                {
                    "type": "code",
                    "code": "const{defineConfig}=require('cypress')module.exports=defineConfig({e2e:{setupNodeEvents(on,config) {},},})"
                },
                {
                    "type": "p",
                    "text": "Then, create two new Next.js files:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>Home</h1><Linkhref=\"/about\">About</Link></div>)}"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>About</h1><Linkhref=\"/\">Home</Link></div>)}"
                },
                {
                    "type": "p",
                    "text": "Add a test to check your navigation is working correctly:"
                },
                {
                    "type": "code",
                    "code": "describe('Navigation',()=>{it('should navigate to the about page',()=>{// Start from the index pagecy.visit('http://localhost:3000/')// Find a link with an href attribute containing \"about\" and click itcy.get('a[href*=\"about\"]').click()// The new url should include \"/about\"cy.url().should('include','/about')// The new page should contain an h1 with \"About\"cy.get('h1').contains('About')})})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Running E2E Tests"
                },
                {
                    "type": "p",
                    "text": "Cypress will simulate a user navigating your application, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave."
                },
                {
                    "type": "p",
                    "text": "Runnpm run build && npm run startto build your Next.js application, then runnpm run cypress:openin another terminal window to start Cypress and run your E2E testing suite."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "You can usecy.visit(\"/\")instead ofcy.visit(\"http://localhost:3000/\")by addingbaseUrl: 'http://localhost:3000'to thecypress.config.jsconfiguration file.",
                        "Alternatively, you can install thestart-server-and-testpackage to run the Next.js production server in conjunction with Cypress. After installation, add\"test\": \"start-server-and-test start http://localhost:3000 cypress\"to yourpackage.jsonscripts field. Remember to rebuild your application after new changes."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating your first Cypress component test"
                },
                {
                    "type": "p",
                    "text": "Component tests build and mount a specific component without having to bundle your whole application or start a server."
                },
                {
                    "type": "p",
                    "text": "SelectComponent Testingin the Cypress app, then selectNext.jsas your front-end framework. Acypress/componentfolder will be created in your project, and acypress.config.jsfile will be updated to enable component testing."
                },
                {
                    "type": "p",
                    "text": "Ensure yourcypress.config.jsfile has the following configuration:"
                },
                {
                    "type": "code",
                    "code": "import{ defineConfig }from'cypress'exportdefaultdefineConfig({component:{devServer:{framework:'next',bundler:'webpack',},},})"
                },
                {
                    "type": "code",
                    "code": "const{defineConfig}=require('cypress')module.exports=defineConfig({component:{devServer:{framework:'next',bundler:'webpack',},},})"
                },
                {
                    "type": "p",
                    "text": "Assuming the same components from the previous section, add a test to validate a component is rendering the expected output:"
                },
                {
                    "type": "code",
                    "code": "importPagefrom'../../app/page'describe('<Page />',()=>{it('should render and display expected content',()=>{// Mount the Reactcomponentfor the Home pagecy.mount(<Page/>)// The new page should contain an h1 with \"Home\"cy.get('h1').contains('Home')// Validate that a link with the expected URL is present// Following the link is better suited to an E2E testcy.get('a[href=\"/about\"]').should('be.visible')})})"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Cypress currently doesn't support component testing forasyncServer Components. We recommend using E2E testing.",
                        "Since component tests do not require a Next.js server, features like<Image />that rely on a server being available may not function out-of-the-box."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Running Component Tests"
                },
                {
                    "type": "p",
                    "text": "Runnpm run cypress:openin your terminal to start Cypress and run your component testing suite."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Continuous Integration (CI)"
                },
                {
                    "type": "p",
                    "text": "In addition to interactive testing, you can also run Cypress headlessly using thecypress runcommand, which is better suited for CI environments:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{//...\"e2e\":\"start-server-and-test dev http://localhost:3000 \\\"cypress open --e2e\\\"\",\"e2e:headless\":\"start-server-and-test dev http://localhost:3000 \\\"cypress run --e2e\\\"\",\"component\":\"cypress open --component\",\"component:headless\":\"cypress run --component\"}}"
                },
                {
                    "type": "p",
                    "text": "You can learn more about Cypress and Continuous Integration from these resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js with Cypress example",
                        "Cypress Continuous Integration Docs",
                        "Cypress GitHub Actions Guide",
                        "Official Cypress GitHub Action",
                        "Cypress Discord"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing/jest",
            "title": "Testing: Jest | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Setting up Jest with Next.js"
                },
                {
                    "type": "p",
                    "text": "Jest and React Testing Library are frequently used together forUnit TestingandSnapshot Testing. This guide will show you how to set up Jest with Next.js and write your first tests."
                },
                {
                    "type": "p",
                    "text": "Good to know:SinceasyncServer Components are new to the React ecosystem, Jest currently does not support them. While you can still rununit testsfor synchronous Server and Client Components, we recommend using anE2E testsforasynccomponents."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Quickstart"
                },
                {
                    "type": "p",
                    "text": "You can usecreate-next-appwith the Next.jswith-jestexample to quickly get started:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest--examplewith-jestwith-jest-app"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Manual setup"
                },
                {
                    "type": "p",
                    "text": "Since the release ofNext.js 12, Next.js now has built-in configuration for Jest."
                },
                {
                    "type": "p",
                    "text": "To set up Jest, installjestand the following packages as dev dependencies:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Djestjest-environment-jsdom@testing-library/react@testing-library/jest-dom# oryarnadd-Djestjest-environment-jsdom@testing-library/react@testing-library/jest-dom# orpnpminstall-Djestjest-environment-jsdom@testing-library/react@testing-library/jest-dom"
                },
                {
                    "type": "p",
                    "text": "Generate a basic Jest configuration file by running the following command:"
                },
                {
                    "type": "code",
                    "code": "npminitjest@latest# oryarncreatejest@latest# orpnpmcreatejest@latest"
                },
                {
                    "type": "p",
                    "text": "This will take you through a series of prompts to setup Jest for your project, including automatically creating ajest.config.ts|jsfile."
                },
                {
                    "type": "p",
                    "text": "Update your config file to usenext/jest. This transformer has all the necessary configuration options for Jest to work with Next.js:"
                },
                {
                    "type": "code",
                    "code": "importtype{ Config }from'jest'importnextJestfrom'next/jest.js'constcreateJestConfig=nextJest({// Provide the path to your Next.js app to load next.config.js and .env files in your test environmentdir:'./',})// Add any custom config to be passed to Jestconstconfig:Config={coverageProvider:'v8',testEnvironment:'jsdom',// Add more setup options before each test is run// setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],}// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is asyncexportdefaultcreateJestConfig(config)"
                },
                {
                    "type": "p",
                    "text": "Under the hood,next/jestis automatically configuring Jest for you, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Setting uptransformusing theNext.js Compiler",
                        "Auto mocking stylesheets (.css,.module.css, and their scss variants), image imports andnext/font",
                        "Loading.env(and all variants) intoprocess.env",
                        "Ignoringnode_modulesfrom test resolving and transforms",
                        "Ignoring.nextfrom test resolving",
                        "Loadingnext.config.jsfor flags that enable SWC transforms"
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: To test environment variables directly, load them manually in a separate setup script or in yourjest.config.tsfile. For more information, please seeTest Environment Variables."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Optional: Handling Absolute Imports and Module Path Aliases"
                },
                {
                    "type": "p",
                    "text": "If your project is usingModule Path Aliases, you will need to configure Jest to resolve the imports by matching the paths option in thejsconfig.jsonfile with themoduleNameMapperoption in thejest.config.jsfile. For example:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\":{\"module\":\"esnext\",\"moduleResolution\":\"bundler\",\"baseUrl\":\"./\",\"paths\":{\"@/components/*\":[\"components/*\"]}}}"
                },
                {
                    "type": "code",
                    "code": "moduleNameMapper:{// ...'^@/components/(.*)$':'<rootDir>/components/$1',}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Optional: Extend Jest with custom matchers"
                },
                {
                    "type": "p",
                    "text": "@testing-library/jest-domincludes a set of convenientcustom matcherssuch as.toBeInTheDocument()making it easier to write tests. You can import the custom matchers for every test by adding the following option to the Jest configuration file:"
                },
                {
                    "type": "code",
                    "code": "setupFilesAfterEnv:['<rootDir>/jest.setup.ts']"
                },
                {
                    "type": "p",
                    "text": "Then, insidejest.setup.ts, add the following import:"
                },
                {
                    "type": "code",
                    "code": "import'@testing-library/jest-dom'"
                },
                {
                    "type": "p",
                    "text": "Good to know:extend-expectwas removed inv6.0, so if you are using@testing-library/jest-dombefore version 6, you will need to import@testing-library/jest-dom/extend-expectinstead."
                },
                {
                    "type": "p",
                    "text": "If you need to add more setup options before each test, you can add them to thejest.setup.jsfile above."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add a test script topackage.json:"
                },
                {
                    "type": "p",
                    "text": "Finally, add a Jesttestscript to yourpackage.jsonfile:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\",\"test\":\"jest\",\"test:watch\":\"jest --watch\"}}"
                },
                {
                    "type": "p",
                    "text": "jest --watchwill re-run tests when a file is changed. For more Jest CLI options, please refer to theJest Docs."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Creating your first test:"
                },
                {
                    "type": "p",
                    "text": "Your project is now ready to run tests. Create a folder called__tests__in your project's root directory."
                },
                {
                    "type": "p",
                    "text": "For example, we can add a test to check if the<Page />component successfully renders a heading:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionHome() {return(<div><h1>Home</h1><Linkhref=\"/about\">About</Link></div>)}"
                },
                {
                    "type": "code",
                    "code": "import'@testing-library/jest-dom'import{ render,screen }from'@testing-library/react'importPagefrom'../app/page'describe('Page',()=>{it('renders a heading',()=>{render(<Page/>)constheading=screen.getByRole('heading',{ level:1})expect(heading).toBeInTheDocument()})})"
                },
                {
                    "type": "p",
                    "text": "Optionally, add asnapshot testto keep track of any unexpected changes in your component:"
                },
                {
                    "type": "code",
                    "code": "import{ render }from'@testing-library/react'importPagefrom'../app/page'it('renders homepage unchanged',()=>{const{container}=render(<Page/>)expect(container).toMatchSnapshot()})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Running your tests"
                },
                {
                    "type": "p",
                    "text": "Then, run the following command to run your tests:"
                },
                {
                    "type": "code",
                    "code": "npmruntest# oryarntest# orpnpmtest"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Additional Resources"
                },
                {
                    "type": "p",
                    "text": "For further reading, you may find these resources helpful:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js with Jest example",
                        "Jest Docs",
                        "React Testing Library Docs",
                        "Testing Playground- use good testing practices to match elements."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing/playwright",
            "title": "Testing: Playwright | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Setting up Playwright with Next.js"
                },
                {
                    "type": "p",
                    "text": "Playwright is a testing framework that lets you automate Chromium, Firefox, and WebKit with a single API. You can use it to writeEnd-to-End (E2E)testing. This guide will show you how to set up Playwright with Next.js and write your first tests."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Quickstart"
                },
                {
                    "type": "p",
                    "text": "The fastest way to get started is to usecreate-next-appwith thewith-playwright example. This will create a Next.js project complete with Playwright configured."
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest--examplewith-playwrightwith-playwright-app"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Manual setup"
                },
                {
                    "type": "p",
                    "text": "To install Playwright, run the following command:"
                },
                {
                    "type": "code",
                    "code": "npminitplaywright# oryarncreateplaywright# orpnpmcreateplaywright"
                },
                {
                    "type": "p",
                    "text": "This will take you through a series of prompts to setup and configure Playwright for your project, including adding aplaywright.config.tsfile. Please refer to thePlaywright installation guidefor the step-by-step guide."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating your first Playwright E2E test"
                },
                {
                    "type": "p",
                    "text": "Create two new Next.js pages:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>Home</h1><Linkhref=\"/about\">About</Link></div>)}"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>About</h1><Linkhref=\"/\">Home</Link></div>)}"
                },
                {
                    "type": "p",
                    "text": "Then, add a test to verify that your navigation is working correctly:"
                },
                {
                    "type": "code",
                    "code": "import{ test,expect }from'@playwright/test'test('should navigate to the about page',async({ page })=>{// Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)awaitpage.goto('http://localhost:3000/')// Find an element with the text 'About' and click on itawaitpage.click('text=About')// The new URL should be \"/about\" (baseURL is used there)awaitexpect(page).toHaveURL('http://localhost:3000/about')// The new page should contain an h1 with \"About\"awaitexpect(page.locator('h1')).toContainText('About')})"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "p",
                    "text": "You can usepage.goto(\"/\")instead ofpage.goto(\"http://localhost:3000/\"), if you add\"baseURL\": \"http://localhost:3000\"to theplaywright.config.tsconfiguration file."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Running your Playwright tests"
                },
                {
                    "type": "p",
                    "text": "Playwright will simulate a user navigating your application using three browsers: Chromium, Firefox and Webkit, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave."
                },
                {
                    "type": "p",
                    "text": "Runnpm run buildandnpm run start, then runnpx playwright testin another terminal window to run the Playwright tests."
                },
                {
                    "type": "p",
                    "text": "Good to know: Alternatively, you can use thewebServerfeature to let Playwright start the development server and wait until it's fully available."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Running Playwright on Continuous Integration (CI)"
                },
                {
                    "type": "p",
                    "text": "Playwright will by default run your tests in theheadless mode. To install all the Playwright dependencies, runnpx playwright install-deps."
                },
                {
                    "type": "p",
                    "text": "You can learn more about Playwright and Continuous Integration from these resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js with Playwright example",
                        "Playwright on your CI provider",
                        "Playwright Discord"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing/vitest",
            "title": "Testing: Vitest | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Setting up Vitest with Next.js"
                },
                {
                    "type": "p",
                    "text": "Vite and React Testing Library are frequently used together forUnit Testing. This guide will show you how to setup Vitest with Next.js and write your first tests."
                },
                {
                    "type": "p",
                    "text": "Good to know:SinceasyncServer Components are new to the React ecosystem, Vitest currently does not support them. While you can still rununit testsfor synchronous Server and Client Components, we recommend using anE2E testsforasynccomponents."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Quickstart"
                },
                {
                    "type": "p",
                    "text": "You can usecreate-next-appwith the Next.jswith-vitestexample to quickly get started:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest--examplewith-vitestwith-vitest-app"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Manual Setup"
                },
                {
                    "type": "p",
                    "text": "To manually set up Vitest, installvitestand the following packages as dev dependencies:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dvitest@vitejs/plugin-reactjsdom@testing-library/react# oryarnadd-Dvitest@vitejs/plugin-reactjsdom@testing-library/react# orpnpminstall-Dvitest@vitejs/plugin-reactjsdom@testing-library/react# orbunadd-Dvitest@vitejs/plugin-reactjsdom@testing-library/react"
                },
                {
                    "type": "p",
                    "text": "Create avitest.config.ts|jsfile in the root of your project, and add the following options:"
                },
                {
                    "type": "code",
                    "code": "import{ defineConfig }from'vitest/config'importreactfrom'@vitejs/plugin-react'exportdefaultdefineConfig({plugins:[react()],test:{environment:'jsdom',},})"
                },
                {
                    "type": "p",
                    "text": "For more information on configuring Vitest, please refer to theVitest Configurationdocs."
                },
                {
                    "type": "p",
                    "text": "Then, add atestscript to yourpackage.json:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\",\"test\":\"vitest\"}}"
                },
                {
                    "type": "p",
                    "text": "When you runnpm run test, Vitest willwatchfor changes in your project by default."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating your first Vitest Unit Test"
                },
                {
                    "type": "p",
                    "text": "Check that everything is working by creating a test to check if the<Page />component successfully renders a heading:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>Home</h1><Linkhref=\"/about\">About</Link></div>)}"
                },
                {
                    "type": "code",
                    "code": "import{ expect,test }from'vitest'import{ render,screen }from'@testing-library/react'importPagefrom'../app/page'test('Page',()=>{render(<Page/>)expect(screen.getByRole('heading',{ level:1,name:'Home'})).toBeDefined()})"
                },
                {
                    "type": "p",
                    "text": "Good to know: The example above uses the common__tests__convention, but test files can also be colocated inside theapprouter."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Running your tests"
                },
                {
                    "type": "p",
                    "text": "Then, run the following command to run your tests:"
                },
                {
                    "type": "code",
                    "code": "npmruntest# oryarntest# orpnpmtest# orbuntest"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Additional Resources"
                },
                {
                    "type": "p",
                    "text": "You may find these resources helpful:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js with Vitest example",
                        "Vitest Docs",
                        "React Testing Library Docs"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading",
            "title": "Building Your Application: Upgrading | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Upgrade Guide"
                },
                {
                    "type": "p",
                    "text": "Upgrade your application to newer versions of Next.js or migrate from the Pages Router to the App Router."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Codemods"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "App Router Migration"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Version 14"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Migrating from Vite"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Migrating from Create React App"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/app-router-migration",
            "title": "Upgrading: App Router Migration | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "App Router Incremental Adoption Guide"
                },
                {
                    "type": "p",
                    "text": "This guide will help you:"
                },
                {
                    "type": "list",
                    "items": [
                        "Update your Next.js application from version 12 to version 13",
                        "Upgrade features that work in both thepagesand theappdirectories",
                        "Incrementally migrate your existing application frompagestoapp"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Upgrading"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Node.js Version"
                },
                {
                    "type": "p",
                    "text": "The minimum Node.js version is nowv18.17. See theNode.js documentationfor more information."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Next.js Version"
                },
                {
                    "type": "p",
                    "text": "To update to Next.js version 13, run the following command using your preferred package manager:"
                },
                {
                    "type": "code",
                    "code": "npminstallnext@latestreact@latestreact-dom@latest"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "ESLint Version"
                },
                {
                    "type": "p",
                    "text": "If you're using ESLint, you need to upgrade your ESLint version:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Deslint-config-next@latest"
                },
                {
                    "type": "p",
                    "text": "Good to know: You may need to restart the ESLint server in VS Code for the ESLint changes to take effect. Open the Command Palette (cmd+shift+pon Mac;ctrl+shift+pon Windows) and search forESLint: Restart ESLint Server."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "p",
                    "text": "After you've updated, see the following sections for next steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Upgrade new features: A guide to help you upgrade to new features such as the improved Image and Link Components.",
                        "Migrate from thepagestoappdirectory: A step-by-step guide to help you incrementally migrate from thepagesto theappdirectory."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Upgrading New Features"
                },
                {
                    "type": "p",
                    "text": "Next.js 13 introduced the newApp Routerwith new features and conventions. The new Router is available in theappdirectory and co-exists with thepagesdirectory."
                },
                {
                    "type": "p",
                    "text": "Upgrading to Next.js 13 doesnotrequire using the newApp Router. You can continue usingpageswith new features that work in both directories, such as the updatedImage component,Link component,Script component, andFont optimization."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<Image/>Component"
                },
                {
                    "type": "p",
                    "text": "Next.js 12 introduced new improvements to the Image Component with a temporary import:next/future/image. These improvements included less client-side JavaScript, easier ways to extend and style images, better accessibility, and native browser lazy loading."
                },
                {
                    "type": "p",
                    "text": "In version 13, this new behavior is now the default fornext/image."
                },
                {
                    "type": "p",
                    "text": "There are two codemods to help you migrate to the new Image Component:"
                },
                {
                    "type": "list",
                    "items": [
                        "next-image-to-legacy-imagecodemod: Safely and automatically renamesnext/imageimports tonext/legacy/image. Existing components will maintain the same behavior.",
                        "next-image-experimentalcodemod: Dangerously adds inline styles and removes unused props. This will change the behavior of existing components to match the new defaults. To use this codemod, you need to run thenext-image-to-legacy-imagecodemod first."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<Link>Component"
                },
                {
                    "type": "p",
                    "text": "The<Link>Componentno longer requires manually adding an<a>tag as a child. This behavior was added as an experimental option inversion 12.2and is now the default. In Next.js 13,<Link>always renders<a>and allows you to forward props to the underlying tag."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link'// Next.js 12: `<a>` has to be nested otherwise it's excluded<Linkhref=\"/about\"><a>About</a></Link>// Next.js 13: `<Link>` always renders `<a>` under the hood<Linkhref=\"/about\">About</Link>"
                },
                {
                    "type": "p",
                    "text": "To upgrade your links to Next.js 13, you can use thenew-linkcodemod."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<Script>Component"
                },
                {
                    "type": "p",
                    "text": "The behavior ofnext/scripthas been updated to support bothpagesandapp, but some changes need to be made to ensure a smooth migration:"
                },
                {
                    "type": "list",
                    "items": [
                        "Move anybeforeInteractivescripts you previously included in_document.jsto the root layout file (app/layout.tsx).",
                        "The experimentalworkerstrategy does not yet work inappand scripts denoted with this strategy will either have to be removed or modified to use a different strategy (e.g.lazyOnload).",
                        "onLoad,onReady, andonErrorhandlers will not work in Server Components so make sure to move them to aClient Componentor remove them altogether."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Font Optimization"
                },
                {
                    "type": "p",
                    "text": "Previously, Next.js helped you optimize fonts byinlining font CSS. Version 13 introduces the newnext/fontmodule which gives you the ability to customize your font loading experience while still ensuring great performance and privacy.next/fontis supported in both thepagesandappdirectories."
                },
                {
                    "type": "p",
                    "text": "Whileinlining CSSstill works inpages, it does not work inapp. You should usenext/fontinstead."
                },
                {
                    "type": "p",
                    "text": "See theFont Optimizationpage to learn how to usenext/font."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Migrating frompagestoapp"
                },
                {
                    "type": "p",
                    "text": "🎥 Watch:Learn how to incrementally adopt the App Router →YouTube (16 minutes)."
                },
                {
                    "type": "p",
                    "text": "Moving to the App Router may be the first time using React features that Next.js builds on top of such as Server Components, Suspense, and more. When combined with new Next.js features such asspecial filesandlayouts, migration means new concepts, mental models, and behavioral changes to learn."
                },
                {
                    "type": "p",
                    "text": "We recommend reducing the combined complexity of these updates by breaking down your migration into smaller steps. Theappdirectory is intentionally designed to work simultaneously with thepagesdirectory to allow for incremental page-by-page migration."
                },
                {
                    "type": "list",
                    "items": [
                        "Theappdirectory supports nested routesandlayouts.Learn more.",
                        "Use nested folders todefine routesand a specialpage.jsfile to make a route segment publicly accessible.Learn more.",
                        "Special file conventionsare used to create UI for each route segment. The most common special files arepage.jsandlayout.js.Usepage.jsto define UI unique to a route.Uselayout.jsto define UI that is shared across multiple routes..js,.jsx, or.tsxfile extensions can be used for special files.",
                        "Usepage.jsto define UI unique to a route.",
                        "Uselayout.jsto define UI that is shared across multiple routes.",
                        ".js,.jsx, or.tsxfile extensions can be used for special files.",
                        "You can colocate other files inside theappdirectory such as components, styles, tests, and more.Learn more.",
                        "Data fetching functions likegetServerSidePropsandgetStaticPropshave been replaced witha new APIinsideapp.getStaticPathshas been replaced withgenerateStaticParams.",
                        "pages/_app.jsandpages/_document.jshave been replaced with a singleapp/layout.jsroot layout.Learn more.",
                        "pages/_error.jshas been replaced with more granularerror.jsspecial files.Learn more.",
                        "pages/404.jshas been replaced with thenot-found.jsfile.",
                        "pages/api/*API Routes have been replaced with theroute.js(Route Handler) special file."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Usepage.jsto define UI unique to a route.",
                        "Uselayout.jsto define UI that is shared across multiple routes.",
                        ".js,.jsx, or.tsxfile extensions can be used for special files."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 1: Creating theappdirectory"
                },
                {
                    "type": "p",
                    "text": "Update to the latest Next.js version (requires 13.4 or greater):"
                },
                {
                    "type": "code",
                    "code": "npminstallnext@latest"
                },
                {
                    "type": "p",
                    "text": "Then, create a newappdirectory at the root of your project (orsrc/directory)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 2: Creating a Root Layout"
                },
                {
                    "type": "p",
                    "text": "Create a newapp/layout.tsxfile inside theappdirectory. This is aroot layoutthat will apply to all routes insideapp."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({// Layouts must accept a children prop.// This will be populated with nested layouts or pageschildren,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Theappdirectorymustinclude a root layout.",
                        "The root layout must define<html>, and<body>tags since Next.js does not automatically create them",
                        "The root layout replaces thepages/_app.tsxandpages/_document.tsxfiles.",
                        ".js,.jsx, or.tsxextensions can be used for layout files."
                    ]
                },
                {
                    "type": "p",
                    "text": "To manage<head>HTML elements, you can use thebuilt-in SEO support:"
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'exportconstmetadata:Metadata={title:'Home',description:'Welcome to Next.js',}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Migrating_document.jsand_app.js"
                },
                {
                    "type": "p",
                    "text": "If you have an existing_appor_documentfile, you can copy the contents (e.g. global styles) to the root layout (app/layout.tsx). Styles inapp/layout.tsxwillnotapply topages/*. You should keep_app/_documentwhile migrating to prevent yourpages/*routes from breaking. Once fully migrated, you can then safely delete them."
                },
                {
                    "type": "p",
                    "text": "If you are using any React Context providers, they will need to be moved to aClient Component."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Migrating thegetLayout()pattern to Layouts (Optional)"
                },
                {
                    "type": "p",
                    "text": "Next.js recommended adding aproperty to Page componentsto achieve per-page layouts in thepagesdirectory. This pattern can be replaced with native support fornested layoutsin theappdirectory."
                },
                {
                    "type": "p",
                    "text": "Before"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionDashboardLayout({ children }) {return(<div><h2>My Dashboard</h2>{children}</div>)}"
                },
                {
                    "type": "code",
                    "code": "importDashboardLayoutfrom'../components/DashboardLayout'exportdefaultfunctionPage() {return<p>My Page</p>}Page.getLayout=functiongetLayout(page) {return<DashboardLayout>{page}</DashboardLayout>}"
                },
                {
                    "type": "p",
                    "text": "After"
                },
                {
                    "type": "list",
                    "items": [
                        "Remove thePage.getLayoutproperty frompages/dashboard/index.jsand follow thesteps for migrating pagesto theappdirectory.app/dashboard/page.jsexportdefaultfunctionPage() {return<p>My Page</p>}",
                        "Move the contents ofDashboardLayoutinto a newClient Componentto retainpagesdirectory behavior.app/dashboard/DashboardLayout.js'use client'// this directive should be at top of the file, before any imports.// This is a Client ComponentexportdefaultfunctionDashboardLayout({ children }) {return(<div><h2>My Dashboard</h2>{children}</div>)}",
                        "Import theDashboardLayoutinto a newlayout.jsfile inside theappdirectory.app/dashboard/layout.jsimportDashboardLayoutfrom'./DashboardLayout'// This is a Server ComponentexportdefaultfunctionLayout({ children }) {return<DashboardLayout>{children}</DashboardLayout>}",
                        "You can incrementally move non-interactive parts ofDashboardLayout.js(Client Component) intolayout.js(Server Component) to reduce the amount of component JavaScript you send to the client."
                    ]
                },
                {
                    "type": "p",
                    "text": "Remove thePage.getLayoutproperty frompages/dashboard/index.jsand follow thesteps for migrating pagesto theappdirectory."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {return<p>My Page</p>}"
                },
                {
                    "type": "p",
                    "text": "Move the contents ofDashboardLayoutinto a newClient Componentto retainpagesdirectory behavior."
                },
                {
                    "type": "code",
                    "code": "'use client'// this directive should be at top of the file, before any imports.// This is a Client ComponentexportdefaultfunctionDashboardLayout({ children }) {return(<div><h2>My Dashboard</h2>{children}</div>)}"
                },
                {
                    "type": "p",
                    "text": "Import theDashboardLayoutinto a newlayout.jsfile inside theappdirectory."
                },
                {
                    "type": "code",
                    "code": "importDashboardLayoutfrom'./DashboardLayout'// This is a Server ComponentexportdefaultfunctionLayout({ children }) {return<DashboardLayout>{children}</DashboardLayout>}"
                },
                {
                    "type": "p",
                    "text": "You can incrementally move non-interactive parts ofDashboardLayout.js(Client Component) intolayout.js(Server Component) to reduce the amount of component JavaScript you send to the client."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 3: Migratingnext/head"
                },
                {
                    "type": "p",
                    "text": "In thepagesdirectory, thenext/headReact component is used to manage<head>HTML elements such astitleandmeta. In theappdirectory,next/headis replaced with the newbuilt-in SEO support."
                },
                {
                    "type": "p",
                    "text": "Before:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head'exportdefaultfunctionPage() {return(<><Head><title>My page title</title></Head></>)}"
                },
                {
                    "type": "p",
                    "text": "After:"
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next'exportconstmetadata:Metadata={title:'My Page Title',}exportdefaultfunctionPage() {return'...'}"
                },
                {
                    "type": "p",
                    "text": "See all metadata options."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 4: Migrating Pages"
                },
                {
                    "type": "list",
                    "items": [
                        "Pages in theappdirectoryareServer Componentsby default. This is different from thepagesdirectory where pages areClient Components.",
                        "Data fetchinghas changed inapp.getServerSideProps,getStaticPropsandgetInitialPropshave been replaced with a simpler API.",
                        "Theappdirectory uses nested folders todefine routesand a specialpage.jsfile to make a route segment publicly accessible.",
                        "pagesDirectoryappDirectoryRouteindex.jspage.js/about.jsabout/page.js/aboutblog/[slug].jsblog/[slug]/page.js/blog/post-1"
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend breaking down the migration of a page into two main steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Step 1: Move the default exported Page Component into a new Client Component.",
                        "Step 2: Import the new Client Component into a newpage.jsfile inside theappdirectory."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: This is the easiest migration path because it has the most comparable behavior to thepagesdirectory."
                },
                {
                    "type": "p",
                    "text": "Step 1: Create a new Client Component"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a new separate file inside theappdirectory (i.e.app/home-page.tsxor similar) that exports a Client Component. To define Client Components, add the'use client'directive to the top of the file (before any imports).Similar to the Pages Router, there is anoptimization stepto prerender Client Components to static HTML on the initial page load.",
                        "Similar to the Pages Router, there is anoptimization stepto prerender Client Components to static HTML on the initial page load.",
                        "Move the default exported page component frompages/index.jstoapp/home-page.tsx."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Similar to the Pages Router, there is anoptimization stepto prerender Client Components to static HTML on the initial page load."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use client'// This is a Client Component (same as components in the `pages` directory)// It receives data as props, has access to state and effects, and is// prerendered on the server during the initial page load.exportdefaultfunctionHomePage({ recentPosts }) {return(<div>{recentPosts.map((post)=>(<divkey={post.id}>{post.title}</div>))}</div>)}"
                },
                {
                    "type": "p",
                    "text": "Step 2: Create a new page"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a newapp/page.tsxfile inside theappdirectory. This is a Server Component by default.",
                        "Import thehome-page.tsxClient Component into the page.",
                        "If you were fetching data inpages/index.js, move the data fetching logic directly into the Server Component using the newdata fetching APIs. See thedata fetching upgrade guidefor more details.app/page.tsxTypeScriptJavaScriptTypeScript// Import your Client ComponentimportHomePagefrom'./home-page'asyncfunctiongetPosts() {constres=awaitfetch('https://...')constposts=awaitres.json()returnposts}exportdefaultasyncfunctionPage() {// Fetch data directly in a Server ComponentconstrecentPosts=awaitgetPosts()// Forward fetched data to your Client Componentreturn<HomePagerecentPosts={recentPosts} />}",
                        "If your previous page useduseRouter, you'll need to update to the new routing hooks.Learn more.",
                        "Start your development server and visithttp://localhost:3000. You should see your existing index route, now served through the app directory."
                    ]
                },
                {
                    "type": "p",
                    "text": "Create a newapp/page.tsxfile inside theappdirectory. This is a Server Component by default."
                },
                {
                    "type": "p",
                    "text": "Import thehome-page.tsxClient Component into the page."
                },
                {
                    "type": "p",
                    "text": "If you were fetching data inpages/index.js, move the data fetching logic directly into the Server Component using the newdata fetching APIs. See thedata fetching upgrade guidefor more details."
                },
                {
                    "type": "code",
                    "code": "// Import your Client ComponentimportHomePagefrom'./home-page'asyncfunctiongetPosts() {constres=awaitfetch('https://...')constposts=awaitres.json()returnposts}exportdefaultasyncfunctionPage() {// Fetch data directly in a Server ComponentconstrecentPosts=awaitgetPosts()// Forward fetched data to your Client Componentreturn<HomePagerecentPosts={recentPosts} />}"
                },
                {
                    "type": "p",
                    "text": "If your previous page useduseRouter, you'll need to update to the new routing hooks.Learn more."
                },
                {
                    "type": "p",
                    "text": "Start your development server and visithttp://localhost:3000. You should see your existing index route, now served through the app directory."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 5: Migrating Routing Hooks"
                },
                {
                    "type": "p",
                    "text": "A new router has been added to support the new behavior in theappdirectory."
                },
                {
                    "type": "p",
                    "text": "Inapp, you should use the three new hooks imported fromnext/navigation:useRouter(),usePathname(), anduseSearchParams()."
                },
                {
                    "type": "list",
                    "items": [
                        "The newuseRouterhook is imported fromnext/navigationand has different behavior to theuseRouterhook inpageswhich is imported fromnext/router.TheuseRouterhook imported fromnext/routeris not supported in theappdirectory but can continue to be used in thepagesdirectory.",
                        "TheuseRouterhook imported fromnext/routeris not supported in theappdirectory but can continue to be used in thepagesdirectory.",
                        "The newuseRouterdoes not return thepathnamestring. Use the separateusePathnamehook instead.",
                        "The newuseRouterdoes not return thequeryobject. Use the separateuseSearchParamshook instead.",
                        "You can useuseSearchParamsandusePathnametogether to listen to page changes. See theRouter Eventssection for more details.",
                        "These new hooks are only supported in Client Components. They cannot be used in Server Components."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "TheuseRouterhook imported fromnext/routeris not supported in theappdirectory but can continue to be used in thepagesdirectory."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useRouter,usePathname,useSearchParams }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constrouter=useRouter()constpathname=usePathname()constsearchParams=useSearchParams()// ...}"
                },
                {
                    "type": "p",
                    "text": "In addition, the newuseRouterhook has the following changes:"
                },
                {
                    "type": "list",
                    "items": [
                        "isFallbackhas been removed becausefallbackhasbeen replaced.",
                        "Thelocale,locales,defaultLocales,domainLocalesvalues have been removed because built-in i18n Next.js features are no longer necessary in theappdirectory.Learn more about i18n.",
                        "basePathhas been removed. The alternative will not be part ofuseRouter. It has not yet been implemented.",
                        "asPathhas been removed because the concept ofashas been removed from the new router.",
                        "isReadyhas been removed because it is no longer necessary. Duringstatic rendering, any component that uses theuseSearchParams()hook will skip the prerendering step and instead be rendered on the client at runtime."
                    ]
                },
                {
                    "type": "p",
                    "text": "View theuseRouter()API reference."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 6: Migrating Data Fetching Methods"
                },
                {
                    "type": "p",
                    "text": "Thepagesdirectory usesgetServerSidePropsandgetStaticPropsto fetch data for pages. Inside theappdirectory, these previous data fetching functions are replaced with asimpler APIbuilt on top offetch()andasyncReact Server Components."
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {// This request should be cached until manually invalidated.// Similar to `getStaticProps`.// `force-cache` is the default and can be omitted.conststaticData=awaitfetch(`https://...`,{ cache:'force-cache'})// This request should be refetched on every request.// Similar to `getServerSideProps`.constdynamicData=awaitfetch(`https://...`,{ cache:'no-store'})// This request should be cached with a lifetime of 10 seconds.// Similar to `getStaticProps` with the `revalidate` option.constrevalidatedData=awaitfetch(`https://...`,{next:{ revalidate:10},})return<div>...</div>}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Server-side Rendering (getServerSideProps)"
                },
                {
                    "type": "p",
                    "text": "In thepagesdirectory,getServerSidePropsis used to fetch data on the server and forward props to the default exported React component in the file. The initial HTML for the page is prerendered from the server, followed by \"hydrating\" the page in the browser (making it interactive)."
                },
                {
                    "type": "code",
                    "code": "// `pages` directoryexportasyncfunctiongetServerSideProps() {constres=awaitfetch(`https://...`)constprojects=awaitres.json()return{ props:{ projects } }}exportdefaultfunctionDashboard({ projects }) {return(<ul>{projects.map((project)=>(<likey={project.id}>{project.name}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "In theappdirectory, we can colocate our data fetching inside our React components usingServer Components. This allows us to send less JavaScript to the client, while maintaining the rendered HTML from the server."
                },
                {
                    "type": "p",
                    "text": "By setting thecacheoption tono-store, we can indicate that the fetched data shouldnever be cached. This is similar togetServerSidePropsin thepagesdirectory."
                },
                {
                    "type": "code",
                    "code": "// `app` directory// This function can be named anythingasyncfunctiongetProjects() {constres=awaitfetch(`https://...`,{ cache:'no-store'})constprojects=awaitres.json()returnprojects}exportdefaultasyncfunctionDashboard() {constprojects=awaitgetProjects()return(<ul>{projects.map((project)=>(<likey={project.id}>{project.name}</li>))}</ul>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Accessing Request Object"
                },
                {
                    "type": "p",
                    "text": "In thepagesdirectory, you can retrieve request-based data based on the Node.js HTTP API."
                },
                {
                    "type": "p",
                    "text": "For example, you can retrieve thereqobject fromgetServerSidePropsand use it to retrieve the request's cookies and headers."
                },
                {
                    "type": "code",
                    "code": "// `pages` directoryexportasyncfunctiongetServerSideProps({ req,query }) {constauthHeader=req.getHeaders()['authorization'];consttheme=req.cookies['theme'];return{ props:{...}}}exportdefaultfunctionPage(props) {return...}"
                },
                {
                    "type": "p",
                    "text": "Theappdirectory exposes new read-only functions to retrieve request data:"
                },
                {
                    "type": "list",
                    "items": [
                        "headers(): Based on the Web Headers API, and can be used insideServer Componentsto retrieve request headers.",
                        "cookies(): Based on the Web Cookies API, and can be used insideServer Componentsto retrieve cookies."
                    ]
                },
                {
                    "type": "code",
                    "code": "// `app` directoryimport{ cookies,headers }from'next/headers'asyncfunctiongetData() {constauthHeader=headers().get('authorization')return'...'}exportdefaultasyncfunctionPage() {// You can use `cookies()` or `headers()` inside Server Components// directly or in your data fetching functionconsttheme=cookies().get('theme')constdata=awaitgetData()return'...'}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Static Site Generation (getStaticProps)"
                },
                {
                    "type": "p",
                    "text": "In thepagesdirectory, thegetStaticPropsfunction is used to pre-render a page at build time. This function can be used to fetch data from an external API or directly from a database, and pass this data down to the entire page as it's being generated during the build."
                },
                {
                    "type": "code",
                    "code": "// `pages` directoryexportasyncfunctiongetStaticProps() {constres=awaitfetch(`https://...`)constprojects=awaitres.json()return{ props:{ projects } }}exportdefaultfunctionIndex({ projects }) {returnprojects.map((project)=><div>{project.name}</div>)}"
                },
                {
                    "type": "p",
                    "text": "In theappdirectory, data fetching withfetch()will default tocache: 'force-cache', which will cache the request data until manually invalidated. This is similar togetStaticPropsin thepagesdirectory."
                },
                {
                    "type": "code",
                    "code": "// `app` directory// This function can be named anythingasyncfunctiongetProjects() {constres=awaitfetch(`https://...`)constprojects=awaitres.json()returnprojects}exportdefaultasyncfunctionIndex() {constprojects=awaitgetProjects()returnprojects.map((project)=><div>{project.name}</div>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Dynamic paths (getStaticPaths)"
                },
                {
                    "type": "p",
                    "text": "In thepagesdirectory, thegetStaticPathsfunction is used to define the dynamic paths that should be pre-rendered at build time."
                },
                {
                    "type": "code",
                    "code": "// `pages` directoryimportPostLayoutfrom'@/components/post-layout'exportasyncfunctiongetStaticPaths() {return{paths:[{ params:{ id:'1'} },{ params:{ id:'2'} }],}}exportasyncfunctiongetStaticProps({ params }) {constres=awaitfetch(`https://.../posts/${params.id}`)constpost=awaitres.json()return{ props:{ post } }}exportdefaultfunctionPost({ post }) {return<PostLayoutpost={post} />}"
                },
                {
                    "type": "p",
                    "text": "In theappdirectory,getStaticPathsis replaced withgenerateStaticParams."
                },
                {
                    "type": "p",
                    "text": "generateStaticParamsbehaves similarly togetStaticPaths, but has a simplified API for returning route parameters and can be used insidelayouts. The return shape ofgenerateStaticParamsis an array of segments instead of an array of nestedparamobjects or a string of resolved paths."
                },
                {
                    "type": "code",
                    "code": "// `app` directoryimportPostLayoutfrom'@/components/post-layout'exportasyncfunctiongenerateStaticParams() {return[{ id:'1'},{ id:'2'}]}asyncfunctiongetPost(params) {constres=awaitfetch(`https://.../posts/${params.id}`)constpost=awaitres.json()returnpost}exportdefaultasyncfunctionPost({ params }) {constpost=awaitgetPost(params)return<PostLayoutpost={post} />}"
                },
                {
                    "type": "p",
                    "text": "Using the namegenerateStaticParamsis more appropriate thangetStaticPathsfor the new model in theappdirectory. Thegetprefix is replaced with a more descriptivegenerate, which sits better alone now thatgetStaticPropsandgetServerSidePropsare no longer necessary. ThePathssuffix is replaced byParams, which is more appropriate for nested routing with multiple dynamic segments."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Replacingfallback"
                },
                {
                    "type": "p",
                    "text": "In thepagesdirectory, thefallbackproperty returned fromgetStaticPathsis used to define the behavior of a page that isn't pre-rendered at build time. This property can be set totrueto show a fallback page while the page is being generated,falseto show a 404 page, orblockingto generate the page at request time."
                },
                {
                    "type": "code",
                    "code": "// `pages` directoryexportasyncfunctiongetStaticPaths() {return{paths:[],fallback:'blocking'};}exportasyncfunctiongetStaticProps({ params }) {...}exportdefaultfunctionPost({ post }) {return...}"
                },
                {
                    "type": "p",
                    "text": "In theappdirectory theconfig.dynamicParamspropertycontrols how params outside ofgenerateStaticParamsare handled:"
                },
                {
                    "type": "list",
                    "items": [
                        "true: (default) Dynamic segments not included ingenerateStaticParamsare generated on demand.",
                        "false: Dynamic segments not included ingenerateStaticParamswill return a 404."
                    ]
                },
                {
                    "type": "p",
                    "text": "This replaces thefallback: true | false | 'blocking'option ofgetStaticPathsin thepagesdirectory. Thefallback: 'blocking'option is not included indynamicParamsbecause the difference between'blocking'andtrueis negligible with streaming."
                },
                {
                    "type": "code",
                    "code": "// `app` directoryexportconstdynamicParams=true;exportasyncfunctiongenerateStaticParams() {return[...]}asyncfunctiongetPost(params) {...}exportdefaultasyncfunctionPost({ params }) {constpost=awaitgetPost(params);return...}"
                },
                {
                    "type": "p",
                    "text": "WithdynamicParamsset totrue(the default), when a route segment is requested that hasn't been generated, it will be server-rendered and cached."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Incremental Static Regeneration (getStaticPropswithrevalidate)"
                },
                {
                    "type": "p",
                    "text": "In thepagesdirectory, thegetStaticPropsfunction allows you to add arevalidatefield to automatically regenerate a page after a certain amount of time."
                },
                {
                    "type": "code",
                    "code": "// `pages` directoryexportasyncfunctiongetStaticProps() {constres=awaitfetch(`https://.../posts`)constposts=awaitres.json()return{props:{ posts },revalidate:60,}}exportdefaultfunctionIndex({ posts }) {return(<Layout><PostListposts={posts} /></Layout>)}"
                },
                {
                    "type": "p",
                    "text": "In theappdirectory, data fetching withfetch()can userevalidate, which will cache the request for the specified amount of seconds."
                },
                {
                    "type": "code",
                    "code": "// `app` directoryasyncfunctiongetPosts() {constres=awaitfetch(`https://.../posts`,{ next:{ revalidate:60} })constdata=awaitres.json()returndata.posts}exportdefaultasyncfunctionPostList() {constposts=awaitgetPosts()returnposts.map((post)=><div>{post.name}</div>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "API Routes"
                },
                {
                    "type": "p",
                    "text": "API Routes continue to work in thepages/apidirectory without any changes. However, they have been replaced byRoute Handlersin theappdirectory."
                },
                {
                    "type": "p",
                    "text": "Route Handlers allow you to create custom request handlers for a given route using the WebRequestandResponseAPIs."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionGET(request:Request) {}"
                },
                {
                    "type": "p",
                    "text": "Good to know: If you previously used API routes to call an external API from the client, you can now useServer Componentsinstead to securely fetch data. Learn more aboutdata fetching."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 7: Styling"
                },
                {
                    "type": "p",
                    "text": "In thepagesdirectory, global stylesheets are restricted to onlypages/_app.js. With theappdirectory, this restriction has been lifted. Global styles can be added to any layout, page, or component."
                },
                {
                    "type": "list",
                    "items": [
                        "CSS Modules",
                        "Tailwind CSS",
                        "Global Styles",
                        "CSS-in-JS",
                        "External Stylesheets",
                        "Sass"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "If you're using Tailwind CSS, you'll need to add theappdirectory to yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={content:['./app/**/*.{js,ts,jsx,tsx,mdx}',// <-- Add this line'./pages/**/*.{js,ts,jsx,tsx,mdx}','./components/**/*.{js,ts,jsx,tsx,mdx}',],}"
                },
                {
                    "type": "p",
                    "text": "You'll also need to import your global styles in yourapp/layout.jsfile:"
                },
                {
                    "type": "code",
                    "code": "import'../styles/globals.css'exportdefaultfunctionRootLayout({ children }) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutstyling with Tailwind CSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Codemods"
                },
                {
                    "type": "p",
                    "text": "Next.js provides Codemod transformations to help upgrade your codebase when a feature is deprecated. SeeCodemodsfor more information."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/codemods",
            "title": "Upgrading: Codemods | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Codemods"
                },
                {
                    "type": "p",
                    "text": "Codemods are transformations that run on your codebase programmatically. This allows a large number of changes to be programmatically applied without having to manually go through every file."
                },
                {
                    "type": "p",
                    "text": "Next.js provides Codemod transformations to help upgrade your Next.js codebase when an API is updated or deprecated."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage"
                },
                {
                    "type": "p",
                    "text": "In your terminal, navigate (cd) into your project's folder, then run:"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemod<transform><path>"
                },
                {
                    "type": "p",
                    "text": "Replacing<transform>and<path>with appropriate values."
                },
                {
                    "type": "list",
                    "items": [
                        "transform- name of transform",
                        "path- files or directory to transform",
                        "--dryDo a dry-run, no code will be edited",
                        "--printPrints the changed output for comparison"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next.js Codemods"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "14.0"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "MigrateImageResponseimports"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "next-og-import"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemod@latestnext-og-import."
                },
                {
                    "type": "p",
                    "text": "This codemod moves transforms imports fromnext/servertonext/ogfor usage ofDynamic OG Image Generation."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "import{ ImageResponse }from'next/server'"
                },
                {
                    "type": "p",
                    "text": "Transforms into:"
                },
                {
                    "type": "code",
                    "code": "import{ ImageResponse }from'next/og'"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Useviewportexport"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "metadata-to-viewport-export"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemod@latestmetadata-to-viewport-export."
                },
                {
                    "type": "p",
                    "text": "This codemod migrates certain viewport metadata toviewportexport."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={title:'My App',themeColor:'dark',viewport:{width:1,},}"
                },
                {
                    "type": "p",
                    "text": "Transforms into:"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={title:'My App',}exportconstviewport={width:1,themeColor:'dark',}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "13.2"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Use Built-in Font"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "built-in-next-font"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemod@latestbuilt-in-next-font."
                },
                {
                    "type": "p",
                    "text": "This codemod uninstalls the@next/fontpackage and transforms@next/fontimports into the built-innext/font."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "import{ Inter }from'@next/font/google'"
                },
                {
                    "type": "p",
                    "text": "Transforms into:"
                },
                {
                    "type": "code",
                    "code": "import{ Inter }from'next/font/google'"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "13.0"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Rename Next Image Imports"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "next-image-to-legacy-image"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemod@latestnext-image-to-legacy-image."
                },
                {
                    "type": "p",
                    "text": "Safely renamesnext/imageimports in existing Next.js 10, 11, or 12 applications tonext/legacy/imagein Next.js 13. Also renamesnext/future/imagetonext/image."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "importImage1from'next/image'importImage2from'next/future/image'exportdefaultfunctionHome() {return(<div><Image1src=\"/test.jpg\"width=\"200\"height=\"300\"/><Image2src=\"/test.png\"width=\"500\"height=\"400\"/></div>)}"
                },
                {
                    "type": "p",
                    "text": "Transforms into:"
                },
                {
                    "type": "code",
                    "code": "// 'next/image' becomes 'next/legacy/image'importImage1from'next/legacy/image'// 'next/future/image' becomes 'next/image'importImage2from'next/image'exportdefaultfunctionHome() {return(<div><Image1src=\"/test.jpg\"width=\"200\"height=\"300\"/><Image2src=\"/test.png\"width=\"500\"height=\"400\"/></div>)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Migrate to the New Image Component"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "next-image-experimental"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemod@latestnext-image-experimental."
                },
                {
                    "type": "p",
                    "text": "Dangerously migrates fromnext/legacy/imageto the newnext/imageby adding inline styles and removing unused props."
                },
                {
                    "type": "list",
                    "items": [
                        "Removeslayoutprop and addsstyle.",
                        "RemovesobjectFitprop and addsstyle.",
                        "RemovesobjectPositionprop and addsstyle.",
                        "RemoveslazyBoundaryprop.",
                        "RemoveslazyRootprop."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Remove<a>Tags From Link Components"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "new-link"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemod@latestnew-link."
                },
                {
                    "type": "p",
                    "text": "Remove<a>tags insideLink Components, or add alegacyBehaviorprop to Links that cannot be auto-fixed."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "<Linkhref=\"/about\"><a>About</a></Link>// transforms into<Linkhref=\"/about\">About</Link><Linkhref=\"/about\"><aonClick={()=>console.log('clicked')}>About</a></Link>// transforms into<Linkhref=\"/about\"onClick={()=>console.log('clicked')}>About</Link>"
                },
                {
                    "type": "p",
                    "text": "In cases where auto-fixing can't be applied, thelegacyBehaviorprop is added. This allows your app to keep functioning using the old behavior for that particular link."
                },
                {
                    "type": "code",
                    "code": "constComponent=()=><a>About</a><Linkhref=\"/about\"><Component/></Link>// becomes<Linkhref=\"/about\"legacyBehavior><Component/></Link>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "11"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Migrate from CRA"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "cra-to-next"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemodcra-to-next"
                },
                {
                    "type": "p",
                    "text": "Migrates a Create React App project to Next.js; creating a Pages Router and necessary config to match behavior. Client-side only rendering is leveraged initially to prevent breaking compatibility due towindowusage during SSR and can be enabled seamlessly to allow the gradual adoption of Next.js specific features."
                },
                {
                    "type": "p",
                    "text": "Please share any feedback related to this transformin this discussion."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "10"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Add React imports"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "add-missing-react-import"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemodadd-missing-react-import"
                },
                {
                    "type": "p",
                    "text": "Transforms files that do not importReactto include the import in order for the newReact JSX transformto work."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultclassHomeextendsReact.Component{render() {return<div>Hello World</div>}}"
                },
                {
                    "type": "p",
                    "text": "Transforms into:"
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react'exportdefaultclassHomeextendsReact.Component{render() {return<div>Hello World</div>}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "9"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Transform Anonymous Components into Named Components"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "name-default-component"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemodname-default-component"
                },
                {
                    "type": "p",
                    "text": "Versions 9 and above."
                },
                {
                    "type": "p",
                    "text": "Transforms anonymous components into named components to make sure they work withFast Refresh."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunction() {return<div>Hello World</div>}"
                },
                {
                    "type": "p",
                    "text": "Transforms into:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionMyComponent() {return<div>Hello World</div>}"
                },
                {
                    "type": "p",
                    "text": "The component will have a camel-cased name based on the name of the file, and it also works with arrow functions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "8"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Transform AMP HOC into page config"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "withamp-to-config"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemodwithamp-to-config"
                },
                {
                    "type": "p",
                    "text": "Transforms thewithAmpHOC into Next.js 9 page configuration."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "// Beforeimport{ withAmp }from'next/amp'functionHome() {return<h1>My AMP Page</h1>}exportdefaultwithAmp(Home)"
                },
                {
                    "type": "code",
                    "code": "// AfterexportdefaultfunctionHome() {return<h1>My AMP Page</h1>}exportconstconfig={amp:true,}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "6"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "UsewithRouter"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "url-to-withrouter"
                },
                {
                    "type": "code",
                    "code": "npx@next/codemodurl-to-withrouter"
                },
                {
                    "type": "p",
                    "text": "Transforms the deprecated automatically injectedurlproperty on top level pages to usingwithRouterand therouterproperty it injects. Read more here:https://nextjs.org/docs/messages/url-deprecated"
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react'exportdefaultclassextendsReact.Component{render() {const{pathname}=this.props.urlreturn<div>Current pathname: {pathname}</div>}}"
                },
                {
                    "type": "code",
                    "code": "importReactfrom'react'import{ withRouter }from'next/router'exportdefaultwithRouter(classextendsReact.Component{render() {const{pathname}=this.props.routerreturn<div>Current pathname: {pathname}</div>}})"
                },
                {
                    "type": "p",
                    "text": "This is one case. All the cases that are transformed (and tested) can be found in the__testfixtures__directory."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/from-create-react-app",
            "title": "Upgrading: Migrating from Create React App | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Migrating from Create React App"
                },
                {
                    "type": "p",
                    "text": "This guide will help you migrate an existing Create React App site to Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why Switch?"
                },
                {
                    "type": "p",
                    "text": "There are several reasons why you might want to switch from Create React App to Next.js:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Slow initial page loading time"
                },
                {
                    "type": "p",
                    "text": "Create React App uses purely client-side React. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "The browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load data.",
                        "Your application code grows with every new feature and dependency you add."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "No automatic code splitting"
                },
                {
                    "type": "p",
                    "text": "The previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Network waterfalls"
                },
                {
                    "type": "p",
                    "text": "A common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data."
                },
                {
                    "type": "p",
                    "text": "While fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fast and intentional loading states"
                },
                {
                    "type": "p",
                    "text": "With built-in support forstreaming through React Suspense, you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls."
                },
                {
                    "type": "p",
                    "text": "This enables you to build pages that are faster to load and eliminatelayout shifts."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Choose the data fetching strategy"
                },
                {
                    "type": "p",
                    "text": "Depending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Middleware"
                },
                {
                    "type": "p",
                    "text": "Next.js Middlewareallows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation andinternationalization."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Built-in Optimizations"
                },
                {
                    "type": "p",
                    "text": "Images,fonts, andthird-party scriptsoften have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Migration Steps"
                },
                {
                    "type": "p",
                    "text": "Our goal with this migration is to get a working Next.js application as quickly as possible, so that you can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely client-side application (SPA) without migrating your existing router. This helps minimize the chances of encountering issues during the migration process and reduces merge conflicts."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 1: Install the Next.js Dependency"
                },
                {
                    "type": "p",
                    "text": "The first thing you need to do is to installnextas a dependency:"
                },
                {
                    "type": "code",
                    "code": "npminstallnext@latest"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 2: Create the Next.js Configuration File"
                },
                {
                    "type": "p",
                    "text": "Create anext.config.mjsat the root of your project. This file will hold yourNext.js configuration options."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={output:'export',// Outputs a Single-Page Application (SPA).distDir:'./dist',// Changes the build output directory to `./dist/`.}exportdefaultnextConfig"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 3: Update TypeScript Configuration"
                },
                {
                    "type": "p",
                    "text": "If you're using TypeScript, you need to update yourtsconfig.jsonfile with the following changes to make it compatible with Next.js:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"dom.iterable\",\"esnext\"],\"allowJs\":true,\"skipLibCheck\":true,\"strict\":false,\"forceConsistentCasingInFileNames\":true,\"noEmit\":true,\"esModuleInterop\":true,\"module\":\"esnext\",\"moduleResolution\":\"node\",\"resolveJsonModule\":true,\"isolatedModules\":true,\"jsx\":\"preserve\",\"baseUrl\":\".\",\"incremental\":true,\"plugins\":[{\"name\":\"next\"}],\"strictNullChecks\":true},\"include\":[\"next-env.d.ts\",\"**/*.ts\",\"**/*.tsx\",\".next/types/**/*.ts\",\"./dist/types/**/*.ts\"],\"exclude\":[\"node_modules\"]}"
                },
                {
                    "type": "p",
                    "text": "You can find more information about configuring TypeScript on theNext.js docs."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 4: Create the Root Layout"
                },
                {
                    "type": "p",
                    "text": "A Next.jsApp Routerapplication must include aroot layoutfile, which is aReact Server Componentthat will wrap all pages in your application. This file is defined at the top level of theappdirectory."
                },
                {
                    "type": "p",
                    "text": "The closest equivalent to the root layout file in a CRA application is theindex.htmlfile, which contains your<html>,<head>, and<body>tags."
                },
                {
                    "type": "p",
                    "text": "In this step, you'll convert yourindex.htmlfile into a root layout file:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a newappdirectory in yoursrcdirectory.",
                        "Create a newlayout.tsxfile inside thatappdirectory:"
                    ]
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {returnnull}"
                },
                {
                    "type": "p",
                    "text": "Good to know:.js,.jsx, or.tsxextensions can be used for Layout files."
                },
                {
                    "type": "p",
                    "text": "Copy the content of yourindex.htmlfile into the previously created<RootLayout>component while replacing thebody.div#rootandbody.scripttags with<div id=\"root\">{children}</div>:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><metacharset=\"UTF-8\"/><linkrel=\"icon\"href=\"%PUBLIC_URL%/favicon.ico\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><title>React App</title><metaname=\"description\"content=\"Web site created...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Good to know: We'll ignore themanifest file, additional iconography other than the favicon, andtesting configuration, but if these are requirements, Next.js also supports these options."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 5: Metadata"
                },
                {
                    "type": "p",
                    "text": "Next.js already includes by default themeta charsetandmeta viewporttags, so you can safely remove those from your<head>:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><linkrel=\"icon\"href=\"%PUBLIC_URL%/favicon.ico\"/><title>React App</title><metaname=\"description\"content=\"Web site created...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Anymetadata filessuch asfavicon.ico,icon.png,robots.txtare automatically added to the application<head>tag as long as you have them placed into the top level of theappdirectory. After movingall supported filesinto theappdirectory you can safely delete their<link>tags:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><title>React App</title><metaname=\"description\"content=\"Web site created...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Finally, Next.js can manage your last<head>tags with theMetadata API. Move your final metadata info into an exportedmetadataobject:"
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'React App',description:'Web site created with Next.js.',}exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body><divid=\"root\">{children}</div></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "With the above changes, you shifted from declaring everything in yourindex.htmlto using Next.js' convention-based approach built into the framework (Metadata API). This approach enables you to more easily improve your SEO and web shareability of your pages."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 6: Styles"
                },
                {
                    "type": "p",
                    "text": "Like Create React App, Next.js has built-in support forCSS Modules."
                },
                {
                    "type": "p",
                    "text": "If you're using a global CSS file, import it into yourapp/layout.tsxfile:"
                },
                {
                    "type": "code",
                    "code": "import'../index.css'// ..."
                },
                {
                    "type": "p",
                    "text": "If you're using Tailwind, you'll need to installpostcssandautoprefixer:"
                },
                {
                    "type": "code",
                    "code": "npminstallpostcssautoprefixer"
                },
                {
                    "type": "p",
                    "text": "Then, create apostcss.config.jsfile at the root of your project:"
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:{tailwindcss:{},autoprefixer:{},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 7: Create the Entrypoint Page"
                },
                {
                    "type": "p",
                    "text": "On Next.js you declare an entrypoint for your application by creating apage.tsxfile. The closest equivalent of this file on CRA is yoursrc/index.tsxfile. In this step, you’ll set up the entry point of your application."
                },
                {
                    "type": "p",
                    "text": "Create a[[...slug]]directory in yourappdirectory."
                },
                {
                    "type": "p",
                    "text": "Since this guide is aiming to first set up our Next.js as an SPA (Single Page Application), you need your page entry point to catch all possible routes of your application. For that, create a new[[...slug]]directory in yourappdirectory."
                },
                {
                    "type": "p",
                    "text": "This directory is what is called anoptional catch-all route segment. Next.js uses a file-system based router wheredirectories are used to define routes. This special directory will make sure that all routes of your application will be directed to its containingpage.tsxfile."
                },
                {
                    "type": "p",
                    "text": "Create a newpage.tsxfile inside theapp/[[...slug]]directory with the following content:"
                },
                {
                    "type": "code",
                    "code": "import'../../index.css'exportfunctiongenerateStaticParams() {return[{ slug:[''] }]}exportdefaultfunctionPage() {return'...'// We'll update this}"
                },
                {
                    "type": "p",
                    "text": "This file is aServer Component. When you runnext build, the file is prerendered into a static asset. It doesnotrequire any dynamic code."
                },
                {
                    "type": "p",
                    "text": "This file imports our global CSS and tellsgenerateStaticParamswe are only going to generate one route, the index route at/."
                },
                {
                    "type": "p",
                    "text": "Now, let's move the rest of our CRA application which will run client-only."
                },
                {
                    "type": "code",
                    "code": "'use client'importReactfrom'react'importdynamicfrom'next/dynamic'constApp=dynamic(()=>import('../../App'),{ ssr:false})exportfunctionClientOnly() {return<App/>}"
                },
                {
                    "type": "p",
                    "text": "This file is aClient Component, defined by the'use client'directive. Client Components are stillprerendered to HTMLon the server before being sent to the client."
                },
                {
                    "type": "p",
                    "text": "Since we want a client-only application to start, we can configure Next.js to disable prerendering from theAppcomponent down."
                },
                {
                    "type": "code",
                    "code": "constApp=dynamic(()=>import('../../App'),{ ssr:false})"
                },
                {
                    "type": "p",
                    "text": "Now, update your entrypoint page to use the new component:"
                },
                {
                    "type": "code",
                    "code": "import'../../index.css'import{ ClientOnly }from'./client'exportfunctiongenerateStaticParams() {return[{ slug:[''] }]}exportdefaultfunctionPage() {return<ClientOnly/>}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 8: Update Static Image Imports"
                },
                {
                    "type": "p",
                    "text": "Next.js handles static image imports slightly different from CRA. With CRA, importing an image file will return its public URL as a string:"
                },
                {
                    "type": "code",
                    "code": "importimagefrom'./img.png'exportdefaultfunctionApp() {return<imgsrc={image} />}"
                },
                {
                    "type": "p",
                    "text": "With Next.js, static image imports return an object. The object can then be used directly with the Next.js<Image>component, or you can use the object'ssrcproperty with your existing<img>tag."
                },
                {
                    "type": "p",
                    "text": "The<Image>component has the added benefits ofautomatic image optimization. The<Image>component automatically sets thewidthandheightattributes of the resulting<img>based on the image's dimensions. This prevents layout shifts when the image loads. However, this can cause issues if your app contains images with only one of their dimensions being styled without the other styled toauto. When not styled toauto, the dimension will default to the<img>dimension attribute's value, which can cause the image to appear distorted."
                },
                {
                    "type": "p",
                    "text": "Keeping the<img>tag will reduce the amount of changes in your application and prevent the above issues. You can then optionally later migrate to the<Image>component to take advantage of optimizing images byconfiguring a loader, or moving to the default Next.js server which has automatic image optimization."
                },
                {
                    "type": "p",
                    "text": "Convert absolute import paths for images imported from/publicinto relative imports:"
                },
                {
                    "type": "code",
                    "code": "// Beforeimportlogofrom'/logo.png'// Afterimportlogofrom'../public/logo.png'"
                },
                {
                    "type": "p",
                    "text": "Pass the imagesrcproperty instead of the whole image object to your<img>tag:"
                },
                {
                    "type": "code",
                    "code": "// Before<imgsrc={logo} />// After<imgsrc={logo.src} />"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can reference the public URL for the image asset based on the filename. For example,public/logo.pngwill serve the image at/logo.pngfor your application, which would be thesrcvalue."
                },
                {
                    "type": "p",
                    "text": "Warning:If you're using TypeScript, you might encounter type errors when accessing thesrcproperty. You can safely ignore those for now. They will be fixed by the end of this guide."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 9: Migrate the Environment Variables"
                },
                {
                    "type": "p",
                    "text": "Next.js has support for.envenvironment variablessimilar to CRA."
                },
                {
                    "type": "p",
                    "text": "The main difference is the prefix used to expose environment variables on the client-side. Change all environment variables with theREACT_APP_prefix toNEXT_PUBLIC_."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 10: Update Scripts inpackage.json"
                },
                {
                    "type": "p",
                    "text": "You should now be able to run your application to test if you successfully migrated to Next.js. But before that, you need to update yourscriptsin yourpackage.jsonwith Next.js related commands, and add.next,next-env.d.ts, anddistto your.gitignorefile:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\"}}"
                },
                {
                    "type": "code",
                    "code": "# ....nextnext-env.d.tsdist"
                },
                {
                    "type": "p",
                    "text": "Now runnpm run dev, and openhttp://localhost:3000. You should see your application now running on Next.js."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 11: Clean Up"
                },
                {
                    "type": "p",
                    "text": "You can now clean up your codebase from Create React App related artifacts:"
                },
                {
                    "type": "list",
                    "items": [
                        "Deletesrc/index.tsx",
                        "Deletepublic/index.html",
                        "DeletereportWebVitalssetup",
                        "Uninstall CRA dependencies (react-scripts)"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Bundler Compatibility"
                },
                {
                    "type": "p",
                    "text": "Create React App and Next.js both default to using webpack for bundling."
                },
                {
                    "type": "p",
                    "text": "When migrating your CRA application to Next.js, you might have a custom webpack configuration you're looking to migrate. Next.js supports providing acustom webpack configuration."
                },
                {
                    "type": "p",
                    "text": "Further, Next.js has support forTurbopackthroughnext dev --turboto improve your local dev performance. Turbopack supports somewebpack loadersas well for compatibility and incremental adoption."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "p",
                    "text": "If everything went according to plan, you now have a functioning Next.js application running as a single-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but you can now start making incremental changes to reap all the benefits. Here's what you might want to do next:"
                },
                {
                    "type": "list",
                    "items": [
                        "Migrate from React Router to theNext.js App Routerto get:Automatic code splittingStreaming Server-RenderingReact Server Components",
                        "Automatic code splitting",
                        "Streaming Server-Rendering",
                        "React Server Components",
                        "Optimize images with the<Image>component",
                        "Optimize fonts withnext/font",
                        "Optimize third-party scripts with the<Script>component",
                        "Update your ESLint configuration to support Next.js rules"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Automatic code splitting",
                        "Streaming Server-Rendering",
                        "React Server Components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know:Using a static exportdoes not currently supportusing theuseParamshook."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/from-vite",
            "title": "Upgrading: Migrating from Vite | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Migrating from Vite"
                },
                {
                    "type": "p",
                    "text": "This guide will help you migrate an existing Vite application to Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why Switch?"
                },
                {
                    "type": "p",
                    "text": "There are several reasons why you might want to switch from Vite to Next.js:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Slow initial page loading time"
                },
                {
                    "type": "p",
                    "text": "If you have built your application with thedefault Vite plugin for React, your application is a purely client-side application. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "The browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load some data.",
                        "Your application code grows with every new feature and extra dependency you add."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "No automatic code splitting"
                },
                {
                    "type": "p",
                    "text": "The previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Network waterfalls"
                },
                {
                    "type": "p",
                    "text": "A common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data."
                },
                {
                    "type": "p",
                    "text": "While fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fast and intentional loading states"
                },
                {
                    "type": "p",
                    "text": "With built-in support forstreaming through React Suspense, you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls."
                },
                {
                    "type": "p",
                    "text": "This enables you to build pages that are faster to load and eliminatelayout shifts."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Choose the data fetching strategy"
                },
                {
                    "type": "p",
                    "text": "Depending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Middleware"
                },
                {
                    "type": "p",
                    "text": "Next.js Middlewareallows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation andinternationalization."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Built-in Optimizations"
                },
                {
                    "type": "p",
                    "text": "Images,fonts, andthird-party scriptsoften have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Migration Steps"
                },
                {
                    "type": "p",
                    "text": "Our goal with this migration is to get a working Next.js application as quickly as possible, so that\nyou can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely\nclient-side application (SPA) without migrating your existing router. This helps minimize the\nchances of encountering issues during the migration process and reduces merge conflicts."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 1: Install the Next.js Dependency"
                },
                {
                    "type": "p",
                    "text": "The first thing you need to do is to installnextas a dependency:"
                },
                {
                    "type": "code",
                    "code": "npminstallnext@latest"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 2: Create the Next.js Configuration File"
                },
                {
                    "type": "p",
                    "text": "Create anext.config.mjsat the root of your project. This file will hold yourNext.js configuration options."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={output:'export',// Outputs a Single-Page Application (SPA).distDir:'./dist',// Changes the build output directory to `./dist/`.}exportdefaultnextConfig"
                },
                {
                    "type": "p",
                    "text": "Good to know:You can use either.jsor.mjsfor your Next.js configuration file."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 3: Update TypeScript Configuration"
                },
                {
                    "type": "p",
                    "text": "If you're using TypeScript, you need to update yourtsconfig.jsonfile with the following changes\nto make it compatible with Next.js. If you're not using TypeScript, you can skip this step."
                },
                {
                    "type": "list",
                    "items": [
                        "Remove theproject referencetotsconfig.node.json",
                        "Add./dist/types/**/*.tsand./next-env.d.tsto theincludearray",
                        "Add./node_modulesto theexcludearray",
                        "Add{ \"name\": \"next\" }to thepluginsarray incompilerOptions:\"plugins\": [{ \"name\": \"next\" }]",
                        "SetesModuleInteroptotrue:\"esModuleInterop\": true",
                        "Setjsxtopreserve:\"jsx\": \"preserve\"",
                        "SetallowJstotrue:\"allowJs\": true",
                        "SetforceConsistentCasingInFileNamestotrue:\"forceConsistentCasingInFileNames\": true",
                        "Setincrementaltotrue:\"incremental\": true"
                    ]
                },
                {
                    "type": "p",
                    "text": "Here's an example of a workingtsconfig.jsonwith those changes:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\":{\"target\":\"ES2020\",\"useDefineForClassFields\":true,\"lib\":[\"ES2020\",\"DOM\",\"DOM.Iterable\"],\"module\":\"ESNext\",\"esModuleInterop\":true,\"skipLibCheck\":true,\"moduleResolution\":\"bundler\",\"allowImportingTsExtensions\":true,\"resolveJsonModule\":true,\"isolatedModules\":true,\"noEmit\":true,\"jsx\":\"preserve\",\"strict\":true,\"noUnusedLocals\":true,\"noUnusedParameters\":true,\"noFallthroughCasesInSwitch\":true,\"allowJs\":true,\"forceConsistentCasingInFileNames\":true,\"incremental\":true,\"plugins\":[{\"name\":\"next\"}]},\"include\":[\"./src\",\"./dist/types/**/*.ts\",\"./next-env.d.ts\"],\"exclude\":[\"./node_modules\"]}"
                },
                {
                    "type": "p",
                    "text": "You can find more information about configuring TypeScript on theNext.js docs."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 4: Create the Root Layout"
                },
                {
                    "type": "p",
                    "text": "A Next.jsApp Routerapplication must include aroot layoutfile, which is aReact Server Componentthat will wrap all pages in your application. This file is defined at the top level of theappdirectory."
                },
                {
                    "type": "p",
                    "text": "The closest equivalent to the root layout file in a Vite application is theindex.htmlfile, which contains your<html>,<head>, and<body>tags."
                },
                {
                    "type": "p",
                    "text": "In this step, you'll convert yourindex.htmlfile into a root layout file:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a newappdirectory in yoursrcdirectory.",
                        "Create a newlayout.tsxfile inside thatappdirectory:"
                    ]
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {returnnull}"
                },
                {
                    "type": "p",
                    "text": "Good to know:.js,.jsx, or.tsxextensions can be used for Layout files."
                },
                {
                    "type": "list",
                    "items": [
                        "Copy the content of yourindex.htmlfile into the previously created<RootLayout>component while\nreplacing thebody.div#rootandbody.scripttags with<div id=\"root\">{children}</div>:"
                    ]
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><metacharset=\"UTF-8\"/><linkrel=\"icon\"type=\"image/svg+xml\"href=\"/icon.svg\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"/><title>My App</title><metaname=\"description\"content=\"My App is a...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js already includes by default themeta charsetandmeta viewporttags, so you\ncan safely remove those from your<head>:"
                    ]
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><linkrel=\"icon\"type=\"image/svg+xml\"href=\"/icon.svg\"/><title>My App</title><metaname=\"description\"content=\"My App is a...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Anymetadata filessuch asfavicon.ico,icon.png,robots.txtare automatically added to the application<head>tag as long as you have them placed into the top level of theappdirectory. After\nmovingall supported filesinto theappdirectory you can safely delete their<link>tags:"
                    ]
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><title>My App</title><metaname=\"description\"content=\"My App is a...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "Finally, Next.js can manage your last<head>tags with theMetadata API. Move your final metadata\ninfo into an exportedmetadataobject:"
                    ]
                },
                {
                    "type": "code",
                    "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'My App',description:'My App is a...',}exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body><divid=\"root\">{children}</div></body></html>)}"
                },
                {
                    "type": "p",
                    "text": "With the above changes, you shifted from declaring everything in yourindex.htmlto using Next.js'\nconvention-based approach built into the framework\n(Metadata API). This approach enables you\nto more easily improve your SEO and web shareability of your pages."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 5: Create the Entrypoint Page"
                },
                {
                    "type": "p",
                    "text": "On Next.js you declare an entrypoint for your application by creating apage.tsxfile. The\nclosest equivalent of this file on Vite is yourmain.tsxfile. In this step, you’ll set up the\nentrypoint of your application."
                },
                {
                    "type": "list",
                    "items": [
                        "Create a[[...slug]]directory in yourappdirectory."
                    ]
                },
                {
                    "type": "p",
                    "text": "Since in this guide we're aiming first to set up our Next.js as an SPA (Single Page Application),\nyou need your page entrypoint to catch all possible routes of your application. For that, create a\nnew[[...slug]]directory in yourappdirectory."
                },
                {
                    "type": "p",
                    "text": "This directory is what is called anoptional catch-all route segment.\nNext.js uses a file-system based router wheredirectories are used to define routes.\nThis special directory will make sure that all routes of your application will be directed to its\ncontainingpage.tsxfile."
                },
                {
                    "type": "list",
                    "items": [
                        "Create a newpage.tsxfile inside theapp/[[...slug]]directory with the following content:"
                    ]
                },
                {
                    "type": "code",
                    "code": "import'../../index.css'exportfunctiongenerateStaticParams() {return[{ slug:[''] }]}exportdefaultfunctionPage() {return'...'// We'll update this}"
                },
                {
                    "type": "p",
                    "text": "Good to know:.js,.jsx, or.tsxextensions can be used for Page files."
                },
                {
                    "type": "p",
                    "text": "This file is aServer Component. When you runnext build, the file is prerendered into a static asset. It doesnotrequire any dynamic code."
                },
                {
                    "type": "p",
                    "text": "This file imports our global CSS and tellsgenerateStaticParamswe are only going to generate one route, the index route at/."
                },
                {
                    "type": "p",
                    "text": "Now, let's move the rest of our Vite application which will run client-only."
                },
                {
                    "type": "code",
                    "code": "'use client'importReactfrom'react'importdynamicfrom'next/dynamic'constApp=dynamic(()=>import('../../App'),{ ssr:false})exportfunctionClientOnly() {return<App/>}"
                },
                {
                    "type": "p",
                    "text": "This file is aClient Component, defined by the'use client'directive. Client Components are stillprerendered to HTMLon the server before being sent to the client."
                },
                {
                    "type": "p",
                    "text": "Since we want a client-only application to start, we can configure Next.js to disable prerendering from theAppcomponent down."
                },
                {
                    "type": "code",
                    "code": "constApp=dynamic(()=>import('../../App'),{ ssr:false})"
                },
                {
                    "type": "p",
                    "text": "Now, update your entrypoint page to use the new component:"
                },
                {
                    "type": "code",
                    "code": "import'../../index.css'import{ ClientOnly }from'./client'exportfunctiongenerateStaticParams() {return[{ slug:[''] }]}exportdefaultfunctionPage() {return<ClientOnly/>}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 6: Update Static Image Imports"
                },
                {
                    "type": "p",
                    "text": "Next.js handles static image imports slightly different from Vite. With Vite, importing an image\nfile will return its public URL as a string:"
                },
                {
                    "type": "code",
                    "code": "importimagefrom'./img.png'// `image` will be '/assets/img.2d8efhg.png' in productionexportdefaultfunctionApp() {return<imgsrc={image} />}"
                },
                {
                    "type": "p",
                    "text": "With Next.js, static image imports return an object. The object can then be used directly with the\nNext.js<Image>component, or you can use the object'ssrcproperty with your existing<img>tag."
                },
                {
                    "type": "p",
                    "text": "The<Image>component has the added benefits ofautomatic image optimization. The<Image>component automatically sets thewidthandheightattributes of the resulting<img>based on\nthe image's dimensions. This prevents layout shifts when the image loads. However, this can cause\nissues if your app contains images with only one of their dimensions being styled without the other\nstyled toauto. When not styled toauto, the dimension will default to the<img>dimension\nattribute's value, which can cause the image to appear distorted."
                },
                {
                    "type": "p",
                    "text": "Keeping the<img>tag will reduce the amount of changes in your application and prevent the above\nissues. You can then optionally later migrate to the<Image>component to take advantage of optimizing images byconfiguring a loader, or moving to the default Next.js server which has automatic image optimization."
                },
                {
                    "type": "list",
                    "items": [
                        "Convert absolute import paths for images imported from/publicinto relative imports:"
                    ]
                },
                {
                    "type": "code",
                    "code": "// Beforeimportlogofrom'/logo.png'// Afterimportlogofrom'../public/logo.png'"
                },
                {
                    "type": "list",
                    "items": [
                        "Pass the imagesrcproperty instead of the whole image object to your<img>tag:"
                    ]
                },
                {
                    "type": "code",
                    "code": "// Before<imgsrc={logo} />// After<imgsrc={logo.src} />"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can reference the public URL for the image asset based on the filename. For example,public/logo.pngwill serve the image at/logo.pngfor your application, which would be thesrcvalue."
                },
                {
                    "type": "p",
                    "text": "Warning:If you're using TypeScript, you might encounter type errors when accessing thesrcproperty. You can safely ignore those for now. They will be fixed by the end of this guide."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 7: Migrate the Environment Variables"
                },
                {
                    "type": "p",
                    "text": "Next.js has support for.envenvironment variablessimilar to Vite. The main difference is the prefix used to expose environment variables on the\nclient-side."
                },
                {
                    "type": "list",
                    "items": [
                        "Change all environment variables with theVITE_prefix toNEXT_PUBLIC_."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vite exposes a few built-in environment variables on the specialimport.meta.envobject which\naren’t supported by Next.js. You need to update their usage as follows:"
                },
                {
                    "type": "list",
                    "items": [
                        "import.meta.env.MODE⇒process.env.NODE_ENV",
                        "import.meta.env.PROD⇒process.env.NODE_ENV === 'production'",
                        "import.meta.env.DEV⇒process.env.NODE_ENV !== 'production'",
                        "import.meta.env.SSR⇒typeof window !== 'undefined'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js also doesn't provide a built-inBASE_URLenvironment variable. However, you can still\nconfigure one, if you need it:"
                },
                {
                    "type": "list",
                    "items": [
                        "Add the following to your.envfile:"
                    ]
                },
                {
                    "type": "code",
                    "code": "# ...NEXT_PUBLIC_BASE_PATH=\"/some-base-path\""
                },
                {
                    "type": "list",
                    "items": [
                        "SetbasePathtoprocess.env.NEXT_PUBLIC_BASE_PATHin yournext.config.mjsfile:"
                    ]
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={output:'export',// Outputs a Single-Page Application (SPA).distDir:'./dist',// Changes the build output directory to `./dist/`.basePath:process.env.NEXT_PUBLIC_BASE_PATH,// Sets the base path to `/some-base-path`.}exportdefaultnextConfig"
                },
                {
                    "type": "list",
                    "items": [
                        "Updateimport.meta.env.BASE_URLusages toprocess.env.NEXT_PUBLIC_BASE_PATH"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 8: Update Scripts inpackage.json"
                },
                {
                    "type": "p",
                    "text": "You should now be able to run your application to test if you successfully migrated to Next.js. But\nbefore that, you need to update yourscriptsin yourpackage.jsonwith Next.js related commands,\nand add.nextandnext-env.d.tsto your.gitignore:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\"}}"
                },
                {
                    "type": "code",
                    "code": "# ....nextnext-env.d.tsdist"
                },
                {
                    "type": "p",
                    "text": "Now runnpm run dev, and openhttp://localhost:3000. You should see your application now running on Next.js."
                },
                {
                    "type": "p",
                    "text": "Example:Check outthis pull requestfor a\nworking example of a Vite application migrated to Next.js."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Step 9: Clean Up"
                },
                {
                    "type": "p",
                    "text": "You can now clean up your codebase from Vite related artifacts:"
                },
                {
                    "type": "list",
                    "items": [
                        "Deletemain.tsx",
                        "Deleteindex.html",
                        "Deletevite-env.d.ts",
                        "Deletetsconfig.node.json",
                        "Deletevite.config.ts",
                        "Uninstall Vite dependencies"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "p",
                    "text": "If everything went according to plan, you now have a functioning Next.js application running as a\nsingle-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but\nyou can now start making incremental changes to reap all the benefits. Here's what you might want to\ndo next:"
                },
                {
                    "type": "list",
                    "items": [
                        "Migrate from React Router to theNext.js App Routerto get:Automatic code splittingStreaming Server-RenderingReact Server Components",
                        "Automatic code splitting",
                        "Streaming Server-Rendering",
                        "React Server Components",
                        "Optimize images with the<Image>component",
                        "Optimize fonts withnext/font",
                        "Optimize third-party scripts with the<Script>component",
                        "Update your ESLint configuration to support Next.js rules"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Automatic code splitting",
                        "Streaming Server-Rendering",
                        "React Server Components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/version-14",
            "title": "Upgrading: Version 14 | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Version 14"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Upgrading from 13 to 14"
                },
                {
                    "type": "p",
                    "text": "To update to Next.js version 14, run the following command using your preferred package manager:"
                },
                {
                    "type": "code",
                    "code": "npminext@latestreact@latestreact-dom@latesteslint-config-next@latest"
                },
                {
                    "type": "code",
                    "code": "yarnaddnext@latestreact@latestreact-dom@latesteslint-config-next@latest"
                },
                {
                    "type": "code",
                    "code": "pnpmupnextreactreact-domeslint-config-next--latest"
                },
                {
                    "type": "code",
                    "code": "bunaddnext@latestreact@latestreact-dom@latesteslint-config-next@latest"
                },
                {
                    "type": "p",
                    "text": "Good to know:If you are using TypeScript, ensure you also upgrade@types/reactand@types/react-domto their latest versions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "v14 Summary"
                },
                {
                    "type": "list",
                    "items": [
                        "The minimum Node.js version has been bumped from 16.14 to 18.17, since 16.x has reached end-of-life.",
                        "Thenext exportcommand has been removed in favor ofoutput: 'export'config. Please see thedocsfor more information.",
                        "Thenext/serverimport forImageResponsewas renamed tonext/og. Acodemod is availableto safely and automatically rename your imports.",
                        "The@next/fontpackage has been fully removed in favor of the built-innext/font. Acodemod is availableto safely and automatically rename your imports.",
                        "The WASM target fornext-swchas been removed."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture",
            "title": "Introduction: Architecture | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Architecture"
                },
                {
                    "type": "p",
                    "text": "Learn about the Next.js architecture and how it works under the hood."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Accessibility"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fast Refresh"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Next.js Compiler"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Supported Browsers"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Turbopack"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture/accessibility",
            "title": "Architecture: Accessibility | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Accessibility"
                },
                {
                    "type": "p",
                    "text": "The Next.js team is committed to making Next.js accessible to all developers (and their end-users). By adding accessibility features to Next.js by default, we aim to make the Web more inclusive for everyone."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Route Announcements"
                },
                {
                    "type": "p",
                    "text": "When transitioning between pages rendered on the server (e.g. using the<a href>tag) screen readers and other assistive technology announce the page title when the page loads so that users understand that the page has changed."
                },
                {
                    "type": "p",
                    "text": "In addition to traditional page navigations, Next.js also supports client-side transitions for improved performance (usingnext/link). To ensure that client-side transitions are also announced to assistive technology, Next.js includes a route announcer by default."
                },
                {
                    "type": "p",
                    "text": "The Next.js route announcer looks for the page name to announce by first inspectingdocument.title, then the<h1>element, and finally the URL pathname. For the most accessible user experience, ensure that each page in your application has a unique and descriptive title."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Linting"
                },
                {
                    "type": "p",
                    "text": "Next.js provides anintegrated ESLint experienceout of the box, including custom rules for Next.js. By default, Next.js includeseslint-plugin-jsx-a11yto help catch accessibility issues early, including warning on:"
                },
                {
                    "type": "list",
                    "items": [
                        "aria-props",
                        "aria-proptypes",
                        "aria-unsupported-elements",
                        "role-has-required-aria-props",
                        "role-supports-aria-props"
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, this plugin helps ensure you add alt text toimgtags, use correctaria-*attributes, use correctroleattributes, and more."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Accessibility Resources"
                },
                {
                    "type": "list",
                    "items": [
                        "WebAIM WCAG checklist",
                        "WCAG 2.2 Guidelines",
                        "The A11y Project",
                        "Checkcolor contrast ratiosbetween foreground and background elements",
                        "Useprefers-reduced-motionwhen working with animations"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture/fast-refresh",
            "title": "Architecture: Fast Refresh | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Fast Refresh"
                },
                {
                    "type": "p",
                    "text": "Fast Refresh is a Next.js feature that gives you instantaneous feedback on\nedits made to your React components. Fast Refresh is enabled by default in all\nNext.js applications on9.4 or newer. With Next.js Fast Refresh enabled,\nmost edits should be visible within a second,without losing component\nstate."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How It Works"
                },
                {
                    "type": "list",
                    "items": [
                        "If you edit a file thatonly exports React component(s), Fast Refresh will\nupdate the code only for that file, and re-render your component. You can edit\nanything in that file, including styles, rendering logic, event handlers, or\neffects.",
                        "If you edit a file with exports thataren'tReact components, Fast Refresh\nwill re-run both that file, and the other files importing it. So if bothButton.jsandModal.jsimporttheme.js, editingtheme.jswill update\nboth components.",
                        "Finally, if youedit a filethat'simported by files outside of the\nReact tree, Fast Refreshwill fall back to doing a full reload. You\nmight have a file which renders a React component but also exports a value\nthat is imported by anon-React component. For example, maybe your\ncomponent also exports a constant, and a non-React utility file imports it. In\nthat case, consider migrating the constant to a separate file and importing it\ninto both files. This will re-enable Fast Refresh to work. Other cases can\nusually be solved in a similar way."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Error Resilience"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Syntax Errors"
                },
                {
                    "type": "p",
                    "text": "If you make a syntax error during development, you can fix it and save the file\nagain. The error will disappear automatically, so you won't need to reload the\napp.You will not lose component state."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Runtime Errors"
                },
                {
                    "type": "p",
                    "text": "If you make a mistake that leads to a runtime error inside your component,\nyou'll be greeted with a contextual overlay. Fixing the error will automatically\ndismiss the overlay, without reloading the app."
                },
                {
                    "type": "p",
                    "text": "Component state will be retained if the error did not occur during rendering. If\nthe error did occur during rendering, React will remount your application using\nthe updated code."
                },
                {
                    "type": "p",
                    "text": "If you haveerror boundariesin your app (which is a good idea for graceful failures in production), they\nwill retry rendering on the next edit after a rendering error. This means having\nan error boundary can prevent you from always getting reset to the root app\nstate. However, keep in mind that error boundaries shouldn't betoogranular.\nThey are used by React in production, and should always be designed\nintentionally."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Limitations"
                },
                {
                    "type": "p",
                    "text": "Fast Refresh tries to preserve local React state in the component you're\nediting, but only if it's safe to do so. Here's a few reasons why you might see\nlocal state being reset on every edit to a file:"
                },
                {
                    "type": "list",
                    "items": [
                        "Local state is not preserved for class components (only function components\nand Hooks preserve state).",
                        "The file you're editing might haveotherexports in addition to a React\ncomponent.",
                        "Sometimes, a file would export the result of calling a higher-order component\nlikeHOC(WrappedComponent). If the returned component is a\nclass, its state will be reset.",
                        "Anonymous arrow functions likeexport default () => <div />;cause Fast Refresh to not preserve local component state. For large codebases you can use ourname-default-componentcodemod."
                    ]
                },
                {
                    "type": "p",
                    "text": "As more of your codebase moves to function components and Hooks, you can expect\nstate to be preserved in more cases."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tips"
                },
                {
                    "type": "list",
                    "items": [
                        "Fast Refresh preserves React local state in function components (and Hooks) by\ndefault.",
                        "Sometimes you might want toforcethe state to be reset, and a component to\nbe remounted. For example, this can be handy if you're tweaking an animation\nthat only happens on mount. To do this, you can add// @refresh resetanywhere in the file you're editing. This directive is local to the file, and\ninstructs Fast Refresh to remount components defined in that file on every\nedit.",
                        "You can putconsole.logordebugger;into the components you edit during\ndevelopment.",
                        "Remember that imports are case sensitive. Both fast and full refresh can fail,\nwhen your import doesn't match the actual filename.\nFor example,'./header'vs'./Header'."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fast Refresh and Hooks"
                },
                {
                    "type": "p",
                    "text": "When possible, Fast Refresh attempts to preserve the state of your component\nbetween edits. In particular,useStateanduseRefpreserve their previous\nvalues as long as you don't change their arguments or the order of the Hook\ncalls."
                },
                {
                    "type": "p",
                    "text": "Hooks with dependencies—such asuseEffect,useMemo, anduseCallback—willalwaysupdate during Fast Refresh. Their list of dependencies will be ignored\nwhile Fast Refresh is happening."
                },
                {
                    "type": "p",
                    "text": "For example, when you edituseMemo(() => x * 2, [x])touseMemo(() => x * 10, [x]), it will re-run even thoughx(the dependency)\nhas not changed. If React didn't do that, your edit wouldn't reflect on the\nscreen!"
                },
                {
                    "type": "p",
                    "text": "Sometimes, this can lead to unexpected results. For example, even auseEffectwith an empty array of dependencies would still re-run once during Fast Refresh."
                },
                {
                    "type": "p",
                    "text": "However, writing code resilient to occasional re-running ofuseEffectis a good practice even\nwithout Fast Refresh. It will make it easier for you to introduce new dependencies to it later on\nand it's enforced byReact Strict Mode,\nwhich we highly recommend enabling."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture/nextjs-compiler",
            "title": "Architecture: Next.js Compiler | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Next.js Compiler"
                },
                {
                    "type": "p",
                    "text": "The Next.js Compiler, written in Rust usingSWC, allows Next.js to transform and minify your JavaScript code for production. This replaces Babel for individual files and Terser for minifying output bundles."
                },
                {
                    "type": "p",
                    "text": "Compilation using the Next.js Compiler is 17x faster than Babel and enabled by default since Next.js version 12. If you have an existing Babel configuration or are usingunsupported features, your application will opt-out of the Next.js Compiler and continue using Babel."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why SWC?"
                },
                {
                    "type": "p",
                    "text": "SWCis an extensible Rust-based platform for the next generation of fast developer tools."
                },
                {
                    "type": "p",
                    "text": "SWC can be used for compilation, minification, bundling, and more – and is designed to be extended. It's something you can call to perform code transformations (either built-in or custom). Running those transformations happens through higher-level tools like Next.js."
                },
                {
                    "type": "p",
                    "text": "We chose to build on SWC for a few reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Extensibility:SWC can be used as a Crate inside Next.js, without having to fork the library or workaround design constraints.",
                        "Performance:We were able to achieve ~3x faster Fast Refresh and ~5x faster builds in Next.js by switching to SWC, with more room for optimization still in progress.",
                        "WebAssembly:Rust's support for WASM is essential for supporting all possible platforms and taking Next.js development everywhere.",
                        "Community:The Rust community and ecosystem are amazing and still growing."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Supported Features"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Styled Components"
                },
                {
                    "type": "p",
                    "text": "We're working to portbabel-plugin-styled-componentsto the Next.js Compiler."
                },
                {
                    "type": "p",
                    "text": "First, update to the latest version of Next.js:npm install next@latest. Then, update yournext.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={compiler:{styledComponents:true,},}"
                },
                {
                    "type": "p",
                    "text": "For advanced use cases, you can configure individual properties for styled-components compilation."
                },
                {
                    "type": "p",
                    "text": "Note:minify,transpileTemplateLiteralsandpureare not yet implemented. You can follow the progresshere.ssranddisplayNametransforms are the main requirement for usingstyled-componentsin Next.js."
                },
                {
                    "type": "code",
                    "code": "module.exports={compiler:{// see https://styled-components.com/docs/tooling#babel-plugin for more info on the options.styledComponents:{// Enabled by default in development, disabled in production to reduce file size,// setting this will override the default for all environments.displayName?:boolean,// Enabled by default.ssr?:boolean,// Enabled by default.fileName?:boolean,// Empty by default.topLevelImportPaths?:string[],// Defaults to [\"index\"].meaninglessFileNames?:string[],// Enabled by default.cssProp?:boolean,// Empty by default.namespace?:string,// Not supported yet.minify?:boolean,// Not supported yet.transpileTemplateLiterals?:boolean,// Not supported yet.pure?:boolean,},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Jest"
                },
                {
                    "type": "p",
                    "text": "The Next.js Compiler transpiles your tests and simplifies configuring Jest together with Next.js including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Auto mocking of.css,.module.css(and their.scssvariants), and image imports",
                        "Automatically sets uptransformusing SWC",
                        "Loading.env(and all variants) intoprocess.env",
                        "Ignoresnode_modulesfrom test resolving and transforms",
                        "Ignoring.nextfrom test resolving",
                        "Loadsnext.config.jsfor flags that enable experimental SWC transforms"
                    ]
                },
                {
                    "type": "p",
                    "text": "First, update to the latest version of Next.js:npm install next@latest. Then, update yourjest.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "constnextJest=require('next/jest')// Providing the path to your Next.js app which will enable loading next.config.js and .env filesconstcreateJestConfig=nextJest({ dir:'./'})// Any custom config you want to pass to JestconstcustomJestConfig={setupFilesAfterEnv:['<rootDir>/jest.setup.js'],}// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is asyncmodule.exports=createJestConfig(customJestConfig)"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Relay"
                },
                {
                    "type": "p",
                    "text": "To enableRelaysupport:"
                },
                {
                    "type": "code",
                    "code": "module.exports={compiler:{relay:{// This should match relay.config.jssrc:'./',artifactDirectory:'./__generated__',language:'typescript',eagerEsModules:false,},},}"
                },
                {
                    "type": "p",
                    "text": "Good to know: In Next.js, all JavaScript files inpagesdirectory are considered routes. So, forrelay-compileryou'll need to specifyartifactDirectoryconfiguration settings outside of thepages, otherwiserelay-compilerwill generate files next to the source file in the__generated__directory, and this file will be considered a route, which will break production builds."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Remove React Properties"
                },
                {
                    "type": "p",
                    "text": "Allows to remove JSX properties. This is often used for testing. Similar tobabel-plugin-react-remove-properties."
                },
                {
                    "type": "p",
                    "text": "To remove properties matching the default regex^data-test:"
                },
                {
                    "type": "code",
                    "code": "module.exports={compiler:{reactRemoveProperties:true,},}"
                },
                {
                    "type": "p",
                    "text": "To remove custom properties:"
                },
                {
                    "type": "code",
                    "code": "module.exports={compiler:{// The regexes defined here are processed in Rust so the syntax is different from// JavaScript `RegExp`s. See https://docs.rs/regex.reactRemoveProperties:{ properties:['^data-custom$'] },},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Remove Console"
                },
                {
                    "type": "p",
                    "text": "This transform allows for removing allconsole.*calls in application code (notnode_modules). Similar tobabel-plugin-transform-remove-console."
                },
                {
                    "type": "p",
                    "text": "Remove allconsole.*calls:"
                },
                {
                    "type": "code",
                    "code": "module.exports={compiler:{removeConsole:true,},}"
                },
                {
                    "type": "p",
                    "text": "Removeconsole.*output exceptconsole.error:"
                },
                {
                    "type": "code",
                    "code": "module.exports={compiler:{removeConsole:{exclude:['error'],},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Legacy Decorators"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically detectexperimentalDecoratorsinjsconfig.jsonortsconfig.json. Legacy decorators are commonly used with older versions of libraries likemobx."
                },
                {
                    "type": "p",
                    "text": "This flag is only supported for compatibility with existing applications. We do not recommend using legacy decorators in new applications."
                },
                {
                    "type": "p",
                    "text": "First, update to the latest version of Next.js:npm install next@latest. Then, update yourjsconfig.jsonortsconfig.jsonfile:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\": {\"experimentalDecorators\":true}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "importSource"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically detectjsxImportSourceinjsconfig.jsonortsconfig.jsonand apply that. This is commonly used with libraries likeTheme UI."
                },
                {
                    "type": "p",
                    "text": "First, update to the latest version of Next.js:npm install next@latest. Then, update yourjsconfig.jsonortsconfig.jsonfile:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\": {\"jsxImportSource\":\"theme-ui\"}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Emotion"
                },
                {
                    "type": "p",
                    "text": "We're working to port@emotion/babel-pluginto the Next.js Compiler."
                },
                {
                    "type": "p",
                    "text": "First, update to the latest version of Next.js:npm install next@latest. Then, update yournext.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={compiler:{emotion:boolean|{// default is true. It will be disabled when build type is production.sourceMap?:boolean,// default is 'dev-only'.autoLabel?:'never'|'dev-only'|'always',// default is '[local]'.// Allowed values: `[local]` `[filename]` and `[dirname]`// This option only works when autoLabel is set to 'dev-only' or 'always'.// It allows you to define the format of the resulting label.// The format is defined via string where variable parts are enclosed in square brackets [].// For example labelFormat: \"my-classname--[local]\", where [local] will be replaced with the name of the variable the result is assigned to.labelFormat?:string,// default is undefined.// This option allows you to tell the compiler what imports it should// look at to determine what it should transform so if you re-export// Emotion's exports, you can still use transforms.importMap?:{[packageName: string]:{[exportName: string]:{canonicalImport?:[string,string],styledBaseImport?:[string,string],}}},},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Minification"
                },
                {
                    "type": "p",
                    "text": "Next.js' swc compiler is used for minification by default since v13. This is 7x faster than Terser."
                },
                {
                    "type": "p",
                    "text": "If Terser is still needed for any reason this can be configured."
                },
                {
                    "type": "code",
                    "code": "module.exports={swcMinify:false,}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Module Transpilation"
                },
                {
                    "type": "p",
                    "text": "Next.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (node_modules). This replaces thenext-transpile-modulespackage."
                },
                {
                    "type": "code",
                    "code": "module.exports={transpilePackages:['@acme/ui','lodash-es'],}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Modularize Imports"
                },
                {
                    "type": "p",
                    "text": "This option has been superseded byoptimizePackageImportsin Next.js 13.5. We recommend upgrading to use the new option that does not require manual configuration of import paths."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Experimental Features"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "SWC Trace profiling"
                },
                {
                    "type": "p",
                    "text": "You can generate SWC's internal transform traces as chromium'strace event format."
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{swcTraceProfiling:true,},}"
                },
                {
                    "type": "p",
                    "text": "Once enabled, swc will generate trace named asswc-trace-profile-${timestamp}.jsonunder.next/. Chromium's trace viewer (chrome://tracing/,https://ui.perfetto.dev/), or compatible flamegraph viewer (https://www.speedscope.app/) can load & visualize generated traces."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "SWC Plugins (Experimental)"
                },
                {
                    "type": "p",
                    "text": "You can configure swc's transform to use SWC's experimental plugin support written in wasm to customize transformation behavior."
                },
                {
                    "type": "code",
                    "code": "module.exports={experimental:{swcPlugins:[['plugin',{...pluginOptions,},],],},}"
                },
                {
                    "type": "p",
                    "text": "swcPluginsaccepts an array of tuples for configuring plugins. A tuple for the plugin contains the path to the plugin and an object for plugin configuration. The path to the plugin can be an npm module package name or an absolute path to the.wasmbinary itself."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Unsupported Features"
                },
                {
                    "type": "p",
                    "text": "When your application has a.babelrcfile, Next.js will automatically fall back to using Babel for transforming individual files. This ensures backwards compatibility with existing applications that leverage custom Babel plugins."
                },
                {
                    "type": "p",
                    "text": "If you're using a custom Babel setup,please share your configuration. We're working to port as many commonly used Babel transformations as possible, as well as supporting plugins in the future."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Version History"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture/supported-browsers",
            "title": "Architecture: Supported Browsers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Supported Browsers"
                },
                {
                    "type": "p",
                    "text": "Next.js supportsmodern browserswith zero configuration."
                },
                {
                    "type": "list",
                    "items": [
                        "Chrome 64+",
                        "Edge 79+",
                        "Firefox 67+",
                        "Opera 51+",
                        "Safari 12+"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Browserslist"
                },
                {
                    "type": "p",
                    "text": "If you would like to target specific browsers or features, Next.js supportsBrowserslistconfiguration in yourpackage.jsonfile. Next.js uses the following Browserslist configuration by default:"
                },
                {
                    "type": "code",
                    "code": "{\"browserslist\":[\"chrome 64\",\"edge 79\",\"firefox 67\",\"opera 51\",\"safari 12\"]}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Polyfills"
                },
                {
                    "type": "p",
                    "text": "We injectwidely used polyfills, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "fetch()— Replacing:whatwg-fetchandunfetch.",
                        "URL— Replacing: theurlpackage (Node.js API).",
                        "Object.assign()— Replacing:object-assign,object.assign, andcore-js/object/assign."
                    ]
                },
                {
                    "type": "p",
                    "text": "If any of your dependencies include these polyfills, they’ll be eliminated automatically from the production build to avoid duplication."
                },
                {
                    "type": "p",
                    "text": "In addition, to reduce bundle size, Next.js will only load these polyfills for browsers that require them. The majority of the web traffic globally will not download these polyfills."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Polyfills"
                },
                {
                    "type": "p",
                    "text": "If your own code or any external npm dependencies require features not supported by your target browsers (such as IE 11), you need to add polyfills yourself."
                },
                {
                    "type": "p",
                    "text": "In this case, you should add a top-level import for thespecific polyfillyou need in yourCustom<App>or the individual component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "JavaScript Language Features"
                },
                {
                    "type": "p",
                    "text": "Next.js allows you to use the latest JavaScript features out of the box. In addition toES6 features, Next.js also supports:"
                },
                {
                    "type": "list",
                    "items": [
                        "Async/await(ES2017)",
                        "Object Rest/Spread Properties(ES2018)",
                        "Dynamicimport()(ES2020)",
                        "Optional Chaining(ES2020)",
                        "Nullish Coalescing(ES2020)",
                        "Class FieldsandStatic Properties(ES2022)",
                        "and more!"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "TypeScript Features"
                },
                {
                    "type": "p",
                    "text": "Next.js has built-in TypeScript support.Learn more here."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing Babel Config (Advanced)"
                },
                {
                    "type": "p",
                    "text": "You can customize babel configuration.Learn more here."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture/turbopack",
            "title": "Architecture: Turbopack | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Turbopack"
                },
                {
                    "type": "p",
                    "text": "Turbopack(beta) is an incremental bundler optimized for JavaScript and TypeScript, written in Rust, and built into Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage"
                },
                {
                    "type": "p",
                    "text": "Turbopack can be used in Next.js in both thepagesandappdirectories for faster local development. To enable Turbopack, use the--turboflag when running the Next.js development server."
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next dev --turbo\",\"build\":\"next build\",\"start\":\"next start\",\"lint\":\"next lint\"}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Supported features"
                },
                {
                    "type": "p",
                    "text": "Turbopack in Next.js requires zero-configuration for most users and can be extended for more advanced use cases. To learn more about the currently supported features for Turbopack, view theAPI Reference."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Unsupported features"
                },
                {
                    "type": "p",
                    "text": "Turbopack currently only supportsnext devand does not supportnext build. We are currently working on support for builds as we move closer towards stability."
                },
                {
                    "type": "p",
                    "text": "These features are currently not supported:"
                },
                {
                    "type": "list",
                    "items": [
                        "webpack()configuration innext.config.jsTurbopack replaces Webpack, this means that webpack configuration is not supported.To configure Turbopack,see the documentation.A subset ofWebpack loadersare supported in Turbopack.",
                        "Turbopack replaces Webpack, this means that webpack configuration is not supported.",
                        "To configure Turbopack,see the documentation.",
                        "A subset ofWebpack loadersare supported in Turbopack.",
                        "Babel (.babelrc)Turbopack leverages theSWCcompiler for all transpilation and optimizations. This means that Babel is not included by default.If you have a.babelrcfile, you might no longer need it because Next.js includes common Babel plugins as SWC transforms that can be enabled. You can read more about this in thecompiler documentation.If you still need to use Babel after verifying your particular use case is not covered, you can leverage Turbopack'ssupport for custom webpack loadersto includebabel-loader.",
                        "Turbopack leverages theSWCcompiler for all transpilation and optimizations. This means that Babel is not included by default.",
                        "If you have a.babelrcfile, you might no longer need it because Next.js includes common Babel plugins as SWC transforms that can be enabled. You can read more about this in thecompiler documentation.",
                        "If you still need to use Babel after verifying your particular use case is not covered, you can leverage Turbopack'ssupport for custom webpack loadersto includebabel-loader.",
                        "Creating a root layout automatically in App Router.This behavior is currently not supported since it changes input files, instead, an error will be shown for you manually add a root layout in the desired location.",
                        "This behavior is currently not supported since it changes input files, instead, an error will be shown for you manually add a root layout in the desired location.",
                        "@next/font(legacy font support).@next/fontis deprecated in favor ofnext/font.next/fontis fully supported with Turbopack.",
                        "@next/fontis deprecated in favor ofnext/font.next/fontis fully supported with Turbopack.",
                        "new Worker('file', import.meta.url).We are planning to implement this in the future.",
                        "We are planning to implement this in the future.",
                        "Relay transformsWe are planning to implement this in the future.",
                        "We are planning to implement this in the future.",
                        "experimental.nextScriptWorkersWe are planning to implement this in the future.",
                        "We are planning to implement this in the future.",
                        "AMP.We are currently not planning to support AMP in Next.js with Turbopack.",
                        "We are currently not planning to support AMP in Next.js with Turbopack.",
                        "Yarn PnPWe are currently not planning to support Yarn PnP in Next.js with Turbopack.",
                        "We are currently not planning to support Yarn PnP in Next.js with Turbopack.",
                        "experimental.urlImportsWe are currently not planning to supportexperimental.urlImportsin Next.js with Turbopack.",
                        "We are currently not planning to supportexperimental.urlImportsin Next.js with Turbopack."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Turbopack replaces Webpack, this means that webpack configuration is not supported.",
                        "To configure Turbopack,see the documentation.",
                        "A subset ofWebpack loadersare supported in Turbopack."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Turbopack leverages theSWCcompiler for all transpilation and optimizations. This means that Babel is not included by default.",
                        "If you have a.babelrcfile, you might no longer need it because Next.js includes common Babel plugins as SWC transforms that can be enabled. You can read more about this in thecompiler documentation.",
                        "If you still need to use Babel after verifying your particular use case is not covered, you can leverage Turbopack'ssupport for custom webpack loadersto includebabel-loader."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This behavior is currently not supported since it changes input files, instead, an error will be shown for you manually add a root layout in the desired location."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "@next/fontis deprecated in favor ofnext/font.next/fontis fully supported with Turbopack."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "We are planning to implement this in the future."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "We are planning to implement this in the future."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "We are planning to implement this in the future."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "We are currently not planning to support AMP in Next.js with Turbopack."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "We are currently not planning to support Yarn PnP in Next.js with Turbopack."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "We are currently not planning to supportexperimental.urlImportsin Next.js with Turbopack."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Generating Trace Files"
                },
                {
                    "type": "p",
                    "text": "Trace files allow the Next.js team to investigate and improve performance metrics and memory usage. To generate a trace file, appendNEXT_TURBOPACK_TRACING=1to thenext dev --turbocommand, this will generate a.next/trace.logfile."
                },
                {
                    "type": "p",
                    "text": "When reporting issues related to Turbopack performance and memory usage, please include the trace file in yourGitHubissue."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/basic-features/built-in-css-support",
            "title": "Building Your Application: Styling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Styling"
                },
                {
                    "type": "p",
                    "text": "Next.js supports different ways of styling your application, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Global CSS: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.",
                        "CSS Modules: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.",
                        "Tailwind CSS: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.",
                        "Sass: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.",
                        "CSS-in-JS: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about each approach by exploring their respective documentation:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CSS Modules"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Tailwind CSS"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CSS-in-JS"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sass"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation",
            "title": "Building Your Application: Data Fetching | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Data Fetching"
                },
                {
                    "type": "p",
                    "text": "Data fetching in Next.js allows you to render your content in different ways, depending on your application's use case. These include pre-rendering withServer-side RenderingorStatic Generation, and updating or creating content at runtime withIncremental Static Regeneration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Examples"
                },
                {
                    "type": "list",
                    "items": [
                        "WordPress Example(Demo)",
                        "Blog Starter using markdown files(Demo)",
                        "DatoCMS Example(Demo)",
                        "TakeShape Example(Demo)",
                        "Sanity Example(Demo)",
                        "Prismic Example(Demo)",
                        "Contentful Example(Demo)",
                        "Strapi Example(Demo)",
                        "Prepr Example(Demo)",
                        "Agility CMS Example(Demo)",
                        "Cosmic Example(Demo)",
                        "ButterCMS Example(Demo)",
                        "Storyblok Example(Demo)",
                        "GraphCMS Example(Demo)",
                        "Kontent Example(Demo)",
                        "Static Tweet Demo",
                        "Enterspeed Example(Demo)"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "getStaticProps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "getStaticPaths"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Forms and Mutations"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "getServerSideProps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Incremental Static Regeneration (ISR)"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client-side Fetching"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/basic-features/fast-refresh",
            "title": "Architecture: Fast Refresh | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Fast Refresh"
                },
                {
                    "type": "p",
                    "text": "Fast Refresh is a Next.js feature that gives you instantaneous feedback on\nedits made to your React components. Fast Refresh is enabled by default in all\nNext.js applications on9.4 or newer. With Next.js Fast Refresh enabled,\nmost edits should be visible within a second,without losing component\nstate."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How It Works"
                },
                {
                    "type": "list",
                    "items": [
                        "If you edit a file thatonly exports React component(s), Fast Refresh will\nupdate the code only for that file, and re-render your component. You can edit\nanything in that file, including styles, rendering logic, event handlers, or\neffects.",
                        "If you edit a file with exports thataren'tReact components, Fast Refresh\nwill re-run both that file, and the other files importing it. So if bothButton.jsandModal.jsimporttheme.js, editingtheme.jswill update\nboth components.",
                        "Finally, if youedit a filethat'simported by files outside of the\nReact tree, Fast Refreshwill fall back to doing a full reload. You\nmight have a file which renders a React component but also exports a value\nthat is imported by anon-React component. For example, maybe your\ncomponent also exports a constant, and a non-React utility file imports it. In\nthat case, consider migrating the constant to a separate file and importing it\ninto both files. This will re-enable Fast Refresh to work. Other cases can\nusually be solved in a similar way."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Error Resilience"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Syntax Errors"
                },
                {
                    "type": "p",
                    "text": "If you make a syntax error during development, you can fix it and save the file\nagain. The error will disappear automatically, so you won't need to reload the\napp.You will not lose component state."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Runtime Errors"
                },
                {
                    "type": "p",
                    "text": "If you make a mistake that leads to a runtime error inside your component,\nyou'll be greeted with a contextual overlay. Fixing the error will automatically\ndismiss the overlay, without reloading the app."
                },
                {
                    "type": "p",
                    "text": "Component state will be retained if the error did not occur during rendering. If\nthe error did occur during rendering, React will remount your application using\nthe updated code."
                },
                {
                    "type": "p",
                    "text": "If you haveerror boundariesin your app (which is a good idea for graceful failures in production), they\nwill retry rendering on the next edit after a rendering error. This means having\nan error boundary can prevent you from always getting reset to the root app\nstate. However, keep in mind that error boundaries shouldn't betoogranular.\nThey are used by React in production, and should always be designed\nintentionally."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Limitations"
                },
                {
                    "type": "p",
                    "text": "Fast Refresh tries to preserve local React state in the component you're\nediting, but only if it's safe to do so. Here's a few reasons why you might see\nlocal state being reset on every edit to a file:"
                },
                {
                    "type": "list",
                    "items": [
                        "Local state is not preserved for class components (only function components\nand Hooks preserve state).",
                        "The file you're editing might haveotherexports in addition to a React\ncomponent.",
                        "Sometimes, a file would export the result of calling a higher-order component\nlikeHOC(WrappedComponent). If the returned component is a\nclass, its state will be reset.",
                        "Anonymous arrow functions likeexport default () => <div />;cause Fast Refresh to not preserve local component state. For large codebases you can use ourname-default-componentcodemod."
                    ]
                },
                {
                    "type": "p",
                    "text": "As more of your codebase moves to function components and Hooks, you can expect\nstate to be preserved in more cases."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tips"
                },
                {
                    "type": "list",
                    "items": [
                        "Fast Refresh preserves React local state in function components (and Hooks) by\ndefault.",
                        "Sometimes you might want toforcethe state to be reset, and a component to\nbe remounted. For example, this can be handy if you're tweaking an animation\nthat only happens on mount. To do this, you can add// @refresh resetanywhere in the file you're editing. This directive is local to the file, and\ninstructs Fast Refresh to remount components defined in that file on every\nedit.",
                        "You can putconsole.logordebugger;into the components you edit during\ndevelopment.",
                        "Remember that imports are case sensitive. Both fast and full refresh can fail,\nwhen your import doesn't match the actual filename.\nFor example,'./header'vs'./Header'."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fast Refresh and Hooks"
                },
                {
                    "type": "p",
                    "text": "When possible, Fast Refresh attempts to preserve the state of your component\nbetween edits. In particular,useStateanduseRefpreserve their previous\nvalues as long as you don't change their arguments or the order of the Hook\ncalls."
                },
                {
                    "type": "p",
                    "text": "Hooks with dependencies—such asuseEffect,useMemo, anduseCallback—willalwaysupdate during Fast Refresh. Their list of dependencies will be ignored\nwhile Fast Refresh is happening."
                },
                {
                    "type": "p",
                    "text": "For example, when you edituseMemo(() => x * 2, [x])touseMemo(() => x * 10, [x]), it will re-run even thoughx(the dependency)\nhas not changed. If React didn't do that, your edit wouldn't reflect on the\nscreen!"
                },
                {
                    "type": "p",
                    "text": "Sometimes, this can lead to unexpected results. For example, even auseEffectwith an empty array of dependencies would still re-run once during Fast Refresh."
                },
                {
                    "type": "p",
                    "text": "However, writing code resilient to occasional re-running ofuseEffectis a good practice even\nwithout Fast Refresh. It will make it easier for you to introduce new dependencies to it later on\nand it's enforced byReact Strict Mode,\nwhich we highly recommend enabling."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/basic-features/static-file-serving",
            "title": "Optimizing: Static Assets | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Static Assets"
                },
                {
                    "type": "p",
                    "text": "Next.js can serve static files, like images, under a folder calledpublicin the root directory. Files insidepubliccan then be referenced by your code starting from the base URL (/)."
                },
                {
                    "type": "p",
                    "text": "For example, the filepublic/avatars/me.pngcan be viewed by visiting the/avatars/me.pngpath. The code to display that image might look like:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'exportfunctionAvatar({ id,alt }) {return<Imagesrc={`/avatars/${id}.png`}alt={alt}width=\"64\"height=\"64\"/>}exportfunctionAvatarOfMe() {return<Avatarid=\"me\"alt=\"A portrait of me\"/>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Caching"
                },
                {
                    "type": "p",
                    "text": "Next.js cannot safely cache assets in thepublicfolder because they may change. The default caching headers applied are:"
                },
                {
                    "type": "code",
                    "code": "Cache-Control:public,max-age=0"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Robots, Favicons, and others"
                },
                {
                    "type": "p",
                    "text": "The folder is also useful forrobots.txt,favicon.ico, Google Site Verification, and any other static files (including.html). But make sure to not have a static file with the same name as a file in thepages/directory, as this will result in an error.Read more."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "The directory must be namedpublic. The name cannot be changed and it's the only directory used to serve static assets.",
                        "Only assets that are in thepublicdirectory atbuild timewill be served by Next.js. Files added at request time won't be available. We recommend using a third-party service likeVercel Blobfor persistent file storage."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/getting-started",
            "title": "Introduction | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Introduction"
                },
                {
                    "type": "p",
                    "text": "Welcome to the Next.js documentation!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Next.js?"
                },
                {
                    "type": "p",
                    "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations."
                },
                {
                    "type": "p",
                    "text": "Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration."
                },
                {
                    "type": "p",
                    "text": "Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Main Features"
                },
                {
                    "type": "p",
                    "text": "Some of the main Next.js features include:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How to Use These Docs"
                },
                {
                    "type": "p",
                    "text": "On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case."
                },
                {
                    "type": "p",
                    "text": "On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut (Ctrl+KorCmd+K)."
                },
                {
                    "type": "p",
                    "text": "To get started, checkout theInstallationguide."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "App Router vs Pages Router"
                },
                {
                    "type": "p",
                    "text": "Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications."
                },
                {
                    "type": "p",
                    "text": "At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between theApp Routerand thePages Routerfeatures. Since there are features that are unique to each directory, it's important to keep track of which tab is selected."
                },
                {
                    "type": "p",
                    "text": "The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-Requisite Knowledge"
                },
                {
                    "type": "p",
                    "text": "Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept."
                },
                {
                    "type": "p",
                    "text": "To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out ourReact Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js bybuilding a dashboard application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Accessibility"
                },
                {
                    "type": "p",
                    "text": "For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Join our Community"
                },
                {
                    "type": "p",
                    "text": "If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub Discussions,Discord,Twitter, andReddit."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Getting Started"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Building Your Application"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Building Your Application"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Architecture"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Community"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/getting-started/installation",
            "title": "Getting Started: Installation | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Installation"
                },
                {
                    "type": "p",
                    "text": "System Requirements:"
                },
                {
                    "type": "list",
                    "items": [
                        "Node.js 18.17or later.",
                        "macOS, Windows (including WSL), and Linux are supported."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Automatic Installation"
                },
                {
                    "type": "p",
                    "text": "We recommend starting a new Next.js app usingcreate-next-app, which sets up everything automatically for you. To create a project, run:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latest"
                },
                {
                    "type": "p",
                    "text": "On installation, you'll see the following prompts:"
                },
                {
                    "type": "code",
                    "code": "What is your project named? my-appWould you like to use TypeScript? No / YesWould you like to use ESLint? No / YesWould you like to use Tailwind CSS? No / YesWould you like to use `src/` directory? No / YesWould you like to use App Router? (recommended) No / YesWould you like to customize the default import alias (@/*)? No / YesWhat import alias would you like configured? @/*"
                },
                {
                    "type": "p",
                    "text": "After the prompts,create-next-appwill create a folder with your project name and install the required dependencies."
                },
                {
                    "type": "p",
                    "text": "If you're new to Next.js, see theproject structuredocs for an overview of all the possible files and folders in your application."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js now ships withTypeScript,ESLint, andTailwind CSSconfiguration by default.",
                        "You can optionally use asrcdirectoryin the root of your project to separate your application's code from configuration files."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Manual Installation"
                },
                {
                    "type": "p",
                    "text": "To manually create a new Next.js app, install the required packages:"
                },
                {
                    "type": "code",
                    "code": "npminstallnext@latestreact@latestreact-dom@latest"
                },
                {
                    "type": "p",
                    "text": "Open yourpackage.jsonfile and add the followingscripts:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\",\"lint\":\"next lint\"}}"
                },
                {
                    "type": "p",
                    "text": "These scripts refer to the different stages of developing an application:"
                },
                {
                    "type": "list",
                    "items": [
                        "dev: runsnext devto start Next.js in development mode.",
                        "build: runsnext buildto build the application for production usage.",
                        "start: runsnext startto start a Next.js production server.",
                        "lint: runsnext lintto set up Next.js' built-in ESLint configuration."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Creating directories"
                },
                {
                    "type": "p",
                    "text": "Next.js uses file-system routing, which means the routes in your application are determined by how you structure your files."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Theappdirectory"
                },
                {
                    "type": "p",
                    "text": "For new applications, we recommend using theApp Router. This router allows you to use React's latest features and is an evolution of thePages Routerbased on community feedback."
                },
                {
                    "type": "p",
                    "text": "Create anapp/folder, then add alayout.tsxandpage.tsxfile. These will be rendered when the user visits the root of your application (/)."
                },
                {
                    "type": "p",
                    "text": "Create aroot layoutinsideapp/layout.tsxwith the required<html>and<body>tags:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
                },
                {
                    "type": "p",
                    "text": "Finally, create a home pageapp/page.tsxwith some initial content:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {return<h1>Hello, Next.js!</h1>}"
                },
                {
                    "type": "p",
                    "text": "Good to know: If you forget to createlayout.tsx, Next.js will automatically create this file when running the development server withnext dev."
                },
                {
                    "type": "p",
                    "text": "Learn more aboutusing the App Router."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Thepagesdirectory (optional)"
                },
                {
                    "type": "p",
                    "text": "If you prefer to use the Pages Router instead of the App Router, you can create apages/directory at the root of your project."
                },
                {
                    "type": "p",
                    "text": "Then, add anindex.tsxfile inside yourpagesfolder. This will be your home page (/):"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPage() {return<h1>Hello, Next.js!</h1>}"
                },
                {
                    "type": "p",
                    "text": "Next, add an_app.tsxfile insidepages/to define the global layout. Learn more about thecustom App file."
                },
                {
                    "type": "code",
                    "code": "importtype{ AppProps }from'next/app'exportdefaultfunctionApp({ Component,pageProps }:AppProps) {return<Component{...pageProps} />}"
                },
                {
                    "type": "p",
                    "text": "Finally, add a_document.tsxfile insidepages/to control the initial response from the server. Learn more about thecustom Document file."
                },
                {
                    "type": "code",
                    "code": "import{ Html,Head,Main,NextScript }from'next/document'exportdefaultfunctionDocument() {return(<Html><Head/><body><Main/><NextScript/></body></Html>)}"
                },
                {
                    "type": "p",
                    "text": "Learn more aboutusing the Pages Router."
                },
                {
                    "type": "p",
                    "text": "Good to know: Although you can use both routers in the same project, routes inappwill be prioritized overpages. We recommend using only one router in your new project to avoid confusion."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Thepublicfolder (optional)"
                },
                {
                    "type": "p",
                    "text": "Create apublicfolder to store static assets such as images, fonts, etc. Files insidepublicdirectory can then be referenced by your code starting from the base URL (/)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Run the Development Server"
                },
                {
                    "type": "list",
                    "items": [
                        "Runnpm run devto start the development server.",
                        "Visithttp://localhost:3000to view your application.",
                        "Editapp/page.tsx(orpages/index.tsx) file and save it to see the updated result in your browser."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Project Structure"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/getting-started/project-structure",
            "title": "Getting Started: Project Structure | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Next.js Project Structure"
                },
                {
                    "type": "p",
                    "text": "This page provides an overview of the project structure of a Next.js application. It covers top-level files and folders, configuration files, and routing conventions within theappandpagesdirectories."
                },
                {
                    "type": "p",
                    "text": "Click the file and folder names to learn more about each convention."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Top-level folders"
                },
                {
                    "type": "p",
                    "text": "Top-level folders are used to organize your application's code and static assets."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Top-level files"
                },
                {
                    "type": "p",
                    "text": "Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "appRouting Conventions"
                },
                {
                    "type": "p",
                    "text": "The following file conventions are used to define routes and handle metadata in theapprouter."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Routing Files"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Nested Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Route Groups and Private Folders"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Parallel and Intercepted Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Metadata File Conventions"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "App Icons"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Open Graph and Twitter Images"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "SEO"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "pagesRouting Conventions"
                },
                {
                    "type": "p",
                    "text": "The following file conventions are used to define routes in thepagesrouter."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Special Files"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Routes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/getting-started/react-essentials",
            "title": "Building Your Application: Rendering | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Rendering"
                },
                {
                    "type": "p",
                    "text": "Rendering converts the code you write into user interfaces. React and Next.js allow you to create hybrid web applications where parts of your code can be rendered on the server or the client. This section will help you understand the differences between these rendering environments, strategies, and runtimes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fundamentals"
                },
                {
                    "type": "p",
                    "text": "To start, it's helpful to be familiar with three foundational web concepts:"
                },
                {
                    "type": "list",
                    "items": [
                        "TheEnvironmentsyour application code can be executed in: the server and the client.",
                        "TheRequest-Response Lifecyclethat's initiated when a user visits or interacts with your application.",
                        "TheNetwork Boundarythat separates server and client code."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Rendering Environments"
                },
                {
                    "type": "p",
                    "text": "There are two environments where web applications can be rendered: the client and the server."
                },
                {
                    "type": "list",
                    "items": [
                        "Theclientrefers to the browser on a user's device that sends a request to a server for your application code. It then turns the response from the server into a user interface.",
                        "Theserverrefers to the computer in a data center that stores your application code, receives requests from a client, and sends back an appropriate response."
                    ]
                },
                {
                    "type": "p",
                    "text": "Historically, developers had to use different languages (e.g. JavaScript, PHP) and frameworks when writing code for the server and the client. With React, developers can use thesame language(JavaScript), and thesame framework(e.g. Next.js or your framework of choice). This flexibility allows you to seamlessly write code for both environments without context switching."
                },
                {
                    "type": "p",
                    "text": "However, each environment has its own set of capabilities and constraints. Therefore, the code you write for the server and the client is not always the same. There are certain operations (e.g. data fetching or managing user state) that are better suited for one environment over the other."
                },
                {
                    "type": "p",
                    "text": "Understanding these differences is key to effectively using React and Next.js. We'll cover the differences and use cases in more detail on theServerandClientComponents pages, for now, let's continue building on our foundation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Request-Response Lifecycle"
                },
                {
                    "type": "p",
                    "text": "Broadly speaking, all websites follow the sameRequest-Response Lifecycle:"
                },
                {
                    "type": "list",
                    "items": [
                        "User Action:The user interacts with a web application. This could be clicking a link, submitting a form, or typing a URL directly into the browser's address bar.",
                        "HTTP Request:The client sends anHTTPrequest to the server that contains necessary information about what resources are being requested, what method is being used (e.g.GET,POST), and additional data if necessary.",
                        "Server:The server processes the request and responds with the appropriate resources. This process may take a couple of steps like routing, fetching data, etc.",
                        "HTTP Response:After processing the request, the server sends an HTTP response back to the client. This response contains a status code (which tells the client whether the request was successful or not) and requested resources (e.g. HTML, CSS, JavaScript, static assets, etc).",
                        "Client:The client parses the resources to render the user interface.",
                        "User Action:Once the user interface is rendered, the user can interact with it, and the whole process starts again."
                    ]
                },
                {
                    "type": "p",
                    "text": "A major part of building a hybrid web application is deciding how to split the work in the lifecycle, and where to place the Network Boundary."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Network Boundary"
                },
                {
                    "type": "p",
                    "text": "In web development, theNetwork Boundaryis a conceptual line that separates the different environments. For example, the client and the server, or the server and the data store."
                },
                {
                    "type": "p",
                    "text": "In React, you choose where to place the client-server network boundary wherever it makes the most sense."
                },
                {
                    "type": "p",
                    "text": "Behind the scenes, the work is split into two parts: theclient module graphand theserver module graph. The server module graph contains all the components that are rendered on the server, and the client module graph contains all components that are rendered on the client."
                },
                {
                    "type": "p",
                    "text": "It may be helpful to think about module graphs as a visual representation of how files in your application depend on each other."
                },
                {
                    "type": "p",
                    "text": "You can use the React\"use client\"convention to define the boundary. There's also a\"use server\"convention, which tells React to do some computational work on the server."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Building Hybrid Applications"
                },
                {
                    "type": "p",
                    "text": "When working in these environments, it's helpful to think of the flow of the code in your application asunidirectional. In other words, during a response, your application code flows in one direction: from the server to the client."
                },
                {
                    "type": "p",
                    "text": "If you need to access the server from the client, you send anewrequest to the server rather than re-use the same request. This makes it easier to understand where to render your components and where to place the Network Boundary."
                },
                {
                    "type": "p",
                    "text": "In practice, this model encourages developers to think about what they want to execute on the server first, before sending the result to the client and making the application interactive."
                },
                {
                    "type": "p",
                    "text": "This concept will become clearer when we look at how you caninterleave client and server componentsin the same component tree."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server Components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client Components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Composition Patterns"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Edge and Node.js Runtimes"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/google-font-display",
            "title": "Google Font Display | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Google Font Display"
                },
                {
                    "type": "p",
                    "text": "Enforce font-display behavior with Google Fonts."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "For a Google Font, the font-display descriptor was either missing or set toauto,block, orfallback, which are not recommended."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "For most cases, the best font display strategy for custom fonts isoptional."
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head'exportdefaultfunctionIndexPage() {return(<div><Head><linkhref=\"https://fonts.googleapis.com/css2?family=Krona+One&display=optional\"rel=\"stylesheet\"/></Head></div>)}"
                },
                {
                    "type": "p",
                    "text": "Specifyingdisplay=optionalminimizes the risk of invisible text or layout shift. If swapping to the custom font after it has loaded is important to you, then usedisplay=swapinstead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "When Not To Use It"
                },
                {
                    "type": "p",
                    "text": "If you want to specifically display a font using anauto,block, orfallbackstrategy, then you can disable this rule."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Controlling Font Performance with font-display",
                        "Google Fonts API Docs",
                        "CSSfont-displayproperty"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/google-font-preconnect",
            "title": "Google Font Preconnect | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Google Font Preconnect"
                },
                {
                    "type": "p",
                    "text": "Next.js automatically adds<link rel=\"preconnect\" />after version12.0.1."
                },
                {
                    "type": "p",
                    "text": "Ensurepreconnectis used with Google Fonts."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "A preconnect resource hint was not used with a request to the Google Fonts domain. Addingpreconnectis recommended to initiate an early connection to the origin."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Addrel=\"preconnect\"to the Google Font domain<link>tag:"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"preconnect\"href=\"https://fonts.gstatic.com\"/>"
                },
                {
                    "type": "p",
                    "text": "Note: aseparatelink withdns-prefetchcan be used as a fallback for browsers that don't supportpreconnectalthough this is not required."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Preconnect to required origins",
                        "Preconnect and dns-prefetch",
                        "Next.js Font Optimization"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/inline-script-id",
            "title": "Inline script id | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Inline script id"
                },
                {
                    "type": "p",
                    "text": "Enforceidattribute onnext/scriptcomponents with inline content."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "next/scriptcomponents with inline content require anidattribute to be defined to track and optimize the script."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Add anidattribute to thenext/scriptcomponent."
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionApp({ Component,pageProps }) {return(<><Scriptid=\"my-script\">{`console.log('Hello world!');`}</Script><Component{...pageProps} /></>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful links"
                },
                {
                    "type": "list",
                    "items": [
                        "Docs for Next.js Script component"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide",
            "title": "Middleware Upgrade Guide | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Middleware Upgrade Guide"
                },
                {
                    "type": "p",
                    "text": "As we work on improving Middleware for General Availability (GA), we've made some changes to the Middleware APIs (and how you define Middleware in your application) based on your feedback."
                },
                {
                    "type": "p",
                    "text": "This upgrade guide will help you understand the changes, why they were made, and how to migrate your existing Middleware to the new API. The guide is for Next.js developers who:"
                },
                {
                    "type": "list",
                    "items": [
                        "Currently use the beta Next.js Middleware features",
                        "Choose to upgrade to the next stable version of Next.js (v12.2)"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can start upgrading your Middleware usage today with the latest release (npm i next@latest)."
                },
                {
                    "type": "p",
                    "text": "Note: These changes described in this guide are included in Next.js12.2. You can keep your current site structure, including nested Middleware, until you move to12.2(or acanarybuild of Next.js)."
                },
                {
                    "type": "p",
                    "text": "If you have ESLint configured, you will need to runnpm i eslint-config-next@latest --save-devto upgrade your ESLint configuration to ensure the same version is being used as the Next.js version. You might also need to restart VSCode for the changes to take effect."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Next.js Middleware on Vercel"
                },
                {
                    "type": "p",
                    "text": "If you're using Next.js on Vercel, your existing deploys using Middleware will continue to work, and you can continue to deploy your site using Middleware. When you upgrade your site to the next stable version of Next.js (v12.2), you will need to follow this upgrade guide to update your Middleware."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Breaking changes"
                },
                {
                    "type": "list",
                    "items": [
                        "No Nested Middleware",
                        "No Response Body",
                        "Cookies API Revamped",
                        "New User-Agent Helper",
                        "No More Page Match Data",
                        "Executing Middleware on Internal Next.js Requests"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "No Nested Middleware"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Summary of changes"
                },
                {
                    "type": "list",
                    "items": [
                        "Define a single Middleware file next to yourpagesfolder",
                        "No need to prefix the file with an underscore",
                        "A custom matcher can be used to define matching routes using an exported config object"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Explanation"
                },
                {
                    "type": "p",
                    "text": "Previously, you could create a_middleware.tsfile under thepagesdirectory at any level. Middleware execution was based on the file path where it was created."
                },
                {
                    "type": "p",
                    "text": "Based on customer feedback, we have replaced this API with a single root Middleware, which provides the following improvements:"
                },
                {
                    "type": "list",
                    "items": [
                        "Faster execution with lower latency: With nested Middleware, a single request could invoke multiple Middleware functions. A single Middleware means a single function execution, which is more efficient.",
                        "Less expensive: Middleware usage is billed per invocation. Using nested Middleware, a single request could invoke multiple Middleware functions, meaning multiple Middleware charges per request. A single Middleware means a single invocation per request and is more cost effective.",
                        "Middleware can conveniently filter on things besides routes: With nested Middleware, the Middleware files were located in thepagesdirectory and Middleware was executed based on request paths. By moving to a single root Middleware, you can still execute code based on request paths, but you can now more conveniently execute Middleware based on other conditions, likecookiesor the presence of a request header.",
                        "Deterministic execution ordering: With nested Middleware, a single request could match multiple Middleware functions. For example, a request to/dashboard/users/*would invoke Middleware defined in both/dashboard/users/_middleware.tsand/dashboard/_middleware.js. However, the execution order is difficult to reason about. Moving to a single, root Middleware more explicitly defines execution order.",
                        "Supports Next.js Layouts (RFC): Moving to a single, root Middleware helps support the newLayouts (RFC) in Next.js."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How to upgrade"
                },
                {
                    "type": "p",
                    "text": "You should declareone single Middleware filein your application, which should be located next to thepagesdirectory and namedwithoutan_prefix. Your Middleware file can still have either a.tsor.jsextension."
                },
                {
                    "type": "p",
                    "text": "Middleware will be invoked forevery route in the app, and a custom matcher can be used to define matching filters. The following is an example for a Middleware that triggers for/about/*and/dashboard/:path*, the custom matcher is defined in an exported config object:"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {returnNextResponse.rewrite(newURL('/about-2',request.url))}// Supports both a single string value or an array of matchersexportconstconfig={matcher:['/about/:path*','/dashboard/:path*'],}"
                },
                {
                    "type": "p",
                    "text": "The matcher config also allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:"
                },
                {
                    "type": "code",
                    "code": "exportconstconfig={matcher:[/** Match all request paths except for the ones starting with:* - api (API routes)* - _next/static (static files)* - favicon.ico (favicon file)*/'/((?!api|_next/static|favicon.ico).*)',],}"
                },
                {
                    "type": "p",
                    "text": "While the config option is preferred since it doesn't get invoked on every request, you can also use conditional statements to only run the Middleware when it matches specific paths. One advantage of using conditionals is defining explicit ordering for when Middleware executes. The following example shows how you can merge two previously nested Middleware:"
                },
                {
                    "type": "code",
                    "code": "importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {if(request.nextUrl.pathname.startsWith('/about')) {// This logic is only applied to /about}if(request.nextUrl.pathname.startsWith('/dashboard')) {// This logic is only applied to /dashboard}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "No Response Body"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Summary of changes"
                },
                {
                    "type": "list",
                    "items": [
                        "Middleware can no longer produce a response body",
                        "If your Middlewaredoesrespond with a body, a runtime error will be thrown",
                        "Migrate to usingrewrite/redirectto pages/APIs handling a response"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Explanation"
                },
                {
                    "type": "p",
                    "text": "To respect the differences in client-side and server-side navigation, and to help ensure that developers do not build insecure Middleware, we are removing the ability to send response bodies in Middleware. This ensures that Middleware is only used torewrite,redirect, or modify the incoming request (e.g.setting cookies)."
                },
                {
                    "type": "p",
                    "text": "The following patterns will no longer work:"
                },
                {
                    "type": "code",
                    "code": "newResponse('a text value')newResponse(streamOrBuffer)newResponse(JSON.stringify(obj),{ headers:'application/json'})NextResponse.json()"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How to upgrade"
                },
                {
                    "type": "p",
                    "text": "For cases where Middleware is used to respond (such as authorization), you should migrate to userewrite/redirectto pages that show an authorization error, login forms, or to an API Route."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Before"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'import{ isAuthValid }from'./lib/auth'exportfunctionmiddleware(request:NextRequest) {// Example function to validate authif(isAuthValid(request)) {returnNextResponse.next()}returnNextResponse.json({ message:'Auth required'},{ status:401})}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "After"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'import{ isAuthValid }from'./lib/auth'exportfunctionmiddleware(request:NextRequest) {// Example function to validate authif(isAuthValid(request)) {returnNextResponse.next()}constloginUrl=newURL('/login',request.url)loginUrl.searchParams.set('from',request.nextUrl.pathname)returnNextResponse.redirect(loginUrl)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Edge API Routes"
                },
                {
                    "type": "p",
                    "text": "If you were previously using Middleware to forward headers to an external API, you can now useEdge API Routes:"
                },
                {
                    "type": "code",
                    "code": "import{typeNextRequest }from'next/server'exportconstconfig={runtime:'edge',}exportdefaultasyncfunctionhandler(req:NextRequest) {constauthorization=req.cookies.get('authorization')returnfetch('https://backend-api.com/api/protected',{method:req.method,headers:{authorization,},redirect:'manual',})}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Cookies API Revamped"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Summary of changes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Explanation"
                },
                {
                    "type": "p",
                    "text": "Based on beta feedback, we are changing the Cookies API inNextRequestandNextResponseto align more to aget/setmodel. TheCookiesAPI extends Map, including methods likeentriesandvalues."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How to upgrade"
                },
                {
                    "type": "p",
                    "text": "NextResponsenow has acookiesinstance with:"
                },
                {
                    "type": "list",
                    "items": [
                        "cookies.delete",
                        "cookies.set",
                        "cookies.getWithOptions"
                    ]
                },
                {
                    "type": "p",
                    "text": "As well as other extended methods fromMap."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Before"
                },
                {
                    "type": "code",
                    "code": "// pages/_middleware.tsimport{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {// create an instance of the class to access the public methods. This uses `next()`,// you could use `redirect()` or `rewrite()` as wellletresponse=NextResponse.next()// get the cookies from the requestletcookieFromRequest=request.cookies['my-cookie']// set the `cookie`response.cookie('hello','world')// set the `cookie` with optionsconstcookieWithOptions=response.cookie('hello','world',{path:'/',maxAge:1000*60*60*24*7,httpOnly:true,sameSite:'strict',domain:'example.com',})// clear the `cookie`response.clearCookie('hello')returnresponse}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "After"
                },
                {
                    "type": "code",
                    "code": "exportfunctionmiddleware() {constresponse=newNextResponse()// set a cookieresponse.cookies.set('vercel','fast')// set another cookie with optionsresponse.cookies.set('nextjs','awesome',{ path:'/test'})// get all the details of a cookieconst{value,...options}=response.cookies.getWithOptions('vercel')console.log(value)// => 'fast'console.log(options)// => { name: 'vercel', Path: '/test' }// deleting a cookie will mark it as expiredresponse.cookies.delete('vercel')returnresponse}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "New User-Agent Helper"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Summary of changes"
                },
                {
                    "type": "list",
                    "items": [
                        "Accessing the user agent is no longer available on the request object",
                        "We've added a newuserAgenthelper to reduce Middleware size by17kb"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Explanation"
                },
                {
                    "type": "p",
                    "text": "To help reduce the size of your Middleware, we have extracted the user agent from the request object and created a new helperuserAgent."
                },
                {
                    "type": "p",
                    "text": "The helper is imported fromnext/serverand allows you to opt in to using the user agent. The helper gives you access to the same properties that were available from the request object."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How to upgrade"
                },
                {
                    "type": "list",
                    "items": [
                        "Import theuserAgenthelper fromnext/server",
                        "Destructure the properties you need to work with"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Before"
                },
                {
                    "type": "code",
                    "code": "import{ NextRequest,NextResponse }from'next/server'exportfunctionmiddleware(request:NextRequest) {consturl=request.nextUrlconstviewport=request.ua.device.type==='mobile'?'mobile':'desktop'url.searchParams.set('viewport',viewport)returnNextResponse.rewrite(url)}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "After"
                },
                {
                    "type": "code",
                    "code": "import{ NextRequest,NextResponse,userAgent }from'next/server'exportfunctionmiddleware(request:NextRequest) {consturl=request.nextUrlconst{device}=userAgent(request)constviewport=device.type==='mobile'?'mobile':'desktop'url.searchParams.set('viewport',viewport)returnNextResponse.rewrite(url)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "No More Page Match Data"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Summary of changes"
                },
                {
                    "type": "list",
                    "items": [
                        "UseURLPatternto check if a Middleware is being invoked for a certain page match"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Explanation"
                },
                {
                    "type": "p",
                    "text": "Currently, Middleware estimates whether you are serving an asset of a Page based on the Next.js routes manifest (internal configuration). This value is surfaced throughrequest.page."
                },
                {
                    "type": "p",
                    "text": "To make page and asset matching more accurate, we are now using the web standardURLPatternAPI."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How to upgrade"
                },
                {
                    "type": "p",
                    "text": "UseURLPatternto check if a Middleware is being invoked for a certain page match."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Before"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextRequest,NextFetchEvent }from'next/server'exportfunctionmiddleware(request:NextRequest,event:NextFetchEvent) {const{params}=event.request.pageconst{locale,slug}=paramsif(locale&&slug) {const{search,protocol,host}=request.nextUrlconsturl=newURL(`${protocol}//${locale}.${host}/${slug}${search}`)returnNextResponse.redirect(url)}}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "After"
                },
                {
                    "type": "code",
                    "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'constPATTERNS=[[newURLPattern({ pathname:'/:locale/:slug'}),({ pathname })=>pathname.groups,],]constparams=(url)=>{constinput=url.split('?')[0]letresult={}for(const[pattern,handler]ofPATTERNS) {constpatternResult=pattern.exec(input)if(patternResult!==null&&'pathname'inpatternResult) {result=handler(patternResult)break}}returnresult}exportfunctionmiddleware(request:NextRequest) {const{locale,slug}=params(request.url)if(locale&&slug) {const{search,protocol,host}=request.nextUrlconsturl=newURL(`${protocol}//${locale}.${host}/${slug}${search}`)returnNextResponse.redirect(url)}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Executing Middleware on Internal Next.js Requests"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Summary of changes"
                },
                {
                    "type": "list",
                    "items": [
                        "Middleware will be executed forallrequests, including_next"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Explanation"
                },
                {
                    "type": "p",
                    "text": "Prior to Next.jsv12.2, Middleware was not executed for_nextrequests."
                },
                {
                    "type": "p",
                    "text": "For cases where Middleware is used for authorization, you should migrate to userewrite/redirectto Pages that show an authorization error, login forms, or to an API Route."
                },
                {
                    "type": "p",
                    "text": "SeeNo Response Bodyfor an example of how to migrate to userewrite/redirect."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/next-script-for-ga",
            "title": "Using Google Analytics with Next.js (through `next/script`) | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Using Google Analytics with Next.js (through `next/script`)"
                },
                {
                    "type": "p",
                    "text": "Prefernext/scriptcomponent when using the inline script for Google Analytics."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "An inline script was used for Google Analytics which might impact your webpage's performance. Instead, we recommend usingnext/scriptthrough the@next/third-partieslibrary."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Use@next/third-partiesto add Google Analytics"
                },
                {
                    "type": "p",
                    "text": "@next/third-partiesis a library that provides a collection of components and utilities that improve the performance and developer experience of loading popular third-party libraries in your Next.js application. It is available with Next.js 14 (installnext@latest)."
                },
                {
                    "type": "p",
                    "text": "TheGoogleAnalyticscomponent can be used to includeGoogle Analytics\n4to your page via the Google tag (gtag.js). By default, it fetches the original scripts after hydration occurs on the page."
                },
                {
                    "type": "p",
                    "text": "Recommendation: If Google Tag Manager is already included in your application, you can\nconfigure Google Analytics directly using it, rather than including Google Analytics as a separate component. Refer to thedocumentationto learn more about the differences between Tag Manager andgtag.js."
                },
                {
                    "type": "p",
                    "text": "To load Google Analytics for all routes, include the component directly in your root layout and pass in your measurement ID:"
                },
                {
                    "type": "code",
                    "code": "import{ GoogleAnalytics }from'@next/third-parties/google'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body><GoogleAnalyticsgaId=\"G-XYZ\"/></html>)}"
                },
                {
                    "type": "p",
                    "text": "To load Google Analytics for a single route, include the component in your page file:"
                },
                {
                    "type": "code",
                    "code": "import{ GoogleAnalytics }from'@next/third-parties/google'exportdefaultfunctionPage() {return<GoogleAnalyticsgaId=\"G-XYZ\"/>}"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "If you are using the Pages Router, please refer to thepages/documentation.",
                        "@next/third-partiesalso supportsGoogle Tag Managerand other third parties.",
                        "Using@next/third-partiesis not required. You can also use thenext/scriptcomponent directly. Refer to thenext/scriptdocumentationto learn more."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "@next/third-partiesDocumentation",
                        "next/scriptDocumentation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-assign-module-variable",
            "title": "No assign module variable | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No assign module variable"
                },
                {
                    "type": "p",
                    "text": "Prevent assignment to themodulevariable."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "A value is being assigned to themodulevariable. Themodulevariable is already used and it is highly likely that assigning to this variable will cause errors."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Use a different variable name:"
                },
                {
                    "type": "code",
                    "code": "letmyModule={...}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-async-client-component",
            "title": "No async client component | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No async client component"
                },
                {
                    "type": "p",
                    "text": "Client components cannot be async functions."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "The error occurs when you try to define a client component as an async function. React client componentsdo not supportasync functions. For example:"
                },
                {
                    "type": "code",
                    "code": "'use client'// This will cause an errorasyncfunctionClientComponent() {// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "list",
                    "items": [
                        "Convert to a Server Component: If possible, convert your client component to a server component. This allows you to useasync/awaitdirectly in your component.",
                        "Remove theasynckeyword: If you need to keep it as a client component, remove theasynckeyword and handle data fetching differently.",
                        "Use React hooks for data fetching: Utilize hooks likeuseEffectfor client-side data fetching, or use third-party libraries.",
                        "Leverage theusehook with a Context Provider: Pass promises to child components using context, then resolve them with theusehook."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Recommended: Server-side data fetching"
                },
                {
                    "type": "p",
                    "text": "We recommend fetching data on the server. For example:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionPage() {letdata=awaitfetch('https://api.vercel.app/blog')letposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Usingusewith Context Provider"
                },
                {
                    "type": "p",
                    "text": "Another pattern to explore is using the Reactusehook with a Context Provider. This allows you to pass Promises to child components and resolve them using theusehook . Here's an example:"
                },
                {
                    "type": "p",
                    "text": "First, let's create a separate file for the context provider:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ createContext,useContext }from'react'exportconstBlogContext=createContext<Promise<any>|null>(null)exportfunctionBlogProvider({children,blogPromise,}:{children:React.ReactNodeblogPromise:Promise<any>}) {return(<BlogContext.Providervalue={blogPromise}>{children}</BlogContext.Provider>)}exportfunctionuseBlogContext() {letcontext=useContext(BlogContext)if(!context) {thrownewError('useBlogContext must be used within a BlogProvider')}returncontext}"
                },
                {
                    "type": "p",
                    "text": "Now, let's create the Promise in a Server Component and stream it to the client:"
                },
                {
                    "type": "code",
                    "code": "import{ BlogProvider }from'./context'exportdefaultfunctionPage() {letblogPromise=fetch('https://api.vercel.app/blog').then((res)=>res.json())return(<BlogProviderblogPromise={blogPromise}><BlogPosts/></BlogProvider>)}"
                },
                {
                    "type": "p",
                    "text": "Here is the blog posts component:"
                },
                {
                    "type": "code",
                    "code": "'use client'import{ use }from'react'import{ useBlogContext }from'./context'exportfunctionBlogPosts() {letblogPromise=useBlogContext()letposts=use(blogPromise)return<div>{posts.length} blog posts</div>}"
                },
                {
                    "type": "p",
                    "text": "This pattern allows you to start data fetching early and pass the Promise down to child components, which can then use theusehook to access the data when it's ready."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client-side data fetching"
                },
                {
                    "type": "p",
                    "text": "In scenarios where client fetching is needed, you can callfetchinuseEffect(not recommended), or lean on popular React libraries in the community (such asSWRorReact Query) for client fetching."
                },
                {
                    "type": "code",
                    "code": "'use client'import{ useState,useEffect }from'react'exportfunctionPosts() {let[posts,setPosts]=useState(null)useEffect(()=>{asyncfunctionfetchPosts() {letres=awaitfetch('https://api.vercel.app/blog')letdata=awaitres.json()setPosts(data)}fetchPosts()},[])if(!posts)return<div>Loading...</div>return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-before-interactive-script-outside-document",
            "title": "No Before Interactive Script Outside Document | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Before Interactive Script Outside Document"
                },
                {
                    "type": "p",
                    "text": "Prevent usage ofnext/script'sbeforeInteractivestrategy outside ofapp/layout.jsxorpages/_document.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "You cannot use thenext/scriptcomponent with thebeforeInteractivestrategy outsideapp/layout.jsxorpages/_document.js. That's becausebeforeInteractivestrategy only works insideapp/layout.jsxorpages/_document.jsand is designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "App Router"
                },
                {
                    "type": "p",
                    "text": "If you want a global script, and you are using the App Router, move the script insideapp/layout.jsx."
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'exportdefaultfunctionRootLayout({ children }) {return(<htmllang=\"en\"><body>{children}</body><Scriptsrc=\"https://example.com/script.js\"strategy=\"beforeInteractive\"/></html>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Pages Router"
                },
                {
                    "type": "p",
                    "text": "If you want a global script, and you are using the Pages Router, move the script insidepages/_document.js."
                },
                {
                    "type": "code",
                    "code": "import{ Html,Head,Main,NextScript }from'next/document'importScriptfrom'next/script'exportdefaultfunctionDocument() {return(<Html><Head/><body><Main/><NextScript/><Scriptsrc=\"https://example.com/script.js\"strategy=\"beforeInteractive\"></Script></body></Html>)}"
                },
                {
                    "type": "list",
                    "items": [
                        "App Router Script Optimization",
                        "Pages Router Script Optimization"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-css-tags",
            "title": "No CSS Tags | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No CSS Tags"
                },
                {
                    "type": "p",
                    "text": "Prevent manual stylesheet tags."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "Alinkelement was used to link to an external stylesheet. This can negatively affect CSS resource loading on your webpage."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "There are multiple ways to include styles using Next.js' built-in CSS support, including the option to use@importwithin the root stylesheet that is imported inpages/_app.js:"
                },
                {
                    "type": "code",
                    "code": "/* Root stylesheet */@import'extra.css';body{/* ... */}"
                },
                {
                    "type": "p",
                    "text": "Another option is to use CSS Modules to import the CSS file scoped specifically to the component."
                },
                {
                    "type": "code",
                    "code": "importstylesfrom'./extra.module.css'exportclassHome{render() {return(<div><buttontype=\"button\"className={styles.active}>Open</button></div>)}}"
                },
                {
                    "type": "p",
                    "text": "Refer to theBuilt-In CSS Supportdocumentation to learn about all the ways to include CSS to your application."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-document-import-in-page",
            "title": "No Document Import in Page | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Document Import in Page"
                },
                {
                    "type": "p",
                    "text": "Prevent importingnext/documentoutside ofpages/_document.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "next/documentwas imported in a page outside ofpages/_document.js(orpages/_document.tsxif you are using TypeScript). This can cause unexpected issues in your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Only import and usenext/documentwithinpages/_document.js(orpages/_document.tsx) to override the defaultDocumentcomponent:"
                },
                {
                    "type": "code",
                    "code": "importDocument,{ Html,Head,Main,NextScript }from'next/document'classMyDocumentextendsDocument{//...}exportdefaultMyDocument"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Document"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-duplicate-head",
            "title": "No Duplicate Head | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Duplicate Head"
                },
                {
                    "type": "p",
                    "text": "Prevent duplicate usage of<Head>inpages/_document.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "More than a single instance of the<Head />component was used in a single custom document. This can cause unexpected behavior in your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Only use a single<Head />component in your custom document inpages/_document.js."
                },
                {
                    "type": "code",
                    "code": "importDocument,{ Html,Head,Main,NextScript }from'next/document'classMyDocumentextendsDocument{staticasyncgetInitialProps(ctx) {//...}render() {return(<Html><Head/><body><Main/><NextScript/></body></Html>)}}exportdefaultMyDocument"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Document"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-head-element",
            "title": "No Head Element | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Head Element"
                },
                {
                    "type": "p",
                    "text": "Prevent usage of<head>element."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "A<head>element was used to include page-level metadata, but this can cause unexpected behavior in a Next.js application. Use Next.js' built-innext/headcomponent instead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Import and use the<Head />component:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head'functionIndex() {return(<><Head><title>My page title</title><metaname=\"viewport\"content=\"initial-scale=1.0, width=device-width\"/></Head></>)}exportdefaultIndex"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "next/head"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-head-import-in-document",
            "title": "No Head Import in Document | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Head Import in Document"
                },
                {
                    "type": "p",
                    "text": "Prevent usage ofnext/headinpages/_document.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "next/headwas imported inpages/_document.js. This can cause unexpected issues in your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Only import and usenext/documentwithinpages/_document.jsto override the defaultDocumentcomponent. If you are importingnext/headto use theHeadcomponent, import it fromnext/documentinstead in order to modify<head>code across all pages:"
                },
                {
                    "type": "code",
                    "code": "importDocument,{ Html,Head,Main,NextScript }from'next/document'classMyDocumentextendsDocument{staticasyncgetInitialProps(ctx) {//...}render() {return(<Html><Head></Head></Html>)}}exportdefaultMyDocument"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Document"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-img-element",
            "title": "No img element | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No img element"
                },
                {
                    "type": "p",
                    "text": "Prevent usage of<img>element due to slower LCP and higher bandwidth."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "An<img>element was used to display an image instead of<Image />fromnext/image."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "list",
                    "items": [
                        "Usenext/imageto improve performance with automaticImage Optimization."
                    ]
                },
                {
                    "type": "p",
                    "text": "Note: If deploying to amanaged hosting provider, remember to check provider pricing since optimized images might be charged differently than the original images."
                },
                {
                    "type": "p",
                    "text": "Common image optimization platform pricing:"
                },
                {
                    "type": "list",
                    "items": [
                        "Vercel pricing",
                        "Cloudinary pricing",
                        "imgix pricing"
                    ]
                },
                {
                    "type": "p",
                    "text": "Note: If self-hosting, remember to installsharpand check if your server has enough storage to cache the optimized images."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'functionHome() {return(<Imagesrc=\"https://example.com/hero.jpg\"alt=\"Landscape picture\"width={800}height={500}/>)}exportdefaultHome"
                },
                {
                    "type": "list",
                    "items": [
                        "If you would like to usenext/imagefeatures such as blur-up placeholders but disable Image Optimization, you can do so usingunoptimized:"
                    ]
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image'constUnoptimizedImage=(props)=>{return<Image{...props}unoptimized/>}"
                },
                {
                    "type": "list",
                    "items": [
                        "You can also use the<picture>element with the nested<img>element:"
                    ]
                },
                {
                    "type": "code",
                    "code": "functionHome() {return(<picture><sourcesrcSet=\"https://example.com/hero.avif\"type=\"image/avif\"/><sourcesrcSet=\"https://example.com/hero.webp\"type=\"image/webp\"/><imgsrc=\"https://example.com/hero.jpg\"alt=\"Landscape picture\"width={800}height={500}/></picture>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Image Component and Image Optimization",
                        "next/image API Reference",
                        "Largest Contentful Paint (LCP)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-page-custom-font",
            "title": "No Page Custom Font | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Page Custom Font"
                },
                {
                    "type": "p",
                    "text": "Prevent page-only custom fonts."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "list",
                    "items": [
                        "The custom font you're adding was added to a page - this only adds the font to the specific page and not the entire application.",
                        "The custom font you're adding was added to a separate component withinpages/_document.js- this disables automatic font optimization."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Create the file./pages/_document.jsand add the font to a custom Document:"
                },
                {
                    "type": "code",
                    "code": "importDocument,{ Html,Head,Main,NextScript }from'next/document'classMyDocumentextendsDocument{render() {return(<Html><Head><linkhref=\"https://fonts.googleapis.com/css2?family=Inter&display=optional\"rel=\"stylesheet\"/></Head><body><Main/><NextScript/></body></Html>)}}exportdefaultMyDocument"
                },
                {
                    "type": "p",
                    "text": "Or as a function component:"
                },
                {
                    "type": "code",
                    "code": "import{ Html,Head,Main,NextScript }from'next/document'exportdefaultfunctionDocument() {return(<Html><Head><linkhref=\"https://fonts.googleapis.com/css2?family=Inter&display=optional\"rel=\"stylesheet\"/></Head><body><Main/><NextScript/></body></Html>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "When Not To Use It"
                },
                {
                    "type": "p",
                    "text": "If you have a reason to only load a font for a particular page or don't care about font optimization, then you can disable this rule."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Document",
                        "Font Optimization"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-script-component-in-head",
            "title": "No Script Component in Head | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Script Component in Head"
                },
                {
                    "type": "p",
                    "text": "Prevent usage ofnext/scriptinnext/headcomponent."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "Thenext/scriptcomponent should not be used in anext/headcomponent."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Move the<Script />component outside of<Head>instead."
                },
                {
                    "type": "p",
                    "text": "Before"
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'importHeadfrom'next/head'exportdefaultfunctionIndex() {return(<Head><title>Next.js</title><Scriptsrc=\"/my-script.js\"/></Head>)}"
                },
                {
                    "type": "p",
                    "text": "After"
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'importHeadfrom'next/head'exportdefaultfunctionIndex() {return(<><Head><title>Next.js</title></Head><Scriptsrc=\"/my-script.js\"/></>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "next/head",
                        "next/script"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-styled-jsx-in-document",
            "title": "No `styled-jsx` in `_document` | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No `styled-jsx` in `_document`"
                },
                {
                    "type": "p",
                    "text": "Prevent usage ofstyled-jsxinpages/_document.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "Custom CSS likestyled-jsxis not allowed in aCustom Document."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "If you need shared CSS for all of your pages, take a look at theCustomAppfile or define a custom layout."
                },
                {
                    "type": "p",
                    "text": "For example, consider the following stylesheet namedstyles.css:"
                },
                {
                    "type": "code",
                    "code": "body{font-family:'SF Pro Text','SF Pro Icons','Helvetica Neue','Helvetica','Arial',sans-serif;padding:20px20px60px;max-width:680px;margin:0 auto;}"
                },
                {
                    "type": "p",
                    "text": "Create apages/_app.{js,tsx}file if not already present. Then, import thestyles.cssfile."
                },
                {
                    "type": "code",
                    "code": "import'../styles.css'// This default export is required in a new `pages/_app.js` file.exportdefaultfunctionMyApp({ Component,pageProps }) {return<Component{...pageProps} />}"
                },
                {
                    "type": "p",
                    "text": "These styles (styles.css) will apply to all pages and components in your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Document Caveats",
                        "Layouts",
                        "Built in CSS Support",
                        "CustomApp"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-sync-scripts",
            "title": "No Sync Scripts | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Sync Scripts"
                },
                {
                    "type": "p",
                    "text": "Prevent synchronous scripts."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "A synchronous script was used which can impact your webpage performance."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Script component (recommended)"
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script'functionHome() {return(<divclass=\"container\"><Scriptsrc=\"https://third-party-script.js\"></Script><div>Home Page</div></div>)}exportdefaultHome"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Useasyncordefer"
                },
                {
                    "type": "code",
                    "code": "<scriptsrc=\"https://third-party-script.js\"async/><scriptsrc=\"https://third-party-script.js\"defer/>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Efficiently load third-party JavaScript"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-title-in-document-head",
            "title": "No Title in Document Head | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Title in Document Head"
                },
                {
                    "type": "p",
                    "text": "Prevent usage of<title>withHeadcomponent fromnext/document."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "A<title>element was defined within theHeadcomponent imported fromnext/document, which should only be used for any<head>code that is common for all pages. Title tags should be defined at the page-level usingnext/headinstead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Within a page or component, import and usenext/headto define a page title:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head'exportfunctionHome() {return(<div><Head><title>My page title</title></Head></div>)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "next/head",
                        "Custom Document"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-unwanted-polyfillio",
            "title": "No Unwanted Polyfill.io | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "No Unwanted Polyfill.io"
                },
                {
                    "type": "p",
                    "text": "Prevent duplicate polyfills from Polyfill.io."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "You are using polyfills from Polyfill.io and including polyfills already shipped with Next.js. This unnecessarily increases page weight which can affect loading performance."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "Remove all duplicate polyfills. If you need to add polyfills but are not sure if Next.js already includes it, take a look at the list ofsupported browsers and features."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Useful Links"
                },
                {
                    "type": "list",
                    "items": [
                        "Supported Browsers and Features"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/url-deprecated",
            "title": "`url` is deprecated | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "`url` is deprecated"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why This Error Occurred"
                },
                {
                    "type": "p",
                    "text": "In versions prior to 6.x theurlproperty got magically injected into everyPagecomponent (every page inside thepagesdirectory)."
                },
                {
                    "type": "p",
                    "text": "The reason this is going away is that we want to make things very predictable and explicit. Having a magical url property coming out of nowhere doesn't aid that goal."
                },
                {
                    "type": "p",
                    "text": "⚠️ In some cases using React Dev Tools may trigger this warning even if you do not referenceurlanywhere in your code. Try temporarily disabling the extension and see if the warning persists."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Possible Ways to Fix It"
                },
                {
                    "type": "p",
                    "text": "/docs/advanced-features/codemods#url-to-withrouter"
                },
                {
                    "type": "p",
                    "text": "Since Next 5 we provide a way to explicitly inject the Next.js router object into pages and all their descending components.\nTherouterproperty that is injected will hold the same values asurl, likepathname,asPath, andquery."
                },
                {
                    "type": "p",
                    "text": "Here's an example of usingwithRouter:"
                },
                {
                    "type": "code",
                    "code": "import{ withRouter }from'next/router'classPageextendsReact.Component{render() {const{router}=this.propsconsole.log(router)return<div>{router.pathname}</div>}}exportdefaultwithRouter(Page)"
                },
                {
                    "type": "p",
                    "text": "We provide a codemod (a code to code transformation) to automatically change theurlproperty usages towithRouter."
                },
                {
                    "type": "p",
                    "text": "You can find this codemod and instructions on how to run it here: /docs/advanced-features/codemods#url-to-withrouter"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/routing/dynamic-routes",
            "title": "Routing: Dynamic Routes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Using App Router"
                },
                {
                    "type": "p",
                    "text": "Features available in /app"
                },
                {
                    "type": "p",
                    "text": "Using Stable Version"
                },
                {
                    "type": "p",
                    "text": "v14.2.15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "p",
                    "text": "When you don't know the exact segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time orprerenderedat build time."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convention"
                },
                {
                    "type": "p",
                    "text": "A Dynamic Segment can be created by wrapping a file or folder name in square brackets:[segmentName]. For example,[id]or[slug]."
                },
                {
                    "type": "p",
                    "text": "Dynamic Segments can be accessed fromuseRouter."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "For example, a blog could include the following routepages/blog/[slug].jswhere[slug]is the Dynamic Segment for blog posts."
                },
                {
                    "type": "code",
                    "code": "import{ useRouter }from'next/router'exportdefaultfunctionPage() {constrouter=useRouter()return<p>Post: {router.query.slug}</p>}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Catch-all Segments"
                },
                {
                    "type": "p",
                    "text": "Dynamic Segments can be extended tocatch-allsubsequent segments by adding an ellipsis inside the brackets[...segmentName]."
                },
                {
                    "type": "p",
                    "text": "For example,pages/shop/[...slug].jswill match/shop/clothes, but also/shop/clothes/tops,/shop/clothes/tops/t-shirts, and so on."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Optional Catch-all Segments"
                },
                {
                    "type": "p",
                    "text": "Catch-all Segments can be madeoptionalby including the parameter in double square brackets:[[...segmentName]]."
                },
                {
                    "type": "p",
                    "text": "For example,pages/shop/[[...slug]].jswillalsomatch/shop, in addition to/shop/clothes,/shop/clothes/tops,/shop/clothes/tops/t-shirts."
                },
                {
                    "type": "p",
                    "text": "The difference betweencatch-allandoptional catch-allsegments is that with optional, the route without the parameter is also matched (/shopin the example above)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Linking and Navigating"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "useRouter"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn",
            "title": "Learn Next.js | Next.js by Vercel - The React Framework",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Start building with Next.js"
                },
                {
                    "type": "p",
                    "text": "Learn Next.js"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Learn Next.js"
                },
                {
                    "type": "p",
                    "text": "16 chapters that take you from React to Next.js."
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Learn React Foundations"
                },
                {
                    "type": "p",
                    "text": "New to React? Learn how to go from JavaScript to React with this Foundations course."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How does the course work?"
                },
                {
                    "type": "p",
                    "text": "Set up your local environment and initializing the \"ACME\" Next.js project template."
                },
                {
                    "type": "p",
                    "text": "Use pre-styled components as part of each chapter that leverage Next.js conventions and patterns."
                },
                {
                    "type": "p",
                    "text": "Hook up real application logic and data to bring a fully-fledged demo website to life."
                },
                {
                    "type": "p",
                    "text": "At the end you’ll have a website that’s ready to ship and the knowledge to build and deploy your own."
                },
                {
                    "type": "p",
                    "text": "Your progress will be synced as you complete chapters"
                },
                {
                    "type": "p",
                    "text": "Go at your own pace and pick up where you left off"
                },
                {
                    "type": "p",
                    "text": "Test your knowledge during each chapter"
                },
                {
                    "type": "p",
                    "text": "Take quick quizzes to see what you’ve learned"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What will I learn?"
                },
                {
                    "type": "p",
                    "text": "Introduction"
                },
                {
                    "type": "p",
                    "text": "Getting Started"
                },
                {
                    "type": "p",
                    "text": "CSS Styling"
                },
                {
                    "type": "p",
                    "text": "Optimizing Fonts and Images"
                },
                {
                    "type": "p",
                    "text": "Creating Layouts and Pages"
                },
                {
                    "type": "p",
                    "text": "Navigating Between Pages"
                },
                {
                    "type": "p",
                    "text": "Setting Up Your Database"
                },
                {
                    "type": "p",
                    "text": "Fetching Data"
                },
                {
                    "type": "p",
                    "text": "Static and Dynamic Rendering"
                },
                {
                    "type": "p",
                    "text": "Streaming"
                },
                {
                    "type": "p",
                    "text": "Partial Prerendering"
                },
                {
                    "type": "p",
                    "text": "Adding Search and Pagination"
                },
                {
                    "type": "p",
                    "text": "Mutating Data"
                },
                {
                    "type": "p",
                    "text": "Handling Errors"
                },
                {
                    "type": "p",
                    "text": "Improving Accessibility"
                },
                {
                    "type": "p",
                    "text": "Adding Authentication"
                },
                {
                    "type": "p",
                    "text": "Adding Metadata"
                },
                {
                    "type": "p",
                    "text": "Next Steps"
                },
                {
                    "type": "p",
                    "text": "Looking to go deeper?"
                },
                {
                    "type": "p",
                    "text": "Continue learning by using our guides."
                },
                {
                    "type": "p",
                    "text": "How to build a fullstack app with Next.js, Prisma and Postgres"
                },
                {
                    "type": "p",
                    "text": "Build, Deployment & Git"
                },
                {
                    "type": "p",
                    "text": "Build a multi-tenant app with custom domains using Next.js"
                },
                {
                    "type": "p",
                    "text": "Build, Deployment & Git"
                },
                {
                    "type": "p",
                    "text": "Integrating Next.js and Contentful for your headless CMS"
                },
                {
                    "type": "p",
                    "text": "Databases & CMS"
                },
                {
                    "type": "p",
                    "text": "Building Ecommerce Sites with Next.js and Shopify"
                },
                {
                    "type": "p",
                    "text": "Databases & CMS"
                },
                {
                    "type": "p",
                    "text": "Using headless WordPress with Next.js and Vercel"
                },
                {
                    "type": "p",
                    "text": "Databases & CMS"
                },
                {
                    "type": "p",
                    "text": "Next.js Documentation"
                },
                {
                    "type": "p",
                    "text": "The complete resource for installing, running, building with, and deploying Next.js"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/api-routes",
            "title": "API Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API RoutesSetupCreating API RoutesAPI Routes Details",
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API RoutesSetupCreating API RoutesAPI Routes Details",
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Routes"
                },
                {
                    "type": "p",
                    "text": "Next.js has support forAPI Routes, which let you easily create an API endpoint as a Node.js serverless function. Although it’s not necessary for our blog app, we’ll briefly talk about how to use it in this lesson."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What You’ll Learn in This Lesson"
                },
                {
                    "type": "p",
                    "text": "In this lesson, you’ll learn:"
                },
                {
                    "type": "list",
                    "items": [
                        "How to create an API Route.",
                        "Some useful information onAPI Routes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/api-routes/api-routes-details",
            "title": "API Routes Details - API Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API RoutesSetupCreating API RoutesAPI Routes Details",
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API RoutesSetupCreating API RoutesAPI Routes Details",
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Routes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Routes Details"
                },
                {
                    "type": "p",
                    "text": "Here is some essential information you should know aboutAPI Routes."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Do Not Fetch an API Route fromgetStaticPropsorgetStaticPaths"
                },
                {
                    "type": "p",
                    "text": "You shouldnotfetch an API Route fromgetStaticPropsorgetStaticPaths. Instead, write your server-side code directly ingetStaticPropsorgetStaticPaths(or call a helper function)."
                },
                {
                    "type": "p",
                    "text": "Here’s why:getStaticPropsandgetStaticPathsrun only on the server-side and will never run on the client-side. Moreover, these functions will not be included in the JS bundle for the browser. That means you can write code such as direct database queries without sending them to browsers. Read theWriting Server-Side codedocumentation to learn more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "A Good Use Case: Handling Form Input"
                },
                {
                    "type": "p",
                    "text": "A good use case for API Routes is handling form input. For example, you can create a form on your page and have it send aPOSTrequest to your API Route. You can then write code to directly save it to your database. The API Route code will not be part of your client bundle, so you can safely write server-side code."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionhandler(req,res){constemail=req.body.email;// Then save email to your database, etc...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Preview Mode"
                },
                {
                    "type": "p",
                    "text": "Static Generationis useful when your pages fetch data from a headless CMS. However, it’s not ideal when you’re writing a draft on your headless CMS and want topreviewthe draft immediately on your page. You’d want Next.js to render these pages atrequest timeinstead of build time and fetch the draft content instead of the published content. You’d want Next.js to bypass Static Generation only for this specific case."
                },
                {
                    "type": "p",
                    "text": "Next.js has a feature calledPreview Modeto solve the problem above, and it utilizesAPI Routes. To learn more about it take a look at ourPreview Modedocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic API Routes"
                },
                {
                    "type": "p",
                    "text": "API Routes can be dynamic, just like regular pages. Take a look at ourDynamic API Routesdocumentation to learn more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "That’s It!"
                },
                {
                    "type": "p",
                    "text": "In the next and final basic lesson, we’ll talk about how to deploy your Next.js app to production."
                },
                {
                    "type": "p",
                    "text": "Quick Review: Which of the following is a good use case for an API Route?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/api-routes/creating-api-routes",
            "title": "Creating API Routes - API Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API RoutesSetupCreating API RoutesAPI Routes Details",
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API RoutesSetupCreating API RoutesAPI Routes Details",
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Routes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating API Routes"
                },
                {
                    "type": "p",
                    "text": "API Routeslet you create an API endpoint inside a Next.js app. You can do so by creating afunctioninside thepages/apidirectory that has the following format:"
                },
                {
                    "type": "code",
                    "code": "// req = HTTP incoming message, res = HTTP server responseexportdefaultfunctionhandler(req,res){// ...}"
                },
                {
                    "type": "p",
                    "text": "Learn more about the request handler above in theAPI Routes documentation."
                },
                {
                    "type": "p",
                    "text": "They can be deployed as Serverless Functions (also known as Lambdas)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Creating a simple API endpoint"
                },
                {
                    "type": "p",
                    "text": "Let’s try it out. Create a file calledhello.jsinpages/apiwith the following code:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionhandler(req,res){res.status(200).json({text:'Hello'});}"
                },
                {
                    "type": "p",
                    "text": "Try accessing it athttp://localhost:3000/api/hello. You should see{\"text\":\"Hello\"}. Note that:"
                },
                {
                    "type": "list",
                    "items": [
                        "reqis an instance ofhttp.IncomingMessage, plus some pre-builtmiddlewares.",
                        "resis an instance ofhttp.ServerResponse, plus somehelper functions."
                    ]
                },
                {
                    "type": "p",
                    "text": "That’s it! Before we wrap up this lesson, let’s talk about some tips for usingAPI Routeson the next page."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/api-routes/setup",
            "title": "API Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API RoutesSetupCreating API RoutesAPI Routes Details",
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API RoutesSetupCreating API RoutesAPI Routes Details",
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Creating API Routes",
                        "API Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Routes"
                },
                {
                    "type": "p",
                    "text": "If you’re continuing from the previous lesson,you can skip this page. Click the button below to go to the next page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Download Starter Code (Optional)"
                },
                {
                    "type": "p",
                    "text": "If you’re NOT continuing from the previous lesson, you can download, install, and run the starter code for this lesson below. This sets up anextjs-blogdirectory such that it’s identical to the result of the previous lesson."
                },
                {
                    "type": "p",
                    "text": "Again, this is NOT necessary if you’ve just finished the previous lesson."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest nextjs-blog --use-npm --example\"https://github.com/vercel/next-learn/tree/main/basics/api-routes-starter\""
                },
                {
                    "type": "p",
                    "text": "Then follow the instructions from the command output (cdinto the directory and start the development server)."
                },
                {
                    "type": "p",
                    "text": "You should also update the following files:"
                },
                {
                    "type": "list",
                    "items": [
                        "public/images/profile.jpgwith your photo (Recommended: 400px width/height).",
                        "const name = '[Your Name]'incomponents/layout.jswith your name.",
                        "<p>[Your Self Introduction]</p>inpages/index.jswith your self introduction."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css",
            "title": "Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "p",
                    "text": "The second page we added currently does not have styling. Let's add some CSS to style the page."
                },
                {
                    "type": "p",
                    "text": "Next.js has built-in support forCSSandSass.\nFor this course, we will use CSS."
                },
                {
                    "type": "p",
                    "text": "This lesson will also talk about how Next.js handles static assets like images and page metadata like the<title>tag."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What You’ll Learn in This Lesson"
                },
                {
                    "type": "p",
                    "text": "In this lesson, you’ll learn:"
                },
                {
                    "type": "list",
                    "items": [
                        "How to addstatic files(images, etc) to Next.js.",
                        "How to customize what goes inside the<head>for each page.",
                        "How to create a reusable React component which is styled usingCSS Modules.",
                        "How toadd global CSSinpages/_app.js.",
                        "Some useful tips for styling in Next.js."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Prerequisites"
                },
                {
                    "type": "list",
                    "items": [
                        "Basic CSS knowledge. This course will go over how to add CSS in a Next.js app, but it won't cover CSS fundamentals."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you’re looking for detailed documentation on Next.js styling, take a lookat the CSS documentation."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css/assets",
            "title": "Assets - Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets"
                },
                {
                    "type": "p",
                    "text": "Next.js can servestatic assets, like images, underthe top-levelpublicdirectory. Files insidepubliccan be referenced from the root of the application similar topages."
                },
                {
                    "type": "p",
                    "text": "Thepublicdirectory is also useful forrobots.txt, Google Site Verification, and any other static assets. Check out the documentation forStatic File Servingto learn more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Download Your Profile Picture"
                },
                {
                    "type": "p",
                    "text": "First, let's retrieve your profile picture."
                },
                {
                    "type": "list",
                    "items": [
                        "Downloadyour profile picture in.jpgformat (oruse this file).",
                        "Create animagesdirectory inside of thepublicdirectory.",
                        "Save the picture asprofile.jpgin thepublic/imagesdirectory.",
                        "The image size can be around 400px by 400px.",
                        "You may remove the unused SVG logo file directly under thepublicdirectory."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Unoptimized Image"
                },
                {
                    "type": "p",
                    "text": "With regular HTML, you would add your profile picture as follows:"
                },
                {
                    "type": "code",
                    "code": "<imgsrc=\"/images/profile.jpg\"alt=\"Your Name\"/>"
                },
                {
                    "type": "p",
                    "text": "However, this means you have to manually handle:"
                },
                {
                    "type": "list",
                    "items": [
                        "Ensuring your image is responsive on different screen sizes",
                        "Optimizing your images with a third-party tool or library",
                        "Only loading images when they enter the viewport"
                    ]
                },
                {
                    "type": "p",
                    "text": "And more. Instead, Next.js provides anImagecomponent out of the box to handle this for you."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Image Component and Image Optimization"
                },
                {
                    "type": "p",
                    "text": "next/imageis an extension of the HTML<img>element, evolved for the modern web."
                },
                {
                    "type": "p",
                    "text": "Next.js also has support for Image Optimization by default. This allows for resizing, optimizing, and serving images in modern formats likeWebPwhen the browser supports it. This avoids shipping large images to devices with a smaller viewport. It also allows Next.js to automatically adopt future image formats and serve them to browsers that support those formats."
                },
                {
                    "type": "p",
                    "text": "Automatic Image Optimization works with any image source. Even if the image is hosted by an external data source, like a CMS, it can still be optimized."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using the Image Component"
                },
                {
                    "type": "p",
                    "text": "Instead of optimizing images at build time, Next.js optimizes images on-demand, as users request them. Unlike static site generators and static-only solutions, your build times aren't increased, whether shipping 10 images or 10 million images."
                },
                {
                    "type": "p",
                    "text": "Images are lazy loaded by default. That means your page speed isn't penalized for images outside the viewport. Images load as they are scrolled into viewport."
                },
                {
                    "type": "p",
                    "text": "Images are always rendered in such a way as to avoidCumulative Layout Shift, aCore Web Vitalthat Google is going touse in search ranking."
                },
                {
                    "type": "p",
                    "text": "Here's an example usingnext/imageto display our profile picture. Theheightandwidthprops should be the desired rendering size, with an aspect ratio identical to the source image."
                },
                {
                    "type": "p",
                    "text": "Note:We'll use this component later in \"Polishing Layout\", no need to copy it yet."
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image';constYourComponent=()=>(<Imagesrc=\"/images/profile.jpg\"// Route of the image fileheight={144}// Desired size with correct aspect ratiowidth={144}// Desired size with correct aspect ratioalt=\"Your Name\"/>);"
                },
                {
                    "type": "p",
                    "text": "To learn more about Automatic Image Optimization, check out thedocumentation."
                },
                {
                    "type": "p",
                    "text": "To learn more about theImagecomponent, check out theAPI reference fornext/image."
                },
                {
                    "type": "p",
                    "text": "Quick Review: What doesnext/imagesimplify for you?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css/css-styling",
            "title": "CSS Styling - Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "CSS Styling"
                },
                {
                    "type": "p",
                    "text": "Let’s now talk aboutCSS styling."
                },
                {
                    "type": "p",
                    "text": "As you can see, our index page (http://localhost:3000) already has some styles. If you look at your file structure, you'll see a folder calledstyleswith two CSS files: a global stylesheet (global.css), and a CSS module (Home.module.css)."
                },
                {
                    "type": "p",
                    "text": "If your project doesn't have those files, you can download the starter code here:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app nextjs-blog --use-npm --example\"https://github.com/vercel/next-learn/tree/main/basics/assets-metadata-css-starter\""
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CSS Modules"
                },
                {
                    "type": "p",
                    "text": "CSS modulesallow you to locally scope CSS at the component-level by automatically creating unique class names. This allows you to use the same CSS class name in different files without worrying about class name collisions."
                },
                {
                    "type": "p",
                    "text": "In addition to CSS modules, you can style your Next.js application in a variety of ways, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Sass which allows you to import.cssand.scssfiles.",
                        "PostCSS libraries likeTailwind CSS.",
                        "CSS-in-JS libraries such asstyled-jsx,styled-components, andemotion"
                    ]
                },
                {
                    "type": "p",
                    "text": "In this lesson, we’ll talk about how to useCSS ModulesandSassin Next.js. Let’s dive in!"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css/global-styles",
            "title": "Global Styles - Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Global Styles"
                },
                {
                    "type": "p",
                    "text": "CSS Modulesare useful for component-level styles. But if you want some CSS to be loaded byevery page, Next.js has support for that as well."
                },
                {
                    "type": "p",
                    "text": "To loadglobal CSSto your application, create a file calledpages/_app.jswith the following content:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionApp({Component,pageProps}){return<Component{...pageProps}/>;}"
                },
                {
                    "type": "p",
                    "text": "The default export of_app.jsis a top-level React component that wraps all the pages in your application. You can use this component to keep state when navigating between pages, or to add global styles as we're doing here.Learn more about_app.jsfile."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Restart the Development Server"
                },
                {
                    "type": "p",
                    "text": "Important:You need to restart the development server when you addpages/_app.js. PressCtrl + cto stop the server and run:"
                },
                {
                    "type": "code",
                    "code": "npmrun dev"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding Global CSS"
                },
                {
                    "type": "p",
                    "text": "In Next.js, you can addglobal CSSfiles by importing them frompages/_app.js. Youcannotimport global CSS anywhere else."
                },
                {
                    "type": "p",
                    "text": "The reason thatglobal CSScan't be imported outside ofpages/_app.jsis that global CSS affects all elements on the page."
                },
                {
                    "type": "p",
                    "text": "If you were to navigate from the homepage to the/posts/first-postpage, global styles from the homepage would affect/posts/first-postunintentionally."
                },
                {
                    "type": "p",
                    "text": "You can place the global CSS file anywhere and use any name. So let’s do the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a top-levelstylesdirectory and aglobal.cssfile.",
                        "Add the following CSS insidestyles/global.css. This code resets some styles and changes the color of theatag:"
                    ]
                },
                {
                    "type": "code",
                    "code": "html,body{padding:0;margin:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;line-height:1.6;font-size:18px;}*{box-sizing:border-box;}a{color:#0070f3;text-decoration:none;}a:hover{text-decoration:underline;}img{max-width:100%;display:block;}"
                },
                {
                    "type": "p",
                    "text": "Finally, import the CSS file inside thepages/_app.jsfile you've created earlier on:"
                },
                {
                    "type": "code",
                    "code": "// `pages/_app.js`import'../styles/global.css';exportdefaultfunctionApp({Component,pageProps}){return<Component{...pageProps}/>;}"
                },
                {
                    "type": "p",
                    "text": "Now, if you accesshttp://localhost:3000/posts/first-post, you’ll see that the styles are applied. Any styles imported in_app.jswill be applied globally, to all pages of the application."
                },
                {
                    "type": "p",
                    "text": "If it didn’t work: Make sure you restart the development server when you updatepages/_app.js."
                },
                {
                    "type": "p",
                    "text": "Quick Review: Where can you import global CSS files?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css/layout-component",
            "title": "Layout Component - Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Layout Component"
                },
                {
                    "type": "p",
                    "text": "First, let’s create aLayoutcomponent which will be shared across all pages."
                },
                {
                    "type": "list",
                    "items": [
                        "Create a top-level directory calledcomponents.",
                        "Insidecomponents, create a file calledlayout.jswith the following content:"
                    ]
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionLayout({children}){return<div>{children}</div>;}"
                },
                {
                    "type": "p",
                    "text": "Then, openpages/posts/first-post.js, add an import for theLayoutcomponent, and make it the outermost component:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';importLinkfrom'next/link';importLayoutfrom'../../components/layout';exportdefaultfunctionFirstPost(){return(<Layout><Head><title>First Post</title></Head><h1>First Post</h1><h2><Linkhref=\"/\">← Back to home</Link></h2></Layout>);}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding CSS"
                },
                {
                    "type": "p",
                    "text": "Now, let’s add some styles to theLayoutcomponent. To do so, we’ll useCSS Modules, which lets you import CSS files in a React component."
                },
                {
                    "type": "p",
                    "text": "Create a file calledcomponents/layout.module.csswith the following content:"
                },
                {
                    "type": "code",
                    "code": ".container{max-width:36rem;padding:01rem;margin:3remauto6rem;}"
                },
                {
                    "type": "p",
                    "text": "Important:To useCSS Modules, the CSS file name must end with.module.css."
                },
                {
                    "type": "p",
                    "text": "To use thiscontainerclass insidecomponents/layout.js, you need to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Import the CSS file and assign a name to it, likestyles",
                        "Usestyles.containeras theclassName"
                    ]
                },
                {
                    "type": "p",
                    "text": "Opencomponents/layout.jsand replace its content with the following:"
                },
                {
                    "type": "code",
                    "code": "importstylesfrom'./layout.module.css';exportdefaultfunctionLayout({children}){return<divclassName={styles.container}>{children}</div>;}"
                },
                {
                    "type": "p",
                    "text": "If you go tohttp://localhost:3000/posts/first-postnow, you should see that the text is now inside a centered container:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Automatically Generates Unique Class Names"
                },
                {
                    "type": "p",
                    "text": "Now, if you take a look at the HTML in your browser’s devtools, you’ll notice that thedivrendered by theLayoutcomponent has a class name that looks likelayout_container__...:"
                },
                {
                    "type": "p",
                    "text": "This is whatCSS Modulesdoes:It automatically generates unique class names. As long as you use CSS Modules, you don’t have to worry about class name collisions."
                },
                {
                    "type": "p",
                    "text": "Furthermore, Next.js’s code splitting feature works onCSS Modulesas well. It ensures the minimal amount of CSS is loaded for each page. This results in smaller bundle sizes."
                },
                {
                    "type": "p",
                    "text": "CSS Modulesare extracted from the JavaScript bundles at build time and generate.cssfiles that are loaded automatically by Next.js."
                },
                {
                    "type": "p",
                    "text": "Quick Review: What is one benefit of using CSS Modules?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css/metadata",
            "title": "Metadata - Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Metadata"
                },
                {
                    "type": "p",
                    "text": "What if we wanted to modify the metadata of the page, such as the<title>HTML tag?"
                },
                {
                    "type": "p",
                    "text": "<title>is part of the<head>HTML tag, so let's dive into how we can modify the<head>tag in a Next.js page."
                },
                {
                    "type": "p",
                    "text": "Openpages/index.jsin your editor and find the following lines:"
                },
                {
                    "type": "code",
                    "code": "<Head><title>Create Next App</title><linkrel=\"icon\"href=\"/favicon.ico\"/></Head>"
                },
                {
                    "type": "p",
                    "text": "Notice that<Head>is used instead of the lowercase<head>.<Head>is a React Component that is built into Next.js. It allows you to modify the<head>of a page."
                },
                {
                    "type": "p",
                    "text": "You can import theHeadcomponent from thenext/headmodule."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "AddingHeadtofirst-post.js"
                },
                {
                    "type": "p",
                    "text": "We haven't added a<title>to our/posts/first-postroute. Let's add one."
                },
                {
                    "type": "p",
                    "text": "Open thepages/posts/first-post.jsfile and add an import forHeadfromnext/headat the beginning of the file:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';"
                },
                {
                    "type": "p",
                    "text": "Then, update the exportedFirstPostcomponent to include theHeadcomponent. For now, we‘ll add just thetitletag:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionFirstPost(){return(<><Head><title>First Post</title></Head><h1>First Post</h1><h2><Linkhref=\"/\">← Back to home</Link></h2></>);}"
                },
                {
                    "type": "p",
                    "text": "Try accessinghttp://localhost:3000/posts/first-post. The browser tab should now say \"First Post\". By using your browser’s developer tools, you should see that thetitletag is added to<head>."
                },
                {
                    "type": "p",
                    "text": "To learn more about theHeadcomponent, check out theAPI reference fornext/head."
                },
                {
                    "type": "p",
                    "text": "If you want to customize the<html>tag, for example to add thelangattribute, you can do so by creating apages/_document.jsfile. Learn more in thecustomDocumentdocumentation."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css/polishing-layout",
            "title": "Polishing Layout - Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Polishing Layout"
                },
                {
                    "type": "p",
                    "text": "So far, we’ve only added minimal React and CSS code just to illustrate concepts such asCSS Modules. Before we move on to our next lesson aboutdata fetching, let’s polish our page styling and code."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Updatecomponents/layout.module.css"
                },
                {
                    "type": "p",
                    "text": "First, opencomponents/layout.module.cssand replace its content with the following more polished styles for the layout and profile picture:"
                },
                {
                    "type": "code",
                    "code": ".container{max-width:36rem;padding:01rem;margin:3remauto6rem;}.header{display:flex;flex-direction:column;align-items:center;}.backToHome{margin:3rem00;}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Createstyles/utils.module.css"
                },
                {
                    "type": "p",
                    "text": "Second, let’s create a set of CSS utility classes (for text styles) that can be re-used across multiple components."
                },
                {
                    "type": "p",
                    "text": "Add a new CSS file calledstyles/utils.module.csswith the following content:"
                },
                {
                    "type": "code",
                    "code": ".heading2Xl{font-size:2.5rem;line-height:1.2;font-weight:800;letter-spacing:-0.05rem;margin:1rem0;}.headingXl{font-size:2rem;line-height:1.3;font-weight:800;letter-spacing:-0.05rem;margin:1rem0;}.headingLg{font-size:1.5rem;line-height:1.4;margin:1rem0;}.headingMd{font-size:1.2rem;line-height:1.5;}.borderCircle{border-radius:9999px;}.colorInherit{color:inherit;}.padding1px{padding-top:1px;}.list{list-style:none;padding:0;margin:0;}.listItem{margin:001.25rem;}.lightText{color:#666;}"
                },
                {
                    "type": "p",
                    "text": "You can reuse these utility classes throughout your application, and you may even use utility classes in yourglobal.cssfile. Utility classes refer to an approach of writing CSS selectors rather than a method (e.g. global styles, CSS modules, Sass, etc). Learn more aboututility-first CSS."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Updatecomponents/layout.js"
                },
                {
                    "type": "p",
                    "text": "Third, opencomponents/layout.jsand replace its content with the following code,changingYour Nameto an actual name:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';importImagefrom'next/image';importstylesfrom'./layout.module.css';importutilStylesfrom'../styles/utils.module.css';importLinkfrom'next/link';constname='Your Name';exportconstsiteTitle='Next.js Sample Website';exportdefaultfunctionLayout({children,home}){return(<divclassName={styles.container}><Head><linkrel=\"icon\"href=\"/favicon.ico\"/><metaname=\"description\"content=\"Learn how to build a personal website using Next.js\"/><metaproperty=\"og:image\"content={`https://og-image.vercel.app/${encodeURI(siteTitle,)}.png?theme=light&md=0&fontSize=75px&images=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg`}/><metaname=\"og:title\"content={siteTitle}/><metaname=\"twitter:card\"content=\"summary_large_image\"/></Head><headerclassName={styles.header}>{home?(<><Imageprioritysrc=\"/images/profile.jpg\"className={utilStyles.borderCircle}height={144}width={144}alt=\"\"/><h1className={utilStyles.heading2Xl}>{name}</h1></>):(<><Linkhref=\"/\"><Imageprioritysrc=\"/images/profile.jpg\"className={utilStyles.borderCircle}height={108}width={108}alt=\"\"/></Link><h2className={utilStyles.headingLg}><Linkhref=\"/\"className={utilStyles.colorInherit}>{name}</Link></h2></>)}</header><main>{children}</main>{!home&&(<divclassName={styles.backToHome}><Linkhref=\"/\">← Back to home</Link></div>)}</div>);}"
                },
                {
                    "type": "p",
                    "text": "Here’s what’s new:"
                },
                {
                    "type": "list",
                    "items": [
                        "metatags(likeog:image), which are used to describe a page's content",
                        "Booleanhomeprop which will adjust the size of the title and the image",
                        "\"Back to home\" link at the bottom ifhomeisfalse",
                        "Added images withnext/image, which are preloaded with thepriorityattribute"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Updatepages/index.js"
                },
                {
                    "type": "p",
                    "text": "Finally, let's update the homepage."
                },
                {
                    "type": "p",
                    "text": "Openpages/index.jsand replace its content with:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';importLayout,{siteTitle}from'../components/layout';importutilStylesfrom'../styles/utils.module.css';exportdefaultfunctionHome(){return(<Layouthome><Head><title>{siteTitle}</title></Head><sectionclassName={utilStyles.headingMd}><p>[Your Self Introduction]</p><p>(This is a sample website - you’ll be building a site like this on{' '}<ahref=\"https://nextjs.org/learn\">our Next.js tutorial</a>.)</p></section></Layout>);}"
                },
                {
                    "type": "p",
                    "text": "Then replace[Your Self Introduction]with your self-introduction. Here’s an example with the author’s profile:"
                },
                {
                    "type": "p",
                    "text": "That’s it! We now have the polished layout code and we're ready to move on to our data fetching lessons."
                },
                {
                    "type": "p",
                    "text": "Before we wrap up this lesson, let’s talk about some helpful techniques related to Next.js’s CSS support on the next page."
                },
                {
                    "type": "p",
                    "text": "Quick Review: Why are CSS Modules useful?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css/setup",
            "title": "Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "p",
                    "text": "If you’re continuing from the previous lesson,you can skip this page. Click the button below to go to the next page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Download Starter Code (Optional)"
                },
                {
                    "type": "p",
                    "text": "If you’re NOT continuing from the previous lesson, you can download, install, and run the starter code for this lesson below. This sets up anextjs-blogdirectory such that it’s identical to the result of the previous lesson."
                },
                {
                    "type": "p",
                    "text": "Again, this is NOT necessary if you’ve just finished the previous lesson."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app nextjs-blog --use-npm --example\"https://github.com/vercel/next-learn/tree/main/basics/assets-metadata-css-starter\""
                },
                {
                    "type": "p",
                    "text": "Then follow the instructions from the command output (cdinto the directory and start the development server)."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css/styling-tips",
            "title": "Styling Tips - Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Styling Tips"
                },
                {
                    "type": "p",
                    "text": "Here are some styling tips that might be helpful."
                },
                {
                    "type": "p",
                    "text": "You can justread throughthe following sections. No need to make changes to our app!"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Usingclsxlibrary to toggle classes"
                },
                {
                    "type": "p",
                    "text": "clsxis a simple library that lets you toggle class names easily. You can install it usingnpm install clsxoryarn add clsx."
                },
                {
                    "type": "p",
                    "text": "Please take a look at itsdocumentationfor more details, but here's the basic usage:"
                },
                {
                    "type": "list",
                    "items": [
                        "Suppose that you want to create anAlertcomponent which acceptstype, which can be'success'or'error'.",
                        "If it's'success', you want the text color to be green. If it's'error', you want the text color to be red."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can first write a CSS module (e.g.alert.module.css) like this:"
                },
                {
                    "type": "code",
                    "code": ".success{color:green;}.error{color:red;}"
                },
                {
                    "type": "p",
                    "text": "And useclsxlike this:"
                },
                {
                    "type": "code",
                    "code": "importstylesfrom'./alert.module.css';import{clsx}from'clsx';exportdefaultfunctionAlert({children,type}){return(<divclassName={clsx({[styles.success]:type==='success',[styles.error]:type==='error',})}>{children}</div>);}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing PostCSS Config"
                },
                {
                    "type": "p",
                    "text": "Out of the box, with no configuration, Next.js compiles CSS usingPostCSS."
                },
                {
                    "type": "p",
                    "text": "To customize PostCSS config, you can create a top-level file calledpostcss.config.js. This is useful if you're using libraries likeTailwind CSS."
                },
                {
                    "type": "p",
                    "text": "Here are the steps to addTailwind CSS. First, install the packages:"
                },
                {
                    "type": "code",
                    "code": "npminstall-D tailwindcss autoprefixer postcss"
                },
                {
                    "type": "p",
                    "text": "Then, create apostcss.config.js:"
                },
                {
                    "type": "code",
                    "code": "// postcss.config.jsmodule.exports={plugins:{tailwindcss:{},autoprefixer:{},},};"
                },
                {
                    "type": "p",
                    "text": "We also recommendconfiguring content sourcesby specifying thecontentoption ontailwind.config.js:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={content:['./pages/**/*.{js,ts,jsx,tsx}','./components/**/*.{js,ts,jsx,tsx}',// For the best performance and to avoid false positives,// be as specific as possible with your content configuration.],};"
                },
                {
                    "type": "p",
                    "text": "To learn more about custom PostCSS configuration, check out thedocumentation for PostCSS."
                },
                {
                    "type": "p",
                    "text": "To easily get started with Tailwind CSS,check out our example."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using Sass"
                },
                {
                    "type": "p",
                    "text": "Out of the box, Next.js allows you to importSassusing both the.scssand.sassextensions. You can use component-level Sass viaCSS Modulesand the.module.scssor.module.sassextension."
                },
                {
                    "type": "p",
                    "text": "Before you can use Next.js' built-in Sass support, be sure to installsass:"
                },
                {
                    "type": "code",
                    "code": "npminstall-D sass"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "That's it for this lesson!"
                },
                {
                    "type": "p",
                    "text": "To learn more about Next.js's built-in CSS Support and CSS Modules, check out theCSS Documentation."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/assets-metadata-css/third-party-javascript",
            "title": "Third-Party JavaScript - Assets, Metadata, and CSS | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSSSetupAssetsMetadataThird-Party JavaScriptCSS StylingLayout ComponentGlobal StylesPolishing LayoutStyling Tips",
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Assets",
                        "Metadata",
                        "Third-Party JavaScript",
                        "CSS Styling",
                        "Layout Component",
                        "Global Styles",
                        "Polishing Layout",
                        "Styling Tips"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Assets, Metadata, and CSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Third-Party JavaScript"
                },
                {
                    "type": "p",
                    "text": "Third-party JavaScriptrefers to any scripts that are added from a third-party source. Usually,\nthird-party scripts are included in order to introduce newer functionality into a site that does not\nneed to be written from scratch, such as analytics, ads, and customer support widgets."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding Third-Party JavaScript"
                },
                {
                    "type": "p",
                    "text": "Let's dive into how we can add a third-party script to a Next.js page."
                },
                {
                    "type": "p",
                    "text": "Openpages/posts/first-post.jsin your editor and find the following lines:"
                },
                {
                    "type": "code",
                    "code": "<Head><title>First Post</title></Head>"
                },
                {
                    "type": "p",
                    "text": "In addition to metadata, scripts that need to load and execute as soon as possible are usually added\nwithin the<head>of a page. Using a regular HTML<script>element, an external script would be\nadded as follows:"
                },
                {
                    "type": "code",
                    "code": "<Head><title>First Post</title><scriptsrc=\"https://connect.facebook.net/en_US/sdk.js\"/></Head>"
                },
                {
                    "type": "p",
                    "text": "This script contains theFacebook SDKwhich is commonly used to introduce Facebook social plugins and other functionality. Although this\napproach works, including scripts in this manner does not give a clear idea of when it would load\nwith respect to the other JavaScript code fetched on the same page. If a particular script is\nrender-blocking and can delay page content from loading, this can significantly impact performance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using the Script Component"
                },
                {
                    "type": "p",
                    "text": "next/scriptis an extension of the HTML<script>element and\noptimizes when additional scripts are fetched and executed."
                },
                {
                    "type": "p",
                    "text": "In the same file, add an import forScriptfromnext/scriptat the beginning of the file:"
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script';"
                },
                {
                    "type": "p",
                    "text": "Now, update theFirstPostcomponent to include theScriptcomponent:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionFirstPost(){return(<><Head><title>First Post</title></Head><Scriptsrc=\"https://connect.facebook.net/en_US/sdk.js\"strategy=\"lazyOnload\"onLoad={()=>console.log(`script loaded correctly, window.FB has been populated`)}/><h1>First Post</h1><h2><Linkhref=\"/\">← Back to home</Link></h2></>);}"
                },
                {
                    "type": "p",
                    "text": "Notice that a few additional properties have been defined in the Script component:"
                },
                {
                    "type": "list",
                    "items": [
                        "strategycontrols when the third-party script should load. A value oflazyOnloadtells Next.js to load this particular script lazily during browser idle time",
                        "onLoadis used to run any JavaScript code immediately after the script has finished loading. In this example, we log a message to the console that mentions that the script has loaded correctly"
                    ]
                },
                {
                    "type": "p",
                    "text": "Try accessinghttp://localhost:3000/posts/first-post. By\nusing your browser’s developer tools, you should see the message above logged in theConsolepanel. In addition, you can runwindow.FBto see that the script has populated this global\nvariable."
                },
                {
                    "type": "p",
                    "text": "Note:The Facebook SDK was only used as a contrived example to show how to add third-party\nscripts to your application in a performant way. Now that you understand the basics of including\nthird-party functionality in Next.js, you can remove the Script component fromFirstPostbefore\nproceeding."
                },
                {
                    "type": "p",
                    "text": "To learn more about theScriptcomponent, check out thedocumentation."
                },
                {
                    "type": "p",
                    "text": "Quick Review: What doesnext/scriptsimplify for you?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/create-nextjs-app",
            "title": "Create a Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js AppSetupWelcome to Next.jsEditing the Page",
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js AppSetupWelcome to Next.jsEditing the Page",
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create a Next.js App"
                },
                {
                    "type": "p",
                    "text": "New App Router Course: You're currently viewing the Pages Router course.View the new App Router course here."
                },
                {
                    "type": "p",
                    "text": "To build a complete web application with React from scratch, there are many important details you need to consider:"
                },
                {
                    "type": "list",
                    "items": [
                        "Code has to be bundled using a bundler like webpack and transformed using a compiler like Babel.",
                        "You need to do production optimizations such as code splitting.",
                        "You might want to statically pre-render some pages for performance and SEO. You might also want to use server-side rendering or client-side rendering.",
                        "You might have to write some server-side code to connect your React app to your data store."
                    ]
                },
                {
                    "type": "p",
                    "text": "Aframeworkcan solve these problems. But such a framework must have the right level of abstraction — otherwise it won’t be very useful. It also needs to have great \"Developer Experience\", ensuring you and your team have an amazing experience while writing code."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Next.js: The React Framework"
                },
                {
                    "type": "p",
                    "text": "EnterNext.js, the React Framework. Next.js provides a solution to all of the above problems. But more importantly, it puts you and your team in thepit of successwhen building React applications."
                },
                {
                    "type": "p",
                    "text": "Next.js aims to have best-in-class developer experience and many built-in features, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "An intuitivepage-basedrouting system (with support fordynamic routes)",
                        "Pre-rendering, bothstatic generation(SSG) andserver-side rendering(SSR) are supported on a per-page basis",
                        "Automatic code splitting for faster page loads",
                        "Client-side routingwith optimized prefetching",
                        "Built-in CSSandSass support, and support for anyCSS-in-JSlibrary",
                        "Development environment withFast Refreshsupport",
                        "API routesto build API endpoints with Serverless Functions",
                        "Fully extendable"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js is used in tens of thousands of production-facing websites and web applications, including many of the world's largest brands."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "About This Tutorial"
                },
                {
                    "type": "p",
                    "text": "This free interactive course will guide you through how to get started with Next.js."
                },
                {
                    "type": "p",
                    "text": "In this tutorial, you’ll learn Next.js basics by creating a very simpleblog app. Here’s an example of the final result:"
                },
                {
                    "type": "p",
                    "text": "https://next-learn-starter.vercel.app(source)"
                },
                {
                    "type": "p",
                    "text": "This tutorial assumes basic knowledge of JavaScript and React. If you’ve never written React code, you should go throughthe official React tutorialfirst."
                },
                {
                    "type": "p",
                    "text": "If you’re looking for documentation instead,visit the Next.js documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Join the Conversation"
                },
                {
                    "type": "p",
                    "text": "If you have questions about anything related to Next.js or this course, you're welcome to ask our community onDiscord."
                },
                {
                    "type": "p",
                    "text": "Let’s get started!"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/create-nextjs-app/editing-the-page",
            "title": "Editing the Page - Create a Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js AppSetupWelcome to Next.jsEditing the Page",
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js AppSetupWelcome to Next.jsEditing the Page",
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create a Next.js App"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Editing the Page"
                },
                {
                    "type": "p",
                    "text": "Let’s try editing the starter page."
                },
                {
                    "type": "list",
                    "items": [
                        "Make sure the Next.js development server is still running.",
                        "Openpages/index.jswith your text editor.",
                        "Find the text that says\"Welcome to\"under the<h1>tag and change it to\"Learn\".",
                        "Save the file."
                    ]
                },
                {
                    "type": "p",
                    "text": "As soon as you save the file, the browser automatically updates the page with the new text:"
                },
                {
                    "type": "p",
                    "text": "The Next.js development server hasFast Refreshenabled. When you make changes to files, Next.js automatically applies the changes in the browser almost instantly. No refresh needed! This will help you iterate on your app quickly."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Next Up: Creating Pages"
                },
                {
                    "type": "p",
                    "text": "Great job! That’s it for the first lesson."
                },
                {
                    "type": "p",
                    "text": "In the next lesson, we’ll talk aboutcreating more pages and navigating between pages."
                },
                {
                    "type": "p",
                    "text": "You should keep the development server running, but if you want to restart it, hitCtrl + cto stop the server."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/create-nextjs-app/setup",
            "title": "Setup - Create a Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js AppSetupWelcome to Next.jsEditing the Page",
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js AppSetupWelcome to Next.jsEditing the Page",
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create a Next.js App"
                },
                {
                    "type": "p",
                    "text": "Deploy Next.js on Vercel in seconds."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Setup"
                },
                {
                    "type": "p",
                    "text": "First, let’s make sure that your development environment is ready."
                },
                {
                    "type": "list",
                    "items": [
                        "If you don’t haveNode.jsinstalled,install it from here. You’ll need Node.js version18or higher.",
                        "You’ll be using your own text editor and terminal app for this tutorial."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you are on Windows, we recommenddownloading Git for Windowsand use Git Bash that comes with it, which supports the UNIX-specific commands in this tutorial.Windows Subsystem for Linux (WSL)is another option."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create a Next.js app"
                },
                {
                    "type": "p",
                    "text": "To create a Next.js app, open your terminal,cdinto the directory you’d like to create the app in, and run the following command:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest nextjs-blog --use-npm --example\"https://github.com/vercel/next-learn/tree/main/basics/learn-starter\""
                },
                {
                    "type": "p",
                    "text": "Under the hood, this uses the tool calledcreate-next-app, which bootstraps a Next.js app for you. It usesthis templatethrough the--exampleflag."
                },
                {
                    "type": "p",
                    "text": "If it doesn’t work, please take a look atthis page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Run the development server"
                },
                {
                    "type": "p",
                    "text": "You now have a new directory callednextjs-blog. Let’scdinto it:"
                },
                {
                    "type": "code",
                    "code": "cdnextjs-blog"
                },
                {
                    "type": "p",
                    "text": "Then, run the following command:"
                },
                {
                    "type": "code",
                    "code": "npmrun dev"
                },
                {
                    "type": "p",
                    "text": "This starts your Next.js app’s \"development server\" (more on this later) on port3000."
                },
                {
                    "type": "p",
                    "text": "Let’s check to see if it’s working. Openhttp://localhost:3000from your browser."
                },
                {
                    "type": "p",
                    "text": "Quick Review: What text do you see on the page?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/create-nextjs-app/welcome-to-nextjs",
            "title": "Welcome to Next.js - Create a Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js AppSetupWelcome to Next.jsEditing the Page",
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js AppSetupWelcome to Next.jsEditing the Page",
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Welcome to Next.js",
                        "Editing the Page"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create a Next.js App"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Welcome to Next.js"
                },
                {
                    "type": "p",
                    "text": "You should see a page like this when you accesshttp://localhost:3000. This is the starter template page which shows some helpful information about Next.js."
                },
                {
                    "type": "p",
                    "text": "Help is available:If you get stuck, you can reach out to the community onGitHub Discussions."
                },
                {
                    "type": "p",
                    "text": "Let’s try to edit this page next!"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/data-fetching",
            "title": "Pre-rendering and Data Fetching | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-rendering and Data Fetching"
                },
                {
                    "type": "p",
                    "text": "We’d like to create a blog (here’sthe desired result), but so far we’ve added no blog content.\nIn this lesson, we’ll learn how to fetch external blog data into our app. We’ll store the blog content in the file system, but it’ll work if the content is stored elsewhere (e.g. database orHeadless CMS)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What You’ll Learn in This Lesson"
                },
                {
                    "type": "p",
                    "text": "In this lesson, you’ll learn about:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js’pre-renderingfeature.",
                        "The two forms of pre-rendering:Static GenerationandServer-side Rendering.",
                        "Static Generationwith data, andwithout data.",
                        "getStaticPropsand how to use it to import external blog data into the index page.",
                        "Some useful information ongetStaticProps."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/data-fetching/getstaticprops-details",
            "title": "getStaticProps Details - Pre-rendering and Data Fetching | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-rendering and Data Fetching"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "getStaticProps Details"
                },
                {
                    "type": "p",
                    "text": "Here is some essential information you should know aboutgetStaticProps."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fetch External API or Query Database"
                },
                {
                    "type": "p",
                    "text": "Inlib/posts.js, we’ve implementedgetSortedPostsDatawhich fetches data from the file system. But you can fetch the data from other sources, like an external API endpoint, and it’ll work just fine:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongetSortedPostsData(){// Instead of the file system,// fetch post data from an external API endpointconstres=awaitfetch('..');returnres.json();}"
                },
                {
                    "type": "p",
                    "text": "Note: Next.js polyfillsfetch()on both the client and server. You don't need to import it."
                },
                {
                    "type": "p",
                    "text": "You can also query the database directly:"
                },
                {
                    "type": "code",
                    "code": "importsomeDatabaseSDKfrom'someDatabaseSDK'constdatabaseClient=someDatabaseSDK.createClient(...)exportasyncfunctiongetSortedPostsData(){// Instead of the file system,// fetch post data from a databasereturndatabaseClient.query('SELECT posts...')}"
                },
                {
                    "type": "p",
                    "text": "This is possible becausegetStaticPropsonlyruns on the server-side. It will never run on the client-side. It won’t even be included in the JS bundle for the browser. That means you can write code such as direct database queries without them being sent to browsers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Development vs. Production"
                },
                {
                    "type": "list",
                    "items": [
                        "Indevelopment(npm run devoryarn dev),getStaticPropsruns onevery request.",
                        "Inproduction,getStaticPropsruns atbuild time. However, this behavior can be enhanced using thefallbackkeyreturned bygetStaticPaths"
                    ]
                },
                {
                    "type": "p",
                    "text": "Because it’s meant to be run at build time, you won’t be able to use data that’s only available during request time, such as query parameters or HTTP headers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Only Allowed in a Page"
                },
                {
                    "type": "p",
                    "text": "getStaticPropscan only be exported from apage. You can’t export it from non-page files."
                },
                {
                    "type": "p",
                    "text": "One of the reasons for this restriction is that React needs to have all the required data before the page is rendered."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What If I Need to Fetch Data at Request Time?"
                },
                {
                    "type": "p",
                    "text": "SinceStatic Generationhappens once at build time, it's not suitable for data that updates frequently or changes on every user request."
                },
                {
                    "type": "p",
                    "text": "In cases like this, where your data is likely to change, you can useServer-side Rendering. Let's learn more about server-side rendering in the next section."
                },
                {
                    "type": "p",
                    "text": "Quick Review: Where doesgetStaticPropsrun?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/data-fetching/implement-getstaticprops",
            "title": "Implement getStaticProps - Pre-rendering and Data Fetching | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-rendering and Data Fetching"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Implement getStaticProps"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Pre-rendering in Next.js"
                },
                {
                    "type": "p",
                    "text": "Next.js has two forms of pre-rendering:Static GenerationandServer-side Rendering. The difference is inwhenit generates the HTML for a page."
                },
                {
                    "type": "list",
                    "items": [
                        "Static Generationis the pre-rendering method that generates the HTML atbuild time. The pre-rendered HTML is thenreusedon each request.",
                        "Server-side Renderingis the pre-rendering method that generates the HTML oneach request."
                    ]
                },
                {
                    "type": "p",
                    "text": "Importantly, Next.js lets youchoosewhich pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using Static Generation (getStaticProps())"
                },
                {
                    "type": "p",
                    "text": "Now, we need to add an import forgetSortedPostsDataand call it insidegetStaticPropsinpages/index.js."
                },
                {
                    "type": "p",
                    "text": "Openpages/index.jsin your editor and add the following code above the exportedHomecomponent:"
                },
                {
                    "type": "code",
                    "code": "import{getSortedPostsData}from'../lib/posts';exportasyncfunctiongetStaticProps(){constallPostsData=getSortedPostsData();return{props:{allPostsData,},};}"
                },
                {
                    "type": "p",
                    "text": "By returningallPostsDatainside thepropsobject ingetStaticProps, the blog posts will be passed to theHomecomponent as a prop. Now you can access the blog posts like so:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionHome({allPostsData}){...}"
                },
                {
                    "type": "p",
                    "text": "To display the blog posts, let's update theHomecomponent to add another<section>tag with the data below the section with your self introduction. Don't forget to also change the props from()to({ allPostsData }):"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionHome({allPostsData}){return(<Layouthome>{/* Keep the existing code here */}{/* Add this <section> tag below the existing <section> tag */}<sectionclassName={`${utilStyles.headingMd}${utilStyles.padding1px}`}><h2className={utilStyles.headingLg}>Blog</h2><ulclassName={utilStyles.list}>{allPostsData.map(({id,date,title})=>(<liclassName={utilStyles.listItem}key={id}>{title}<br/>{id}<br/>{date}</li>))}</ul></section></Layout>);}"
                },
                {
                    "type": "p",
                    "text": "You should now see the blog data if you accesshttp://localhost:3000."
                },
                {
                    "type": "p",
                    "text": "Congratulations! We’ve successfully fetched external data (from the file system) and pre-rendered the index page with this data."
                },
                {
                    "type": "p",
                    "text": "Let’s talk about some tips for usinggetStaticPropson the next page."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/data-fetching/pre-rendering",
            "title": "Pre-rendering - Pre-rendering and Data Fetching | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-rendering and Data Fetching"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-rendering"
                },
                {
                    "type": "p",
                    "text": "Before we talk aboutdata fetching, let’s talk about one of the most important concepts in Next.js:Pre-rendering."
                },
                {
                    "type": "p",
                    "text": "By default, Next.js pre-renders every page. This means that Next.jsgenerates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance andSEO."
                },
                {
                    "type": "p",
                    "text": "Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive. (This process is calledhydration.)"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Check That Pre-rendering Is Happening"
                },
                {
                    "type": "p",
                    "text": "You can check that pre-rendering is happening by taking the following steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Disable JavaScript in your browser. (Here’s how in Chrome).",
                        "Try accessing this page(the final result of this tutorial)."
                    ]
                },
                {
                    "type": "p",
                    "text": "You should see that your app is rendered without JavaScript. That’s because Next.js has pre-rendered the app into static HTML, allowing you to see the app UI without running JavaScript."
                },
                {
                    "type": "p",
                    "text": "Note: You can also try the above steps onlocalhost, but CSS won’t be loaded if you disable JavaScript."
                },
                {
                    "type": "p",
                    "text": "If your app is a plain React.js app (without Next.js), there’s nopre-rendering, so you won’t be able to see the app if you disable JavaScript. For example:"
                },
                {
                    "type": "list",
                    "items": [
                        "Enable JavaScript in your browser andcheck out this page. This is a plain React.js app built withCreate React App.",
                        "Now, disable JavaScript and accessthe same pageagain.",
                        "You won’t see the app anymore — instead, it’ll say \"You need to enable JavaScript to run this app.\" This is because the app is not pre-rendered into static HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Summary: Pre-rendering vs. No Pre-rendering"
                },
                {
                    "type": "p",
                    "text": "Here’s a quick graphical summary:"
                },
                {
                    "type": "p",
                    "text": "Next, let’s talk abouttwo formsof pre-rendering in Next.js."
                },
                {
                    "type": "p",
                    "text": "Quick Review: Which of the following isnota benefit of pre-rendering?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/data-fetching/request-time",
            "title": "Fetching Data at Request Time - Pre-rendering and Data Fetching | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-rendering and Data Fetching"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fetching Data at Request Time"
                },
                {
                    "type": "p",
                    "text": "If you need to fetch data atrequest timeinstead of at build time, you can tryServer-side Rendering:"
                },
                {
                    "type": "p",
                    "text": "To useServer-side Rendering, you need to exportgetServerSidePropsinstead ofgetStaticPropsfrom your page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "UsinggetServerSideProps"
                },
                {
                    "type": "p",
                    "text": "Here’s the starter code forgetServerSideProps. It’s not necessary for our blog example, so we won’t be implementing it."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongetServerSideProps(context){return{props:{// props for your component},};}"
                },
                {
                    "type": "p",
                    "text": "BecausegetServerSidePropsis called at request time, its parameter (context) contains request specific parameters."
                },
                {
                    "type": "p",
                    "text": "You should usegetServerSidePropsonly if you need to pre-render a page whose data must be fetched at request time. Time to first byte (TTFB) will be slower thangetStaticPropsbecause the server must compute the result on every request, and the result cannot be cached by aCDNwithout extra configuration."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client-side Rendering"
                },
                {
                    "type": "p",
                    "text": "If youdo notneed to pre-render the data, you can also use the following strategy (calledClient-side Rendering):"
                },
                {
                    "type": "list",
                    "items": [
                        "Statically generate (pre-render) parts of the page that do not require external data.",
                        "When the page loads, fetch external data from the client using JavaScript and populate the remaining parts."
                    ]
                },
                {
                    "type": "p",
                    "text": "This approach works well for user dashboard pages, for example. Because a dashboard is a private, user-specific page, SEO is not relevant, and the page doesn’t need to bepre-rendered. The data is frequently updated, which requires request-time data fetching."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "SWR"
                },
                {
                    "type": "p",
                    "text": "The team behind Next.js has created a React hook for data fetching calledSWR. We highly recommend it if you’re fetching data on the client side. It handles caching, revalidation, focus tracking, refetching on interval, and more. We won’t cover the details here, but here’s an example usage:"
                },
                {
                    "type": "code",
                    "code": "importuseSWRfrom'swr';functionProfile(){const{data,error}=useSWR('/api/user',fetch);if(error)return<div>failed to load</div>;if(!data)return<div>loading...</div>;return<div>hello{data.name}!</div>;}"
                },
                {
                    "type": "p",
                    "text": "Check out theSWR documentationto learn more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "That’s It!"
                },
                {
                    "type": "p",
                    "text": "In the next lesson, we’ll create pages for each blog post usingdynamic routes."
                },
                {
                    "type": "p",
                    "text": "Again, you can get in-depth information aboutgetStaticPropsandgetServerSidePropsin theData Fetching documentation."
                },
                {
                    "type": "p",
                    "text": "Quick Review: When should you useClient-side rendering?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/data-fetching/setup",
            "title": "Pre-rendering and Data Fetching | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-rendering and Data Fetching"
                },
                {
                    "type": "p",
                    "text": "If you’re continuing from the previous lesson,you can skip this page. Click the button below to go to the next page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Download Starter Code (Optional)"
                },
                {
                    "type": "p",
                    "text": "If you’re NOT continuing from the previous lesson, you can download, install, and run the starter code for this lesson below. This sets up anextjs-blogdirectory such that it’s identical to the result of the previous lesson."
                },
                {
                    "type": "p",
                    "text": "Again, this is NOT necessary if you’ve just finished the previous lesson."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest nextjs-blog --use-npm --example\"https://github.com/vercel/next-learn/tree/main/basics/data-fetching-starter\""
                },
                {
                    "type": "p",
                    "text": "Then follow the instructions from the command output (cdinto the directory and start the development server)."
                },
                {
                    "type": "p",
                    "text": "You should also update the following files:"
                },
                {
                    "type": "list",
                    "items": [
                        "public/images/profile.jpgwith your photo (Recommended: 400px width/height).",
                        "const name = '[Your Name]'incomponents/layout.jswith your name.",
                        "<p>[Your Self Introduction]</p>inpages/index.jswith your self introduction."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/data-fetching/two-forms",
            "title": "Two Forms of Pre-rendering - Pre-rendering and Data Fetching | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-rendering and Data Fetching"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Two Forms of Pre-rendering"
                },
                {
                    "type": "p",
                    "text": "Next.js has two forms of pre-rendering:Static GenerationandServer-side Rendering. The difference is inwhenit generates the HTML for a page."
                },
                {
                    "type": "list",
                    "items": [
                        "Static Generationis the pre-rendering method that generates the HTML atbuild time. The pre-rendered HTML is thenreusedon each request.",
                        "Server-side Renderingis the pre-rendering method that generates the HTML oneach request."
                    ]
                },
                {
                    "type": "p",
                    "text": "In development mode (when you runnpm run devoryarn dev), pages arepre-renderedon every request. This also applies toStatic Generationto make it easier to develop. When going to production, Static Generation will happen once, at build time, andnoton every request."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Per-page Basis"
                },
                {
                    "type": "p",
                    "text": "Importantly, Next.js lets youchoosewhich pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by usingStatic Generationfor most pages and usingServer-side Renderingfor others."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "When to UseStatic Generationv.s.Server-side Rendering"
                },
                {
                    "type": "p",
                    "text": "We recommend usingStatic Generation(with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request."
                },
                {
                    "type": "p",
                    "text": "You can useStatic Generationfor many types of pages, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Marketing pages",
                        "Blog posts",
                        "E-commerce product listings",
                        "Help and documentation"
                    ]
                },
                {
                    "type": "p",
                    "text": "You should ask yourself: \"Can I pre-render this pageaheadof a user's request?\" If the answer is yes, then you should chooseStatic Generation."
                },
                {
                    "type": "p",
                    "text": "On the other hand,Static Generationisnota good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request."
                },
                {
                    "type": "p",
                    "text": "In that case, you can useServer-side Rendering. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate frequently updated data."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "We’ll Focus on Static Generation"
                },
                {
                    "type": "p",
                    "text": "In this lesson, we’ll focus onStatic Generation. On the next page, we’ll talk aboutStatic Generationwith and without data."
                },
                {
                    "type": "p",
                    "text": "Quick Review: When would you useServer-side rendering?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/data-fetching/with-data",
            "title": "Static Generation with and without Data - Pre-rendering and Data Fetching | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data FetchingSetupPre-renderingTwo Forms of Pre-renderingStatic Generation with and without DataBlog DataImplement getStaticPropsgetStaticProps DetailsFetching Data at Request Time",
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Pre-rendering",
                        "Two Forms of Pre-rendering",
                        "Static Generation with and without Data",
                        "Blog Data",
                        "Implement getStaticProps",
                        "getStaticProps Details",
                        "Fetching Data at Request Time"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-rendering and Data Fetching"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Static Generation with and without Data"
                },
                {
                    "type": "p",
                    "text": "Static Generationcan be done with and without data."
                },
                {
                    "type": "p",
                    "text": "So far, all the pages we’ve created do not require fetching external data. Those pages will automatically be statically generated when the app is built for production."
                },
                {
                    "type": "p",
                    "text": "However, for some pages, you might not be able to render the HTML without first fetching some external data. Maybe you need to access the file system, fetch external API, or query your database at build time. Next.js supports this case —Static Generationwith data— out of the box."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static Generation with Data usinggetStaticProps"
                },
                {
                    "type": "p",
                    "text": "How does it work? Well, in Next.js, when you export a page component, you can also export anasyncfunction calledgetStaticProps. If you do this, then:"
                },
                {
                    "type": "list",
                    "items": [
                        "getStaticPropsruns at build time in production, and…",
                        "Inside the function, you can fetch external data and send it as props to the page."
                    ]
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionHome(props){...}exportasyncfunctiongetStaticProps(){// Get external data from the file system, API, DB, etc.constdata=...// The value of the `props` key will be//  passed to the `Home` componentreturn{props:...}}"
                },
                {
                    "type": "p",
                    "text": "Essentially,getStaticPropsallows you to tell Next.js:\"Hey, this page has some data dependencies — so when you pre-render this page at build time, make sure to resolve them first!\""
                },
                {
                    "type": "p",
                    "text": "Note: In development mode,getStaticPropsruns on each request instead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Let’s UsegetStaticProps"
                },
                {
                    "type": "p",
                    "text": "It’s easier to learn by doing, so starting from the next page, we’ll usegetStaticPropsto implement our blog."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/deploying-nextjs-app",
            "title": "Deploying Your Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deploying Your Next.js App"
                },
                {
                    "type": "p",
                    "text": "In this final basics lesson, we’ll deploy our Next.js app to production."
                },
                {
                    "type": "p",
                    "text": "We’ll learn how to deploy Next.js toVercel, the platform built by the creators of Next.js. We’ll also talk about other deployment options."
                },
                {
                    "type": "p",
                    "text": "Pre-requisite: You need to have aGitHub accountfor this lesson."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What You’ll Learn in This Lesson"
                },
                {
                    "type": "p",
                    "text": "In this lesson, you’ll learn:"
                },
                {
                    "type": "list",
                    "items": [
                        "How to deploy your Next.js app toVercel.",
                        "TheDPSWorkflow:Develop,Preview, andShip.",
                        "How to deploy your Next.js app to your own hosting provider."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/deploying-nextjs-app/deploy",
            "title": "Deploy to Vercel - Deploying Your Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deploying Your Next.js App"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deploy to Vercel"
                },
                {
                    "type": "p",
                    "text": "The easiest way to deploy Next.js to production is to use theVercelplatform developed by the creators of Next.js."
                },
                {
                    "type": "p",
                    "text": "Vercel is a serverless platform for static and hybrid applications built to integrate with your headless content, commerce, or database. We make it easy for frontend teams to develop, preview, and ship delightful user experiences, where performance is the default. You can start using it for free — no credit card required."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create aVercelAccount"
                },
                {
                    "type": "p",
                    "text": "First, go tohttps://vercel.com/signupto create aVercelaccount. ChooseContinue with GitHuband go through the sign up process."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Import yournextjs-blogrepository"
                },
                {
                    "type": "p",
                    "text": "Once you’re signed up,importyournextjs-blogrepository onVercel. You can do so from here:https://vercel.com/import/git."
                },
                {
                    "type": "list",
                    "items": [
                        "You’ll need toInstallVercelfor GitHub. You can give it access toAll Repositories.",
                        "Once you’ve installedVercel, importnextjs-blog."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can usedefault valuesfor the following settings — no need to change anything.Vercelautomatically detects that you have a Next.js app and chooses optimal build settings for you."
                },
                {
                    "type": "list",
                    "items": [
                        "Project Name",
                        "Root Directory",
                        "Build Command",
                        "Output Directory",
                        "Development Command"
                    ]
                },
                {
                    "type": "p",
                    "text": "When you deploy, your Next.js app will start building. It should finish in under a minute."
                },
                {
                    "type": "p",
                    "text": "Help is available: If your deployment fails, you can always get help onGitHub Discussions. To learn more about deployment, take a look atour documentation."
                },
                {
                    "type": "p",
                    "text": "When it’s done, you’ll getdeployment URLs. Click on one of the URLs and you should see the Next.js starter page live."
                },
                {
                    "type": "p",
                    "text": "Congratulations! You just deployed your Next.js app to production. On the next page, we’ll go into the details ofVerceland the recommended workflow."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/deploying-nextjs-app/finally",
            "title": "Finally - Deploying Your Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deploying Your Next.js App"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Finally"
                },
                {
                    "type": "p",
                    "text": "Congratulations on finishing all the basics lessons! Here are some recommended steps:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Share Your Next.js App"
                },
                {
                    "type": "p",
                    "text": "We encourage you to share the app you built in this tutorial on Twitter. If you do, please mention our team at@vercelso that we can take a look! We’d love to get your feedback on this tutorial as well."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Use TypeScript with Next.js"
                },
                {
                    "type": "p",
                    "text": "If you prefer usingTypeScript, you can learnhow to use TypeScript with Next.js from here."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What to Learn Next"
                },
                {
                    "type": "p",
                    "text": "Take a look atour documentationto learn more. In particular, the following pages might be interesting:"
                },
                {
                    "type": "list",
                    "items": [
                        "Data Fetching:Learn in depth about data fetching.",
                        "Environment Variables:Learn more about the built-in support for Environment Variables.",
                        "Search Engine Optimization:Learn how to optimize the SEO of your Next.js application."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Join the Conversation"
                },
                {
                    "type": "p",
                    "text": "If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub Discussions."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/deploying-nextjs-app/github",
            "title": "Push to GitHub - Deploying Your Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deploying Your Next.js App"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Push to GitHub"
                },
                {
                    "type": "p",
                    "text": "Before we deploy, let’s push our Next.js app toGitHubif you haven’t done so already. This will make deployment easier."
                },
                {
                    "type": "list",
                    "items": [
                        "On your personal GitHub account, create a new repository callednextjs-blog.",
                        "The repository can be public or private. You donotneed to initialize it with a README or other files.",
                        "If you need help setting up your repo, take a look atthis guide on GitHub."
                    ]
                },
                {
                    "type": "p",
                    "text": "Then:"
                },
                {
                    "type": "list",
                    "items": [
                        "If you haven’t initialized the git repository locally for your Next.js app, do so now.",
                        "Push the Next.js app to your GitHub repository."
                    ]
                },
                {
                    "type": "p",
                    "text": "To push to GitHub, you can run the following commands (replace<username>with your GitHub username):"
                },
                {
                    "type": "code",
                    "code": "gitremoteaddorigin https://github.com/<username>/nextjs-blog.gitgitpush -u origin main"
                },
                {
                    "type": "p",
                    "text": "Once your GitHub repository is ready, continue to the next page."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/deploying-nextjs-app/other-hosting-options",
            "title": "Other Hosting Options - Deploying Your Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deploying Your Next.js App"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Other Hosting Options"
                },
                {
                    "type": "p",
                    "text": "Next.js can be deployed to any hosting provider that supports Node.js."
                },
                {
                    "type": "p",
                    "text": "If you’ve followed the instructions so far, yourpackage.jsonshould have the followingbuildandstartscripts:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next\",\"build\":\"next build\",\"start\":\"next start\"}}"
                },
                {
                    "type": "p",
                    "text": "In your own hosting provider, run thebuildscript once, which builds the production application in the.nextfolder."
                },
                {
                    "type": "code",
                    "code": "npmrun build"
                },
                {
                    "type": "p",
                    "text": "After building, thestartscript starts a Node.js server that supports hybrid pages, serving both statically generated and server-side rendered pages, and API Routes."
                },
                {
                    "type": "code",
                    "code": "npmrun start"
                },
                {
                    "type": "p",
                    "text": "Tip: You can customize thestartscript inpackage.jsonto accept aPORTparameter by updating it as:\"start\": \"next start -p $PORT\"."
                },
                {
                    "type": "p",
                    "text": "That’s it! If you have questions about deploying Next.js, you can ask our community onGitHub Discussions."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/deploying-nextjs-app/platform-details",
            "title": "Next.js and Vercel - Deploying Your Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deploying Your Next.js App"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next.js and Vercel"
                },
                {
                    "type": "p",
                    "text": "Vercelis made by the creators of Next.js and has first-class support for Next.js. When you deploy your Next.js app toVercel, the following happens by default:"
                },
                {
                    "type": "list",
                    "items": [
                        "Pages that useStatic Generationand assets (JS, CSS, images, fonts, etc) will automatically be served from theVercel Edge Network, which is blazingly fast.",
                        "Pages that useServer-Side RenderingandAPI routeswill automatically become isolatedServerless Functions. This allows page rendering and API requests to scale infinitely."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vercelhas many more features, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Domains:Once deployed onVercel, you can assign a custom domain to your Next.js app. Take a look atour documentationhere.",
                        "Environment Variables:You can also set environment variables onVercel. Take a look atour documentationhere. You can thenuse those environment variablesin your Next.js app.",
                        "Automatic HTTPS:HTTPS is enabled by default (including custom domains) and doesn't require extra configuration. We auto-renew SSL certificates."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can learn more about the platform in theVerceldocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Preview Deployment for Every Push"
                },
                {
                    "type": "p",
                    "text": "The steps below areoptional— you can try it or just read it through."
                },
                {
                    "type": "p",
                    "text": "After deploying toVercel, try doing the following if you can:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a newbranchon your app.",
                        "Make some changes and push to GitHub.",
                        "Create a newpull request(GitHub help page)."
                    ]
                },
                {
                    "type": "p",
                    "text": "You should see a comment by thevercelbot on the pull request page."
                },
                {
                    "type": "p",
                    "text": "Try clicking on thePreviewURL inside this comment. You should see the changes you just made."
                },
                {
                    "type": "p",
                    "text": "When you have a pull request open,Vercelautomatically creates apreview deploymentfor that branch on every push. The preview URL will always point to the latest preview deployment."
                },
                {
                    "type": "p",
                    "text": "You can share this preview URL with your collaborators and get immediate feedback."
                },
                {
                    "type": "p",
                    "text": "If your preview deployment looks good,merge it tomain. When you do this,Vercelautomatically creates a production deployment."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Develop, Preview, Ship"
                },
                {
                    "type": "p",
                    "text": "We’ve just gone through the workflow we callDPS:Develop,Preview, andShip."
                },
                {
                    "type": "list",
                    "items": [
                        "Develop: We’ve written code in Next.js and used the Next.js development server running to take advantage of its hot reloading feature.",
                        "Preview: We’ve pushed changes to a branch on GitHub, andVercelcreated a preview deployment that’s available via a URL. We can share this preview URL with others for feedback. In addition to doingcode reviews, you can dodeployment previews.",
                        "Ship: We’ve merged the pull request tomainto ship to production."
                    ]
                },
                {
                    "type": "p",
                    "text": "We strongly recommend using this workflow when developing Next.js apps — it will help you iterate on your app faster."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/deploying-nextjs-app/setup",
            "title": "Deploying Your Next.js App | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js AppSetupPush to GitHubDeploy to VercelNext.js and VercelOther Hosting OptionsFinally",
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Push to GitHub",
                        "Deploy to Vercel",
                        "Next.js and Vercel",
                        "Other Hosting Options",
                        "Finally"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deploying Your Next.js App"
                },
                {
                    "type": "p",
                    "text": "If you’re continuing from the previous lesson,you can skip this page. Click the button below to go to the next page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Download Starter Code (Optional)"
                },
                {
                    "type": "p",
                    "text": "If you’re NOT continuing from the previous lesson, you can download, install, and run the starter code for this lesson below. This sets up anextjs-blogdirectory such that it’s identical to the result of the previous lesson."
                },
                {
                    "type": "p",
                    "text": "Again, this is NOT necessary if you’ve just finished the previous lesson."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest nextjs-blog --use-npm --example\"https://github.com/vercel/next-learn/tree/main/basics/basics-final\""
                },
                {
                    "type": "p",
                    "text": "Then follow the instructions from the command output (cdinto the directory and start the development server)."
                },
                {
                    "type": "p",
                    "text": "You should also update the following files:"
                },
                {
                    "type": "list",
                    "items": [
                        "public/images/profile.jpgwith your photo (Recommended: 400px width/height).",
                        "const name = '[Your Name]'incomponents/layout.jswith your name.",
                        "<p>[Your Self Introduction]</p>inpages/index.jswith your self introduction."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/dynamic-routes",
            "title": "Dynamic Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "p",
                    "text": "We’ve populated the index page with the blog data, but we still haven’t created individual blog pages yet (here’s thedesired result). We want the URL for these pages to depend on the blog data, which means we need to usedynamic routes."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What You’ll Learn in This Lesson"
                },
                {
                    "type": "p",
                    "text": "In this lesson, you’ll learn:"
                },
                {
                    "type": "list",
                    "items": [
                        "How to statically generate pages withdynamic routesusinggetStaticPaths.",
                        "How to writegetStaticPropsto fetch the data for each blog post.",
                        "How to render markdown usingremark.",
                        "How to pretty-print date strings.",
                        "How to link to a page withdynamic routes.",
                        "Some useful information ondynamic routes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/dynamic-routes/dynamic-routes-details",
            "title": "Dynamic Routes Details - Dynamic Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes Details"
                },
                {
                    "type": "p",
                    "text": "Here is some essential information you should know aboutdynamic routes."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fetch External API or Query Database"
                },
                {
                    "type": "p",
                    "text": "LikegetStaticProps,getStaticPathscan fetch data from any data source. In our example,getAllPostIds(which is used bygetStaticPaths) may fetch from an external API endpoint:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongetAllPostIds(){// Instead of the file system,// fetch post data from an external API endpointconstres=awaitfetch('..');constposts=awaitres.json();returnposts.map((post)=>{return{params:{id:post.id,},};});}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Development vs. Production"
                },
                {
                    "type": "list",
                    "items": [
                        "Indevelopment(npm run devoryarn dev),getStaticPathsruns onevery request.",
                        "Inproduction,getStaticPathsruns atbuild time."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fallback"
                },
                {
                    "type": "p",
                    "text": "Recall that we returnedfallback: falsefromgetStaticPaths. What does this mean?"
                },
                {
                    "type": "p",
                    "text": "Iffallbackisfalse, then any paths not returned bygetStaticPathswill result in a404 page."
                },
                {
                    "type": "p",
                    "text": "Iffallbackistrue, then the behavior ofgetStaticPropschanges:"
                },
                {
                    "type": "list",
                    "items": [
                        "The paths returned fromgetStaticPathswill be rendered to HTML at build time.",
                        "The paths that have not been generated at build time willnotresult in a 404 page. Instead, Next.js will serve a \"fallback\" version of the page on the first request to such a path.",
                        "In the background, Next.js will statically generate the requested path. Subsequent requests to the same path will serve the generated page, just like other pages pre-rendered at build time."
                    ]
                },
                {
                    "type": "p",
                    "text": "Iffallbackisblocking, then new paths will be server-side rendered withgetStaticProps, and cached for future requests so it only happens once per path."
                },
                {
                    "type": "p",
                    "text": "This is beyond the scope of our lessons, but you can learn more aboutfallback: trueandfallback: 'blocking'in thefallbackdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Catch-all Routes"
                },
                {
                    "type": "p",
                    "text": "Dynamic routes can be extended to catch all paths by adding three dots (...) inside the brackets. For example:"
                },
                {
                    "type": "list",
                    "items": [
                        "pages/posts/[...id].jsmatches/posts/a, but also/posts/a/b,/posts/a/b/cand so on."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you do this, ingetStaticPaths, you must return an array as the value of theidkey like so:"
                },
                {
                    "type": "code",
                    "code": "return[{params:{// Statically Generates /posts/a/b/cid:['a','b','c'],},},//...];"
                },
                {
                    "type": "p",
                    "text": "Andparams.idwill be an array ingetStaticProps:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongetStaticProps({params}){// params.id will be like ['a', 'b', 'c']}"
                },
                {
                    "type": "p",
                    "text": "Take a look at thecatch all routes documentationto learn more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Router"
                },
                {
                    "type": "p",
                    "text": "If you want to access the Next.js router, you can do so by importing theuseRouterhook fromnext/router."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "404 Pages"
                },
                {
                    "type": "p",
                    "text": "To create acustom 404 page, createpages/404.js. This file is statically generated at build time."
                },
                {
                    "type": "code",
                    "code": "// pages/404.jsexportdefaultfunctionCustom404(){return<h1>404 - Page Not Found</h1>;}"
                },
                {
                    "type": "p",
                    "text": "Take a look at ourError Pagesdocumentation to learn more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "More Examples"
                },
                {
                    "type": "p",
                    "text": "We have created several examples to illustrategetStaticPropsandgetStaticPaths— take a look at their source code to learn more:"
                },
                {
                    "type": "list",
                    "items": [
                        "Blog Starter using markdown files(Demo)",
                        "WordPress Example(Demo)",
                        "DatoCMS Example(Demo)",
                        "TakeShape Example(Demo)",
                        "Sanity Example(Demo)"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "That’s it!"
                },
                {
                    "type": "p",
                    "text": "In the next lesson, we’ll talk aboutAPI Routesin Next.js."
                },
                {
                    "type": "p",
                    "text": "Quick Review: You want to dynamically create product pages with the pathpages/products/[id].js, where[id]refers to a specific product ID. What is the correct way to implement this?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/dynamic-routes/implement-getstaticpaths",
            "title": "Implement getStaticPaths - Dynamic Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Implement getStaticPaths"
                },
                {
                    "type": "p",
                    "text": "First, let’s set up the files:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a file called[id].jsinside thepages/postsdirectory.",
                        "Also,removefirst-post.jsinside thepages/postsdirectory — we’ll no longer use this."
                    ]
                },
                {
                    "type": "p",
                    "text": "Then, openpages/posts/[id].jsin your editor and paste the following code. We’ll fill in...later:"
                },
                {
                    "type": "code",
                    "code": "importLayoutfrom'../../components/layout';exportdefaultfunctionPost(){return<Layout>...</Layout>;}"
                },
                {
                    "type": "p",
                    "text": "Then, openlib/posts.jsand add the followinggetAllPostIdsfunction at the bottom. It will return the list of file names (excluding.md) in thepostsdirectory:"
                },
                {
                    "type": "code",
                    "code": "exportfunctiongetAllPostIds(){constfileNames=fs.readdirSync(postsDirectory);// Returns an array that looks like this:// [//   {//     params: {//       id: 'ssg-ssr'//     }//   },//   {//     params: {//       id: 'pre-rendering'//     }//   }// ]returnfileNames.map((fileName)=>{return{params:{id:fileName.replace(/\\.md$/,''),},};});}"
                },
                {
                    "type": "p",
                    "text": "Important: The returned list isnotjust an array of strings — itmustbe an array of objects that look like the comment above. Each object must have theparamskey and contain an object with theidkey (because we’re using[id]in the file name). Otherwise,getStaticPathswill fail."
                },
                {
                    "type": "p",
                    "text": "Finally, we'll import thegetAllPostIdsfunction and use it insidegetStaticPaths. Openpages/posts/[id].jsand copy the following code above the exportedPostcomponent:"
                },
                {
                    "type": "code",
                    "code": "import{getAllPostIds}from'../../lib/posts';exportasyncfunctiongetStaticPaths(){constpaths=getAllPostIds();return{paths,fallback:false,};}"
                },
                {
                    "type": "list",
                    "items": [
                        "pathscontains the array of known paths returned bygetAllPostIds(), which include the params defined bypages/posts/[id].js. Learn more in thepathskey documentation",
                        "Ignorefallback: falsefor now — we’ll explain that later."
                    ]
                },
                {
                    "type": "p",
                    "text": "We’re almost done — but we still need to implementgetStaticProps. Let’s do that on the next page!"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/dynamic-routes/implement-getstaticprops",
            "title": "Implement getStaticProps - Dynamic Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Implement getStaticProps"
                },
                {
                    "type": "p",
                    "text": "We need to fetch necessary data to render the post with the givenid."
                },
                {
                    "type": "p",
                    "text": "To do so, openlib/posts.jsagain and add the followinggetPostDatafunction at the bottom. It will return the post data based onid:"
                },
                {
                    "type": "code",
                    "code": "exportfunctiongetPostData(id){constfullPath=path.join(postsDirectory,`${id}.md`);constfileContents=fs.readFileSync(fullPath,'utf8');// Use gray-matter to parse the post metadata sectionconstmatterResult=matter(fileContents);// Combine the data with the idreturn{id,...matterResult.data,};}"
                },
                {
                    "type": "p",
                    "text": "Then, openpages/posts/[id].jsand replace this line:"
                },
                {
                    "type": "code",
                    "code": "import{getAllPostIds}from'../../lib/posts';"
                },
                {
                    "type": "p",
                    "text": "with the following code:"
                },
                {
                    "type": "code",
                    "code": "import{getAllPostIds,getPostData}from'../../lib/posts';exportasyncfunctiongetStaticProps({params}){constpostData=getPostData(params.id);return{props:{postData,},};}"
                },
                {
                    "type": "p",
                    "text": "The post page is now using thegetPostDatafunction ingetStaticPropsto get the post data and return it as props."
                },
                {
                    "type": "p",
                    "text": "Now, let's update thePostcomponent to usepostData. Inpages/posts/[id].jsreplace the exportedPostcomponent with the following code:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPost({postData}){return(<Layout>{postData.title}<br/>{postData.id}<br/>{postData.date}</Layout>);}"
                },
                {
                    "type": "p",
                    "text": "That’s it! Try visiting these pages:"
                },
                {
                    "type": "list",
                    "items": [
                        "http://localhost:3000/posts/ssg-ssr",
                        "http://localhost:3000/posts/pre-rendering"
                    ]
                },
                {
                    "type": "p",
                    "text": "You should be able to see the blog data for each page:"
                },
                {
                    "type": "p",
                    "text": "Great! We’ve successfully generateddynamic routes."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Something Wrong?"
                },
                {
                    "type": "p",
                    "text": "If you come across an error, make sure your files have the correct code:"
                },
                {
                    "type": "list",
                    "items": [
                        "pages/posts/[id].jsshouldlook like this.",
                        "lib/posts.jsshouldlook like this.",
                        "(If it’s still not working) The remaining code shouldlook like this."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you’re still stuck, feel free to ask the community onGitHub Discussions. It’d be helpful if you could push your code to GitHub and link to it so others can take a look."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Summary"
                },
                {
                    "type": "p",
                    "text": "Again, here’s the graphical summary of what we’ve done:"
                },
                {
                    "type": "p",
                    "text": "We still haven’t displayed the blogmarkdown content. Let’s do this next."
                },
                {
                    "type": "p",
                    "text": "Quick Review: How doesparams.idfromgetStaticProps({ params })know the key is namedid?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/dynamic-routes/page-path-external-data",
            "title": "Page Path Depends on External Data - Dynamic Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Page Path Depends on External Data"
                },
                {
                    "type": "p",
                    "text": "In the previous lesson, we covered the case where thepage contentdepends on external data. We usedgetStaticPropsto fetch required data to render the index page."
                },
                {
                    "type": "p",
                    "text": "In this lesson, we’ll talk about the case where eachpage pathdepends on external data. Next.js allows you to statically generate pages with paths that depend on external data. This enablesdynamic URLsin Next.js."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How to Statically Generate Pages with Dynamic Routes"
                },
                {
                    "type": "p",
                    "text": "In our case, we want to createdynamic routesfor blog posts:"
                },
                {
                    "type": "list",
                    "items": [
                        "We want each post to have the path/posts/<id>, where<id>is the name of the markdown file under the top-levelpostsdirectory.",
                        "Since we havessg-ssr.mdandpre-rendering.md, we’d like the paths to be/posts/ssg-ssrand/posts/pre-rendering."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Overview of the Steps"
                },
                {
                    "type": "p",
                    "text": "We can do this by taking the following steps.You don’t have to make these changes yet— we’ll do it all on the next page."
                },
                {
                    "type": "p",
                    "text": "First, we’ll create a page called[id].jsunderpages/posts. Pages that begin with[and end with]aredynamic routesin Next.js."
                },
                {
                    "type": "p",
                    "text": "Inpages/posts/[id].js, we’ll write code that will render a post page — just like other pages we’ve created."
                },
                {
                    "type": "code",
                    "code": "importLayoutfrom'../../components/layout';exportdefaultfunctionPost(){return<Layout>...</Layout>;}"
                },
                {
                    "type": "p",
                    "text": "Now, here’s what’s new: We’ll export an async function calledgetStaticPathsfrom this page.\nIn this function, we need to return a list ofpossible valuesforid."
                },
                {
                    "type": "code",
                    "code": "importLayoutfrom'../../components/layout';exportdefaultfunctionPost(){return<Layout>...</Layout>;}exportasyncfunctiongetStaticPaths(){// Return a list of possible value for id}"
                },
                {
                    "type": "p",
                    "text": "Finally, we need to implementgetStaticPropsagain - this time, to fetch necessary data for the blog post with a givenid.getStaticPropsis givenparams, which containsid(because the file name is[id].js)."
                },
                {
                    "type": "code",
                    "code": "importLayoutfrom'../../components/layout';exportdefaultfunctionPost(){return<Layout>...</Layout>;}exportasyncfunctiongetStaticPaths(){// Return a list of possible value for id}exportasyncfunctiongetStaticProps({params}){// Fetch necessary data for the blog post using params.id}"
                },
                {
                    "type": "p",
                    "text": "Here’s a graphic summary of what we just talked about:"
                },
                {
                    "type": "p",
                    "text": "Let’s try this on the next page!"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/dynamic-routes/polishing-index-page",
            "title": "Polishing the Index Page - Dynamic Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Polishing the Index Page"
                },
                {
                    "type": "p",
                    "text": "Next, let’s update our index page (pages/index.js). We need to add links to each post page using theLinkcomponent."
                },
                {
                    "type": "p",
                    "text": "Openpages/index.jsand add the following imports at the top of the file forLinkandDate:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link';importDatefrom'../components/date';"
                },
                {
                    "type": "p",
                    "text": "Then, near the bottom of theHomecomponent in the same file, replace thelitag with the following:"
                },
                {
                    "type": "code",
                    "code": "<liclassName={utilStyles.listItem}key={id}><Linkhref={`/posts/${id}`}>{title}</Link><br/><smallclassName={utilStyles.lightText}><DatedateString={date}/></small></li>"
                },
                {
                    "type": "p",
                    "text": "If you go to http://localhost:3000, the page now has links to each article:"
                },
                {
                    "type": "p",
                    "text": "If something is not working, make sure your codelooks like this."
                },
                {
                    "type": "p",
                    "text": "That’s it! Before we wrap up this lesson, let’s talk about some tips fordynamic routeson the next page."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/dynamic-routes/polishing-post-page",
            "title": "Polishing the Post Page - Dynamic Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Polishing the Post Page"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Addingtitleto the Post Page"
                },
                {
                    "type": "p",
                    "text": "Inpages/posts/[id].js, let’s add thetitletag using the post data. You'll need to add an import fornext/headat the top of the file and add thetitletag by updating thePostcomponent:"
                },
                {
                    "type": "code",
                    "code": "// Add this importimportHeadfrom'next/head';exportdefaultfunctionPost({postData}){return(<Layout>{/* Add this <Head> tag */}<Head><title>{postData.title}</title></Head>{/* Keep the existing code here */}</Layout>);}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Formatting the Date"
                },
                {
                    "type": "p",
                    "text": "To format the date, we’ll use thedate-fnslibrary. First, install it:"
                },
                {
                    "type": "code",
                    "code": "npminstalldate-fns"
                },
                {
                    "type": "p",
                    "text": "Next, create a file calledcomponents/date.jsand add the followingDatecomponent:"
                },
                {
                    "type": "code",
                    "code": "import{parseISO,format}from'date-fns';exportdefaultfunctionDate({dateString}){constdate=parseISO(dateString);return<timedateTime={dateString}>{format(date,'LLLL d, yyyy')}</time>;}"
                },
                {
                    "type": "p",
                    "text": "Note: You can view the differentformat()string options on thedate-fnswebsite."
                },
                {
                    "type": "p",
                    "text": "Now, openpages/posts/[id].js, add an import for theDatecomponent at the top of the file, and use it over{postData.date}:"
                },
                {
                    "type": "code",
                    "code": "// Add this importimportDatefrom'../../components/date';exportdefaultfunctionPost({postData}){return(<Layout>{/* Keep the existing code here */}{/* Replace {postData.date} with this */}<DatedateString={postData.date}/>{/* Keep the existing code here */}</Layout>);}"
                },
                {
                    "type": "p",
                    "text": "If you accesshttp://localhost:3000/posts/pre-rendering, you should now see the date written as\"January 1, 2020\"."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding CSS"
                },
                {
                    "type": "p",
                    "text": "Finally, let’s add some CSS using the filestyles/utils.module.csswe added before. Openpages/posts/[id].js, then add an import for the CSS file, and replace thePostcomponent with the following code:"
                },
                {
                    "type": "code",
                    "code": "// Add this import at the top of the fileimportutilStylesfrom'../../styles/utils.module.css';exportdefaultfunctionPost({postData}){return(<Layout><Head><title>{postData.title}</title></Head><article><h1className={utilStyles.headingXl}>{postData.title}</h1><divclassName={utilStyles.lightText}><DatedateString={postData.date}/></div><divdangerouslySetInnerHTML={{__html:postData.contentHtml}}/></article></Layout>);}"
                },
                {
                    "type": "p",
                    "text": "If you accesshttp://localhost:3000/posts/pre-rendering, the page should now look a little better:"
                },
                {
                    "type": "p",
                    "text": "Great work! We’ll polish the index page next and we’ll be done!"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/dynamic-routes/render-markdown",
            "title": "Render Markdown - Dynamic Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Render Markdown"
                },
                {
                    "type": "p",
                    "text": "To render markdown content, we’ll use theremarklibrary. First, let’s install it:"
                },
                {
                    "type": "code",
                    "code": "npminstallremark remark-html"
                },
                {
                    "type": "p",
                    "text": "Then, openlib/posts.jsand add the following imports to the top of the file:"
                },
                {
                    "type": "code",
                    "code": "import{remark}from'remark';importhtmlfrom'remark-html';"
                },
                {
                    "type": "p",
                    "text": "And update thegetPostData()function in the same file as follows to useremark:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongetPostData(id){constfullPath=path.join(postsDirectory,`${id}.md`);constfileContents=fs.readFileSync(fullPath,'utf8');// Use gray-matter to parse the post metadata sectionconstmatterResult=matter(fileContents);// Use remark to convert markdown into HTML stringconstprocessedContent=awaitremark().use(html).process(matterResult.content);constcontentHtml=processedContent.toString();// Combine the data with the id and contentHtmlreturn{id,contentHtml,...matterResult.data,};}"
                },
                {
                    "type": "p",
                    "text": "Important: We added theasynckeyword togetPostDatabecause we need to useawaitforremark.async/awaitallow you to fetch dataasynchronously."
                },
                {
                    "type": "p",
                    "text": "That means we need to updategetStaticPropsinpages/posts/[id].jsto useawaitwhen callinggetPostData:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongetStaticProps({params}){// Add the \"await\" keyword like this:constpostData=awaitgetPostData(params.id);return{props:{postData,},};}"
                },
                {
                    "type": "p",
                    "text": "Finally, update thePostcomponent inpages/posts/[id].jsto rendercontentHtmlusingdangerouslySetInnerHTML:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionPost({postData}){return(<Layout>{postData.title}<br/>{postData.id}<br/>{postData.date}<br/><divdangerouslySetInnerHTML={{__html:postData.contentHtml}}/></Layout>);}"
                },
                {
                    "type": "p",
                    "text": "Try visiting these pages again:"
                },
                {
                    "type": "list",
                    "items": [
                        "http://localhost:3000/posts/ssg-ssr",
                        "http://localhost:3000/posts/pre-rendering"
                    ]
                },
                {
                    "type": "p",
                    "text": "You should now see the blog content:"
                },
                {
                    "type": "p",
                    "text": "We’re almost done! Let’s polish each page next."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/basics/dynamic-routes/setup",
            "title": "Dynamic Routes | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic RoutesSetupPage Path Depends on External DataImplement getStaticPathsImplement getStaticPropsRender MarkdownPolishing the Post PagePolishing the Index PageDynamic Routes Details",
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Setup",
                        "Page Path Depends on External Data",
                        "Implement getStaticPaths",
                        "Implement getStaticProps",
                        "Render Markdown",
                        "Polishing the Post Page",
                        "Polishing the Index Page",
                        "Dynamic Routes Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Routes"
                },
                {
                    "type": "p",
                    "text": "If you’re continuing from the previous lesson,you can skip this page. Click the button below to go to the next page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Download Starter Code (Optional)"
                },
                {
                    "type": "p",
                    "text": "If you’re NOT continuing from the previous lesson, you can download, install, and run the starter code for this lesson below. This sets up anextjs-blogdirectory such that it’s identical to the result of the previous lesson."
                },
                {
                    "type": "p",
                    "text": "Again, this is NOT necessary if you’ve just finished the previous lesson."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest nextjs-blog --use-npm --example\"https://github.com/vercel/next-learn/tree/main/basics/dynamic-routes-starter\""
                },
                {
                    "type": "p",
                    "text": "Then follow the instructions from the command output (cdinto the directory and start the development server)."
                },
                {
                    "type": "p",
                    "text": "You should also update the following files:"
                },
                {
                    "type": "list",
                    "items": [
                        "public/images/profile.jpgwith your photo (Recommended: 400px width/height).",
                        "const name = '[Your Name]'incomponents/layout.jswith your name.",
                        "<p>[Your Self Introduction]</p>inpages/index.jswith your self introduction."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app",
            "title": "Learn Next.js | Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Learn Next.js"
                },
                {
                    "type": "p",
                    "text": "Welcome to the Next.js App Router course! In this free interactive course, you'll learn the main features of Next.js by building a full-stack web application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What we'll be building"
                },
                {
                    "type": "p",
                    "text": "For this course, we'll be building a simplified version of the financial dashboard that has:"
                },
                {
                    "type": "list",
                    "items": [
                        "A public home page.",
                        "A login page.",
                        "Dashboard pages that are protected by authentication.",
                        "The ability for users to add, edit, and delete invoices."
                    ]
                },
                {
                    "type": "p",
                    "text": "The dashboard will also have an accompanying database, which you'll set up ina later chapter."
                },
                {
                    "type": "p",
                    "text": "By the end of the course, you'll have the essential skills needed to start building full-stack Next.js applications."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Overview"
                },
                {
                    "type": "p",
                    "text": "Here's an overview of features you'll learn about in this course:"
                },
                {
                    "type": "list",
                    "items": [
                        "Styling: The different ways to style your application in Next.js.",
                        "Optimizations: How to optimize images, links, and fonts.",
                        "Routing: How to create nested layouts and pages using file-system routing.",
                        "Data Fetching: How to set up a database on Vercel, and best practices for fetching and streaming.",
                        "Search and Pagination: How to implement search and pagination using URL Search Params.",
                        "Mutating Data:How to mutate data using React Server Actions, and revalidate the Next.js cache.",
                        "Error Handling:How to handle general and404not found errors.",
                        "Form Validation and Accessibility:How to do server-side form validation and tips for improving accessibility.",
                        "Authentication: How to add authentication to your application usingNextAuth.jsand Middleware.",
                        "Metadata: How to add metadata and prepare your application for social sharing."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Prerequisite knowledge"
                },
                {
                    "type": "p",
                    "text": "This course assumes you have a basic understanding of React and JavaScript. If you're new to React, we recommend going through ourReact Foundationscourse first to learn the fundamentals of React, such as components, props, state, and hooks, and newer features like Server Components and Suspense."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "System requirements"
                },
                {
                    "type": "p",
                    "text": "Before you start this course, make sure your system meets the following requirements:"
                },
                {
                    "type": "list",
                    "items": [
                        "Node.js 18.17.0 or later installed.Download here.",
                        "Operating systems: macOS, Windows (including WSL), or Linux."
                    ]
                },
                {
                    "type": "p",
                    "text": "In addition, you'll also need aGitHub Accountand aVercel Account."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Join the conversation"
                },
                {
                    "type": "p",
                    "text": "If you have questions about this course or would like to provide feedback, you can ask our community onDiscordorGitHub."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Ready to get started?"
                },
                {
                    "type": "p",
                    "text": "Now that you've been introduced to the course, let's dive in."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "1: Getting Started"
                },
                {
                    "type": "p",
                    "text": "Learn how to create a Next.js application and run your local development server."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/adding-authentication",
            "title": "Learn Next.js: Adding Authentication | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "15"
                },
                {
                    "type": "p",
                    "text": "Chapter15"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Adding Authentication"
                },
                {
                    "type": "p",
                    "text": "In the previous chapter, you finished building the invoices routes by adding form validation and improving accessibility. In this chapter, you'll be adding authentication to your dashboard."
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "What is authentication."
                },
                {
                    "type": "p",
                    "text": "How to add authentication to your app using NextAuth.js."
                },
                {
                    "type": "p",
                    "text": "How to use Middleware to redirect users and protect your routes."
                },
                {
                    "type": "p",
                    "text": "How to use React'suseActionStateto handle pending states and form errors."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is authentication?"
                },
                {
                    "type": "p",
                    "text": "Authentication is a key part of many web applications today. It's how a system checks if the user is who they say they are."
                },
                {
                    "type": "p",
                    "text": "A secure website often uses multiple ways to check a user's identity. For instance, after entering your username and password, the site may send a verification code to your device or use an external app like Google Authenticator. This 2-factor authentication (2FA) helps increase security. Even if someone learns your password, they can't access your account without your unique token."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Authentication vs. Authorization"
                },
                {
                    "type": "p",
                    "text": "In web development, authentication and authorization serve different roles:"
                },
                {
                    "type": "list",
                    "items": [
                        "Authenticationis about making sure the user is who they say they are. You're proving your identity with something you have like a username and password.",
                        "Authorizationis the next step. Once a user's identity is confirmed, authorization decides what parts of the application they are allowed to use."
                    ]
                },
                {
                    "type": "p",
                    "text": "So, authentication checks who you are, and authorization determines what you can do or access in the application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating the login route"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new route in your application called/loginand paste the following code:"
                },
                {
                    "type": "code",
                    "code": "importAcmeLogofrom'@/app/ui/acme-logo';importLoginFormfrom'@/app/ui/login-form';exportdefaultfunctionLoginPage() {return(<mainclassName=\"flex items-center justify-center md:h-screen\"><divclassName=\"relative mx-auto flex w-full max-w-[400px] flex-col space-y-2.5 p-4 md:-mt-32\"><divclassName=\"flex h-20 w-full items-end rounded-lg bg-blue-500 p-3 md:h-36\"><divclassName=\"w-32 text-white md:w-36\"><AcmeLogo/></div></div><LoginForm/></div></main>);}"
                },
                {
                    "type": "p",
                    "text": "You'll notice the page imports<LoginForm />, which you'll update later in the chapter."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "NextAuth.js"
                },
                {
                    "type": "p",
                    "text": "We will be usingNextAuth.jsto add authentication to your application. NextAuth.js abstracts away much of the complexity involved in managing sessions, sign-in and sign-out, and other aspects of authentication. While you can manually implement these features, the process can be time-consuming and error-prone. NextAuth.js simplifies the process, providing a unified solution for auth in Next.js applications."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Setting up NextAuth.js"
                },
                {
                    "type": "p",
                    "text": "Install NextAuth.js by running the following command in your terminal:"
                },
                {
                    "type": "code",
                    "code": "pnpminext-auth@beta"
                },
                {
                    "type": "p",
                    "text": "Here, you're installing thebetaversion of NextAuth.js, which is compatible with Next.js 14."
                },
                {
                    "type": "p",
                    "text": "Next, generate a secret key for your application. This key is used to encrypt cookies, ensuring the security of user sessions. You can do this by running the following command in your terminal:"
                },
                {
                    "type": "code",
                    "code": "opensslrand-base6432"
                },
                {
                    "type": "p",
                    "text": "Then, in your.envfile, add your generated key to theAUTH_SECRETvariable:"
                },
                {
                    "type": "code",
                    "code": "AUTH_SECRET=your-secret-key"
                },
                {
                    "type": "p",
                    "text": "For auth to work in production, you'll need to update your environment variables in your Vercel project too. Check out thisguideon how to add environment variables on Vercel."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding the pages option"
                },
                {
                    "type": "p",
                    "text": "Create anauth.config.tsfile at the root of our project that exports anauthConfigobject. This object will contain the configuration options for NextAuth.js. For now, it will only contain thepagesoption:"
                },
                {
                    "type": "code",
                    "code": "importtype{ NextAuthConfig }from'next-auth';exportconstauthConfig={pages:{signIn:'/login',},}satisfiesNextAuthConfig;"
                },
                {
                    "type": "p",
                    "text": "You can use thepagesoption to specify the route for custom sign-in, sign-out, and error pages. This is not required, but by addingsignIn: '/login'into ourpagesoption, the user will be redirected to our custom login page, rather than the NextAuth.js default page."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Protecting your routes with Next.js Middleware"
                },
                {
                    "type": "p",
                    "text": "Next, add the logic to protect your routes. This will prevent users from accessing the dashboard pages unless they are logged in."
                },
                {
                    "type": "code",
                    "code": "importtype{ NextAuthConfig }from'next-auth';exportconstauthConfig={pages:{signIn:'/login',},callbacks:{authorized({ auth,request: { nextUrl } }) {constisLoggedIn=!!auth?.user;constisOnDashboard=nextUrl.pathname.startsWith('/dashboard');if(isOnDashboard) {if(isLoggedIn)returntrue;returnfalse;// Redirect unauthenticated users to login page}elseif(isLoggedIn) {returnResponse.redirect(newURL('/dashboard',nextUrl));}returntrue;},},providers:[],// Add providers with an empty array for now}satisfiesNextAuthConfig;"
                },
                {
                    "type": "p",
                    "text": "Theauthorizedcallback is used to verify if the request is authorized to access a page viaNext.js Middleware. It is called before a request is completed, and it receives an object with theauthandrequestproperties. Theauthproperty contains the user's session, and therequestproperty contains the incoming request."
                },
                {
                    "type": "p",
                    "text": "Theprovidersoption is an array where you list different login options. For now, it's an empty array to satisfy NextAuth config. You'll learn more about it in theAdding the Credentials providersection."
                },
                {
                    "type": "p",
                    "text": "Next, you will need to import theauthConfigobject into a Middleware file. In the root of your project, create a file calledmiddleware.tsand paste the following code:"
                },
                {
                    "type": "code",
                    "code": "importNextAuthfrom'next-auth';import{ authConfig }from'./auth.config';exportdefaultNextAuth(authConfig).auth;exportconstconfig={// https://nextjs.org/docs/app/building-your-application/routing/middleware#matchermatcher:['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],};"
                },
                {
                    "type": "p",
                    "text": "Here you're initializing NextAuth.js with theauthConfigobject and exporting theauthproperty. You're also using thematcheroption from Middleware to specify that it should run on specific paths."
                },
                {
                    "type": "p",
                    "text": "The advantage of employing Middleware for this task is that the protected routes will not even start rendering until the Middleware verifies the authentication, enhancing both the security and performance of your application."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Password hashing"
                },
                {
                    "type": "p",
                    "text": "It's good practice tohashpasswords before storing them in a database. Hashing converts a password into a fixed-length string of characters, which appears random, providing a layer of security even if the user's data is exposed."
                },
                {
                    "type": "p",
                    "text": "In yourseed.jsfile, you used a package calledbcryptto hash the user's password before storing it in the database. You will use itagainlater in this chapter to compare that the password entered by the user matches the one in the database. However, you will need to create a separate file for thebcryptpackage. This is becausebcryptrelies on Node.js APIs not available in Next.js Middleware."
                },
                {
                    "type": "p",
                    "text": "Create a new file calledauth.tsthat spreads yourauthConfigobject:"
                },
                {
                    "type": "code",
                    "code": "importNextAuthfrom'next-auth';import{ authConfig }from'./auth.config';exportconst{auth,signIn,signOut}=NextAuth({...authConfig,});"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding the Credentials provider"
                },
                {
                    "type": "p",
                    "text": "Next, you will need to add theprovidersoption for NextAuth.js.providersis an array where you list different login options such as Google or GitHub. For this course, we will focus on using theCredentials provideronly."
                },
                {
                    "type": "p",
                    "text": "The Credentials provider allows users to log in with a username and a password."
                },
                {
                    "type": "code",
                    "code": "importNextAuthfrom'next-auth';import{ authConfig }from'./auth.config';importCredentialsfrom'next-auth/providers/credentials';exportconst{auth,signIn,signOut}=NextAuth({...authConfig,providers:[Credentials({})],});"
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "p",
                    "text": "Although we're using the Credentials provider, it's generally recommended to use alternative providers such asOAuthoremailproviders. See theNextAuth.js docsfor a full list of options."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding the sign in functionality"
                },
                {
                    "type": "p",
                    "text": "You can use theauthorizefunction to handle the authentication logic. Similarly to Server Actions, you can usezodto validate the email and password before checking if the user exists in the database:"
                },
                {
                    "type": "code",
                    "code": "importNextAuthfrom'next-auth';import{ authConfig }from'./auth.config';importCredentialsfrom'next-auth/providers/credentials';import{ z }from'zod';exportconst{auth,signIn,signOut}=NextAuth({...authConfig,providers:[Credentials({asyncauthorize(credentials) {constparsedCredentials=z.object({ email:z.string().email(),password:z.string().min(6) }).safeParse(credentials);},}),],});"
                },
                {
                    "type": "p",
                    "text": "After validating the credentials, create a newgetUserfunction that queries the user from the database."
                },
                {
                    "type": "code",
                    "code": "importNextAuthfrom'next-auth';importCredentialsfrom'next-auth/providers/credentials';import{ authConfig }from'./auth.config';import{ z }from'zod';import{ sql }from'@vercel/postgres';importtype{ User }from'@/app/lib/definitions';importbcryptfrom'bcrypt';asyncfunctiongetUser(email:string):Promise<User|undefined> {try{constuser=awaitsql<User>`SELECT * FROM users WHERE email=${email}`;returnuser.rows[0];}catch(error) {console.error('Failed to fetch user:',error);thrownewError('Failed to fetch user.');}}exportconst{auth,signIn,signOut}=NextAuth({...authConfig,providers:[Credentials({asyncauthorize(credentials) {constparsedCredentials=z.object({ email:z.string().email(),password:z.string().min(6) }).safeParse(credentials);if(parsedCredentials.success) {const{email,password}=parsedCredentials.data;constuser=awaitgetUser(email);if(!user)returnnull;}returnnull;},}),],});"
                },
                {
                    "type": "p",
                    "text": "Then, callbcrypt.compareto check if the passwords match:"
                },
                {
                    "type": "code",
                    "code": "importNextAuthfrom'next-auth';importCredentialsfrom'next-auth/providers/credentials';import{ authConfig }from'./auth.config';import{ sql }from'@vercel/postgres';import{ z }from'zod';importtype{ User }from'@/app/lib/definitions';importbcryptfrom'bcrypt';// ...exportconst{auth,signIn,signOut}=NextAuth({...authConfig,providers:[Credentials({asyncauthorize(credentials) {// ...if(parsedCredentials.success) {const{email,password}=parsedCredentials.data;constuser=awaitgetUser(email);if(!user)returnnull;constpasswordsMatch=awaitbcrypt.compare(password,user.password);if(passwordsMatch)returnuser;}console.log('Invalid credentials');returnnull;},}),],});"
                },
                {
                    "type": "p",
                    "text": "Finally, if the passwords match you want to return the user, otherwise, returnnullto prevent the user from logging in."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Updating the login form"
                },
                {
                    "type": "p",
                    "text": "Now you need to connect the auth logic with your login form. In youractions.tsfile, create a new action calledauthenticate. This action should import thesignInfunction fromauth.ts:"
                },
                {
                    "type": "code",
                    "code": "'use server';import{ signIn }from'@/auth';import{ AuthError }from'next-auth';// ...exportasyncfunctionauthenticate(prevState:string|undefined,formData:FormData,) {try{awaitsignIn('credentials',formData);}catch(error) {if(errorinstanceofAuthError) {switch(error.type) {case'CredentialsSignin':return'Invalid credentials.';default:return'Something went wrong.';}}throwerror;}}"
                },
                {
                    "type": "p",
                    "text": "If there's a'CredentialsSignin'error, you want to show an appropriate error message. You can learn about NextAuth.js errors inthe documentation"
                },
                {
                    "type": "p",
                    "text": "Finally, in yourlogin-form.tsxcomponent, you can use React'suseActionStateto call the server action, handle form errors, and display the form's pending state:"
                },
                {
                    "type": "code",
                    "code": "'use client';import{ lusitana }from'@/app/ui/fonts';import{AtSymbolIcon,KeyIcon,ExclamationCircleIcon,}from'@heroicons/react/24/outline';import{ ArrowRightIcon }from'@heroicons/react/20/solid';import{ Button }from'@/app/ui/button';import{ useActionState }from'react';import{ authenticate }from'@/app/lib/actions';exportdefaultfunctionLoginForm() {const[errorMessage,formAction,isPending]=useActionState(authenticate,undefined,);return(<formaction={formAction}className=\"space-y-3\"><divclassName=\"flex-1 rounded-lg bg-gray-50 px-6 pb-4 pt-8\"><h1className={`${lusitana.className}mb-3 text-2xl`}>Please log in to continue.</h1><divclassName=\"w-full\"><div><labelclassName=\"mb-3 mt-5 block text-xs font-medium text-gray-900\"htmlFor=\"email\">Email</label><divclassName=\"relative\"><inputclassName=\"peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500\"id=\"email\"type=\"email\"name=\"email\"placeholder=\"Enter your email address\"required/><AtSymbolIconclassName=\"pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900\"/></div></div><divclassName=\"mt-4\"><labelclassName=\"mb-3 mt-5 block text-xs font-medium text-gray-900\"htmlFor=\"password\">Password</label><divclassName=\"relative\"><inputclassName=\"peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500\"id=\"password\"type=\"password\"name=\"password\"placeholder=\"Enter password\"requiredminLength={6}/><KeyIconclassName=\"pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900\"/></div></div></div><ButtonclassName=\"mt-4 w-full\"aria-disabled={isPending}>Log in <ArrowRightIconclassName=\"ml-auto h-5 w-5 text-gray-50\"/></Button><divclassName=\"flex h-8 items-end space-x-1\"aria-live=\"polite\"aria-atomic=\"true\">{errorMessage&&(<><ExclamationCircleIconclassName=\"h-5 w-5 text-red-500\"/><pclassName=\"text-sm text-red-500\">{errorMessage}</p></>)}</div></div></form>);}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Adding the logout functionality"
                },
                {
                    "type": "p",
                    "text": "To add the logout functionality to<SideNav />, call thesignOutfunction fromauth.tsin your<form>element:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link';importNavLinksfrom'@/app/ui/dashboard/nav-links';importAcmeLogofrom'@/app/ui/acme-logo';import{ PowerIcon }from'@heroicons/react/24/outline';import{ signOut }from'@/auth';exportdefaultfunctionSideNav() {return(<divclassName=\"flex h-full flex-col px-3 py-4 md:px-2\">// ...<divclassName=\"flex grow flex-row justify-between space-x-2 md:flex-col md:space-x-0 md:space-y-2\"><NavLinks/><divclassName=\"hidden h-auto w-full grow rounded-md bg-gray-50 md:block\"></div><formaction={async()=>{'use server';awaitsignOut();}}><buttonclassName=\"flex h-[48px] grow items-center justify-center gap-2 rounded-md bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600 md:flex-none md:justify-start md:p-2 md:px-3\"><PowerIconclassName=\"w-6\"/><divclassName=\"hidden md:block\">Sign Out</div></button></form></div></div>);}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Try it out"
                },
                {
                    "type": "p",
                    "text": "Now, try it out. You should be able to log in and out of your application using the following credentials:"
                },
                {
                    "type": "list",
                    "items": [
                        "Email:user@nextmail.com",
                        "Password:123456"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter15"
                },
                {
                    "type": "p",
                    "text": "You added authentication to your application and protected your dashboard routes."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "16: Adding Metadata"
                },
                {
                    "type": "p",
                    "text": "Finish your application by learning how to add metadata in preparation for sharing."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/adding-metadata",
            "title": "Learn Next.js: Adding Metadata | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "16"
                },
                {
                    "type": "p",
                    "text": "Chapter16"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Adding Metadata"
                },
                {
                    "type": "p",
                    "text": "Metadata is crucial for SEO and shareability. In this chapter, we'll discuss how you can add metadata to your Next.js application."
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "What metadata is."
                },
                {
                    "type": "p",
                    "text": "Types of metadata."
                },
                {
                    "type": "p",
                    "text": "How to add an Open Graph image using metadata."
                },
                {
                    "type": "p",
                    "text": "How to add a favicon using metadata."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is metadata?"
                },
                {
                    "type": "p",
                    "text": "In web development, metadata provides additional details about a webpage. Metadata is not visible to the users visiting the page. Instead, it works behind the scenes, embedded within the page's HTML, usually within the<head>element. This hidden information is crucial for search engines and other systems that need to understand your webpage's content better."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why is metadata important?"
                },
                {
                    "type": "p",
                    "text": "Metadata plays a significant role in enhancing a webpage's SEO, making it more accessible and understandable for search engines and social media platforms. Proper metadata helps search engines effectively index webpages, improving their ranking in search results. Additionally, metadata like Open Graph improves the appearance of shared links on social media, making the content more appealing and informative for users."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Types of metadata"
                },
                {
                    "type": "p",
                    "text": "There are various types of metadata, each serving a unique purpose. Some common types include:"
                },
                {
                    "type": "p",
                    "text": "Title Metadata: Responsible for the title of a webpage that is displayed on the browser tab. It's crucial for SEO as it helps search engines understand what the webpage is about."
                },
                {
                    "type": "code",
                    "code": "<title>Page Title</title>"
                },
                {
                    "type": "p",
                    "text": "Description Metadata: This metadata provides a brief overview of the webpage content and is often displayed in search engine results."
                },
                {
                    "type": "code",
                    "code": "<metaname=\"description\"content=\"A brief description of the page content.\"/>"
                },
                {
                    "type": "p",
                    "text": "Keyword Metadata: This metadata includes the keywords related to the webpage content, helping search engines index the page."
                },
                {
                    "type": "code",
                    "code": "<metaname=\"keywords\"content=\"keyword1, keyword2, keyword3\"/>"
                },
                {
                    "type": "p",
                    "text": "Open Graph Metadata: This metadata enhances the way a webpage is represented when shared on social media platforms, providing information such as the title, description, and preview image."
                },
                {
                    "type": "code",
                    "code": "<metaproperty=\"og:title\"content=\"Title Here\"/><metaproperty=\"og:description\"content=\"Description Here\"/><metaproperty=\"og:image\"content=\"image_url_here\"/>"
                },
                {
                    "type": "p",
                    "text": "Favicon Metadata: This metadata links the favicon (a small icon) to the webpage, displayed in the browser's address bar or tab."
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"icon\"href=\"path/to/favicon.ico\"/>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Adding metadata"
                },
                {
                    "type": "p",
                    "text": "Next.js has a Metadata API that can be used to define your application metadata. There are two ways you can add metadata to your application:"
                },
                {
                    "type": "list",
                    "items": [
                        "Config-based: Export astaticmetadataobjector a dynamicgenerateMetadatafunctionin alayout.jsorpage.jsfile.",
                        "File-based: Next.js has a range of special files that are specifically used for metadata purposes:favicon.ico,apple-icon.jpg, andicon.jpg: Utilized for favicons and iconsopengraph-image.jpgandtwitter-image.jpg: Employed for social media imagesrobots.txt: Provides instructions for search engine crawlingsitemap.xml: Offers information about the website's structure",
                        "favicon.ico,apple-icon.jpg, andicon.jpg: Utilized for favicons and icons",
                        "opengraph-image.jpgandtwitter-image.jpg: Employed for social media images",
                        "robots.txt: Provides instructions for search engine crawling",
                        "sitemap.xml: Offers information about the website's structure"
                    ]
                },
                {
                    "type": "p",
                    "text": "Config-based: Export astaticmetadataobjector a dynamicgenerateMetadatafunctionin alayout.jsorpage.jsfile."
                },
                {
                    "type": "p",
                    "text": "File-based: Next.js has a range of special files that are specifically used for metadata purposes:"
                },
                {
                    "type": "list",
                    "items": [
                        "favicon.ico,apple-icon.jpg, andicon.jpg: Utilized for favicons and icons",
                        "opengraph-image.jpgandtwitter-image.jpg: Employed for social media images",
                        "robots.txt: Provides instructions for search engine crawling",
                        "sitemap.xml: Offers information about the website's structure"
                    ]
                },
                {
                    "type": "p",
                    "text": "You have the flexibility to use these files for static metadata, or you can generate them programmatically within your project."
                },
                {
                    "type": "p",
                    "text": "With both these options, Next.js will automatically generate the relevant<head>elements for your pages."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Favicon and Open Graph image"
                },
                {
                    "type": "p",
                    "text": "In your/publicfolder, you'll notice you have two images:favicon.icoandopengraph-image.jpg."
                },
                {
                    "type": "p",
                    "text": "Move these images to the root of your/appfolder."
                },
                {
                    "type": "p",
                    "text": "After doing this, Next.js will automatically identify and use these files as your favicon and OG image. You can verify this by checking the<head>element of your application in dev tools."
                },
                {
                    "type": "p",
                    "text": "Good to know:You can also create dynamic OG images using theImageResponseconstructor."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Page title and descriptions"
                },
                {
                    "type": "p",
                    "text": "You can also include ametadataobjectfrom anylayout.jsorpage.jsfile to add additional page information like title and description. Any metadata inlayout.jswill be inherited by all pages that use it."
                },
                {
                    "type": "p",
                    "text": "In your root layout, create a newmetadataobject with the following fields:"
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next';exportconstmetadata:Metadata={title:'Acme Dashboard',description:'The official Next.js Course Dashboard, built with App Router.',metadataBase:newURL('https://next-learn-dashboard.vercel.sh'),};exportdefaultfunctionRootLayout() {// ...}"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically add the title and metadata to your application."
                },
                {
                    "type": "p",
                    "text": "But what if you want to add a custom title for a specific page? You can do this by adding ametadataobject to the page itself. Metadata in nested pages will override the metadata in the parent."
                },
                {
                    "type": "p",
                    "text": "For example, in the/dashboard/invoicespage, you can update the page title:"
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next';exportconstmetadata:Metadata={title:'Invoices | Acme Dashboard',};"
                },
                {
                    "type": "p",
                    "text": "This works, but we are repeating the title of the application in every page. If something changes, like the company name, you'd have to update it on every page."
                },
                {
                    "type": "p",
                    "text": "Instead, you can use thetitle.templatefield in themetadataobject to define a template for your page titles. This template can include the page title, and any other information you want to include."
                },
                {
                    "type": "p",
                    "text": "In your root layout, update themetadataobject to include a template:"
                },
                {
                    "type": "code",
                    "code": "import{ Metadata }from'next';exportconstmetadata:Metadata={title:{template:'%s | Acme Dashboard',default:'Acme Dashboard',},description:'The official Next.js Learn Dashboard built with App Router.',metadataBase:newURL('https://next-learn-dashboard.vercel.sh'),};"
                },
                {
                    "type": "p",
                    "text": "The%sin the template will be replaced with the specific page title."
                },
                {
                    "type": "p",
                    "text": "Now, in your/dashboard/invoicespage, you can add the page title:"
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata:Metadata={title:'Invoices',};"
                },
                {
                    "type": "p",
                    "text": "Navigate to the/dashboard/invoicespage and check the<head>element. You should see the page title is nowInvoices | Acme Dashboard."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Practice: Adding metadata"
                },
                {
                    "type": "p",
                    "text": "Now that you've learned about metadata, practice by adding titles to your other pages:"
                },
                {
                    "type": "list",
                    "items": [
                        "/loginpage.",
                        "/dashboard/page.",
                        "/dashboard/customerspage.",
                        "/dashboard/invoices/createpage.",
                        "/dashboard/invoices/[id]/editpage."
                    ]
                },
                {
                    "type": "p",
                    "text": "The Next.js Metadata API is powerful and flexible, giving you full control over your application's metadata. Here, we've shown you how to add some basic metadata, but you can add multiple fields, includingkeywords,robots,canonical, and more. Feel free to explore thedocumentation, and add any additional metadata you want to your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter16"
                },
                {
                    "type": "p",
                    "text": "Congratulations! You've added metadata to your application and learned about the Metadata API."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "17: Next Steps"
                },
                {
                    "type": "p",
                    "text": "Continue exploring Next.js"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/adding-search-and-pagination",
            "title": "Learn Next.js: Adding Search and Pagination | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "11"
                },
                {
                    "type": "p",
                    "text": "Chapter11"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Adding Search and Pagination"
                },
                {
                    "type": "p",
                    "text": "In the previous chapter, you improved your dashboard's initial loading performance with streaming. Now let's move on to the/invoicespage, and learn how to add search and pagination!"
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "Learn how to use the Next.js APIs:useSearchParams,usePathname, anduseRouter."
                },
                {
                    "type": "p",
                    "text": "Implement search and pagination using URL search params."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Starting code"
                },
                {
                    "type": "p",
                    "text": "Inside your/dashboard/invoices/page.tsxfile, paste the following code:"
                },
                {
                    "type": "code",
                    "code": "importPaginationfrom'@/app/ui/invoices/pagination';importSearchfrom'@/app/ui/search';importTablefrom'@/app/ui/invoices/table';import{ CreateInvoice }from'@/app/ui/invoices/buttons';import{ lusitana }from'@/app/ui/fonts';import{ InvoicesTableSkeleton }from'@/app/ui/skeletons';import{ Suspense }from'react';exportdefaultasyncfunctionPage() {return(<divclassName=\"w-full\"><divclassName=\"flex w-full items-center justify-between\"><h1className={`${lusitana.className}text-2xl`}>Invoices</h1></div><divclassName=\"mt-4 flex items-center justify-between gap-2 md:mt-8\"><Searchplaceholder=\"Search invoices...\"/><CreateInvoice/></div>{/*  <Suspense key={query + currentPage} fallback={<InvoicesTableSkeleton />}><Table query={query} currentPage={currentPage} /></Suspense> */}<divclassName=\"mt-5 flex w-full justify-center\">{/* <Pagination totalPages={totalPages} /> */}</div></div>);}"
                },
                {
                    "type": "p",
                    "text": "Spend some time familiarizing yourself with the page and the components you'll be working with:"
                },
                {
                    "type": "list",
                    "items": [
                        "<Search/>allows users to search for specific invoices.",
                        "<Pagination/>allows users to navigate between pages of invoices.",
                        "<Table/>displays the invoices."
                    ]
                },
                {
                    "type": "p",
                    "text": "Your search functionality will span the client and the server. When a user searches for an invoice on the client, the URL params will be updated, data will be fetched on the server, and the table will re-render on the server with the new data."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why use URL search params?"
                },
                {
                    "type": "p",
                    "text": "As mentioned above, you'll be using URL search params to manage the search state. This pattern may be new if you're used to doing it with client side state."
                },
                {
                    "type": "p",
                    "text": "There are a couple of benefits of implementing search with URL params:"
                },
                {
                    "type": "list",
                    "items": [
                        "Bookmarkable and Shareable URLs: Since the search parameters are in the URL, users can bookmark the current state of the application, including their search queries and filters, for future reference or sharing.",
                        "Server-Side Rendering and Initial Load: URL parameters can be directly consumed on the server to render the initial state, making it easier to handle server rendering.",
                        "Analytics and Tracking: Having search queries and filters directly in the URL makes it easier to track user behavior without requiring additional client-side logic."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Adding the search functionality"
                },
                {
                    "type": "p",
                    "text": "These are the Next.js client hooks that you'll use to implement the search functionality:"
                },
                {
                    "type": "list",
                    "items": [
                        "useSearchParams- Allows you to access the parameters of the current URL. For example, the search params for this URL/dashboard/invoices?page=1&query=pendingwould look like this:{page: '1', query: 'pending'}.",
                        "usePathname- Lets you read the current URL's pathname. For example, for the route/dashboard/invoices,usePathnamewould return'/dashboard/invoices'.",
                        "useRouter- Enables navigation between routes within client components programmatically. There aremultiple methodsyou can use."
                    ]
                },
                {
                    "type": "p",
                    "text": "Here's a quick overview of the implementation steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Capture the user's input.",
                        "Update the URL with the search params.",
                        "Keep the URL in sync with the input field.",
                        "Update the table to reflect the search query."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "1. Capture the user's input"
                },
                {
                    "type": "p",
                    "text": "Go into the<Search>Component (/app/ui/search.tsx), and you'll notice:"
                },
                {
                    "type": "list",
                    "items": [
                        "\"use client\"- This is a Client Component, which means you can use event listeners and hooks.",
                        "<input>- This is the search input."
                    ]
                },
                {
                    "type": "p",
                    "text": "Create a newhandleSearchfunction, and add anonChangelistener to the<input>element.onChangewill invokehandleSearchwhenever the input value changes."
                },
                {
                    "type": "code",
                    "code": "'use client';import{ MagnifyingGlassIcon }from'@heroicons/react/24/outline';exportdefaultfunctionSearch({ placeholder }:{ placeholder:string}) {functionhandleSearch(term:string) {console.log(term);}return(<divclassName=\"relative flex flex-1 flex-shrink-0\"><labelhtmlFor=\"search\"className=\"sr-only\">Search</label><inputclassName=\"peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500\"placeholder={placeholder}onChange={(e)=>{handleSearch(e.target.value);}}/><MagnifyingGlassIconclassName=\"absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900\"/></div>);}"
                },
                {
                    "type": "p",
                    "text": "Test that it's working correctly by opening the console in your Developer Tools, then type into the search field. You should see the search term logged to the console."
                },
                {
                    "type": "p",
                    "text": "Great! You're capturing the user's search input. Now, you need to update the URL with the search term."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "2. Update the URL with the search params"
                },
                {
                    "type": "p",
                    "text": "Import theuseSearchParamshook from'next/navigation', and assign it to a variable:"
                },
                {
                    "type": "code",
                    "code": "'use client';import{ MagnifyingGlassIcon }from'@heroicons/react/24/outline';import{ useSearchParams }from'next/navigation';exportdefaultfunctionSearch() {constsearchParams=useSearchParams();functionhandleSearch(term:string) {console.log(term);}// ...}"
                },
                {
                    "type": "p",
                    "text": "InsidehandleSearch,create a newURLSearchParamsinstance using your newsearchParamsvariable."
                },
                {
                    "type": "code",
                    "code": "'use client';import{ MagnifyingGlassIcon }from'@heroicons/react/24/outline';import{ useSearchParams }from'next/navigation';exportdefaultfunctionSearch() {constsearchParams=useSearchParams();functionhandleSearch(term:string) {constparams=newURLSearchParams(searchParams);}// ...}"
                },
                {
                    "type": "p",
                    "text": "URLSearchParamsis a Web API that provides utility methods for manipulating the URL query parameters. Instead of creating a complex string literal, you can use it to get the params string like?page=1&query=a."
                },
                {
                    "type": "p",
                    "text": "Next,setthe params string based on the user’s input. If the input is empty, you want todeleteit:"
                },
                {
                    "type": "code",
                    "code": "'use client';import{ MagnifyingGlassIcon }from'@heroicons/react/24/outline';import{ useSearchParams }from'next/navigation';exportdefaultfunctionSearch() {constsearchParams=useSearchParams();functionhandleSearch(term:string) {constparams=newURLSearchParams(searchParams);if(term) {params.set('query',term);}else{params.delete('query');}}// ...}"
                },
                {
                    "type": "p",
                    "text": "Now that you have the query string. You can use Next.js'suseRouterandusePathnamehooks to update the URL."
                },
                {
                    "type": "p",
                    "text": "ImportuseRouterandusePathnamefrom'next/navigation', and use thereplacemethod fromuseRouter()insidehandleSearch:"
                },
                {
                    "type": "code",
                    "code": "'use client';import{ MagnifyingGlassIcon }from'@heroicons/react/24/outline';import{ useSearchParams,usePathname,useRouter }from'next/navigation';exportdefaultfunctionSearch() {constsearchParams=useSearchParams();constpathname=usePathname();const{replace}=useRouter();functionhandleSearch(term:string) {constparams=newURLSearchParams(searchParams);if(term) {params.set('query',term);}else{params.delete('query');}replace(`${pathname}?${params.toString()}`);}}"
                },
                {
                    "type": "p",
                    "text": "Here's a breakdown of what's happening:"
                },
                {
                    "type": "list",
                    "items": [
                        "${pathname}is the current path, in your case,\"/dashboard/invoices\".",
                        "As the user types into the search bar,params.toString()translates this input into a URL-friendly format.",
                        "replace(${pathname}?${params.toString()})updates the URL with the user's search data. For example,/dashboard/invoices?query=leeif the user searches for \"Lee\".",
                        "The URL is updated without reloading the page, thanks to Next.js's client-side navigation (which you learned about in the chapter onnavigating between pages."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "3. Keeping the URL and input in sync"
                },
                {
                    "type": "p",
                    "text": "To ensure the input field is in sync with the URL and will be populated when sharing, you can pass adefaultValueto input by reading fromsearchParams:"
                },
                {
                    "type": "code",
                    "code": "<inputclassName=\"peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500\"placeholder={placeholder}onChange={(e)=>{handleSearch(e.target.value);}}defaultValue={searchParams.get('query')?.toString()}/>"
                },
                {
                    "type": "p",
                    "text": "defaultValuevs.value/ Controlled vs. Uncontrolled"
                },
                {
                    "type": "p",
                    "text": "If you're using state to manage the value of an input, you'd use thevalueattribute to make it a controlled component. This means React would manage the input's state."
                },
                {
                    "type": "p",
                    "text": "However, since you're not using state, you can usedefaultValue. This means the native input will manage its own state. This is okay since you're saving the search query to the URL instead of state."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "4. Updating the table"
                },
                {
                    "type": "p",
                    "text": "Finally, you need to update the table component to reflect the search query."
                },
                {
                    "type": "p",
                    "text": "Navigate back to the invoices page."
                },
                {
                    "type": "p",
                    "text": "Page componentsaccept a prop calledsearchParams, so you can pass the current URL params to the<Table>component."
                },
                {
                    "type": "code",
                    "code": "importPaginationfrom'@/app/ui/invoices/pagination';importSearchfrom'@/app/ui/search';importTablefrom'@/app/ui/invoices/table';import{ CreateInvoice }from'@/app/ui/invoices/buttons';import{ lusitana }from'@/app/ui/fonts';import{ Suspense }from'react';import{ InvoicesTableSkeleton }from'@/app/ui/skeletons';exportdefaultasyncfunctionPage({searchParams,}:{searchParams?:{query?:string;page?:string;};}) {constquery=searchParams?.query||'';constcurrentPage=Number(searchParams?.page)||1;return(<divclassName=\"w-full\"><divclassName=\"flex w-full items-center justify-between\"><h1className={`${lusitana.className}text-2xl`}>Invoices</h1></div><divclassName=\"mt-4 flex items-center justify-between gap-2 md:mt-8\"><Searchplaceholder=\"Search invoices...\"/><CreateInvoice/></div><Suspensekey={query+currentPage}fallback={<InvoicesTableSkeleton/>}><Tablequery={query}currentPage={currentPage} /></Suspense><divclassName=\"mt-5 flex w-full justify-center\">{/* <Pagination totalPages={totalPages} /> */}</div></div>);}"
                },
                {
                    "type": "p",
                    "text": "If you navigate to the<Table>Component, you'll see that the two props,queryandcurrentPage, are passed to thefetchFilteredInvoices()function which returns the invoices that match the query."
                },
                {
                    "type": "code",
                    "code": "// ...exportdefaultasyncfunctionInvoicesTable({query,currentPage,}:{query:string;currentPage:number;}) {constinvoices=awaitfetchFilteredInvoices(query,currentPage);// ...}"
                },
                {
                    "type": "p",
                    "text": "With these changes in place, go ahead and test it out. If you search for a term, you'll update the URL, which will send a new request to the server, data will be fetched on the server, and only the invoices that match your query will be returned."
                },
                {
                    "type": "p",
                    "text": "When to use theuseSearchParams()hook vs. thesearchParamsprop?"
                },
                {
                    "type": "p",
                    "text": "You might have noticed you used two different ways to extract search params. Whether you use one or the other depends on whether you're working on the client or the server."
                },
                {
                    "type": "list",
                    "items": [
                        "<Search>is a Client Component, so you used theuseSearchParams()hook to access the params from the client.",
                        "<Table>is a Server Component that fetches its own data, so you can pass thesearchParamsprop from the page to the component."
                    ]
                },
                {
                    "type": "p",
                    "text": "As a general rule, if you want to read the params from the client, use theuseSearchParams()hook as this avoids having to go back to the server."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Best practice: Debouncing"
                },
                {
                    "type": "p",
                    "text": "Congratulations! You've implemented search with Next.js! But there's something you can do to optimize it."
                },
                {
                    "type": "p",
                    "text": "Inside yourhandleSearchfunction, add the followingconsole.log:"
                },
                {
                    "type": "code",
                    "code": "functionhandleSearch(term:string) {console.log(`Searching...${term}`);constparams=newURLSearchParams(searchParams);if(term) {params.set('query',term);}else{params.delete('query');}replace(`${pathname}?${params.toString()}`);}"
                },
                {
                    "type": "p",
                    "text": "Then type \"Emil\" into your search bar and check the console in dev tools. What is happening?"
                },
                {
                    "type": "code",
                    "code": "Searching...ESearching...EmSearching...EmiSearching...Emil"
                },
                {
                    "type": "p",
                    "text": "You're updating the URL on every keystroke, and therefore querying your database on every keystroke! This isn't a problem as our application is small, but imagine if your application had thousands of users, each sending a new request to your database on each keystroke."
                },
                {
                    "type": "p",
                    "text": "Debouncingis a programming practice that limits the rate at which a function can fire. In our case, you only want to query the database when the user has stopped typing."
                },
                {
                    "type": "p",
                    "text": "How Debouncing Works:"
                },
                {
                    "type": "list",
                    "items": [
                        "Trigger Event: When an event that should be debounced (like a keystroke in the search box) occurs, a timer starts.",
                        "Wait: If a new event occurs before the timer expires, the timer is reset.",
                        "Execution: If the timer reaches the end of its countdown, the debounced function is executed."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can implement debouncing in a few ways, including manually creating your own debounce function. To keep things simple, we'll use a library calleduse-debounce."
                },
                {
                    "type": "p",
                    "text": "Installuse-debounce:"
                },
                {
                    "type": "code",
                    "code": "pnpmiuse-debounce"
                },
                {
                    "type": "p",
                    "text": "In your<Search>Component, import a function calleduseDebouncedCallback:"
                },
                {
                    "type": "code",
                    "code": "// ...import{ useDebouncedCallback }from'use-debounce';// Inside the Search Component...consthandleSearch=useDebouncedCallback((term)=>{console.log(`Searching...${term}`);constparams=newURLSearchParams(searchParams);if(term) {params.set('query',term);}else{params.delete('query');}replace(`${pathname}?${params.toString()}`);},300);"
                },
                {
                    "type": "p",
                    "text": "This function will wrap the contents ofhandleSearch, and only run the code after a specific time once the user has stopped typing (300ms)."
                },
                {
                    "type": "p",
                    "text": "Now type in your search bar again, and open the console in dev tools. You should see the following:"
                },
                {
                    "type": "code",
                    "code": "Searching...Emil"
                },
                {
                    "type": "p",
                    "text": "By debouncing, you can reduce the number of requests sent to your database, thus saving resources."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Adding pagination"
                },
                {
                    "type": "p",
                    "text": "After introducing the search feature, you'll notice the table displays only 6 invoices at a time. This is because thefetchFilteredInvoices()function indata.tsreturns a maximum of 6 invoices per page."
                },
                {
                    "type": "p",
                    "text": "Adding pagination allows users to navigate through the different pages to view all the invoices. Let's see how you can implement pagination using URL params, just like you did with search."
                },
                {
                    "type": "p",
                    "text": "Navigate to the<Pagination/>component and you'll notice that it's a Client Component. You don't want to fetch data on the client as this would expose your database secrets (remember, you're not using an API layer). Instead, you can fetch the data on the server, and pass it to the component as a prop."
                },
                {
                    "type": "p",
                    "text": "In/dashboard/invoices/page.tsx, import a new function calledfetchInvoicesPagesand pass thequeryfromsearchParamsas an argument:"
                },
                {
                    "type": "code",
                    "code": "// ...import{ fetchInvoicesPages }from'@/app/lib/data';exportdefaultasyncfunctionPage({searchParams,}:{searchParams?:{query?:string,page?:string,},}) {constquery=searchParams?.query||'';constcurrentPage=Number(searchParams?.page)||1;consttotalPages=awaitfetchInvoicesPages(query);return(// ...);}"
                },
                {
                    "type": "p",
                    "text": "fetchInvoicesPagesreturns the total number of pages based on the search query. For example, if there are 12 invoices that match the search query, and each page displays 6 invoices, then the total number of pages would be 2."
                },
                {
                    "type": "p",
                    "text": "Next, pass thetotalPagesprop to the<Pagination/>component:"
                },
                {
                    "type": "code",
                    "code": "// ...exportdefaultasyncfunctionPage({searchParams,}:{searchParams?:{query?:string;page?:string;};}) {constquery=searchParams?.query||'';constcurrentPage=Number(searchParams?.page)||1;consttotalPages=awaitfetchInvoicesPages(query);return(<divclassName=\"w-full\"><divclassName=\"flex w-full items-center justify-between\"><h1className={`${lusitana.className}text-2xl`}>Invoices</h1></div><divclassName=\"mt-4 flex items-center justify-between gap-2 md:mt-8\"><Searchplaceholder=\"Search invoices...\"/><CreateInvoice/></div><Suspensekey={query+currentPage}fallback={<InvoicesTableSkeleton/>}><Tablequery={query}currentPage={currentPage} /></Suspense><divclassName=\"mt-5 flex w-full justify-center\"><PaginationtotalPages={totalPages} /></div></div>);}"
                },
                {
                    "type": "p",
                    "text": "Navigate to the<Pagination/>component and import theusePathnameanduseSearchParamshooks. We will use this to get the current page and set the new page. Make sure to also uncomment the code in this component. Your application will break temporarily as you haven't implemented the<Pagination/>logic yet. Let's do that now!"
                },
                {
                    "type": "code",
                    "code": "'use client';import{ ArrowLeftIcon,ArrowRightIcon }from'@heroicons/react/24/outline';importclsxfrom'clsx';importLinkfrom'next/link';import{ generatePagination }from'@/app/lib/utils';import{ usePathname,useSearchParams }from'next/navigation';exportdefaultfunctionPagination({ totalPages }:{ totalPages:number}) {constpathname=usePathname();constsearchParams=useSearchParams();constcurrentPage=Number(searchParams.get('page'))||1;// ...}"
                },
                {
                    "type": "p",
                    "text": "Next, create a new function inside the<Pagination>Component calledcreatePageURL. Similarly to the search, you'll useURLSearchParamsto set the new page number, andpathNameto create the URL string."
                },
                {
                    "type": "code",
                    "code": "'use client';import{ ArrowLeftIcon,ArrowRightIcon }from'@heroicons/react/24/outline';importclsxfrom'clsx';importLinkfrom'next/link';import{ generatePagination }from'@/app/lib/utils';import{ usePathname,useSearchParams }from'next/navigation';exportdefaultfunctionPagination({ totalPages }:{ totalPages:number}) {constpathname=usePathname();constsearchParams=useSearchParams();constcurrentPage=Number(searchParams.get('page'))||1;constcreatePageURL=(pageNumber:number|string)=>{constparams=newURLSearchParams(searchParams);params.set('page',pageNumber.toString());return`${pathname}?${params.toString()}`;};// ...}"
                },
                {
                    "type": "p",
                    "text": "Here's a breakdown of what's happening:"
                },
                {
                    "type": "list",
                    "items": [
                        "createPageURLcreates an instance of the current search parameters.",
                        "Then, it updates the \"page\" parameter to the provided page number.",
                        "Finally, it constructs the full URL using the pathname and updated search parameters."
                    ]
                },
                {
                    "type": "p",
                    "text": "The rest of the<Pagination>component deals with styling and different states (first, last, active, disabled, etc). We won't go into detail for this course, but feel free to look through the code to see wherecreatePageURLis being called."
                },
                {
                    "type": "p",
                    "text": "Finally, when the user types a new search query, you want to reset the page number to 1. You can do this by updating thehandleSearchfunction in your<Search>component:"
                },
                {
                    "type": "code",
                    "code": "'use client';import{ MagnifyingGlassIcon }from'@heroicons/react/24/outline';import{ usePathname,useRouter,useSearchParams }from'next/navigation';import{ useDebouncedCallback }from'use-debounce';exportdefaultfunctionSearch({ placeholder }:{ placeholder:string}) {constsearchParams=useSearchParams();const{replace}=useRouter();constpathname=usePathname();consthandleSearch=useDebouncedCallback((term)=>{constparams=newURLSearchParams(searchParams);params.set('page','1');if(term) {params.set('query',term);}else{params.delete('query');}replace(`${pathname}?${params.toString()}`);},300);"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Summary"
                },
                {
                    "type": "p",
                    "text": "Congratulations! You've just implemented search and pagination using URL Params and Next.js APIs."
                },
                {
                    "type": "p",
                    "text": "To summarize, in this chapter:"
                },
                {
                    "type": "list",
                    "items": [
                        "You've handled search and pagination with URL search parameters instead of client state.",
                        "You've fetched data on the server.",
                        "You're using theuseRouterrouter hook for smoother, client-side transitions."
                    ]
                },
                {
                    "type": "p",
                    "text": "These patterns are different from what you may be used to when working with client-side React, but hopefully, you now better understand the benefits of using URL search params and lifting this state to the server."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter11"
                },
                {
                    "type": "p",
                    "text": "Your dashboard now has search and pagination functionality!"
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "12: Mutating Data"
                },
                {
                    "type": "p",
                    "text": "Learn how to mutate data with Server Actions."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/css-styling",
            "title": "Learn Next.js: CSS Styling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "2"
                },
                {
                    "type": "p",
                    "text": "Chapter2"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "CSS Styling"
                },
                {
                    "type": "p",
                    "text": "Currently, your home page doesn't have any styles. Let's look at the different ways you can style your Next.js application."
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "How to add a global CSS file to your application."
                },
                {
                    "type": "p",
                    "text": "Two different ways of styling: Tailwind and CSS modules."
                },
                {
                    "type": "p",
                    "text": "How to conditionally add class names with theclsxutility package."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Global styles"
                },
                {
                    "type": "p",
                    "text": "If you look inside the/app/uifolder, you'll see a file calledglobal.css. You can use this file to add CSS rules toallthe routes in your application - such as CSS reset rules, site-wide styles for HTML elements like links, and more."
                },
                {
                    "type": "p",
                    "text": "You can importglobal.cssin any component in your application, but it's usually good practice to add it to your top-level component. In Next.js, this is theroot layout(more on this later)."
                },
                {
                    "type": "p",
                    "text": "Add global styles to your application by navigating to/app/layout.tsxand importing theglobal.cssfile:"
                },
                {
                    "type": "code",
                    "code": "import'@/app/ui/global.css';exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode;}) {return(<htmllang=\"en\"><body>{children}</body></html>);}"
                },
                {
                    "type": "p",
                    "text": "With the development server still running, save your changes and preview them in the browser. Your home page should now look like this:"
                },
                {
                    "type": "p",
                    "text": "But wait a second, you didn't add any CSS rules, where did the styles come from?"
                },
                {
                    "type": "p",
                    "text": "If you take a look insideglobal.css, you'll notice some@tailwinddirectives:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tailwind"
                },
                {
                    "type": "p",
                    "text": "Tailwindis a CSS framework that speeds up the development process by allowing you to quickly writeutility classesdirectly in your TSX markup."
                },
                {
                    "type": "p",
                    "text": "In Tailwind, you style elements by adding class names. For example, adding the class\"text-blue-500\"will turn the<h1>text blue:"
                },
                {
                    "type": "code",
                    "code": "<h1className=\"text-blue-500\">I'm blue!</h1>"
                },
                {
                    "type": "p",
                    "text": "Although the CSS styles are shared globally, each class is singularly applied to each element. This means if you add or delete an element, you don't have to worry about maintaining separate stylesheets, style collisions, or the size of your CSS bundle growing as your application scales."
                },
                {
                    "type": "p",
                    "text": "When you usecreate-next-appto start a new project, Next.js will ask if you want to use Tailwind. If you selectyes, Next.js will automatically install the necessary packages and configure Tailwind in your application."
                },
                {
                    "type": "p",
                    "text": "If you look at/app/page.tsx, you'll see that we're using Tailwind classes in the example."
                },
                {
                    "type": "code",
                    "code": "importAcmeLogofrom'@/app/ui/acme-logo';import{ ArrowRightIcon }from'@heroicons/react/24/outline';importLinkfrom'next/link';exportdefaultfunctionPage() {return(// These are Tailwind classes:<mainclassName=\"flex min-h-screen flex-col p-6\"><divclassName=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\">// ...)}"
                },
                {
                    "type": "p",
                    "text": "Don't worry if this is your first time using Tailwind. To save time, we've already styled all the components you'll be using."
                },
                {
                    "type": "p",
                    "text": "Let's play with Tailwind! Copy the code below and paste it above the<p>element in/app/page.tsx:"
                },
                {
                    "type": "code",
                    "code": "<divclassName=\"relative w-0 h-0 border-l-[15px] border-r-[15px] border-b-[26px] border-l-transparent border-r-transparent border-b-black\"/>"
                },
                {
                    "type": "p",
                    "text": "If you prefer writing traditional CSS rules or keeping your styles separate from your JSX - CSS Modules are a great alternative."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "CSS Modules"
                },
                {
                    "type": "p",
                    "text": "CSS Modulesallow you to scope CSS to a component by automatically creating unique class names, so you don't have to worry about style collisions as well."
                },
                {
                    "type": "p",
                    "text": "We'll continue using Tailwind in this course, but let's take a moment to see how you can achieve the same results from the quiz above using CSS modules."
                },
                {
                    "type": "p",
                    "text": "Inside/app/ui, create a new file calledhome.module.cssand add the following CSS rules:"
                },
                {
                    "type": "code",
                    "code": ".shape{height:0;width:0;border-bottom:30pxsolid black;border-left:20pxsolid transparent;border-right:20pxsolid transparent;}"
                },
                {
                    "type": "p",
                    "text": "Then, inside your/app/page.tsxfile import the styles and replace the Tailwind class names from the<div>you've added withstyles.shape:"
                },
                {
                    "type": "code",
                    "code": "importAcmeLogofrom'@/app/ui/acme-logo';import{ ArrowRightIcon }from'@heroicons/react/24/outline';importLinkfrom'next/link';importstylesfrom'@/app/ui/home.module.css';exportdefaultfunctionPage() {return(<mainclassName=\"flex min-h-screen flex-col p-6\"><divclassName={styles.shape} />// ...)}"
                },
                {
                    "type": "p",
                    "text": "Save your changes and preview them in the browser. You should see the same shape as before."
                },
                {
                    "type": "p",
                    "text": "Tailwind and CSS modules are the two most common ways of styling Next.js applications. Whether you use one or the other is a matter of preference - you can even use both in the same application!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using theclsxlibrary to toggle class names"
                },
                {
                    "type": "p",
                    "text": "There may be cases where you may need to conditionally style an element based on state or some other condition."
                },
                {
                    "type": "p",
                    "text": "clsxis a library that lets you toggle class names easily. We recommend taking a look atdocumentationfor more details, but here's the basic usage:"
                },
                {
                    "type": "list",
                    "items": [
                        "Suppose that you want to create anInvoiceStatuscomponent which acceptsstatus. The status can be'pending'or'paid'.",
                        "If it's'paid', you want the color to be green. If it's'pending', you want the color to be gray."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can useclsxto conditionally apply the classes, like this:"
                },
                {
                    "type": "code",
                    "code": "importclsxfrom'clsx';exportdefaultfunctionInvoiceStatus({ status }:{ status:string}) {return(<spanclassName={clsx('inline-flex items-center rounded-full px-2 py-1 text-sm',{'bg-gray-100 text-gray-500':status==='pending','bg-green-500 text-white':status==='paid',},)}>// ...)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Other styling solutions"
                },
                {
                    "type": "p",
                    "text": "In addition to the approaches we've discussed, you can also style your Next.js application with:"
                },
                {
                    "type": "list",
                    "items": [
                        "Sass which allows you to import.cssand.scssfiles.",
                        "CSS-in-JS libraries such asstyled-jsx,styled-components, andemotion."
                    ]
                },
                {
                    "type": "p",
                    "text": "Take a look at theCSS documentationfor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter2"
                },
                {
                    "type": "p",
                    "text": "Well done! You've learned about the different ways of styling a Next.js application."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "3: Optimizing Fonts and Images"
                },
                {
                    "type": "p",
                    "text": "Continue working on your home page by adding a hero image and a custom font."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/error-handling",
            "title": "Learn Next.js: Handling Errors | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "13"
                },
                {
                    "type": "p",
                    "text": "Chapter13"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Handling Errors"
                },
                {
                    "type": "p",
                    "text": "In the previous chapter, you learned how to mutate data using Server Actions. Let's see how you can handle errorsgracefullyusing JavaScript'stry/catchstatements and Next.js APIs."
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "How to use the specialerror.tsxfile to catch errors in your route segments, and show a fallback UI to the user."
                },
                {
                    "type": "p",
                    "text": "How to use thenotFoundfunction andnot-foundfile to handle 404 errors (for resources that don’t exist)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Addingtry/catchto Server Actions"
                },
                {
                    "type": "p",
                    "text": "First, let's add JavaScript'stry/catchstatements to your Server Actions to allow you to handle errors gracefully."
                },
                {
                    "type": "p",
                    "text": "If you know how to do this, spend a few minutes updating your Server Actions, or you can copy the code below:"
                },
                {
                    "type": "p",
                    "text": "Note howredirectis being called outside of thetry/catchblock. This is becauseredirectworks by throwing an error, which would be caught by thecatchblock. To avoid this, you can callredirectaftertry/catch.redirectwould only be reachable iftryis successful."
                },
                {
                    "type": "p",
                    "text": "Now, let's check what happens when an error is thrown in your Server Action. You can do this by throwing an error earlier. For example, in thedeleteInvoiceaction, throw an error at the top of the function:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiondeleteInvoice(id:string) {thrownewError('Failed to Delete Invoice');// Unreachable code blocktry{awaitsql`DELETE FROM invoices WHERE id =${id}`;revalidatePath('/dashboard/invoices');return{ message:'Deleted Invoice'};}catch(error) {return{ message:'Database Error: Failed to Delete Invoice'};}}"
                },
                {
                    "type": "p",
                    "text": "When you try to delete an invoice, you should see an error on localhost. Ensure that you remove this error after testing and before moving onto the next section."
                },
                {
                    "type": "p",
                    "text": "Seeing these errors are helpful while developing as you can catch any potential problems early. However, you also want to show errors to the user to avoid an abrupt failure and allow your application to continue running."
                },
                {
                    "type": "p",
                    "text": "This is where Next.jserror.tsxfile comes in."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Handling all errors witherror.tsx"
                },
                {
                    "type": "p",
                    "text": "Theerror.tsxfile can be used to define a UI boundary for a route segment. It serves as acatch-allfor unexpected errors and allows you to display a fallback UI to your users."
                },
                {
                    "type": "p",
                    "text": "Inside your/dashboard/invoicesfolder, create a new file callederror.tsxand paste the following code:"
                },
                {
                    "type": "code",
                    "code": "'use client';import{ useEffect }from'react';exportdefaultfunctionError({error,reset,}:{error:Error&{ digest?:string};reset:()=>void;}) {useEffect(()=>{// Optionally log the error to an error reporting serviceconsole.error(error);},[error]);return(<mainclassName=\"flex h-full flex-col items-center justify-center\"><h2className=\"text-center\">Something went wrong!</h2><buttonclassName=\"mt-4 rounded-md bg-blue-500 px-4 py-2 text-sm text-white transition-colors hover:bg-blue-400\"onClick={// Attempt to recover by trying to re-render the invoices route()=>reset()}>Try again</button></main>);}"
                },
                {
                    "type": "p",
                    "text": "There are a few things you'll notice about the code above:"
                },
                {
                    "type": "list",
                    "items": [
                        "\"use client\"-error.tsxneeds to be a Client Component.",
                        "It accepts two props:error: This object is an instance of JavaScript's nativeErrorobject.reset: This is a function to reset the error boundary. When executed, the function will try to re-render the route segment.",
                        "error: This object is an instance of JavaScript's nativeErrorobject.",
                        "reset: This is a function to reset the error boundary. When executed, the function will try to re-render the route segment."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "error: This object is an instance of JavaScript's nativeErrorobject.",
                        "reset: This is a function to reset the error boundary. When executed, the function will try to re-render the route segment."
                    ]
                },
                {
                    "type": "p",
                    "text": "When you try to delete an invoice again, you should see the following UI:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Handling 404 errors with thenotFoundfunction"
                },
                {
                    "type": "p",
                    "text": "Another way you can handle errors gracefully is by using thenotFoundfunction. Whileerror.tsxis useful for catchingallerrors,notFoundcan be used when you try to fetch a resource that doesn't exist."
                },
                {
                    "type": "p",
                    "text": "For example, visithttp://localhost:3000/dashboard/invoices/2e94d1ed-d220-449f-9f11-f0bbceed9645/edit."
                },
                {
                    "type": "p",
                    "text": "This is a fake UUID that doesn't exist in your database."
                },
                {
                    "type": "p",
                    "text": "You'll immediately seeerror.tsxkicks in because this is a child route of/invoiceswhereerror.tsxis defined."
                },
                {
                    "type": "p",
                    "text": "However, if you want to be more specific, you can show a 404 error to tell the user the resource they're trying to access hasn't been found."
                },
                {
                    "type": "p",
                    "text": "You can confirm that the resource hasn't been found by going into yourfetchInvoiceByIdfunction indata.ts, and console logging the returnedinvoice:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionfetchInvoiceById(id:string) {noStore();try{// ...console.log(invoice);// Invoice is an empty array []returninvoice[0];}catch(error) {console.error('Database Error:',error);thrownewError('Failed to fetch invoice.');}}"
                },
                {
                    "type": "p",
                    "text": "Now that you know the invoice doesn't exist in your database, let's usenotFoundto handle it. Navigate to/dashboard/invoices/[id]/edit/page.tsx, and import{ notFound }from'next/navigation'."
                },
                {
                    "type": "p",
                    "text": "Then, you can use a conditional to invokenotFoundif the invoice doesn't exist:"
                },
                {
                    "type": "code",
                    "code": "import{ fetchInvoiceById,fetchCustomers }from'@/app/lib/data';import{ updateInvoice }from'@/app/lib/actions';import{ notFound }from'next/navigation';exportdefaultasyncfunctionPage({ params }:{ params:{ id:string} }) {constid=params.id;const[invoice,customers]=awaitPromise.all([fetchInvoiceById(id),fetchCustomers(),]);if(!invoice) {notFound();}// ...}"
                },
                {
                    "type": "p",
                    "text": "Perfect!<Page>will now throw an error if a specific invoice is not found. To show an error UI to the user. Create anot-found.tsxfile inside the/editfolder."
                },
                {
                    "type": "p",
                    "text": "Then, inside thenot-found.tsxfile, paste the following the code:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link';import{ FaceFrownIcon }from'@heroicons/react/24/outline';exportdefaultfunctionNotFound() {return(<mainclassName=\"flex h-full flex-col items-center justify-center gap-2\"><FaceFrownIconclassName=\"w-10 text-gray-400\"/><h2className=\"text-xl font-semibold\">404 Not Found</h2><p>Could not find the requested invoice.</p><Linkhref=\"/dashboard/invoices\"className=\"mt-4 rounded-md bg-blue-500 px-4 py-2 text-sm text-white transition-colors hover:bg-blue-400\">Go Back</Link></main>);}"
                },
                {
                    "type": "p",
                    "text": "Refresh the route, and you should now see the following UI:"
                },
                {
                    "type": "p",
                    "text": "That's something to keep in mind,notFoundwill take precedence overerror.tsx, so you can reach out for it when you want to handle more specific errors!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Further reading"
                },
                {
                    "type": "p",
                    "text": "To learn more about error handling in Next.js, check out the following documentation:"
                },
                {
                    "type": "list",
                    "items": [
                        "Error Handling",
                        "error.jsAPI Reference",
                        "notFound()API Reference",
                        "not-found.jsAPI Reference"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter13"
                },
                {
                    "type": "p",
                    "text": "Nice, you're now able to handle errors gracefully in your application."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "14: Improving Accessibility"
                },
                {
                    "type": "p",
                    "text": "Let's continue exploring ways to improve your user's experience. You'll learn about server-side form validation and improving accessibility."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/fetching-data",
            "title": "Learn Next.js: Fetching Data | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "7"
                },
                {
                    "type": "p",
                    "text": "Chapter7"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Fetching Data"
                },
                {
                    "type": "p",
                    "text": "Now that you've created and seeded your database, let's discuss the different ways you can fetch data for your application, and build out your dashboard overview page."
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "Learn about some approaches to fetching data: APIs, ORMs, SQL, etc."
                },
                {
                    "type": "p",
                    "text": "How Server Components can help you access back-end resources more securely."
                },
                {
                    "type": "p",
                    "text": "What network waterfalls are."
                },
                {
                    "type": "p",
                    "text": "How to implement parallel data fetching using a JavaScript Pattern."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Choosing how to fetch data"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "API layer"
                },
                {
                    "type": "p",
                    "text": "APIs are an intermediary layer between your application code and database. There are a few cases where you might use an API:"
                },
                {
                    "type": "list",
                    "items": [
                        "If you're using 3rd party services that provide an API.",
                        "If you're fetching data from the client, you want to have an API layer that runs on the server to avoid exposing your database secrets to the client."
                    ]
                },
                {
                    "type": "p",
                    "text": "In Next.js, you can create API endpoints usingRoute Handlers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Database queries"
                },
                {
                    "type": "p",
                    "text": "When you're creating a full-stack application, you'll also need to write logic to interact with your database. Forrelational databaseslike Postgres, you can do this with SQL or with anORM."
                },
                {
                    "type": "p",
                    "text": "There are a few cases where you have to write database queries:"
                },
                {
                    "type": "list",
                    "items": [
                        "When creating your API endpoints, you need to write logic to interact with your database.",
                        "If you are using React Server Components (fetching data on the server), you can skip the API layer, and query your database directly without risking exposing your database secrets to the client."
                    ]
                },
                {
                    "type": "p",
                    "text": "Let's learn more about React Server Components."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using Server Components to fetch data"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js applications useReact Server Components. Fetching data with Server Components is a relatively new approach and there are a few benefits of using them:"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components support promises, providing a simpler solution for asynchronous tasks like data fetching. You can useasync/awaitsyntax without reaching out foruseEffect,useStateor data fetching libraries.",
                        "Server Components execute on the server, so you can keep expensive data fetches and logic on the server and only send the result to the client.",
                        "As mentioned before, since Server Components execute on the server, you can query the database directly without an additional API layer."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using SQL"
                },
                {
                    "type": "p",
                    "text": "For your dashboard project, you'll write database queries using theVercel Postgres SDKand SQL. There are a few reasons why we'll be using SQL:"
                },
                {
                    "type": "list",
                    "items": [
                        "SQL is the industry standard for querying relational databases (e.g. ORMs generate SQL under the hood).",
                        "Having a basic understanding of SQL can help you understand the fundamentals of relational databases, allowing you to apply your knowledge to other tools.",
                        "SQL is versatile, allowing you to fetch and manipulate specific data.",
                        "The Vercel Postgres SDK provides protection againstSQL injections."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don't worry if you haven't used SQL before - we have provided the queries for you."
                },
                {
                    "type": "p",
                    "text": "Go to/app/lib/data.ts, here you'll see that we're importing thesqlfunction from@vercel/postgres. This function allows you to query your database:"
                },
                {
                    "type": "code",
                    "code": "import{ sql }from'@vercel/postgres';// ..."
                },
                {
                    "type": "p",
                    "text": "You can callsqlinside any Server Component. But to allow you to navigate the components more easily, we've kept all the data queries in thedata.tsfile, and you can import them into the components."
                },
                {
                    "type": "p",
                    "text": "Note:If you used your own database provider in Chapter 6, you'll need to update the database queries to work with your provider. You can find the queries in/app/lib/data.ts."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fetching data for the dashboard overview page"
                },
                {
                    "type": "p",
                    "text": "Now that you understand different ways of fetching data, let's fetch data for the dashboard overview page. Navigate to/app/dashboard/page.tsx, paste the following code, and spend some time exploring it:"
                },
                {
                    "type": "code",
                    "code": "import{ Card }from'@/app/ui/dashboard/cards';importRevenueChartfrom'@/app/ui/dashboard/revenue-chart';importLatestInvoicesfrom'@/app/ui/dashboard/latest-invoices';import{ lusitana }from'@/app/ui/fonts';exportdefaultasyncfunctionPage() {return(<main><h1className={`${lusitana.className}mb-4 text-xl md:text-2xl`}>Dashboard</h1><divclassName=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-4\">{/* <Card title=\"Collected\" value={totalPaidInvoices} type=\"collected\" /> */}{/* <Card title=\"Pending\" value={totalPendingInvoices} type=\"pending\" /> */}{/* <Card title=\"Total Invoices\" value={numberOfInvoices} type=\"invoices\" /> */}{/* <Cardtitle=\"Total Customers\"value={numberOfCustomers}type=\"customers\"/> */}</div><divclassName=\"mt-6 grid grid-cols-1 gap-6 md:grid-cols-4 lg:grid-cols-8\">{/* <RevenueChart revenue={revenue}  /> */}{/* <LatestInvoices latestInvoices={latestInvoices} /> */}</div></main>);}"
                },
                {
                    "type": "p",
                    "text": "In the code above:"
                },
                {
                    "type": "list",
                    "items": [
                        "Page is anasynccomponent. This allows you to useawaitto fetch data.",
                        "There are also 3 components which receive data:<Card>,<RevenueChart>, and<LatestInvoices>. They are currently commented out to prevent the application from erroring."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fetching data for<RevenueChart/>"
                },
                {
                    "type": "p",
                    "text": "To fetch data for the<RevenueChart/>component, import thefetchRevenuefunction fromdata.tsand call it inside your component:"
                },
                {
                    "type": "code",
                    "code": "import{ Card }from'@/app/ui/dashboard/cards';importRevenueChartfrom'@/app/ui/dashboard/revenue-chart';importLatestInvoicesfrom'@/app/ui/dashboard/latest-invoices';import{ lusitana }from'@/app/ui/fonts';import{ fetchRevenue }from'@/app/lib/data';exportdefaultasyncfunctionPage() {constrevenue=awaitfetchRevenue();// ...}"
                },
                {
                    "type": "p",
                    "text": "Then, uncomment the<RevenueChart/>component, navigate to the component file (/app/ui/dashboard/revenue-chart.tsx) and uncomment the code inside it. Check your localhost, you should be able to see a chart that usesrevenuedata."
                },
                {
                    "type": "p",
                    "text": "Let's continue importing some more data queries!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fetching data for<LatestInvoices/>"
                },
                {
                    "type": "p",
                    "text": "For the<LatestInvoices />component, we need to get the latest 5 invoices, sorted by date."
                },
                {
                    "type": "p",
                    "text": "You could fetch all the invoices and sort through them using JavaScript. This isn't a problem as our data is small, but as your application grows, it can significantly increase the amount of data transferred on each request and the JavaScript required to sort through it."
                },
                {
                    "type": "p",
                    "text": "Instead of sorting through the latest invoices in-memory, you can use an SQL query to fetch only the last 5 invoices. For example, this is the SQL query from yourdata.tsfile:"
                },
                {
                    "type": "code",
                    "code": "// Fetch the last 5 invoices, sorted by dateconstdata=awaitsql<LatestInvoiceRaw>`SELECT invoices.amount, customers.name, customers.image_url, customers.emailFROM invoicesJOIN customers ON invoices.customer_id = customers.idORDER BY invoices.date DESCLIMIT 5`;"
                },
                {
                    "type": "p",
                    "text": "In your page, import thefetchLatestInvoicesfunction:"
                },
                {
                    "type": "code",
                    "code": "import{ Card }from'@/app/ui/dashboard/cards';importRevenueChartfrom'@/app/ui/dashboard/revenue-chart';importLatestInvoicesfrom'@/app/ui/dashboard/latest-invoices';import{ lusitana }from'@/app/ui/fonts';import{ fetchRevenue,fetchLatestInvoices }from'@/app/lib/data';exportdefaultasyncfunctionPage() {constrevenue=awaitfetchRevenue();constlatestInvoices=awaitfetchLatestInvoices();// ...}"
                },
                {
                    "type": "p",
                    "text": "Then, uncomment the<LatestInvoices />component. You will also need to uncomment the relevant code in the<LatestInvoices />component itself, located at/app/ui/dashboard/latest-invoices."
                },
                {
                    "type": "p",
                    "text": "If you visit your localhost, you should see that only the last 5 are returned from the database. Hopefully, you're beginning to see the advantages of querying your database directly!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Practice: Fetch data for the<Card>components"
                },
                {
                    "type": "p",
                    "text": "Now it's your turn to fetch data for the<Card>components. The cards will display the following data:"
                },
                {
                    "type": "list",
                    "items": [
                        "Total amount of invoices collected.",
                        "Total amount of invoices pending.",
                        "Total number of invoices.",
                        "Total number of customers."
                    ]
                },
                {
                    "type": "p",
                    "text": "Again, you might be tempted to fetch all the invoices and customers, and use JavaScript to manipulate the data. For example, you could useArray.lengthto get the total number of invoices and customers:"
                },
                {
                    "type": "code",
                    "code": "consttotalInvoices=allInvoices.length;consttotalCustomers=allCustomers.length;"
                },
                {
                    "type": "p",
                    "text": "But with SQL, you can fetch only the data you need. It's a little longer than usingArray.length, but it means less data needs to be transferred during the request. This is the SQL alternative:"
                },
                {
                    "type": "code",
                    "code": "constinvoiceCountPromise=sql`SELECT COUNT(*) FROM invoices`;constcustomerCountPromise=sql`SELECT COUNT(*) FROM customers`;"
                },
                {
                    "type": "p",
                    "text": "The function you will need to import is calledfetchCardData. You will need to destructure the values returned from the function."
                },
                {
                    "type": "p",
                    "text": "Hint:"
                },
                {
                    "type": "list",
                    "items": [
                        "Check the card components to see what data they need.",
                        "Check thedata.tsfile to see what the function returns."
                    ]
                },
                {
                    "type": "p",
                    "text": "Once you're ready, expand the toggle below for the final code:"
                },
                {
                    "type": "p",
                    "text": "Great! You've now fetched all the data for the dashboard overview page. Your page should look like this:"
                },
                {
                    "type": "p",
                    "text": "However... there are two things you need to be aware of:"
                },
                {
                    "type": "list",
                    "items": [
                        "The data requests are unintentionally blocking each other, creating arequest waterfall.",
                        "By default, Next.jsprerendersroutes to improve performance, this is calledStatic Rendering. So if your data changes, it won't be reflected in your dashboard."
                    ]
                },
                {
                    "type": "p",
                    "text": "Let's discuss number 1 in this chapter, then look into detail at number 2 in the next chapter."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What are request waterfalls?"
                },
                {
                    "type": "p",
                    "text": "A \"waterfall\" refers to a sequence of network requests that depend on the completion of previous requests. In the case of data fetching, each request can only begin once the previous request has returned data."
                },
                {
                    "type": "p",
                    "text": "For example, we need to wait forfetchRevenue()to execute beforefetchLatestInvoices()can start running, and so on."
                },
                {
                    "type": "code",
                    "code": "constrevenue=awaitfetchRevenue();constlatestInvoices=awaitfetchLatestInvoices();// wait for fetchRevenue() to finishconst{numberOfInvoices,numberOfCustomers,totalPaidInvoices,totalPendingInvoices,}=awaitfetchCardData();// wait for fetchLatestInvoices() to finish"
                },
                {
                    "type": "p",
                    "text": "This pattern is not necessarily bad. There may be cases where you want waterfalls\nbecause you want a condition to be satisfied before you make the next request. For\nexample, you might want to fetch a user's ID and profile information first. Once\nyou have the ID, you might then proceed to fetch their list of friends. In this case,\neach request is contingent on the data returned from the previous request."
                },
                {
                    "type": "p",
                    "text": "However, this behavior can also be unintentional and impact performance."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Parallel data fetching"
                },
                {
                    "type": "p",
                    "text": "A common way to avoid waterfalls is to initiate all data requests at the same time - in parallel."
                },
                {
                    "type": "p",
                    "text": "In JavaScript, you can use thePromise.all()orPromise.allSettled()functions to initiate all promises at the same time. For example, indata.ts, we're usingPromise.all()in thefetchCardData()function:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionfetchCardData() {try{constinvoiceCountPromise=sql`SELECT COUNT(*) FROM invoices`;constcustomerCountPromise=sql`SELECT COUNT(*) FROM customers`;constinvoiceStatusPromise=sql`SELECTSUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"FROM invoices`;constdata=awaitPromise.all([invoiceCountPromise,customerCountPromise,invoiceStatusPromise,]);// ...}}"
                },
                {
                    "type": "p",
                    "text": "By using this pattern, you can:"
                },
                {
                    "type": "list",
                    "items": [
                        "Start executing all data fetches at the same time, which can lead to performance gains.",
                        "Use a native JavaScript pattern that can be applied to any library or framework."
                    ]
                },
                {
                    "type": "p",
                    "text": "However, there is onedisadvantageof relying only on this JavaScript pattern: what happens if one data request is slower than all the others?"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter7"
                },
                {
                    "type": "p",
                    "text": "You've learned about some of the different ways to fetch data in Next.js."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "8: Static and Dynamic Rendering"
                },
                {
                    "type": "p",
                    "text": "Learn about the different rendering modes in Next.js."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/getting-started",
            "title": "Learn Next.js: Getting Started | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "1"
                },
                {
                    "type": "p",
                    "text": "Chapter1"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Getting Started"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating a new project"
                },
                {
                    "type": "p",
                    "text": "We recommend usingpnpmas your package manager, as it's faster and more efficient thannpmoryarn. If you don't havepnpminstalled, you can install it globally by running:"
                },
                {
                    "type": "code",
                    "code": "npminstall-gpnpm"
                },
                {
                    "type": "p",
                    "text": "To create a Next.js app, open your terminal,cdinto the folder you'd like to keep your project, and run the following command:"
                },
                {
                    "type": "code",
                    "code": "npxcreate-next-app@latestnextjs-dashboard--example\"https://github.com/vercel/next-learn/tree/main/dashboard/starter-example\"--use-pnpm"
                },
                {
                    "type": "p",
                    "text": "This command usescreate-next-app, a Command Line Interface (CLI) tool that sets up a Next.js application for you. In the command above, you're also using the--exampleflag with thestarter examplefor this course."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Exploring the project"
                },
                {
                    "type": "p",
                    "text": "Unlike tutorials that have you write code from scratch, much of the code for this course is already written for you. This better reflects real-world development, where you'll likely be working with existing codebases."
                },
                {
                    "type": "p",
                    "text": "Our goal is to help you focus on learning the main features of Next.js, without having to writeallthe application code."
                },
                {
                    "type": "p",
                    "text": "After installation, open the project in your code editor and navigate tonextjs-dashboard."
                },
                {
                    "type": "code",
                    "code": "cdnextjs-dashboard"
                },
                {
                    "type": "p",
                    "text": "Let's spend some time exploring the project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Folder structure"
                },
                {
                    "type": "p",
                    "text": "You'll notice that the project has the following folder structure:"
                },
                {
                    "type": "list",
                    "items": [
                        "/app: Contains all the routes, components, and logic for your application, this is where you'll be mostly working from.",
                        "/app/lib: Contains functions used in your application, such as reusable utility functions and data fetching functions.",
                        "/app/ui: Contains all the UI components for your application, such as cards, tables, and forms. To save time, we've pre-styled these components for you.",
                        "/public: Contains all the static assets for your application, such as images.",
                        "Config Files: You'll also notice config files such asnext.config.jsat the root of your application. Most of these files are created and pre-configured when you start a new project usingcreate-next-app. You will not need to modify them in this course."
                    ]
                },
                {
                    "type": "p",
                    "text": "Feel free to explore these folders, and don't worry if you don't understand everything the code is doing yet."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Placeholder data"
                },
                {
                    "type": "p",
                    "text": "When you're building user interfaces, it helps to have some placeholder data. If a database or API is not yet available, you can:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use placeholder data in JSON format or as JavaScript objects.",
                        "Use a 3rd party service likemockAPI."
                    ]
                },
                {
                    "type": "p",
                    "text": "For this project, we've provided some placeholder data inapp/lib/placeholder-data.ts. Each JavaScript object in the file represents a table in your database. For example, for the invoices table:"
                },
                {
                    "type": "code",
                    "code": "constinvoices=[{customer_id:customers[0].id,amount:15795,status:'pending',date:'2022-12-06',},{customer_id:customers[1].id,amount:20348,status:'pending',date:'2022-11-14',},// ...];"
                },
                {
                    "type": "p",
                    "text": "In the chapter onsetting up your database, you'll use this data toseedyour database (populate it with some initial data)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "TypeScript"
                },
                {
                    "type": "p",
                    "text": "You may also notice most files have a.tsor.tsxsuffix. This is because the project is written in TypeScript. We wanted to create a course that reflects the modern web landscape."
                },
                {
                    "type": "p",
                    "text": "It's okay if you don't know TypeScript - we'll provide the TypeScript code snippets when required."
                },
                {
                    "type": "p",
                    "text": "For now, take a look at the/app/lib/definitions.tsfile. Here, we manually define the types that will be returned from the database. For example, the invoices table has the following types:"
                },
                {
                    "type": "code",
                    "code": "exporttypeInvoice={id:string;customer_id:string;amount:number;date:string;// In TypeScript, this is called a string union type.// It means that the \"status\" property can only be one of the two strings: 'pending' or 'paid'.status:'pending'|'paid';};"
                },
                {
                    "type": "p",
                    "text": "By using TypeScript, you can ensure you don't accidentally pass the wrong data format to your components or database, like passing astringinstead of anumberto invoiceamount."
                },
                {
                    "type": "p",
                    "text": "If you're a TypeScript developer:"
                },
                {
                    "type": "list",
                    "items": [
                        "We're manually declaring the data types, but for better type-safety, we recommendPrismaorDrizzle, which automatically generates types based on your database schema.",
                        "Next.js detects if your project uses TypeScript and automatically installs the necessary packages and configuration. Next.js also comes with aTypeScript pluginfor your code editor, to help with auto-completion and type-safety."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Running the development server"
                },
                {
                    "type": "p",
                    "text": "Runpnpm ito install the project's packages."
                },
                {
                    "type": "code",
                    "code": "pnpmi"
                },
                {
                    "type": "p",
                    "text": "Followed bypnpm devto start the development server."
                },
                {
                    "type": "code",
                    "code": "pnpmdev"
                },
                {
                    "type": "p",
                    "text": "pnpm devstarts your Next.js development server on port3000. Let's check to see if it's working."
                },
                {
                    "type": "p",
                    "text": "Openhttp://localhost:3000on your browser. Your home page should look like this, which is intentionally unstyled:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter1"
                },
                {
                    "type": "p",
                    "text": "Congratulations! You've created a Next.js application using the starter example and ran the development server."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "2: CSS Styling"
                },
                {
                    "type": "p",
                    "text": "Let's work on your home page and discuss the different ways you can style your application."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/improving-accessibility",
            "title": "Learn Next.js: Improving Accessibility | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "14"
                },
                {
                    "type": "p",
                    "text": "Chapter14"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Improving Accessibility"
                },
                {
                    "type": "p",
                    "text": "In the previous chapter, we looked at how to catch errors (including 404 errors) and display a fallback to the user. However, we still need to discuss another piece of the puzzle: form validation. Let's see how to implement server-side validation with Server Actions, and how you can show form errors using React'suseActionStatehook - while keeping accessibility in mind!"
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "How to useeslint-plugin-jsx-a11ywith Next.js to implement accessibility best practices."
                },
                {
                    "type": "p",
                    "text": "How to implement server-side form validation."
                },
                {
                    "type": "p",
                    "text": "How to use the ReactuseActionStatehook to handle form errors, and display them to the user."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is accessibility?"
                },
                {
                    "type": "p",
                    "text": "Accessibility refers to designing and implementing web applications that everyone can use, including those with disabilities. It's a vast topic that covers many areas, such as keyboard navigation, semantic HTML, images, colors, videos, etc."
                },
                {
                    "type": "p",
                    "text": "While we won't go in-depth into accessibility in this course, we'll discuss the accessibility features available in Next.js and some common practices to make your applications more accessible."
                },
                {
                    "type": "p",
                    "text": "If you'd like to learn more about accessibility, we recommend theLearn Accessibilitycourse byweb.dev."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using the ESLint accessibility plugin in Next.js"
                },
                {
                    "type": "p",
                    "text": "Next.js includes theeslint-plugin-jsx-a11yplugin in its ESLint config to help catch accessibility issues early. For example, this plugin warns if you have images withoutalttext, use thearia-*androleattributes incorrectly, and more."
                },
                {
                    "type": "p",
                    "text": "Optionally, if you would like to try this out, addnext lintas a script in yourpackage.jsonfile:"
                },
                {
                    "type": "code",
                    "code": "\"scripts\": {\"build\":\"next build\",\"dev\":\"next dev\",\"start\":\"next start\",\"lint\":\"next lint\"},"
                },
                {
                    "type": "p",
                    "text": "Then runpnpm lintin your terminal:"
                },
                {
                    "type": "code",
                    "code": "pnpmlint"
                },
                {
                    "type": "p",
                    "text": "This will guide you through installing and configuring ESLint for your project. If you were to runpnpm lintnow, you should see the following output:"
                },
                {
                    "type": "code",
                    "code": "✔NoESLintwarningsorerrors"
                },
                {
                    "type": "p",
                    "text": "However, what would happen if you had an image withoutalttext? Let's find out!"
                },
                {
                    "type": "p",
                    "text": "Go to/app/ui/invoices/table.tsxand remove thealtprop from the image. You can use your editor's search feature to quickly find the<Image>:"
                },
                {
                    "type": "code",
                    "code": "<Imagesrc={invoice.image_url}className=\"rounded-full\"width={28}height={28}alt={`${invoice.name}'s profile picture`}// Delete this line/>"
                },
                {
                    "type": "p",
                    "text": "Now runpnpm lintagain, and you should see the following warning:"
                },
                {
                    "type": "code",
                    "code": "./app/ui/invoices/table.tsx45:25Warning: Image elements must have an alt prop,eitherwithmeaningfultext,oranemptystringfordecorativeimages.jsx-a11y/alt-text"
                },
                {
                    "type": "p",
                    "text": "While adding and configuring a linter is not a required step, it can be helpful to catch accessibility issues in your development process."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Improving form accessibility"
                },
                {
                    "type": "p",
                    "text": "There are three things we're already doing to improve accessibility in our forms:"
                },
                {
                    "type": "list",
                    "items": [
                        "Semantic HTML: Using semantic elements (<input>,<option>, etc) instead of<div>. This allows assistive technologies (AT) to focus on the input elements and provide appropriate contextual information to the user, making the form easier to navigate and understand.",
                        "Labelling: Including<label>and thehtmlForattribute ensures that each form field has a descriptive text label. This improves AT support by providing context and also enhances usability by allowing users to click on the label to focus on the corresponding input field.",
                        "Focus Outline: The fields are properly styled to show an outline when they are in focus. This is critical for accessibility as it visually indicates the active element on the page, helping both keyboard and screen reader users to understand where they are on the form. You can verify this by pressingtab."
                    ]
                },
                {
                    "type": "p",
                    "text": "These practices lay a good foundation for making your forms more accessible to many users. However, they don't addressform validationanderrors."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Form validation"
                },
                {
                    "type": "p",
                    "text": "Go tohttp://localhost:3000/dashboard/invoices/create, and submit an empty form. What happens?"
                },
                {
                    "type": "p",
                    "text": "You get an error! This is because you're sending empty form values to your Server Action. You can prevent this by validating your form on the client or the server."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client-Side validation"
                },
                {
                    "type": "p",
                    "text": "There are a couple of ways you can validate forms on the client. The simplest would be to rely on the form validation provided by the browser by adding therequiredattribute to the<input>and<select>elements in your forms. For example:"
                },
                {
                    "type": "code",
                    "code": "<inputid=\"amount\"name=\"amount\"type=\"number\"placeholder=\"Enter USD amount\"className=\"peer block w-full rounded-md border border-gray-200 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500\"required/>"
                },
                {
                    "type": "p",
                    "text": "Submit the form again. The browser will display a warning if you try to submit a form with empty values."
                },
                {
                    "type": "p",
                    "text": "This approach is generally okay because some ATs support browser validation."
                },
                {
                    "type": "p",
                    "text": "An alternative to client-side validation is server-side validation. Let's see how you can implement it in the next section. For now, delete therequiredattributes if you added them."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server-Side validation"
                },
                {
                    "type": "p",
                    "text": "By validating forms on the server, you can:"
                },
                {
                    "type": "list",
                    "items": [
                        "Ensure your data is in the expected format before sending it to your database.",
                        "Reduce the risk of malicious users bypassing client-side validation.",
                        "Have one source of truth for what is consideredvaliddata."
                    ]
                },
                {
                    "type": "p",
                    "text": "In yourcreate-form.tsxcomponent, import theuseActionStatehook fromreact. SinceuseActionStateis a hook, you will need to turn your form into a Client Component using\"use client\"directive:"
                },
                {
                    "type": "code",
                    "code": "'use client';// ...import{ useActionState }from'react';"
                },
                {
                    "type": "p",
                    "text": "Inside your Form Component, theuseActionStatehook:"
                },
                {
                    "type": "list",
                    "items": [
                        "Takes two arguments:(action, initialState).",
                        "Returns two values:[state, formAction]- the form state, and a function to be called when the form is submitted."
                    ]
                },
                {
                    "type": "p",
                    "text": "Pass yourcreateInvoiceaction as an argument ofuseActionState, and inside your<form action={}>attribute, callformAction."
                },
                {
                    "type": "code",
                    "code": "// ...import{ useActionState }from'react';exportdefaultfunctionForm({ customers }:{ customers:CustomerField[] }) {const[state,formAction]=useActionState(createInvoice,initialState);return<formaction={formAction}>...</form>;}"
                },
                {
                    "type": "p",
                    "text": "TheinitialStatecan be anything you define, in this case, create an object with two empty keys:messageanderrors, and import theStatetype from youractions.tsfile:"
                },
                {
                    "type": "code",
                    "code": "// ...import{ createInvoice,State }from'@/app/lib/actions';import{ useActionState }from'react';exportdefaultfunctionForm({ customers }:{ customers:CustomerField[] }) {constinitialState:State={ message:null,errors:{} };const[state,formAction]=useActionState(createInvoice,initialState);return<formaction={formAction}>...</form>;}"
                },
                {
                    "type": "p",
                    "text": "This may seem confusing initially, but it'll make more sense once you update the server action. Let's do that now."
                },
                {
                    "type": "p",
                    "text": "In youraction.tsfile, you can use Zod to validate form data. Update yourFormSchemaas follows:"
                },
                {
                    "type": "code",
                    "code": "constFormSchema=z.object({id:z.string(),customerId:z.string({invalid_type_error:'Please select a customer.',}),amount:z.coerce.number().gt(0,{ message:'Please enter an amount greater than $0.'}),status:z.enum(['pending','paid'],{invalid_type_error:'Please select an invoice status.',}),date:z.string(),});"
                },
                {
                    "type": "list",
                    "items": [
                        "customerId- Zod already throws an error if the customer field is empty as it expects a typestring. But let's add a friendly message if the user doesn't select a customer.",
                        "amount- Since you are coercing the amount type fromstringtonumber, it'll default to zero if the string is empty. Let's tell Zod we always want the amount greater than 0 with the.gt()function.",
                        "status- Zod already throws an error if the status field is empty as it expects \"pending\" or \"paid\". Let's also add a friendly message if the user doesn't select a status."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next, update yourcreateInvoiceaction to accept two parameters -prevStateandformData:"
                },
                {
                    "type": "code",
                    "code": "exporttypeState={errors?:{customerId?:string[];amount?:string[];status?:string[];};message?:string|null;};exportasyncfunctioncreateInvoice(prevState:State,formData:FormData) {// ...}"
                },
                {
                    "type": "list",
                    "items": [
                        "formData- same as before.",
                        "prevState- contains the state passed from theuseActionStatehook. You won't be using it in the action in this example, but it's a required prop."
                    ]
                },
                {
                    "type": "p",
                    "text": "Then, change the Zodparse()function tosafeParse():"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctioncreateInvoice(prevState:State,formData:FormData) {// Validate form fields using ZodconstvalidatedFields=CreateInvoice.safeParse({customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),});// ...}"
                },
                {
                    "type": "p",
                    "text": "safeParse()will return an object containing either asuccessorerrorfield. This will help handle validation more gracefully without having put this logic inside thetry/catchblock."
                },
                {
                    "type": "p",
                    "text": "Before sending the information to your database, check if the form fields were validated correctly with a conditional:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctioncreateInvoice(prevState:State,formData:FormData) {// Validate form fields using ZodconstvalidatedFields=CreateInvoice.safeParse({customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),});// If form validation fails, return errors early. Otherwise, continue.if(!validatedFields.success) {return{errors:validatedFields.error.flatten().fieldErrors,message:'Missing Fields. Failed to Create Invoice.',};}// ...}"
                },
                {
                    "type": "p",
                    "text": "IfvalidatedFieldsisn't successful, we return the function early with the error messages from Zod."
                },
                {
                    "type": "p",
                    "text": "Tip:console.logvalidatedFieldsand submit an empty form to see the shape of it."
                },
                {
                    "type": "p",
                    "text": "Finally, since you're handling form validation separately, outside your try/catch block, you can return a specific message for any database errors, your final code should look like this:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctioncreateInvoice(prevState:State,formData:FormData) {// Validate form using ZodconstvalidatedFields=CreateInvoice.safeParse({customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),});// If form validation fails, return errors early. Otherwise, continue.if(!validatedFields.success) {return{errors:validatedFields.error.flatten().fieldErrors,message:'Missing Fields. Failed to Create Invoice.',};}// Prepare data for insertion into the databaseconst{customerId,amount,status}=validatedFields.data;constamountInCents=amount*100;constdate=newDate().toISOString().split('T')[0];// Insert data into the databasetry{awaitsql`INSERT INTO invoices (customer_id, amount, status, date)VALUES (${customerId},${amountInCents},${status},${date})`;}catch(error) {// If a database error occurs, return a more specific error.return{message:'Database Error: Failed to Create Invoice.',};}// Revalidate the cache for the invoices page and redirect the user.revalidatePath('/dashboard/invoices');redirect('/dashboard/invoices');}"
                },
                {
                    "type": "p",
                    "text": "Great, now let's display the errors in your form component. Back in thecreate-form.tsxcomponent, you can access the errors using the formstate."
                },
                {
                    "type": "p",
                    "text": "Add aternary operatorthat checks for each specific error. For example, after the customer's field, you can add:"
                },
                {
                    "type": "code",
                    "code": "<formaction={formAction}><divclassName=\"rounded-md bg-gray-50 p-4 md:p-6\">{/* Customer Name */}<divclassName=\"mb-4\"><labelhtmlFor=\"customer\"className=\"mb-2 block text-sm font-medium\">Choose customer</label><divclassName=\"relative\"><selectid=\"customer\"name=\"customerId\"className=\"peer block w-full rounded-md border border-gray-200 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500\"defaultValue=\"\"aria-describedby=\"customer-error\"><optionvalue=\"\"disabled>Select a customer</option>{customers.map((name)=>(<optionkey={name.id}value={name.id}>{name.name}</option>))}</select><UserCircleIconclassName=\"pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500\"/></div><divid=\"customer-error\"aria-live=\"polite\"aria-atomic=\"true\">{state.errors?.customerId&&state.errors.customerId.map((error:string)=>(<pclassName=\"mt-2 text-sm text-red-500\"key={error}>{error}</p>))}</div></div>// ...</div></form>"
                },
                {
                    "type": "p",
                    "text": "Tip:You can console.logstateinside your component and check if everything is wired correctly. Check the console in Dev Tools as your form is now a Client Component."
                },
                {
                    "type": "p",
                    "text": "In the code above, you're also adding the following aria labels:"
                },
                {
                    "type": "list",
                    "items": [
                        "aria-describedby=\"customer-error\": This establishes a relationship between theselectelement and the error message container. It indicates that the container withid=\"customer-error\"describes theselectelement. Screen readers will read this description when the user interacts with theselectbox to notify them of errors.",
                        "id=\"customer-error\": Thisidattribute uniquely identifies the HTML element that holds the error message for theselectinput. This is necessary foraria-describedbyto establish the relationship.",
                        "aria-live=\"polite\": The screen reader should politely notify the user when the error inside thedivis updated. When the content changes (e.g. when a user corrects an error), the screen reader will announce these changes, but only when the user is idle so as not to interrupt them."
                    ]
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Practice: Adding aria labels"
                },
                {
                    "type": "p",
                    "text": "Using the example above, add errors to your remaining form fields. You should also show a message at the bottom of the form if any fields are missing. Your UI should look like this:"
                },
                {
                    "type": "p",
                    "text": "Once you're ready, runpnpm lintto check if you're using the aria labels correctly."
                },
                {
                    "type": "p",
                    "text": "If you'd like to challenge yourself, take the knowledge you've learned in this chapter and add form validation to theedit-form.tsxcomponent."
                },
                {
                    "type": "p",
                    "text": "You'll need to:"
                },
                {
                    "type": "list",
                    "items": [
                        "AdduseActionStateto youredit-form.tsxcomponent.",
                        "Edit theupdateInvoiceaction to handle validation errors from Zod.",
                        "Display the errors in your component, and add aria labels to improve accessibility."
                    ]
                },
                {
                    "type": "p",
                    "text": "Once you're ready, expand the code snippet below to see the solution:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter14"
                },
                {
                    "type": "p",
                    "text": "Great, you've learned how to improve accessibility in your forms with React Form Status and Server-side Validation."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "15: Adding Authentication"
                },
                {
                    "type": "p",
                    "text": "Your application is almost ready, in the next chapter, you'll learn how to add authentication to your application using NextAuth.js."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/mutating-data",
            "title": "Learn Next.js: Mutating Data | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "12"
                },
                {
                    "type": "p",
                    "text": "Chapter12"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Mutating Data"
                },
                {
                    "type": "p",
                    "text": "In the previous chapter, you implemented search and pagination using URL Search Params and Next.js APIs. Let's continue working on the Invoices page by adding the ability to create, update, and delete invoices!"
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "What React Server Actions are and how to use them to mutate data."
                },
                {
                    "type": "p",
                    "text": "How to work with forms and Server Components."
                },
                {
                    "type": "p",
                    "text": "Best practices for working with the nativeformDataobject, including type validation."
                },
                {
                    "type": "p",
                    "text": "How to revalidate the client cache using therevalidatePathAPI."
                },
                {
                    "type": "p",
                    "text": "How to create dynamic route segments with specific IDs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What are Server Actions?"
                },
                {
                    "type": "p",
                    "text": "React Server Actions allow you to run asynchronous code directly on the server. They eliminate the need to create API endpoints to mutate your data. Instead, you write asynchronous functions that execute on the server and can be invoked from your Client or Server Components."
                },
                {
                    "type": "p",
                    "text": "Security is a top priority for web applications, as they can be vulnerable to various threats. This is where Server Actions come in. They offer an effective security solution, protecting against different types of attacks, securing your data, and ensuring authorized access. Server Actions achieve this through techniques like POST requests, encrypted closures, strict input checks, error message hashing, and host restrictions, all working together to significantly enhance your app's safety."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using forms with Server Actions"
                },
                {
                    "type": "p",
                    "text": "In React, you can use theactionattribute in the<form>element to invoke actions. The action will automatically receive the nativeFormDataobject, containing the captured data."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "// Server ComponentexportdefaultfunctionPage() {// Actionasyncfunctioncreate(formData:FormData) {'use server';// Logic to mutate data...}// Invoke the action using the \"action\" attributereturn<formaction={create}>...</form>;}"
                },
                {
                    "type": "p",
                    "text": "An advantage of invoking a Server Action within a Server Component is progressive enhancement - forms work even if JavaScript is disabled on the client."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next.js with Server Actions"
                },
                {
                    "type": "p",
                    "text": "Server Actions are also deeply integrated with Next.jscaching. When a form is submitted through a Server Action, not only can you use the action to mutate data, but you can also revalidate the associated cache using APIs likerevalidatePathandrevalidateTag."
                },
                {
                    "type": "p",
                    "text": "Let's see how it all works together!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating an invoice"
                },
                {
                    "type": "p",
                    "text": "Here are the steps you'll take to create a new invoice:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a form to capture the user's input.",
                        "Create a Server Action and invoke it from the form.",
                        "Inside your Server Action, extract the data from theformDataobject.",
                        "Validate and prepare the data to be inserted into your database.",
                        "Insert the data and handle any errors.",
                        "Revalidate the cache and redirect the user back to invoices page."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "1. Create a new route and form"
                },
                {
                    "type": "p",
                    "text": "To start, inside the/invoicesfolder, add a new route segment called/createwith apage.tsxfile:"
                },
                {
                    "type": "p",
                    "text": "You'll be using this route to create new invoices. Inside yourpage.tsxfile, paste the following code, then spend some time studying it:"
                },
                {
                    "type": "code",
                    "code": "importFormfrom'@/app/ui/invoices/create-form';importBreadcrumbsfrom'@/app/ui/invoices/breadcrumbs';import{ fetchCustomers }from'@/app/lib/data';exportdefaultasyncfunctionPage() {constcustomers=awaitfetchCustomers();return(<main><Breadcrumbsbreadcrumbs={[{ label:'Invoices',href:'/dashboard/invoices'},{label:'Create Invoice',href:'/dashboard/invoices/create',active:true,},]}/><Formcustomers={customers} /></main>);}"
                },
                {
                    "type": "p",
                    "text": "Your page is a Server Component that fetchescustomersand passes it to the<Form>component. To save time, we've already created the<Form>component for you."
                },
                {
                    "type": "p",
                    "text": "Navigate to the<Form>component, and you'll see that the form:"
                },
                {
                    "type": "list",
                    "items": [
                        "Has one<select>(dropdown) element with a list ofcustomers.",
                        "Has one<input>element for theamountwithtype=\"number\".",
                        "Has two<input>elements for the status withtype=\"radio\".",
                        "Has one button withtype=\"submit\"."
                    ]
                },
                {
                    "type": "p",
                    "text": "Onhttp://localhost:3000/dashboard/invoices/create, you should see the following UI:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "2. Create a Server Action"
                },
                {
                    "type": "p",
                    "text": "Great, now let's create a Server Action that is going to be called when the form is submitted."
                },
                {
                    "type": "p",
                    "text": "Navigate to yourlibdirectory and create a new file namedactions.ts. At the top of this file, add the Reactuse serverdirective:"
                },
                {
                    "type": "code",
                    "code": "'use server';"
                },
                {
                    "type": "p",
                    "text": "By adding the'use server', you mark all the exported functions within the file as Server Actions. These server functions can then be imported and used in Client and Server components."
                },
                {
                    "type": "p",
                    "text": "You can also write Server Actions directly inside Server Components by adding\"use server\"inside the action. But for this course, we'll keep them all organized in a separate file."
                },
                {
                    "type": "p",
                    "text": "In youractions.tsfile, create a new async function that acceptsformData:"
                },
                {
                    "type": "code",
                    "code": "'use server';exportasyncfunctioncreateInvoice(formData:FormData) {}"
                },
                {
                    "type": "p",
                    "text": "Then, in your<Form>component, import thecreateInvoicefrom youractions.tsfile. Add aactionattribute to the<form>element, and call thecreateInvoiceaction."
                },
                {
                    "type": "code",
                    "code": "import{ customerField }from'@/app/lib/definitions';importLinkfrom'next/link';import{CheckIcon,ClockIcon,CurrencyDollarIcon,UserCircleIcon,}from'@heroicons/react/24/outline';import{ Button }from'@/app/ui/button';import{ createInvoice }from'@/app/lib/actions';exportdefaultfunctionForm({customers,}:{customers:customerField[];}) {return(<formaction={createInvoice}>// ...)}"
                },
                {
                    "type": "p",
                    "text": "Good to know:\nIn HTML, you'd pass a URL to theactionattribute. This URL would be the destination where your form data should be submitted (usually an API endpoint)."
                },
                {
                    "type": "p",
                    "text": "However, in React, theactionattribute is considered a special prop - meaning React builds on top of it to allow actions to be invoked."
                },
                {
                    "type": "p",
                    "text": "Behind the scenes, Server Actions create aPOSTAPI endpoint. This is why you don't need to create API endpoints manually when using Server Actions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "3. Extract the data fromformData"
                },
                {
                    "type": "p",
                    "text": "Back in youractions.tsfile, you'll need to extract the values offormData, there are acouple of methodsyou can use. For this example, let's use the.get(name)method."
                },
                {
                    "type": "code",
                    "code": "'use server';exportasyncfunctioncreateInvoice(formData:FormData) {constrawFormData={customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),};// Test it out:console.log(rawFormData);}"
                },
                {
                    "type": "p",
                    "text": "Tip:If you're working with forms that have many fields, you may want to consider using theentries()method with JavaScript'sObject.fromEntries(). For example:"
                },
                {
                    "type": "p",
                    "text": "const rawFormData = Object.fromEntries(formData.entries())"
                },
                {
                    "type": "p",
                    "text": "To check everything is connected correctly, go ahead and try out the form. After submitting, you should see the data you just entered into the form logged in your terminal."
                },
                {
                    "type": "p",
                    "text": "Now that your data is in the shape of an object, it'll be much easier to work with."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "4. Validate and prepare the data"
                },
                {
                    "type": "p",
                    "text": "Before sending the form data to your database, you want to ensure it's in the correct format and with the correct types. If you remember from earlier in the course, your invoices table expects data in the following format:"
                },
                {
                    "type": "code",
                    "code": "exporttypeInvoice={id:string;// Will be created on the databasecustomer_id:string;amount:number;// Stored in centsstatus:'pending'|'paid';date:string;};"
                },
                {
                    "type": "p",
                    "text": "So far, you only have thecustomer_id,amount, andstatusfrom the form."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Type validation and coercion"
                },
                {
                    "type": "p",
                    "text": "It's important to validate that the data from your form aligns with the expected types in your database. For instance, if you add aconsole.loginside your action:"
                },
                {
                    "type": "code",
                    "code": "console.log(typeofrawFormData.amount);"
                },
                {
                    "type": "p",
                    "text": "You'll notice thatamountis of typestringand notnumber. This is becauseinputelements withtype=\"number\"actually return a string, not a number!"
                },
                {
                    "type": "p",
                    "text": "To handle type validation, you have a few options. While you can manually validate types, using a type validation library can save you time and effort. For your example, we'll useZod, a TypeScript-first validation library that can simplify this task for you."
                },
                {
                    "type": "p",
                    "text": "In youractions.tsfile, import Zod and define a schema that matches the shape of your form object. This schema will validate theformDatabefore saving it to a database."
                },
                {
                    "type": "code",
                    "code": "'use server';import{ z }from'zod';constFormSchema=z.object({id:z.string(),customerId:z.string(),amount:z.coerce.number(),status:z.enum(['pending','paid']),date:z.string(),});constCreateInvoice=FormSchema.omit({ id:true,date:true});exportasyncfunctioncreateInvoice(formData:FormData) {// ...}"
                },
                {
                    "type": "p",
                    "text": "Theamountfield is specifically set to coerce (change) from a string to a number while also validating its type."
                },
                {
                    "type": "p",
                    "text": "You can then pass yourrawFormDatatoCreateInvoiceto validate the types:"
                },
                {
                    "type": "code",
                    "code": "// ...exportasyncfunctioncreateInvoice(formData:FormData) {const{customerId,amount,status}=CreateInvoice.parse({customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),});}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Storing values in cents"
                },
                {
                    "type": "p",
                    "text": "It's usually good practice to store monetary values in cents in your database to eliminate JavaScript floating-point errors and ensure greater accuracy."
                },
                {
                    "type": "p",
                    "text": "Let's convert the amount into cents:"
                },
                {
                    "type": "code",
                    "code": "// ...exportasyncfunctioncreateInvoice(formData:FormData) {const{customerId,amount,status}=CreateInvoice.parse({customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),});constamountInCents=amount*100;}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Creating new dates"
                },
                {
                    "type": "p",
                    "text": "Finally, let's create a new date with the format \"YYYY-MM-DD\" for the invoice's creation date:"
                },
                {
                    "type": "code",
                    "code": "// ...exportasyncfunctioncreateInvoice(formData:FormData) {const{customerId,amount,status}=CreateInvoice.parse({customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),});constamountInCents=amount*100;constdate=newDate().toISOString().split('T')[0];}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "5. Inserting the data into your database"
                },
                {
                    "type": "p",
                    "text": "Now that you have all the values you need for your database, you can create an SQL query to insert the new invoice into your database and pass in the variables:"
                },
                {
                    "type": "code",
                    "code": "import{ z }from'zod';import{ sql }from'@vercel/postgres';// ...exportasyncfunctioncreateInvoice(formData:FormData) {const{customerId,amount,status}=CreateInvoice.parse({customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),});constamountInCents=amount*100;constdate=newDate().toISOString().split('T')[0];awaitsql`INSERT INTO invoices (customer_id, amount, status, date)VALUES (${customerId},${amountInCents},${status},${date})`;}"
                },
                {
                    "type": "p",
                    "text": "Right now, we're not handling any errors. We'll do it in the next chapter. For now, let's move on to the next step."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "6. Revalidate and redirect"
                },
                {
                    "type": "p",
                    "text": "Next.js has aClient-side Router Cachethat stores the route segments in the user's browser for a time. Along withprefetching, this cache ensures that users can quickly navigate between routes while reducing the number of requests made to the server."
                },
                {
                    "type": "p",
                    "text": "Since you're updating the data displayed in the invoices route, you want to clear this cache and trigger a new request to the server. You can do this with therevalidatePathfunction from Next.js:"
                },
                {
                    "type": "code",
                    "code": "'use server';import{ z }from'zod';import{ sql }from'@vercel/postgres';import{ revalidatePath }from'next/cache';// ...exportasyncfunctioncreateInvoice(formData:FormData) {const{customerId,amount,status}=CreateInvoice.parse({customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),});constamountInCents=amount*100;constdate=newDate().toISOString().split('T')[0];awaitsql`INSERT INTO invoices (customer_id, amount, status, date)VALUES (${customerId},${amountInCents},${status},${date})`;revalidatePath('/dashboard/invoices');}"
                },
                {
                    "type": "p",
                    "text": "Once the database has been updated, the/dashboard/invoicespath will be revalidated, and fresh data will be fetched from the server."
                },
                {
                    "type": "p",
                    "text": "At this point, you also want to redirect the user back to the/dashboard/invoicespage. You can do this with theredirectfunction from Next.js:"
                },
                {
                    "type": "code",
                    "code": "'use server';import{ z }from'zod';import{ sql }from'@vercel/postgres';import{ revalidatePath }from'next/cache';import{ redirect }from'next/navigation';// ...exportasyncfunctioncreateInvoice(formData:FormData) {// ...revalidatePath('/dashboard/invoices');redirect('/dashboard/invoices');}"
                },
                {
                    "type": "p",
                    "text": "Congratulations! You've just implemented your first Server Action. Test it out by adding a new invoice, if everything is working correctly:"
                },
                {
                    "type": "list",
                    "items": [
                        "You should be redirected to the/dashboard/invoicesroute on submission.",
                        "You should see the new invoice at the top of the table."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Updating an invoice"
                },
                {
                    "type": "p",
                    "text": "The updating invoice form is similar to the create an invoice form, except you'll need to pass the invoiceidto update the record in your database. Let's see how you can get and pass the invoiceid."
                },
                {
                    "type": "p",
                    "text": "These are the steps you'll take to update an invoice:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a new dynamic route segment with the invoiceid.",
                        "Read the invoiceidfrom the page params.",
                        "Fetch the specific invoice from your database.",
                        "Pre-populate the form with the invoice data.",
                        "Update the invoice data in your database."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "1. Create a Dynamic Route Segment with the invoiceid"
                },
                {
                    "type": "p",
                    "text": "Next.js allows you to createDynamic Route Segmentswhen you don't know the exact segment name and want to create routes based on data. This could be blog post titles, product pages, etc. You can create dynamic route segments by wrapping a folder's name in square brackets. For example,[id],[post]or[slug]."
                },
                {
                    "type": "p",
                    "text": "In your/invoicesfolder, create a new dynamic route called[id], then a new route callededitwith apage.tsxfile. Your file structure should look like this:"
                },
                {
                    "type": "p",
                    "text": "In your<Table>component, notice there's a<UpdateInvoice />button that receives the invoice'sidfrom the table records."
                },
                {
                    "type": "code",
                    "code": "exportdefaultasyncfunctionInvoicesTable({query,currentPage,}:{query:string;currentPage:number;}) {return(// ...<tdclassName=\"flex justify-end gap-2 whitespace-nowrap px-6 py-4 text-sm\"><UpdateInvoiceid={invoice.id} /><DeleteInvoiceid={invoice.id} /></td>// ...);}"
                },
                {
                    "type": "p",
                    "text": "Navigate to your<UpdateInvoice />component, and update thehrefof theLinkto accept theidprop. You can use template literals to link to a dynamic route segment:"
                },
                {
                    "type": "code",
                    "code": "import{ PencilIcon,PlusIcon,TrashIcon }from'@heroicons/react/24/outline';importLinkfrom'next/link';// ...exportfunctionUpdateInvoice({ id }:{ id:string}) {return(<Linkhref={`/dashboard/invoices/${id}/edit`}className=\"rounded-md border p-2 hover:bg-gray-100\"><PencilIconclassName=\"w-5\"/></Link>);}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "2. Read the invoiceidfrom pageparams"
                },
                {
                    "type": "p",
                    "text": "Back on your<Page>component, paste the following code:"
                },
                {
                    "type": "code",
                    "code": "importFormfrom'@/app/ui/invoices/edit-form';importBreadcrumbsfrom'@/app/ui/invoices/breadcrumbs';import{ fetchCustomers }from'@/app/lib/data';exportdefaultasyncfunctionPage() {return(<main><Breadcrumbsbreadcrumbs={[{ label:'Invoices',href:'/dashboard/invoices'},{label:'Edit Invoice',href:`/dashboard/invoices/${id}/edit`,active:true,},]}/><Forminvoice={invoice}customers={customers} /></main>);}"
                },
                {
                    "type": "p",
                    "text": "Notice how it's similar to your/createinvoice page, except it imports a different form (from theedit-form.tsxfile). This form should bepre-populatedwith adefaultValuefor the customer's name, invoice amount, and status. To pre-populate the form fields, you need to fetch the specific invoice usingid."
                },
                {
                    "type": "p",
                    "text": "In addition tosearchParams, page components also accept a prop calledparamswhich you can use to access theid. Update your<Page>component to receive the prop:"
                },
                {
                    "type": "code",
                    "code": "importFormfrom'@/app/ui/invoices/edit-form';importBreadcrumbsfrom'@/app/ui/invoices/breadcrumbs';import{ fetchCustomers }from'@/app/lib/data';exportdefaultasyncfunctionPage({ params }:{ params:{ id:string} }) {constid=params.id;// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "3. Fetch the specific invoice"
                },
                {
                    "type": "p",
                    "text": "Then:"
                },
                {
                    "type": "list",
                    "items": [
                        "Import a new function calledfetchInvoiceByIdand pass theidas an argument.",
                        "ImportfetchCustomersto fetch the customer names for the dropdown."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can usePromise.allto fetch both the invoice and customers in parallel:"
                },
                {
                    "type": "code",
                    "code": "importFormfrom'@/app/ui/invoices/edit-form';importBreadcrumbsfrom'@/app/ui/invoices/breadcrumbs';import{ fetchInvoiceById,fetchCustomers }from'@/app/lib/data';exportdefaultasyncfunctionPage({ params }:{ params:{ id:string} }) {constid=params.id;const[invoice,customers]=awaitPromise.all([fetchInvoiceById(id),fetchCustomers(),]);// ...}"
                },
                {
                    "type": "p",
                    "text": "You will see a temporary TS error for theinvoiceprop in your terminal becauseinvoicecould be potentiallyundefined. Don't worry about it for now, you'll resolve it in the next chapter when you add error handling."
                },
                {
                    "type": "p",
                    "text": "Great! Now, test that everything is wired correctly. Visithttp://localhost:3000/dashboard/invoicesand click on the Pencil icon to edit an invoice. After navigation, you should see a form that is pre-populated with the invoice details:"
                },
                {
                    "type": "p",
                    "text": "The URL should also be updated with anidas follows:http://localhost:3000/dashboard/invoice/uuid/edit"
                },
                {
                    "type": "p",
                    "text": "UUIDs vs. Auto-incrementing Keys"
                },
                {
                    "type": "p",
                    "text": "We use UUIDs instead of incrementing keys (e.g., 1, 2, 3, etc.). This makes the URL longer; however, UUIDs eliminate the risk of ID collision, are globally unique, and reduce the risk of enumeration attacks - making them ideal for large databases."
                },
                {
                    "type": "p",
                    "text": "However, if you prefer cleaner URLs, you might prefer to use auto-incrementing keys."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "4. Pass theidto the Server Action"
                },
                {
                    "type": "p",
                    "text": "Lastly, you want to pass theidto the Server Action so you can update the right record in your database. Youcannotpass theidas an argument like so:"
                },
                {
                    "type": "code",
                    "code": "// Passing an id as argument won't work<formaction={updateInvoice(id)}>"
                },
                {
                    "type": "p",
                    "text": "Instead, you can passidto the Server Action using JSbind. This will ensure that any values passed to the Server Action are encoded."
                },
                {
                    "type": "code",
                    "code": "// ...import{ updateInvoice }from'@/app/lib/actions';exportdefaultfunctionEditInvoiceForm({invoice,customers,}:{invoice:InvoiceForm;customers:CustomerField[];}) {constupdateInvoiceWithId=updateInvoice.bind(null,invoice.id);return(<formaction={updateInvoiceWithId}><inputtype=\"hidden\"name=\"id\"value={invoice.id} /></form>);}"
                },
                {
                    "type": "p",
                    "text": "Note:Using a hidden input field in your form also works (e.g.<input type=\"hidden\" name=\"id\" value={invoice.id} />). However, the values will appear as full text in the HTML source, which is not ideal for sensitive data like IDs."
                },
                {
                    "type": "p",
                    "text": "Then, in youractions.tsfile, create a new action,updateInvoice:"
                },
                {
                    "type": "code",
                    "code": "// Use Zod to update the expected typesconstUpdateInvoice=FormSchema.omit({ id:true,date:true});// ...exportasyncfunctionupdateInvoice(id:string,formData:FormData) {const{customerId,amount,status}=UpdateInvoice.parse({customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),});constamountInCents=amount*100;awaitsql`UPDATE invoicesSET customer_id =${customerId}, amount =${amountInCents}, status =${status}WHERE id =${id}`;revalidatePath('/dashboard/invoices');redirect('/dashboard/invoices');}"
                },
                {
                    "type": "p",
                    "text": "Similarly to thecreateInvoiceaction, here you are:"
                },
                {
                    "type": "list",
                    "items": [
                        "Extracting the data fromformData.",
                        "Validating the types with Zod.",
                        "Converting the amount to cents.",
                        "Passing the variables to your SQL query.",
                        "CallingrevalidatePathto clear the client cache and make a new server request.",
                        "Callingredirectto redirect the user to the invoice's page."
                    ]
                },
                {
                    "type": "p",
                    "text": "Test it out by editing an invoice. After submitting the form, you should be redirected to the invoices page, and the invoice should be updated."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deleting an invoice"
                },
                {
                    "type": "p",
                    "text": "To delete an invoice using a Server Action, wrap the delete button in a<form>element and pass theidto the Server Action usingbind:"
                },
                {
                    "type": "code",
                    "code": "import{ deleteInvoice }from'@/app/lib/actions';// ...exportfunctionDeleteInvoice({ id }:{ id:string}) {constdeleteInvoiceWithId=deleteInvoice.bind(null,id);return(<formaction={deleteInvoiceWithId}><buttontype=\"submit\"className=\"rounded-md border p-2 hover:bg-gray-100\"><spanclassName=\"sr-only\">Delete</span><TrashIconclassName=\"w-4\"/></button></form>);}"
                },
                {
                    "type": "p",
                    "text": "Inside youractions.tsfile, create a new action calleddeleteInvoice."
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiondeleteInvoice(id:string) {awaitsql`DELETE FROM invoices WHERE id =${id}`;revalidatePath('/dashboard/invoices');}"
                },
                {
                    "type": "p",
                    "text": "Since this action is being called in the/dashboard/invoicespath, you don't need to callredirect. CallingrevalidatePathwill trigger a new server request and re-render the table."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Further reading"
                },
                {
                    "type": "p",
                    "text": "In this chapter, you learned how to use Server Actions to mutate data. You also learned how to use therevalidatePathAPI to revalidate the Next.js cache andredirectto redirect the user to a new page."
                },
                {
                    "type": "p",
                    "text": "You can also read more aboutsecurity with Server Actionsfor additional learning."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter12"
                },
                {
                    "type": "p",
                    "text": "Congratulations! You learned how to mutate data using forms and React Server Actions."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "13: Handling Errors"
                },
                {
                    "type": "p",
                    "text": "Let's explore best practices for mutating data with forms, including error handling and accessibility."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/next-steps",
            "title": "Learn Next.js: Next Steps | Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Next Steps"
                },
                {
                    "type": "p",
                    "text": "Congratulations! You've completed the Next.js dashboard course where you learned about the main features of Next.js and best practices for building web applications."
                },
                {
                    "type": "p",
                    "text": "But this is just the beginning—Next.js has many other features. It's designed to help you build small side projects, your next startup idea, or even large-scale applications with your team."
                },
                {
                    "type": "p",
                    "text": "Here are some resources to continue exploring Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Documentation",
                        "Next.js Templates:Admin Dashboard TemplateNext.js CommerceBlog Starter KitAI ChatbotImage Gallery Starter",
                        "Admin Dashboard Template",
                        "Next.js Commerce",
                        "Blog Starter Kit",
                        "AI Chatbot",
                        "Image Gallery Starter",
                        "Next.js Repository",
                        "Vercel YouTube"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Admin Dashboard Template",
                        "Next.js Commerce",
                        "Blog Starter Kit",
                        "AI Chatbot",
                        "Image Gallery Starter"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Share your Next.js app"
                },
                {
                    "type": "p",
                    "text": "We encourage you to share the app you built in this tutorial on X. If you do, please mention our team at@nextjsso that we can take a look! We'd love to get your feedback on this course as well."
                },
                {
                    "type": "p",
                    "text": "We hope you enjoyed this course, and we encourage you to continue learning - by building."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You‘ve Completed the Course!"
                },
                {
                    "type": "p",
                    "text": "Now that you've completed the final chapter, you're ready for the next steps."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/optimizing-fonts-images",
            "title": "Learn Next.js: Optimizing Fonts and Images | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "3"
                },
                {
                    "type": "p",
                    "text": "Chapter3"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Optimizing Fonts and Images"
                },
                {
                    "type": "p",
                    "text": "In the previous chapter, you learned how to style your Next.js application. Let's continue working on your home page by adding a custom font and a hero image."
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "How to add custom fonts withnext/font."
                },
                {
                    "type": "p",
                    "text": "How to add images withnext/image."
                },
                {
                    "type": "p",
                    "text": "How fonts and images are optimized in Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why optimize fonts?"
                },
                {
                    "type": "p",
                    "text": "Fonts play a significant role in the design of a website, but using custom fonts in your project can affect performance if the font files need to be fetched and loaded."
                },
                {
                    "type": "p",
                    "text": "Cumulative Layout Shiftis a metric used by Google to evaluate the performance and user experience of a website. With fonts, layout shift happens when the browser initially renders text in a fallback or system font and then swaps it out for a custom font once it has loaded. This swap can cause the text size, spacing, or layout to change, shifting elements around it."
                },
                {
                    "type": "p",
                    "text": "Next.js automatically optimizes fonts in the application when you use thenext/fontmodule. It downloads font files at build time and hosts them with your other static assets. This means when a user visits your application, there are no additional network requests for fonts which would impact performance."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Adding a primary font"
                },
                {
                    "type": "p",
                    "text": "Let's add a custom Google font to your application to see how this works!"
                },
                {
                    "type": "p",
                    "text": "In your/app/uifolder, create a new file calledfonts.ts. You'll use this file to keep the fonts that will be used throughout your application."
                },
                {
                    "type": "p",
                    "text": "Import theInterfont from thenext/font/googlemodule - this will be your primary font. Then, specify whatsubsetyou'd like to load. In this case,'latin':"
                },
                {
                    "type": "code",
                    "code": "import{ Inter }from'next/font/google';exportconstinter=Inter({ subsets:['latin'] });"
                },
                {
                    "type": "p",
                    "text": "Finally, add the font to the<body>element in/app/layout.tsx:"
                },
                {
                    "type": "code",
                    "code": "import'@/app/ui/global.css';import{ inter }from'@/app/ui/fonts';exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode;}) {return(<htmllang=\"en\"><bodyclassName={`${inter.className}antialiased`}>{children}</body></html>);}"
                },
                {
                    "type": "p",
                    "text": "By addingInterto the<body>element, the font will be applied throughout your application. Here, you're also adding the Tailwindantialiasedclass which smooths out the font. It's not necessary to use this class, but it adds a nice touch."
                },
                {
                    "type": "p",
                    "text": "Navigate to your browser, open dev tools and select thebodyelement. You should seeInterandInter_Fallbackare now applied under styles."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Practice: Adding a secondary font"
                },
                {
                    "type": "p",
                    "text": "You can also add fonts to specific elements of your application."
                },
                {
                    "type": "p",
                    "text": "Now it's your turn! In yourfonts.tsfile, import a secondary font calledLusitanaand pass it to the<p>element in your/app/page.tsxfile. In addition to specifying a subset like you did before, you'll also need to specify the fontweight."
                },
                {
                    "type": "p",
                    "text": "Once you're ready, expand the code snippet below to see the solution."
                },
                {
                    "type": "p",
                    "text": "Hints:"
                },
                {
                    "type": "list",
                    "items": [
                        "If you're unsure what weight options to pass to a font, check the TypeScript errors in your code editor.",
                        "Visit theGoogle Fontswebsite and search forLusitanato see what options are available.",
                        "See the documentation foradding multiple fontsand thefull list of options."
                    ]
                },
                {
                    "type": "p",
                    "text": "Finally, the<AcmeLogo />component also uses Lusitana. It was commented out to prevent errors, you can now uncomment it:"
                },
                {
                    "type": "code",
                    "code": "// ...exportdefaultfunctionPage() {return(<mainclassName=\"flex min-h-screen flex-col p-6\"><divclassName=\"flex h-20 shrink-0 items-end rounded-lg bg-blue-500 p-4 md:h-52\"><AcmeLogo/>{/* ... */}</div></main>);}"
                },
                {
                    "type": "p",
                    "text": "Great, you've added two custom fonts to your application! Next, let's add a hero image to the home page."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why optimize images?"
                },
                {
                    "type": "p",
                    "text": "Next.js can servestatic assets, like images, under the top-level/publicfolder. Files inside/publiccan be referenced in your application."
                },
                {
                    "type": "p",
                    "text": "With regular HTML, you would add an image as follows:"
                },
                {
                    "type": "code",
                    "code": "<imgsrc=\"/hero.png\"alt=\"Screenshots of the dashboard project showing desktop version\"/>"
                },
                {
                    "type": "p",
                    "text": "However, this means you have to manually:"
                },
                {
                    "type": "list",
                    "items": [
                        "Ensure your image is responsive on different screen sizes.",
                        "Specify image sizes for different devices.",
                        "Prevent layout shift as the images load.",
                        "Lazy load images that are outside the user's viewport."
                    ]
                },
                {
                    "type": "p",
                    "text": "Image Optimization is a large topic in web development that could be considered a specialization in itself. Instead of manually implementing these optimizations, you can use thenext/imagecomponent to automatically optimize your images."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "The<Image>component"
                },
                {
                    "type": "p",
                    "text": "The<Image>Component is an extension of the HTML<img>tag, and comes with automatic image optimization, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "Preventing layout shift automatically when images are loading.",
                        "Resizing images to avoid shipping large images to devices with a smaller viewport.",
                        "Lazy loading images by default (images load as they enter the viewport).",
                        "Serving images in modern formats, likeWebPandAVIF, when the browser supports it."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Adding the desktop hero image"
                },
                {
                    "type": "p",
                    "text": "Let's use the<Image>component. If you look inside the/publicfolder, you'll see there are two images:hero-desktop.pngandhero-mobile.png. These two images are completely different, and they'll be shown depending if the user's device is a desktop or mobile."
                },
                {
                    "type": "p",
                    "text": "In your/app/page.tsxfile, import the component fromnext/image. Then, add the image under the comment:"
                },
                {
                    "type": "code",
                    "code": "importAcmeLogofrom'@/app/ui/acme-logo';import{ ArrowRightIcon }from'@heroicons/react/24/outline';importLinkfrom'next/link';import{ lusitana }from'@/app/ui/fonts';importImagefrom'next/image';exportdefaultfunctionPage() {return(// ...<divclassName=\"flex items-center justify-center p-6 md:w-3/5 md:px-28 md:py-12\">{/* Add Hero Images Here */}<Imagesrc=\"/hero-desktop.png\"width={1000}height={760}className=\"hidden md:block\"alt=\"Screenshots of the dashboard project showing desktop version\"/></div>//...);}"
                },
                {
                    "type": "p",
                    "text": "Here, you're setting thewidthto1000andheightto760pixels. It's good practice to set thewidthandheightof your images to avoid layout shift, these should be an aspect ratioidenticalto the source image."
                },
                {
                    "type": "p",
                    "text": "You'll also notice the classhiddento remove the image from the DOM on mobile screens, andmd:blockto show the image on desktop screens."
                },
                {
                    "type": "p",
                    "text": "This is what your home page should look like now:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Practice: Adding the mobile hero image"
                },
                {
                    "type": "p",
                    "text": "Now it's your turn! Under the image you've just added, add another<Image>component forhero-mobile.png."
                },
                {
                    "type": "list",
                    "items": [
                        "The image should have awidthof560andheightof620pixels.",
                        "It should be shown on mobile screens, and hidden on desktop - you can use dev tools to check if the desktop and mobile images are swapped correctly."
                    ]
                },
                {
                    "type": "p",
                    "text": "Once you're ready, expand the code snippet below to see the solution."
                },
                {
                    "type": "p",
                    "text": "Great! Your home page now has a custom font and hero images."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Recommended reading"
                },
                {
                    "type": "p",
                    "text": "There's a lot more to learn about these topics, including optimizing remote images and using local font files. If you'd like to dive deeper into fonts and images, see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Image Optimization Docs",
                        "Font Optimization Docs",
                        "Improving Web Performance with Images (MDN)",
                        "Web Fonts (MDN)",
                        "How Core Web Vitals Affect SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter3"
                },
                {
                    "type": "p",
                    "text": "You've learned how to optimize fonts and images using Next.js."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "4: Creating Layouts and Pages"
                },
                {
                    "type": "p",
                    "text": "Let's create your dashboard routes using nested layouts and pages!"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/partial-prerendering",
            "title": "Learn Next.js: Partial Prerendering | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "10"
                },
                {
                    "type": "p",
                    "text": "Chapter10"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Partial Prerendering"
                },
                {
                    "type": "p",
                    "text": "So far, you've learned about static and dynamic rendering, and how to stream dynamic content that depends on data. In this chapter, let's learn how to combine static rendering, dynamic rendering, and streaming in the same route withPartial Prerendering (PPR)."
                },
                {
                    "type": "p",
                    "text": "Partial Prerendering is an experimental feature introduced in Next.js 14. The content of this page may be updated as the feature progresses in stability."
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "What Partial Prerendering is."
                },
                {
                    "type": "p",
                    "text": "How Partial Prerendering works."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Static vs. Dynamic Routes"
                },
                {
                    "type": "p",
                    "text": "For most web apps built today, you either choose between static and dynamic rendering for yourentire application, or for aspecific route. And in Next.js, if you call adynamic functionin a route (like querying your database), theentireroute becomes dynamic."
                },
                {
                    "type": "p",
                    "text": "However, most routes arenotfully static or dynamic. For example, consider anecommerce site. You might want to statically render the majority of the product information page, but you may want to fetch the user's cart and recommended products dynamically, this allows you show personalized content to your users."
                },
                {
                    "type": "p",
                    "text": "Going back to your dashboard page, what components would you consider static vs. dynamic?"
                },
                {
                    "type": "p",
                    "text": "Once you're ready, click the button below to see how we would split the dashboard route:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Partial Prerendering?"
                },
                {
                    "type": "p",
                    "text": "Next.js 14 introduced an experimental version ofPartial Prerendering– a new rendering model that allows you to combine the benefits of static and dynamic rendering in the same route. For example:"
                },
                {
                    "type": "p",
                    "text": "When a user visits a route:"
                },
                {
                    "type": "list",
                    "items": [
                        "A static route shell that includes the navbar and product information is served, ensuring a fast initial load.",
                        "The shell leaves holes where dynamic content like the cart and recommended products will load in asynchronously.",
                        "The async holes are streamed in parallel, reducing the overall load time of the page."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How does Partial Prerendering work?"
                },
                {
                    "type": "p",
                    "text": "Partial Prerendering uses React'sSuspense(which you learned about in the previous chapter) to defer rendering parts of your application until some condition is met (e.g. data is loaded)."
                },
                {
                    "type": "p",
                    "text": "The Suspense fallback is embedded into the initial HTML file along with the static content. At build time (or during revalidation), the static content isprerenderedto create a static shell. The rendering of dynamic content ispostponeduntil the user requests the route."
                },
                {
                    "type": "p",
                    "text": "Wrapping a component in Suspense doesn't make the component itself dynamic, but rather Suspense is used as a boundary between your static and dynamic code."
                },
                {
                    "type": "p",
                    "text": "Let's see how you can implement PPR in your dashboard route."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Implementing Partial Prerendering"
                },
                {
                    "type": "p",
                    "text": "Enable PPR for your Next.js app by adding thepproption to yournext.config.mjsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{ppr:'incremental',},};exportdefaultnextConfig;"
                },
                {
                    "type": "p",
                    "text": "The'incremental'value allows you to adopt PPR for specific routes."
                },
                {
                    "type": "p",
                    "text": "Next, add theexperimental_pprsegment config option to your dashboard layout:"
                },
                {
                    "type": "code",
                    "code": "importSideNavfrom'@/app/ui/dashboard/sidenav';exportconstexperimental_ppr=true;// ..."
                },
                {
                    "type": "p",
                    "text": "That's it. You may not see a difference in your application in development, but you should notice a performance improvement in production. Next.js will prerender the static parts of your route and defer the dynamic parts until the user requests them."
                },
                {
                    "type": "p",
                    "text": "The great thing about Partial Prerendering is that you don't need to change your code to use it. As long as you're using Suspense to wrap the dynamic parts of your route, Next.js will know which parts of your route are static and which are dynamic."
                },
                {
                    "type": "p",
                    "text": "We believe PPR has the potential tobecome the default rendering model for web applications, bringing together the best of static site and dynamic rendering. However, it is still experimental. We hope to stabilize it in the future and make it the default way of building with Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Summary"
                },
                {
                    "type": "p",
                    "text": "To recap, you've done a few things to optimize data fetching in your application:"
                },
                {
                    "type": "list",
                    "items": [
                        "Created a database in the same region as your application code to reduce latency between your server and database.",
                        "Fetched data on the server with React Server Components. This allows you to keep expensive data fetches and logic on the server, reduces the client-side JavaScript bundle, and prevents your database secrets from being exposed to the client.",
                        "Used SQL to only fetch the data you needed, reducing the amount of data transferred for each request and the amount of JavaScript needed to transform the data in-memory.",
                        "Parallelize data fetching with JavaScript - where it made sense to do so.",
                        "Implemented Streaming to prevent slow data requests from blocking your whole page, and to allow the user to start interacting with the UI without waiting for everything to load.",
                        "Move data fetching down to the components that need it, thus isolating which parts of your routes should be dynamic."
                    ]
                },
                {
                    "type": "p",
                    "text": "In the next chapter, we'll look at two common patterns you might need to implement when fetching data: search and pagination."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter10"
                },
                {
                    "type": "p",
                    "text": "You've learned about Partial Prerendering, a new rendering model introduced in Next.js 14."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "11: Adding Search and Pagination"
                },
                {
                    "type": "p",
                    "text": "Learn how to implement search and pagination with Next.js APIs."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/setting-up-your-database",
            "title": "Learn Next.js: Setting Up Your Database | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "6"
                },
                {
                    "type": "p",
                    "text": "Chapter6"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Setting Up Your Database"
                },
                {
                    "type": "p",
                    "text": "Before you can continue working on your dashboard, you'll need some data. In this chapter, you'll be setting up a PostgreSQL database using@vercel/postgres. If you're already familiar with PostgreSQL and would prefer to use your own provider, you can skip this chapter and set it up on your own. Otherwise, let's continue!"
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "Push your project to GitHub."
                },
                {
                    "type": "p",
                    "text": "Set up a Vercel account and link your GitHub repo for instant previews and deployments."
                },
                {
                    "type": "p",
                    "text": "Create and link your project to a Postgres database."
                },
                {
                    "type": "p",
                    "text": "Seed the database with initial data."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create a GitHub repository"
                },
                {
                    "type": "p",
                    "text": "To start, let's push your repository to Github if you haven't done so already. This will make it easier to set up your database and deploy."
                },
                {
                    "type": "p",
                    "text": "If you need help setting up your repository, take a look atthis guide on GitHub."
                },
                {
                    "type": "p",
                    "text": "Good to know:"
                },
                {
                    "type": "list",
                    "items": [
                        "You can also use other Git provider like GitLab or Bitbucket.",
                        "If you're new to GitHub, we recommend theGitHub Desktop Appfor a simplified development workflow."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create a Vercel account"
                },
                {
                    "type": "p",
                    "text": "Visitvercel.com/signupto create an account. Choose the free \"hobby\" plan. SelectContinue with GitHubto connect your GitHub and Vercel accounts."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Connect and deploy your project"
                },
                {
                    "type": "p",
                    "text": "Next, you'll be taken to this screen where you can select andimportthe GitHub repository you've just created:"
                },
                {
                    "type": "p",
                    "text": "Name your project and clickDeploy."
                },
                {
                    "type": "p",
                    "text": "Hooray! 🎉\nYour project is now deployed."
                },
                {
                    "type": "p",
                    "text": "By connecting your GitHub repository, whenever you push changes to yourmainbranch, Vercel will automatically redeploy your application with no configuration needed. When opening pull requests, you'll also haveinstant previewswhich allow you to catch deployment errors early and share a preview of your project with team members for feedback."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create a Postgres database"
                },
                {
                    "type": "p",
                    "text": "Next, to set up a database, clickContinue to Dashboardand select theStoragetab from your project dashboard. SelectConnect Store→Create New→Postgres→Continue."
                },
                {
                    "type": "p",
                    "text": "Accept the terms, assign a name to your database, and ensure your database region is set toWashington D.C (iad1)- this is also thedefault regionfor all new Vercel projects. By placing your database in the same region or close to your application code, you can reducelatencyfor data requests."
                },
                {
                    "type": "p",
                    "text": "Good to know: You cannot change the database region once it has been initalized. If you wish to use a differentregion, you should set it before creating a database."
                },
                {
                    "type": "p",
                    "text": "Once connected, navigate to the.env.localtab, clickShow secretandCopy Snippet. Make sure you reveal the secrets before copying them."
                },
                {
                    "type": "p",
                    "text": "Navigate to your code editor and rename the.env.examplefile to.env. Paste in the copied contents from Vercel."
                },
                {
                    "type": "p",
                    "text": "Important:Go to your.gitignorefile and make sure.envis in the ignored files to prevent your database secrets from being exposed when you push to GitHub."
                },
                {
                    "type": "p",
                    "text": "Finally, runpnpm i @vercel/postgresin your terminal to install theVercel Postgres SDK."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Seed your database"
                },
                {
                    "type": "p",
                    "text": "Now that your database has been created, let's seed it with some initial data."
                },
                {
                    "type": "p",
                    "text": "Inside of/app, there's a folder calledseed. Uncomment this file. This folder contains aNext.js Route Handler, calledroute.ts, that will be used to seed your database. This creates a server-side endpoint that you can access in the browser to start populating your database."
                },
                {
                    "type": "p",
                    "text": "Don't worry if you don't understand everything the code is doing, but to give you an overview, the script usesSQLto create the tables, and the data fromplaceholder-data.tsfile to populate them after they've been created."
                },
                {
                    "type": "p",
                    "text": "Ensure your local development server is running withpnpm run devand navigate tolocalhost:3000/seedin your browser. When finished, you will see a message \"Database seeded successfully\" in the browser. Once completed, you can delete this file."
                },
                {
                    "type": "p",
                    "text": "Troubleshooting:"
                },
                {
                    "type": "list",
                    "items": [
                        "Make sure to reveal your database secrets before copying it into your.envfile.",
                        "The script usesbcryptto hash the user's password, ifbcryptisn't compatible with your environment, you can update the script to usebcryptjsinstead.",
                        "If you run into any issues while seeding your database and want to run the script again, you can drop any existing tables by runningDROP TABLE tablenamein your database query interface. See theexecuting queries sectionbelow for more details. But be careful, this command will delete the tables and all their data. It's ok to do this with your example app since you're working with placeholder data, but you shouldn't run this command in a production app.",
                        "If you continue to experience issues while seeding your Vercel Postgres database, please open adiscussion on GitHub."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Exploring your database"
                },
                {
                    "type": "p",
                    "text": "Let's see what your database looks like. Go back to Vercel, and clickDataon the sidenav."
                },
                {
                    "type": "p",
                    "text": "In this section, you'll find the four new tables: users, customers, invoices, and revenue."
                },
                {
                    "type": "p",
                    "text": "By selecting each table, you can view its records and ensure the entries align with the data fromplaceholder-data.tsfile."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Executing queries"
                },
                {
                    "type": "p",
                    "text": "You can switch to the \"query\" tab to interact with your database. This section supports standard SQL commands. For instance, inputtingDROP TABLE customerswill delete \"customers\" table along with all its data -so be careful!"
                },
                {
                    "type": "p",
                    "text": "Let's run your first database query. Paste and run the following SQL code into the Vercel interface:"
                },
                {
                    "type": "code",
                    "code": "SELECTinvoices.amount, customers.nameFROMinvoicesJOINcustomersONinvoices.customer_id=customers.idWHEREinvoices.amount=666;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter6"
                },
                {
                    "type": "p",
                    "text": "With your database now set up and integrated, you can continue building your application."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "7: Fetching Data"
                },
                {
                    "type": "p",
                    "text": "Let's discuss the different ways you can fetch data from your database, including using APIs, SQL, and alternatives."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/static-and-dynamic-rendering",
            "title": "Learn Next.js: Static and Dynamic Rendering | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "8"
                },
                {
                    "type": "p",
                    "text": "Chapter8"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Static and Dynamic Rendering"
                },
                {
                    "type": "p",
                    "text": "In the previous chapter, you fetched data for the Dashboard Overview page. However, we briefly discussed two limitations of the current setup:"
                },
                {
                    "type": "list",
                    "items": [
                        "The data requests are creating an unintentional waterfall.",
                        "The dashboard is static, so any data updates will not be reflected on your application."
                    ]
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "What static rendering is and how it can improve your application's performance."
                },
                {
                    "type": "p",
                    "text": "What dynamic rendering is and when to use it."
                },
                {
                    "type": "p",
                    "text": "Different approaches to make your dashboard dynamic."
                },
                {
                    "type": "p",
                    "text": "Simulate a slow data fetch to see what happens."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What is Static Rendering?"
                },
                {
                    "type": "p",
                    "text": "With static rendering, data fetching and rendering happens on the server at build time (when you deploy) or whenrevalidating data."
                },
                {
                    "type": "p",
                    "text": "Whenever a user visits your application, the cached result is served. There are a couple of benefits of static rendering:"
                },
                {
                    "type": "list",
                    "items": [
                        "Faster Websites- Prerendered content can be cached and globally distributed. This ensures that users around the world can access your website's content more quickly and reliably.",
                        "Reduced Server Load- Because the content is cached, your server does not have to dynamically generate content for each user request.",
                        "SEO- Prerendered content is easier for search engine crawlers to index, as the content is already available when the page loads. This can lead to improved search engine rankings."
                    ]
                },
                {
                    "type": "p",
                    "text": "Static rendering is useful for UI withno dataordata that is shared across users, such as a static blog post or a product page. It might not be a good fit for a dashboard that has personalized data which is regularly updated."
                },
                {
                    "type": "p",
                    "text": "The opposite of static rendering is dynamic rendering."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Dynamic Rendering?"
                },
                {
                    "type": "p",
                    "text": "With dynamic rendering, content is rendered on the server for each user atrequest time(when the user visits the page). There are a couple of benefits of dynamic rendering:"
                },
                {
                    "type": "list",
                    "items": [
                        "Real-Time Data- Dynamic rendering allows your application to display real-time or frequently updated data. This is ideal for applications where data changes often.",
                        "User-Specific Content- It's easier to serve personalized content, such as dashboards or user profiles, and update the data based on user interaction.",
                        "Request Time Information- Dynamic rendering allows you to access information that can only be known at request time, such as cookies or the URL search parameters."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Simulating a Slow Data Fetch"
                },
                {
                    "type": "p",
                    "text": "The dashboard application we're building is dynamic."
                },
                {
                    "type": "p",
                    "text": "However, there is still one problem mentioned in the previous chapter. What happens if one data request is slower than all the others?"
                },
                {
                    "type": "p",
                    "text": "Let's simulate a slow data fetch. In yourdata.tsfile, uncomment theconsole.logandsetTimeoutinsidefetchRevenue():"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctionfetchRevenue() {try{// We artificially delay a response for demo purposes.// Don't do this in production :)console.log('Fetching revenue data...');awaitnewPromise((resolve)=>setTimeout(resolve,3000));constdata=awaitsql<Revenue>`SELECT * FROM revenue`;console.log('Data fetch completed after 3 seconds.');returndata.rows;}catch(error) {console.error('Database Error:',error);thrownewError('Failed to fetch revenue data.');}}"
                },
                {
                    "type": "p",
                    "text": "Now openhttp://localhost:3000/dashboard/in a new tab and notice how the page takes longer to load. In your terminal, you should also see the following messages:"
                },
                {
                    "type": "code",
                    "code": "Fetching revenue data...Data fetch completed after3seconds."
                },
                {
                    "type": "p",
                    "text": "Here, you've added an artificial 3-second delay to simulate a slow data fetch. The result is that now your whole page is blocked from showing UI to the visitor while the data is being fetched. Which brings us to a common challenge developers have to solve:"
                },
                {
                    "type": "p",
                    "text": "With dynamic rendering,your application is only as fast as your slowest data fetch."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter8"
                },
                {
                    "type": "p",
                    "text": "Nice! You've just learned about static and dynamic rendering in Next.js."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "9: Streaming"
                },
                {
                    "type": "p",
                    "text": "Learn how to improve your user's experience by adding streaming."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/dashboard-app/streaming",
            "title": "Learn Next.js: Streaming | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "9"
                },
                {
                    "type": "p",
                    "text": "Chapter9"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Streaming"
                },
                {
                    "type": "p",
                    "text": "In the previous chapter, you learned about the different rendering methods of Next.js. We also discussed how slow data fetches can impact the performance of your application. Let's look at how you can improve the user experience when there are slow data requests."
                },
                {
                    "type": "p",
                    "text": "In this chapter..."
                },
                {
                    "type": "p",
                    "text": "Here are the topics we’ll cover"
                },
                {
                    "type": "p",
                    "text": "What streaming is and when you might use it."
                },
                {
                    "type": "p",
                    "text": "How to implement streaming withloading.tsxand Suspense."
                },
                {
                    "type": "p",
                    "text": "What loading skeletons are."
                },
                {
                    "type": "p",
                    "text": "What route groups are, and when you might use them."
                },
                {
                    "type": "p",
                    "text": "Where to place Suspense boundaries in your application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is streaming?"
                },
                {
                    "type": "p",
                    "text": "Streaming is a data transfer technique that allows you to break down a route into smaller \"chunks\" and progressively stream them from the server to the client as they become ready."
                },
                {
                    "type": "p",
                    "text": "By streaming, you can prevent slow data requests from blocking your whole page. This allows the user to see and interact with parts of the page without waiting for all the data to load before any UI can be shown to the user."
                },
                {
                    "type": "p",
                    "text": "Streaming works well with React's component model, as each component can be considered achunk."
                },
                {
                    "type": "p",
                    "text": "There are two ways you implement streaming in Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "At the page level, with theloading.tsxfile.",
                        "For specific components, with<Suspense>."
                    ]
                },
                {
                    "type": "p",
                    "text": "Let's see how this works."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Streaming a whole page withloading.tsx"
                },
                {
                    "type": "p",
                    "text": "In the/app/dashboardfolder, create a new file calledloading.tsx:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionLoading() {return<div>Loading...</div>;}"
                },
                {
                    "type": "p",
                    "text": "Refreshhttp://localhost:3000/dashboard, and you should now see:"
                },
                {
                    "type": "p",
                    "text": "A few things are happening here:"
                },
                {
                    "type": "list",
                    "items": [
                        "loading.tsxis a special Next.js file built on top of Suspense, it allows you to create fallback UI to show as a replacement while page content loads.",
                        "Since<SideNav>is static, it's shown immediately. The user can interact with<SideNav>while the dynamic content is loading.",
                        "The user doesn't have to wait for the page to finish loading before navigating away (this is called interruptable navigation)."
                    ]
                },
                {
                    "type": "p",
                    "text": "Congratulations! You've just implemented streaming. But we can do more to improve the user experience. Let's show a loading skeleton instead of theLoading…text."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding loading skeletons"
                },
                {
                    "type": "p",
                    "text": "A loading skeleton is a simplified version of the UI. Many websites use them as a placeholder (or fallback) to indicate to users that the content is loading. Any UI you add inloading.tsxwill be embedded as part of the static file, and sent first. Then, the rest of the dynamic content will be streamed from the server to the client."
                },
                {
                    "type": "p",
                    "text": "Inside yourloading.tsxfile, import a new component called<DashboardSkeleton>:"
                },
                {
                    "type": "code",
                    "code": "importDashboardSkeletonfrom'@/app/ui/skeletons';exportdefaultfunctionLoading() {return<DashboardSkeleton/>;}"
                },
                {
                    "type": "p",
                    "text": "Then, refreshhttp://localhost:3000/dashboard, and you should now see:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fixing the loading skeleton bug with route groups"
                },
                {
                    "type": "p",
                    "text": "Right now, your loading skeleton will apply to the invoices and customers pages as well."
                },
                {
                    "type": "p",
                    "text": "Sinceloading.tsxis a level higher than/invoices/page.tsxand/customers/page.tsxin the file system, it's also applied to those pages."
                },
                {
                    "type": "p",
                    "text": "We can change this withRoute Groups. Create a new folder called/(overview)inside the dashboard folder. Then, move yourloading.tsxandpage.tsxfiles inside the folder:"
                },
                {
                    "type": "p",
                    "text": "Now, theloading.tsxfile will only apply to your dashboard overview page."
                },
                {
                    "type": "p",
                    "text": "Route groups allow you to organize files into logical groups without affecting the URL path structure. When you create a new folder using parentheses(), the name won't be included in the URL path. So/dashboard/(overview)/page.tsxbecomes/dashboard."
                },
                {
                    "type": "p",
                    "text": "Here, you're using a route group to ensureloading.tsxonly applies to your dashboard overview page. However, you can also use route groups to separate your application into sections (e.g.(marketing)routes and(shop)routes) or by teams for larger applications."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Streaming a component"
                },
                {
                    "type": "p",
                    "text": "So far, you're streaming a whole page. But you can also be more granular and stream specific components using React Suspense."
                },
                {
                    "type": "p",
                    "text": "Suspense allows you to defer rendering parts of your application until some condition is met (e.g. data is loaded). You can wrap your dynamic components in Suspense. Then, pass it a fallback component to show while the dynamic component loads."
                },
                {
                    "type": "p",
                    "text": "If you remember the slow data request,fetchRevenue(), this is the request that is slowing down the whole page. Instead of blocking your whole page, you can use Suspense to stream only this component and immediately show the rest of the page's UI."
                },
                {
                    "type": "p",
                    "text": "To do so, you'll need to move the data fetch to the component, let's update the code to see what that'll look like:"
                },
                {
                    "type": "p",
                    "text": "Delete all instances offetchRevenue()and its data from/dashboard/(overview)/page.tsx:"
                },
                {
                    "type": "code",
                    "code": "import{ Card }from'@/app/ui/dashboard/cards';importRevenueChartfrom'@/app/ui/dashboard/revenue-chart';importLatestInvoicesfrom'@/app/ui/dashboard/latest-invoices';import{ lusitana }from'@/app/ui/fonts';import{ fetchLatestInvoices,fetchCardData }from'@/app/lib/data';// remove fetchRevenueexportdefaultasyncfunctionPage() {constrevenue=awaitfetchRevenue()// delete this lineconstlatestInvoices=awaitfetchLatestInvoices();const{numberOfInvoices,numberOfCustomers,totalPaidInvoices,totalPendingInvoices,}=awaitfetchCardData();return(// ...);}"
                },
                {
                    "type": "p",
                    "text": "Then, import<Suspense>from React, and wrap it around<RevenueChart />. You can pass it a fallback component called<RevenueChartSkeleton>."
                },
                {
                    "type": "code",
                    "code": "import{ Card }from'@/app/ui/dashboard/cards';importRevenueChartfrom'@/app/ui/dashboard/revenue-chart';importLatestInvoicesfrom'@/app/ui/dashboard/latest-invoices';import{ lusitana }from'@/app/ui/fonts';import{ fetchLatestInvoices,fetchCardData }from'@/app/lib/data';import{ Suspense }from'react';import{ RevenueChartSkeleton }from'@/app/ui/skeletons';exportdefaultasyncfunctionPage() {constlatestInvoices=awaitfetchLatestInvoices();const{numberOfInvoices,numberOfCustomers,totalPaidInvoices,totalPendingInvoices,}=awaitfetchCardData();return(<main><h1className={`${lusitana.className}mb-4 text-xl md:text-2xl`}>Dashboard</h1><divclassName=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-4\"><Cardtitle=\"Collected\"value={totalPaidInvoices}type=\"collected\"/><Cardtitle=\"Pending\"value={totalPendingInvoices}type=\"pending\"/><Cardtitle=\"Total Invoices\"value={numberOfInvoices}type=\"invoices\"/><Cardtitle=\"Total Customers\"value={numberOfCustomers}type=\"customers\"/></div><divclassName=\"mt-6 grid grid-cols-1 gap-6 md:grid-cols-4 lg:grid-cols-8\"><Suspensefallback={<RevenueChartSkeleton/>}><RevenueChart/></Suspense><LatestInvoiceslatestInvoices={latestInvoices} /></div></main>);}"
                },
                {
                    "type": "p",
                    "text": "Finally, update the<RevenueChart>component to fetch its own data and remove the prop passed to it:"
                },
                {
                    "type": "code",
                    "code": "import{ generateYAxis }from'@/app/lib/utils';import{ CalendarIcon }from'@heroicons/react/24/outline';import{ lusitana }from'@/app/ui/fonts';import{ fetchRevenue }from'@/app/lib/data';// ...exportdefaultasyncfunctionRevenueChart() {// Make component async, remove the propsconstrevenue=awaitfetchRevenue();// Fetch data inside the componentconstchartHeight=350;const{yAxisLabels,topLabel}=generateYAxis(revenue);if(!revenue||revenue.length===0) {return<pclassName=\"mt-4 text-gray-400\">No data available.</p>;}return(// ...);}"
                },
                {
                    "type": "p",
                    "text": "Now refresh the page, you should see the dashboard information almost immediately, while a fallback skeleton is shown for<RevenueChart>:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Practice: Streaming<LatestInvoices>"
                },
                {
                    "type": "p",
                    "text": "Now it's your turn! Practice what you've just learned by streaming the<LatestInvoices>component."
                },
                {
                    "type": "p",
                    "text": "MovefetchLatestInvoices()down from the page to the<LatestInvoices>component. Wrap the component in a<Suspense>boundary with a fallback called<LatestInvoicesSkeleton>."
                },
                {
                    "type": "p",
                    "text": "Once you're ready, expand the toggle to see the solution code:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Grouping components"
                },
                {
                    "type": "p",
                    "text": "Great! You're almost there, now you need to wrap the<Card>components in Suspense. You can fetch data for each individual card, but this could lead to apoppingeffect as the cards load in, this can be visually jarring for the user."
                },
                {
                    "type": "p",
                    "text": "So, how would you tackle this problem?"
                },
                {
                    "type": "p",
                    "text": "To create more of astaggeredeffect, you can group the cards using a wrapper component. This means the static<SideNav/>will be shown first, followed by the cards, etc."
                },
                {
                    "type": "p",
                    "text": "In yourpage.tsxfile:"
                },
                {
                    "type": "list",
                    "items": [
                        "Delete your<Card>components.",
                        "Delete thefetchCardData()function.",
                        "Import a newwrappercomponent called<CardWrapper />.",
                        "Import a newskeletoncomponent called<CardsSkeleton />.",
                        "Wrap<CardWrapper />in Suspense."
                    ]
                },
                {
                    "type": "code",
                    "code": "importCardWrapperfrom'@/app/ui/dashboard/cards';// ...import{RevenueChartSkeleton,LatestInvoicesSkeleton,CardsSkeleton,}from'@/app/ui/skeletons';exportdefaultasyncfunctionPage() {return(<main><h1className={`${lusitana.className}mb-4 text-xl md:text-2xl`}>Dashboard</h1><divclassName=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-4\"><Suspensefallback={<CardsSkeleton/>}><CardWrapper/></Suspense></div>// ...</main>);}"
                },
                {
                    "type": "p",
                    "text": "Then, move into the file/app/ui/dashboard/cards.tsx, import thefetchCardData()function, and invoke it inside the<CardWrapper/>component. Make sure to uncomment any necessary code in this component."
                },
                {
                    "type": "code",
                    "code": "// ...import{ fetchCardData }from'@/app/lib/data';// ...exportdefaultasyncfunctionCardWrapper() {const{numberOfInvoices,numberOfCustomers,totalPaidInvoices,totalPendingInvoices,}=awaitfetchCardData();return(<><Cardtitle=\"Collected\"value={totalPaidInvoices}type=\"collected\"/><Cardtitle=\"Pending\"value={totalPendingInvoices}type=\"pending\"/><Cardtitle=\"Total Invoices\"value={numberOfInvoices}type=\"invoices\"/><Cardtitle=\"Total Customers\"value={numberOfCustomers}type=\"customers\"/></>);}"
                },
                {
                    "type": "p",
                    "text": "Refresh the page, and you should see all the cards load in at the same time. You can use this pattern when you want multiple components to load in at the same time."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deciding where to place your Suspense boundaries"
                },
                {
                    "type": "p",
                    "text": "Where you place your Suspense boundaries will depend on a few things:"
                },
                {
                    "type": "list",
                    "items": [
                        "How you want the user to experience the page as it streams.",
                        "What content you want to prioritize.",
                        "If the components rely on data fetching."
                    ]
                },
                {
                    "type": "p",
                    "text": "Take a look at your dashboard page, is there anything you would've done differently?"
                },
                {
                    "type": "p",
                    "text": "Don't worry. There isn't a right answer."
                },
                {
                    "type": "list",
                    "items": [
                        "You could stream thewhole pagelike we did withloading.tsx... but that may lead to a longer loading time if one of the components has a slow data fetch.",
                        "You could streamevery componentindividually... but that may lead to UIpoppinginto the screen as it becomes ready.",
                        "You could also create astaggeredeffect by streamingpage sections. But you'll need to create wrapper components."
                    ]
                },
                {
                    "type": "p",
                    "text": "Where you place your suspense boundaries will vary depending on your application. In general, it's good practice to move your data fetches down to the components that need it, and then wrap those components in Suspense. But there is nothing wrong with streaming the sections or the whole page if that's what your application needs."
                },
                {
                    "type": "p",
                    "text": "Don't be afraid to experiment with Suspense and see what works best, it's a powerful API that can help you create more delightful user experiences."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Looking ahead"
                },
                {
                    "type": "p",
                    "text": "Streaming and Server Components give us new ways to handle data fetching and loading states, ultimately with the goal of improving the end user experience."
                },
                {
                    "type": "p",
                    "text": "In the next chapter, you'll learn about Partial Prerendering, a new Next.js rendering model built with streaming in mind."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter9"
                },
                {
                    "type": "p",
                    "text": "You've learned how to stream components with Suspense and loading skeletons."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "10: Partial Prerendering"
                },
                {
                    "type": "p",
                    "text": "An early look into Partial Prerendering - a new experimental rendering model built with streaming."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/react-foundations",
            "title": "React Foundations | Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "React Foundations"
                },
                {
                    "type": "p",
                    "text": "To effectively learn Next.js, it helps to be familiar with JavaScript, React, and related web development concepts. But JavaScript and React are vast topics. How do you know when you're ready to start using Next.js?"
                },
                {
                    "type": "p",
                    "text": "Welcome to the React Foundations course! This beginner-friendly, example-led course will guide you through the prerequisite knowledge for Next.js. You will build a simple project step-by-step; starting with a JavaScript application, then migrating it to React and Next.js."
                },
                {
                    "type": "p",
                    "text": "Each section builds on the previous one, so you can choose where to start depending on what you already know."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Prerequisite knowledge"
                },
                {
                    "type": "p",
                    "text": "This tutorial assumes knowledge of HTML, CSS, JavaScript, and no knowledge of React. If you're already familiar with React, you can skip to theFrom React to Next.jschapter or takeDashboard Appcourse."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "System requirements"
                },
                {
                    "type": "p",
                    "text": "Before you start this course, make sure you have the following installed:"
                },
                {
                    "type": "list",
                    "items": [
                        "Node.js 20.12.0 or later installed.",
                        "Operating systems: macOS, Windows (including WSL), or Linux.",
                        "VSCode or another text editor of your choice."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Join the conversation"
                },
                {
                    "type": "p",
                    "text": "If you have questions about anything related to Next.js or this course, you're welcome to ask our community onDiscord."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Ready to get started?"
                },
                {
                    "type": "p",
                    "text": "Now that you've been introduced to the course, let's dive in."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "1: About React and Next.js"
                },
                {
                    "type": "p",
                    "text": "Learn what React and Next.js are, and how they can help you build modern web applications."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/react-foundations/from-react-to-nextjs",
            "title": "React Foundations: From React to Next.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "8"
                },
                {
                    "type": "p",
                    "text": "Chapter8"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "From React to Next.js"
                },
                {
                    "type": "p",
                    "text": "So far, we explored how you can get started with React. This is what the final code looked like. If you're starting from here, paste this code into anindex.htmlfile in your code editor."
                },
                {
                    "type": "code",
                    "code": "<html><body><divid=\"app\"></div><scriptsrc=\"https://unpkg.com/react@18/umd/react.development.js\"></script><scriptsrc=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script><scriptsrc=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script><scripttype=\"text/jsx\">const app = document.getElementById(\"app\")function Header({ title }) {return <h1>{title?title:\"Default title\"}</h1>}function HomePage() {const names=[\"Ada Lovelace\",\"Grace Hopper\",\"Margaret Hamilton\"]const [likes,setLikes]=React.useState(0)functionhandleClick() {setLikes(likes+1)}return(<div><Headertitle=\"Develop. Preview. Ship.\"/><ul>{names.map((name)=>(<likey={name}>{name}</li>))}</ul><buttononClick={handleClick}>Like ({likes})</button></div>)}const root = ReactDOM.createRoot(app);root.render(<HomePage/>);</script></body></html>"
                },
                {
                    "type": "p",
                    "text": "In the last few chapters, you were introduced to three essential React concepts:components,props, andstate. Having a strong foundation in these will help you get started building React applications."
                },
                {
                    "type": "p",
                    "text": "When it comes to learning React,the best way to learn is to build. You can gradually adopt React by using<script>and what you've learned so far to add small components to an existing website. However, many developers have found the user and developer experience React enables valuable enough to dive right in and write their whole frontend application in React."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "From React to Next.js"
                },
                {
                    "type": "p",
                    "text": "While React excels at building UI, it does take some work to independently build that UI into a fully functioning scalable application. There are also newer React features, like Server and Client Components, that require a framework. The good news is that Next.js handles much of the setup and configuration and has additional features to help you build React applications."
                },
                {
                    "type": "p",
                    "text": "Next, we'll migrate the example from React to Next.js, discuss how Next.js works, and introduce you to the differences between Server and Client Components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter8"
                },
                {
                    "type": "p",
                    "text": "You're almost there!"
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "9: Installing Next.js"
                },
                {
                    "type": "p",
                    "text": "Install Next.js and refactor your React App to Next.js"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/react-foundations/getting-started-with-react",
            "title": "React Foundations: Getting Started with React | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "4"
                },
                {
                    "type": "p",
                    "text": "Chapter4"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Getting Started with React"
                },
                {
                    "type": "p",
                    "text": "To use React in your newly created project, load two React scripts from an external website calledunpkg.com:"
                },
                {
                    "type": "list",
                    "items": [
                        "reactis the core React library.",
                        "react-domprovides DOM-specific methods that enable you to use React with the DOM."
                    ]
                },
                {
                    "type": "code",
                    "code": "<html><body><divid=\"app\"></div><scriptsrc=\"https://unpkg.com/react@18/umd/react.development.js\"></script><scriptsrc=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script><scripttype=\"text/javascript\">constapp=document.getElementById('app');constheader=document.createElement('h1');consttext='Develop. Preview. Ship.';constheaderContent=document.createTextNode(text);header.appendChild(headerContent);app.appendChild(header);</script></body></html>"
                },
                {
                    "type": "p",
                    "text": "Instead of directly manipulating the DOM with plain JavaScript, remove the DOM methods that you had added previously, and add theReactDOM.createRoot()method to target a specific DOM element and create a root to display your React Components in. Then, add theroot.render()method to render your React code to the DOM."
                },
                {
                    "type": "p",
                    "text": "This will tell React to render our<h1>title inside our#appelement."
                },
                {
                    "type": "code",
                    "code": "<html><body><divid=\"app\"></div><scriptsrc=\"https://unpkg.com/react@18/umd/react.development.js\"></script><scriptsrc=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script><script>constapp=document.getElementById('app');constroot=ReactDOM.createRoot(app);root.render(<h1>Develop. Preview. Ship.</h1>);</script></body></html>"
                },
                {
                    "type": "p",
                    "text": "If you try to run this code in the browser, you will get a syntax error:"
                },
                {
                    "type": "code",
                    "code": "UncaughtSyntaxError:expectedexpression,got'<'"
                },
                {
                    "type": "p",
                    "text": "This is because<h1>...</h1>is not valid Javascript. This piece of code isJSX."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is JSX?"
                },
                {
                    "type": "p",
                    "text": "JSX is a syntax extension for JavaScript that allows you to describe your UI in a familiarHTML-likesyntax. The nice thing about JSX is that apart from followingthree JSX rules, you don't need to learn any new symbols or syntax outside of HTML and JavaScript."
                },
                {
                    "type": "p",
                    "text": "But browsers don't understand JSX out of the box, so you'll need a JavaScript compiler, such as aBabel, to transform your JSX code into regular JavaScript."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Adding Babel to your project"
                },
                {
                    "type": "p",
                    "text": "To add Babel to your project, copy and paste the following script in yourindex.htmlfile:"
                },
                {
                    "type": "code",
                    "code": "<scriptsrc=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>"
                },
                {
                    "type": "p",
                    "text": "In addition, you will need to inform Babel what code to transform by changing the script type totype=text/jsx."
                },
                {
                    "type": "code",
                    "code": "<html><body><divid=\"app\"></div><scriptsrc=\"https://unpkg.com/react@18/umd/react.development.js\"></script><scriptsrc=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script><!-- Babel Script --><scriptsrc=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script><scripttype=\"text/jsx\">const domNode = document.getElementById('app');const root = ReactDOM.createRoot(domNode);root.render(<h1>Develop. Preview. Ship.</h1>);</script></body></html>"
                },
                {
                    "type": "p",
                    "text": "To confirm it's working correctly, open your HTML file in the browser."
                },
                {
                    "type": "p",
                    "text": "Comparing thedeclarativeReact code you just wrote:"
                },
                {
                    "type": "code",
                    "code": "<scripttype=\"text/jsx\">const domNode = document.getElementById(\"app\")const root = ReactDOM.createRoot(domNode);root.render(<h1>Develop. Preview. Ship.</h1>);</script>"
                },
                {
                    "type": "p",
                    "text": "to theimperativeJavaScript code you wrote in the previous section:"
                },
                {
                    "type": "code",
                    "code": "<scripttype=\"text/javascript\">constapp=document.getElementById('app');constheader=document.createElement('h1');consttext='Develop. Preview. Ship.';constheaderContent=document.createTextNode(text);header.appendChild(headerContent);app.appendChild(header);</script>"
                },
                {
                    "type": "p",
                    "text": "You can start to see how using React enables you to cut down a lot of repetitive code."
                },
                {
                    "type": "p",
                    "text": "And this is exactly what React does, it's a library that contains reusable snippets of code that perform tasks on your behalf - in this case, updating the UI."
                },
                {
                    "type": "p",
                    "text": "Additional Resources:"
                },
                {
                    "type": "p",
                    "text": "You don't need to know exactly how React updates the UI to start using it, but if you'd like to learn more, here are some additional resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "UI trees",
                        "Writing markup with JSX",
                        "react-dom/serversections in the React Documentation."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Essential JavaScript for React"
                },
                {
                    "type": "p",
                    "text": "While you can learn JavaScript and React at the same time, being familiar with JavaScript can make the process of learning React easier."
                },
                {
                    "type": "p",
                    "text": "In the next sections, you will be introduced to some core concepts of React from a JavaScript perspective. Here's a summary of the JavaScript topics that will be mentioned:"
                },
                {
                    "type": "list",
                    "items": [
                        "FunctionsandArrow Functions",
                        "Objects",
                        "Arrays and array methods",
                        "Destructuring",
                        "Template literals",
                        "Ternary Operators",
                        "ES Modules and Import / Export Syntax"
                    ]
                },
                {
                    "type": "p",
                    "text": "While this course does not dive into JavaScript, it's good practice to stay up to date with the latest versions of JavaScript. But if you don't feel proficient in JavaScript yet, don't let this hinder you from starting to build with React!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter4"
                },
                {
                    "type": "p",
                    "text": "Nice, you're now using React. But there's much more to learn."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "5: Building UI with Components"
                },
                {
                    "type": "p",
                    "text": "Understand what essential JavaScript you need to know to start building React applications."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/react-foundations/installation",
            "title": "React Foundations: Installing Next.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "9"
                },
                {
                    "type": "p",
                    "text": "Chapter9"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Installing Next.js"
                },
                {
                    "type": "p",
                    "text": "When you use Next.js in your project, you do not need to load thereactandreact-domscripts fromunpkg.comanymore. Instead, you can install these packages locally usingnpmor your preferred package manager."
                },
                {
                    "type": "p",
                    "text": "Note: To use Next.js, you will need to have Node.js version18.17.0or above installed on your machine (see minimum version requirement), you candownload it here."
                },
                {
                    "type": "p",
                    "text": "To do so, create a new file in the same directory as yourindex.htmlfile, calledpackage.jsonwith an empty object{}."
                },
                {
                    "type": "code",
                    "code": "{}"
                },
                {
                    "type": "p",
                    "text": "In yourterminal, run the following command in the root of your project:"
                },
                {
                    "type": "code",
                    "code": "npm install react@latest react-dom@latest next@latest"
                },
                {
                    "type": "p",
                    "text": "Once the installation is complete, you should be able to see your project dependencies listed inside yourpackage.jsonfile:"
                },
                {
                    "type": "code",
                    "code": "{\"dependencies\":{\"next\":\"^14.0.3\",\"react\":\"^18.3.1\",\"react-dom\":\"^18.3.1\"}}"
                },
                {
                    "type": "p",
                    "text": "Don't worry if you're on later versions than the ones shown above, as long as you have thenext,react, andreact-dompackages installed, you're good to go."
                },
                {
                    "type": "p",
                    "text": "You will also notice a new file calledpackage-lock.jsonfile that contains detailed information about the exact versions of each package."
                },
                {
                    "type": "p",
                    "text": "Jumping back to theindex.htmlfile, you can delete the following code:"
                },
                {
                    "type": "list",
                    "items": [
                        "The<html>and<body>tags.",
                        "The<div>element with theidofapp.",
                        "Thereactandreact-domscripts since you've installed them with NPM.",
                        "TheBabelscript because Next.js has a compiler that transforms JSX into valid JavaScript browsers can understand.",
                        "The<script type=\"text/jsx\">tag.",
                        "Thedocument.getElementById()andReactDom.createRoot()methods.",
                        "TheReact.part of theReact.useState(0)function"
                    ]
                },
                {
                    "type": "p",
                    "text": "After deleting the lines above, add the following import to the top of your file:"
                },
                {
                    "type": "code",
                    "code": "import{ useState }from'react';"
                },
                {
                    "type": "p",
                    "text": "Your code should look like this:"
                },
                {
                    "type": "code",
                    "code": "import{ useState }from'react';functionHeader({ title }) {return<h1>{title?title:'Default title'}</h1>;}functionHomePage() {constnames=['Ada Lovelace','Grace Hopper','Margaret Hamilton'];const[likes,setLikes]=useState(0);functionhandleClick() {setLikes(likes+1);}return(<div><Headertitle=\"Develop. Preview. Ship.\"/><ul>{names.map((name)=>(<likey={name}>{name}</li>))}</ul><buttononClick={handleClick}>Like ({likes})</button></div>);}"
                },
                {
                    "type": "p",
                    "text": "The only code left in the HTML file is JSX, so you can change the file type from.htmlto.jsor.jsx."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating your first page"
                },
                {
                    "type": "p",
                    "text": "Next.js uses file-system routing. This means that instead of using code to define the routes of your application, you can use folders and files."
                },
                {
                    "type": "p",
                    "text": "Here's how you can create your first page in Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a new folder calledappand move theindex.jsfile inside it.",
                        "Rename yourindex.jsfile topage.js. This will be the main page of your application.",
                        "Addexport defaultto your<HomePage>component to help Next.js distinguish which component to render as the main component of the page."
                    ]
                },
                {
                    "type": "code",
                    "code": "import{ useState }from'react';functionHeader({ title }) {return<h1>{title?title:'Default title'}</h1>;}exportdefaultfunctionHomePage() {// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Running the development server"
                },
                {
                    "type": "p",
                    "text": "Next, let's run your development server so you can see the changes in your new page while developing. Add a\"next dev\"script to yourpackage.jsonfile:"
                },
                {
                    "type": "code",
                    "code": "{\"scripts\":{\"dev\":\"next dev\"},\"dependencies\":{\"next\":\"^14.0.3\",\"react\":\"^18.3.1\",\"react-dom\":\"^18.3.1\"}}"
                },
                {
                    "type": "p",
                    "text": "Check what happens by runningnpm run devin your terminal. You'll notice two things:"
                },
                {
                    "type": "list",
                    "items": [
                        "When you navigate tolocalhost:3000, you should see the following error:"
                    ]
                },
                {
                    "type": "p",
                    "text": "This is because Next.js uses React Server Components, a new feature that allows React to render on the server. Server Components don't supportuseState, so you'll need to use a Client Component instead."
                },
                {
                    "type": "p",
                    "text": "In the next chapter, we'll discuss the main differences between Server and Client Components and fix this error."
                },
                {
                    "type": "list",
                    "items": [
                        "A new file calledlayout.jswas automatically created inside theappfolder. This is the main layout of your application. You can use it to add UI elements that are shared across all pages (e.g. navigation, footer, etc)."
                    ]
                },
                {
                    "type": "code",
                    "code": "exportconstmetadata={title:'Next.js',description:'Generated by Next.js',};exportdefaultfunctionRootLayout({ children }) {return(<htmllang=\"en\"><body>{children}</body></html>);}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Summary"
                },
                {
                    "type": "p",
                    "text": "Looking at the migration so far, you may already be getting a sense of the benefits of using Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "You removed the React and Babel scripts; a taste of the complex tooling and configuration you no longer have to think about.",
                        "You created your first page."
                    ]
                },
                {
                    "type": "p",
                    "text": "Additional Reading:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Routing Fundamentals",
                        "Defining Routes",
                        "Pages and Layouts"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter9"
                },
                {
                    "type": "p",
                    "text": "You've installed Next.js and are ready to start building your first app."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "10: Server and Client Components"
                },
                {
                    "type": "p",
                    "text": "Learn when to use Server and Client Components."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/react-foundations/next-steps",
            "title": "React Foundations: Next Steps | Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Next Steps"
                },
                {
                    "type": "p",
                    "text": "Congratulations on creating your first Next.js application!"
                },
                {
                    "type": "p",
                    "text": "To summarize, you explored the foundational knowledge for React and Next.js, and you migrated from a simple React Application to a Next.js application."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What's next?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Continue learning React"
                },
                {
                    "type": "p",
                    "text": "Over the years, many courses, videos, and articles have been created to help developers learn React. While it's hard to recommend resources that will fit your learning style, one invaluable reference is theReact Documentationwhich contains interactive sandboxes to help you practice the topics."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Learn Next.js by building a dashboard app"
                },
                {
                    "type": "p",
                    "text": "Continue learning Next.js bycreating a dashboard app- this course will introduce you to themainNext.js features and get you practicing by building a more complex project."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You‘ve Completed the Course!"
                },
                {
                    "type": "p",
                    "text": "Now that you've completed the final chapter, you're ready for the next steps."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/react-foundations/rendering-ui",
            "title": "React Foundations: Rendering User Interfaces (UI) | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "2"
                },
                {
                    "type": "p",
                    "text": "Chapter2"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Rendering User Interfaces (UI)"
                },
                {
                    "type": "p",
                    "text": "To understand how React works, we first need a basic understanding of how browsers interpret your code to create (or render) user interfaces (UI)."
                },
                {
                    "type": "p",
                    "text": "When a user visits a web page, the server returns an HTML file to the browser that may look like this:"
                },
                {
                    "type": "p",
                    "text": "The browser then reads the HTML and constructs the Document Object Model (DOM)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What is the DOM?"
                },
                {
                    "type": "p",
                    "text": "The DOM is an object representation of the HTML elements. It acts as a bridge between your code and the user interface, and has a tree-like structure with parent and child relationships."
                },
                {
                    "type": "p",
                    "text": "You can use DOM methods and JavaScript, to listen to user events andmanipulate the DOMby selecting, adding, updating, and deleting specific elements in the user interface. DOM manipulation allows you to not only target specific elements, but also change their style and content."
                },
                {
                    "type": "p",
                    "text": "In the next section you'll learn how to use JavaScript and DOM methods."
                },
                {
                    "type": "p",
                    "text": "Additional Resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to the DOM",
                        "How to view the DOM in Google Chrome",
                        "How to view the DOM in Firefox"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter2"
                },
                {
                    "type": "p",
                    "text": "You should now understand the fundamentals of how UI is rendered on the browser."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "3: Updating UI with Javascript"
                },
                {
                    "type": "p",
                    "text": "Learn how developers use JavaScript to manipulate the DOM and update the UI."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/react-foundations/server-and-client-components",
            "title": "React Foundations: Server and Client Components | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "10"
                },
                {
                    "type": "p",
                    "text": "Chapter10"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Server and Client Components"
                },
                {
                    "type": "p",
                    "text": "To understand how Server and Client Components work, it's helpful to be familiar with two foundational web concepts:"
                },
                {
                    "type": "list",
                    "items": [
                        "Theenvironmentsyour application code can be executed in: the server and the client.",
                        "Thenetwork boundarythat separates server and client code."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Server and Client Environments"
                },
                {
                    "type": "p",
                    "text": "In the context of web applications:"
                },
                {
                    "type": "list",
                    "items": [
                        "Theclientrefers to the browser on a user’s device that sends a request to a server for your application code. It then turns the response it receives from the server into an interface the user can interact with.",
                        "Theserverrefers to the computer in a data center that stores your application code, receives requests from a client, does some computation, and sends back an appropriate response."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each environment has its own set of capabilities and constraints. For example, by moving rendering and data fetching to the server, you can reduce the amount of code sent to the client, which can improve your application's performance. But, as you learned earlier, to make your UI interactive, you need to update the DOM on the client."
                },
                {
                    "type": "p",
                    "text": "Therefore, the code you write for the server and the client is not always the same. Certain operations (e.g. data fetching or managing user state) are better suited for one environment over the other."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Network Boundary"
                },
                {
                    "type": "p",
                    "text": "TheNetwork Boundaryis a conceptual line that separates the different environments."
                },
                {
                    "type": "p",
                    "text": "In React, you choose where to place the network boundary in your component tree. For example, you can fetch data and render a user's posts on the server (using Server Components), then render the interactiveLikeButtonfor each post on the client (using Client Components)."
                },
                {
                    "type": "p",
                    "text": "Similarly, you can create aNavcomponent that is rendered on the server and shared across pages, but if you want to show an active state for links, you can render the list ofLinkson the client."
                },
                {
                    "type": "p",
                    "text": "Behind the scenes, the components are split into two module graphs. Theserver module graph (or tree)contains all the Server Components that are rendered on the server, and theclient module graph (or tree)contains all Client Components."
                },
                {
                    "type": "p",
                    "text": "After Server Components are rendered, a special data format called theReact Server Component Payload (RSC)is sent to the client. The RSC payload contains:"
                },
                {
                    "type": "list",
                    "items": [
                        "The rendered result of Server Components.",
                        "Placeholders (or holes) for where Client Components should be rendered and references to their JavaScript files."
                    ]
                },
                {
                    "type": "p",
                    "text": "React uses this information to consolidate the Server and Client Components and update the DOM on the client."
                },
                {
                    "type": "p",
                    "text": "Let's see how this works."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Client Components"
                },
                {
                    "type": "p",
                    "text": "As you learned in the last chapter, Next.js uses Server Components by default - this is to improve your application's performance and means you don't have to take additional steps to adopt them."
                },
                {
                    "type": "p",
                    "text": "Looking back at the error in your browser, Next.js is warning you that you're trying touseStateinside a Server Component. You can fix this by moving the interactive \"Like\" button to a Client Component."
                },
                {
                    "type": "p",
                    "text": "Create a new file calledlike-button.jsinside theappfolder that exports aLikeButtoncomponent:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionLikeButton() {}"
                },
                {
                    "type": "p",
                    "text": "Move the<button>element and thehandleClick()function frompage.jsto your newLikeButtoncomponent:"
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionLikeButton() {functionhandleClick() {setLikes(likes+1);}return<buttononClick={handleClick}>Like ({likes})</button>;}"
                },
                {
                    "type": "p",
                    "text": "Next, move thelikesstate and the import:"
                },
                {
                    "type": "code",
                    "code": "import{ useState }from'react';exportdefaultfunctionLikeButton() {const[likes,setLikes]=useState(0);functionhandleClick() {setLikes(likes+1);}return<buttononClick={handleClick}>Like ({likes})</button>;}"
                },
                {
                    "type": "p",
                    "text": "Now, to make theLikeButtona Client Component, add the React'use client'directive at the top of the file. This tells React to render the component on the client."
                },
                {
                    "type": "code",
                    "code": "'use client';import{ useState }from'react';exportdefaultfunctionLikeButton() {const[likes,setLikes]=useState(0);functionhandleClick() {setLikes(likes+1);}return<buttononClick={handleClick}>Like ({likes})</button>;}"
                },
                {
                    "type": "p",
                    "text": "Back in yourpage.jsfile, import theLikeButtoncomponent into your page:"
                },
                {
                    "type": "code",
                    "code": "importLikeButtonfrom'./like-button';functionHeader({ title }) {return<h1>{title?title:'Default title'}</h1>;}exportdefaultfunctionHomePage() {constnames=['Ada Lovelace','Grace Hopper','Margaret Hamilton'];return(<div><Headertitle=\"Develop. Preview. Ship.\"/><ul>{names.map((name)=>(<likey={name}>{name}</li>))}</ul><LikeButton/></div>);}"
                },
                {
                    "type": "p",
                    "text": "Save both files and view your app in the browser. Now that there are no errors, once you make changes and save, you should notice the browser automatically updates to reflect the change."
                },
                {
                    "type": "p",
                    "text": "This feature is calledFast Refresh. It gives you instantaneous feedback on any edits you make and comes pre-configured with Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Summary"
                },
                {
                    "type": "p",
                    "text": "To recap, you learned about the server and client environments and when to use each. You also learned that Next.js uses React Server Components by default to improve performance, and how you can opt into Client Components to smaller parts of your UI interactive."
                },
                {
                    "type": "p",
                    "text": "Additional Reading"
                },
                {
                    "type": "p",
                    "text": "There's a lot more to learn about Server and Client Components. Here are some additional resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components Docs",
                        "Client Component Docs",
                        "Composition Patterns",
                        "The \"use client\" Directive",
                        "The \"use server\" Directive"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter10"
                },
                {
                    "type": "p",
                    "text": "You've learned how to use Server and Client Components."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "11: Next Steps"
                },
                {
                    "type": "p",
                    "text": "What's next?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/react-foundations/updating-ui-with-javascript",
            "title": "React Foundations: Updating UI with Javascript | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "3"
                },
                {
                    "type": "p",
                    "text": "Chapter3"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Updating UI with Javascript"
                },
                {
                    "type": "p",
                    "text": "In this chapter, we'll start building out our project by using JavaScript and DOM methods to add anh1tag to your project."
                },
                {
                    "type": "p",
                    "text": "Open your code editor and create a newindex.htmlfile. Inside the HTML file, add the following code:"
                },
                {
                    "type": "code",
                    "code": "<html><body><div></div></body></html>"
                },
                {
                    "type": "p",
                    "text": "Then give thediva uniqueidso that you can target it later."
                },
                {
                    "type": "code",
                    "code": "<html><body><divid=\"app\"></div></body></html>"
                },
                {
                    "type": "p",
                    "text": "To write JavaScript inside your HTML file, add ascripttag:"
                },
                {
                    "type": "code",
                    "code": "<html><body><divid=\"app\"></div><scripttype=\"text/javascript\"></script></body></html>"
                },
                {
                    "type": "p",
                    "text": "Now, inside thescripttag, you can use a DOM method,getElementById(), to select the<div>element by itsid:"
                },
                {
                    "type": "code",
                    "code": "<html><body><divid=\"app\"></div><scripttype=\"text/javascript\">constapp=document.getElementById('app');</script></body></html>"
                },
                {
                    "type": "p",
                    "text": "You can continue using DOM methods to create a new<h1>element:"
                },
                {
                    "type": "code",
                    "code": "<html><body><divid=\"app\"></div><scripttype=\"text/javascript\">// Select the div element with 'app' idconstapp=document.getElementById('app');// Create a new H1 elementconstheader=document.createElement('h1');// Create a new text node for the H1 elementconsttext='Develop. Preview. Ship.';constheaderContent=document.createTextNode(text);// Append the text to the H1 elementheader.appendChild(headerContent);// Place the H1 element inside the divapp.appendChild(header);</script></body></html>"
                },
                {
                    "type": "p",
                    "text": "To make sure everything is working, open your HTML file inside your browser of choice. You should see anh1tag that says, 'Develop. Preview. Ship.'."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "HTML vs. the DOM"
                },
                {
                    "type": "p",
                    "text": "If you look at the DOM elements inside yourbrowser developer tools, you will notice the DOM includes the<h1>element. The DOM of the page is different from the source code - or in other words, the original HTML file you created."
                },
                {
                    "type": "p",
                    "text": "This is because the HTML represents theinitial page content, whereas the DOM represents theupdated page contentwhich was changed by the JavaScript code you wrote."
                },
                {
                    "type": "p",
                    "text": "Updating the DOM with plain JavaScript is very powerful but verbose. You've written all this code to add an<h1>element with some text:"
                },
                {
                    "type": "code",
                    "code": "<scripttype=\"text/javascript\">constapp=document.getElementById('app');constheader=document.createElement('h1');consttext='Develop. Preview. Ship.';constheaderContent=document.createTextNode(text);header.appendChild(headerContent);app.appendChild(header);</script>"
                },
                {
                    "type": "p",
                    "text": "As the size of an app or team grows, it can become increasingly challenging to build applications this way."
                },
                {
                    "type": "p",
                    "text": "With this approach, developers spend a lot of time writing instructions to tell the computerhowit should do things. But wouldn't it be nice to describewhatyou want to show and let the computer figure outhowto update the DOM?"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Imperative vs. declarative programming"
                },
                {
                    "type": "p",
                    "text": "The code above is a good example ofimperativeprogramming.You're writing the steps forhowthe user interface should be updated. But when it comes to building user interfaces, a declarative approach is often preferred because it can speed up the development process. Instead of having to write DOM methods, it would be helpful if developers were able to declarewhatthey want to show (in this case, anh1tag with some text)."
                },
                {
                    "type": "p",
                    "text": "In other words,imperative programmingis like giving a chef step-by-step instructions on how to make a pizza.Declarative programmingis like ordering a pizza without being concerned about the steps it takes to make the pizza. 🍕"
                },
                {
                    "type": "p",
                    "text": "Reactis a popular declarative library that you can use build user interfaces."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "React: A declarative UI library"
                },
                {
                    "type": "p",
                    "text": "As a developer, you can tell React what you want to happen to the user interface, and React will figure out the steps ofhowto update the DOM on your behalf."
                },
                {
                    "type": "p",
                    "text": "In the next section, we'll explore how you can get started with React."
                },
                {
                    "type": "p",
                    "text": "Additional Resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "HTML vs. the DOM",
                        "How declarative UI compares to imperative"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter3"
                },
                {
                    "type": "p",
                    "text": "You've learned how developers use JavaScript to update the UI."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "4: Getting Started with React"
                },
                {
                    "type": "p",
                    "text": "Learn how to add React to your existing project."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/react-foundations/what-is-react-and-nextjs",
            "title": "React Foundations: About React and Next.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "1"
                },
                {
                    "type": "p",
                    "text": "Chapter1"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "About React and Next.js"
                },
                {
                    "type": "p",
                    "text": "Next.js is a flexibleReact frameworkthat gives you building blocks to create fast, full-stackweb applications."
                },
                {
                    "type": "p",
                    "text": "But what exactly do we mean by this? Let's spend some time expanding on what React and Next.js are and how they can help you build web applications."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Building blocks of a web application"
                },
                {
                    "type": "p",
                    "text": "There are a few things you need to consider when building modern applications. Such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "User Interface- how users will consume and interact with your application.",
                        "Routing- how users navigate between different parts of your application.",
                        "Data Fetching- where your data lives and how to get it.",
                        "Rendering- when and where you render static or dynamic content.",
                        "Integrations- what third-party services you use (for CMS, auth, payments, etc.) and how you connect to them.",
                        "Infrastructure- where you deploy, store, and run your application code (serverless, CDN, edge, etc.).",
                        "Performance- how to optimize your application for end-users.",
                        "Scalability- how your application adapts as your team, data, and traffic grow.",
                        "Developer Experience- your team's experience building and maintaining your application."
                    ]
                },
                {
                    "type": "p",
                    "text": "For each part of your application, you will need to decide whether you will build a solution yourself or use other tools, such as packages, libraries, and frameworks."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What is React?"
                },
                {
                    "type": "p",
                    "text": "Reactis a JavaScriptlibraryfor buildinginteractive user interfaces."
                },
                {
                    "type": "p",
                    "text": "By user interfaces (UI), we mean the elements that users see and interact with on-screen."
                },
                {
                    "type": "p",
                    "text": "By library, we mean React provides helpful functions (APIs) to build UI, but leaves it up to the developer where to use those functions in their application."
                },
                {
                    "type": "p",
                    "text": "Part of React's success is that it is relatively unopinionated about the other aspects of building applications. This has resulted in a flourishing ecosystem of third-party tools and solutions, including Next.js."
                },
                {
                    "type": "p",
                    "text": "It also means, however, that building a complete React application from the ground up requires some effort. Developers need to spend time configuring tools and reinventing solutions for common application requirements."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Next.js?"
                },
                {
                    "type": "p",
                    "text": "Next.js is a Reactframeworkthat gives you building blocks to create web applications."
                },
                {
                    "type": "p",
                    "text": "By framework, we mean Next.js handles the tooling and configuration needed for React, and provides additional structure, features, and optimizations for your application."
                },
                {
                    "type": "p",
                    "text": "You can use React to build your UI, then incrementally adopt Next.js features to solve common application requirements such as routing, data fetching, and caching - all while improving the developer and end-user experience."
                },
                {
                    "type": "p",
                    "text": "Whether you're an individual developer or part of a larger team, you can use React and Next.js to build fully interactive, highly dynamic, and performant web applications."
                },
                {
                    "type": "p",
                    "text": "In the next chapters, we will discuss how you can get started with React and Next.js."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "You've Completed Chapter1"
                },
                {
                    "type": "p",
                    "text": "Now that you've learned what React and Next.js are."
                },
                {
                    "type": "p",
                    "text": "Next Up"
                },
                {
                    "type": "p",
                    "text": "2: Rendering User Interfaces (UI)"
                },
                {
                    "type": "p",
                    "text": "Learn the fundamentals of how user interfaces (UI) are rendered in the browser."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/crawling-and-indexing",
            "title": "Crawling and Indexing | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Crawling and Indexing"
                },
                {
                    "type": "p",
                    "text": "Now that we have a general overview of how search systems and Googlebot work, we'll deep-dive into several key parts that impact Crawling and Indexing."
                },
                {
                    "type": "p",
                    "text": "In this lesson, we'll take a look at:"
                },
                {
                    "type": "list",
                    "items": [
                        "HTTP status code fundamentals.",
                        "Metadata and what web crawlers look for when parsing web content.",
                        "How to communicate with Google so its search crawler knows when there is new content on your site.",
                        "How to leverage meta robot tags and canonical links to indicate to search engines your desired indexing status."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/crawling-and-indexing/canonical",
            "title": "What are Canonical Tags? - Crawling and Indexing | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Crawling and Indexing"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What are Canonical Tags?"
                },
                {
                    "type": "p",
                    "text": "AcanonicalURL is the URL of the page that search engines think is most representative from a set of duplicate pages on your site."
                },
                {
                    "type": "p",
                    "text": "While you can directly communicate canonical URLs to search engines, they can also decide to group several URLs without you notifying it. This might happen automatically if Google can find a URL under several different paths."
                },
                {
                    "type": "p",
                    "text": "While Google does a great job at detecting those, their systems work at massive scale and don't cover all edge cases. Canonical tags are an important aspect to cover for your website to ensure great performance."
                },
                {
                    "type": "p",
                    "text": "If Google finds several URLs that have the same content, it might decide to demote them in search results because they can be considered duplicated."
                },
                {
                    "type": "p",
                    "text": "This also happens across domains, if you run two different websites and post the same content in each one, search engines can decide to pick one of them to be ranked, or directly demote both."
                },
                {
                    "type": "p",
                    "text": "This is where canonical tags are extremely useful. They let Google know which URLs are the original source of truth and which are duplicated. Lots of duplicated pages across same or different domains can lead to bad rankings or even penalizations."
                },
                {
                    "type": "p",
                    "text": "Let's imagine that our e-commerce shop allows products to be accessible viaexample.com/products/phoneandexample.com/phone."
                },
                {
                    "type": "p",
                    "text": "Both are valid, working URLs, but we use canonical to prevent the detection of duplicate content that we own. If we decided thathttps://example.com/products/phoneshould be considered for rankings, we would create a canonical tag:"
                },
                {
                    "type": "code",
                    "code": "<linkrel=\"canonical\"href=\"https://example.com/products/phone\"/>"
                },
                {
                    "type": "p",
                    "text": "Canonical tags are fundamental in SEO performance, because not only can you create different URLs, but users or marketing tools can also create them."
                },
                {
                    "type": "p",
                    "text": "Imagine that you are running some marketing campaigns on Google, then Google decides to add someUTM parameters. It's possible that this new, unique URL will be indexed by Googlebot so you want to be sure you are still showing your canonical tags to unify duplicate pages."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';functionIndexPage(){return(<div><Head><title>Canonical Tag Example</title><linkrel=\"canonical\"href=\"https://example.com/blog/original-post\"key=\"canonical\"/></Head><p>This post exists on two URLs.</p></div>);}exportdefaultIndexPage;"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "What is the main purpose of a canonical?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Google:Consolidate Duplicate URLs",
                        "Next.js:i18n Routing"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/crawling-and-indexing/metatags",
            "title": "Special Meta Tags for Search Engines - Crawling and Indexing | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Crawling and Indexing"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Special Meta Tags for Search Engines"
                },
                {
                    "type": "p",
                    "text": "Meta robot tagsare directives that search engines will always respect. Adding these robots tags can make the indexation of your website easier."
                },
                {
                    "type": "p",
                    "text": "There is a difference between directives and suggestions.Meta robots tagsorrobots.txtfiles aredirectivesand will always be obeyed.Canonical tagsarerecommendationsthat Google can decide to obey or not."
                },
                {
                    "type": "p",
                    "text": "There are many options when it comes to page-level meta tags, but the following are examples commonly associated with SEO:"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"robots\"content=\"noindex,nofollow\"/>"
                },
                {
                    "type": "p",
                    "text": "The robots tag is probably the most common tag you will see. By default it will have the valueindex,followso it does not need to specified,allis also a valid alternative version:"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"robots\"content=\"all\"/>"
                },
                {
                    "type": "p",
                    "text": "By setting a robots tag tonoindex,nofollowas in the example above, it will indicate to search engines:"
                },
                {
                    "type": "list",
                    "items": [
                        "noindexTo not show this page in search results. Omittingnoindexwill indicate the page can be indexed and shown in search results.When building a website, you might not want to index certain pages. Common use cases include settings pages, internal search pages, policies, and more.",
                        "nofollowTo not follow links on this page. Omitting this will allow robots to crawl and follow links on this page. Links found on other pages may enable crawling, so iflink Aappears in pagesXandY, andXhas anofollowrobots tag, butYdoesn't, Google may decide to crawl the link."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "noindex"
                },
                {
                    "type": "p",
                    "text": "To not show this page in search results. Omittingnoindexwill indicate the page can be indexed and shown in search results."
                },
                {
                    "type": "p",
                    "text": "When building a website, you might not want to index certain pages. Common use cases include settings pages, internal search pages, policies, and more."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "nofollow"
                },
                {
                    "type": "p",
                    "text": "To not follow links on this page. Omitting this will allow robots to crawl and follow links on this page. Links found on other pages may enable crawling, so iflink Aappears in pagesXandY, andXhas anofollowrobots tag, butYdoesn't, Google may decide to crawl the link."
                },
                {
                    "type": "p",
                    "text": "Note:You can see afull list of directivesin the Google official documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Googlebot tag"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"googlebot\"content=\"noindex,nofollow\"/>"
                },
                {
                    "type": "p",
                    "text": "You may also see thegooglebottag sometimes. In most cases therobotsis all you will need. Thegooglebottag is specific to Google. Use this tag if you want to have a separate rule for Googlebot, and a general one for the rest of the search bots."
                },
                {
                    "type": "p",
                    "text": "In the case there is conflicting tags, the more restrictive tag applies."
                },
                {
                    "type": "p",
                    "text": "You may be wondering why we need these tags if you can add URLs to yourrobots.txtthat you do not want crawled. The meta tag gives you flexibility to mark pages asnoindexon demand."
                },
                {
                    "type": "p",
                    "text": "For example, if you apply filters to a products page and you end up with no results, it would be common practice tonoindexthis page."
                },
                {
                    "type": "p",
                    "text": "URLs that are restricted from bots crawling via robots.txt file will never be crawled by Google, but if the rules are added after pages are already indexed, pages might remain indexed. The best way to make sure that a page is not indexed is using the `noindex` tag."
                },
                {
                    "type": "p",
                    "text": "Note:Google can decide to index a page without crawling it. This is extremely rare, but happens when Google wants a page to fulfill a specific search result and has certainty that the page contains what users expect."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Google tags"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "nositelinkssearchbox"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"google\"content=\"nositelinkssearchbox\"/>"
                },
                {
                    "type": "p",
                    "text": "When users search for your site, Google Search results sometimes display a search box specific to your site, along with other direct links to your site. This tag tells Google not to show the sitelinks search box."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "notranslate"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"google\"content=\"notranslate\"/>"
                },
                {
                    "type": "p",
                    "text": "When Google recognizes that the site contents are not in the language that the user is likely to want to read, Google often provides a link to a translation in the search results."
                },
                {
                    "type": "p",
                    "text": "In general, this gives you the chance to provide your unique and compelling content to a much larger group of users. However, there may be situations where this is not desired. This meta tag tells Google that you don't want them to provide a translation for this page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Now that we have given a run through of some of the common tags you might come across, here is an example of a page putting some of them to use:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';functionIndexPage(){return(<div><Head><title>Meta Tag Example</title><metaname=\"google\"content=\"nositelinkssearchbox\"key=\"sitelinks\"/><metaname=\"google\"content=\"notranslate\"key=\"notranslate\"/></Head><p>Here we show some meta tags off!</p></div>);}exportdefaultIndexPage;"
                },
                {
                    "type": "p",
                    "text": "As you can see in the example, we are usingnext/headwhich is a built-in component for appending elements to theheadof a page."
                },
                {
                    "type": "p",
                    "text": "To avoid duplicate tags in yourheadyou can use thekeyproperty, which will make sure the tag is only rendered once."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "Where should meta tags live?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/crawling-and-indexing/robots-txt",
            "title": "What is a robots.txt File? - Crawling and Indexing | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Crawling and Indexing"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is a robots.txt File?"
                },
                {
                    "type": "p",
                    "text": "Arobots.txt filetells search engine crawlers which pages or files the crawler can or can't request from your site. Therobots.txtfile is a web standard file that mostgood botsconsume before requesting anything from a specific domain."
                },
                {
                    "type": "p",
                    "text": "You might want to protect certain areas from your website from being crawled, and therefore indexed, such as your CMS or admin, user accounts in your e-commerce, or some API routes, to name a few."
                },
                {
                    "type": "p",
                    "text": "These files must be served at the root of each host, or alternatively you can redirect the root/robots.txtpath to a destination URL and most bots will follow."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How to add a robots.txt file to a Next.js project"
                },
                {
                    "type": "p",
                    "text": "Thanks tostatic file servingin Next.js we can easily add a `robots.txt` file. , we would create a new file named `robots.txt` thepublicfolder in the root directory."
                },
                {
                    "type": "p",
                    "text": "An example of what you could put in this file would be:"
                },
                {
                    "type": "code",
                    "code": "//robots.txt#Blockall crawlersfor/accountsUser-agent:*Disallow:/accounts\n\n#Allowall crawlersUser-agent:*Allow:/"
                },
                {
                    "type": "p",
                    "text": "When you run your app withyarn dev, it will now be available athttp://localhost:3000/robots.txt. Note that thepublicfolder name is not part of the URL."
                },
                {
                    "type": "p",
                    "text": "Do not name the public directory anything else. The name cannot be changed and is the only directory used to serve static assets."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "What is the purpose of a robots.txt file?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Google:Create and Submit arobots.txtFile"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/crawling-and-indexing/status-codes",
            "title": "What are HTTP Status Codes? - Crawling and Indexing | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Crawling and Indexing"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What are HTTP Status Codes?"
                },
                {
                    "type": "p",
                    "text": "HTTP response status codesindicate whether a specific HTTP request has been successfully completed. There are many status codes, but only a handful are meaningful in an SEO context. Let's take a look at them now."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "200"
                },
                {
                    "type": "p",
                    "text": "TheHTTP 200 OKsuccess status response code indicates that the request has succeeded."
                },
                {
                    "type": "p",
                    "text": "In order for a page to be indexed on Google it must return status code200. This is what you typically want to look for in your pages in order for them to receive organic traffic."
                },
                {
                    "type": "p",
                    "text": "This is the default code that will be set when Next.js renders a page successfully."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "301/308"
                },
                {
                    "type": "p",
                    "text": "TheHTTP 301 Moved Permanentlyredirect status response code indicates that the resource requested has been definitively moved to the destination URL."
                },
                {
                    "type": "p",
                    "text": "This is a permanent redirect. In general, this is the most widely used redirect type."
                },
                {
                    "type": "p",
                    "text": "Redirects can be used for a variety of reasons, but the main one is to indicate that a URL has been moved from point A to point B."
                },
                {
                    "type": "p",
                    "text": "Redirects are needed to ensure that, if a content is moved from one place to the other, you do not lose current and potential clients and that the bots can continue to index your site."
                },
                {
                    "type": "p",
                    "text": "Note:Next.js permanent redirectsuse 308 by default instead of 301 as it is the newer version and considered the better option."
                },
                {
                    "type": "p",
                    "text": "The main difference between the two status codes is that a301allows for changing the request method fromPOSTtoGET, whereas a308does not."
                },
                {
                    "type": "p",
                    "text": "You can trigger a308redirect in Next.js by returning a redirect instead of props in the `getStaticProps()` function."
                },
                {
                    "type": "code",
                    "code": "//  pages/about.jsexportasyncfunctiongetStaticProps(context){return{redirect:{destination:'/',permanent:true,// triggers 308},};}"
                },
                {
                    "type": "p",
                    "text": "You can also use thepermanent: truekey in redirects set innext.config.js."
                },
                {
                    "type": "code",
                    "code": "//next.config.jsmodule.exports={asyncredirects(){return[{source:'/about',destination:'/',permanent:true,// triggers 308},];},};"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "302"
                },
                {
                    "type": "p",
                    "text": "TheHTTP 302 Foundredirect status response code indicates that the resource requested has been temporarily moved to the destination URL."
                },
                {
                    "type": "p",
                    "text": "In most cases,302redirects should be301redirects. This may not be the case if you are redirecting users temporarily to a certain page (e.g. a promotion page) or if you are redirecting users based on location."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "404"
                },
                {
                    "type": "p",
                    "text": "TheHTTP 404 Not Foundclient error response code indicates that the server can't find the requested resource."
                },
                {
                    "type": "p",
                    "text": "As noted above, pages that are moved should be redirected with aHTTP 301status code to the new location. When this doesn't happen, URLs may return a404status code."
                },
                {
                    "type": "p",
                    "text": "404Status Codes are not necessarily bad by default, as it's the desired outcome if a user happens to visit a URL that doesn't exist, but they shouldn't be a frequent error within your pages as it could lead to lackluster search rankings."
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically return a404status code for URLs that do not exist in your application."
                },
                {
                    "type": "p",
                    "text": "In some cases, you might also want to return a404status code from page. You can do this by returning the following in place of props:"
                },
                {
                    "type": "code",
                    "code": "exportasyncfunctiongetStaticProps(context){return{notFound:true,// triggers 404};}"
                },
                {
                    "type": "p",
                    "text": "You cancreate a custom 404 pagethat is statically generated at build time by creatingpages/404.js."
                },
                {
                    "type": "p",
                    "text": "Example:"
                },
                {
                    "type": "code",
                    "code": "// pages/404.jsexportdefaultfunctionCustom404(){return<h1>404 - Page Not Found</h1>;}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "410"
                },
                {
                    "type": "p",
                    "text": "TheHTTP 410 Goneclient error response code indicates that access to the target resource is no longer available at the origin server and that this condition is likely to be permanent."
                },
                {
                    "type": "p",
                    "text": "This is not used very often, but you might want to look for this status code if you are deleting content on your website that won't exist any more."
                },
                {
                    "type": "p",
                    "text": "Examples where aHTTP 410 Gonemight be wise to use include:"
                },
                {
                    "type": "list",
                    "items": [
                        "E-Commerce: Products permanently removed from inventory.",
                        "Forum: Threads that have been deleted by the user.",
                        "Blog: Blog post removed from site."
                    ]
                },
                {
                    "type": "p",
                    "text": "This status code informs bots that they should never return to crawl this content."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "500"
                },
                {
                    "type": "p",
                    "text": "TheHTTP 500 Internal Server Errorresponse code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically return a500status code for an unexpected application error. You cancreate a custom500error pagethat is statically generated at build time by creatingpages/500.js."
                },
                {
                    "type": "p",
                    "text": "Example:"
                },
                {
                    "type": "code",
                    "code": "// pages/500.jsexportdefaultfunctionCustom500(){return<h1>500 - Server-side error occurred</h1>;}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "503"
                },
                {
                    "type": "p",
                    "text": "TheHTTP 503 Service Unavailableserver error response code indicates that the server is not ready to handle the request."
                },
                {
                    "type": "p",
                    "text": "It's recommended to return this status code when your website is down and you predict that the website will be down by an extended period of time. This prevents losing rankings on a long-term basis."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "What status code indicates a page has been moved to a new URL?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/crawling-and-indexing/xml-sitemaps",
            "title": "XML Sitemaps - Crawling and Indexing | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and IndexingStatus CodesRobots.txtXML SitemapsSpecial TagsCanonical Tags",
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Status Codes",
                        "Robots.txt",
                        "XML Sitemaps",
                        "Special Tags",
                        "Canonical Tags"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Crawling and Indexing"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "XML Sitemaps"
                },
                {
                    "type": "p",
                    "text": "Sitemapsare the easiest way to communicate with Google. They indicate the URLs that belong to your website and when they update so that Google can easily detect new content and crawl your website more efficiently."
                },
                {
                    "type": "p",
                    "text": "Even though XML Sitemaps are the most known and used ones, they can also be created viaRSSorAtom, or even viaTextfiles if you prefer maximum simplicity."
                },
                {
                    "type": "p",
                    "text": "A sitemap is a file where you provide information about the pages, videos, and other files on your site, and the relationships between them. Search engines like Google read this file to more intelligently crawl your site."
                },
                {
                    "type": "p",
                    "text": "According toGoogle:"
                },
                {
                    "type": "p",
                    "text": "You might need a sitemap if:"
                },
                {
                    "type": "list",
                    "items": [
                        "Your site is really large.As a result, it's more likely Google web crawlers might overlook crawling some of your new or recently updated pages.",
                        "Your site has a large archive of content pages that are isolated or not well linked to each other.If your site pages don't naturally reference each other, you can list them in a sitemap to ensure that Google doesn't overlook some of your pages.",
                        "Your site is new and has few external links to it.Googlebot and other web crawlers navigate the web by following links from one page to another. As a result, Google might not discover your pages if no other sites link to them.",
                        "Your site has a lot of rich media content (video, images) or is shown in Google News.If provided, Google can take additional information from sitemaps into account for search, where appropriate."
                    ]
                },
                {
                    "type": "p",
                    "text": "While sitemaps are not mandatory for great search engine performance, they can facilitate crawling and indexing to bots and hence your content will be picked up faster and rank accordingly."
                },
                {
                    "type": "p",
                    "text": "It's strongly recommended to use sitemaps and make them dynamic as new content is populated across your website. Static sitemaps are also valid, but they might be less useful to Google as it won't serve for constant discovery purposes."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How to Add Sitemaps to a Next.js Project"
                },
                {
                    "type": "p",
                    "text": "There are two options:"
                },
                {
                    "type": "list",
                    "items": [
                        "ManualIf you have a relatively simple and static site, you can manually create asitemap.xmlin thepublicdirectory of your project:"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Manual"
                },
                {
                    "type": "p",
                    "text": "If you have a relatively simple and static site, you can manually create asitemap.xmlin thepublicdirectory of your project:"
                },
                {
                    "type": "code",
                    "code": "<!-- public/sitemap.xml --><xmlversion=\"1.0\"encoding=\"UTF-8\"><urlsetxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"><url><loc>http://www.example.com/foo</loc><lastmod>2021-06-01</lastmod></url></urlset></xml>"
                },
                {
                    "type": "list",
                    "items": [
                        "getServerSidePropsIt's more likely your site will be dynamic. In this case, we can leveragegetServerSidePropsto generate an XML sitemap on-demand.We can create a new page inside the pages directory such aspages/sitemap.xml.js. The goal of this page will be to hit our API to get data that will allow us to know the URLs of our dynamic pages. We will then write an XML file as the response for/sitemap.xmlHere is an example if you could try out for yourself:"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "getServerSideProps"
                },
                {
                    "type": "p",
                    "text": "It's more likely your site will be dynamic. In this case, we can leveragegetServerSidePropsto generate an XML sitemap on-demand."
                },
                {
                    "type": "p",
                    "text": "We can create a new page inside the pages directory such aspages/sitemap.xml.js. The goal of this page will be to hit our API to get data that will allow us to know the URLs of our dynamic pages. We will then write an XML file as the response for/sitemap.xml"
                },
                {
                    "type": "p",
                    "text": "Here is an example if you could try out for yourself:"
                },
                {
                    "type": "code",
                    "code": "//pages/sitemap.xml.jsconstEXTERNAL_DATA_URL='https://jsonplaceholder.typicode.com/posts';functiongenerateSiteMap(posts){return`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n     <!--We manually set the two URLs we know already-->\n     <url>\n       <loc>https://jsonplaceholder.typicode.com</loc>\n     </url>\n     <url>\n       <loc>https://jsonplaceholder.typicode.com/guide</loc>\n     </url>${posts.map(({id})=>{return`<url>\n           <loc>${`${EXTERNAL_DATA_URL}/${id}`}</loc>\n       </url>`;})\n       .join('')}\n   </urlset>`;}functionSiteMap(){// getServerSideProps will do the heavy lifting}exportasyncfunctiongetServerSideProps({res}){// We make an API call to gather the URLs for our siteconstrequest=awaitfetch(EXTERNAL_DATA_URL);constposts=awaitrequest.json();// We generate the XML sitemap with the posts dataconstsitemap=generateSiteMap(posts);res.setHeader('Content-Type','text/xml');// we send the XML to the browserres.write(sitemap);res.end();return{props:{},};}exportdefaultSiteMap;"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "What is the purpose of a sitemap?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Google:Learn about Sitemaps",
                        "Google:Overview of crawling and indexing topics"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/improve",
            "title": "Improving your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Improving your Core Web Vitals"
                },
                {
                    "type": "p",
                    "text": "Let's look at how we can improve the Core Web Vitals of our example using Next.js features."
                },
                {
                    "type": "p",
                    "text": "In this lesson, you’ll learn:"
                },
                {
                    "type": "list",
                    "items": [
                        "What Lighthouse is and how we can use it.",
                        "How to usenext/imageto automatically optimize images.",
                        "How to dynamically import libraries and components to reduce your initial JS bundle.",
                        "How to preconnect to third-party scripts.",
                        "How Next.js optimizes web font loading by default.",
                        "How to optimize loading of any third-party scripts."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/improve/dynamic-import-components",
            "title": "Dynamic Imports for Components - Improving your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Improving your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Imports for Components"
                },
                {
                    "type": "p",
                    "text": "Next, let's turn our attention to a React component that is not needed on the initial page load."
                },
                {
                    "type": "p",
                    "text": "React components can also be imported using dynamic imports, but in this case we use it in conjunction withnext/dynamicto make sure it works just like any other React Component."
                },
                {
                    "type": "p",
                    "text": "We will use this method to delay the loading of our modal with theHello Worldcode sample. By doing this we also remove two further third party libraries from the initial page load."
                },
                {
                    "type": "p",
                    "text": "Open thepages/index.jsfile and add an import fordynamicfromnext/dynamicat the beginning of the file:"
                },
                {
                    "type": "code",
                    "code": "importdynamicfrom'next/dynamic';"
                },
                {
                    "type": "p",
                    "text": "We should also remove this line:"
                },
                {
                    "type": "code",
                    "code": "importCodeSampleModalfrom'../components/CodeSampleModal';"
                },
                {
                    "type": "p",
                    "text": "We can now import it as a dynamic component by adding the following at the beginning of the file:"
                },
                {
                    "type": "code",
                    "code": "constCodeSampleModal=dynamic(()=>import('../components/CodeSampleModal'),{ssr:false,});"
                },
                {
                    "type": "p",
                    "text": "CodeSampleModalwill be the default component returned by../components/CodeSampleModal. It works like a regular React Component, and you can pass props to it as you normally would."
                },
                {
                    "type": "p",
                    "text": "As we do not need this component on the server, we have usedssr: falseto disable it."
                },
                {
                    "type": "p",
                    "text": "Next, we want to defer the loading of this component until it's required by the user. To do this, we can wrap the component in a conditional that checks if the modal should be open, and if so, it will be loaded."
                },
                {
                    "type": "p",
                    "text": "Wrap theCodeSampleModalcomponent like so:"
                },
                {
                    "type": "code",
                    "code": "{isModalOpen&&(<CodeSampleModalisOpen={isModalOpen}closeModal={()=>setIsModalOpen(false)}/>);}"
                },
                {
                    "type": "p",
                    "text": "Now, whenisModalOpenis toggled totruefor the first time, the JavaScript required will be requested."
                },
                {
                    "type": "p",
                    "text": "With these optimizations the vitals should now look healthier. Let's run another Lighthouse report in Chrome DevTools to verify."
                },
                {
                    "type": "p",
                    "text": "We are left with this two optimization suggestions:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use HTTP2: to solve this problem, we can deploy to somewhere that supports HTTP2 (e.g.Vercel).",
                        "Image elements do no have explicitwidthandheight: This is actually abug in lighthouseand does not affect site performance."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js:Dynamic Imports Documentation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/improve/dynamic-imports",
            "title": "Dynamic Imports - Improving your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Improving your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Imports"
                },
                {
                    "type": "p",
                    "text": "In this lesson, we will reduce the amount of JavaScript loaded during initial page load from third-party libraries."
                },
                {
                    "type": "p",
                    "text": "Next.js supports ES2020dynamic `import()`for JavaScript. With it, you can import JavaScript modules dynamically and work with them. They also work with server-side rendering (SSR)."
                },
                {
                    "type": "p",
                    "text": "Think of dynamic imports as another way to split your code into manageable chunks."
                },
                {
                    "type": "p",
                    "text": "Open thepages/index.jsfile and remove these two imports at the beginning of the file as we are going to dynamically import them further down the file."
                },
                {
                    "type": "code",
                    "code": "importFusefrom'fuse.js';import_from'lodash';"
                },
                {
                    "type": "p",
                    "text": "For now we also want to remove:"
                },
                {
                    "type": "code",
                    "code": "constfuse=newFuse(countries,{keys:['name'],threshold:0.3,});"
                },
                {
                    "type": "p",
                    "text": "Now that we have removed this code, let's set up the search input to use the dynamically imported libraries."
                },
                {
                    "type": "p",
                    "text": "We can replace the input with the following code:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"text\"placeholder=\"Country search...\"className={styles.input}onChange={async(e)=>{const{value}=e.currentTarget;// Dynamically load librariesconstFuse=(awaitimport('fuse.js')).default;const_=(awaitimport('lodash')).default;constfuse=newFuse(countries,{keys:['name'],threshold:0.3,});constsearchResult=fuse.search(value).map((result)=>result.item);constupdatedResults=searchResult.length?searchResult:countries;setResults(updatedResults);// Fake analytics hitconsole.info({searchedAt:_.now(),});}}/>"
                },
                {
                    "type": "p",
                    "text": "By using Dynamic Imports, this fixes the \"Remove unused JavaScript\" issue on page load. This also improves our Time to Interactive (TTI), which helps improveFirst Input Delay (FID)."
                },
                {
                    "type": "p",
                    "text": "Let's run another Lighthouse Report in Chrome DevTools to view our progress."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js:Dynamic Imports Documentation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/improve/fonts",
            "title": "Optimizing Fonts - Improving your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Improving your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Optimizing Fonts"
                },
                {
                    "type": "p",
                    "text": "82% of web pages for desktopuse web fonts. Custom fonts are important for the branding, design, and cross-browser/device consistency of your site. However, using a web font should not come at the cost of performance."
                },
                {
                    "type": "p",
                    "text": "Next.js has built-inAutomatic Webfont Optimization. By default, Next.js will automatically inline font CSS at build time, eliminating an extra round trip to fetch font declarations. This results in improvements to First Contentful Paint (FCP) and Largest Contentful Paint (LCP)."
                },
                {
                    "type": "p",
                    "text": "For example, here is the before and after of Next.js optimizing your font."
                },
                {
                    "type": "p",
                    "text": "Before optimizing, an extra network request is needed:"
                },
                {
                    "type": "code",
                    "code": "<linkhref=\"https://fonts.googleapis.com/css2?family=Inter\"rel=\"stylesheet\"/>"
                },
                {
                    "type": "p",
                    "text": "After optimizing, Next.js inlines the font CSS for you:"
                },
                {
                    "type": "code",
                    "code": "<styledata-href=\"https://fonts.googleapis.com/css2?family=Inter\">@font-face{font-family:'Inter';font-style:normal.....</style>"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/improve/images",
            "title": "Image Component and Automatic Image Optimization - Improving your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Improving your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Image Component and Automatic Image Optimization"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Unoptimized Images"
                },
                {
                    "type": "p",
                    "text": "Using regular HTML, we have added our Hero image like so:"
                },
                {
                    "type": "code",
                    "code": "<imgsrc=\"large-image.jpg\"alt=\"Large Image\"/>"
                },
                {
                    "type": "p",
                    "text": "However, this means we have to manually optimize a few things like:"
                },
                {
                    "type": "list",
                    "items": [
                        "Ensuring our image is responsive on different screen sizes.",
                        "Optimizing our images with a third-party tool or library.",
                        "Lazy-loading images as they enter the viewport"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "The Image Component"
                },
                {
                    "type": "p",
                    "text": "Next provides aImage componentthat can handle these optimizations out-of-the-box for us."
                },
                {
                    "type": "p",
                    "text": "next/imageis an extension of the HTMLimgelement, evolved for the modern web."
                },
                {
                    "type": "p",
                    "text": "This means that resizing, optimizing, and serving images in modern formats like WebP (when the browser supports it) can be done automatically usingnext/image."
                },
                {
                    "type": "p",
                    "text": "The component avoids shipping large images to devices with a smaller viewport and allows Next.js to adopt future image formats and serve those images to browsers that support them."
                },
                {
                    "type": "p",
                    "text": "Automatic Image Optimization works with any image source. Even if the image is hosted by an external data source, like a CMS, it can still be optimized."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How does Automatic Image Optimization Work?"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On-demand Optimization"
                },
                {
                    "type": "p",
                    "text": "Instead of optimizing images at build time, Next.js optimizes images on-demand as users request them. Unlike static site generators and static-only solutions, build times don't increase, whether shipping ten images or ten million images."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Lazy Loaded Images"
                },
                {
                    "type": "p",
                    "text": "Images are lazy loaded by default. Page speed won't be penalized for images housed outside of the viewport. Images only load when they come into view."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Avoids CLS"
                },
                {
                    "type": "p",
                    "text": "Images are always rendered to avoid Cumulative Layout Shift (CLS)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using the Image Component"
                },
                {
                    "type": "p",
                    "text": "Let's update the app usingnext/imageto display our hero image. The height and width props should be the desired rendering size, with an aspect ratio identical to the source image."
                },
                {
                    "type": "p",
                    "text": "Open thepages/index.jsfile and add an import forImagefromnext/imageat the beginning of the file:"
                },
                {
                    "type": "code",
                    "code": "importImagefrom'next/image';"
                },
                {
                    "type": "p",
                    "text": "Then, replace the heroimgwith theImagecomponent:"
                },
                {
                    "type": "code",
                    "code": "// Before<imgsrc=\"large-image.jpg\"alt=\"Large Image\"/>// After<Imagesrc=\"/large-image.jpg\"alt=\"Large Image\"width={3048}height={2024}/>"
                },
                {
                    "type": "p",
                    "text": "There's also an image in the footer. Let's replace this as well:"
                },
                {
                    "type": "code",
                    "code": "// Before<imgsrc=\"/vercel.svg\"alt=\"Vercel Logo\"/>// After<Imagesrc=\"/vercel.svg\"alt=\"Vercel Logo\"width={72}height={16}/>"
                },
                {
                    "type": "p",
                    "text": "Finally, run another Lighthouse report in Chrome DevTools and compare your results."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js:Automatic Image Optimization Documentation",
                        "Next.js:API Reference fornext/image"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/improve/lighthouse",
            "title": "Introducing Lighthouse - Improving your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Improving your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Introducing Lighthouse"
                },
                {
                    "type": "p",
                    "text": "As we saw in the previous section, Core Web Vitals focus on aspects of the user experience via loading performance (Largest Contentful Paint), interactivity (First Input Delay), and visual stability (Cumulative Layout Shift)."
                },
                {
                    "type": "p",
                    "text": "In this lesson, we'll focus on how to measure Core Web Vitals through the use of a simulated environment calledLighthouse."
                },
                {
                    "type": "p",
                    "text": "Note: For this lesson we will be usingChrome Dev Tools. However, there aremany waysto run Lighthouse."
                },
                {
                    "type": "p",
                    "text": "Lighthouse works by running a series of audits on a provided URL. Based on these audits, it generates a report on how well the page performed. If there are areas that need improvement, the report will provide insight on how to improve."
                },
                {
                    "type": "p",
                    "text": "Let's take a look at two examples of a Lighthouse report to see the difference between a site that has healthy Core Web Vitals and one that does not."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Optimized Example"
                },
                {
                    "type": "p",
                    "text": "To see an example of how Lighthouse works, we will use our homepage:https://nextjs.org."
                },
                {
                    "type": "list",
                    "items": [
                        "OpenChrome.",
                        "In an incognito window, navigate tohttps://nextjs.org.",
                        "Open DevTools and click onLighthousetab.",
                        "ClickGenerate Report."
                    ]
                },
                {
                    "type": "p",
                    "text": "This will now run a report which should take less than 60 seconds."
                },
                {
                    "type": "p",
                    "text": "Note: It is important to run reports in an incognito window, as third-party plugins will affect your report."
                },
                {
                    "type": "p",
                    "text": "In addition, ad blockers can block scripts from loading, which would give an incomplete audit. Consider setting a cleanpersonato measure performance."
                },
                {
                    "type": "p",
                    "text": "Here's an example report:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Unoptimized Example"
                },
                {
                    "type": "p",
                    "text": "For the purpose of this tutorial, we have created an application without any optimizations."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Project Setup"
                },
                {
                    "type": "p",
                    "text": "This is a basic unoptimized application that allows visitors to do two things: search for a country to retrieve its population and click on a button to read a pop-up modal. This application is meant to mimic the reality of working on large applications where the use of third-party libraries cannot be avoided."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Download Starter Code"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest nextjs-lighthouse --use-npm --example\"https://github.com/vercel/next-learn/tree/main/seo\""
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Run Production Build"
                },
                {
                    "type": "p",
                    "text": "To get accurate reports from Lighthouse, your application should always be tested with a production build. To run a production build, change into the project directory:"
                },
                {
                    "type": "code",
                    "code": "cdnextjs-lighthouse"
                },
                {
                    "type": "p",
                    "text": "Build your application by running `next build` and start the server inproduction modeby running `next start`."
                },
                {
                    "type": "code",
                    "code": "npmrun build&&npmrun start"
                },
                {
                    "type": "p",
                    "text": "Let's run a Lighthouse report with Chrome DevTools. Once the report has completed, let's start to optimize the site and improve the vitals."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "Why should you run Lighthouse in incognito mode?"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Google Chrome:Lighthouse Scoring Calculator"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/improve/third-party-scripts",
            "title": "Optimizing Third-Party Scripts - Improving your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web VitalsLighthouseImage OptimizationDynamic ImportsDynamic Imports for ComponentsOptimizing FontsOptimizing Third-Party Scripts",
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "Image Optimization",
                        "Dynamic Imports",
                        "Dynamic Imports for Components",
                        "Optimizing Fonts",
                        "Optimizing Third-Party Scripts"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Improving your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Optimizing Third-Party Scripts"
                },
                {
                    "type": "p",
                    "text": "Many applications rely on third-party JavaScript to include different types of functionality, such as analytics, ads, and customer support widgets. However, embedding third-party authored code can delay page content from rendering and affect user performance if it is loaded too early."
                },
                {
                    "type": "p",
                    "text": "Next.js provides a built-inScript componentthat optimizes loading for any third-party script, while giving developers the option to decide when to fetch and execute it."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using the Script Component"
                },
                {
                    "type": "p",
                    "text": "Using regular HTML, external scripts would need to be manually appended tonext/head:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';functionIndexPage(){return(<div><Head><scriptsrc=\"https://www.googletagmanager.com/gtag/js?id=123\"/></Head></div>);}"
                },
                {
                    "type": "p",
                    "text": "With the Next.js Script component, you can add it anywhere in the component without needing to usenext/head:"
                },
                {
                    "type": "code",
                    "code": "importScriptfrom'next/script';functionIndexPage(){return(<div><Scriptstrategy=\"afterInteractive\"src=\"https://www.googletagmanager.com/gtag/js?id=123\"/></div>);}"
                },
                {
                    "type": "p",
                    "text": "The Script component introduces astrategyproperty that allows you to decide when to fetch and execute a script for optimal loading. To not negatively affect Largest Contentful Paint (LCP), most third-party scripts should be deferred to load after all the contents of a page has finished loading, either immediately after the page becomes interactive (strategy=\"afterInteractive\") or lazily during browser idle time (strategy=\"lazyOnload\")."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js:Script Component",
                        "Next.js:API Reference fornext/script"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/introduction-to-seo",
            "title": "What is SEO? - Search Engine Optimization | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEOImportance of SEOSearch SystemsWhat are Webcrawlers?",
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEOImportance of SEOSearch SystemsWhat are Webcrawlers?",
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is SEO?"
                },
                {
                    "type": "p",
                    "text": "SEO stands forSearch Engine Optimization. The goal of SEO is to create a strategy that will increase your rankings position in search engine results. The higher the ranking, the more organic traffic to your site, which ultimately leads to more business for you!"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What You’ll Learn in This Course"
                },
                {
                    "type": "p",
                    "text": "In this course, we'll talk about:"
                },
                {
                    "type": "list",
                    "items": [
                        "Search Systems, and search engine robots such as Googlebot.",
                        "The impact having an SEO strategy can make on your site.",
                        "How to incorporate best SEO practices.",
                        "Crawling, indexing, rendering, and ranking with Next.js.",
                        "Web Performance topics including Core Web Vitals."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Join the Conversation"
                },
                {
                    "type": "p",
                    "text": "If you have questions about anything related to Next.js or this course, you're welcome to ask our community onDiscord."
                },
                {
                    "type": "p",
                    "text": "Let’s get started!"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/introduction-to-seo/importance-of-seo",
            "title": "Why is SEO so important? - Introduction to SEO | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEOImportance of SEOSearch SystemsWhat are Webcrawlers?",
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEOImportance of SEOSearch SystemsWhat are Webcrawlers?",
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Introduction to SEO"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why is SEO so important?"
                },
                {
                    "type": "p",
                    "text": "SEO is the key to increased conversion and confidence in your brand. Higher search ranking placement equates to more organic visitors.Search engine organic traffic– visitors who come to your site through clicking a result in a search engine – is key to many businesses for three reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Qualitative– Increased chance that visitors turn into customers.",
                        "Trustable– Higher confidence in your brand or mission.",
                        "Low-Cost– Aside from the time and effort spent, having good SEO practices that result in higher search engine ranking is free. There is no direct cost to appear in top organic search results positions."
                    ]
                },
                {
                    "type": "p",
                    "text": "Search engine optimization is different fromSearch Engine Marketing (SEM), where the content at the top of search results is 100% paid and distinguished from organic results with aSponsoredlabel."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Three Pillars of Optimization"
                },
                {
                    "type": "p",
                    "text": "The process of optimizing a website can be divided into three main pillars:"
                },
                {
                    "type": "list",
                    "items": [
                        "Technical– Optimize your website for crawling and web performance.",
                        "Creation– Create a content strategy to target specific keywords.",
                        "Popularity– Boost your site's presence online so search engines know you are a trusted source. This is done through the use ofbacklinks– third-party sites that link back to your site."
                    ]
                },
                {
                    "type": "p",
                    "text": "The SEO discipline is broad and hasmany facets, but as a Next.js developer, the first step is to understand how you can make your web app SEO-ready with some best practices."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "Why is it important to consider SEO?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/introduction-to-seo/search-systems",
            "title": "Search Systems - Introduction to SEO | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEOImportance of SEOSearch SystemsWhat are Webcrawlers?",
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEOImportance of SEOSearch SystemsWhat are Webcrawlers?",
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Introduction to SEO"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Search Systems"
                },
                {
                    "type": "p",
                    "text": "Search Systems are what you typically refer to as Search Engines (Google, Bing, DuckDuckGo, etc.). They are massively complex systems that tackle some of the biggest challenges in technology history."
                },
                {
                    "type": "p",
                    "text": "Search Systems have four main responsibilities:"
                },
                {
                    "type": "list",
                    "items": [
                        "Crawling– the process of going through the Web and parsing the content in all websites. This is a massive task as there areover 350 million domainsavailable.",
                        "Indexing– finding places to store all of the data gathered during the crawling stage so it can be accessed.",
                        "Rendering– executing any resources on the page such as JavaScript that might enhance the features and enrich content on the site. This process doesn't happen for all pages that are crawled and sometimes it happens before the content is actually indexed. Rendering might happen after indexing if there are no available resources to perform the task at the time.",
                        "Ranking– querying data to craft relevant results pages based on user input. This is where the different ranking criteria are applied in Search engines to give users the best answer to fulfill their intent."
                    ]
                },
                {
                    "type": "p",
                    "text": "In the next section, we will learn more specifically how Googlebot works. Googlebot is Google's internet crawler, the part of the search system that gathers all the information needed to create the massive database of content to serve search results."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "What happens to a page's data after it has been crawled?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/introduction-to-seo/webcrawlers",
            "title": "What are Web Crawlers? - Introduction to SEO | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEOImportance of SEOSearch SystemsWhat are Webcrawlers?",
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEOImportance of SEOSearch SystemsWhat are Webcrawlers?",
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Importance of SEO",
                        "Search Systems",
                        "What are Webcrawlers?"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Introduction to SEO"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What are Web Crawlers?"
                },
                {
                    "type": "p",
                    "text": "In order for your website to appear in search results, Google (as well as other search engines such as Bing, Yandex, Baidu, Naver, Yahoo or DuckDuckGo) use web crawlers to navigate the website to discover websites and its web pages."
                },
                {
                    "type": "p",
                    "text": "Different search engines have differentmarket sharesin each country."
                },
                {
                    "type": "p",
                    "text": "In this guide we cover Google, which is the biggest search engine in most countries. That being said, you might want to check other search engines and their guidelines, especially if your target customers are inChina,Russia,JapanorSouth Korea."
                },
                {
                    "type": "p",
                    "text": "While there are some differences when it comes to Ranking and Rendering, most search engines work in a very similar way when it comes to Crawling and Indexing."
                },
                {
                    "type": "p",
                    "text": "Web crawlers are a type of bot that emulate users and navigate through links found on the websites to index the pages. Web crawlers identify themselves using customuser-agents. Googlehas several web crawlers, but the ones that are used more often areGooglebot DesktopandGooglebot Smartphone."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How Does Googlebot Work?"
                },
                {
                    "type": "p",
                    "text": "A general overview of the process can be the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Find URLs:  Google sources URLs from many places, includingGoogle Search Console, links between websites, orXML sitemaps.",
                        "Add to Crawl Queue: These URLs are added to the Crawl Queue for the Googlebot to process. URLs in the Crawl Queue usually last seconds there, but it can be up to a few days depending on the case, especially if the pages need to be rendered, indexed, or – if the URL is already indexed – refreshed. The pages will then enter theRender Queue.",
                        "HTTP Request: The crawler makes an HTTP request to get the headers and acts according to the returned status code:200- it crawls and parses the HTML.30X- it follows the redirects.40X- it will note the error and not load the HTML50X- it may come back later to check if the status code has changed.",
                        "200- it crawls and parses the HTML.",
                        "30X- it follows the redirects.",
                        "40X- it will note the error and not load the HTML",
                        "50X- it may come back later to check if the status code has changed.",
                        "Render Queue: The different services and components of the search system process the HTML and parse the content. If the page has some JavaScript client-side based content, the URLs might be added to a Render Queue. Render Queue is more costly for Google as it needs to use more resources to render JavaScript and therefore URLs rendered are a smaller percentage over the total pages out there on the internet. Some other search engines might not have the same rendering capacity as Google, and this is where Next.js can help with your rendering strategy.",
                        "Ready to be indexed: If all criteria are met, the pages may be eligible to be indexed and shown in search results."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "200- it crawls and parses the HTML.",
                        "30X- it follows the redirects.",
                        "40X- it will note the error and not load the HTML",
                        "50X- it may come back later to check if the status code has changed."
                    ]
                },
                {
                    "type": "p",
                    "text": "In the next few sections, we will take a deep dive into each of the main components of a search system's processes:crawling and indexing, andrendering and ranking."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "How can you identify if a user on your site is a web crawler?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Google:SEO Starter Guide",
                        "MDN:MDN:  User-Agents"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/monitor",
            "title": "Monitoring your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Monitoring your Core Web Vitals"
                },
                {
                    "type": "p",
                    "text": "Once you have optimized your site, it's important to monitor while in production so you can continue to iterate. When monitoring Core Web Vitals, tracking over time is key rather than relying on one-off lab tests."
                },
                {
                    "type": "p",
                    "text": "In this lesson, you’ll learn more about:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Next.js Custom Reporting",
                        "CrUX Report",
                        "Other tools for measurement"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/monitor/conclusion",
            "title": "Congratulations! | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Congratulations!"
                },
                {
                    "type": "p",
                    "text": "Great job!"
                },
                {
                    "type": "p",
                    "text": "You have finished the Search Engine Optimization and Core Web Vitals course!"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Recommended Next Steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Share: Let us know that you've leveled up your SEO and Core Web Vitals knowledge through use of this tutorial onTwitter. Let us know of any feedback you have.",
                        "Join the conversation: If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub DiscussionsandDiscord."
                    ]
                },
                {
                    "type": "p",
                    "text": "Share: Let us know that you've leveled up your SEO and Core Web Vitals knowledge through use of this tutorial onTwitter. Let us know of any feedback you have."
                },
                {
                    "type": "p",
                    "text": "Join the conversation: If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub DiscussionsandDiscord."
                },
                {
                    "type": "p",
                    "text": "Thanks toGary MeehanandEsteve Castellsfor helping creating this course."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/monitor/custom-reporting",
            "title": "Custom Reporting - Monitoring your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Monitoring your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Custom Reporting"
                },
                {
                    "type": "p",
                    "text": "It is also possible to use the built-in relayer Next.js Speed Insights uses and send the data to your own service or push them to Google Analytics."
                },
                {
                    "type": "p",
                    "text": "Let's look at how we might add that now. We can add it to the demo app we have been optimizing."
                },
                {
                    "type": "p",
                    "text": "We will use aconsole.logto look at the metrics in real time."
                },
                {
                    "type": "p",
                    "text": "To do this we can leverage thereportWebVitalsfunction provided by Next.js"
                },
                {
                    "type": "p",
                    "text": "Note:This is NOT necessary if you’ve just finished the previous lessons."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest nextjs-lighthouse --use-npm --example\"https://github.com/vercel/next-learn/tree/main/seo\""
                },
                {
                    "type": "p",
                    "text": "Openpages/_app.jsand export the following function:"
                },
                {
                    "type": "code",
                    "code": "exportfunctionreportWebVitals(metric){console.log(metric);}"
                },
                {
                    "type": "p",
                    "text": "Then build and start your application:"
                },
                {
                    "type": "code",
                    "code": "npmrun build&&npmrun start"
                },
                {
                    "type": "p",
                    "text": "If you open up Chrome, you will see the metrics inside the DevTools console. You will also notice thatFIDwill only trigger once you interact with the page."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js:Measuring Performance"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/monitor/data-studio",
            "title": "Data Studio (Chrome User Experience Report) - Monitoring your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Monitoring your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Data Studio (Chrome User Experience Report)"
                },
                {
                    "type": "p",
                    "text": "Another great free and open-source way of measuring your performance is to use theChrome User Experience Reportdataset."
                },
                {
                    "type": "p",
                    "text": "TheChrome User Experience Reportprovides user experience metrics for how real-world Chrome users experience popular destinations on the web."
                },
                {
                    "type": "p",
                    "text": "This dataset is publicly availableunder BigQueryand you can also consume it underGoogle Data Studiocompletely for free."
                },
                {
                    "type": "p",
                    "text": "Luckily for you, there areopen-source dashboards availablethat you can use as a template for tracking the performance of your website."
                },
                {
                    "type": "p",
                    "text": "The only downside of this dataset is that, in order for your website to be included in the CrUX report, it will need to have a meaningful amount of visits otherwise it won't be included in the report due to lack of data. Hence this it may not the best option for work-in-progress or recently created websites."
                },
                {
                    "type": "p",
                    "text": "Also, the data is updated on a monthly basis. Usually around 15 days after the month is finished, so you will see the data with certain delay and that might not be the most practical thing if you plan to work on improving your Core Web Vitals scores."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Google:Example Dashboard (copy for free)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/monitor/nextjs-speed-insights",
            "title": "Next.js Speed Insights - Monitoring your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Monitoring your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next.js Speed Insights"
                },
                {
                    "type": "p",
                    "text": "Next.js Speed Insightsallows you to analyze and measure the performance of pages using Core Web Vitals."
                },
                {
                    "type": "p",
                    "text": "You can start collecting yourReal Experience Scorewith zero-configuration onVercel deployments."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/monitor/other-tools",
            "title": "Other Tools - Monitoring your Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web VitalsNext.js Speed InsightsCustom ReportingData StudioOther ToolsWhat To Learn Next",
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js Speed Insights",
                        "Custom Reporting",
                        "Data Studio",
                        "Other Tools",
                        "What To Learn Next"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Monitoring your Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Other Tools"
                },
                {
                    "type": "p",
                    "text": "You can find field data collection in the following tools:"
                },
                {
                    "type": "list",
                    "items": [
                        "PageSpeed Insights: Google's Page Speed measurement tool.",
                        "Chrome User Experience Report: Field data open-source dataset.",
                        "Search Console: Google Search, Core Web Vitals report."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you are looking for lab data, Google also offers several measurement tools:"
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse: Google's open-source, automated tool for improving the quality of web pages.",
                        "Chrome DevTools: Set of web developer tools built directly into the Google Chrome browser."
                    ]
                },
                {
                    "type": "p",
                    "text": "Note that for both tools, you will need to useTotal Blocking Time (TBT)as an alternative toFirst Input Delay (FID)since FID can only be measured through field data."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "When is the best time to track performance?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/rendering-and-ranking",
            "title": "Rendering and Ranking | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rendering and Ranking"
                },
                {
                    "type": "p",
                    "text": "JavaScript is an important part of the web development ecosystem. In the past, most programming languages were sending all content directly from the server."
                },
                {
                    "type": "p",
                    "text": "With technology like JavaScript, fetching information from the browser became more popular than ever. This, in turn, affected search engines and their ability to understand pages, as most bots were only parsing the initial HTML from the server and loading it to the browser."
                },
                {
                    "type": "p",
                    "text": "In this lesson, we'll talk about:"
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering strategies, such as Client-Side Rendering (CSR), Incremental Static Regeneration (ISR), Static Site Generation (SSG), and Server-Side Rendering (SSR).",
                        "How URL structure can impact SEO ranking.",
                        "Incorporating headings and internal links to optimize your search engine results page ranking."
                    ]
                },
                {
                    "type": "p",
                    "text": "Let's dive in!"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/rendering-and-ranking/amp",
            "title": "What about AMP? - Rendering | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rendering"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What about AMP?"
                },
                {
                    "type": "p",
                    "text": "In 2016, Google began givingsearch ranking preferenceto web pages usingAMP– a technology that enables developers to create web pages that load faster on mobile devices – at the cost of building and maintaining them over time."
                },
                {
                    "type": "p",
                    "text": "With theCore Web Vitalspage experience update, Googledropped AMP pages as a requirementto appear in search carousels. This is one of the last main benefits that Google had for AMP in terms of SEO purposes."
                },
                {
                    "type": "p",
                    "text": "Since the introduction of AMP, newer technology, such as Next.js, has proven its ability to improve website experience without sacrificing Developer Experience (DX)."
                },
                {
                    "type": "p",
                    "text": "While Next.js offersAMP support, consider weighing the costs and benefits of having an AMP implementation in your website if it already has great Core Web Vitals scores."
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/rendering-and-ranking/metadata",
            "title": "Metadata - Rendering and Ranking | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rendering and Ranking"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Metadata"
                },
                {
                    "type": "p",
                    "text": "Metadata is the abstract of the website's content and is used to attach a title, a description, and an image to the site."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Title"
                },
                {
                    "type": "p",
                    "text": "The title tag is one of the most important SEO elements for two main reasons:"
                },
                {
                    "type": "p",
                    "text": "Firstly, it's what users see when they click to enter your website from search results."
                },
                {
                    "type": "p",
                    "text": "Secondly, it's one of the main elements Google uses to understand what your page is about. Using keywords in the title is recommended because it usually leads to increased improved ranking positions in search engines."
                },
                {
                    "type": "p",
                    "text": "Here's an example:"
                },
                {
                    "type": "code",
                    "code": "<title>iPhone 12 XS Max For Sale in Colorado - Big Discounts | Apple</title>"
                },
                {
                    "type": "p",
                    "text": "This page contains all the main keywords and also makes it attractive for users showing a clear value proposition: Discounts!"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Description"
                },
                {
                    "type": "p",
                    "text": "The description meta tag is another important SEO element, but less so than the title. According to Google, this element is not taken into account for ranking purposes, but it can affect your click-through-rate on search results."
                },
                {
                    "type": "p",
                    "text": "Use the description meta tag to complement the information in your title. Work in more keywords to the content here if there are some that didn't fit in the title. These keywords will appear in bold if a user's search contains them."
                },
                {
                    "type": "p",
                    "text": "An example of a description meta tag in HTML:"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"description\"content=\"Check out iPhone 12 XR Pro and iPhone 12 Pro Max. Visit your local store and for expert advice.\"/>"
                },
                {
                    "type": "p",
                    "text": "This how it looks on the page when it's part of the search engine results page (SERP):"
                },
                {
                    "type": "p",
                    "text": "In Next.js, we set the title and description in theHeadcomponent. This is how meta title and description tags might look like in Next.js:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';functionIndexPage(){return(<div><Head><title>iPhone 12 XS Max For Sale in Colorado - Big Discounts | Apple</title><metaname=\"description\"content=\"Check out iPhone 12 XR Pro and iPhone 12 Pro Max. Visit your local store and for expert advice.\"key=\"desc\"/></Head><h1>iPhones for Sale</h1><p>insert a list of iPhones for sale.</p></div>);}exportdefaultIndexPage;"
                },
                {
                    "type": "p",
                    "text": "TheHeadcomponent can be used on any page in your application to describe or provide information about the page's contents."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Open Graph"
                },
                {
                    "type": "p",
                    "text": "TheOpen Graph protocol, originally developed by Facebook, standardizes how metadata is used on any given web page. You can provide as little or as much information as you would like, but all of the open graph pieces fit together to create a representation of the site it's attached to."
                },
                {
                    "type": "p",
                    "text": "Other social media companies (like Pinterest, Twitter, LinkedIn, etc), may also use open graph for displaying rich cards when sharing a URL. Twitter also has tags of itsTwitter Cards."
                },
                {
                    "type": "p",
                    "text": "While these Open Graph tags have a lot of similarities with SEO related tags, they do not offer any benefit to search engine rankings, but they are still recommended to use as people might share your content on social media or private messaging tools such as WhatsApp or Telegram."
                },
                {
                    "type": "p",
                    "text": "You can add Open Graph tags by defining the `property` attribute in the meta tags inside theHeadcomponent. For example:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';functionIndexPage(){return(<div><Head><title>Cool Title</title><metaname=\"description\"content=\"Checkout our cool page\"key=\"desc\"/><metaproperty=\"og:title\"content=\"Social Title for Cool Page\"/><metaproperty=\"og:description\"content=\"And a social description for our cool page\"/><metaproperty=\"og:image\"content=\"https://example.com/images/cool-page.jpg\"/></Head><h1>Cool Page</h1><p>This is a cool page. It has lots of cool content!</p></div>);}exportdefaultIndexPage;"
                },
                {
                    "type": "p",
                    "text": "Having a shareable link that offers a description and title, along with a picture that represents the page's content does not have a direct effect on SEO rankings, but it indirectly increases the clickability of the link, which will ultimately lead to more visitors to your site."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Structured Data and JSON-LD"
                },
                {
                    "type": "p",
                    "text": "Structured data facilitates the understanding of your pages to search engines. Over the years, there have been several vocabularies in place, but currently the main one isschema.org."
                },
                {
                    "type": "p",
                    "text": "According to the website, schema.org is a \"collaborative, community activity with a mission to create, maintain, and promote schemas for structured data on the Internet, on web pages, in email messages, and beyond.\""
                },
                {
                    "type": "p",
                    "text": "Schema.org's vocabulary can be used with many different encodings, includingRDFa,Microdata, andJSON-LD."
                },
                {
                    "type": "p",
                    "text": "Different search engines might adapt different vocabularies within schema.org, and no search engine covers all the use cases described the website's vocabulary. Be sure to check which vocabularies are accepted in each case."
                },
                {
                    "type": "p",
                    "text": "An example of a what a product page might look like adding the JSON-LD product schema data:"
                },
                {
                    "type": "code",
                    "code": "importHeadfrom'next/head';functionProductPage(){functionaddProductJsonLd(){return{__html:`{\n      \"@context\": \"https://schema.org/\",\n      \"@type\": \"Product\",\n      \"name\": \"Executive Anvil\",\n      \"image\": [\n        \"https://example.com/photos/1x1/photo.jpg\",\n        \"https://example.com/photos/4x3/photo.jpg\",\n        \"https://example.com/photos/16x9/photo.jpg\"\n       ],\n      \"description\": \"Sleeker than ACME's Classic Anvil, the Executive Anvil is perfect for the business traveler looking for something to drop from a height.\",\n      \"sku\": \"0446310786\",\n      \"mpn\": \"925872\",\n      \"brand\": {\n        \"@type\": \"Brand\",\n        \"name\": \"ACME\"\n      },\n      \"review\": {\n        \"@type\": \"Review\",\n        \"reviewRating\": {\n          \"@type\": \"Rating\",\n          \"ratingValue\": \"4\",\n          \"bestRating\": \"5\"\n        },\n        \"author\": {\n          \"@type\": \"Person\",\n          \"name\": \"Fred Benson\"\n        }\n      },\n      \"aggregateRating\": {\n        \"@type\": \"AggregateRating\",\n        \"ratingValue\": \"4.4\",\n        \"reviewCount\": \"89\"\n      },\n      \"offers\": {\n        \"@type\": \"Offer\",\n        \"url\": \"https://example.com/anvil\",\n        \"priceCurrency\": \"USD\",\n        \"price\": \"119.99\",\n        \"priceValidUntil\": \"2020-11-20\",\n        \"itemCondition\": \"https://schema.org/UsedCondition\",\n        \"availability\": \"https://schema.org/InStock\"\n      }\n    }`,};}return(<div><Head><title>My Product</title><metaname=\"description\"content=\"Super product with free shipping.\"key=\"desc\"/><scripttype=\"application/ld+json\"dangerouslySetInnerHTML={addProductJsonLd()}key=\"product-jsonld\"/></Head><h1>My Product</h1><p>Super product for sale.</p></div>);}exportdefaultProductPage;"
                },
                {
                    "type": "p",
                    "text": "In this example, the data is hardcoded as a string, but you can easily pass the data to the `addProductJsonLd` method to make it fully dynamic."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "Which of the following is used on social media?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Open Graph Protocol:Documentation",
                        "Google:Intro to Structured Data",
                        "Google:Product Structured Data",
                        "Google Search:Rich Results Tester"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/rendering-and-ranking/on-page-seo",
            "title": "On Page SEO - Rendering and Ranking | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rendering and Ranking"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "On Page SEO"
                },
                {
                    "type": "p",
                    "text": "At a high level, on page SEO refers to the headings and links that make up the overall structure of the page. Headings indicate importance in the document and links connect the web together."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Headings and H1"
                },
                {
                    "type": "p",
                    "text": "Headings help users understand the structure of a page and what they are going to read in the next paragraphs. They also facilitate the search engine's job of understanding which parts of the page are the most important."
                },
                {
                    "type": "p",
                    "text": "Headings go from 1-6 and Heading 1 tends to be thought of as the most important. It's recommended to use the H1 heading tag in each page. H1 should represent what the page is about and be similar to yourtitletag."
                },
                {
                    "type": "code",
                    "code": "functionPage(){return<h1>Your Main Page Heading</h1>;}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Internal Links"
                },
                {
                    "type": "p",
                    "text": "The internet is connected by links. Without links from one website to another, the internet probably wouldn't exist. Websites that receive more links tend to represent websites that are more trusted by users."
                },
                {
                    "type": "p",
                    "text": "Google started this principle with the invention of thePageRank Algorithm."
                },
                {
                    "type": "p",
                    "text": "The PageRank algorithm, at a high level, is an algorithm that goes through every link on a database and scores domains based on how many links they receive (quantity) and from which domains (quality). Lots of links from spam websites most likely have little to no value."
                },
                {
                    "type": "p",
                    "text": "A link from a big national press website, however, is likely very valuable for search engines. This is why links are important and you should always include them both internally between your page, and also externally to other websites. Links always need to use `href` in order to be used for PageRank calculations."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "next/link"
                },
                {
                    "type": "p",
                    "text": "Next.js provides theLinkcomponentthat enables client-side transitions between routes. A simple use case would look something like the following:"
                },
                {
                    "type": "code",
                    "code": "functionNavLink({href,name}){return(<Linkhref={href}><a>{name}</a></Link>);}exportdefaultNavLink;"
                },
                {
                    "type": "p",
                    "text": "Thehrefprop is required and will correctly add the link to the anchor tag, which is vital for SEO. When Google crawls a page, it will crawl and follow this link without relying on JavaScript."
                },
                {
                    "type": "p",
                    "text": "However, if the child ofLinkis a custom component that wraps anatag, you must addpassHreftoLink. This is necessary if you’re using libraries likestyled-components. Without this, theatag will not have thehrefattribute, which affects your site’s SEO."
                },
                {
                    "type": "p",
                    "text": "How to usepassHref:"
                },
                {
                    "type": "code",
                    "code": "importLinkfrom'next/link';importstyledfrom'styled-components';// This creates a custom component that wraps an <a> tagconstRedLink=styled.a`color:red;`;functionNavLink({href,name}){// Must add passHref to Linkreturn(<Linkhref={href}passHref><RedLink>{name}</RedLink></Link>);}exportdefaultNavLink;"
                },
                {
                    "type": "p",
                    "text": "If you use ESLint, Next.js has a rule to protect against this happening."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "Why are headings important for SEO?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "next/linkdocumentation",
                        "eslint-plugin-nextdocumentation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/rendering-and-ranking/rendering-strategies",
            "title": "Rendering Strategies - Rendering and Ranking | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rendering and Ranking"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rendering Strategies"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static Site Generation (SSG)"
                },
                {
                    "type": "p",
                    "text": "Static site generationis where your HTML is generated at build time. This HTML is then used for each request. Static site generation is probably the best type of rendering strategy for SEO as not only do you have all the HTML on page load because it'spre-rendered, but it also helps with page performance – now another ranking factor when it comes to SEO."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server-Side Rendering (SSR)"
                },
                {
                    "type": "p",
                    "text": "Like SSG,Server-Side Rendering(SSR) is pre-rendered, which also makes it great for SEO. Instead of being generated at build time, as in SSG, SSR's HTML is generated at request time. This is great for when you have pages that are very dynamic."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Incremental Static Regeneration (ISR)"
                },
                {
                    "type": "p",
                    "text": "If you have a very large amount of pages, generating them all at build time may not be feasible. Next.js allows you to create or update static pages after you have built your site."
                },
                {
                    "type": "p",
                    "text": "Incremental Static Regenerationenables developers and content editors to use static generation on a per-page basis, without needing to rebuild the entire site. With ISR, you can retain the benefits of static while scaling to millions of pages."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client Side Rendering (CSR)"
                },
                {
                    "type": "p",
                    "text": "Client-Side Renderingallows developers to make their websites entirely rendered in the browser with JavaScript. On initial page load a single HTML file is generally served with little to no content until you fetch the JavaScript and the browser compiles everything."
                },
                {
                    "type": "p",
                    "text": "As we commented above, in general Client-Side Rendering isnotrecommended for optimal SEO."
                },
                {
                    "type": "p",
                    "text": "CSR is perfect for data heavy dashboards, account pages or any page that you do not require to be in any search engine index."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Summary"
                },
                {
                    "type": "p",
                    "text": "The most important thing for SEO is that page data and metadata is available on page load without JavaScript. In this case SSG or SSR are going to be your best options."
                },
                {
                    "type": "p",
                    "text": "One of the major strengths of Next.js is that each one of the above rendering methods can be done on a per-page basis. You might want your blog posts statically generated, your customers account dashboard client side rendered and then perhaps you have a news feed you want to server-side render."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js:Data Fetching",
                        "Smashing Magazine:A Complete Guide to Incremental Static Regeneration with Next.js",
                        "Vercel:Next.js: Server-side Rendering vs. Static Generation"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "Which of the following is good for SEO?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/rendering-and-ranking/url-structure",
            "title": "URL Structure - Rendering and Ranking | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and RankingRendering StrategiesWhat About AMP?URL StructureMetadataOn Page SEO",
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO",
                        "Performance & Core Web Vitals",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Strategies",
                        "What About AMP?",
                        "URL Structure",
                        "Metadata",
                        "On Page SEO"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rendering and Ranking"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "URL Structure"
                },
                {
                    "type": "p",
                    "text": "URL Structure is an important part of an SEO strategy. While Google doesn't disclose which weight each part of SEO has, great URLs are considered a best practice no matter if they are a big or small ranking factor in the end."
                },
                {
                    "type": "p",
                    "text": "You might want to follow some principles:"
                },
                {
                    "type": "list",
                    "items": [
                        "Semantic: It's best to use URLs that are semantic, meaning that they use words instead of IDs or random numbers. Example:/learn/basics/create-nextjs-appis better than/learn/course-1/lesson-1",
                        "Patterns that are logical and consistent: URLs should follow some sort of pattern that is consistent among pages. For example, you want to have a folder that groups all product pages, instead of having different paths for each product that you have.",
                        "Keyword focused: Google still bases a considerable part of their systems on the keywords a website contains. You might want to use keywords in your URLs to facilitate understanding the purpose of the pages.",
                        "Not parameter-based: Using parameters to build your URLs is generally not a good idea. They are not semantic in most cases, and search engines might confuse them and demote their rankings in results."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "How are Routes Defined in Next.js?"
                },
                {
                    "type": "p",
                    "text": "Next.js usesfile-system routingbuilt on the concept ofpages. When a file is added to thepagesdirectory, it is automatically available as a route. The files and folders inside thepagesdirectory can be used to define most common patterns."
                },
                {
                    "type": "p",
                    "text": "Let's take a look at a couple of simple URLs and how you would add them to your Next.js router:"
                },
                {
                    "type": "list",
                    "items": [
                        "Homepage:https://www.example.com→pages/index.js",
                        "Listings:https://www.example.com/products→pages/products.jsorpages/products/index.js",
                        "Detail:https://www.example.com/products/product→pages/products/product.js"
                    ]
                },
                {
                    "type": "p",
                    "text": "For a blog or e-commerce site you will likely want to use the product ID or blog name as the slug for the URL. This is calleddynamic routing:"
                },
                {
                    "type": "list",
                    "items": [
                        "Product:https://www.example.com/products/nextjs-shirt→pages/products/[product].js",
                        "Blog:https://www.example.com/blog/seo-in-nextjs→pages/blog/[blog-name].js"
                    ]
                },
                {
                    "type": "p",
                    "text": "To use dynamic routing, you can add brackets to a page name inside yourproductsorblogssubfolder."
                },
                {
                    "type": "p",
                    "text": "Here's an example of a page optimized for this using SSG:"
                },
                {
                    "type": "code",
                    "code": "// pages/blog/[slug].jsimportHeadfrom'next/head';exportasyncfunctiongetStaticPaths(){// Call an external API endpoint to get postsconstres=awaitfetch('https://www.example.com/api/posts');constposts=awaitres.json();// Get the paths we want to pre-render based on postsconstpaths=posts.map((post)=>({params:{slug:post.slug},}));// Set fallback to blocking. Now any new post added post build will SSR// to ensure SEO. It will then be static for all subsequent requestsreturn{paths,fallback:'blocking'};}exportasyncfunctiongetStaticProps({params}){constres=awaitfetch(`https://www.example.com/api/blog/${params.slug}`);constdata=awaitres.json();return{props:{blog:data,},};}functionBlogPost({blog}){return(<><Head><title>{blog.title}| My Site</title></Head><div><h1>{blog.title}</h1><p>{blog.text}</p></div></>);}exportdefaultBlogPost;"
                },
                {
                    "type": "p",
                    "text": "Here's another example using SSR:"
                },
                {
                    "type": "code",
                    "code": "// pages/blog/[slug].jsimportHeadfrom'next/head';functionBlogPost({blog}){return(<div><Head><title>{blog.title}| My Site</title></Head><div><h1>{blog.title}</h1><p>{blog.text}</p></div></div>);}exportasyncfunctiongetServerSideProps({query}){constres=awaitfetch(`https://www.example.com/api/blog/${query.slug}`);constdata=awaitres.json();return{props:{blog:data,},};}exportdefaultBlogPost;"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js:Introduction to Routing",
                        "Next.js:Pages",
                        "Next.js:Dynamic Routing"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/web-performance",
            "title": "Web Performance & Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Web Performance & Core Web Vitals"
                },
                {
                    "type": "p",
                    "text": "Web Vitalsis an initiative created by Google to provide unified guidance and metrics to measure end-user page experience on the web."
                },
                {
                    "type": "p",
                    "text": "Core Web Vitalsis a subset of Web Vitals, and currently consists of three metrics that measure loading, interactivity, and visual stability. These metrics areLargest Contentful Paint (LCP),First Input Delay (FID), andCumulative Layout Shift (CLS)."
                },
                {
                    "type": "p",
                    "text": "Achieving a great score in these three metrics will create a smoother website experience for your users."
                },
                {
                    "type": "p",
                    "text": "Websites scoring poorly in each of the Core Web Vitals metrics will impact its search engine ranking as Google starts to useCore Web Vitals as a ranking factorfor their search algorithm. Poor vitals can have an impact on your web traffic and business."
                },
                {
                    "type": "p",
                    "text": "In this lesson, you’ll learn:"
                },
                {
                    "type": "list",
                    "items": [
                        "A short background on Core Web Vitals.",
                        "Implications of Core Web Vitals in SEO and UX, and its impact on your website.",
                        "Why you should care about Core Web Vitals in your development process and how to measure them.",
                        "How to improve your Core Web Vitals with Next.js and monitor changes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/web-performance/cls",
            "title": "Cumulative Layout Shift (CLS) - Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Cumulative Layout Shift (CLS)"
                },
                {
                    "type": "p",
                    "text": "TheCumulative Layout Shift (CLS)metric is a measure of your site’s overall layout stability. A site that unexpectedly shifts layout as the page loads can lead to accidental user error and distraction."
                },
                {
                    "type": "p",
                    "text": "Cumulative Layout Shift (CLS) occurs when elements have been shifted after initially being rendered by the DOM. Here, a button was rendered to the screen after the text block, causing the block to shift downward. A combination of impact and distance is considered when calculating CLS."
                },
                {
                    "type": "p",
                    "text": "Each element’s individual layout shift score is only counted toward CLS if unexpected movement occurs. If a new element is added to the DOM or an existing element changes size, it doesn’t count toward layout shift if the loaded elements maintain their position."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "What are the three Core Web Vitals metrics?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Google:Cumulative Layout Shift Documentation",
                        "Vercel:Blog:  Core Web Vitals - Cumulative Layout Shift"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/web-performance/fid",
            "title": "First Input Delay (FID) - Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "First Input Delay (FID)"
                },
                {
                    "type": "p",
                    "text": "TheFirst Input Delay (FID)metric is the perception of an end user’s experience while interacting with a web page. Imagine clicking inside an input box only for nothing to happen – this frustration with the interactivity and responsiveness of a site is caused by large input delays."
                },
                {
                    "type": "p",
                    "text": "FID requires real user data and cannot be measured in the lab (e.g. Google Lighthouse). However, theTotal Blocking Time (TBT)metric is lab-measurable and captures issues that affect interactivity."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "What does First Input Delay (FID) measure?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Google:First Input Delay Documentation",
                        "Vercel:Blog:  Core Web Vitals - First Input Delay"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/web-performance/lcp",
            "title": "Largest Contentful Paint (LCP) - Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Largest Contentful Paint (LCP)"
                },
                {
                    "type": "p",
                    "text": "TheLargest Contentful Paint (LCP)metric looks at the loading performance of your page. LCP measures the time it takes to get the largest element on the page visible within the viewport. This could be a large text block, video, or image that takes up the primary real estate on the page."
                },
                {
                    "type": "p",
                    "text": "Note:This is notFirst Contentful Paint (FCP), which measures the time from when the page begins to load to when the first element is rendered on screen."
                },
                {
                    "type": "p",
                    "text": "As the DOM is rendered, the largest element on the page may change. The Largest Contentful Paint doesn't stop counting until the largest image or element is seen on-screen."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "What does Largest Contentful Paint (LCP) measure?"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Google:Largest Contentful Paint Documentation",
                        "Vercel:Blog: Core Web Vitals - Largest Contentful Paint"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/web-performance/seo-impact",
            "title": "SEO Impact - Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "SEO Impact"
                },
                {
                    "type": "p",
                    "text": "The main objective of Google's search engine is to give users the best results possible while taking localization and misspellings into account. In every case, Google cares about giving users a fast and smooth result with great website experience."
                },
                {
                    "type": "p",
                    "text": "Web page speedon mobile devices has been a ranking factor since 2018. However, it's not been clear what specific performance metrics the Google Search algorithm uses as part of ranking until now."
                },
                {
                    "type": "p",
                    "text": "This changed in June 2021, when Google provideda set of specific metrics and rangesto analyze and optimize your performance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Lighthouse (v6) Weights for Vitals"
                },
                {
                    "type": "p",
                    "text": "The three metrics are not necessarily valued equally. InLighthouse, different weights are assigned to each of the Core Web Vitals:"
                },
                {
                    "type": "list",
                    "items": [
                        "Largest Contentful Paint: 25%",
                        "Total Blocking Time*: 25%",
                        "First Contentful Paint: 15%",
                        "Speed Index: 15%",
                        "Time to Interactive: 15%",
                        "Cumulative Layout Shift: 5%"
                    ]
                },
                {
                    "type": "p",
                    "text": "*This is similar toFirst Input Delay."
                },
                {
                    "type": "p",
                    "text": "Note:The Google ranking impact will be the same for all pages in the good range for all Core Web Vitals, regardless of their individual Core Web Vitals scores."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "UX Impact"
                },
                {
                    "type": "p",
                    "text": "Most conversations around Core Web Vitals are primarily focused on SEO."
                },
                {
                    "type": "p",
                    "text": "While it's true that Core Web Vitals are an initiative designed to measure and push the improvement of page experience and search ranking, it's the users who ultimately benefit from these changes."
                },
                {
                    "type": "p",
                    "text": "Core Web Vitals help to strive for the best page experience. According to astudy performed by Amazon in 2012, one additional second of load time could potentially cost the company 1.6 billion USD. Studies like this showcase the importance of a great page experience and a fast website, both of which Core Web Vitals help to achieve."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Further Reading"
                },
                {
                    "type": "list",
                    "items": [
                        "Chromium:The Science Behind Web Vitals"
                    ]
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        },
        {
            "url": "https://nextjs.org/learn/seo/web-performance/vitals-overview",
            "title": "Overview - Core Web Vitals | Learn Next.js",
            "content": [
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Create your first app"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a Next.js App",
                        "Navigate Between Pages",
                        "Assets, Metadata, and CSS",
                        "Pre-rendering and Data Fetching",
                        "Dynamic Routes",
                        "API Routes",
                        "Deploying Your Next.js App"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Search Engine Optimization"
                },
                {
                    "type": "list",
                    "items": [
                        "Introduction to SEO",
                        "Crawling and Indexing",
                        "Rendering and Ranking",
                        "Performance & Core Web VitalsVitals OverviewLargest Contentful PaintFirst Input DelayCumulative Layout ShiftSEO Impact",
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact",
                        "Improving your Core Web Vitals",
                        "Monitoring your Core Web Vitals"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitals Overview",
                        "Largest Contentful Paint",
                        "First Input Delay",
                        "Cumulative Layout Shift",
                        "SEO Impact"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Core Web Vitals"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Overview"
                },
                {
                    "type": "p",
                    "text": "In this lesson, we will go through the different metrics, the impact thatCore Web Vitalscan have on your SEO, and the importance they have over your user experience."
                },
                {
                    "type": "p",
                    "text": "There are three different values when measuring Core Web Vitals:\"Good\",\"Needs Improvement\", and\"Poor\". These values differ based on the vital being measured:"
                },
                {
                    "type": "p",
                    "text": "You can approach Core Web Vitals in two different ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Try to achieve the highest score possible on each metric. Striving for perfection is great, but it might be tricky on large websites with many dependencies.",
                        "Benchmark against competitors in your industry. You are not competing with every perfectly optimized website in Google search, but with others ranking for your target keywords."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Next Steps"
                },
                {
                    "type": "p",
                    "text": "In the following lessons, we will go through each vital to understand what it measures."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quick Review"
                },
                {
                    "type": "p",
                    "text": "What is measured by Core Web Vitals?"
                },
                {
                    "type": "p",
                    "text": "Was this helpful?"
                }
            ]
        }
    ]
}