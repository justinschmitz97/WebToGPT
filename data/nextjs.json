{
    "name": "https://nextjs.org",
    "url": "https://https://nextjs.org",
    "pages": [
        {
            "url": "https://nextjs.org/docs",
            "title": "Introduction | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications. Some of the main Next.js features include: On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut ( Ctrl+K or Cmd+K ). To get started, check out the Installation guide. Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router features. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs. Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out our React Foundations Course , which will introduce you to the fundamentals. Then, learn more about Next.js by building a dashboard application . For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver. If you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions , Discord , X (Twitter) , and Reddit ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/accessibility",
            "title": "Architecture: Accessibility | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The Next.js team is committed to making Next.js accessible to all developers (and their end-users). By adding accessibility features to Next.js by default, we aim to make the Web more inclusive for everyone. When transitioning between pages rendered on the server (e.g. using the <a href> tag) screen readers and other assistive technology announce the page title when the page loads so that users understand that the page has changed. In addition to traditional page navigations, Next.js also supports client-side transitions for improved performance (using next/link ). To ensure that client-side transitions are also announced to assistive technology, Next.js includes a route announcer by default. The Next.js route announcer looks for the page name to announce by first inspecting document.title , then the <h1> element, and finally the URL pathname. For the most accessible user experience, ensure that each page in your application has a unique and descriptive title. Next.js provides an integrated ESLint experience out of the box, including custom rules for Next.js. By default, Next.js includes eslint-plugin-jsx-a11y to help catch accessibility issues early, including warning on:"
                },
                {
                    "type": "list",
                    "items": [
                        "aria-props",
                        "aria-proptypes",
                        "aria-unsupported-elements",
                        "role-has-required-aria-props",
                        "role-supports-aria-props"
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, this plugin helps ensure you add alt text to img tags, use correct aria-* attributes, use correct role attributes, and more."
                },
                {
                    "type": "list",
                    "items": [
                        "WebAIM WCAG checklist",
                        "WCAG 2.2 Guidelines",
                        "The A11y Project",
                        "Check color contrast ratios between foreground and background elements",
                        "Use prefers-reduced-motion when working with animations"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app",
            "title": "Introduction: App Router | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The Next.js App Router introduces a new model for building applications using React's latest features such as Server Components , Streaming with Suspense , and Server Actions . Get started with the App Router by creating your first page . You intentionally cannot access the raw request object. However, you can access headers and cookies through server-only functions. You can also set cookies . Layouts do not rerender. They can be cached and reused to avoid unnecessary computation when navigating between pages. By restricting layouts from accessing the raw request, Next.js can prevent the execution of potentially slow or expensive user code within the layout, which could negatively impact performance. This design also enforces consistent and predictable behavior for layouts across different pages, which simplifies development and debugging. Depending on the UI pattern you're building, Parallel Routes allow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params. By default, pages are Server Components. You can access the route segments through the params prop and the URL search params through the searchParams prop for a given page. If you are using Client Components, you can use usePathname , useSelectedLayoutSegment , and useSelectedLayoutSegments for more complex routes. Further, depending on the UI pattern you're building, Parallel Routes allow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params. You can use redirect to redirect from a page to a relative or absolute URL. redirect is a temporary (307) redirect, while permanentRedirect is a permanent (308) redirect. When these functions are used while streaming UI, they will insert a meta tag to emit the redirect on the client side. Here are some common authentication solutions that support the App Router:"
                },
                {
                    "type": "list",
                    "items": [
                        "NextAuth.js",
                        "Clerk",
                        "Stack Auth",
                        "Auth0",
                        "Stytch",
                        "Kinde",
                        "WorkOS",
                        "Or manually handling sessions or JWTs"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can set cookies in Server Actions or Route Handlers using the cookies function. Since HTTP does not allow setting cookies after streaming starts, you cannot set cookies from a page or layout directly. You can also set cookies from Middleware . If you are looking to build a single Next.js application that serves multiple tenants, we have built an example showing our recommended architecture. There are multiple layers of caching in Next.js, and thus, multiple ways to invalidate different parts of the cache. Learn more about caching . Yes. You can view Next.js Commerce or the Platforms Starter Kit for two larger examples of using the App Router that are open-source."
                },
                {
                    "type": "list",
                    "items": [
                        "Routing Fundamentals",
                        "Data Fetching and Caching",
                        "Incremental Static Regeneration",
                        "Forms and Mutations",
                        "Caching",
                        "Rendering Fundamentals",
                        "Server Components",
                        "Client Components"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference",
            "title": "App Router: API Reference | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The Next.js API reference is divided into the following sections:"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/cli",
            "title": "API Reference: CLI | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js comes with two Command Line Interface (CLI) tools:"
                },
                {
                    "type": "list",
                    "items": [
                        "create-next-app : Quickly create a new Next.js application using the default template or an example from a public GitHub repository.",
                        "next : Run the Next.js development server, build your application, and more."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/cli/create-next-app",
            "title": "CLI: create-next-app | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The create-next-app CLI allow you to create a new Next.js application using the default template or an example from a public GitHub repository. It is the easiest way to get started with Next.js."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest [project-name] [options]"
                },
                {
                    "type": "p",
                    "text": "To create a new app using the default template, run the following command in your terminal:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest"
                },
                {
                    "type": "p",
                    "text": "You will then be asked the following prompts:"
                },
                {
                    "type": "code",
                    "code": "What is your project named?  my-app Would you like to use TypeScript?  No / Yes Would you like to use ESLint?  No / Yes Would you like to use Tailwind CSS?  No / Yes Would you like your code inside a `src/` directory?  No / Yes Would you like to use App Router? (recommended)  No / Yes Would you like to use Turbopack for `next dev`?  No / Yes Would you like to customize the import alias (`@/*` by default)?  No / Yes"
                },
                {
                    "type": "p",
                    "text": "Once you've answered the prompts, a new project will be created with your chosen configuration. To create a new app using an official Next.js example, use the --example flag. For example:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest --example [example-name] [your-project-name]"
                },
                {
                    "type": "p",
                    "text": "You can view a list of all available examples along with setup instructions in the Next.js repository . To create a new app using any public GitHub example, use the --example option with the GitHub repo's URL. For example:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest --example \"https://github.com/.../\" [your-project-name]"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/cli/next",
            "title": "CLI: next CLI | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The Next.js CLI allows you to develop, build, start your application, and more."
                },
                {
                    "type": "code",
                    "code": "npx next [command] [options]"
                },
                {
                    "type": "p",
                    "text": "Good to know : Running next without a command is an alias for next dev . next dev starts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when running next dev : next build creates an optimized production build of your application. The output displays information about each route. For example:"
                },
                {
                    "type": "code",
                    "code": "Route (app) Size First Load JS ┌ ○ /_not-found 0 B 0 kB └ ƒ /products/[id] 0 B 0 kB ○  (Static) prerendered as static content ƒ  (Dynamic) server-rendered on demand"
                },
                {
                    "type": "list",
                    "items": [
                        "Size : The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.",
                        "First Load JS : The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric."
                    ]
                },
                {
                    "type": "p",
                    "text": "Both of these values are compressed with gzip . The first load is indicated by green, yellow, or red. Aim for green for performant applications. The following options are available for the next build command: next start starts the application in production mode. The application should be compiled with next build first. The following options are available for the next start command: next info prints relevant details about the current system which can be used to report Next.js bugs when opening a GitHub issue . This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions ( next , react , react-dom ), and more. The output should look like this:"
                },
                {
                    "type": "code",
                    "code": "Operating System: Platform: darwin Arch: arm64 Version: Darwin Kernel Version 23.6.0 Available memory (MB): 65536 Available CPU cores: 10 Binaries: Node: 20.12.0 npm: 10.5.0 Yarn: 1.22.19 pnpm: 9.6.0 Relevant Packages: next: 15.0.0-canary. 115 // Latest available version is detected (15.0.0-canary. 115 ). eslint-config-next: 14.2.5 react: 19.0.0-rc react-dom: 19.0.0 typescript: 5.5.4 Next.js Config: output: N/A"
                },
                {
                    "type": "p",
                    "text": "The following options are available for the next info command: next lint runs ESLint for all files in the pages/ , app/ , components/ , lib/ , and src/ directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application. The following options are available for the next lint command: Next.js collects completely anonymous telemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information. The following options are available for the next telemetry command: By default, Next.js uses http://localhost:3000 during development and with next start . The default port can be changed with the -p option, like so:"
                },
                {
                    "type": "code",
                    "code": "next dev -p 4000"
                },
                {
                    "type": "p",
                    "text": "Or using the PORT environment variable:"
                },
                {
                    "type": "code",
                    "code": "PORT = 4000 next dev"
                },
                {
                    "type": "p",
                    "text": "Good to know : PORT cannot be set in .env as booting up the HTTP server happens before any other code is initialized. For certain use cases like webhooks or authentication, you can use HTTPS to have a secure environment on localhost . Next.js can generate a self-signed certificate with next dev using the --experimental-https flag:"
                },
                {
                    "type": "code",
                    "code": "next dev --experimental-https"
                },
                {
                    "type": "p",
                    "text": "With the generated certificate, the Next.js development server will exist at https://localhost:3000 . The default port 3000 is used unless a port is specified with -p , --port , or PORT . You can also provide a custom certificate and key with --experimental-https-key and --experimental-https-cert . Optionally, you can provide a custom CA certificate with --experimental-https-ca as well."
                },
                {
                    "type": "code",
                    "code": "next dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem"
                },
                {
                    "type": "p",
                    "text": "next dev --experimental-https is only intended for development and creates a locally trusted certificate with mkcert . In production, use properly issued certificates from trusted authorities. Good to know : When deploying to Vercel, HTTPS is automatically configured for your Next.js application. When deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server with keep-alive timeouts that are larger than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated. To configure the timeout values for the production Next.js server, pass --keepAliveTimeout (in milliseconds) to next start , like so:"
                },
                {
                    "type": "code",
                    "code": "next start --keepAliveTimeout 70000"
                },
                {
                    "type": "p",
                    "text": "You can pass any node arguments to next commands. For example:"
                },
                {
                    "type": "code",
                    "code": "NODE_OPTIONS = '--throw-deprecation' next NODE_OPTIONS = '-r esm' next NODE_OPTIONS = '--inspect' next"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components",
            "title": "API Reference: Components | Next.js",
            "content": []
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components/font",
            "title": "Components: Font | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This API reference will help you understand how to use next/font/google and next/font/local . For features and usage, please see the Optimizing Fonts page. For usage, review Google Fonts and Local Fonts . The path of the font file as a string or an array of objects (with type Array<{path: string, weight?: string, style?: string}> ) relative to the directory where the font loader function is called."
                },
                {
                    "type": "list",
                    "items": [
                        "src:'./fonts/my-font.woff2' where my-font.woff2 is placed in a directory named fonts inside the app directory",
                        "src:[{path: './inter/Inter-Thin.ttf', weight: '100',},{path: './inter/Inter-Regular.ttf',weight: '400',},{path: './inter/Inter-Bold-Italic.ttf', weight: '700',style: 'italic',},]",
                        "if the font loader function is called in app/page.tsx using src:'../styles/fonts/my-font.ttf' , then my-font.ttf is placed in styles/fonts at the root of the project"
                    ]
                },
                {
                    "type": "p",
                    "text": "The font weight with the following possibilities:"
                },
                {
                    "type": "list",
                    "items": [
                        "A string with possible values of the weights available for the specific font or a range of values if it's a variable font",
                        "An array of weight values if the font is not a variable google font . It applies to next/font/google only."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Required if the font being used is not variable"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "weight: '400' : A string for a single weight value - for the font Inter , the possible values are '100' , '200' , '300' , '400' , '500' , '600' , '700' , '800' , '900' or 'variable' where 'variable' is the default)",
                        "weight: '100 900' : A string for the range between 100 and 900 for a variable font",
                        "weight: ['100','400','900'] : An array of 3 possible values for a non variable font"
                    ]
                },
                {
                    "type": "p",
                    "text": "The font style with the following possibilities:"
                },
                {
                    "type": "list",
                    "items": [
                        "A string value with default value of 'normal'",
                        "An array of style values if the font is not a variable google font . It applies to next/font/google only."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "style: 'italic' : A string - it can be normal or italic for next/font/google",
                        "style: 'oblique' : A string - it can take any value for next/font/local but is expected to come from standard font styles",
                        "style: ['italic','normal'] : An array of 2 values for next/font/google - the values are from normal and italic"
                    ]
                },
                {
                    "type": "p",
                    "text": "The font subsets defined by an array of string values with the names of each subset you would like to be preloaded . Fonts specified via subsets will have a link preload tag injected into the head when the preload option is true, which is the default."
                },
                {
                    "type": "list",
                    "items": [
                        "subsets: ['latin'] : An array with the subset latin"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can find a list of all subsets on the Google Fonts page for your font. Some variable fonts have extra axes that can be included. By default, only the font weight is included to keep the file size down. The possible values of axes depend on the specific font."
                },
                {
                    "type": "list",
                    "items": [
                        "axes: ['slnt'] : An array with value slnt for the Inter variable font which has slnt as additional axes as shown here . You can find the possible axes values for your font by using the filter on the Google variable fonts page and looking for axes other than wght"
                    ]
                },
                {
                    "type": "p",
                    "text": "The font display with possible string values of 'auto' , 'block' , 'swap' , 'fallback' or 'optional' with default value of 'swap' ."
                },
                {
                    "type": "list",
                    "items": [
                        "display: 'optional' : A string assigned to the optional value"
                    ]
                },
                {
                    "type": "p",
                    "text": "A boolean value that specifies whether the font should be preloaded or not. The default is true . The fallback font to use if the font cannot be loaded. An array of strings of fallback fonts with no default."
                },
                {
                    "type": "list",
                    "items": [
                        "fallback: ['system-ui', 'arial'] : An array setting the fallback fonts to system-ui or arial"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For next/font/google : A boolean value that sets whether an automatic fallback font should be used to reduce Cumulative Layout Shift . The default is true .",
                        "For next/font/local : A string or boolean false value that sets whether an automatic fallback font should be used to reduce Cumulative Layout Shift . The possible values are 'Arial' , 'Times New Roman' or false . The default is 'Arial' ."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "adjustFontFallback: false : for next/font/google",
                        "adjustFontFallback: 'Times New Roman' : for next/font/local"
                    ]
                },
                {
                    "type": "p",
                    "text": "A string value to define the CSS variable name to be used if the style is applied with the CSS variable method ."
                },
                {
                    "type": "list",
                    "items": [
                        "variable: '--my-font' : The CSS variable --my-font is declared"
                    ]
                },
                {
                    "type": "p",
                    "text": "An array of font face descriptor key-value pairs that define the generated @font-face further."
                },
                {
                    "type": "list",
                    "items": [
                        "declarations: [{ prop: 'ascent-override', value: '90%' }]"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can apply the font styles in three ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "className",
                        "style",
                        "CSS Variables"
                    ]
                },
                {
                    "type": "p",
                    "text": "Returns a read-only CSS className for the loaded font to be passed to an HTML element."
                },
                {
                    "type": "code",
                    "code": "< p className = { inter .className}>Hello, Next.js!</ p >"
                },
                {
                    "type": "p",
                    "text": "Returns a read-only CSS style object for the loaded font to be passed to an HTML element, including style.fontFamily to access the font family name and fallback fonts."
                },
                {
                    "type": "code",
                    "code": "< p style = { inter .style}>Hello World</ p >"
                },
                {
                    "type": "p",
                    "text": "If you would like to set your styles in an external style sheet and specify additional options there, use the CSS variable method. In addition to importing the font, also import the CSS file where the CSS variable is defined and set the variable option of the font loader object as follows:"
                },
                {
                    "type": "code",
                    "code": "import { Inter } from 'next/font/google' import styles from '../styles/component.module.css' const inter = Inter ({ variable : '--font-inter' , })"
                },
                {
                    "type": "p",
                    "text": "To use the font, set the className of the parent container of the text you would like to style to the font loader's variable value and the className of the text to the styles property from the external CSS file."
                },
                {
                    "type": "code",
                    "code": "< main className = { inter .variable}> < p className = { styles .text}>Hello World</ p > </ main >"
                },
                {
                    "type": "p",
                    "text": "Define the text selector class in the component.module.css CSS file as follows:"
                },
                {
                    "type": "code",
                    "code": ".text { font-family : var (--font-inter) ; font-weight : 200 ; font-style : italic ; }"
                },
                {
                    "type": "p",
                    "text": "In the example above, the text Hello World is styled using the Inter font and the generated font fallback with font-weight: 200 and font-style: italic . Every time you call the localFont or Google font function, that font will be hosted as one instance in your application. Therefore, if you need to use the same font in multiple places, you should load it in one place and import the related font object where you need it. This is done using a font definitions file. For example, create a fonts.ts file in a styles folder at the root of your app directory. Then, specify your font definitions as follows:"
                },
                {
                    "type": "code",
                    "code": "import { Inter , Lora , Source_Sans_3 } from 'next/font/google' import localFont from 'next/font/local' // define your variable fonts const inter = Inter () const lora = Lora () // define 2 weights of a non-variable font const sourceCodePro400 = Source_Sans_3 ({ weight : '400' }) const sourceCodePro700 = Source_Sans_3 ({ weight : '700' }) // define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder const greatVibes = localFont ({ src : './GreatVibes-Regular.ttf' }) export { inter , lora , sourceCodePro400 , sourceCodePro700 , greatVibes }"
                },
                {
                    "type": "p",
                    "text": "You can now use these definitions in your code as follows:"
                },
                {
                    "type": "code",
                    "code": "import { inter , lora , sourceCodePro700 , greatVibes } from '../styles/fonts' export default function Page () { return ( < div > < p className = { inter .className}>Hello world using Inter font</ p > < p style = { lora .style}>Hello world using Lora font</ p > < p className = { sourceCodePro700 .className}> Hello world using Source_Sans_3 font with weight 700 </ p > < p className = { greatVibes .className}>My title in Great Vibes font</ p > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "To make it easier to access the font definitions in your code, you can define a path alias in your tsconfig.json or jsconfig.json files as follows:"
                },
                {
                    "type": "code",
                    "code": "{ \"compilerOptions\" : { \"paths\" : { \"@/fonts\" : [ \"./styles/fonts\" ] } } }"
                },
                {
                    "type": "p",
                    "text": "You can now import any font definition as follows:"
                },
                {
                    "type": "code",
                    "code": "import { greatVibes , sourceCodePro400 } from '@/fonts'"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components/form",
            "title": "Components: <Form> | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The <Form> component extends the HTML <form> element to provide prefetching of loading UI , client-side navigation on submission, and progressive enhancement . It's useful for forms that update URL search params as it reduces the boilerplate code needed to achieve the above."
                },
                {
                    "type": "code",
                    "code": "import Form from 'next/form' export default function Page () { return ( < Form action = \"/search\" > { /* On submission, the input value will be app ended to the URL, e.g. /search?query=abc */ } < input name = \"query\" /> < button type = \"submit\" >Submit</ button > </ Form > ) }"
                },
                {
                    "type": "p",
                    "text": "The behavior of the <Form> component depends on whether the action prop is passed a string or function ."
                },
                {
                    "type": "list",
                    "items": [
                        "When action is a string , the <Form> behaves like a native HTML form that uses a GET method. The form data is encoded into the URL as search params, and when the form is submitted, it navigates to the specified URL. In addition, Next.js: Prefetches the path when the form becomes visible, this preloads shared UI (e.g. layout.js and loading.js ), resulting in faster navigation. Performs a client-side navigation instead of a full page reload when the form is submitted. This retains shared UI and client-side state.",
                        "Prefetches the path when the form becomes visible, this preloads shared UI (e.g. layout.js and loading.js ), resulting in faster navigation.",
                        "Performs a client-side navigation instead of a full page reload when the form is submitted. This retains shared UI and client-side state.",
                        "When action is a function (Server Action), <Form> behaves like a React form , executing the action when the form is submitted."
                    ]
                },
                {
                    "type": "p",
                    "text": "When action is a string, the <Form> component supports the following props:"
                },
                {
                    "type": "list",
                    "items": [
                        "action : The URL or path to navigate to when the form is submitted. An empty string \"\" will navigate to the same route with updated search params.",
                        "An empty string \"\" will navigate to the same route with updated search params.",
                        "replace : Replaces the current history state instead of pushing a new one to the browser's history stack. Default is false .",
                        "scroll : Controls the scroll behavior during navigation. Defaults to true , this means it will scroll to the top of the new route, and maintain the scroll position for backwards and forwards navigation.",
                        "prefetch : Controls whether the path should be prefetched when the form becomes visible in the user's viewport. Defaults to true ."
                    ]
                },
                {
                    "type": "p",
                    "text": "When action is a function, the <Form> component supports the following prop:"
                },
                {
                    "type": "list",
                    "items": [
                        "action : The Server Action to be called when the form is submitted. See the React docs for more."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know : When action is a function, the replace and scroll props are ignored."
                },
                {
                    "type": "list",
                    "items": [
                        "formAction : Can be used in a <button> or <input type=\"submit\"> fields to override the action prop. Next.js will perform a client-side navigation, however, this approach doesn't support prefetching. When using basePath , you must also include it in the formAction path. e.g. formAction=\"/base-path/search\" .",
                        "When using basePath , you must also include it in the formAction path. e.g. formAction=\"/base-path/search\" .",
                        "key : Passing a key prop to a string action is not supported. If you'd like to trigger a re-render or perform a mutation, consider using a function action instead."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "onSubmit : Can be used to handle form submission logic. However, calling event.preventDefault() will override <Form> behavior such as navigating to the specified URL.",
                        "method , encType , target : Are not supported as they override <Form> behavior. Similarly, formMethod , formEncType , and formTarget can be used to override the method , encType , and target props respectively, and using them will fallback to native browser behavior. If you need to use these props, use the HTML <form> element instead.",
                        "Similarly, formMethod , formEncType , and formTarget can be used to override the method , encType , and target props respectively, and using them will fallback to native browser behavior.",
                        "If you need to use these props, use the HTML <form> element instead.",
                        "<input type=\"file\"> : Using this input type when the action is a string will match browser behavior by submitting the filename instead of the file object."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can create a search form that navigates to a search results page by passing the path as an action :"
                },
                {
                    "type": "code",
                    "code": "import Form from 'next/form' export default function Page () { return ( < Form action = \"/search\" > < input name = \"query\" /> < button type = \"submit\" >Submit</ button > </ Form > ) }"
                },
                {
                    "type": "p",
                    "text": "When the user updates the query input field and submits the form, the form data will be encoded into the URL as search params, e.g. /search?query=abc . Good to know : If you pass an empty string \"\" to action , the form will navigate to the same route with updated search params. On the results page, you can access the query using the searchParams page.js prop and use it to fetch data from an external source."
                },
                {
                    "type": "code",
                    "code": "import { getSearchResults } from '@/lib/search' export default async function SearchPage ({ searchParams , } : { searchParams : { [key : string ] : string | string [] | undefined } }) { const results = await getSearchResults ( searchParams .query) return < div >...</ div > }"
                },
                {
                    "type": "p",
                    "text": "When the <Form> becomes visible in the user's viewport, shared UI (such as layout.js and loading.js ) on the /search page will be prefetched. On submission, the form will immediately navigate to the new route and show loading UI while the results are being fetched. You can design the fallback UI using loading.js :"
                },
                {
                    "type": "code",
                    "code": "export default function Loading () { return < div >Loading...</ div > }"
                },
                {
                    "type": "p",
                    "text": "To cover cases when shared UI hasn't yet loaded, you can show instant feedback to the user using useFormStatus . First, create a component that displays a loading state when the form is pending:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useFormStatus } from 'react-dom' export default function SearchButton () { const status = useFormStatus () return ( < button type = \"submit\" >{ status .pending ? 'Searching...' : 'Search' }</ button > ) }"
                },
                {
                    "type": "p",
                    "text": "Then, update the search form page to use the SearchButton component:"
                },
                {
                    "type": "code",
                    "code": "import Form from 'next/form' import { SearchButton } from '@/ui/search-button' export default function Page () { return ( < Form action = \"/search\" > < input name = \"query\" /> < SearchButton /> </ Form > ) }"
                },
                {
                    "type": "p",
                    "text": "You can perform mutations by passing a function to the action prop."
                },
                {
                    "type": "code",
                    "code": "import Form from 'next/form' import { createPost } from '@/posts/actions' export default function Page () { return ( < Form action = {createPost}> < input name = \"title\" /> { /* ... */ } < button type = \"submit\" >Create Post</ button > </ Form > ) }"
                },
                {
                    "type": "p",
                    "text": "After a mutation, it's common to redirect to the new resource. You can use the redirect function from next/navigation to navigate to the new post page. Good to know : Since the \"destination\" of the form submission is not known until the action is executed, <Form> cannot automatically prefetch shared UI."
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' export async function createPost (formData : FormData ) { // Create a new post // ... // Redirect to the new post redirect ( `/posts/ ${ data .id } ` ) }"
                },
                {
                    "type": "p",
                    "text": "Then, in the new page, you can fetch data using the params prop:"
                },
                {
                    "type": "code",
                    "code": "import { getPost } from '@/posts/data' export default async function PostPage ({ params , } : { params : Promise <{ id : string }> }) { const data = await getPost (( await params).id) return ( < div > < h1 >{ data .title}</ h1 > { /* ... */ } </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "See the Server Actions docs for more examples."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components/image",
            "title": "Components: <Image> | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This API reference will help you understand how to use props and configuration options available for the Image Component. For features and usage, please see the Image Component page."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export default function Page () { return ( < Image src = \"/profile.png\" width = { 500 } height = { 500 } alt = \"Picture of the author\" /> ) }"
                },
                {
                    "type": "p",
                    "text": "Here's a summary of the props available for the Image Component: The Image Component requires the following properties: src , alt , width and height (or fill )."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export default function Page () { return ( < div > < Image src = \"/profile.png\" width = { 500 } height = { 500 } alt = \"Picture of the author\" /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Must be one of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "A statically imported image file",
                        "A path string. This can be either an absolute external URL, or an internal path depending on the loader prop."
                    ]
                },
                {
                    "type": "p",
                    "text": "When using the default loader , also consider the following for source images:"
                },
                {
                    "type": "list",
                    "items": [
                        "When src is an external URL, you must also configure remotePatterns",
                        "When src is animated or not a known format (JPEG, PNG, WebP, AVIF, GIF, TIFF) the image will be served as-is",
                        "When src is SVG format, it will be blocked unless unoptimized or dangerouslyAllowSVG is enabled"
                    ]
                },
                {
                    "type": "p",
                    "text": "The width property represents the intrinsic image width in pixels. This property is used to infer the correct aspect ratio of the image and avoid layout shift during loading. It does not determine the rendered size of the image, which is controlled by CSS, similar to the width attribute in the HTML <img> tag. Required, except for statically imported images or images with the fill property . The height property represents the intrinsic image height in pixels. This property is used to infer the correct aspect ratio of the image and avoid layout shift during loading. It does not determine the rendered size of the image, which is controlled by CSS, similar to the height attribute in the HTML <img> tag. Required, except for statically imported images or images with the fill property ."
                },
                {
                    "type": "list",
                    "items": [
                        "Combined, both width and height properties are used to determine the aspect ratio of the image which used by browsers to reserve space for the image before it loads.",
                        "The intrinsic size does not always mean the rendered size in the browser, which will be determined by the parent container. For example, if the parent container is smaller than the intrinsic size, the image will be scaled down to fit the container.",
                        "You can use the fill property when the width and height are unknown."
                    ]
                },
                {
                    "type": "p",
                    "text": "The alt property is used to describe the image for screen readers and search engines. It is also the fallback text if images have been disabled or an error occurs while loading the image. It should contain text that could replace the image without changing the meaning of the page . It is not meant to supplement the image and should not repeat information that is already provided in the captions above or below the image. If the image is purely decorative or not intended for the user , the alt property should be an empty string ( alt=\"\" ). The <Image /> component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in the Advanced Props section. A custom function used to resolve image URLs. A loader is a function returning a URL string for the image, given the following parameters:"
                },
                {
                    "type": "list",
                    "items": [
                        "src",
                        "width",
                        "quality"
                    ]
                },
                {
                    "type": "p",
                    "text": "Here is an example of using a custom loader:"
                },
                {
                    "type": "code",
                    "code": "'use client' import Image from 'next/image' const imageLoader = ({ src , width , quality }) => { return `https://example.com/ ${ src } ?w= ${ width } &q= ${ quality || 75 } ` } export default function Page () { return ( < Image loader = {imageLoader} src = \"me.png\" alt = \"Picture of the author\" width = { 500 } height = { 500 } /> ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Using props like loader , which accept a function, requires using Client Components to serialize the provided function. Alternatively, you can use the loaderFile configuration in next.config.js to configure every instance of next/image in your application, without passing a prop."
                },
                {
                    "type": "code",
                    "code": "fill = {true} // {true} | {false}"
                },
                {
                    "type": "p",
                    "text": "A boolean that causes the image to fill the parent element, which is useful when the width and height are unknown. The parent element must assign position: \"relative\" , position: \"fixed\" , or position: \"absolute\" style. By default, the img element will automatically be assigned the position: \"absolute\" style. If no styles are applied to the image, the image will stretch to fit the container. You may prefer to set object-fit: \"contain\" for an image which is letterboxed to fit the container and preserve aspect ratio. Alternatively, object-fit: \"cover\" will cause the image to fill the entire container and be cropped to preserve aspect ratio."
                },
                {
                    "type": "list",
                    "items": [
                        "position",
                        "object-fit",
                        "object-position"
                    ]
                },
                {
                    "type": "p",
                    "text": "A string, similar to a media query, that provides information about how wide the image will be at different breakpoints. The value of sizes will greatly affect performance for images using fill or which are styled to have a responsive size . The sizes property serves two important purposes related to image performance:"
                },
                {
                    "type": "list",
                    "items": [
                        "First, the value of sizes is used by the browser to determine which size of the image to download, from next/image 's automatically generated srcset . When the browser chooses, it does not yet know the size of the image on the page, so it selects an image that is the same size or larger than the viewport. The sizes property allows you to tell the browser that the image will actually be smaller than full screen. If you don't specify a sizes value in an image with the fill property, a default value of 100vw (full screen width) is used.",
                        "Second, the sizes property changes the behavior of the automatically generated srcset value. If no sizes value is present, a small srcset is generated, suitable for a fixed-size image (1x/2x/etc). If sizes is defined, a large srcset is generated, suitable for a responsive image (640w/750w/etc). If the sizes property includes sizes such as 50vw , which represent a percentage of the viewport width, then the srcset is trimmed to not include any values which are too small to ever be necessary."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, if you know your styling will cause an image to be full-width on mobile devices, in a 2-column layout on tablets, and a 3-column layout on desktop displays, you should include a sizes property such as the following:"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export default function Page () { return ( < div className = \"grid-element\" > < Image fill src = \"/example.png\" sizes = \"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\" /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "This example sizes could have a dramatic effect on performance metrics. Without the 33vw sizes, the image selected from the server would be 3 times as wide as it needs to be. Because file size is proportional to the square of the width, without sizes the user would download an image that's 9 times larger than necessary. Learn more about srcset and sizes :"
                },
                {
                    "type": "list",
                    "items": [
                        "web.dev",
                        "mdn"
                    ]
                },
                {
                    "type": "code",
                    "code": "quality = { 75 } // {number 1-100}"
                },
                {
                    "type": "p",
                    "text": "The quality of the optimized image, an integer between 1 and 100 , where 100 is the best quality and therefore largest file size. Defaults to 75 ."
                },
                {
                    "type": "code",
                    "code": "priority = {false} // {false} | {true}"
                },
                {
                    "type": "p",
                    "text": "When true, the image will be considered high priority and preload . Lazy loading is automatically disabled for images using priority . If the loading property is also used and set to lazy , the priority property can't be used. The loading property is only meant for advanced use cases. Remove loading when priority is needed. You should use the priority property on any image detected as the Largest Contentful Paint (LCP) element. It may be appropriate to have multiple priority images, as different images may be the LCP element for different viewport sizes. Should only be used when the image is visible above the fold. Defaults to false ."
                },
                {
                    "type": "code",
                    "code": "placeholder = 'empty' // \"empty\" | \"blur\" | \"data:image/...\""
                },
                {
                    "type": "p",
                    "text": "A placeholder to use while the image is loading. Possible values are blur , empty , or data:image/... . Defaults to empty . When blur , the blurDataURL property will be used as the placeholder. If src is an object from a static import and the imported image is .jpg , .png , .webp , or .avif , then blurDataURL will be automatically populated, except when the image is detected to be animated. For dynamic images, you must provide the blurDataURL property. Solutions such as Plaiceholder can help with base64 generation. When data:image/... , the Data URL will be used as the placeholder while the image is loading. When empty , there will be no placeholder while the image is loading, only empty space."
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the blur placeholder",
                        "Demo the shimmer effect with data URL placeholder prop",
                        "Demo the color effect with blurDataURL prop"
                    ]
                },
                {
                    "type": "p",
                    "text": "In some cases, you may need more advanced usage. The <Image /> component optionally accepts the following advanced properties. Allows passing CSS styles to the underlying image element."
                },
                {
                    "type": "code",
                    "code": "const imageStyle = { borderRadius : '50%' , border : '1px solid #fff' , } export default function ProfileImage () { return < Image src = \"...\" style = {imageStyle} /> }"
                },
                {
                    "type": "p",
                    "text": "Remember that the required width and height props can interact with your styling. If you use styling to modify an image's width, you should also style its height to auto to preserve its intrinsic aspect ratio, or your image will be distorted."
                },
                {
                    "type": "code",
                    "code": "'use client' < Image onLoadingComplete = {(img) => console .log ( img .naturalWidth)} />"
                },
                {
                    "type": "p",
                    "text": "Warning : Deprecated since Next.js 14 in favor of onLoad . A callback function that is invoked once the image is completely loaded and the placeholder has been removed. The callback function will be called with one argument, a reference to the underlying <img> element. Good to know : Using props like onLoadingComplete , which accept a function, requires using Client Components to serialize the provided function."
                },
                {
                    "type": "code",
                    "code": "< Image onLoad = {(e) => console .log ( e . target .naturalWidth)} />"
                },
                {
                    "type": "p",
                    "text": "A callback function that is invoked once the image is completely loaded and the placeholder has been removed. The callback function will be called with one argument, the Event which has a target that references the underlying <img> element. Good to know : Using props like onLoad , which accept a function, requires using Client Components to serialize the provided function."
                },
                {
                    "type": "code",
                    "code": "< Image onError = {(e) => console .error ( e . target .id)} />"
                },
                {
                    "type": "p",
                    "text": "A callback function that is invoked if the image fails to load. Good to know : Using props like onError , which accept a function, requires using Client Components to serialize the provided function."
                },
                {
                    "type": "code",
                    "code": "loading = 'lazy' // {lazy} | {eager}"
                },
                {
                    "type": "p",
                    "text": "The loading behavior of the image. Defaults to lazy . When lazy , defer loading the image until it reaches a calculated distance from\nthe viewport. When eager , load the image immediately. Learn more about the loading attribute . A Data URL to\nbe used as a placeholder image before the src image successfully loads. Only takes effect when combined\nwith placeholder=\"blur\" . Must be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or\nless) is recommended. Including larger images as placeholders may harm your application performance."
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the default blurDataURL prop",
                        "Demo the color effect with blurDataURL prop"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can also generate a solid color Data URL to match the image."
                },
                {
                    "type": "code",
                    "code": "unoptimized = {false} // {false} | {true}"
                },
                {
                    "type": "p",
                    "text": "When true, the source image will be served as-is from the src instead of changing quality, size, or format. Defaults to false . This is useful for images that do not benefit from optimization such as small images (less than 1KB), vector images (SVG), or animated images (GIF)."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' const UnoptimizedImage = (props) => { return < Image { ... props} unoptimized /> }"
                },
                {
                    "type": "p",
                    "text": "Since Next.js 12.3.0, this prop can be assigned to all images by updating next.config.js with the following configuration:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { unoptimized : true , } , }"
                },
                {
                    "type": "p",
                    "text": "When providing the src prop to the <Image> component, both the srcset and src attributes are generated automatically for the resulting <img> ."
                },
                {
                    "type": "code",
                    "code": "< Image src = \"/me.jpg\" />"
                },
                {
                    "type": "code",
                    "code": "< img srcset = \" /_next/image?url=%2Fme.jpg&w=640&q=75 1x, /_next/image?url=%2Fme.jpg&w=828&q=75 2x \" src = \"/_next/image?url=%2Fme.jpg&w=828&q=75\" />"
                },
                {
                    "type": "p",
                    "text": "In some cases, it is not desirable to have the src attribute generated and you may wish to override it using the overrideSrc prop. For example, when upgrading an existing website from <img> to <Image> , you may wish to maintain the same src attribute for SEO purposes such as image ranking or avoiding recrawl."
                },
                {
                    "type": "code",
                    "code": "< Image src = \"/me.jpg\" overrideSrc = \"/override.jpg\" />"
                },
                {
                    "type": "code",
                    "code": "< img srcset = \" /_next/image?url=%2Fme.jpg&w=640&q=75 1x, /_next/image?url=%2Fme.jpg&w=828&q=75 2x \" src = \"/override.jpg\" />"
                },
                {
                    "type": "p",
                    "text": "A hint to the browser indicating if it should wait for the image to be decoded before presenting other content updates or not. Defaults to async ."
                },
                {
                    "type": "list",
                    "items": [
                        "async - Asynchronously decode the image and allow other content to be rendered before it completes.",
                        "sync - Synchronously decode the image for atomic presentation with other content.",
                        "auto - No preference for the decoding mode; the browser decides what's best."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about the decoding attribute . Other properties on the <Image /> component will be passed to the underlying img element with the exception of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "srcSet . Use Device Sizes instead."
                    ]
                },
                {
                    "type": "p",
                    "text": "In addition to props, you can configure the Image Component in next.config.js . The following options are available: You can optionally configure localPatterns in your next.config.js file in order to allow specific paths to be optimized and block all others paths."
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { localPatterns : [ { pathname : '/assets/images/**' , search : '' , } , ] , } , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : The example above will ensure the src property of next/image must start with /assets/images/ and must not have a query string. Attempting to optimize any other path will respond with 400 Bad Request. To protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with the remotePatterns property in your next.config.js file, as shown below:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { remotePatterns : [ { protocol : 'https' , hostname : 'example.com' , port : '' , pathname : '/account123/**' , search : '' , } , ] , } , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : The example above will ensure the src property of next/image must start with https://example.com/account123/ and must not have a query string. Any other protocol, hostname, port, or unmatched path will respond with 400 Bad Request. Below is an example of the remotePatterns property in the next.config.js file using a wildcard pattern in the hostname :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { remotePatterns : [ { protocol : 'https' , hostname : '**.example.com' , port : '' , search : '' , } , ] , } , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : The example above will ensure the src property of next/image must start with https://img1.example.com or https://me.avatar.example.com or any number of subdomains. It cannot have a port or query string. Any other protocol or unmatched hostname will respond with 400 Bad Request. Wildcard patterns can be used for both pathname and hostname and have the following syntax:"
                },
                {
                    "type": "list",
                    "items": [
                        "* match a single path segment or subdomain",
                        "** match any number of path segments at the end or subdomains at the beginning"
                    ]
                },
                {
                    "type": "p",
                    "text": "The ** syntax does not work in the middle of the pattern. Good to know : When omitting protocol , port , pathname , or search then the wildcard ** is implied. This is not recommended because it may allow malicious actors to optimize urls you did not intend. Below is an example of the remotePatterns property in the next.config.js file using search :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { remotePatterns : [ { protocol : 'https' , hostname : 'assets.example.com' , search : '?v=1727111025337' , } , ] , } , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : The example above will ensure the src property of next/image must start with https://assets.example.com and must have the exact query string ?v=1727111025337 . Any other protocol or query string will respond with 400 Bad Request. Warning : Deprecated since Next.js 14 in favor of strict remotePatterns in order to protect your application from malicious users. Only use domains if you own all the content served from the domain. Similar to remotePatterns , the domains configuration can be used to provide a list of allowed hostnames for external images. However, the domains configuration does not support wildcard pattern matching and it cannot restrict protocol, port, or pathname. Below is an example of the domains property in the next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { domains : [ 'assets.acme.com' ] , } , }"
                },
                {
                    "type": "p",
                    "text": "If you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure the loaderFile in your next.config.js like the following:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { loader : 'custom' , loaderFile : './my/image/loader.js' , } , }"
                },
                {
                    "type": "p",
                    "text": "This must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:"
                },
                {
                    "type": "code",
                    "code": "'use client' export default function myImageLoader ({ src , width , quality }) { return `https://example.com/ ${ src } ?w= ${ width } &q= ${ quality || 75 } ` }"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use the loader prop to configure each instance of next/image . Good to know : Customizing the image loader file, which accepts a function, requires using Client Components to serialize the provided function. The following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates. If you know the expected device widths of your users, you can specify a list of device width breakpoints using the deviceSizes property in next.config.js . These widths are used when the next/image component uses sizes prop to ensure the correct image is served for user's device. If no configuration is provided, the default below is used."
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { deviceSizes : [ 640 , 750 , 828 , 1080 , 1200 , 1920 , 2048 , 3840 ] , } , }"
                },
                {
                    "type": "p",
                    "text": "You can specify a list of image widths using the images.imageSizes property in your next.config.js file. These widths are concatenated with the array of device sizes to form the full array of sizes used to generate image srcset s. The reason there are two separate lists is that imageSizes is only used for images which provide a sizes prop, which indicates that the image is less than the full width of the screen. Therefore, the sizes in imageSizes should all be smaller than the smallest size in deviceSizes. If no configuration is provided, the default below is used."
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { imageSizes : [ 16 , 32 , 48 , 64 , 96 , 128 , 256 , 384 ] , } , }"
                },
                {
                    "type": "p",
                    "text": "The default Image Optimization API will automatically detect the browser's supported image formats via the request's Accept header in order to determine the best output format. If the Accept header matches more than one of the configured formats, the first match in the array is used. Therefore, the array order matters. If there is no match (or the source image is animated ), the Image Optimization API will fallback to the original image's format. If no configuration is provided, the default below is used."
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { formats : [ 'image/webp' ] , } , }"
                },
                {
                    "type": "p",
                    "text": "You can enable AVIF support and still fallback to WebP with the following configuration."
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { formats : [ 'image/avif' , 'image/webp' ] , } , }"
                },
                {
                    "type": "list",
                    "items": [
                        "AVIF generally takes 50% longer to encode but it compresses 20% smaller compared to WebP. This means that the first time an image is requested, it will typically be slower and then subsequent requests that are cached will be faster.",
                        "If you self-host with a Proxy/CDN in front of Next.js, you must configure the Proxy to forward the Accept header."
                    ]
                },
                {
                    "type": "p",
                    "text": "The following describes the caching algorithm for the default loader . For all other loaders, please refer to your cloud provider's documentation. Images are optimized dynamically upon request and stored in the <distDir>/cache/images directory. The optimized image file will be served for subsequent requests until the expiration is reached. When a request is made that matches a cached but expired file, the expired image is served stale immediately. Then the image is optimized again in the background (also called revalidation) and saved to the cache with the new expiration date. The cache status of an image can be determined by reading the value of the x-nextjs-cache response header. The possible values are the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "MISS - the path is not in the cache (occurs at most once, on the first visit)",
                        "STALE - the path is in the cache but exceeded the revalidate time so it will be updated in the background",
                        "HIT - the path is in the cache and has not exceeded the revalidate time"
                    ]
                },
                {
                    "type": "p",
                    "text": "The expiration (or rather Max Age) is defined by either the minimumCacheTTL configuration or the upstream image Cache-Control header, whichever is larger. Specifically, the max-age value of the Cache-Control header is used. If both s-maxage and max-age are found, then s-maxage is preferred. The max-age is also passed-through to any downstream clients including CDNs and browsers."
                },
                {
                    "type": "list",
                    "items": [
                        "You can configure minimumCacheTTL to increase the cache duration when the upstream image does not include Cache-Control header or the value is very low.",
                        "You can configure deviceSizes and imageSizes to reduce the total number of possible generated images.",
                        "You can configure formats to disable multiple formats in favor of a single image format."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use a Static Image Import which will automatically hash the file contents and cache the image forever with a Cache-Control header of immutable ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { minimumCacheTTL : 60 , } , }"
                },
                {
                    "type": "p",
                    "text": "The expiration (or rather Max Age) of the optimized image is defined by either the minimumCacheTTL or the upstream image Cache-Control header, whichever is larger. If you need to change the caching behavior per image, you can configure headers to set the Cache-Control header on the upstream image (e.g. /some-asset.jpg , not /_next/image itself). There is no mechanism to invalidate the cache at this time, so its best to keep minimumCacheTTL low. Otherwise you may need to manually change the src prop or delete <distDir>/cache/images . The default behavior allows you to import static files such as import icon from './icon.png' and then pass that to the src property. In some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently. You can disable static image imports inside your next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { disableStaticImages : true , } , }"
                },
                {
                    "type": "p",
                    "text": "The default loader does not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without proper Content Security Policy (CSP) headers . Therefore, we recommended using the unoptimized prop when the src prop is known to be SVG. This happens automatically when src ends with \".svg\" . However, if you need to serve SVG images with the default Image Optimization API, you can set dangerouslyAllowSVG inside your next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { dangerouslyAllowSVG : true , contentDispositionType : 'attachment' , contentSecurityPolicy : \"default-src 'self'; script-src 'none'; sandbox;\" , } , }"
                },
                {
                    "type": "p",
                    "text": "In addition, it is strongly recommended to also set contentDispositionType to force the browser to download the image, as well as contentSecurityPolicy to prevent scripts embedded in the image from executing. The default loader sets the Content-Disposition header to attachment for added protection since the API can serve arbitrary remote images. The default value is attachment which forces the browser to download the image when visiting directly. This is particularly important when dangerouslyAllowSVG is true. You can optionally configure inline to allow the browser to render the image when visiting directly, without downloading it."
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { contentDispositionType : 'inline' , } , }"
                },
                {
                    "type": "p",
                    "text": "The default loader will automatically bypass Image Optimization for animated images and serve the image as-is. Auto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use the unoptimized prop. The default generated srcset contains 1x and 2x images in order to support different device pixel ratios. However, you may wish to render a responsive image that stretches with the viewport. In that case, you'll need to set sizes as well as style (or className ). You can render a responsive image using one of the following methods below. If the source image is not dynamic, you can statically import to create a responsive image:"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' import me from '../photos/me.jpg' export default function Author () { return ( < Image src = {me} alt = \"Picture of the author\" sizes = \"100vw\" style = {{ width : '100%' , height : 'auto' , }} /> ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the image responsive to viewport"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the source image is a dynamic or a remote url, you will also need to provide width and height to set the correct aspect ratio of the responsive image:"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export default function Page ({ photoUrl }) { return ( < Image src = {photoUrl} alt = \"Picture of the author\" sizes = \"100vw\" style = {{ width : '100%' , height : 'auto' , }} width = { 500 } height = { 300 } /> ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Demo the image responsive to viewport"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you don't know the aspect ratio, you will need to set the fill prop and set position: relative on the parent. Optionally, you can set object-fit style depending on the desired stretch vs crop behavior:"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export default function Page ({ photoUrl }) { return ( < div style = {{ position : 'relative' , width : '300px' , height : '500px' }}> < Image src = {photoUrl} alt = \"Picture of the author\" sizes = \"300px\" fill style = {{ objectFit : 'contain' , }} /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "If you want to display a different image for light and dark mode, you can create a new component that wraps two <Image> components and reveals the correct one based on a CSS media query."
                },
                {
                    "type": "code",
                    "code": ".imgDark { display : none ; } @media (prefers-color-scheme : dark) { .imgLight { display : none ; } .imgDark { display : unset ; } }"
                },
                {
                    "type": "code",
                    "code": "import styles from './theme-image.module.css' import Image , { ImageProps } from 'next/image' type Props = Omit < ImageProps , 'src' | 'priority' | 'loading' > & { srcLight : string srcDark : string } const ThemeImage = (props : Props ) => { const { srcLight , srcDark , ... rest } = props return ( <> < Image { ... rest} src = {srcLight} className = { styles .imgLight} /> < Image { ... rest} src = {srcDark} className = { styles .imgDark} /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : The default behavior of loading=\"lazy\" ensures that only the correct image is loaded. You cannot use priority or loading=\"eager\" because that would cause both images to load. Instead, you can use fetchPriority=\"high\" . For more advanced use cases, you can call getImageProps() to get the props that would be passed to the underlying <img> element, and instead pass to them to another component, style, canvas, etc. This also avoid calling React useState() so it can lead to better performance, but it cannot be used with the placeholder prop because the placeholder will never be removed. If you want to display a different image for light and dark mode, you can use the <picture> element to display a different image based on the user's preferred color scheme ."
                },
                {
                    "type": "code",
                    "code": "import { getImageProps } from 'next/image' export default function Page () { const common = { alt : 'Theme Example' , width : 800 , height : 400 } const { props: { srcSet: dark } , } = getImageProps ({ ... common , src : '/dark.png' }) const { props: { srcSet: light , ... rest } , } = getImageProps ({ ... common , src : '/light.png' }) return ( < picture > < source media = \"(prefers-color-scheme: dark)\" srcSet = {dark} /> < source media = \"(prefers-color-scheme: light)\" srcSet = {light} /> < img { ... rest} /> </ picture > ) }"
                },
                {
                    "type": "p",
                    "text": "If you want to display a different image for mobile and desktop, sometimes called Art Direction , you can provide different src , width , height , and quality props to getImageProps() ."
                },
                {
                    "type": "code",
                    "code": "import { getImageProps } from 'next/image' export default function Home () { const common = { alt : 'Art Direction Example' , sizes : '100vw' } const { props: { srcSet: desktop } , } = getImageProps ({ ... common , width : 1440 , height : 875 , quality : 80 , src : '/desktop.jpg' , }) const { props: { srcSet: mobile , ... rest } , } = getImageProps ({ ... common , width : 750 , height : 1334 , quality : 70 , src : '/mobile.jpg' , }) return ( < picture > < source media = \"(min-width: 1000px)\" srcSet = {desktop} /> < source media = \"(min-width: 500px)\" srcSet = {mobile} /> < img { ... rest} style = {{ width : '100%' , height : 'auto' }} /> </ picture > ) }"
                },
                {
                    "type": "p",
                    "text": "You can even convert the srcSet string to the image-set() CSS function to optimize a background image."
                },
                {
                    "type": "code",
                    "code": "import { getImageProps } from 'next/image' function getBackgroundImage (srcSet = '' ) { const imageSet = srcSet .split ( ', ' ) .map ((str) => { const [ url , dpi ] = str .split ( ' ' ) return `url(\" ${ url } \") ${ dpi } ` }) .join ( ', ' ) return `image-set( ${ imageSet } )` } export default function Home () { const { props: { srcSet } , } = getImageProps ({ alt : '' , width : 128 , height : 128 , src : '/img.png' }) const backgroundImage = getBackgroundImage (srcSet) const style = { height : '100vh' , width : '100vw' , backgroundImage } return ( < main style = {style}> < h1 >Hello World</ h1 > </ main > ) }"
                },
                {
                    "type": "p",
                    "text": "This next/image component uses browser native lazy loading , which may fallback to eager loading for older browsers before Safari 15.4. When using the blur-up placeholder, older browsers before Safari 12 will fallback to empty placeholder. When using styles with width / height of auto , it is possible to cause Layout Shift on older browsers before Safari 15 that don't preserve the aspect ratio . For more details, see this MDN video ."
                },
                {
                    "type": "list",
                    "items": [
                        "Safari 15 - 16.3 display a gray border while loading. Safari 16.4 fixed this issue . Possible solutions: Use CSS @supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } } Use priority if the image is above the fold",
                        "Use CSS @supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }",
                        "Use priority if the image is above the fold",
                        "Firefox 67+ displays a white background while loading. Possible solutions: Enable AVIF formats Use placeholder",
                        "Enable AVIF formats",
                        "Use placeholder"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components/link",
            "title": "Components: <Link> | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "<Link> is a React component that extends the HTML <a> element to provide prefetching and client-side navigation between routes. It is the primary way to navigate between routes in Next.js."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return < Link href = \"/dashboard\" >Dashboard</ Link > }"
                },
                {
                    "type": "p",
                    "text": "The following props can be passed to the <Link> component: Good to know : <a> tag attributes such as className or target=\"_blank\" can be added to <Link> as props and will be passed to the underlying <a> element. The path or URL to navigate to."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' // Navigate to /about?name=test export default function Page () { return ( < Link href = {{ pathname : '/about' , query : { name : 'test' } , }} > About </ Link > ) }"
                },
                {
                    "type": "p",
                    "text": "Defaults to false . When true , next/link will replace the current history state instead of adding a new URL into the browser's history stack."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < Link href = \"/dashboard\" replace > Dashboard </ Link > ) }"
                },
                {
                    "type": "p",
                    "text": "Defaults to true . The default scrolling behavior of <Link> in Next.js is to maintain scroll position , similar to how browsers handle back and forwards navigation. When you navigate to a new Page , scroll position will stay the same as long as the Page is visible in the viewport. However, if the Page is not visible in the viewport, Next.js will scroll to the top of the first Page element. When scroll = {false} , Next.js will not attempt to scroll to the first Page element. Good to know : Next.js checks if scroll: false before managing scroll behavior. If scrolling is enabled, it identifies the relevant DOM node for navigation and inspects each top-level element. All non-scrollable elements and those without rendered HTML are bypassed, this includes sticky or fixed positioned elements, and non-visible elements such as those calculated with getBoundingClientRect . Next.js then continues through siblings until it identifies a scrollable element that is visible in the viewport."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < Link href = \"/dashboard\" scroll = { false }> Dashboard </ Link > ) }"
                },
                {
                    "type": "p",
                    "text": "Prefetching happens when a <Link /> component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by the href ) and its data in the background to improve the performance of client-side navigations. If the prefetched data has expired by the time the user hovers over a <Link /> , Next.js will attempt to prefetch it again. Prefetching is only enabled in production . The following values can be passed to the prefetch prop:"
                },
                {
                    "type": "list",
                    "items": [
                        "null (default) : Prefetch behavior depends on whether the route is static or dynamic. For static routes, the full route will be prefetched (including all its data). For dynamic routes, the partial route down to the nearest segment with a loading.js boundary will be prefetched.",
                        "true : The full route will be prefetched for both static and dynamic routes.",
                        "false : Prefetching will never happen both on entering the viewport and on hover."
                    ]
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < Link href = \"/dashboard\" prefetch = { false }> Dashboard </ Link > ) }"
                },
                {
                    "type": "p",
                    "text": "The following examples demonstrate how to use the <Link> component in different scenarios. When linking to dynamic segments , you can use template literals and interpolation to generate a list of links. For example, to generate a list of blog posts:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' interface Post { id : number title : string slug : string } export default function PostList ({ posts } : { posts : Post [] }) { return ( < ul > { posts .map ((post) => ( < li key = { post .id}> < Link href = { `/ blog / ${ post .slug } ` }>{ post .title}</ Link > </ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "You can use usePathname() to determine if a link is active. For example, to add a class to the active link, you can check if the current pathname matches the href of the link:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { usePathname } from 'next/navigation' import Link from 'next/link' export function Links () { const pathname = usePathname () return ( < nav > < Link className = { `link ${ pathname === '/' ? 'active' : '' } ` } href = \"/\" > Home </ Link > < Link className = { `link ${ pathname === '/about' ? 'active' : '' } ` } href = \"/about\" > About </ Link > </ nav > ) }"
                },
                {
                    "type": "p",
                    "text": "If you'd like to scroll to a specific id on navigation, you can append your URL with a # hash link or just pass a hash link to the href prop. This is possible since <Link> renders to an <a> element."
                },
                {
                    "type": "code",
                    "code": "< Link href = \"/dashboard#settings\" >Settings</ Link > // Output < a href = \"/dashboard#settings\" >Settings</ a >"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js will scroll to the Page if it is not visible in the viewport upon navigation."
                    ]
                },
                {
                    "type": "p",
                    "text": "For dynamic route segments , it can be handy to use template literals to create the link's path. For example, you can generate a list of links to the dynamic route app/blog/[slug]/page.js :"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page ({ posts }) { return ( < ul > { posts .map ((post) => ( < li key = { post .id}> < Link href = { `/ blog / ${ post .slug } ` }>{ post .title}</ Link > </ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "If the child of Link is a custom component that wraps an <a> tag, you must add passHref to Link . This is necessary if you’re using libraries like styled-components . Without this, the <a> tag will not have the href attribute, which hurts your site's accessibility and might affect SEO. If you're using ESLint , there is a built-in rule next/link-passhref to ensure correct usage of passHref ."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' import styled from 'styled-components' // This creates a custom component that wraps an <a> tag const RedLink = styled . a ` color: red; ` function NavLink ({ href , name }) { return ( < Link href = {href} passHref legacyBehavior > < RedLink >{name}</ RedLink > </ Link > ) } export default NavLink"
                },
                {
                    "type": "list",
                    "items": [
                        "If you’re using emotion ’s JSX pragma feature ( @jsx jsx ), you must use passHref even if you use an <a> tag directly.",
                        "The component should support onClick property to trigger navigation correctly."
                    ]
                },
                {
                    "type": "p",
                    "text": "If the child of Link is a functional component, in addition to using passHref and legacyBehavior , you must wrap the component in React.forwardRef :"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' import React from 'react' // Define the props type for MyButton interface MyButtonProps { onClick ?: React . MouseEventHandler < HTMLAnchorElement > href ?: string } // Use React.ForwardRefRenderFunction to properly type the forwarded ref const MyButton : React . ForwardRefRenderFunction < HTMLAnchorElement , MyButtonProps > = ({ onClick , href } , ref) => { return ( < a href = {href} onClick = {onClick} ref = {ref}> Click Me </ a > ) } // Use React.forwardRef to wrap the component const ForwardedMyButton = React .forwardRef (MyButton) export default function Page () { return ( < Link href = \"/about\" passHref legacyBehavior > < ForwardedMyButton /> </ Link > ) }"
                },
                {
                    "type": "p",
                    "text": "The default behavior of the Link component is to push a new URL into the history stack. You can use the replace prop to prevent adding a new entry, as in the following example:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < Link href = \"/about\" replace > About us </ Link > ) }"
                },
                {
                    "type": "p",
                    "text": "The default scrolling behavior of <Link> in Next.js is to maintain scroll position , similar to how browsers handle back and forwards navigation. When you navigate to a new Page , scroll position will stay the same as long as the Page is visible in the viewport. However, if the Page is not visible in the viewport, Next.js will scroll to the top of the first Page element. If you'd like to disable this behavior, you can pass scroll={false} to the <Link> component, or scroll: false to router.push() or router.replace() ."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < Link href = \"/#hashid\" scroll = { false }> Disables scrolling to the top </ Link > ) }"
                },
                {
                    "type": "code",
                    "code": "// useRouter import { useRouter } from 'next/navigation' const router = useRouter () router .push ( '/dashboard' , { scroll : false })"
                },
                {
                    "type": "p",
                    "text": "It's common to use Middleware for authentication or other purposes that involve rewriting the user to a different page. In order for the <Link /> component to properly prefetch links with rewrites via Middleware, you need to tell Next.js both the URL to display and the URL to prefetch. This is required to avoid un-necessary fetches to middleware to know the correct route to prefetch. For example, if you want to serve a /dashboard route that has authenticated and visitor views, you can add the following in your Middleware to redirect the user to the correct page:"
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' export function middleware (request : Request ) { const nextUrl = request .nextUrl if ( nextUrl .pathname === '/dashboard' ) { if ( request . cookies .authToken) { return NextResponse .rewrite ( new URL ( '/auth/dashboard' , request .url)) } else { return NextResponse .rewrite ( new URL ( '/public/dashboard' , request .url)) } } }"
                },
                {
                    "type": "p",
                    "text": "In this case, you would want to use the following code in your <Link /> component:"
                },
                {
                    "type": "code",
                    "code": "'use client' import Link from 'next/link' import useIsAuthed from './hooks/useIsAuthed' // Your auth hook export default function Page () { const isAuthed = useIsAuthed () const path = isAuthed ? '/auth/dashboard' : '/public/dashboard' return ( < Link as = \"/dashboard\" href = {path}> Dashboard </ Link > ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/components/script",
            "title": "Components: <Script> | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This API reference will help you understand how to use props available for the Script Component. For features and usage, please see the Optimizing Scripts page."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function Dashboard () { return ( <> < Script src = \"https://example.com/script.js\" /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "Here's a summary of the props available for the Script Component: The <Script /> component requires the following properties. A path string specifying the URL of an external script. This can be either an absolute external URL or an internal path. The src property is required unless an inline script is used. The <Script /> component accepts a number of additional properties beyond those which are required. The loading strategy of the script. There are four different strategies that can be used:"
                },
                {
                    "type": "list",
                    "items": [
                        "beforeInteractive : Load before any Next.js code and before any page hydration occurs.",
                        "afterInteractive : ( default ) Load early but after some hydration on the page occurs.",
                        "lazyOnload : Load during browser idle time.",
                        "worker : (experimental) Load in a web worker."
                    ]
                },
                {
                    "type": "p",
                    "text": "Scripts that load with the beforeInteractive strategy are injected into the initial HTML from the server, downloaded before any Next.js module, and executed in the order they are placed before any hydration occurs on the page. Scripts denoted with this strategy are preloaded and fetched before any first-party code, but their execution does not block page hydration from occurring. beforeInteractive scripts must be placed inside the root layout ( app/layout.tsx ) and are designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side). This strategy should only be used for critical scripts that need to be fetched before any part of the page becomes interactive."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body > {children} < Script src = \"https://example.com/script.js\" strategy = \"beforeInteractive\" /> </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Scripts with beforeInteractive will always be injected inside the head of the HTML document regardless of where it's placed in the component. Some examples of scripts that should be loaded as soon as possible with beforeInteractive include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Bot detectors",
                        "Cookie consent managers"
                    ]
                },
                {
                    "type": "p",
                    "text": "Scripts that use the afterInteractive strategy are injected into the HTML client-side and will load after some (or all) hydration occurs on the page. This is the default strategy of the Script component and should be used for any script that needs to load as soon as possible but not before any first-party Next.js code. afterInteractive scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function Page () { return ( <> < Script src = \"https://example.com/script.js\" strategy = \"afterInteractive\" /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "Some examples of scripts that are good candidates for afterInteractive include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tag managers",
                        "Analytics"
                    ]
                },
                {
                    "type": "p",
                    "text": "Scripts that use the lazyOnload strategy are injected into the HTML client-side during browser idle time and will load after all resources on the page have been fetched. This strategy should be used for any background or low priority scripts that do not need to load early. lazyOnload scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function Page () { return ( <> < Script src = \"https://example.com/script.js\" strategy = \"lazyOnload\" /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "Examples of scripts that do not need to load immediately and can be fetched with lazyOnload include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Chat support plugins",
                        "Social media widgets"
                    ]
                },
                {
                    "type": "p",
                    "text": "Warning: The worker strategy is not yet stable and does not yet work with the App Router. Use with caution. Scripts that use the worker strategy are off-loaded to a web worker in order to free up the main thread and ensure that only critical, first-party resources are processed on it. While this strategy can be used for any script, it is an advanced use case that is not guaranteed to support all third-party scripts. To use worker as a strategy, the nextScriptWorkers flag must be enabled in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { nextScriptWorkers : true , } , }"
                },
                {
                    "type": "p",
                    "text": "worker scripts can only currently be used in the pages/ directory :"
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function Home () { return ( <> < Script src = \"https://example.com/script.js\" strategy = \"worker\" /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "Warning: onLoad does not yet work with Server Components and can only be used in Client Components. Further, onLoad can't be used with beforeInteractive – consider using onReady instead. Some third-party scripts require users to run JavaScript code once after the script has finished loading in order to instantiate content or call a function. If you are loading a script with either afterInteractive or lazyOnload as a loading strategy, you can execute code after it has loaded using the onLoad property. Here's an example of executing a lodash method only after the library has been loaded."
                },
                {
                    "type": "code",
                    "code": "'use client' import Script from 'next/script' export default function Page () { return ( <> < Script src = \"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\" onLoad = {() => { console .log ( _ .sample ([ 1 , 2 , 3 , 4 ])) }} /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "Warning: onReady does not yet work with Server Components and can only be used in Client Components. Some third-party scripts require users to run JavaScript code after the script has finished loading and every time the component is mounted (after a route navigation for example). You can execute code after the script's load event when it first loads and then after every subsequent component re-mount using the onReady property. Here's an example of how to re-instantiate a Google Maps JS embed every time the component is mounted:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useRef } from 'react' import Script from 'next/script' export default function Page () { const mapRef = useRef () return ( <> < div ref = {mapRef}></ div > < Script id = \"google-maps\" src = \"https://maps.googleapis.com/maps/api/js\" onReady = {() => { new google . maps .Map ( mapRef .current , { center : { lat : - 34.397 , lng : 150.644 } , zoom : 8 , }) }} /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "Warning: onError does not yet work with Server Components and can only be used in Client Components. onError cannot be used with the beforeInteractive loading strategy. Sometimes it is helpful to catch when a script fails to load. These errors can be handled with the onError property:"
                },
                {
                    "type": "code",
                    "code": "'use client' import Script from 'next/script' export default function Page () { return ( <> < Script src = \"https://example.com/script.js\" onError = {(e : Error ) => { console .error ( 'Script failed to load' , e) }} /> </> ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config",
            "title": "API Reference: Configuration | Next.js",
            "content": []
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/eslint",
            "title": "Configuration: ESLint | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js provides an ESLint plugin, eslint-plugin-next , already bundled within the base configuration that makes it possible to catch common issues and problems in a Next.js application. Recommended rule-sets from the following ESLint plugins are all used within eslint-config-next :"
                },
                {
                    "type": "list",
                    "items": [
                        "eslint-plugin-react",
                        "eslint-plugin-react-hooks",
                        "eslint-plugin-next"
                    ]
                },
                {
                    "type": "p",
                    "text": "This will take precedence over the configuration from next.config.js . The full set of rules is as follows: We recommend using an appropriate integration to view warnings and errors directly in your code editor during development. By default, Next.js will run ESLint for all files in the pages/ , app/ , components/ , lib/ , and src/ directories. However, you can specify which directories using the dirs option in the eslint config in next.config.js for production builds:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { eslint : { dirs : [ 'pages' , 'utils' ] , // Only run ESLint on the 'pages' and 'utils' directories during production builds (next build) } , }"
                },
                {
                    "type": "p",
                    "text": "Similarly, the --dir and --file flags can be used for next lint to lint specific directories and files:"
                },
                {
                    "type": "code",
                    "code": "next lint --dir pages --dir utils --file bar.js"
                },
                {
                    "type": "p",
                    "text": "If you're using eslint-plugin-next in a project where Next.js isn't installed in your root directory (such as a monorepo), you can tell eslint-plugin-next where to find your Next.js application using the settings property in your .eslintrc :"
                },
                {
                    "type": "code",
                    "code": "import { FlatCompat } from '@eslint/eslintrc' const compat = new FlatCompat({ // import.meta.dirname is available after Node.js v20.11.0 baseDirectory: import.meta.dirname, }) const eslintConfig = [ ...compat.config({ extends: ['next'], settings: { next: { rootDir: 'packages/my-app/', }, }, }), ] export default eslintConfig"
                },
                {
                    "type": "p",
                    "text": "rootDir can be a path (relative or absolute), a glob (i.e. \"packages/*/\" ), or an array of paths and/or globs. To improve performance, information of files processed by ESLint are cached by default. This is stored in .next/cache or in your defined build directory . If you include any ESLint rules that depend on more than the contents of a single source file and need to disable the cache, use the --no-cache flag with next lint ."
                },
                {
                    "type": "code",
                    "code": "next lint --no-cache"
                },
                {
                    "type": "p",
                    "text": "If you would like to modify or disable any rules provided by the supported plugins ( react , react-hooks , next ), you can directly change them using the rules property in your .eslintrc :"
                },
                {
                    "type": "code",
                    "code": "import { FlatCompat } from '@eslint/eslintrc' const compat = new FlatCompat({ // import.meta.dirname is available after Node.js v20.11.0 baseDirectory: import.meta.dirname, }) const eslintConfig = [ ...compat.config({ extends: ['next'], rules: { 'react/no-unescaped-entities': 'off', '@next/next/no-page-custom-font': 'off', }, }), ] export default eslintConfig"
                },
                {
                    "type": "p",
                    "text": "The next/core-web-vitals rule set is enabled when next lint is run for the first time and the strict option is selected."
                },
                {
                    "type": "code",
                    "code": "import { FlatCompat } from '@eslint/eslintrc' const compat = new FlatCompat({ // import.meta.dirname is available after Node.js v20.11.0 baseDirectory: import.meta.dirname, }) const eslintConfig = [ ...compat.config({ extends: ['next/core-web-vitals'], }), ] export default eslintConfig"
                },
                {
                    "type": "p",
                    "text": "next/core-web-vitals updates eslint-plugin-next to error on a number of rules that are warnings by default if they affect Core Web Vitals . The next/core-web-vitals entry point is automatically included for new applications built with Create Next App . In addition to the Next.js ESLint rules, create-next-app --typescript will also add TypeScript-specific lint rules with next/typescript to your config:"
                },
                {
                    "type": "code",
                    "code": "import { FlatCompat } from '@eslint/eslintrc' const compat = new FlatCompat({ // import.meta.dirname is available after Node.js v20.11.0 baseDirectory: import.meta.dirname, }) const eslintConfig = [ ...compat.config({ extends: ['next/core-web-vitals', 'next/typescript'], }), ] export default eslintConfig"
                },
                {
                    "type": "p",
                    "text": "Those rules are based on plugin:@typescript-eslint/recommended .\nSee typescript-eslint > Configs for more details. ESLint also contains code formatting rules, which can conflict with your existing Prettier setup. We recommend including eslint-config-prettier in your ESLint config to make ESLint and Prettier work together."
                },
                {
                    "type": "code",
                    "code": "npm install --save-dev eslint-config-prettier yarn add --dev eslint-config-prettier pnpm add --save-dev eslint-config-prettier bun add --dev eslint-config-prettier"
                },
                {
                    "type": "p",
                    "text": "Then, add prettier to your existing ESLint config:"
                },
                {
                    "type": "code",
                    "code": "import { FlatCompat } from '@eslint/eslintrc' const compat = new FlatCompat({ // import.meta.dirname is available after Node.js v20.11.0 baseDirectory: import.meta.dirname, }) const eslintConfig = [ ...compat.config({ extends: ['next', 'prettier'], }), ] export default eslintConfig"
                },
                {
                    "type": "p",
                    "text": "If you would like to use next lint with lint-staged to run the linter on staged git files, you'll have to add the following to the .lintstagedrc.js file in the root of your project in order to specify usage of the --file flag."
                },
                {
                    "type": "code",
                    "code": "const path = require ( 'path' ) const buildEslintCommand = (filenames) => `next lint --fix --file ${ filenames .map ((f) => path .relative ( process .cwd () , f)) .join ( ' --file ' ) } ` module . exports = { '*.{js,jsx,ts,tsx}' : [buildEslintCommand] , }"
                },
                {
                    "type": "p",
                    "text": "If you do not want ESLint to run during next build , you can set the eslint.ignoreDuringBuilds option in next.config.js to true :"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { eslint : { // Warning: This allows production builds to successfully complete even if // your project has ESLint errors. ignoreDuringBuilds : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "If you already have ESLint configured in your application, we recommend extending from this plugin directly instead of including eslint-config-next unless a few conditions are met. If the following conditions are true:"
                },
                {
                    "type": "list",
                    "items": [
                        "You have one or more of the following plugins already installed (either separately or through a different config such as airbnb or react-app ): react react-hooks jsx-a11y import",
                        "react",
                        "react-hooks",
                        "jsx-a11y",
                        "import",
                        "You've defined specific parserOptions that are different from how Babel is configured within Next.js (this is not recommended unless you have customized your Babel configuration )",
                        "You have eslint-plugin-import installed with Node.js and/or TypeScript resolvers defined to handle imports"
                    ]
                },
                {
                    "type": "p",
                    "text": "Then we recommend either removing these settings if you prefer how these properties have been configured within eslint-config-next or extending directly from the Next.js ESLint plugin instead:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { extends : [ //... 'plugin:@next/next/recommended' , ] , }"
                },
                {
                    "type": "p",
                    "text": "The plugin can be installed normally in your project without needing to run next lint :"
                },
                {
                    "type": "code",
                    "code": "npm install --save-dev @next/eslint-plugin-next yarn add --dev @next/eslint-plugin-next pnpm add --save-dev @next/eslint-plugin-next bun add --dev @next/eslint-plugin-next"
                },
                {
                    "type": "p",
                    "text": "This eliminates the risk of collisions or errors that can occur due to importing the same plugin or parser across multiple configurations. If you already use a separate ESLint configuration and want to include eslint-config-next , ensure that it is extended last after other configurations. For example:"
                },
                {
                    "type": "code",
                    "code": "import js from '@eslint/js' import { FlatCompat } from '@eslint/eslintrc' const compat = new FlatCompat({ // import.meta.dirname is available after Node.js v20.11.0 baseDirectory: import.meta.dirname, recommendedConfig: js.configs.recommended, }) const eslintConfig = [ ...compat.config({ extends: ['eslint:recommended', 'next'], }), ] export default eslintConfig"
                },
                {
                    "type": "p",
                    "text": "The next configuration already handles setting default values for the parser , plugins and settings properties. There is no need to manually re-declare any of these properties unless you need a different configuration for your use case. If you include any other shareable configurations, you will need to make sure that these properties are not overwritten or modified . Otherwise, we recommend removing any configurations that share behavior with the next configuration or extending directly from the Next.js ESLint plugin as mentioned above."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js",
            "title": "Configuration: next.config.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js can be configured through a next.config.js file in the root of your project directory (for example, by package.json ) with a default export."
                },
                {
                    "type": "code",
                    "code": "// @ts-check /** @type {import('next').NextConfig} */ const nextConfig = { /* config options here */ } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "next.config.js is a regular Node.js module, not a JSON file. It gets used by the Next.js server and build phases, and it's not included in the browser build. If you need ECMAScript modules , you can use next.config.mjs :"
                },
                {
                    "type": "code",
                    "code": "// @ts-check /** * @type {import('next').NextConfig} */ const nextConfig = { /* config options here */ } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Good to know : next.config with the .cjs , .cts , or .mts extensions are currently not supported. You can also use a function:"
                },
                {
                    "type": "code",
                    "code": "// @ts-check export default (phase , { defaultConfig }) => { /** * @type {import('next').NextConfig} */ const nextConfig = { /* config options here */ } return nextConfig }"
                },
                {
                    "type": "p",
                    "text": "Since Next.js 12.1.0, you can use an async function:"
                },
                {
                    "type": "code",
                    "code": "// @ts-check module . exports = async (phase , { defaultConfig }) => { /** * @type {import('next').NextConfig} */ const nextConfig = { /* config options here */ } return nextConfig }"
                },
                {
                    "type": "p",
                    "text": "phase is the current context in which the configuration is loaded. You can see the available phases . Phases can be imported from next/constants :"
                },
                {
                    "type": "code",
                    "code": "// @ts-check const { PHASE_DEVELOPMENT_SERVER } = require ( 'next/constants' ) module . exports = (phase , { defaultConfig }) => { if (phase === PHASE_DEVELOPMENT_SERVER ) { return { /* development only config options here */ } } return { /* config options for all phases except development here */ } }"
                },
                {
                    "type": "p",
                    "text": "If you are using TypeScript in your project, you can use next.config.ts to use TypeScript in your configuration:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { /* config options here */ } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "The commented lines are the place where you can put the configs allowed by next.config.js , which are defined in this file . However, none of the configs are required, and it's not necessary to understand what each config does. Instead, search for the features you need to enable or modify in this section and they will show you what to do. Avoid using new JavaScript features not available in your target Node.js version. next.config.js will not be parsed by Webpack or Babel. This page documents all the available configuration options: Starting in Next.js 15.1, the next/experimental/testing/server package contains utilities to help unit test next.config.js files. The unstable_getResponseFromNextConfig function runs the headers , redirects , and rewrites functions from next.config.js with the provided request information and returns NextResponse with the results of the routing. The response from unstable_getResponseFromNextConfig only considers next.config.js fields and does not consider middleware or filesystem routes, so the result in production may be different than the unit test."
                },
                {
                    "type": "code",
                    "code": "import { getRedirectUrl , unstable_getResponseFromNextConfig , } from 'next/experimental/testing/server' const response = await unstable_getResponseFromNextConfig ({ url : 'https://nextjs.org/test' , nextConfig : { async redirects () { return [{ source : '/test' , destination : '/test2' , permanent : false }] } , } , }) expect ( response .status) .toEqual ( 307 ) expect ( getRedirectUrl (response)) .toEqual ( 'https://nextjs.org/test2' )"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/appDir",
            "title": "next.config.js: appDir | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Good to know : This option is no longer needed as of Next.js 13.4. The App Router is now stable. The App Router ( app directory ) enables support for layouts , Server Components , streaming , and colocated data fetching . Using the app directory will automatically enable React Strict Mode . Learn how to incrementally adopt app ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/assetPrefix",
            "title": "next.config.js: assetPrefix | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Attention : Deploying to Vercel automatically configures a global CDN for your Next.js project.\nYou do not need to manually setup an Asset Prefix. Good to know : Next.js 9.5+ added support for a customizable Base Path , which is better\nsuited for hosting your application on a sub-path like /docs .\nWe do not suggest you use a custom Asset Prefix for this use case. To set up a CDN , you can set up an asset prefix and configure your CDN's origin to resolve to the domain that Next.js is hosted on. Open next.config.mjs and add the assetPrefix config based on the phase :"
                },
                {
                    "type": "code",
                    "code": "// @ts-check import { PHASE_DEVELOPMENT_SERVER } from 'next/constants' export default (phase) => { const isDev = phase === PHASE_DEVELOPMENT_SERVER /** * @type {import('next').NextConfig} */ const nextConfig = { assetPrefix : isDev ? undefined : 'https://cdn.mydomain.com' , } return nextConfig }"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically use your asset prefix for the JavaScript and CSS files it loads from the /_next/ path ( .next/static/ folder). For example, with the above configuration, the following request for a JS chunk:"
                },
                {
                    "type": "code",
                    "code": "/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js"
                },
                {
                    "type": "code",
                    "code": "https://cdn.mydomain.com/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js"
                },
                {
                    "type": "p",
                    "text": "The exact configuration for uploading your files to a given CDN will depend on your CDN of choice. The only folder you need to host on your CDN is the contents of .next/static/ , which should be uploaded as _next/static/ as the above URL request indicates. Do not upload the rest of your .next/ folder , as you should not expose your server code and other configuration to the public. While assetPrefix covers requests to _next/static , it does not influence the following paths:"
                },
                {
                    "type": "list",
                    "items": [
                        "Files in the public folder; if you want to serve those assets over a CDN, you'll have to introduce the prefix yourself"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/authInterrupts",
            "title": "next.config.js: authInterrupts | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The authInterrupts configuration option allows you to use forbidden and unauthorized APIs in your application. While these functions are experimental, you must enable the authInterrupts option in your next.config.js file to use them:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { authInterrupts : true , } , } export default nextConfig"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/basePath",
            "title": "next.config.js: basePath | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "To deploy a Next.js application under a sub-path of a domain you can use the basePath config option. basePath allows you to set a path prefix for the application. For example, to use /docs instead of '' (an empty string, the default), open next.config.js and add the basePath config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { basePath : '/docs' , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : This value must be set at build time and cannot be changed without re-building as the value is inlined in the client-side bundles. When linking to other pages using next/link and next/router the basePath will be automatically applied. For example, using /about will automatically become /docs/about when basePath is set to /docs ."
                },
                {
                    "type": "code",
                    "code": "export default function HomePage () { return ( <> < Link href = \"/about\" >About Page</ Link > </> ) }"
                },
                {
                    "type": "code",
                    "code": "< a href = \"/docs/about\" >About Page</ a >"
                },
                {
                    "type": "p",
                    "text": "This makes sure that you don't have to change all links in your application when changing the basePath value. When using the next/image component, you will need to add the basePath in front of src . For example, using /docs/me.png will properly serve your image when basePath is set to /docs ."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' function Home () { return ( <> < h1 >My Homepage</ h1 > < Image src = \"/docs/me.png\" alt = \"Picture of the author\" width = { 500 } height = { 500 } /> < p >Welcome to my homepage!</ p > </> ) } export default Home"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/cacheLife",
            "title": "next.config.js: cacheLife | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The cacheLife option allows you to define custom cache profiles when using the cacheLife function inside components or functions, and within the scope of the use cache directive . To define a profile, enable the dynamicIO flag and add the cache profile in the cacheLife object in the next.config.js file. For example, a blog profile:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { dynamicIO : true , cacheLife : { blog : { stale : 3600 , // 1 hour revalidate : 900 , // 15 minutes expire : 86400 , // 1 day } , } , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "You can now use this custom blog configuration in your component or function as follows:"
                },
                {
                    "type": "code",
                    "code": "import { unstable_cacheLife as cacheLife } from 'next/cache' export async function getCachedData () { 'use cache' cacheLife ( 'blog' ) const data = await fetch ( '/api/data' ) return data }"
                },
                {
                    "type": "p",
                    "text": "The configuration object has key values with the following format:"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/compress",
            "title": "next.config.js: compress | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "By default, Next.js uses gzip to compress rendered content and static files when using next start or a custom server. This is an optimization for applications that do not have compression configured. If compression is already configured in your application via a custom server, Next.js will not add compression."
                },
                {
                    "type": "list",
                    "items": [
                        "When hosting your application on Vercel , compression uses brotli first, then gzip .",
                        "You can check if compression is enabled and which algorithm is used by looking at the Accept-Encoding (browser accepted options) and Content-Encoding (currently used) headers in the response."
                    ]
                },
                {
                    "type": "p",
                    "text": "To disable compression , set the compress config option to false :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { compress : false , }"
                },
                {
                    "type": "p",
                    "text": "We do not recommend disabling compression unless you have compression configured on your server, as compression reduces bandwidth usage and improves the performance of your application. To change your compression algorithm, you will need to configure your custom server and set the compress option to false in your next.config.js file. For example, you're using nginx and want to switch to brotli , set the compress option to false to allow nginx to handle compression."
                },
                {
                    "type": "list",
                    "items": [
                        "For Next.js applications on Vercel, compression is handled by the Vercel's Edge Network and not Next.js. See the Vercel documentation for more information."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/crossOrigin",
            "title": "next.config.js: crossOrigin | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Use the crossOrigin option to add a crossOrigin attribute in all <script> tags generated by the next/script component , and define how cross-origin requests should be handled."
                },
                {
                    "type": "code",
                    "code": "module . exports = { crossOrigin : 'anonymous' , }"
                },
                {
                    "type": "list",
                    "items": [
                        "'anonymous' : Adds crossOrigin=\"anonymous\" attribute.",
                        "'use-credentials' : Adds crossOrigin=\"use-credentials\" ."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/cssChunking",
            "title": "next.config.js: cssChunking | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "CSS Chunking is a strategy used to improve the performance of your web application by splitting and re-ordering CSS files into chunks. This allows you to load only the CSS that is needed for a specific route, instead of loading all the application's CSS at once. You can control how CSS files are chunked using the experimental.cssChunking option in your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig = { experimental : { cssChunking : true , // default } , } satisfies NextConfig export default nextConfig"
                },
                {
                    "type": "list",
                    "items": [
                        "true (default) : Next.js will try to merge CSS files whenever possible, determining explicit and implicit dependencies between files from import order to reduce the number of chunks and therefore the number of requests.",
                        "false : Next.js will not attempt to merge or re-order your CSS files.",
                        "'strict' : Next.js will load CSS files in the correct order they are imported into your files, which can lead to more chunks and requests."
                    ]
                },
                {
                    "type": "p",
                    "text": "You may consider using 'strict' if you run into unexpected CSS behavior. For example, if you import a.css and b.css in different files using a different import order ( a before b , or b before a ), true will merge the files in any order and assume there are no dependencies between them. However, if b.css depends on a.css , you may want to use 'strict' to prevent the files from being merged, and instead, load them in the order they are imported - which can result in more chunks and requests. For most applications, we recommend true as it leads to fewer requests and better performance."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/devIndicators",
            "title": "next.config.js: devIndicators | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "devIndicators allows you to configure the on-screen indicators that give context about the current route you're viewing during development."
                },
                {
                    "type": "code",
                    "code": "devIndicators : { appIsrStatus ?: boolean , // defaults to true buildActivity ?: boolean , // defaults to true buildActivityPosition ?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left' , // defaults to 'bottom-right' } ,"
                },
                {
                    "type": "p",
                    "text": "Next.js displays a static indicator in the bottom corner of the screen that signals if a route will be prerendered at build time. This makes it easier to understand whether a route is static or dynamic, and for you to identify if a route opts out of static rendering . You can temporarily hide the indicator by clicking the close indicator which will remember your preference in localStorage for 1 hour. To permanently disable it, you can use the config option in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { devIndicators : { appIsrStatus : false , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "When you edit your code, and Next.js is compiling the application, a compilation indicator appears in the bottom right corner of the page. Good to know : This indicator is only present in development mode and will not appear when building and running the app in production mode. In some cases this indicator can be misplaced on your page, for example, when conflicting with a chat launcher. To change its position, open next.config.js and set the buildActivityPosition in the devIndicators object to bottom-right (default), bottom-left , top-right or top-left :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { devIndicators : { buildActivityPosition : 'bottom-right' , } , }"
                },
                {
                    "type": "p",
                    "text": "In some cases, this indicator might not be useful for you. To remove it, open next.config.js and disable the buildActivity config in devIndicators object:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { devIndicators : { buildActivity : false , } , }"
                },
                {
                    "type": "p",
                    "text": "If you expect a route to be static and the indicator is enabled but not showing, it's likely the route has opted out of static rendering. You can confirm if a route is static or dynamic by building your application using next build --debug , and checking the output in your terminal. Static (or prerendered) routes will display a ○ symbol, whereas dynamic routes will display a ƒ symbol. For example:"
                },
                {
                    "type": "code",
                    "code": "Route (app) Size First Load JS ┌ ○ /_not-found 0 B 0 kB └ ƒ /products/[id] 0 B 0 kB ○  (Static) prerendered as static content ƒ  (Dynamic) server-rendered on demand"
                },
                {
                    "type": "p",
                    "text": "There are two reasons a route might opt out of static rendering:"
                },
                {
                    "type": "list",
                    "items": [
                        "The presence of Dynamic APIs which rely on runtime information.",
                        "An uncached data request , like a call to an ORM or database driver."
                    ]
                },
                {
                    "type": "p",
                    "text": "Check your route for any of these conditions, and if you are not able to statically render the route, then consider using loading.js or <Suspense /> to leverage streaming ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/distDir",
            "title": "next.config.js: distDir | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "You can specify a name to use for a custom build directory to use instead of .next . Open next.config.js and add the distDir config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { distDir : 'build' , }"
                },
                {
                    "type": "p",
                    "text": "Now if you run next build Next.js will use build instead of the default .next folder. distDir should not leave your project directory. For example, ../build is an invalid directory."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/dynamicIO",
            "title": "next.config.js: dynamicIO | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The dynamicIO flag is an experimental feature in Next.js that causes data fetching operations in the App Router to be excluded from pre-renders unless they are explicitly cached. This can be useful for optimizing the performance of dynamic data fetching in server components. It is useful if your application requires fresh data fetching during runtime rather than serving from a pre-rendered cache. It is expected to be used in conjunction with use cache so that your data fetching happens at runtime by default unless you define specific parts of your application to be cached with use cache at the page, function, or component level. To enable the dynamicIO flag, set it to true in the experimental section of your next.config.ts file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { dynamicIO : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "When dynamicIO is enabled, you can use the following cache functions and configurations:"
                },
                {
                    "type": "list",
                    "items": [
                        "The use cache directive",
                        "The cacheLife function with use cache",
                        "The cacheTag function"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "While dynamicIO can optimize performance by ensuring fresh data fetching during runtime, it may also introduce additional latency compared to serving pre-rendered content."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/env",
            "title": "next.config.js: env | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Since the release of Next.js 9.4 we now have a more intuitive and ergonomic experience for adding environment variables . Give it a try! Good to know : environment variables specified in this way will always be included in the JavaScript bundle, prefixing the environment variable name with NEXT_PUBLIC_ only has an effect when specifying them through the environment or .env files . To add environment variables to the JavaScript bundle, open next.config.js and add the env config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { env : { customKey : 'my-value' , } , }"
                },
                {
                    "type": "p",
                    "text": "Now you can access process.env.customKey in your code. For example:"
                },
                {
                    "type": "code",
                    "code": "function Page () { return < h1 >The value of customKey is: { process . env .customKey}</ h1 > } export default Page"
                },
                {
                    "type": "p",
                    "text": "Next.js will replace process.env.customKey with 'my-value' at build time. Trying to destructure process.env variables won't work due to the nature of webpack DefinePlugin ."
                },
                {
                    "type": "code",
                    "code": "return < h1 >The value of customKey is: { process . env .customKey}</ h1 >"
                },
                {
                    "type": "code",
                    "code": "return < h1 >The value of customKey is: { 'my-value' }</ h1 >"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/eslint",
            "title": "next.config.js: eslint | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "When ESLint is detected in your project, Next.js fails your production build ( next build ) when errors are present. If you'd like Next.js to produce production code even when your application has ESLint errors, you can disable the built-in linting step completely. This is not recommended unless you already have ESLint configured to run in a separate part of your workflow (for example, in CI or a pre-commit hook). Open next.config.js and enable the ignoreDuringBuilds option in the eslint config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { eslint : { // Warning: This allows production builds to successfully complete even if // your project has ESLint errors. ignoreDuringBuilds : true , } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/expireTime",
            "title": "next.config.js: expireTime | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "You can specify a custom stale-while-revalidate expire time for CDNs to consume in the Cache-Control header for ISR enabled pages. Open next.config.js and add the expireTime config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { // one hour in seconds expireTime : 3600 , }"
                },
                {
                    "type": "p",
                    "text": "Now when sending the Cache-Control header the expire time will be calculated depending on the specific revalidate period. For example, if you have a revalidate of 15 minutes on a path and the expire time is one hour the generated Cache-Control header will be s-maxage=900, stale-while-revalidate=2700 so that it can stay stale for 15 minutes less than the configured expire time."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/exportPathMap",
            "title": "next.config.js: exportPathMap | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This feature is exclusive to next export and currently deprecated in favor of getStaticPaths with pages or generateStaticParams with app . exportPathMap allows you to specify a mapping of request paths to page destinations, to be used during export. Paths defined in exportPathMap will also be available when using next dev . Let's start with an example, to create a custom exportPathMap for an app with the following pages:"
                },
                {
                    "type": "list",
                    "items": [
                        "pages/index.js",
                        "pages/about.js",
                        "pages/post.js"
                    ]
                },
                {
                    "type": "p",
                    "text": "Open next.config.js and add the following exportPathMap config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { exportPathMap : async function ( defaultPathMap , { dev , dir , outDir , distDir , buildId } ) { return { '/' : { page : '/' } , '/about' : { page : '/about' } , '/p/hello-nextjs' : { page : '/post' , query : { title : 'hello-nextjs' } } , '/p/learn-nextjs' : { page : '/post' , query : { title : 'learn-nextjs' } } , '/p/deploy-nextjs' : { page : '/post' , query : { title : 'deploy-nextjs' } } , } } , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : the query field in exportPathMap cannot be used with automatically statically optimized pages or getStaticProps pages as they are rendered to HTML files at build-time and additional query information cannot be provided during next export . The pages will then be exported as HTML files, for example, /about will become /about.html . exportPathMap is an async function that receives 2 arguments: the first one is defaultPathMap , which is the default map used by Next.js. The second argument is an object with:"
                },
                {
                    "type": "list",
                    "items": [
                        "dev - true when exportPathMap is being called in development. false when running next export . In development exportPathMap is used to define routes.",
                        "dir - Absolute path to the project directory",
                        "outDir - Absolute path to the out/ directory ( configurable with -o ). When dev is true the value of outDir will be null .",
                        "distDir - Absolute path to the .next/ directory (configurable with the distDir config)",
                        "buildId - The generated build id"
                    ]
                },
                {
                    "type": "p",
                    "text": "The returned object is a map of pages where the key is the pathname and the value is an object that accepts the following fields:"
                },
                {
                    "type": "list",
                    "items": [
                        "page : String - the page inside the pages directory to render",
                        "query : Object - the query object passed to getInitialProps when prerendering. Defaults to {}"
                    ]
                },
                {
                    "type": "p",
                    "text": "The exported pathname can also be a filename (for example, /readme.md ), but you may need to set the Content-Type header to text/html when serving its content if it is different than .html . It is possible to configure Next.js to export pages as index.html files and require trailing slashes, /about becomes /about/index.html and is routable via /about/ . This was the default behavior prior to Next.js 9. To switch back and add a trailing slash, open next.config.js and enable the trailingSlash config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { trailingSlash : true , }"
                },
                {
                    "type": "p",
                    "text": "next export will use out as the default output directory, you can customize this using the -o argument, like so:"
                },
                {
                    "type": "code",
                    "code": "next export -o outdir"
                },
                {
                    "type": "p",
                    "text": "Warning : Using exportPathMap is deprecated and is overridden by getStaticPaths inside pages . We don't recommend using them together."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/generateBuildId",
            "title": "next.config.js: generateBuildId | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js generates an ID during next build to identify which version of your application is being served. The same build should be used and boot up multiple containers. If you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use the generateBuildId command in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { generateBuildId : async () => { // This could be anything, using the latest git hash return process . env . GIT_HASH } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/generateEtags",
            "title": "next.config.js: generateEtags | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js will generate etags for every page by default. You may want to disable etag generation for HTML pages depending on your cache strategy. Open next.config.js and disable the generateEtags option:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { generateEtags : false , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/headers",
            "title": "next.config.js: headers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Headers allow you to set custom HTTP headers on the response to an incoming request on a given path. To set custom HTTP headers you can use the headers key in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async headers () { return [ { source : '/about' , headers : [ { key : 'x-custom-header' , value : 'my custom header value' , } , { key : 'x-another-custom-header' , value : 'my other custom header value' , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "headers is an async function that expects an array to be returned holding objects with source and headers properties:"
                },
                {
                    "type": "list",
                    "items": [
                        "source is the incoming request path pattern.",
                        "headers is an array of response header objects, with key and value properties.",
                        "basePath : false or undefined - if false the basePath won't be included when matching, can be used for external rewrites only.",
                        "locale : false or undefined - whether the locale should not be included when matching.",
                        "has is an array of has objects with the type , key and value properties.",
                        "missing is an array of missing objects with the type , key and value properties."
                    ]
                },
                {
                    "type": "p",
                    "text": "Headers are checked before the filesystem which includes pages and /public files. If two headers match the same path and set the same header key, the last header key will override the first. Using the below headers, the path /hello will result in the header x-hello being world due to the last header value set being world ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { async headers () { return [ { source : '/:path*' , headers : [ { key : 'x-hello' , value : 'there' , } , ] , } , { source : '/hello' , headers : [ { key : 'x-hello' , value : 'world' , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "Path matches are allowed, for example /blog/:slug will match /blog/hello-world (no nested paths):"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async headers () { return [ { source : '/blog/:slug' , headers : [ { key : 'x-slug' , value : ':slug' , // Matched parameters can be used in the value } , { key : 'x-slug-:slug' , // Matched parameters can be used in the key value : 'my other custom header value' , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "To match a wildcard path you can use * after a parameter, for example /blog/:slug* will match /blog/a/b/c/d/hello-world :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async headers () { return [ { source : '/blog/:slug*' , headers : [ { key : 'x-slug' , value : ':slug*' , // Matched parameters can be used in the value } , { key : 'x-slug-:slug*' , // Matched parameters can be used in the key value : 'my other custom header value' , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "To match a regex path you can wrap the regex in parenthesis after a parameter, for example /blog/:slug(\\\\d{1,}) will match /blog/123 but not /blog/abc :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async headers () { return [ { source : '/blog/:post(\\\\d{1,})' , headers : [ { key : 'x-post' , value : ':post' , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "The following characters ( , ) , { , } , : , * , + , ? are used for regex path matching, so when used in the source as non-special values they must be escaped by adding \\\\ before them:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async headers () { return [ { // this will match `/english(default)/something` being requested source : '/english\\\\(default\\\\)/:slug' , headers : [ { key : 'x-header' , value : 'value' , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "To only apply a header when header, cookie, or query values also match the has field or don't match the missing field can be used. Both the source and all has items must match and all missing items must not match for the header to be applied. has and missing items can have the following fields:"
                },
                {
                    "type": "list",
                    "items": [
                        "type : String - must be either header , cookie , host , or query .",
                        "key : String - the key from the selected type to match against.",
                        "value : String or undefined - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value first-(?<paramName>.*) is used for first-second then second will be usable in the destination with :paramName ."
                    ]
                },
                {
                    "type": "code",
                    "code": "module . exports = { async headers () { return [ // if the header `x-add-header` is present, // the `x-another-header` header will be applied { source : '/:path*' , has : [ { type : 'header' , key : 'x-add-header' , } , ] , headers : [ { key : 'x-another-header' , value : 'hello' , } , ] , } , // if the header `x-no-header` is not present, // the `x-another-header` header will be applied { source : '/:path*' , missing : [ { type : 'header' , key : 'x-no-header' , } , ] , headers : [ { key : 'x-another-header' , value : 'hello' , } , ] , } , // if the source, query, and cookie are matched, // the `x-authorized` header will be applied { source : '/specific/:path*' , has : [ { type : 'query' , key : 'page' , // the page value will not be available in the // header key/values since value is provided and // doesn't use a named capture group e.g. (?<page>home) value : 'home' , } , { type : 'cookie' , key : 'authorized' , value : 'true' , } , ] , headers : [ { key : 'x-authorized' , value : ':authorized' , } , ] , } , // if the header `x-authorized` is present and // contains a matching value, the `x-another-header` will be applied { source : '/:path*' , has : [ { type : 'header' , key : 'x-authorized' , value : '(?<authorized>yes|true)' , } , ] , headers : [ { key : 'x-another-header' , value : ':authorized' , } , ] , } , // if the host is `example.com`, // this header will be applied { source : '/:path*' , has : [ { type : 'host' , value : 'example.com' , } , ] , headers : [ { key : 'x-another-header' , value : ':authorized' , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "When leveraging basePath support with headers each source is automatically prefixed with the basePath unless you add basePath: false to the header:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { basePath : '/docs' , async headers () { return [ { source : '/with-basePath' , // becomes /docs/with-basePath headers : [ { key : 'x-hello' , value : 'world' , } , ] , } , { source : '/without-basePath' , // is not modified since basePath: false is set headers : [ { key : 'x-hello' , value : 'world' , } , ] , basePath : false , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "When leveraging i18n support with headers each source is automatically prefixed to handle the configured locales unless you add locale: false to the header. If locale: false is used you must prefix the source with a locale for it to be matched correctly."
                },
                {
                    "type": "code",
                    "code": "module . exports = { i18n : { locales : [ 'en' , 'fr' , 'de' ] , defaultLocale : 'en' , } , async headers () { return [ { source : '/with-locale' , // automatically handles all locales headers : [ { key : 'x-hello' , value : 'world' , } , ] , } , { // does not handle locales automatically since locale: false is set source : '/nl/with-locale-manual' , locale : false , headers : [ { key : 'x-hello' , value : 'world' , } , ] , } , { // this matches '/' since `en` is the defaultLocale source : '/en' , locale : false , headers : [ { key : 'x-hello' , value : 'world' , } , ] , } , { // this gets converted to /(en|fr|de)/(.*) so will not match the top-level // `/` or `/fr` routes like /:path* would source : '/(.*)' , headers : [ { key : 'x-hello' , value : 'world' , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "Next.js sets the Cache-Control header of public, max-age=31536000, immutable for truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example, Static Image Imports . You cannot set Cache-Control headers in next.config.js for these assets. However, you can set Cache-Control headers for other responses or data. Learn more about caching with the App Router. Cross-Origin Resource Sharing (CORS) is a security feature that allows you to control which sites can access your resources. You can set the Access-Control-Allow-Origin header to allow a specific origin to access your Route Handlers ."
                },
                {
                    "type": "code",
                    "code": "async headers () { return [ { source : \"/api/:path*\" , headers : [ { key : \"Access-Control-Allow-Origin\" , value : \"*\" , // Set your origin } , { key : \"Access-Control-Allow-Methods\" , value : \"GET, POST, PUT, DELETE, OPTIONS\" , } , { key : \"Access-Control-Allow-Headers\" , value : \"Content-Type, Authorization\" , } , ] , } , ]; } ,"
                },
                {
                    "type": "p",
                    "text": "This header controls DNS prefetching, allowing browsers to proactively perform domain name resolution on external links, images, CSS, JavaScript, and more. This prefetching is performed in the background, so the DNS is more likely to be resolved by the time the referenced items are needed. This reduces latency when the user clicks a link."
                },
                {
                    "type": "code",
                    "code": "{ key : 'X-DNS-Prefetch-Control' , value : 'on' }"
                },
                {
                    "type": "p",
                    "text": "This header informs browsers it should only be accessed using HTTPS, instead of using HTTP. Using the configuration below, all present and future subdomains will use HTTPS for a max-age of 2 years. This blocks access to pages or subdomains that can only be served over HTTP. If you're deploying to Vercel , this header is not necessary as it's automatically added to all deployments unless you declare headers in your next.config.js ."
                },
                {
                    "type": "code",
                    "code": "{ key : 'Strict-Transport-Security' , value : 'max-age=63072000; includeSubDomains; preload' }"
                },
                {
                    "type": "p",
                    "text": "This header indicates whether the site should be allowed to be displayed within an iframe . This can prevent against clickjacking attacks. This header has been superseded by CSP's frame-ancestors option , which has better support in modern browsers (see Content Security Policy for configuration details)."
                },
                {
                    "type": "code",
                    "code": "{ key : 'X-Frame-Options' , value : 'SAMEORIGIN' }"
                },
                {
                    "type": "p",
                    "text": "This header allows you to control which features and APIs can be used in the browser. It was previously named Feature-Policy ."
                },
                {
                    "type": "code",
                    "code": "{ key : 'Permissions-Policy' , value : 'camera=(), microphone=(), geolocation=(), browsing-topics=()' }"
                },
                {
                    "type": "p",
                    "text": "This header prevents the browser from attempting to guess the type of content if the Content-Type header is not explicitly set. This can prevent XSS exploits for websites that allow users to upload and share files. For example, a user trying to download an image, but having it treated as a different Content-Type like an executable, which could be malicious. This header also applies to downloading browser extensions. The only valid value for this header is nosniff ."
                },
                {
                    "type": "code",
                    "code": "{ key : 'X-Content-Type-Options' , value : 'nosniff' }"
                },
                {
                    "type": "p",
                    "text": "This header controls how much information the browser includes when navigating from the current website (origin) to another."
                },
                {
                    "type": "code",
                    "code": "{ key : 'Referrer-Policy' , value : 'origin-when-cross-origin' }"
                },
                {
                    "type": "p",
                    "text": "Learn more about adding a Content Security Policy to your application."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/httpAgentOptions",
            "title": "next.config.js: httpAgentOptions | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "In Node.js versions prior to 18, Next.js automatically polyfills fetch() with undici and enables HTTP Keep-Alive by default. To disable HTTP Keep-Alive for all fetch() calls on the server-side, open next.config.js and add the httpAgentOptions config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { httpAgentOptions : { keepAlive : false , } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/images",
            "title": "next.config.js: images | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "If you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure next.config.js with the following:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { loader : 'custom' , loaderFile : './my/image/loader.js' , } , }"
                },
                {
                    "type": "p",
                    "text": "This loaderFile must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:"
                },
                {
                    "type": "code",
                    "code": "'use client' export default function myImageLoader ({ src , width , quality }) { return `https://example.com/ ${ src } ?w= ${ width } &q= ${ quality || 75 } ` }"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use the loader prop to pass the function to each instance of next/image . Good to know : Customizing the image loader file, which accepts a function, requires using Client Components to serialize the provided function. To learn more about configuring the behavior of the built-in Image Optimization API and the Image Component , see Image Configuration Options for available options."
                },
                {
                    "type": "list",
                    "items": [
                        "Akamai",
                        "AWS CloudFront",
                        "Cloudinary",
                        "Cloudflare",
                        "Contentful",
                        "Fastly",
                        "Gumlet",
                        "ImageEngine",
                        "Imgix",
                        "PixelBin",
                        "Sanity",
                        "Sirv",
                        "Supabase",
                        "Thumbor",
                        "Imagekit",
                        "Nitrogen AIO"
                    ]
                },
                {
                    "type": "code",
                    "code": "// Docs: https://techdocs.akamai.com/ivm/reference/test-images-on-demand export default function akamaiLoader ({ src , width , quality }) { return `https://example.com/ ${ src } ?imwidth= ${ width } ` }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://aws.amazon.com/developer/application-security-performance/articles/image-optimization export default function cloudfrontLoader ({ src , width , quality }) { const url = new URL ( `https://example.com ${ src } ` ) url . searchParams .set ( 'format' , 'auto' ) url . searchParams .set ( 'width' , width .toString ()) url . searchParams .set ( 'quality' , (quality || 75 ) .toString ()) return url .href }"
                },
                {
                    "type": "code",
                    "code": "// Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit,q_auto/turtles.jpg export default function cloudinaryLoader ({ src , width , quality }) { const params = [ 'f_auto' , 'c_limit' , `w_ ${ width } ` , `q_ ${ quality || 'auto' } ` ] return `https://example.com/ ${ params .join ( ',' ) }${ src } ` }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://developers.cloudflare.com/images/transform-images export default function cloudflareLoader ({ src , width , quality }) { const params = [ `width= ${ width } ` , `quality= ${ quality || 75 } ` , 'format=auto' ] return `https://example.com/cdn-cgi/image/ ${ params .join ( ',' ) } / ${ src } ` }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://www.contentful.com/developers/docs/references/images-api/ export default function contentfulLoader ({ src , width , quality }) { const url = new URL ( `https://example.com ${ src } ` ) url . searchParams .set ( 'fm' , 'webp' ) url . searchParams .set ( 'w' , width .toString ()) url . searchParams .set ( 'q' , (quality || 75 ) .toString ()) return url .href }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://developer.fastly.com/reference/io/ export default function fastlyLoader ({ src , width , quality }) { const url = new URL ( `https://example.com ${ src } ` ) url . searchParams .set ( 'auto' , 'webp' ) url . searchParams .set ( 'width' , width .toString ()) url . searchParams .set ( 'quality' , (quality || 75 ) .toString ()) return url .href }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://docs.gumlet.com/reference/image-transform-size export default function gumletLoader ({ src , width , quality }) { const url = new URL ( `https://example.com ${ src } ` ) url . searchParams .set ( 'format' , 'auto' ) url . searchParams .set ( 'w' , width .toString ()) url . searchParams .set ( 'q' , (quality || 75 ) .toString ()) return url .href }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://support.imageengine.io/hc/en-us/articles/360058880672-Directives export default function imageengineLoader ({ src , width , quality }) { const compression = 100 - (quality || 50 ) const params = [ `w_ ${ width } ` , `cmpr_ ${ compression } ` )] return `https://example.com ${ src } ?imgeng=/ ${ params .join ( '/' ) ` }"
                },
                {
                    "type": "code",
                    "code": "// Demo: https://static.imgix.net/daisy.png?format=auto&fit=max&w=300 export default function imgixLoader ({ src , width , quality }) { const url = new URL ( `https://example.com ${ src } ` ) const params = url .searchParams params .set ( 'auto' , params .getAll ( 'auto' ) .join ( ',' ) || 'format' ) params .set ( 'fit' , params .get ( 'fit' ) || 'max' ) params .set ( 'w' , params .get ( 'w' ) || width .toString ()) params .set ( 'q' , (quality || 50 ) .toString ()) return url .href }"
                },
                {
                    "type": "code",
                    "code": "// Doc (Resize): https://www.pixelbin.io/docs/transformations/basic/resize/#width-w // Doc (Optimise): https://www.pixelbin.io/docs/optimizations/quality/#image-quality-when-delivering // Doc (Auto Format Delivery): https://www.pixelbin.io/docs/optimizations/format/#automatic-format-selection-with-f_auto-url-parameter export default function pixelBinLoader ({ src , width , quality }) { const name = '<your-cloud-name>' const opt = `t.resize(w: ${ width } )~t.compress(q: ${ quality || 75 } )` return `https://cdn.pixelbin.io/v2/ ${ name } / ${ opt } / ${ src } ?f_auto=true` }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://www.sanity.io/docs/image-urls export default function sanityLoader ({ src , width , quality }) { const prj = 'zp7mbokg' const dataset = 'production' const url = new URL ( `https://cdn.sanity.io/images/ ${ prj } / ${ dataset }${ src } ` ) url . searchParams .set ( 'auto' , 'format' ) url . searchParams .set ( 'fit' , 'max' ) url . searchParams .set ( 'w' , width .toString ()) if (quality) { url . searchParams .set ( 'q' , quality .toString ()) } return url .href }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://sirv.com/help/articles/dynamic-imaging/ export default function sirvLoader ({ src , width , quality }) { const url = new URL ( `https://example.com ${ src } ` ) const params = url .searchParams params .set ( 'format' , params .getAll ( 'format' ) .join ( ',' ) || 'optimal' ) params .set ( 'w' , params .get ( 'w' ) || width .toString ()) params .set ( 'q' , (quality || 85 ) .toString ()) return url .href }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://supabase.com/docs/guides/storage/image-transformations#nextjs-loader export default function supabaseLoader ({ src , width , quality }) { const url = new URL ( `https://example.com ${ src } ` ) url . searchParams .set ( 'width' , width .toString ()) url . searchParams .set ( 'quality' , (quality || 75 ) .toString ()) return url .href }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://thumbor.readthedocs.io/en/latest/ export default function thumborLoader ({ src , width , quality }) { const params = [ ` ${ width } x0` , `filters:quality( ${ quality || 75 } )` ] return `https://example.com ${ params .join ( '/' ) }${ src } ` }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://imagekit.io/docs/image-transformation export default function imageKitLoader ({ src , width , quality }) { const params = [ `w- ${ width } ` , `q- ${ quality || 80 } ` ] return `https://ik.imagekit.io/your_imagekit_id/ ${ src } ?tr= ${ params .join ( ',' ) } ` }"
                },
                {
                    "type": "code",
                    "code": "// Docs: https://docs.n7.io/aio/intergrations/ export default function aioLoader ({ src , width , quality }) { const url = new URL (src , window . location .href) const params = url .searchParams const aioParams = params .getAll ( 'aio' ) aioParams .push ( `w- ${ width } ` ) if (quality) { aioParams .push ( `q- ${ quality .toString () } ` ) } params .set ( 'aio' , aioParams .join ( ';' )) return url .href }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/incrementalCacheHandlerPath",
            "title": "next.config.js: cacheHandler | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Caching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. When deploying to Vercel , the ISR cache is automatically persisted to durable storage. When self-hosting, the ISR cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router. You can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application."
                },
                {
                    "type": "code",
                    "code": "module . exports = { cacheHandler : require .resolve ( './cache-handler.js' ) , cacheMaxMemorySize : 0 , // disable default in-memory caching }"
                },
                {
                    "type": "p",
                    "text": "View an example of a custom cache handler and learn more about implementation. The cache handler can implement the following methods: get , set , and revalidateTag . Returns the cached value or null if not found. Returns Promise<void> . Learn more about revalidating data or the revalidateTag() function."
                },
                {
                    "type": "list",
                    "items": [
                        "revalidatePath is a convenience layer on top of cache tags. Calling revalidatePath will call your revalidateTag function, which you can then choose if you want to tag cache keys based on the path."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/inlineCss",
            "title": "next.config.js: inlineCss | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Experimental support for inlining CSS in the <head> . When this flag is enabled, all places where we normally generate a <link> tag will instead have a generated <style> tag."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { inlineCss : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Inlining CSS can be beneficial in several scenarios:"
                },
                {
                    "type": "list",
                    "items": [
                        "First-Time Visitors : Since CSS files are render-blocking resources, inlining eliminates the initial download delay that first-time visitors experience, improving page load performance.",
                        "Performance Metrics : By removing the additional network requests for CSS files, inlining can significantly improve key metrics like First Contentful Paint (FCP) and Largest Contentful Paint (LCP).",
                        "Slow Connections : For users on slower networks where each request adds considerable latency, inlining CSS can provide a noticeable performance boost by reducing network roundtrips.",
                        "Atomic CSS Bundles (e.g., Tailwind) : With utility-first frameworks like Tailwind CSS, the size of the styles required for a page is often O(1) relative to the complexity of the design. This makes inlining a compelling choice because the entire set of styles for the current page is lightweight and doesn’t grow with the page size. Inlining Tailwind styles ensures minimal payload and eliminates the need for additional network requests, which can further enhance performance."
                    ]
                },
                {
                    "type": "p",
                    "text": "While inlining CSS offers significant benefits for performance, there are scenarios where it may not be the best choice:"
                },
                {
                    "type": "list",
                    "items": [
                        "Large CSS Bundles : If your CSS bundle is too large, inlining it may significantly increase the size of the HTML, resulting in slower Time to First Byte (TTFB) and potentially worse performance for users with slow connections.",
                        "Dynamic or Page-Specific CSS : For applications with highly dynamic styles or pages that use different sets of CSS, inlining may lead to redundancy and bloat, as the full CSS for all pages may need to be inlined repeatedly.",
                        "Browser Caching : In cases where visitors frequently return to your site, external CSS files allow browsers to cache styles efficiently, reducing data transfer for subsequent visits. Inlining CSS eliminates this benefit."
                    ]
                },
                {
                    "type": "p",
                    "text": "Evaluate these trade-offs carefully, and consider combining inlining with other strategies, such as critical CSS extraction or a hybrid approach, for the best results tailored to your site's needs. This feature is currently experimental and has some known limitations:"
                },
                {
                    "type": "list",
                    "items": [
                        "CSS inlining is applied globally and cannot be configured on a per-page basis",
                        "Styles are duplicated during initial page load - once within <style> tags for SSR and once in the RSC payload",
                        "When navigating to statically rendered pages, styles will use <link> tags instead of inline CSS to avoid duplication",
                        "This feature is not available in development mode and only works in production builds"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/logging",
            "title": "next.config.js: logging | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "You can configure the logging level and whether the full URL is logged to the console when running Next.js in development mode. Currently, logging only applies to data fetching using the fetch API. It does not yet apply to other logs inside of Next.js."
                },
                {
                    "type": "code",
                    "code": "module . exports = { logging : { fetches : { fullUrl : true , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Any fetch requests that are restored from the Server Components HMR cache are not logged by default. However, this can be enabled by setting logging.fetches.hmrRefreshes to true ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { logging : { fetches : { hmrRefreshes : true , } , } , }"
                },
                {
                    "type": "p",
                    "text": "In addition, you can disable the development logging by setting logging to false ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { logging : false , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/mdxRs",
            "title": "next.config.js: mdxRs | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "For experimental use with @next/mdx . Compiles MDX files using the new Rust compiler."
                },
                {
                    "type": "code",
                    "code": "const withMDX = require ( '@next/mdx' )() /** @type {import('next').NextConfig} */ const nextConfig = { pageExtensions : [ 'ts' , 'tsx' , 'mdx' ] , experimental : { mdxRs : true , } , } module . exports = withMDX (nextConfig)"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/onDemandEntries",
            "title": "next.config.js: onDemandEntries | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js exposes some options that give you some control over how the server will dispose or keep in memory built pages in development. To change the defaults, open next.config.js and add the onDemandEntries config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { onDemandEntries : { // period (in ms) where the server will keep pages in the buffer maxInactiveAge : 25 * 1000 , // number of pages that should be kept simultaneously without being disposed pagesBufferLength : 2 , } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/optimizePackageImports",
            "title": "next.config.js: optimizePackageImports | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Some packages can export hundreds or thousands of modules, which can cause performance issues in development and production. Adding a package to experimental.optimizePackageImports will only load the modules you are actually using, while still giving you the convenience of writing import statements with many named exports."
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { optimizePackageImports : [ 'package-name' ] , } , }"
                },
                {
                    "type": "p",
                    "text": "The following libraries are optimized by default:"
                },
                {
                    "type": "list",
                    "items": [
                        "lucide-react",
                        "date-fns",
                        "lodash-es",
                        "ramda",
                        "antd",
                        "react-bootstrap",
                        "ahooks",
                        "@ant-design/icons",
                        "@headlessui/react",
                        "@headlessui-float/react",
                        "@heroicons/react/20/solid",
                        "@heroicons/react/24/solid",
                        "@heroicons/react/24/outline",
                        "@visx/visx",
                        "@tremor/react",
                        "rxjs",
                        "@mui/material",
                        "@mui/icons-material",
                        "recharts",
                        "react-use",
                        "@material-ui/core",
                        "@material-ui/icons",
                        "@tabler/icons-react",
                        "mui-core",
                        "react-icons/*"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/output",
            "title": "next.config.js: output | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "During a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application. This feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package's dependencies installed to run next start . Starting with Next.js 12, you can leverage Output File Tracing in the .next/ directory to only include the necessary files. Furthermore, this removes the need for the deprecated serverless target which can cause various issues and also creates unnecessary duplication. During next build , Next.js will use @vercel/nft to statically analyze import , require , and fs usage to determine all files that a page might load. Next.js' production server is also traced for its needed files and output at .next/next-server.js.nft.json which can be leveraged in production. To leverage the .nft.json files emitted to the .next output directory, you can read the list of files in each trace that are relative to the .nft.json file and then copy them to your deployment location. Next.js can automatically create a standalone folder that copies only the necessary files for a production deployment including select files in node_modules . To leverage this automatic copying you can enable it in your next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { output : 'standalone' , }"
                },
                {
                    "type": "p",
                    "text": "This will create a folder at .next/standalone which can then be deployed on its own without installing node_modules . Additionally, a minimal server.js file is also output which can be used instead of next start . This minimal server does not copy the public or .next/static folders by default as these should ideally be handled by a CDN instead, although these folders can be copied to the standalone/public and standalone/.next/static folders manually, after which server.js file will serve these automatically. To copy these manually, you can use the cp command-line tool after you next build :"
                },
                {
                    "type": "code",
                    "code": "cp -r public .next/standalone/ && cp -r .next/static .next/standalone/.next/"
                },
                {
                    "type": "p",
                    "text": "To start your minimal server.js file locally, run the following command:"
                },
                {
                    "type": "code",
                    "code": "node .next/standalone/server.js"
                },
                {
                    "type": "list",
                    "items": [
                        "If your project needs to listen to a specific port or hostname, you can define PORT or HOSTNAME environment variables before running server.js . For example, run PORT=8080 HOSTNAME=0.0.0.0 node server.js to start the server on http://0.0.0.0:8080 ."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "While tracing in monorepo setups, the project directory is used for tracing by default. For next build packages/web-app , packages/web-app would be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can set outputFileTracingRoot in your next.config.js ."
                    ]
                },
                {
                    "type": "code",
                    "code": "module . exports = { // this includes files from the monorepo base two directories up outputFileTracingRoot : path .join (__dirname , '../../' ) , }"
                },
                {
                    "type": "list",
                    "items": [
                        "There are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can leverage outputFileTracingExcludes and outputFileTracingIncludes respectively in next.config.js . Each config accepts an object with minimatch globs for the key to match specific pages and a value of an array with globs relative to the project's root to either include or exclude in the trace."
                    ]
                },
                {
                    "type": "code",
                    "code": "module . exports = { outputFileTracingExcludes : { '/api/hello' : [ './un-necessary-folder/**/*' ] , } , outputFileTracingIncludes : { '/api/another' : [ './necessary-folder/**/*' ] , '/api/login/\\\\[\\\\[\\\\.\\\\.\\\\.slug\\\\]\\\\]' : [ './node_modules/aws-crt/dist/bin/**/*' , ] , } , }"
                },
                {
                    "type": "p",
                    "text": "Note: The key of outputFileTracingIncludes / outputFileTracingExcludes is a glob , so special characters need to be escaped."
                },
                {
                    "type": "list",
                    "items": [
                        "Currently, Next.js does not do anything with the emitted .nft.json files. The files must be read by your deployment platform, for example Vercel , to create a minimal deployment. In a future release, a new command is planned to utilize these .nft.json files."
                    ]
                },
                {
                    "type": "p",
                    "text": "Tracing dependencies can be slow because it requires very complex computations and analysis. We created turbotrace in Rust as a faster and smarter alternative to the JavaScript implementation. To enable it, you can add the following configuration to your next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { turbotrace : { // control the log level of the turbotrace, default is `error` logLevel? : | 'bug' | 'fatal' | 'error' | 'warning' | 'hint' | 'note' | 'suggestions' | 'info' , // control if the log of turbotrace should contain the details of the analysis, default is `false` logDetail? : boolean // show all log messages without limit // turbotrace only show 1 log message for each categories by default logAll ?: boolean // control the context directory of the turbotrace // files outside of the context directory will not be traced // set the `outputFileTracingRoot` has the same effect // if the `outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used contextDirectory ?: string // if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing. // for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json') processCwd ?: string // control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`. memoryLimit ?: number } , } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/pageExtensions",
            "title": "next.config.js: pageExtensions | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "By default, Next.js accepts files with the following extensions: .tsx , .ts , .jsx , .js . This can be modified to allow other extensions like markdown ( .md , .mdx )."
                },
                {
                    "type": "code",
                    "code": "const withMDX = require ( '@next/mdx' )() /** @type {import('next').NextConfig} */ const nextConfig = { pageExtensions : [ 'js' , 'jsx' , 'ts' , 'tsx' , 'md' , 'mdx' ] , } module . exports = withMDX (nextConfig)"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/poweredByHeader",
            "title": "next.config.js: poweredByHeader | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "By default Next.js will add the x-powered-by header. To opt-out of it, open next.config.js and disable the poweredByHeader config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { poweredByHeader : false , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/ppr",
            "title": "next.config.js: ppr | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Partial Prerendering (PPR) enables you to combine static and dynamic components together in the same route. Learn more about PPR . In Next.js 15, you can incrementally adopt Partial Prerendering in layouts and pages by setting the ppr option in next.config.js to incremental , and exporting the experimental_ppr route config option at the top of the file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { ppr : 'incremental' , } , } export default nextConfig"
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from \"react\" import { StaticComponent , DynamicComponent , Fallback } from \"@/app/ui\" export const experimental_ppr = true export default function Page () { return { <> <StaticComponent /> <Suspense fallback = {<Fallback />} > <DynamicComponent /> </Suspense> </> }; }"
                },
                {
                    "type": "list",
                    "items": [
                        "Routes that don't have experimental_ppr will default to false and will not be prerendered using PPR. You need to explicitly opt-in to PPR for each route.",
                        "experimental_ppr will apply to all children of the route segment, including nested layouts and pages. You don't have to add it to every file, only the top segment of a route.",
                        "To disable PPR for children segments, you can set experimental_ppr to false in the child segment."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/productionBrowserSourceMaps",
            "title": "next.config.js: productionBrowserSourceMaps | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Source Maps are enabled by default during development. During production builds, they are disabled to prevent you leaking your source on the client, unless you specifically opt-in with the configuration flag. Next.js provides a configuration flag you can use to enable browser source map generation during the production build:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { productionBrowserSourceMaps : true , }"
                },
                {
                    "type": "p",
                    "text": "When the productionBrowserSourceMaps option is enabled, the source maps will be output in the same directory as the JavaScript files. Next.js will automatically serve these files when requested."
                },
                {
                    "type": "list",
                    "items": [
                        "Adding source maps can increase next build time",
                        "Increases memory usage during next build"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/reactCompiler",
            "title": "next.config.js: reactCompiler | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js 15 introduced support for the React Compiler . The compiler improves performance by automatically optimizing component rendering. This reduces the amount of manual memoization developers have to do through APIs such as useMemo and useCallback . To use it, upgrade to Next.js 15, install the babel-plugin-react-compiler :"
                },
                {
                    "type": "code",
                    "code": "npm install babel-plugin-react-compiler"
                },
                {
                    "type": "p",
                    "text": "Then, add experimental.reactCompiler option in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { reactCompiler : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Note: The React Compiler is currently only possible to use in Next.js through a Babel plugin. This will opt-out of Next.js's default Rust-based compiler , which could result in slower build times. We are working on support for the React Compiler as our default compiler. Learn more about the React Compiler , and the available Next.js config options . You can configure the compiler to run in \"opt-in\" mode as follows:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { reactCompiler : { compilationMode : 'annotation' , } , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Then, you can annotate specific components or hooks with the \"use memo\" directive from React to opt-in:"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { 'use memo' // ... }"
                },
                {
                    "type": "p",
                    "text": "Note: You can also use the \"use no memo\" directive from React for the opposite effect, to opt-out a component or hook."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/reactMaxHeadersLength",
            "title": "next.config.js: reactMaxHeadersLength | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "During static rendering, React can emit headers that can be added to the response. These can be used to improve performance by allowing the browser to preload resources like fonts, scripts, and stylesheets. The default value is 6000 , but you can override this value by configuring the reactMaxHeadersLength option in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { reactMaxHeadersLength : 1000 , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : This option is only available in App Router. Depending on the type of proxy between the browser and the server, the headers can be truncated. For example, if you are using a reverse proxy that doesn't support long headers, you should set a lower value to ensure that the headers are not truncated."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/reactStrictMode",
            "title": "next.config.js: reactStrictMode | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Good to know : Since Next.js 13.5.1, Strict Mode is true by default with app router, so the above configuration is only necessary for pages . You can still disable Strict Mode by setting reactStrictMode: false . Suggested : We strongly suggest you enable Strict Mode in your Next.js application to better prepare your application for the future of React. React's Strict Mode is a development mode only feature for highlighting potential problems in an application. It helps to identify unsafe lifecycles, legacy API usage, and a number of other features. The Next.js runtime is Strict Mode-compliant. To opt-in to Strict Mode, configure the following option in your next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { reactStrictMode : true , }"
                },
                {
                    "type": "p",
                    "text": "If you or your team are not ready to use Strict Mode in your entire application, that's OK! You can incrementally migrate on a page-by-page basis using <React.StrictMode> ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects",
            "title": "next.config.js: redirects | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Redirects allow you to redirect an incoming request path to a different destination path. To use redirects you can use the redirects key in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async redirects () { return [ { source : '/about' , destination : '/' , permanent : true , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "redirects is an async function that expects an array to be returned holding objects with source , destination , and permanent properties:"
                },
                {
                    "type": "list",
                    "items": [
                        "source is the incoming request path pattern.",
                        "destination is the path you want to route to.",
                        "permanent true or false - if true will use the 308 status code which instructs clients/search engines to cache the redirect forever, if false will use the 307 status code which is temporary and is not cached."
                    ]
                },
                {
                    "type": "p",
                    "text": "Why does Next.js use 307 and 308? Traditionally a 302 was used for a temporary redirect, and a 301 for a permanent redirect, but many browsers changed the request method of the redirect to GET , regardless of the original method. For example, if the browser made a request to POST /v1/users which returned status code 302 with location /v2/users , the subsequent request might be GET /v2/users instead of the expected POST /v2/users . Next.js uses the 307 temporary redirect, and 308 permanent redirect status codes to explicitly preserve the request method used."
                },
                {
                    "type": "list",
                    "items": [
                        "basePath : false or undefined - if false the basePath won't be included when matching, can be used for external redirects only.",
                        "locale : false or undefined - whether the locale should not be included when matching.",
                        "has is an array of has objects with the type , key and value properties.",
                        "missing is an array of missing objects with the type , key and value properties."
                    ]
                },
                {
                    "type": "p",
                    "text": "Redirects are checked before the filesystem which includes pages and /public files. When using the Pages Router, redirects are not applied to client-side routing ( Link , router.push ) unless Middleware is present and matches the path. When a redirect is applied, any query values provided in the request will be passed through to the redirect destination. For example, see the following redirect configuration:"
                },
                {
                    "type": "code",
                    "code": "{ source : '/old-blog/:path*' , destination : '/blog/:path*' , permanent : false }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Remember to include the forward slash / before the colon : in path parameters of the source and destination paths, otherwise the path will be treated as a literal string and you run the risk of causing infinite redirects. When /old-blog/post-1?hello=world is requested, the client will be redirected to /blog/post-1?hello=world . Path matches are allowed, for example /old-blog/:slug will match /old-blog/hello-world (no nested paths):"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async redirects () { return [ { source : '/old-blog/:slug' , destination : '/news/:slug' , // Matched parameters can be used in the destination permanent : true , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "To match a wildcard path you can use * after a parameter, for example /blog/:slug* will match /blog/a/b/c/d/hello-world :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async redirects () { return [ { source : '/blog/:slug*' , destination : '/news/:slug*' , // Matched parameters can be used in the destination permanent : true , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "To match a regex path you can wrap the regex in parentheses after a parameter, for example /post/:slug(\\\\d{1,}) will match /post/123 but not /post/abc :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async redirects () { return [ { source : '/post/:slug(\\\\d{1,})' , destination : '/news/:slug' , // Matched parameters can be used in the destination permanent : false , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "The following characters ( , ) , { , } , : , * , + , ? are used for regex path matching, so when used in the source as non-special values they must be escaped by adding \\\\ before them:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async redirects () { return [ { // this will match `/english(default)/something` being requested source : '/english\\\\(default\\\\)/:slug' , destination : '/en-us/:slug' , permanent : false , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "To only match a redirect when header, cookie, or query values also match the has field or don't match the missing field can be used. Both the source and all has items must match and all missing items must not match for the redirect to be applied. has and missing items can have the following fields:"
                },
                {
                    "type": "list",
                    "items": [
                        "type : String - must be either header , cookie , host , or query .",
                        "key : String - the key from the selected type to match against.",
                        "value : String or undefined - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value first-(?<paramName>.*) is used for first-second then second will be usable in the destination with :paramName ."
                    ]
                },
                {
                    "type": "code",
                    "code": "module . exports = { async redirects () { return [ // if the header `x-redirect-me` is present, // this redirect will be applied { source : '/:path((?!another-page$).*)' , has : [ { type : 'header' , key : 'x-redirect-me' , } , ] , permanent : false , destination : '/another-page' , } , // if the header `x-dont-redirect` is present, // this redirect will NOT be applied { source : '/:path((?!another-page$).*)' , missing : [ { type : 'header' , key : 'x-do-not-redirect' , } , ] , permanent : false , destination : '/another-page' , } , // if the source, query, and cookie are matched, // this redirect will be applied { source : '/specific/:path*' , has : [ { type : 'query' , key : 'page' , // the page value will not be available in the // destination since value is provided and doesn't // use a named capture group e.g. (?<page>home) value : 'home' , } , { type : 'cookie' , key : 'authorized' , value : 'true' , } , ] , permanent : false , destination : '/another/:path*' , } , // if the header `x-authorized` is present and // contains a matching value, this redirect will be applied { source : '/' , has : [ { type : 'header' , key : 'x-authorized' , value : '(?<authorized>yes|true)' , } , ] , permanent : false , destination : '/home?authorized=:authorized' , } , // if the host is `example.com`, // this redirect will be applied { source : '/:path((?!another-page$).*)' , has : [ { type : 'host' , value : 'example.com' , } , ] , permanent : false , destination : '/another-page' , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "When leveraging basePath support with redirects each source and destination is automatically prefixed with the basePath unless you add basePath: false to the redirect:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { basePath : '/docs' , async redirects () { return [ { source : '/with-basePath' , // automatically becomes /docs/with-basePath destination : '/another' , // automatically becomes /docs/another permanent : false , } , { // does not add /docs since basePath: false is set source : '/without-basePath' , destination : 'https://example.com' , basePath : false , permanent : false , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "When leveraging i18n support with redirects each source and destination is automatically prefixed to handle the configured locales unless you add locale: false to the redirect. If locale: false is used you must prefix the source and destination with a locale for it to be matched correctly."
                },
                {
                    "type": "code",
                    "code": "module . exports = { i18n : { locales : [ 'en' , 'fr' , 'de' ] , defaultLocale : 'en' , } , async redirects () { return [ { source : '/with-locale' , // automatically handles all locales destination : '/another' , // automatically passes the locale on permanent : false , } , { // does not handle locales automatically since locale: false is set source : '/nl/with-locale-manual' , destination : '/nl/another' , locale : false , permanent : false , } , { // this matches '/' since `en` is the defaultLocale source : '/en' , destination : '/en/another' , locale : false , permanent : false , } , // it's possible to match all locales even when locale: false is set { source : '/:locale/page' , destination : '/en/newpage' , permanent : false , locale : false , } , { // this gets converted to /(en|fr|de)/(.*) so will not match the top-level // `/` or `/fr` routes like /:path* would source : '/(.*)' , destination : '/another' , permanent : false , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "In some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use the statusCode property instead of the permanent property, but not both. To to ensure IE11 compatibility, a Refresh header is automatically added for the 308 status code."
                },
                {
                    "type": "list",
                    "items": [
                        "Inside API Routes and Route Handlers , you can redirect based on the incoming request.",
                        "Inside getStaticProps and getServerSideProps , you can redirect specific pages at request-time."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/rewrites",
            "title": "next.config.js: rewrites | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Rewrites allow you to map an incoming request path to a different destination path. Rewrites act as a URL proxy and mask the destination path, making it appear the user hasn't changed their location on the site. In contrast, redirects will reroute to a new page and show the URL changes. To use rewrites you can use the rewrites key in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ { source : '/about' , destination : '/' , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "Rewrites are applied to client-side routing, a <Link href=\"/about\"> will have the rewrite applied in the above example. rewrites is an async function that expects to return either an array or an object of arrays (see below) holding objects with source and destination properties:"
                },
                {
                    "type": "list",
                    "items": [
                        "source : String - is the incoming request path pattern.",
                        "destination : String is the path you want to route to.",
                        "basePath : false or undefined - if false the basePath won't be included when matching, can be used for external rewrites only.",
                        "locale : false or undefined - whether the locale should not be included when matching.",
                        "has is an array of has objects with the type , key and value properties.",
                        "missing is an array of missing objects with the type , key and value properties."
                    ]
                },
                {
                    "type": "p",
                    "text": "When the rewrites function returns an array, rewrites are applied after checking the filesystem (pages and /public files) and before dynamic routes. When the rewrites function returns an object of arrays with a specific shape, this behavior can be changed and more finely controlled, as of v10.1 of Next.js:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return { beforeFiles : [ // These rewrites are checked after headers/redirects // and before all files including _next/public files which // allows overriding page files { source : '/some-page' , destination : '/somewhere-else' , has : [{ type : 'query' , key : 'overrideMe' }] , } , ] , afterFiles : [ // These rewrites are checked after pages/public files // are checked but before dynamic routes { source : '/non-existent' , destination : '/somewhere-else' , } , ] , fallback : [ // These rewrites are checked after both pages/public files // and dynamic routes are checked { source : '/:path*' , destination : `https://my-old-site.com/:path*` , } , ] , } } , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : rewrites in beforeFiles do not check the filesystem/dynamic routes immediately after matching a source, they continue until all beforeFiles have been checked. The order Next.js routes are checked is:"
                },
                {
                    "type": "list",
                    "items": [
                        "headers are checked/applied",
                        "redirects are checked/applied",
                        "beforeFiles rewrites are checked/applied",
                        "static files from the public directory , _next/static files, and non-dynamic pages are checked/served",
                        "afterFiles rewrites are checked/applied, if one of these rewrites is matched we check dynamic routes/static files after each match",
                        "fallback rewrites are checked/applied, these are applied before rendering the 404 page and after dynamic routes/all static assets have been checked. If you use fallback: true/'blocking' in getStaticPaths , the fallback rewrites defined in your next.config.js will not be run."
                    ]
                },
                {
                    "type": "p",
                    "text": "When using parameters in a rewrite the parameters will be passed in the query by default when none of the parameters are used in the destination ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ { source : '/old-about/:path*' , destination : '/about' , // The :path parameter isn't used here so will be automatically passed in the query } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "If a parameter is used in the destination none of the parameters will be automatically passed in the query."
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ { source : '/docs/:path*' , destination : '/:path*' , // The :path parameter is used here so will not be automatically passed in the query } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "You can still pass the parameters manually in the query if one is already used in the destination by specifying the query in the destination ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ { source : '/:first/:second' , destination : '/:first?second=:second' , // Since the :first parameter is used in the destination the :second parameter // will not automatically be added in the query although we can manually add it // as shown above } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Static pages from Automatic Static Optimization or prerendering params from rewrites will be parsed on the client after hydration and provided in the query. Path matches are allowed, for example /blog/:slug will match /blog/hello-world (no nested paths):"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ { source : '/blog/:slug' , destination : '/news/:slug' , // Matched parameters can be used in the destination } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "To match a wildcard path you can use * after a parameter, for example /blog/:slug* will match /blog/a/b/c/d/hello-world :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ { source : '/blog/:slug*' , destination : '/news/:slug*' , // Matched parameters can be used in the destination } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "To match a regex path you can wrap the regex in parenthesis after a parameter, for example /blog/:slug(\\\\d{1,}) will match /blog/123 but not /blog/abc :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ { source : '/old-blog/:post(\\\\d{1,})' , destination : '/blog/:post' , // Matched parameters can be used in the destination } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "The following characters ( , ) , { , } , [ , ] , | , \\ , ^ , . , : , * , + , - , ? , $ are used for regex path matching, so when used in the source as non-special values they must be escaped by adding \\\\ before them:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ { // this will match `/english(default)/something` being requested source : '/english\\\\(default\\\\)/:slug' , destination : '/en-us/:slug' , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "To only match a rewrite when header, cookie, or query values also match the has field or don't match the missing field can be used. Both the source and all has items must match and all missing items must not match for the rewrite to be applied. has and missing items can have the following fields:"
                },
                {
                    "type": "list",
                    "items": [
                        "type : String - must be either header , cookie , host , or query .",
                        "key : String - the key from the selected type to match against.",
                        "value : String or undefined - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value first-(?<paramName>.*) is used for first-second then second will be usable in the destination with :paramName ."
                    ]
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ // if the header `x-rewrite-me` is present, // this rewrite will be applied { source : '/:path*' , has : [ { type : 'header' , key : 'x-rewrite-me' , } , ] , destination : '/another-page' , } , // if the header `x-rewrite-me` is not present, // this rewrite will be applied { source : '/:path*' , missing : [ { type : 'header' , key : 'x-rewrite-me' , } , ] , destination : '/another-page' , } , // if the source, query, and cookie are matched, // this rewrite will be applied { source : '/specific/:path*' , has : [ { type : 'query' , key : 'page' , // the page value will not be available in the // destination since value is provided and doesn't // use a named capture group e.g. (?<page>home) value : 'home' , } , { type : 'cookie' , key : 'authorized' , value : 'true' , } , ] , destination : '/:path*/home' , } , // if the header `x-authorized` is present and // contains a matching value, this rewrite will be applied { source : '/:path*' , has : [ { type : 'header' , key : 'x-authorized' , value : '(?<authorized>yes|true)' , } , ] , destination : '/home?authorized=:authorized' , } , // if the host is `example.com`, // this rewrite will be applied { source : '/:path*' , has : [ { type : 'host' , value : 'example.com' , } , ] , destination : '/another-page' , } , ] } , }"
                },
                {
                    "type": "list",
                    "items": [
                        "Incremental adoption of Next.js",
                        "Using Multiple Zones"
                    ]
                },
                {
                    "type": "p",
                    "text": "Rewrites allow you to rewrite to an external URL. This is especially useful for incrementally adopting Next.js. The following is an example rewrite for redirecting the /blog route of your main app to an external site."
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return [ { source : '/blog' , destination : 'https://example.com/blog' , } , { source : '/blog/:slug' , destination : 'https://example.com/blog/:slug' , // Matched parameters can be used in the destination } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "If you're using trailingSlash: true , you also need to insert a trailing slash in the source parameter. If the destination server is also expecting a trailing slash it should be included in the destination parameter as well."
                },
                {
                    "type": "code",
                    "code": "module . exports = { trailingSlash : true , async rewrites () { return [ { source : '/blog/' , destination : 'https://example.com/blog/' , } , { source : '/blog/:path*/' , destination : 'https://example.com/blog/:path*/' , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "You can also have Next.js fall back to proxying to an existing website after checking all Next.js routes. This way you don't have to change the rewrites configuration when migrating more pages to Next.js"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async rewrites () { return { fallback : [ { source : '/:path*' , destination : `https://custom-routes-proxying-endpoint.vercel.app/:path*` , } , ] , } } , }"
                },
                {
                    "type": "p",
                    "text": "When leveraging basePath support with rewrites each source and destination is automatically prefixed with the basePath unless you add basePath: false to the rewrite:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { basePath : '/docs' , async rewrites () { return [ { source : '/with-basePath' , // automatically becomes /docs/with-basePath destination : '/another' , // automatically becomes /docs/another } , { // does not add /docs to /without-basePath since basePath: false is set // Note: this can not be used for internal rewrites e.g. `destination: '/another'` source : '/without-basePath' , destination : 'https://example.com' , basePath : false , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "When leveraging i18n support with rewrites each source and destination is automatically prefixed to handle the configured locales unless you add locale: false to the rewrite. If locale: false is used you must prefix the source and destination with a locale for it to be matched correctly."
                },
                {
                    "type": "code",
                    "code": "module . exports = { i18n : { locales : [ 'en' , 'fr' , 'de' ] , defaultLocale : 'en' , } , async rewrites () { return [ { source : '/with-locale' , // automatically handles all locales destination : '/another' , // automatically passes the locale on } , { // does not handle locales automatically since locale: false is set source : '/nl/with-locale-manual' , destination : '/nl/another' , locale : false , } , { // this matches '/' since `en` is the defaultLocale source : '/en' , destination : '/en/another' , locale : false , } , { // it's possible to match all locales even when locale: false is set source : '/:locale/api-alias/:path*' , destination : '/api/:path*' , locale : false , } , { // this gets converted to /(en|fr|de)/(.*) so will not match the top-level // `/` or `/fr` routes like /:path* would source : '/(.*)' , destination : '/another' , } , ] } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/sassOptions",
            "title": "next.config.js: sassOptions | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "sassOptions allow you to configure the Sass compiler."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const sassOptions = { additionalData : ` $var: red; ` , } const nextConfig : NextConfig = { sassOptions : { ... sassOptions , implementation : 'sass-embedded' , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Good to know: sassOptions are not typed outside of implementation because Next.js does not maintain the other possible properties."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/serverActions",
            "title": "next.config.js: serverActions | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Options for configuring Server Actions behavior in your Next.js application. A list of extra safe origin domains from which Server Actions can be invoked. Next.js compares the origin of a Server Action request with the host domain, ensuring they match to prevent CSRF attacks. If not provided, only the same origin is allowed."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ module . exports = { experimental : { serverActions : { allowedOrigins : [ 'my-proxy.com' , '*.my-proxy.com' ] , } , } , }"
                },
                {
                    "type": "p",
                    "text": "By default, the maximum size of the request body sent to a Server Action is 1MB, to prevent the consumption of excessive server resources in parsing large amounts of data, as well as potential DDoS attacks. However, you can configure this limit using the serverActions.bodySizeLimit option. It can take the number of bytes or any string format supported by bytes, for example 1000 , '500kb' or '3mb' ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ module . exports = { experimental : { serverActions : { bodySizeLimit : '2mb' , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Server Actions became a stable feature in Next.js 14, and are enabled by default. However, if you are using an earlier version of Next.js, you can enable them by setting experimental.serverActions to true ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const config = { experimental : { serverActions : true , } , } module . exports = config"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/serverComponentsHmrCache",
            "title": "next.config.js: serverComponentsHmrCache | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The experimental serverComponentsHmrCache option allows you to cache fetch responses in Server Components across Hot Module Replacement (HMR) refreshes in local development. This results in faster responses and reduced costs for billed API calls. By default, the HMR cache applies to all fetch requests, including those with the cache: 'no-store' option. This means uncached requests will not show fresh data between HMR refreshes. However, the cache will be cleared on navigation or full-page reloads. You can disable the HMR cache by setting serverComponentsHmrCache to false in your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { serverComponentsHmrCache : false , // defaults to true } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Good to know: For better observability, we recommend using the logging.fetches option which logs fetch cache hits and misses in the console during development."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/serverExternalPackages",
            "title": "next.config.js: serverExternalPackages | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Dependencies used inside Server Components and Route Handlers will automatically be bundled by Next.js. If a dependency is using Node.js specific features, you can choose to opt-out specific dependencies from the Server Components bundling and use native Node.js require ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { serverExternalPackages : [ '@acme/ui' ] , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js includes a short list of popular packages that currently are working on compatibility and automatically opt-ed out:"
                },
                {
                    "type": "list",
                    "items": [
                        "@appsignal/nodejs",
                        "@aws-sdk/client-s3",
                        "@aws-sdk/s3-presigned-post",
                        "@blockfrost/blockfrost-js",
                        "@highlight-run/node",
                        "@jpg-store/lucid-cardano",
                        "@libsql/client",
                        "@mikro-orm/core",
                        "@mikro-orm/knex",
                        "@node-rs/argon2",
                        "@node-rs/bcrypt",
                        "@prisma/client",
                        "@react-pdf/renderer",
                        "@sentry/profiling-node",
                        "@sparticuz/chromium",
                        "@swc/core",
                        "argon2",
                        "autoprefixer",
                        "aws-crt",
                        "bcrypt",
                        "better-sqlite3",
                        "canvas",
                        "cpu-features",
                        "cypress",
                        "dd-trace",
                        "eslint",
                        "express",
                        "firebase-admin",
                        "import-in-the-middle",
                        "isolated-vm",
                        "jest",
                        "jsdom",
                        "keyv",
                        "libsql",
                        "mdx-bundler",
                        "mongodb",
                        "mongoose",
                        "newrelic",
                        "next-mdx-remote",
                        "next-seo",
                        "node-cron",
                        "node-pty",
                        "node-web-audio-api",
                        "oslo",
                        "pg",
                        "playwright",
                        "playwright-core",
                        "postcss",
                        "prettier",
                        "prisma",
                        "puppeteer-core",
                        "puppeteer",
                        "require-in-the-middle",
                        "rimraf",
                        "sharp",
                        "shiki",
                        "sqlite3",
                        "ts-node",
                        "ts-morph",
                        "typescript",
                        "vscode-oniguruma",
                        "webpack",
                        "websocket",
                        "zeromq"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/staleTimes",
            "title": "next.config.js: staleTimes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "staleTimes is an experimental feature that enables caching of page segments in the client-side router cache . You can enable this experimental feature and provide custom revalidation times by setting the experimental staleTimes flag:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { experimental : { staleTimes : { dynamic : 30 , static : 180 , } , } , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "The static and dynamic properties correspond with the time period (in seconds) based on different types of link prefetching ."
                },
                {
                    "type": "list",
                    "items": [
                        "The dynamic property is used when the page is neither statically generated nor fully prefetched (e.g. with prefetch={true} ). Default: 0 seconds (not cached)",
                        "Default: 0 seconds (not cached)",
                        "The static property is used for statically generated pages, or when the prefetch prop on Link is set to true , or when calling router.prefetch . Default: 5 minutes",
                        "Default: 5 minutes"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Loading boundaries are considered reusable for the static period defined in this configuration.",
                        "This doesn't affect partial rendering , meaning shared layouts won't automatically be refetched on every navigation, only the page segment that changes.",
                        "This doesn't change back/forward caching behavior to prevent layout shift and to prevent losing the browser scroll position."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can learn more about the Client Router Cache here ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/staticGeneration",
            "title": "next.config.js: staticGeneration* | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The staticGeneration* options allow you to configure the Static Generation process for advanced use cases."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { staticGenerationRetryCount : 1 , staticGenerationMaxConcurrency : 8 , staticGenerationMinPagesPerWorker : 25 , } , } export default nextConfig"
                },
                {
                    "type": "list",
                    "items": [
                        "staticGenerationRetryCount : The number of times to retry a failed page generation before failing the build.",
                        "staticGenerationMaxConcurrency : The maximum number of pages to be processed per worker.",
                        "staticGenerationMinPagesPerWorker : The minimum number of pages to be processed before starting a new worker."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/trailingSlash",
            "title": "next.config.js: trailingSlash | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "By default Next.js will redirect URLs with trailing slashes to their counterpart without a trailing slash. For example /about/ will redirect to /about . You can configure this behavior to act the opposite way, where URLs without trailing slashes are redirected to their counterparts with trailing slashes. Open next.config.js and add the trailingSlash config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { trailingSlash : true , }"
                },
                {
                    "type": "p",
                    "text": "With this option set, URLs like /about will redirect to /about/ . When used with output: \"export\" configuration, the /about page will output /about/index.html (instead of the default /about.html )."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/transpilePackages",
            "title": "next.config.js: transpilePackages | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies ( node_modules ). This replaces the next-transpile-modules package."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { transpilePackages : [ 'package-name' ] , } module . exports = nextConfig"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/turbo",
            "title": "next.config.js: turbo | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The turbo option lets you customize Turbopack to transform different files and change how modules are resolved."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { turbo : { // ... } , } , } export default nextConfig"
                },
                {
                    "type": "list",
                    "items": [
                        "Turbopack for Next.js does not require loaders nor loader configuration for built-in functionality. Turbopack has built-in support for CSS and compiling modern JavaScript, so there's no need for css-loader , postcss-loader , or babel-loader if you're using @babel/preset-env ."
                    ]
                },
                {
                    "type": "p",
                    "text": "The following options are available for the turbo configuration: The following loaders have been tested to work with Turbopack's webpack loader implementation:"
                },
                {
                    "type": "list",
                    "items": [
                        "babel-loader",
                        "@svgr/webpack",
                        "svg-inline-loader",
                        "yaml-loader",
                        "string-replace-loader",
                        "raw-loader",
                        "sass-loader"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you need loader support beyond what's built in, many webpack loaders already work with Turbopack. There are currently some limitations:"
                },
                {
                    "type": "list",
                    "items": [
                        "Only a core subset of the webpack loader API is implemented. Currently, there is enough coverage for some popular loaders, and we'll expand our API support in the future.",
                        "Only loaders that return JavaScript code are supported. Loaders that transform files like stylesheets or images are not currently supported.",
                        "Options passed to webpack loaders must be plain JavaScript primitives, objects, and arrays. For example, it's not possible to pass require() plugin modules as option values."
                    ]
                },
                {
                    "type": "p",
                    "text": "To configure loaders, add the names of the loaders you've installed and any options in next.config.js , mapping file extensions to a list of loaders:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { turbo : { rules : { '*.svg' : { loaders : [ '@svgr/webpack' ] , as : '*.js' , } , } , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Prior to Next.js version 13.4.4, turbo.rules was named turbo.loaders and only accepted file extensions like .mdx instead of *.mdx . Turbopack can be configured to modify module resolution through aliases, similar to webpack's resolve.alias configuration. To configure resolve aliases, map imported patterns to their new destination in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { turbo : { resolveAlias : { underscore : 'lodash' , mocha : { browser : 'mocha/browser-entry.js' } , } , } , } , }"
                },
                {
                    "type": "p",
                    "text": "This aliases imports of the underscore package to the lodash package. In other words, import underscore from 'underscore' will load the lodash module instead of underscore . Turbopack also supports conditional aliasing through this field, similar to Node.js' conditional exports . At the moment only the browser condition is supported. In the case above, imports of the mocha module will be aliased to mocha/browser-entry.js when Turbopack targets browser environments. Turbopack can be configured to resolve modules with custom extensions, similar to webpack's resolve.extensions configuration. To configure resolve extensions, use the resolveExtensions field in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { turbo : { resolveExtensions : [ '.mdx' , '.tsx' , '.ts' , '.jsx' , '.js' , '.mjs' , '.json' , ] , } , } , }"
                },
                {
                    "type": "p",
                    "text": "This overwrites the original resolve extensions with the provided list. Make sure to include the default extensions. For more information and guidance for how to migrate your app to Turbopack from webpack, see Turbopack's documentation on webpack compatibility . Turbopack currently supports two strategies for assigning module IDs:"
                },
                {
                    "type": "list",
                    "items": [
                        "'named' assigns readable module IDs based on the module's path and functionality.",
                        "'deterministic' assigns small hashed numeric module IDs, which are mostly consistent between builds and therefore help with long-term caching."
                    ]
                },
                {
                    "type": "p",
                    "text": "If not set, Turbopack will use 'named' for development builds and 'deterministic' for production builds. To configure the module IDs strategy, use the moduleIdStrategy field in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { turbo : { moduleIdStrategy : 'deterministic' , } , } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/typedRoutes",
            "title": "next.config.js: typedRoutes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Experimental support for statically typed links . This feature requires using the App Router as well as TypeScript in your project."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { experimental : { typedRoutes : true , } , } module . exports = nextConfig"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/typescript",
            "title": "next.config.js: typescript | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js fails your production build ( next build ) when TypeScript errors are present in your project. If you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step. If disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous. Open next.config.js and enable the ignoreBuildErrors option in the typescript config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { typescript : { // !! WARN !! // Dangerously allow production builds to successfully complete even if // your project has type errors. // !! WARN !! ignoreBuildErrors : true , } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/urlImports",
            "title": "next.config.js: urlImports | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "URL imports are an experimental feature that allows you to import modules directly from external servers (instead of from the local disk). Warning : Only use domains that you trust to download and execute on your machine. Please exercise discretion, and caution until the feature is flagged as stable. To opt-in, add the allowed URL prefixes inside next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { urlImports : [ 'https://example.com/assets/' , 'https://cdn.skypack.dev' ] , } , }"
                },
                {
                    "type": "p",
                    "text": "Then, you can import modules directly from URLs:"
                },
                {
                    "type": "code",
                    "code": "import { a , b , c } from 'https://example.com/assets/some/module.js'"
                },
                {
                    "type": "p",
                    "text": "URL Imports can be used everywhere normal package imports can be used. This feature is being designed with security as the top priority . To start, we added an experimental flag forcing you to explicitly allow the domains you accept URL imports from. We're working to take this further by limiting URL imports to execute in the browser sandbox using the Edge Runtime . When using URL imports, Next.js will create a next.lock directory containing a lockfile and fetched assets.\nThis directory must be committed to Git , not ignored by .gitignore ."
                },
                {
                    "type": "list",
                    "items": [
                        "When running next dev , Next.js will download and add all newly discovered URL Imports to your lockfile.",
                        "When running next build , Next.js will use only the lockfile to build the application for production."
                    ]
                },
                {
                    "type": "p",
                    "text": "Typically, no network requests are needed and any outdated lockfile will cause the build to fail.\nOne exception is resources that respond with Cache-Control: no-cache .\nThese resources will have a no-cache entry in the lockfile and will always be fetched from the network on each build."
                },
                {
                    "type": "code",
                    "code": "import confetti from 'https://cdn.skypack.dev/canvas-confetti' import { useEffect } from 'react' export default () => { useEffect (() => { confetti () }) return < p >Hello</ p > }"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' import logo from 'https://example.com/assets/logo.png' export default () => ( < div > < Image src = {logo} placeholder = \"blur\" /> </ div > )"
                },
                {
                    "type": "code",
                    "code": ".className { background : url ( 'https://example.com/assets/hero.jpg' ) ; }"
                },
                {
                    "type": "code",
                    "code": "const logo = new URL ( 'https://example.com/assets/file.txt' , import . meta .url) console .log ( logo .pathname) // prints \"/_next/static/media/file.a9727b5d.txt\""
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/useLightningcss",
            "title": "next.config.js: useLightningcss | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Experimental support for using Lightning CSS , a fast CSS bundler and minifier, written in Rust."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { useLightningcss : true , } , } export default nextConfig"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/webVitalsAttribution",
            "title": "next.config.js: webVitalsAttribution | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "When debugging issues related to Web Vitals, it is often helpful if we can pinpoint the source of the problem.\nFor example, in the case of Cumulative Layout Shift (CLS), we might want to know the first element that shifted when the single largest layout shift occurred.\nOr, in the case of Largest Contentful Paint (LCP), we might want to identify the element corresponding to the LCP for the page.\nIf the LCP element is an image, knowing the URL of the image resource can help us locate the asset we need to optimize. Pinpointing the biggest contributor to the Web Vitals score, aka attribution ,\nallows us to obtain more in-depth information like entries for PerformanceEventTiming , PerformanceNavigationTiming and PerformanceResourceTiming . Attribution is disabled by default in Next.js but can be enabled per metric by specifying the following in next.config.js ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { webVitalsAttribution : [ 'CLS' , 'LCP' ] , } , }"
                },
                {
                    "type": "p",
                    "text": "Valid attribution values are all web-vitals metrics specified in the NextWebVitalsMetric type."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/webpack",
            "title": "next.config.js: webpack | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Good to know : changes to webpack config are not covered by semver so proceed at your own risk Before continuing to add custom webpack configuration to your application make sure Next.js doesn't already support your use-case:"
                },
                {
                    "type": "list",
                    "items": [
                        "CSS imports",
                        "CSS modules",
                        "Sass/SCSS imports",
                        "Sass/SCSS modules"
                    ]
                },
                {
                    "type": "p",
                    "text": "Some commonly asked for features are available as plugins:"
                },
                {
                    "type": "list",
                    "items": [
                        "@next/mdx",
                        "@next/bundle-analyzer"
                    ]
                },
                {
                    "type": "p",
                    "text": "In order to extend our usage of webpack , you can define a function that extends its config inside next.config.js , like so:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { webpack : ( config , { buildId , dev , isServer , defaultLoaders , nextRuntime , webpack } ) => { // Important: return the modified config return config } , }"
                },
                {
                    "type": "p",
                    "text": "The webpack function is executed three times, twice for the server (nodejs / edge runtime) and once for the client. This allows you to distinguish between client and server configuration using the isServer property. The second argument to the webpack function is an object with the following properties:"
                },
                {
                    "type": "list",
                    "items": [
                        "buildId : String - The build id, used as a unique identifier between builds.",
                        "dev : Boolean - Indicates if the compilation will be done in development.",
                        "isServer : Boolean - It's true for server-side compilation, and false for client-side compilation.",
                        "nextRuntime : String | undefined - The target runtime for server-side compilation; either \"edge\" or \"nodejs\" , it's undefined for client-side compilation.",
                        "defaultLoaders : Object - Default loaders used internally by Next.js: babel : Object - Default babel-loader configuration.",
                        "babel : Object - Default babel-loader configuration."
                    ]
                },
                {
                    "type": "code",
                    "code": "// Example config for adding a loader that depends on babel-loader // This source was taken from the @next/mdx plugin source: // https://github.com/vercel/next.js/tree/canary/packages/next-mdx module . exports = { webpack : (config , options) => { config . module . rules .push ({ test : /\\.mdx/ , use : [ options . defaultLoaders .babel , { loader : '@mdx-js/loader' , options : pluginOptions .options , } , ] , }) return config } , }"
                },
                {
                    "type": "p",
                    "text": "Notice that isServer is true when nextRuntime is \"edge\" or \"nodejs\" , nextRuntime \"edge\" is currently for middleware and Server Components in edge runtime only."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/config/typescript",
            "title": "Configuration: TypeScript | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js comes with built-in TypeScript, automatically installing the necessary packages and configuring the proper settings when you create a new project with create-next-app . To add TypeScript to an existing project, rename a file to .ts / .tsx . Run next dev and next build to automatically install the necessary dependencies and add a tsconfig.json file with the recommended config options. Good to know : If you already have a jsconfig.json file, copy the paths compiler option from the old jsconfig.json into the new tsconfig.json file, and delete the old jsconfig.json file. Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion. You can enable the plugin in VS Code by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Opening the command palette ( Ctrl/⌘ + Shift + P )",
                        "Searching for \"TypeScript: Select TypeScript Version\"",
                        "Selecting \"Use Workspace Version\""
                    ]
                },
                {
                    "type": "p",
                    "text": "Now, when editing files, the custom plugin will be enabled. When running next build , the custom type checker will be used. The TypeScript plugin can help with:"
                },
                {
                    "type": "list",
                    "items": [
                        "Warning if the invalid values for segment config options are passed.",
                        "Showing available options and in-context documentation.",
                        "Ensuring the use client directive is used correctly.",
                        "Ensuring client hooks (like useState ) are only used in Client Components."
                    ]
                },
                {
                    "type": "p",
                    "text": "🎥 Watch: Learn about the built-in TypeScript plugin → YouTube (3 minutes) The Next.js App Router has enhanced type safety . This includes:"
                },
                {
                    "type": "list",
                    "items": [
                        "No serialization of data between fetching function and page : You can fetch directly in components, layouts, and pages on the server. This data does not need to be serialized (converted to a string) to be passed to the client side for consumption in React. Instead, since app uses Server Components by default, we can use values like Date , Map , Set , and more without any extra steps. Previously, you needed to manually type the boundary between server and client with Next.js-specific types.",
                        "Streamlined data flow between components : With the removal of _app in favor of root layouts, it is now easier to visualize the data flow between components and pages. Previously, data flowing between individual pages and _app were difficult to type and could introduce confusing bugs. With colocated data fetching in the App Router, this is no longer an issue."
                    ]
                },
                {
                    "type": "p",
                    "text": "Data Fetching in Next.js now provides as close to end-to-end type safety as possible without being prescriptive about your database or content provider selection. We're able to type the response data as you would expect with normal TypeScript. For example:"
                },
                {
                    "type": "code",
                    "code": "async function getData () { const res = await fetch ( 'https://api.example.com/...' ) // The return value is *not* serialized // You can return Date, Map, Set, etc. return res .json () } export default async function Page () { const name = await getData () return '...' }"
                },
                {
                    "type": "p",
                    "text": "For complete end-to-end type safety, this also requires your database or content provider to support TypeScript. This could be through using an ORM or type-safe query builder. You can use TypeScript and import types in your Next.js configuration by using next.config.ts ."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { /* config options here */ } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Good to know : Module resolution in next.config.ts is currently limited to CommonJS . This may cause incompatibilities with ESM only packages being loaded in next.config.ts . When using the next.config.js file, you can add some type checking in your IDE using JSDoc as below:"
                },
                {
                    "type": "code",
                    "code": "// @ts-check /** @type {import('next').NextConfig} */ const nextConfig = { /* config options here */ } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js can statically type links to prevent typos and other errors when using next/link , improving type safety when navigating between pages. To opt-into this feature, experimental.typedRoutes need to be enabled and the project needs to be using TypeScript."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { typedRoutes : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js will generate a link definition in .next/types that contains information about all existing routes in your application, which TypeScript can then use to provide feedback in your editor about invalid links. Currently, experimental support includes any string literal, including dynamic segments. For non-literal strings, you currently need to manually cast the href with as Route :"
                },
                {
                    "type": "code",
                    "code": "import type { Route } from 'next' ; import Link from 'next/link' // No TypeScript errors if href is a valid route < Link href = \"/about\" /> < Link href = \"/blog/nextjs\" /> < Link href = { `/blog/ ${ slug } ` } /> < Link href = {( '/blog' + slug) as Route } /> // TypeScript errors if href is not a valid route < Link href = \"/aboot\" />"
                },
                {
                    "type": "p",
                    "text": "To accept href in a custom component wrapping next/link , use a generic:"
                },
                {
                    "type": "code",
                    "code": "import type { Route } from 'next' import Link from 'next/link' function Card < T extends string >({ href } : { href : Route < T > | URL }) { return ( < Link href = {href}> < div >My Card</ div > </ Link > ) }"
                },
                {
                    "type": "p",
                    "text": "When running next dev or next build , Next.js generates a hidden .d.ts file inside .next that contains information about all existing routes in your application (all valid routes as the href type of Link ). This .d.ts file is included in tsconfig.json and the TypeScript compiler will check that .d.ts and provide feedback in your editor about invalid links. To use an async Server Component with TypeScript, ensure you are using TypeScript 5.1.3 or higher and @types/react 18.2.8 or higher. If you are using an older version of TypeScript, you may see a 'Promise<Element>' is not a valid JSX element type error. Updating to the latest version of TypeScript and @types/react should resolve this issue. Since v10.2.1 Next.js supports incremental type checking when enabled in your tsconfig.json , this can help speed up type checking in larger applications. Next.js fails your production build ( next build ) when TypeScript errors are present in your project. If you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step. If disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous. Open next.config.ts and enable the ignoreBuildErrors option in the typescript config:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { typescript : { // !! WARN !! // Dangerously allow production builds to successfully complete even if // your project has type errors. // !! WARN !! ignoreBuildErrors : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Good to know : You can run tsc --noEmit to check for TypeScript errors yourself before building. This is useful for CI/CD pipelines where you'd like to check for TypeScript errors before deploying. When you need to declare custom types, you might be tempted to modify next-env.d.ts . However, this file is automatically generated, so any changes you make will be overwritten. Instead, you should create a new file, let's call it new-types.d.ts , and reference it in your tsconfig.json :"
                },
                {
                    "type": "code",
                    "code": "{ \"compilerOptions\" : { \"skipLibCheck\" : true //...truncated... } , \"include\" : [ \"new-types.d.ts\" , \"next-env.d.ts\" , \".next/types/**/*.ts\" , \"**/*.ts\" , \"**/*.tsx\" ] , \"exclude\" : [ \"node_modules\" ] }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
            "title": "CLI: create-next-app | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The create-next-app CLI allow you to create a new Next.js application using the default template or an example from a public GitHub repository. It is the easiest way to get started with Next.js."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest [project-name] [options]"
                },
                {
                    "type": "p",
                    "text": "To create a new app using the default template, run the following command in your terminal:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest"
                },
                {
                    "type": "p",
                    "text": "You will then be asked the following prompts:"
                },
                {
                    "type": "code",
                    "code": "What is your project named?  my-app Would you like to use TypeScript?  No / Yes Would you like to use ESLint?  No / Yes Would you like to use Tailwind CSS?  No / Yes Would you like your code inside a `src/` directory?  No / Yes Would you like to use App Router? (recommended)  No / Yes Would you like to use Turbopack for `next dev`?  No / Yes Would you like to customize the import alias (`@/*` by default)?  No / Yes"
                },
                {
                    "type": "p",
                    "text": "Once you've answered the prompts, a new project will be created with your chosen configuration. To create a new app using an official Next.js example, use the --example flag. For example:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest --example [example-name] [your-project-name]"
                },
                {
                    "type": "p",
                    "text": "You can view a list of all available examples along with setup instructions in the Next.js repository . To create a new app using any public GitHub example, use the --example option with the GitHub repo's URL. For example:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest --example \"https://github.com/.../\" [your-project-name]"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/directives",
            "title": "API Reference: Directives | Next.js",
            "content": []
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/directives/use-cache",
            "title": "Directives: use cache | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The use cache directive designates a component and/or a function to be cached. It can be used at the top of a file to indicate that all exports in the file are cacheable, or inline at the top of a function or component to inform Next.js the return value should be cached and reused for subsequent requests. This is an experimental Next.js feature, and not a native React feature like use client or use server . Enable support for the use cache directive with the dynamicIO flag in your next.config.ts file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { dynamicIO : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Then, you can use the use cache directive at the file, component, or function level:"
                },
                {
                    "type": "code",
                    "code": "// File level 'use cache' export default async function Page () { // ... } // Component level export async function MyComponent () { 'use cache' return <></> } // Function level export async function getData () { 'use cache' const data = await fetch ( '/api/data' ) return data }"
                },
                {
                    "type": "list",
                    "items": [
                        "use cache is an experimental Next.js feature, and not a native React feature like use client or use server .",
                        "Any serializable arguments (or props) passed to the cached function, as well as any serializable values it reads from the parent scope, will be converted to a format like JSON and automatically become a part of the cache key.",
                        "Any non-serializable arguments, props, or closed-over values will turn into opaque references inside the cached function, and can be only passed through and not inspected nor modified. These non-serializable values will be filled in at the request time and won't become a part of the cache key. For example, a cached function can take in JSX as a children prop and return <div>{children}</div> , but it won't be able to introspect the actual children object.",
                        "For example, a cached function can take in JSX as a children prop and return <div>{children}</div> , but it won't be able to introspect the actual children object.",
                        "The return value of the cacheable function must also be serializable. This ensures that the cached data can be stored and retrieved correctly.",
                        "Functions that use the use cache directive must not have any side-effects, such as modifying state, directly manipulating the DOM, or setting timers to execute code at intervals.",
                        "If used alongside Partial Prerendering , segments that have use cache will be prerendered as part of the static HTML shell.",
                        "The use cache directive will be available separately from the dynamicIO flag in the future.",
                        "Unlike unstable_cache which only supports JSON data, use cache can cache any serializable data React can render, including the render output of components."
                    ]
                },
                {
                    "type": "p",
                    "text": "To prerender an entire route, add use cache to the top both the layout and page files. Each of these segments are treated as separate entry points in your application, and will be cached independently."
                },
                {
                    "type": "code",
                    "code": "'use cache' import { unstable_cacheLife as cacheLife } from 'next/cache' export default function Layout ({ children } : { children : ReactNode }) { return < div >{children}</ div > }"
                },
                {
                    "type": "p",
                    "text": "Any components imported and nested in page file will inherit the cache behavior of page ."
                },
                {
                    "type": "code",
                    "code": "'use cache' import { unstable_cacheLife as cacheLife } from 'next/cache' async function Users () { const users = await fetch ( '/api/users' ) // loop through users } export default function Page () { return ( < main > < Users /> </ main > ) }"
                },
                {
                    "type": "p",
                    "text": "This is recommended for applications that previously used the export const dynamic = \"force-static\" option, and will ensure the entire route is prerendered. You can use use cache at the component level to cache any fetches or computations performed within that component. When you reuse the component throughout your application it can share the same cache entry as long as the props maintain the same structure. The props are serialized and form part of the cache key, and the cache entry will be reused as long as the serialized props produce the same value in each instance."
                },
                {
                    "type": "code",
                    "code": "export async function Bookings ({ type = 'haircut' } : BookingsProps ) { 'use cache' async function getBookingsData () { const data = await fetch ( `/api/bookings?type= ${ encodeURIComponent (type) } ` ) return data } return //... } interface BookingsProps { type : string }"
                },
                {
                    "type": "code",
                    "code": "export async function Bookings ({ type = 'haircut' }) { 'use cache' async function getBookingsData () { const data = await fetch ( `/api/bookings?type= ${ encodeURIComponent (type) } ` ) return data } return //... }"
                },
                {
                    "type": "p",
                    "text": "Since you can add use cache to any asynchronous function, you aren't limited to caching components or routes only. You might want to cache a network request or database query or compute something that is very slow. By adding use cache to a function containing this type of work it becomes cacheable, and when reused, will share the same cache entry."
                },
                {
                    "type": "code",
                    "code": "export async function getData () { 'use cache' const data = await fetch ( '/api/data' ) return data }"
                },
                {
                    "type": "p",
                    "text": "By default, Next.js sets a revalidation period of 15 minutes when you use the use cache directive. Next.js sets a near-infinite expiration duration, meaning it's suitable for content that doesn't need frequent updates. While this revalidation period may be useful for content you don't expect to change often, you can use the cacheLife and cacheTag APIs to configure the cache behavior:"
                },
                {
                    "type": "list",
                    "items": [
                        "cacheLife : For time-based revalidation periods.",
                        "cacheTag : For on-demand revalidation."
                    ]
                },
                {
                    "type": "p",
                    "text": "Both of these APIs integrate across the client and server caching layers, meaning you can configure your caching semantics in one place and have them apply everywhere. See the cacheLife and cacheTag docs for more information. If you need to pass non-serializable arguments to a cacheable function, you can pass them as children . This means the children reference can change without affecting the cache entry."
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const uncachedData = await getData () return ( < CacheComponent > < DynamicComponent data = {uncachedData} /> </ CacheComponent > ) } async function CacheComponent ({ children } : { children : ReactNode }) { 'use cache' const cachedData = await fetch ( '/api/cached-data' ) return ( < div > < PrerenderedComponent data = {cachedData} /> {children} </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "You can also pass Server Actions through cached components to Client Components without invoking them inside the cacheable function."
                },
                {
                    "type": "code",
                    "code": "import ClientComponent from './ClientComponent' export default async function Page () { const performUpdate = async () => { 'use server' // Perform some server-side update await db .update ( ... ) } return < CacheComponent performUpdate = {performUpdate} /> } async function CachedComponent ({ performUpdate , } : { performUpdate : () => Promise < void > }) { 'use cache' // Do not call performUpdate here return < ClientComponent action = {performUpdate} /> }"
                },
                {
                    "type": "code",
                    "code": "'use client' export default function ClientComponent ({ action }) { return < button onClick = {action}>Update</ button > }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/directives/use-client",
            "title": "Directives: use client | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The use client directive designates a component to be rendered on the client side and should be used when creating interactive user interfaces (UI) that require client-side JavaScript capabilities, such as state management, event handling, and access to browser APIs. This is a React feature. To designate a component as a Client Component, add the use client directive at the top of the file , before any imports:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState } from 'react' export default function Counter () { const [ count , setCount ] = useState ( 0 ) return ( < div > < p >Count: {count}</ p > < button onClick = {() => setCount (count + 1 )}>Increment</ button > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Combining Server and Client Components allows you to build applications that are both performant and interactive:"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components : Use for static content, data fetching, and SEO-friendly elements.",
                        "Client Components : Use for interactive elements that require state, effects, or browser APIs.",
                        "Component composition : Nest Client Components within Server Components as needed for a clear separation of server and client logic."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Header is a Server Component handling static content.",
                        "Counter is a Client Component enabling interactivity within the page."
                    ]
                },
                {
                    "type": "code",
                    "code": "import Header from './header' import Counter from './counter' // This is a Client Component export default function Page () { return ( < div > < Header /> < Counter /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "See the React documentation for more information on use client ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/directives/use-server",
            "title": "Directives: use server | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The use server directive designates a function or file to be executed on the server side . It can be used at the top of a file to indicate that all functions in the file are server-side, or inline at the top of a function to mark the function as a Server Function . This is a React feature. The following example shows a file with a use server directive at the top. All functions in the file are executed on the server."
                },
                {
                    "type": "code",
                    "code": "'use server' import { db } from '@/lib/db' // Your database client export async function createUser (data : { name : string ; email : string }) { const user = await db . user .create ({ data }) return user }"
                },
                {
                    "type": "p",
                    "text": "To use Server Functions in Client Components you need to create your Server Functions in a dedicated file using the use server directive at the top of the file. These Server Functions can then be imported into Client and Server Components and executed. Assuming you have a fetchUsers Server Function in actions.ts :"
                },
                {
                    "type": "code",
                    "code": "'use server' import { db } from '@/lib/db' // Your database client export async function fetchUsers () { const users = await db . user .findMany () return users }"
                },
                {
                    "type": "p",
                    "text": "Then you can import the fetchUsers Server Function into a Client Component and execute it on the client-side."
                },
                {
                    "type": "code",
                    "code": "'use client' import { fetchUsers } from '../actions' export default function MyButton () { return < button onClick = {() => fetchUsers ()}>Fetch Users</ button > }"
                },
                {
                    "type": "p",
                    "text": "In the following example, use server is used inline at the top of a function to mark it as a Server Function :"
                },
                {
                    "type": "code",
                    "code": "import { db } from '@/lib/db' // Your database client export default function UserList () { async function fetchUsers () { 'use server' const users = await db . user .findMany () return users } return < button onClick = {() => fetchUsers ()}>Fetch Users</ button > }"
                },
                {
                    "type": "p",
                    "text": "When using the use server directive, it's important to ensure that all server-side logic is secure and that sensitive data remains protected. Always authenticate and authorize users before performing sensitive server-side operations."
                },
                {
                    "type": "code",
                    "code": "'use server' import { db } from '@/lib/db' // Your database client import { authenticate } from '@/lib/auth' // Your authentication library export async function createUser ( data : { name : string ; email : string } , token : string ) { const user = authenticate (token) if ( ! user) { throw new Error ( 'Unauthorized' ) } const newUser = await db . user .create ({ data }) return newUser }"
                },
                {
                    "type": "p",
                    "text": "See the React documentation for more information on use server ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/edge",
            "title": "API Reference: Edge Runtime | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The Next.js Edge Runtime is used for Middleware and supports the following APIs: You can use process.env to access Environment Variables for both next dev and next build . The Edge Runtime has some restrictions including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Native Node.js APIs are not supported . For example, you can't read or write to the filesystem.",
                        "node_modules can be used, as long as they implement ES Modules and do not use native Node.js APIs.",
                        "Calling require directly is not allowed . Use ES Modules instead."
                    ]
                },
                {
                    "type": "p",
                    "text": "The following JavaScript language features are disabled, and will not work: In rare cases, your code could contain (or import) some dynamic code evaluation statements which can not be reached at runtime and which can not be removed by treeshaking.\nYou can relax the check to allow specific files with your Middleware configuration:"
                },
                {
                    "type": "code",
                    "code": "export const config = { unstable_allowDynamic : [ // allows a single file '/lib/utilities.js' , // use a glob to allow anything in the function-bind 3rd party module '**/node_modules/function-bind/**' , ] , }"
                },
                {
                    "type": "p",
                    "text": "unstable_allowDynamic is a glob , or an array of globs, ignoring dynamic code evaluation for specific files. The globs are relative to your application root folder. Be warned that if these statements are executed on the Edge, they will throw and cause a runtime error ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions",
            "title": "API Reference: File Conventions | Next.js",
            "content": []
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/default",
            "title": "File Conventions: default.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The default.js file is used to render a fallback within Parallel Routes when Next.js cannot recover a slot's active state after a full-page load. During soft navigation , Next.js keeps track of the active state (subpage) for each slot. However, for hard navigations (full-page load), Next.js cannot recover the active state. In this case, a default.js file can be rendered for subpages that don't match the current URL. Consider the following folder structure. The @team slot has a settings page, but @analytics does not. When navigating to /settings , the @team slot will render the settings page while maintaining the currently active page for the @analytics slot. On refresh, Next.js will render a default.js for @analytics . If default.js doesn't exist, a 404 is rendered instead. Additionally, since children is an implicit slot, you also need to create a default.js file to render a fallback for children when Next.js cannot recover the active state of the parent page. A promise that resolves to an object containing the dynamic route parameters from the root segment down to the slot's subpages. For example:"
                },
                {
                    "type": "code",
                    "code": "export default async function Default ({ params , } : { params : Promise <{ artist : string }> }) { const artist = ( await params).artist }"
                },
                {
                    "type": "list",
                    "items": [
                        "Since the params prop is a promise. You must use async/await or React's use function to access the values. In version 14 and earlier, params was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "In version 14 and earlier, params was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/error",
            "title": "File Conventions: error.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "An error file allows you to handle unexpected runtime errors and display fallback UI."
                },
                {
                    "type": "code",
                    "code": "'use client' // Error boundaries must be Client Components import { useEffect } from 'react' export default function Error ({ error , reset , } : { error : Error & { digest ?: string } reset : () => void }) { useEffect (() => { // Log the error to an error reporting service console .error (error) } , [error]) return ( < div > < h2 >Something went wrong!</ h2 > < button onClick = { // Attempt to recover by trying to re-render the segment () => reset () } > Try again </ button > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "error.js wraps a route segment and its nested children in a React Error Boundary . When an error throws within the boundary, the error component shows as the fallback UI."
                },
                {
                    "type": "list",
                    "items": [
                        "The React DevTools allow you to toggle error boundaries to test error states."
                    ]
                },
                {
                    "type": "p",
                    "text": "An instance of an Error object forwarded to the error.js Client Component. Good to know: During development, the Error object forwarded to the client will be serialized and include the message of the original error for easier debugging. However, this behavior is different in production to avoid leaking potentially sensitive details included in the error to the client."
                },
                {
                    "type": "list",
                    "items": [
                        "Errors forwarded from Client Components show the original Error message.",
                        "Errors forwarded from Server Components show a generic message with an identifier. This is to prevent leaking sensitive details. You can use the identifier, under errors.digest , to match the corresponding server-side logs."
                    ]
                },
                {
                    "type": "p",
                    "text": "An automatically generated hash of the error thrown. It can be used to match the corresponding error in server-side logs. The cause of an error can sometimes be temporary. In these cases, trying again might resolve the issue. An error component can use the reset() function to prompt the user to attempt to recover from the error. When executed, the function will try to re-render the error boundary's contents. If successful, the fallback error component is replaced with the result of the re-render."
                },
                {
                    "type": "code",
                    "code": "'use client' // Error boundaries must be Client Components export default function Error ({ error , reset , } : { error : Error & { digest ?: string } reset : () => void }) { return ( < div > < h2 >Something went wrong!</ h2 > < button onClick = {() => reset ()}>Try again</ button > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "While less common, you can handle errors in the root layout or template using app/global-error.js , located in the root app directory, even when leveraging internationalization . Global error UI must define its own <html> and <body> tags. This file replaces the root layout or template when active."
                },
                {
                    "type": "code",
                    "code": "'use client' // Error boundaries must be Client Components export default function GlobalError ({ error , reset , } : { error : Error & { digest ?: string } reset : () => void }) { return ( // global-error must include html and body tags < html > < body > < h2 >Something went wrong!</ h2 > < button onClick = {() => reset ()}>Try again</ button > </ body > </ html > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "global-error.js is only enabled in production. In development, our error overlay will show instead."
                    ]
                },
                {
                    "type": "p",
                    "text": "The not-found file shows UI when calling the notFound() function within a route segment."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/forbidden",
            "title": "File Conventions: forbidden.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The forbidden file is used to render UI when the forbidden function is invoked during authentication. Along with allowing you to customize the UI, Next.js will return a 403 status code."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Forbidden () { return ( < div > < h2 >Forbidden</ h2 > < p >You are not authorized to access this resource.</ p > < Link href = \"/\" >Return Home</ Link > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "forbidden.js components do not accept any props."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation",
            "title": "File Conventions: instrumentation.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The instrumentation.js|ts file is used to integrate observability tools into your application, allowing you to track the performance and behavior, and to debug issues in production. To use it, place the file in the root of your application or inside a src folder if using one. The file exports a register function that is called once when a new Next.js server instance is initiated. register can be an async function."
                },
                {
                    "type": "code",
                    "code": "import { registerOTel } from '@vercel/otel' export function register () { registerOTel ( 'next-app' ) }"
                },
                {
                    "type": "p",
                    "text": "You can optionally export an onRequestError function to track server errors to any custom observability provider."
                },
                {
                    "type": "list",
                    "items": [
                        "If you're running any async tasks in onRequestError , make sure they're awaited. onRequestError will be triggered when the Next.js server captures the error.",
                        "The error instance might not be the original error instance thrown, as it may be processed by React if encountered during Server Components rendering. If this happens, you can use digest property on an error to identify the actual error type."
                    ]
                },
                {
                    "type": "code",
                    "code": "import { type Instrumentation } from 'next' export const onRequestError : Instrumentation . onRequestError = async ( err , request , context ) => { await fetch ( 'https://.../report-error' , { method : 'POST' , body : JSON .stringify ({ message : err .message , request , context , }) , headers : { 'Content-Type' : 'application/json' , } , }) }"
                },
                {
                    "type": "p",
                    "text": "The function accepts three parameters: error , request , and context ."
                },
                {
                    "type": "code",
                    "code": "export function onRequestError ( error : { digest : string } & Error , request : { path : string // resource path, e.g. /blog?name=foo method : string // request method. e.g. GET, POST, etc headers : { [key : string ] : string } } , context : { routerKind : 'Pages Router' | 'App Router' // the router type routePath : string // the route file path, e.g. /app/blog/[dynamic] routeType : 'render' | 'route' | 'action' | 'middleware' // the context in which the error occurred renderSource : | 'react-server-components' | 'react-server-components-payload' | 'server-rendering' revalidateReason : 'on-demand' | 'stale' | undefined // undefined is a normal request without revalidation renderType : 'dynamic' | 'dynamic-resume' // 'dynamic-resume' for PPR } ) : void | Promise < void >"
                },
                {
                    "type": "list",
                    "items": [
                        "error : The caught error itself (type is always Error ), and a digest property which is the unique ID of the error.",
                        "request : Read-only request information associated with the error.",
                        "context : The context in which the error occurred. This can be the type of router (App or Pages Router), and/or (Server Components ( 'render' ), Route Handlers ( 'route' ), Server Actions ( 'action' ), or Middleware ( 'middleware' ))."
                    ]
                },
                {
                    "type": "p",
                    "text": "The instrumentation.js file works in both the Node.js and Edge runtime, however, you can use process.env.NEXT_RUNTIME to target a specific runtime."
                },
                {
                    "type": "code",
                    "code": "export function register () { if ( process . env . NEXT_RUNTIME === 'edge' ) { return require ( './register.edge' ) } else { return require ( './register.node' ) } } export function onRequestError () { if ( process . env . NEXT_RUNTIME === 'edge' ) { return require ( './on-request-error.edge' ) } else { return require ( './on-request-error.node' ) } }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/layout",
            "title": "File Conventions: layout.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The layout file is used to define a layout in your Next.js application."
                },
                {
                    "type": "code",
                    "code": "export default function DashboardLayout ({ children , } : { children : React . ReactNode }) { return < section >{children}</ section > }"
                },
                {
                    "type": "p",
                    "text": "A root layout is the top-most layout in the root app directory. It is used to define the <html> and <body> tags and other globally shared UI."
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Layout components should accept and use a children prop. During rendering, children will be populated with the route segments the layout is wrapping. These will primarily be the component of a child Layout (if it exists) or Page , but could also be other special files like Loading or Error when applicable. A promise that resolves to an object containing the dynamic route parameters object from the root segment down to that layout."
                },
                {
                    "type": "code",
                    "code": "export default async function Layout ({ params , } : { params : Promise <{ team : string }> }) { const team = ( await params).team }"
                },
                {
                    "type": "list",
                    "items": [
                        "Since the params prop is a promise. You must use async/await or React's use function to access the values. In version 14 and earlier, params was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "In version 14 and earlier, params was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future."
                    ]
                },
                {
                    "type": "p",
                    "text": "The app directory must include a root app/layout.js ."
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html > < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "The root layout must define <html> and <body> tags. You should not manually add <head> tags such as <title> and <meta> to root layouts. Instead, you should use the Metadata API which automatically handles advanced requirements such as streaming and de-duplicating <head> elements.",
                        "You should not manually add <head> tags such as <title> and <meta> to root layouts. Instead, you should use the Metadata API which automatically handles advanced requirements such as streaming and de-duplicating <head> elements.",
                        "You can use route groups to create multiple root layouts. Navigating across multiple root layouts will cause a full page load (as opposed to a client-side navigation). For example, navigating from /cart that uses app/(shop)/layout.js to /blog that uses app/(marketing)/layout.js will cause a full page load. This only applies to multiple root layouts.",
                        "Navigating across multiple root layouts will cause a full page load (as opposed to a client-side navigation). For example, navigating from /cart that uses app/(shop)/layout.js to /blog that uses app/(marketing)/layout.js will cause a full page load. This only applies to multiple root layouts."
                    ]
                },
                {
                    "type": "p",
                    "text": "Unlike Pages , Layout components do not receive the searchParams prop. This is because a shared layout is not re-rendered during navigation which could lead to stale searchParams between navigations. When using client-side navigation, Next.js automatically only renders the part of the page below the common layout between two routes. For example, in the following directory structure, dashboard/layout.tsx is the common layout for both /dashboard/settings and /dashboard/analytics : When navigating from /dashboard/settings to /dashboard/analytics , page.tsx in /dashboard/analytics will rerender on the server, while dashboard/layout.tsx will not rerender because it's a common UI shared between the two routes. This performance optimization allows navigation between pages that share a layout to be quicker as only the data fetching and rendering for the page has to run, instead of the entire route that could include shared layouts that fetch their own data. Because dashboard/layout.tsx doesn't re-render, the searchParams prop in the layout Server Component might become stale after navigation. Instead, use the Page searchParams prop or the useSearchParams hook in a Client Component within the layout, which is rerendered on the client with the latest searchParams . Layouts cannot access pathname . This is because layouts are Server Components by default, and don't rerender during client-side navigation , which could lead to pathname becoming stale between navigations. To prevent staleness, Next.js would need to refetch all segments of a route, losing the benefits of caching and increasing the RSC payload size on navigation. Instead, you can extract the logic that depends on pathname into a Client Component and import it into your layouts. Since Client Components rerender (but are not refetched) during navigation, you can use Next.js hooks such as usePathname to access the current pathname and prevent staleness."
                },
                {
                    "type": "code",
                    "code": "import { ClientComponent } from '@/app/ui/ClientComponent' export default function Layout ({ children } : { children : React . ReactNode }) { return ( <> < ClientComponent /> { /* Other Layout UI */ } < main >{children}</ main > </> ) }"
                },
                {
                    "type": "p",
                    "text": "Common pathname patterns can also be implemented with params prop. See the examples section for more information. Using dynamic route segments , you can display or fetch specific content based on the params prop."
                },
                {
                    "type": "code",
                    "code": "export default async function DashboardLayout ({ children , params , } : { children : React . ReactNode params : Promise <{ team : string }> }) { const { team } = await params return ( < section > < header > < h1 >Welcome to {team}'s Dashboard</ h1 > </ header > < main >{children}</ main > </ section > ) }"
                },
                {
                    "type": "p",
                    "text": "To use params in a Client Component (which cannot be async ), you can use React's use function to read the promise:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { use } from 'react' export default function Page ({ params , } : { params : Promise <{ slug : string }> }) { const { slug } = use (params) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/loading",
            "title": "File Conventions: loading.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "A loading file can create instant loading states built on Suspense . By default, this file is a Server Component - but can also be used as a Client Component through the \"use client\" directive."
                },
                {
                    "type": "code",
                    "code": "export default function Loading () { // Or a custom loading skeleton component return < p >Loading...</ p > }"
                },
                {
                    "type": "p",
                    "text": "Loading UI components do not accept any parameters."
                },
                {
                    "type": "list",
                    "items": [
                        "While designing loading UI, you may find it helpful to use the React Developer Tools to manually toggle Suspense boundaries."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/mdx-components",
            "title": "File Conventions: mdx-components.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The mdx-components.js|tsx file is required to use @next/mdx with App Router and will not work without it. Additionally, you can use it to customize styles . Use the file mdx-components.tsx (or .js ) in the root of your project to define MDX Components. For example, at the same level as pages or app , or inside src if applicable."
                },
                {
                    "type": "code",
                    "code": "import type { MDXComponents } from 'mdx/types' export function useMDXComponents (components : MDXComponents ) : MDXComponents { return { ... components , } }"
                },
                {
                    "type": "p",
                    "text": "The file must export a single function, either as a default export or named useMDXComponents ."
                },
                {
                    "type": "code",
                    "code": "import type { MDXComponents } from 'mdx/types' export function useMDXComponents (components : MDXComponents ) : MDXComponents { return { ... components , } }"
                },
                {
                    "type": "p",
                    "text": "When defining MDX Components, the export function accepts a single parameter, components . This parameter is an instance of MDXComponents ."
                },
                {
                    "type": "list",
                    "items": [
                        "The key is the name of the HTML element to override.",
                        "The value is the component to render instead."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know : Remember to pass all other components (i.e. ...components ) that do not have overrides."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata",
            "title": "File Conventions: Metadata Files | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This section of the docs covers Metadata file conventions . File-based metadata can be defined by adding special metadata files to route segments. Each file convention can be defined using a static file (e.g. opengraph-image.jpg ), or a dynamic variant that uses code to generate the file (e.g. opengraph-image.js ). Once a file is defined, Next.js will automatically serve the file (with hashes in production for caching) and update the relevant head elements with the correct metadata, such as the asset's URL, file type, and image size."
                },
                {
                    "type": "list",
                    "items": [
                        "Special Route Handlers like sitemap.ts , opengraph-image.tsx , and icon.tsx , and other metadata files are cached by default.",
                        "If using along with middleware.ts , configure the matcher to exclude the metadata files."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/app-icons",
            "title": "Metadata Files: favicon, icon, and apple-icon | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The favicon , icon , or apple-icon file conventions allow you to set icons for your application. They are useful for adding app icons that appear in places like web browser tabs, phone home screens, and search engine results. There are two ways to set app icons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using image files (.ico, .jpg, .png)",
                        "Using code to generate an icon (.js, .ts, .tsx)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use an image file to set an app icon by placing a favicon , icon , or apple-icon image file within your /app directory.\nThe favicon image can only be located in the top level of app/ . Next.js will evaluate the file and automatically add the appropriate tags to your app's <head> element. Add a favicon.ico image file to the root /app route segment."
                },
                {
                    "type": "code",
                    "code": "< link rel = \"icon\" href = \"/favicon.ico\" sizes = \"any\" />"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"icon\" href = \"/icon?<generated>\" type = \"image/<generated>\" sizes = \"<generated>\" />"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"apple-touch-icon\" href = \"/apple-icon?<generated>\" type = \"image/<generated>\" sizes = \"<generated>\" />"
                },
                {
                    "type": "list",
                    "items": [
                        "You can set multiple icons by adding a number suffix to the file name. For example, icon1.png , icon2.png , etc. Numbered files will sort lexically.",
                        "Favicons can only be set in the root /app segment. If you need more granularity, you can use icon .",
                        "The appropriate <link> tags and attributes such as rel , href , type , and sizes are determined by the icon type and metadata of the evaluated file.",
                        "For example, a 32 by 32px .png file will have type=\"image/png\" and sizes=\"32x32\" attributes.",
                        "sizes=\"any\" is added to icons when the extension is .svg or the image size of the file is not determined. More details in this favicon handbook ."
                    ]
                },
                {
                    "type": "p",
                    "text": "In addition to using literal image files , you can programmatically generate icons using code. Generate an app icon by creating an icon or apple-icon route that default exports a function. The easiest way to generate an icon is to use the ImageResponse API from next/og ."
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og' // Image metadata export const size = { width : 32 , height : 32 , } export const contentType = 'image/png' // Image generation export default function Icon () { return new ImageResponse ( ( // ImageResponse JSX element < div style = {{ fontSize : 24 , background : 'black' , width : '100%' , height : '100%' , display : 'flex' , alignItems : 'center' , justifyContent : 'center' , color : 'white' , }} > A </ div > ) , // ImageResponse options { // For convenience, we can re-use the exported icons size metadata // config to also set the ImageResponse's width and height. ... size , } ) }"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"icon\" href = \"/icon?<generated>\" type = \"image/png\" sizes = \"32x32\" />"
                },
                {
                    "type": "list",
                    "items": [
                        "By default, generated icons are statically optimized (generated at build time and cached) unless they use Dynamic APIs or uncached data.",
                        "You can generate multiple icons in the same file using generateImageMetadata .",
                        "You cannot generate a favicon icon. Use icon or a favicon.ico file instead.",
                        "App icons are special Route Handlers that is cached by default unless it uses a Dynamic API or dynamic config option."
                    ]
                },
                {
                    "type": "p",
                    "text": "The default export function receives the following props: An object containing the dynamic route parameters object from the root segment down to the segment icon or apple-icon is colocated in."
                },
                {
                    "type": "code",
                    "code": "export default function Icon ({ params } : { params : { slug : string } }) { // ... }"
                },
                {
                    "type": "p",
                    "text": "The default export function should return a Blob | ArrayBuffer | TypedArray | DataView | ReadableStream | Response . Good to know : ImageResponse satisfies this return type. You can optionally configure the icon's metadata by exporting size and contentType variables from the icon or apple-icon route."
                },
                {
                    "type": "code",
                    "code": "export const size = { width : 32 , height : 32 } export default function Icon () {}"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"icon\" sizes = \"32x32\" />"
                },
                {
                    "type": "code",
                    "code": "export const contentType = 'image/png' export default function Icon () {}"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"icon\" type = \"image/png\" />"
                },
                {
                    "type": "p",
                    "text": "icon and apple-icon are specialized Route Handlers that can use the same route segment configuration options as Pages and Layouts."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/manifest",
            "title": "Metadata Files: manifest.json | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Add or generate a manifest.(json|webmanifest) file that matches the Web Manifest Specification in the root of app directory to provide information about your web application for the browser."
                },
                {
                    "type": "code",
                    "code": "{ \"name\" : \"My Next.js Application\" , \"short_name\" : \"Next.js App\" , \"description\" : \"An application built with Next.js\" , \"start_url\" : \"/\" // ... }"
                },
                {
                    "type": "p",
                    "text": "Add a manifest.js or manifest.ts file that returns a Manifest object . Good to know: manifest.js is special Route Handlers that is cached by default unless it uses a Dynamic API or dynamic config option."
                },
                {
                    "type": "code",
                    "code": "import type { MetadataRoute } from 'next' export default function manifest () : MetadataRoute . Manifest { return { name : 'Next.js App' , short_name : 'Next.js App' , description : 'Next.js App' , start_url : '/' , display : 'standalone' , background_color : '#fff' , theme_color : '#fff' , icons : [ { src : '/favicon.ico' , sizes : 'any' , type : 'image/x-icon' , } , ] , } }"
                },
                {
                    "type": "p",
                    "text": "The manifest object contains an extensive list of options that may be updated due to new web standards. For information on all the current options, refer to the MetadataRoute.Manifest type in your code editor if using TypeScript or see the MDN docs."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image",
            "title": "Metadata Files: opengraph-image and twitter-image | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The opengraph-image and twitter-image file conventions allow you to set Open Graph and Twitter images for a route segment. They are useful for setting the images that appear on social networks and messaging apps when a user shares a link to your site. There are two ways to set Open Graph and Twitter images:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using image files (.jpg, .png, .gif)",
                        "Using code to generate images (.js, .ts, .tsx)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use an image file to set a route segment's shared image by placing an opengraph-image or twitter-image image file in the segment. Next.js will evaluate the file and automatically add the appropriate tags to your app's <head> element. The twitter-image file size must not exceed 5MB , and the opengraph-image file size must not exceed 8MB . If the image file size exceeds these limits, the build will fail. Add an opengraph-image.(jpg|jpeg|png|gif) image file to any route segment."
                },
                {
                    "type": "code",
                    "code": "< meta property = \"og:image\" content = \"<generated>\" /> < meta property = \"og:image:type\" content = \"<generated>\" /> < meta property = \"og:image:width\" content = \"<generated>\" /> < meta property = \"og:image:height\" content = \"<generated>\" />"
                },
                {
                    "type": "p",
                    "text": "Add a twitter-image.(jpg|jpeg|png|gif) image file to any route segment."
                },
                {
                    "type": "code",
                    "code": "< meta name = \"twitter:image\" content = \"<generated>\" /> < meta name = \"twitter:image:type\" content = \"<generated>\" /> < meta name = \"twitter:image:width\" content = \"<generated>\" /> < meta name = \"twitter:image:height\" content = \"<generated>\" />"
                },
                {
                    "type": "p",
                    "text": "Add an accompanying opengraph-image.alt.txt file in the same route segment as the opengraph-image.(jpg|jpeg|png|gif) image it's alt text."
                },
                {
                    "type": "code",
                    "code": "About Acme"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"og:image:alt\" content = \"About Acme\" />"
                },
                {
                    "type": "p",
                    "text": "Add an accompanying twitter-image.alt.txt file in the same route segment as the twitter-image.(jpg|jpeg|png|gif) image it's alt text."
                },
                {
                    "type": "code",
                    "code": "About Acme"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"twitter:image:alt\" content = \"About Acme\" />"
                },
                {
                    "type": "p",
                    "text": "In addition to using literal image files , you can programmatically generate images using code. Generate a route segment's shared image by creating an opengraph-image or twitter-image route that default exports a function."
                },
                {
                    "type": "list",
                    "items": [
                        "By default, generated images are statically optimized (generated at build time and cached) unless they use Dynamic APIs or uncached data.",
                        "You can generate multiple Images in the same file using generateImageMetadata .",
                        "opengraph-image.js and twitter-image.js are special Route Handlers that is cached by default unless it uses a Dynamic API or dynamic config option."
                    ]
                },
                {
                    "type": "p",
                    "text": "The easiest way to generate an image is to use the ImageResponse API from next/og ."
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og' export const runtime = 'edge' // Image metadata export const alt = 'About Acme' export const size = { width : 1200 , height : 630 , } export const contentType = 'image/png' // Image generation export default async function Image () { // Font const interSemiBold = fetch ( new URL ( './Inter-SemiBold.ttf' , import . meta .url) ) .then ((res) => res .arrayBuffer ()) return new ImageResponse ( ( // ImageResponse JSX element < div style = {{ fontSize : 128 , background : 'white' , width : '100%' , height : '100%' , display : 'flex' , alignItems : 'center' , justifyContent : 'center' , }} > About Acme </ div > ) , // ImageResponse options { // For convenience, we can re-use the exported opengraph-image // size config to also set the ImageResponse's width and height. ... size , fonts : [ { name : 'Inter' , data : await interSemiBold , style : 'normal' , weight : 400 , } , ] , } ) }"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"og:image\" content = \"<generated>\" /> < meta property = \"og:image:alt\" content = \"About Acme\" /> < meta property = \"og:image:type\" content = \"image/png\" /> < meta property = \"og:image:width\" content = \"1200\" /> < meta property = \"og:image:height\" content = \"630\" />"
                },
                {
                    "type": "p",
                    "text": "The default export function receives the following props: An object containing the dynamic route parameters object from the root segment down to the segment opengraph-image or twitter-image is colocated in."
                },
                {
                    "type": "code",
                    "code": "export default function Image ({ params } : { params : { slug : string } }) { // ... }"
                },
                {
                    "type": "p",
                    "text": "The default export function should return a Blob | ArrayBuffer | TypedArray | DataView | ReadableStream | Response . Good to know : ImageResponse satisfies this return type. You can optionally configure the image's metadata by exporting alt , size , and contentType variables from opengraph-image or twitter-image route."
                },
                {
                    "type": "code",
                    "code": "export const alt = 'My images alt text' export default function Image () {}"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"og:image:alt\" content = \"My images alt text\" />"
                },
                {
                    "type": "code",
                    "code": "export const size = { width : 1200 , height : 630 } export default function Image () {}"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"og:image:width\" content = \"1200\" /> < meta property = \"og:image:height\" content = \"630\" />"
                },
                {
                    "type": "code",
                    "code": "export const contentType = 'image/png' export default function Image () {}"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"og:image:type\" content = \"image/png\" />"
                },
                {
                    "type": "p",
                    "text": "opengraph-image and twitter-image are specialized Route Handlers that can use the same route segment configuration options as Pages and Layouts. This example uses the params object and external data to generate the image. Good to know :\nBy default, this generated image will be statically optimized . You can configure the individual fetch options or route segments options to change this behavior."
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og' export const alt = 'About Acme' export const size = { width : 1200 , height : 630 , } export const contentType = 'image/png' export default async function Image ({ params } : { params : { slug : string } }) { const post = await fetch ( `https://.../ posts / ${ params .slug } ` ) .then ((res) => res .json () ) return new ImageResponse ( ( < div style = {{ fontSize : 48 , background : 'white' , width : '100%' , height : '100%' , display : 'flex' , alignItems : 'center' , justifyContent : 'center' , }} > { post .title} </ div > ) , { ... size , } ) }"
                },
                {
                    "type": "p",
                    "text": "This example uses the Edge runtime to fetch a local image on the file system and passes it as an ArrayBuffer to the src attribute of an <img> element. The local asset should be placed relative to the example source file location."
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og' export const runtime = 'edge' export default async function Image () { const logoSrc = await fetch ( new URL ( './logo.png' , import . meta .url)) .then ( (res) => res .arrayBuffer () ) return new ImageResponse ( ( < div style = {{ display : 'flex' , alignItems : 'center' , justifyContent : 'center' , }} > < img src = {logoSrc} height = \"100\" /> </ div > ) ) }"
                },
                {
                    "type": "p",
                    "text": "This example uses the Node.js runtime to fetch a local image on the file system and passes it as an ArrayBuffer to the src attribute of an <img> element. The local asset should be placed relative to the root of your project, rather than the location of the example source file."
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og' import { join } from 'node:path' import { readFile } from 'node:fs/promises' export default async function Image () { const logoData = await readFile ( join ( process .cwd () , 'logo.png' )) const logoSrc = Uint8Array .from (logoData).buffer return new ImageResponse ( ( < div style = {{ display : 'flex' , alignItems : 'center' , justifyContent : 'center' , }} > < img src = {logoSrc} height = \"100\" /> </ div > ) ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/robots",
            "title": "Metadata Files: robots.txt | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Add or generate a robots.txt file that matches the Robots Exclusion Standard in the root of app directory to tell search engine crawlers which URLs they can access on your site."
                },
                {
                    "type": "code",
                    "code": "User-Agent: * Allow: / Disallow: /private/ Sitemap: https://acme.com/sitemap.xml"
                },
                {
                    "type": "p",
                    "text": "Add a robots.js or robots.ts file that returns a Robots object . Good to know : robots.js is a special Route Handlers that is cached by default unless it uses a Dynamic API or dynamic config option."
                },
                {
                    "type": "code",
                    "code": "import type { MetadataRoute } from 'next' export default function robots () : MetadataRoute . Robots { return { rules : { userAgent : '*' , allow : '/' , disallow : '/private/' , } , sitemap : 'https://acme.com/sitemap.xml' , } }"
                },
                {
                    "type": "code",
                    "code": "User-Agent: * Allow: / Disallow: /private/ Sitemap: https://acme.com/sitemap.xml"
                },
                {
                    "type": "p",
                    "text": "You can customise how individual search engine bots crawl your site by passing an array of user agents to the rules property. For example:"
                },
                {
                    "type": "code",
                    "code": "import type { MetadataRoute } from 'next' export default function robots () : MetadataRoute . Robots { return { rules : [ { userAgent : 'Googlebot' , allow : [ '/' ] , disallow : '/private/' , } , { userAgent : [ 'Applebot' , 'Bingbot' ] , disallow : [ '/' ] , } , ] , sitemap : 'https://acme.com/sitemap.xml' , } }"
                },
                {
                    "type": "code",
                    "code": "User-Agent: Googlebot Allow: / Disallow: /private/ User-Agent: Applebot Disallow: / User-Agent: Bingbot Disallow: / Sitemap: https://acme.com/sitemap.xml"
                },
                {
                    "type": "code",
                    "code": "type Robots = { rules : | { userAgent ?: string | string [] allow ?: string | string [] disallow ?: string | string [] crawlDelay ?: number } | Array <{ userAgent : string | string [] allow ?: string | string [] disallow ?: string | string [] crawlDelay ?: number }> sitemap ?: string | string [] host ?: string }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/sitemap",
            "title": "Metadata Files: sitemap.xml | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "sitemap.(xml|js|ts) is a special file that matches the Sitemaps XML format to help search engine crawlers index your site more efficiently. For smaller applications, you can create a sitemap.xml file and place it in the root of your app directory."
                },
                {
                    "type": "code",
                    "code": "< urlset xmlns = \"http://www.sitemaps.org/schemas/sitemap/0.9\" > < url > < loc >https://acme.com</ loc > < lastmod >2023-04-06T15:02:24.021Z</ lastmod > < changefreq >yearly</ changefreq > < priority >1</ priority > </ url > < url > < loc >https://acme.com/about</ loc > < lastmod >2023-04-06T15:02:24.021Z</ lastmod > < changefreq >monthly</ changefreq > < priority >0.8</ priority > </ url > < url > < loc >https://acme.com/blog</ loc > < lastmod >2023-04-06T15:02:24.021Z</ lastmod > < changefreq >weekly</ changefreq > < priority >0.5</ priority > </ url > </ urlset >"
                },
                {
                    "type": "p",
                    "text": "You can use the sitemap.(js|ts) file convention to programmatically generate a sitemap by exporting a default function that returns an array of URLs. If using TypeScript, a Sitemap type is available. Good to know : sitemap.js is a special Route Handler that is cached by default unless it uses a Dynamic API or dynamic config option."
                },
                {
                    "type": "code",
                    "code": "import type { MetadataRoute } from 'next' export default function sitemap () : MetadataRoute . Sitemap { return [ { url : 'https://acme.com' , lastModified : new Date () , changeFrequency : 'yearly' , priority : 1 , } , { url : 'https://acme.com/about' , lastModified : new Date () , changeFrequency : 'monthly' , priority : 0.8 , } , { url : 'https://acme.com/blog' , lastModified : new Date () , changeFrequency : 'weekly' , priority : 0.5 , } , ] }"
                },
                {
                    "type": "code",
                    "code": "< urlset xmlns = \"http://www.sitemaps.org/schemas/sitemap/0.9\" > < url > < loc >https://acme.com</ loc > < lastmod >2023-04-06T15:02:24.021Z</ lastmod > < changefreq >yearly</ changefreq > < priority >1</ priority > </ url > < url > < loc >https://acme.com/about</ loc > < lastmod >2023-04-06T15:02:24.021Z</ lastmod > < changefreq >monthly</ changefreq > < priority >0.8</ priority > </ url > < url > < loc >https://acme.com/blog</ loc > < lastmod >2023-04-06T15:02:24.021Z</ lastmod > < changefreq >weekly</ changefreq > < priority >0.5</ priority > </ url > </ urlset >"
                },
                {
                    "type": "p",
                    "text": "You can use images property to create image sitemaps. Learn more details in the Google Developer Docs ."
                },
                {
                    "type": "code",
                    "code": "import type { MetadataRoute } from 'next' export default function sitemap () : MetadataRoute . Sitemap { return [ { url : 'https://example.com' , lastModified : '2021-01-01' , changeFrequency : 'weekly' , priority : 0.5 , images : [ 'https://example.com/image.jpg' ] , } , ] }"
                },
                {
                    "type": "code",
                    "code": "<? xml version = \"1.0\" encoding = \"UTF-8\" ?> < urlset xmlns = \"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns : image = \"http://www.google.com/schemas/sitemap-image/1.1\" > < url > < loc >https://example.com</ loc > < image : image > < image : loc >https://example.com/image.jpg</ image : loc > </ image : image > < lastmod >2021-01-01</ lastmod > < changefreq >weekly</ changefreq > < priority >0.5</ priority > </ url > </ urlset >"
                },
                {
                    "type": "p",
                    "text": "You can use videos property to create video sitemaps. Learn more details in the Google Developer Docs ."
                },
                {
                    "type": "code",
                    "code": "import type { MetadataRoute } from 'next' export default function sitemap () : MetadataRoute . Sitemap { return [ { url : 'https://example.com' , lastModified : '2021-01-01' , changeFrequency : 'weekly' , priority : 0.5 , videos : [ { title : 'example' , thumbnail_loc : 'https://example.com/image.jpg' , description : 'this is the description' , } , ] , } , ] }"
                },
                {
                    "type": "code",
                    "code": "<? xml version = \"1.0\" encoding = \"UTF-8\" ?> < urlset xmlns = \"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns : video = \"http://www.google.com/schemas/sitemap-video/1.1\" > < url > < loc >https://example.com</ loc > < video : video > < video : title >example</ video : title > < video : thumbnail_loc >https://example.com/image.jpg</ video : thumbnail_loc > < video : description >this is the description</ video : description > </ video : video > < lastmod >2021-01-01</ lastmod > < changefreq >weekly</ changefreq > < priority >0.5</ priority > </ url > </ urlset >"
                },
                {
                    "type": "code",
                    "code": "import type { MetadataRoute } from 'next' export default function sitemap () : MetadataRoute . Sitemap { return [ { url : 'https://acme.com' , lastModified : new Date () , alternates : { languages : { es : 'https://acme.com/es' , de : 'https://acme.com/de' , } , } , } , { url : 'https://acme.com/about' , lastModified : new Date () , alternates : { languages : { es : 'https://acme.com/es/about' , de : 'https://acme.com/de/about' , } , } , } , { url : 'https://acme.com/blog' , lastModified : new Date () , alternates : { languages : { es : 'https://acme.com/es/blog' , de : 'https://acme.com/de/blog' , } , } , } , ] }"
                },
                {
                    "type": "code",
                    "code": "< urlset xmlns = \"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns : xhtml = \"http://www.w3.org/1999/xhtml\" > < url > < loc >https://acme.com</ loc > < xhtml : link rel = \"alternate\" hreflang = \"es\" href = \"https://acme.com/es\" /> < xhtml : link rel = \"alternate\" hreflang = \"de\" href = \"https://acme.com/de\" /> < lastmod >2023-04-06T15:02:24.021Z</ lastmod > </ url > < url > < loc >https://acme.com/about</ loc > < xhtml : link rel = \"alternate\" hreflang = \"es\" href = \"https://acme.com/es/about\" /> < xhtml : link rel = \"alternate\" hreflang = \"de\" href = \"https://acme.com/de/about\" /> < lastmod >2023-04-06T15:02:24.021Z</ lastmod > </ url > < url > < loc >https://acme.com/blog</ loc > < xhtml : link rel = \"alternate\" hreflang = \"es\" href = \"https://acme.com/es/blog\" /> < xhtml : link rel = \"alternate\" hreflang = \"de\" href = \"https://acme.com/de/blog\" /> < lastmod >2023-04-06T15:02:24.021Z</ lastmod > </ url > </ urlset >"
                },
                {
                    "type": "p",
                    "text": "While a single sitemap will work for most applications. For large web applications, you may need to split a sitemap into multiple files. There are two ways you can create multiple sitemaps:"
                },
                {
                    "type": "list",
                    "items": [
                        "By nesting sitemap.(xml|js|ts) inside multiple route segments e.g. app/sitemap.xml and app/products/sitemap.xml .",
                        "By using the generateSitemaps function."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, to split a sitemap using generateSitemaps , return an array of objects with the sitemap id . Then, use the id to generate the unique sitemaps."
                },
                {
                    "type": "code",
                    "code": "import type { MetadataRoute } from 'next' import { BASE_URL } from '@/app/lib/constants' export async function generateSitemaps () { // Fetch the total number of product s and calculate the number of sitemaps needed return [{ id : 0 } , { id : 1 } , { id : 2 } , { id : 3 }] } export default async function sitemap ({ id , } : { id : number }) : Promise < MetadataRoute . Sitemap > { // Google's limit is 50,000 URLs per sitemap const start = id * 50000 const end = start + 50000 const product s = await getProducts ( `SELECT id, date FROM product s WHERE id BETWEEN ${ start } AND ${ end } ` ) return product s .map (( product ) => ({ url : ` ${ BASE_URL } / product / ${ product .id } ` , lastModified : product .date , })) }"
                },
                {
                    "type": "p",
                    "text": "Your generated sitemaps will be available at /.../sitemap/[id] . For example, /product/sitemap/1.xml . See the generateSitemaps API reference for more information. The default function exported from sitemap.(xml|ts|js) should return an array of objects with the following properties:"
                },
                {
                    "type": "code",
                    "code": "type Sitemap = Array <{ url : string lastModified ?: string | Date changeFrequency ?: | 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never' priority ?: number alternates ?: { languages ?: Languages < string > } }>"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/middleware",
            "title": "File Conventions: middleware.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The middleware.js|ts file is used to write Middleware and run code on the server before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly. Middleware executes before routes are rendered. It's particularly useful for implementing custom server-side logic like authentication, logging, or handling redirects. Use the file middleware.ts (or .js) in the root of your project to define Middleware. For example, at the same level as app or pages , or inside src if applicable."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse , NextRequest } from 'next/server' // This function can be marked `async` if using `await` inside export function middleware (request : NextRequest ) { return NextResponse .redirect ( new URL ( '/home' , request .url)) } export const config = { matcher : '/about/:path*' , }"
                },
                {
                    "type": "p",
                    "text": "The file must export a single function, either as a default export or named middleware . Note that multiple middleware from the same file are not supported."
                },
                {
                    "type": "code",
                    "code": "// Example of default export export default function middleware (request) { // Middleware logic }"
                },
                {
                    "type": "p",
                    "text": "Optionally, a config object can be exported alongside the Middleware function. This object includes the matcher to specify paths where the Middleware applies. The matcher option allows you to target specific paths for the Middleware to run on. You can specify these paths in several ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "For a single path: Directly use a string to define the path, like '/about' .",
                        "For multiple paths: Use an array to list multiple paths, such as matcher: ['/about', '/contact'] , which applies the Middleware to both /about and /contact ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Additionally, matcher supports complex path specifications through regular expressions, such as matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'] , enabling precise control over which paths to include or exclude. The matcher option also accepts an array of objects with the following keys:"
                },
                {
                    "type": "list",
                    "items": [
                        "source : The path or pattern used to match the request paths. It can be a string for direct path matching or a pattern for more complex matching.",
                        "regexp (optional): A regular expression string that fine-tunes the matching based on the source. It provides additional control over which paths are included or excluded.",
                        "locale (optional): A boolean that, when set to false , ignores locale-based routing in path matching.",
                        "has (optional): Specifies conditions based on the presence of specific request elements such as headers, query parameters, or cookies.",
                        "missing (optional): Focuses on conditions where certain request elements are absent, like missing headers or cookies."
                    ]
                },
                {
                    "type": "code",
                    "code": "export const config = { matcher : [ { source : '/api/*' , regexp : '^/api/(.*)' , locale : false , has : [ { type : 'header' , key : 'Authorization' , value : 'Bearer Token' } , { type : 'query' , key : 'userId' , value : '123' } , ] , missing : [{ type : 'cookie' , key : 'session' , value : 'active' }] , } , ] , }"
                },
                {
                    "type": "p",
                    "text": "When defining Middleware, the default export function accepts a single parameter, request . This parameter is an instance of NextRequest , which represents the incoming HTTP request."
                },
                {
                    "type": "code",
                    "code": "import type { NextRequest } from 'next/server' export function middleware (request : NextRequest ) { // Middleware logic goes here }"
                },
                {
                    "type": "list",
                    "items": [
                        "NextRequest is a type that represents incoming HTTP requests in Next.js Middleware, whereas NextResponse is a class used to manipulate and send back HTTP responses."
                    ]
                },
                {
                    "type": "p",
                    "text": "Middleware can use the NextResponse object which extends the Web Response API . By returning a NextResponse object, you can directly manipulate cookies, set headers, implement redirects, and rewrite paths. Good to know : For redirects, you can also use Response.redirect instead of NextResponse.redirect . Middleware only supports the Edge runtime . The Node.js runtime cannot be used."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/not-found",
            "title": "File Conventions: not-found.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The not-found file is used to render UI when the notFound function is thrown within a route segment. Along with serving a custom UI, Next.js will return a 200 HTTP status code for streamed responses, and 404 for non-streamed responses."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function NotFound () { return ( < div > < h2 >Not Found</ h2 > < p >Could not find requested resource</ p > < Link href = \"/\" >Return Home</ Link > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "not-found.js components do not accept any props. Good to know : In addition to catching expected notFound() errors, the root app/not-found.js file also handles any unmatched URLs for your whole application. This means users that visit a URL that is not handled by your app will be shown the UI exported by the app/not-found.js file. By default, not-found is a Server Component. You can mark it as async to fetch and display data:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' import { headers } from 'next/headers' export default async function NotFound () { const headersList = await headers () const domain = headersList .get ( 'host' ) const data = await getSiteData (domain) return ( < div > < h2 >Not Found: { data .name}</ h2 > < p >Could not find requested resource</ p > < p > View < Link href = \"/blog\" >all posts</ Link > </ p > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "If you need to use Client Component hooks like usePathname to display content based on the path, you must fetch data on the client-side instead."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/page",
            "title": "File Conventions: page.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The page file allows you to define UI that is unique to a route. You can create a page by default exporting a component from the file:"
                },
                {
                    "type": "code",
                    "code": "export default function Page ({ params , searchParams , } : { params : Promise <{ slug : string }> searchParams : Promise <{ [key : string ] : string | string [] | undefined }> }) { return < h1 >My Page</ h1 > }"
                },
                {
                    "type": "list",
                    "items": [
                        "The .js , .jsx , or .tsx file extensions can be used for page .",
                        "A page is always the leaf of the route subtree.",
                        "A page file is required to make a route segment publicly accessible .",
                        "Pages are Server Components by default, but can be set to a Client Component ."
                    ]
                },
                {
                    "type": "p",
                    "text": "A promise that resolves to an object containing the dynamic route parameters from the root segment down to that page."
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ params , } : { params : Promise <{ slug : string }> }) { const slug = ( await params).slug }"
                },
                {
                    "type": "list",
                    "items": [
                        "Since the params prop is a promise. You must use async/await or React's use function to access the values. In version 14 and earlier, params was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "In version 14 and earlier, params was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future."
                    ]
                },
                {
                    "type": "p",
                    "text": "A promise that resolves to an object containing the search parameters of the current URL. For example:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ searchParams , } : { searchParams : Promise <{ [key : string ] : string | string [] | undefined }> }) { const filters = ( await searchParams).filters }"
                },
                {
                    "type": "list",
                    "items": [
                        "Since the searchParams prop is a promise. You must use async/await or React's use function to access the values. In version 14 and earlier, searchParams was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "In version 14 and earlier, searchParams was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "searchParams is a Dynamic API whose values cannot be known ahead of time. Using it will opt the page into dynamic rendering at request time.",
                        "searchParams is a plain JavaScript object, not a URLSearchParams instance."
                    ]
                },
                {
                    "type": "p",
                    "text": "Using dynamic route segments , you can display or fetch specific content for the page based on the params prop."
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ params , } : { params : Promise <{ slug : string }> }) { const { slug } = await params return < h1 >Blog Post: {slug}</ h1 > }"
                },
                {
                    "type": "p",
                    "text": "You can use the searchParams prop to handle filtering, pagination, or sorting based on the query string of the URL."
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ searchParams , } : { searchParams : Promise <{ [key : string ] : string | string [] | undefined }> }) { const { page = '1' , sort = 'asc' , query = '' } = await searchParams return ( < div > < h1 >Product Listing</ h1 > < p >Search query: {query}</ p > < p >Current page: {page}</ p > < p >Sort order: {sort}</ p > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "To use searchParams and params in a Client Component (which cannot be async ), you can use React's use function to read the promise:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { use } from 'react' export default function Page ({ params , searchParams , } : { params : Promise <{ slug : string }> searchParams : Promise <{ [key : string ] : string | string [] | undefined }> }) { const { slug } = use (params) const { query } = use (searchParams) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/route",
            "title": "File Conventions: route.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Route Handlers allow you to create custom request handlers for a given route using the Web Request and Response APIs."
                },
                {
                    "type": "code",
                    "code": "export async function GET () { return Response .json ({ message : 'Hello World' }) }"
                },
                {
                    "type": "p",
                    "text": "A route file allows you to create custom request handlers for a given route. The following HTTP methods are supported: GET , POST , PUT , PATCH , DELETE , HEAD , and OPTIONS ."
                },
                {
                    "type": "code",
                    "code": "export async function GET (request : Request ) {} export async function HEAD (request : Request ) {} export async function POST (request : Request ) {} export async function PUT (request : Request ) {} export async function DELETE (request : Request ) {} export async function PATCH (request : Request ) {} // If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler. export async function OPTIONS (request : Request ) {}"
                },
                {
                    "type": "p",
                    "text": "The request object is a NextRequest object, which is an extension of the Web Request API. NextRequest gives you further control over the incoming request, including easily accessing cookies and an extended, parsed, URL object nextUrl ."
                },
                {
                    "type": "code",
                    "code": "import type { NextRequest } from 'next/server' export async function GET (request : NextRequest ) { const url = request .nextUrl }"
                },
                {
                    "type": "list",
                    "items": [
                        "params : a promise that resolves to an object containing the dynamic route parameters for the current route."
                    ]
                },
                {
                    "type": "code",
                    "code": "export async function GET ( request : Request , { params } : { params : Promise <{ team : string }> } ) { const team = ( await params).team }"
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' export async function GET (request : NextRequest ) { const cookieStore = await cookies () const a = cookieStore .get ( 'a' ) const b = cookieStore .set ( 'b' , '1' ) const c = cookieStore .delete ( 'c' ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config",
            "title": "File Conventions: Route Segment Config | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The options outlined on this page are disabled if the dynamicIO flag is on, and will eventually be deprecated in the future. The Route Segment options allows you to configure the behavior of a Page , Layout , or Route Handler by directly exporting the following variables: Enable Partial Prerendering (PPR) for a layout or page."
                },
                {
                    "type": "code",
                    "code": "export const experimental_ppr = true // true | false"
                },
                {
                    "type": "p",
                    "text": "Change the dynamic behavior of a layout or page to fully static or fully dynamic."
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'auto' // 'auto' | 'force-dynamic' | 'error' | 'force-static'"
                },
                {
                    "type": "p",
                    "text": "Good to know : The new model in the app directory favors granular caching control at the fetch request level over the binary all-or-nothing model of getServerSideProps and getStaticProps at the page-level in the pages directory. The dynamic option is a way to opt back in to the previous model as a convenience and provides a simpler migration path."
                },
                {
                    "type": "list",
                    "items": [
                        "'auto' (default): The default option to cache as much as possible without preventing any components from opting into dynamic behavior.",
                        "'force-dynamic' : Force dynamic rendering , which will result in routes being rendered for each user at request time. This option is equivalent to: getServerSideProps() in the pages directory. Setting the option of every fetch() request in a layout or page to { cache: 'no-store', next: { revalidate: 0 } } . Setting the segment config to export const fetchCache = 'force-no-store'",
                        "getServerSideProps() in the pages directory.",
                        "Setting the option of every fetch() request in a layout or page to { cache: 'no-store', next: { revalidate: 0 } } .",
                        "Setting the segment config to export const fetchCache = 'force-no-store'",
                        "'error' : Force static rendering and cache the data of a layout or page by causing an error if any components use Dynamic APIs or uncached data. This option is equivalent to: getStaticProps() in the pages directory. Setting the option of every fetch() request in a layout or page to { cache: 'force-cache' } . Setting the segment config to fetchCache = 'only-cache', dynamicParams = false . dynamic = 'error' changes the default of dynamicParams from true to false . You can opt back into dynamically rendering pages for dynamic params not generated by generateStaticParams by manually setting dynamicParams = true .",
                        "getStaticProps() in the pages directory.",
                        "Setting the option of every fetch() request in a layout or page to { cache: 'force-cache' } .",
                        "Setting the segment config to fetchCache = 'only-cache', dynamicParams = false .",
                        "dynamic = 'error' changes the default of dynamicParams from true to false . You can opt back into dynamically rendering pages for dynamic params not generated by generateStaticParams by manually setting dynamicParams = true .",
                        "'force-static' : Force static rendering and cache the data of a layout or page by forcing cookies , headers() and useSearchParams() to return empty values."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Instructions on how to migrate from getServerSideProps and getStaticProps to dynamic: 'force-dynamic' and dynamic: 'error' can be found in the upgrade guide ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Control what happens when a dynamic segment is visited that was not generated with generateStaticParams ."
                },
                {
                    "type": "code",
                    "code": "export const dynamicParams = true // true | false,"
                },
                {
                    "type": "list",
                    "items": [
                        "true (default): Dynamic segments not included in generateStaticParams are generated on demand.",
                        "false : Dynamic segments not included in generateStaticParams will return a 404."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This option replaces the fallback: true | false | blocking option of getStaticPaths in the pages directory.",
                        "To statically render all paths the first time they're visited, you'll need to return an empty array in generateStaticParams or utilize export const dynamic = 'force-static' .",
                        "When dynamicParams = true , the segment uses Streaming Server Rendering .",
                        "If the dynamic = 'error' and dynamic = 'force-static' are used, it'll change the default of dynamicParams to false ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Set the default revalidation time for a layout or page. This option does not override the revalidate value set by individual fetch requests."
                },
                {
                    "type": "code",
                    "code": "export const revalidate = false // false | 0 | number"
                },
                {
                    "type": "list",
                    "items": [
                        "false (default): The default heuristic to cache any fetch requests that set their cache option to 'force-cache' or are discovered before a Dynamic API is used. Semantically equivalent to revalidate: Infinity which effectively means the resource should be cached indefinitely. It is still possible for individual fetch requests to use cache: 'no-store' or revalidate: 0 to avoid being cached and make the route dynamically rendered. Or set revalidate to a positive number lower than the route default to increase the revalidation frequency of a route.",
                        "0 : Ensure a layout or page is always dynamically rendered even if no Dynamic APIs or uncached data fetches are discovered. This option changes the default of fetch requests that do not set a cache option to 'no-store' but leaves fetch requests that opt into 'force-cache' or use a positive revalidate as is.",
                        "number : (in seconds) Set the default revalidation frequency of a layout or page to n seconds."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The revalidate value needs to be statically analyzable. For example revalidate = 600 is valid, but revalidate = 60 * 10 is not.",
                        "The revalidate value is not available when using runtime = 'edge' .",
                        "In Development, Pages are always rendered on-demand and are never cached. This allows you to see changes immediately without waiting for a revalidation period to pass."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The lowest revalidate across each layout and page of a single route will determine the revalidation frequency of the entire route. This ensures that child pages are revalidated as frequently as their parent layouts.",
                        "Individual fetch requests can set a lower revalidate than the route's default revalidate to increase the revalidation frequency of the entire route. This allows you to dynamically opt-in to more frequent revalidation for certain routes based on some criteria."
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, Next.js will cache any fetch() requests that are reachable before any Dynamic APIs are used and will not cache fetch requests that are discovered after Dynamic APIs are used. fetchCache allows you to override the default cache option of all fetch requests in a layout or page."
                },
                {
                    "type": "code",
                    "code": "export const fetchCache = 'auto' // 'auto' | 'default-cache' | 'only-cache' // 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'"
                },
                {
                    "type": "list",
                    "items": [
                        "'auto' (default): The default option to cache fetch requests before Dynamic APIs with the cache option they provide and not cache fetch requests after Dynamic APIs.",
                        "'default-cache' : Allow any cache option to be passed to fetch but if no option is provided then set the cache option to 'force-cache' . This means that even fetch requests after Dynamic APIs are considered static.",
                        "'only-cache' : Ensure all fetch requests opt into caching by changing the default to cache: 'force-cache' if no option is provided and causing an error if any fetch requests use cache: 'no-store' .",
                        "'force-cache' : Ensure all fetch requests opt into caching by setting the cache option of all fetch requests to 'force-cache' .",
                        "'default-no-store' : Allow any cache option to be passed to fetch but if no option is provided then set the cache option to 'no-store' . This means that even fetch requests before Dynamic APIs are considered dynamic.",
                        "'only-no-store' : Ensure all fetch requests opt out of caching by changing the default to cache: 'no-store' if no option is provided and causing an error if any fetch requests use cache: 'force-cache'",
                        "'force-no-store' : Ensure all fetch requests opt out of caching by setting the cache option of all fetch requests to 'no-store' . This forces all fetch requests to be re-fetched every request even if they provide a 'force-cache' option."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Any options set across each layout and page of a single route need to be compatible with each other. If both the 'only-cache' and 'force-cache' are provided, then 'force-cache' wins. If both 'only-no-store' and 'force-no-store' are provided, then 'force-no-store' wins. The force option changes the behavior across the route so a single segment with 'force-*' would prevent any errors caused by 'only-*' . The intention of the 'only-*' and 'force-*' options is to guarantee the whole route is either fully static or fully dynamic. This means: A combination of 'only-cache' and 'only-no-store' in a single route is not allowed. A combination of 'force-cache' and 'force-no-store' in a single route is not allowed. A parent cannot provide 'default-no-store' if a child provides 'auto' or '*-cache' since that could make the same fetch have different behavior.",
                        "If both the 'only-cache' and 'force-cache' are provided, then 'force-cache' wins. If both 'only-no-store' and 'force-no-store' are provided, then 'force-no-store' wins. The force option changes the behavior across the route so a single segment with 'force-*' would prevent any errors caused by 'only-*' .",
                        "The intention of the 'only-*' and 'force-*' options is to guarantee the whole route is either fully static or fully dynamic. This means: A combination of 'only-cache' and 'only-no-store' in a single route is not allowed. A combination of 'force-cache' and 'force-no-store' in a single route is not allowed.",
                        "A combination of 'only-cache' and 'only-no-store' in a single route is not allowed.",
                        "A combination of 'force-cache' and 'force-no-store' in a single route is not allowed.",
                        "A parent cannot provide 'default-no-store' if a child provides 'auto' or '*-cache' since that could make the same fetch have different behavior.",
                        "It is generally recommended to leave shared parent layouts as 'auto' and customize the options where child segments diverge."
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend using the Node.js runtime for rendering your application, and the Edge runtime for Middleware (only supported option)."
                },
                {
                    "type": "code",
                    "code": "export const runtime = 'nodejs' // 'nodejs' | 'edge'"
                },
                {
                    "type": "list",
                    "items": [
                        "'nodejs' (default)",
                        "'edge'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about the different runtimes ."
                },
                {
                    "type": "code",
                    "code": "export const preferredRegion = 'auto' // 'auto' | 'global' | 'home' | ['iad1', 'sfo1']"
                },
                {
                    "type": "p",
                    "text": "Support for preferredRegion , and regions supported, is dependent on your deployment platform."
                },
                {
                    "type": "list",
                    "items": [
                        "If a preferredRegion is not specified, it will inherit the option of the nearest parent layout.",
                        "The root layout defaults to all regions."
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, Next.js does not limit the execution of server-side logic (rendering a page or handling an API).\nDeployment platforms can use maxDuration from the Next.js build output to add specific execution limits.\nFor example, on Vercel . Note : This settings requires Next.js 13.4.10 or higher."
                },
                {
                    "type": "code",
                    "code": "export const maxDuration = 5"
                },
                {
                    "type": "list",
                    "items": [
                        "If using Server Actions , set the maxDuration at the page level to change the default timeout of all Server Actions used on the page."
                    ]
                },
                {
                    "type": "p",
                    "text": "The generateStaticParams function can be used in combination with dynamic route segments to define the list of route segment parameters that will be statically generated at build time instead of on-demand at request time. See the API reference for more details."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/template",
            "title": "File Conventions: template.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "A template file is similar to a layout in that it wraps a layout or page. Unlike layouts that persist across routes and maintain state, templates are given a unique key, meaning children Client Components reset their state on navigation."
                },
                {
                    "type": "code",
                    "code": "export default function Template ({ children } : { children : React . ReactNode }) { return < div >{children}</ div > }"
                },
                {
                    "type": "p",
                    "text": "While less common, you might choose to use a template over a layout if you want:"
                },
                {
                    "type": "list",
                    "items": [
                        "Features that rely on useEffect (e.g logging page views) and useState (e.g a per-page feedback form).",
                        "To change the default framework behavior. For example, Suspense Boundaries inside layouts only show the fallback the first time the Layout is loaded and not when switching pages. For templates, the fallback is shown on each navigation."
                    ]
                },
                {
                    "type": "p",
                    "text": "Template accepts a children prop. For example:"
                },
                {
                    "type": "code",
                    "code": "< Layout > { /* Note that the template is automatically given a unique key. */ } < Template key = {routeParam}>{children}</ Template > </ Layout >"
                },
                {
                    "type": "list",
                    "items": [
                        "By default, template is a Server Component , but can also be used as a Client Component through the \"use client\" directive.",
                        "When a user navigates between routes that share a template , a new instance of the component is mounted, DOM elements are recreated, state is not preserved in Client Components, and effects are re-synchronized."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized",
            "title": "File Conventions: unauthorized.js | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The unauthorized file is used to render UI when the unauthorized function is invoked during authentication. Along with allowing you to customize the UI, Next.js will return a 401 status code."
                },
                {
                    "type": "code",
                    "code": "import Login from '@/app/components/Login' export default function Unauthorized () { return ( < main > < h1 >401 - Unauthorized</ h1 > < p >Please log in to access this page.</ p > < Login /> </ main > ) }"
                },
                {
                    "type": "p",
                    "text": "unauthorized.js components do not accept any props. You can use unauthorized function to render the unauthorized.js file with a login UI."
                },
                {
                    "type": "code",
                    "code": "import { verifySession } from '@/app/lib/dal' import { unauthorized } from 'next/server' export default async function DashboardPage () { const session = await verifySession () if ( ! session) { unauthorized () } return < div >Dashboard</ div > }"
                },
                {
                    "type": "code",
                    "code": "import Login from '@/app/components/Login' export default function UnauthorizedPage () { return ( < main > < h1 >401 - Unauthorized</ h1 > < p >Please log in to access this page.</ p > < Login /> </ main > ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions",
            "title": "API Reference: Functions | Next.js",
            "content": []
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/after",
            "title": "Functions: after | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "after allows you to schedule work to be executed after a response (or prerender) is finished. This is useful for tasks and other side effects that should not block the response, such as logging and analytics. It can be used in Server Components (including generateMetadata ), Server Actions , Route Handlers , and Middleware . The function accepts a callback that will be executed after the response (or prerender) is finished:"
                },
                {
                    "type": "code",
                    "code": "import { after } from 'next/server' // Custom logging function import { log } from '@/app/utils' export default function Layout ({ children } : { children : React . ReactNode }) { after (() => { // Execute after the layout is rendered and sent to the user log () }) return <>{children}</> }"
                },
                {
                    "type": "p",
                    "text": "Good to know: after is not a Dynamic API and calling it does not cause a route to become dynamic. If it's used within a static page, the callback will execute at build time, or whenever a page is revalidated."
                },
                {
                    "type": "list",
                    "items": [
                        "A callback function which will be executed after the response (or prerender) is finished."
                    ]
                },
                {
                    "type": "p",
                    "text": "after will run for the platform's default or configured max duration of your route. If your platform supports it, you can configure the timeout limit using the maxDuration route segment config."
                },
                {
                    "type": "list",
                    "items": [
                        "after will be executed even if the response didn't complete successfully. Including when an error is thrown or when notFound or redirect is called.",
                        "You can use React cache to deduplicate functions called inside after .",
                        "after can be nested inside other after calls, for example, you can create utility functions that wrap after calls to add additional functionality."
                    ]
                },
                {
                    "type": "p",
                    "text": "The use case for after is to process secondary tasks without blocking the primary response. It's similar to using the platform's waitUntil() or removing await from a promise, but with the following differences:"
                },
                {
                    "type": "list",
                    "items": [
                        "waitUntil() : accepts a promise and enqueues a task to be executed during the lifecycle of the request, whereas after accepts a callback that will be executed after the response is finished.",
                        "Removing await : starts executing during the response, which uses resources. It's also not reliable in serverless environments as the function stops computation immediately after the response is sent, potentially interrupting the task."
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend using after as it has been designed to consider other Next.js APIs and contexts. You can use request APIs such as cookies and headers inside after in Server Actions and Route Handlers . This is useful for logging activity after a mutation. For example:"
                },
                {
                    "type": "code",
                    "code": "import { after } from 'next/server' import { cookies , headers } from 'next/headers' import { logUserAction } from '@/app/utils' export async function POST (request : Request ) { // Perform mutation // ... // Log user activity for analytics after ( async () => { const userAgent = ( await headers () .get ( 'user-agent' )) || 'unknown' const sessionCookie = ( await cookies () .get ( 'session-id' ))?.value || 'anonymous' logUserAction ({ sessionCookie , userAgent }) }) return new Response ( JSON .stringify ({ status : 'success' }) , { status : 200 , headers : { 'Content-Type' : 'application/json' } , }) }"
                },
                {
                    "type": "p",
                    "text": "However, you cannot use these request APIs inside after in Server Components . This is because Next.js needs to know which part of the tree access the request APIs to support Partial Prerendering , but after runs after React's rendering lifecycle."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/cacheLife",
            "title": "Functions: cacheLife | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The cacheLife function is used to set the cache lifetime of a function or component. It should be used alongside the use cache directive, and within the scope of the function or component. To use cacheLife , enable the dynamicIO flag in your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { dynamicIO : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Then, import and invoke the cacheLife function within the scope of the function or component:"
                },
                {
                    "type": "code",
                    "code": "'use cache' import { unstable_cacheLife as cacheLife } from 'next/cache' export default async function Page () { cacheLife ( 'hours' ) return < div >Page</ div > }"
                },
                {
                    "type": "p",
                    "text": "Next.js provides a set of named cache profiles modeled on various timescales. If you don't specify a cache profile in the cacheLife function alongside the use cache directive, Next.js will automatically apply the “default” cache profile. However, we recommend always adding a cache profile when using the use cache directive to explicitly define caching behavior. The string values used to reference cache profiles don't carry inherent meaning; instead they serve as semantic labels. This allows you to better understand and manage your cached content within your codebase. You can configure custom cache profiles by adding them to the cacheLife option in your next.config.ts file. Cache profiles are objects that contain the following properties: The \"stale\" property differs from the staleTimes setting in that it specifically controls client-side router caching. While staleTimes is a global setting that affects all instances of both dynamic and static data, the cacheLife configuration allows you to define \"stale\" times on a per-function or per-route basis. Good to know : The “stale” property does not set the Cache-control: max-age header. It instead controls the client-side router cache. You can create a reusable cache profile by defining them in your next.config.ts file. Choose a name that suits your use case and set values for the stale , revalidate , and expire properties. You can create as many custom cache profiles as needed. Each profile can be referenced by its name as a string value passed to the cacheLife function."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { dynamicIO : true , cacheLife : { biweekly : { stale : 60 * 60 * 24 * 14 , // 14 days revalidate : 60 * 60 * 24 , // 1 day expire : 60 * 60 * 24 * 14 , // 14 days } , } , } , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "The example above caches for 14 days, checks for updates daily, and expires the cache after 14 days. You can then reference this profile throughout your application by its name:"
                },
                {
                    "type": "code",
                    "code": "'use cache' import { unstable_cacheLife as cacheLife } from 'next/cache' export default async function Page () { cacheLife ( 'biweekly' ) return < div >Page</ div > }"
                },
                {
                    "type": "p",
                    "text": "While the default cache profiles provide a useful way to think about how fresh or stale any given part of cacheable output can be, you may prefer different named profiles to better align with your applications caching strategies. You can override the default named cache profiles by creating a new configuration with the same name as the defaults. The example below shows how to override the default “days” cache profile:"
                },
                {
                    "type": "code",
                    "code": "const nextConfig = { experimental : { dynamicIO : true , cacheLife : { days : { stale : 3600 , // 1 hour revalidate : 900 , // 15 minutes expire : 86400 , // 1 day } , } , } , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "For specific use cases, you can set a custom cache profile by passing an object to the cacheLife function:"
                },
                {
                    "type": "code",
                    "code": "'use cache' import { unstable_cacheLife as cacheLife } from 'next/cache' export default async function Page () { cacheLife ({ stale : 3600 , // 1 hour revalidate : 900 , // 15 minutes expire : 86400 , // 1 day }) return < div >Page</ div > }"
                },
                {
                    "type": "p",
                    "text": "This inline cache profile will only be applied to the function or file it was created in. If you want to reuse the same profile throughout your application, you can add the configuration to the cacheLife property of your next.config.ts file. When defining multiple caching behaviors in the same route or component tree, if the inner caches specify their own cacheLife profile, the outer cache will respect the shortest cache duration among them. This applies only if the outer cache does not have its own explicit cacheLife profile defined. For example, if you add the use cache directive to your page, without specifying a cache profile, the default cache profile will be applied implicitly ( cacheLife(”default”) ). If a component imported into the page also uses the use cache directive with its own cache profile, the outer and inner cache profiles are compared, and shortest duration set in the profiles will be applied."
                },
                {
                    "type": "code",
                    "code": "// Parent component import { unstable_cacheLife as cacheLife } from 'next/cache' import { ChildComponent } from './child' export async function ParentComponent () { 'use cache' cacheLife ( 'days' ) return ( < div > < ChildComponent /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "And in a separate file, we defined the Child component that was imported:"
                },
                {
                    "type": "code",
                    "code": "// Child component import { unstable_cacheLife as cacheLife } from 'next/cache' export async function ChildComponent () { 'use cache' cacheLife ( 'hours' ) return < div >Child Content</ div > // This component's cache will respect the shorter 'hours' profile }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/cacheTag",
            "title": "Functions: cacheTag | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The cacheTag function allows you to tag cached data for on-demand invalidation. By associating tags with cache entries, you can selectively purge or revalidate specific cache entries without affecting other cached data. To use cacheTag , enable the dynamicIO flag in your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { dynamicIO : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "The cacheTag function takes a single string value, or a string array."
                },
                {
                    "type": "code",
                    "code": "import { unstable_cacheTag as cacheTag } from 'next/cache' export async function getData () { 'use cache' cacheTag ( 'my-data' ) const data = await fetch ( '/api/data' ) return data }"
                },
                {
                    "type": "p",
                    "text": "You can then purge the cache on-demand using revalidateTag API in another function, for example, a route handler or Server Action :"
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidateTag } from 'next/cache' export default async function submit () { await addPost () revalidateTag ( 'my-data' ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Idempotent Tags : Applying the same tag multiple times has no additional effect.",
                        "Multiple Tags : You can assign multiple tags to a single cache entry by passing an array to cacheTag ."
                    ]
                },
                {
                    "type": "code",
                    "code": "cacheTag ( 'tag-one' , 'tag-two' )"
                },
                {
                    "type": "p",
                    "text": "Tag your cached data by calling cacheTag within a cached function or component:"
                },
                {
                    "type": "code",
                    "code": "import { unstable_cacheTag as cacheTag } from 'next/cache' interface BookingsProps { type : string } export async function Bookings ({ type = 'haircut' } : BookingsProps ) { 'use cache' cacheTag ( 'bookings-data' ) async function getBookingsData () { const data = await fetch ( `/api/bookings?type= ${ encodeURIComponent (type) } ` ) return data } return //... }"
                },
                {
                    "type": "p",
                    "text": "You can use the data returned from an async function to tag the cache entry."
                },
                {
                    "type": "code",
                    "code": "import { unstable_cacheTag as cacheTag } from 'next/cache' interface BookingsProps { type : string } export async function Bookings ({ type = 'haircut' } : BookingsProps ) { async function getBookingsData () { 'use cache' const data = await fetch ( `/api/bookings?type= ${ encodeURIComponent (type) } ` ) cacheTag ( 'bookings-data' , data .id) return data } return //... }"
                },
                {
                    "type": "p",
                    "text": "Using revalidateTag , you can invalidate the cache for a specific tag when needed:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidateTag } from 'next/cache' export async function updateBookings () { await updateBookingData () revalidateTag ( 'bookings-data' ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/connection",
            "title": "Functions: connection | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The connection() function allows you to indicate rendering should wait for an incoming user request before continuing. It's useful when a component doesn’t use Dynamic APIs , but you want it to be dynamically rendered at runtime and not statically rendered at build time. This usually occurs when you access external information that you intentionally want to change the result of a render, such as Math.random() or new Date() ."
                },
                {
                    "type": "code",
                    "code": "import { connection } from 'next/server' export default async function Page () { await connection () // Everything below will be excluded from prerendering const rand = Math .random () return < span >{rand} </ span > }"
                },
                {
                    "type": "code",
                    "code": "function connection () : Promise < void >"
                },
                {
                    "type": "list",
                    "items": [
                        "The function does not accept any parameters."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The function returns a void Promise. It is not meant to be consumed."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "connection replaces unstable_noStore to better align with the future of Next.js.",
                        "The function is only necessary when dynamic rendering is required and common Dynamic APIs are not used."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/cookies",
            "title": "Functions: cookies | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "cookies is an async function that allows you to read the HTTP incoming request cookies in Server Component , and read/write outgoing request cookies in Server Actions or Route Handlers ."
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' export default async function Page () { const cookieStore = await cookies () const theme = cookieStore .get ( 'theme' ) return '...' }"
                },
                {
                    "type": "p",
                    "text": "When setting a cookie, the following properties from the options object are supported: The only option with a default value is path . To learn more about these options, see the MDN docs ."
                },
                {
                    "type": "list",
                    "items": [
                        "cookies is an asynchronous function that returns a promise. You must use async/await or React's use function to access cookies. In version 14 and earlier, cookies was a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "In version 14 and earlier, cookies was a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "cookies is a Dynamic API whose returned values cannot be known ahead of time. Using it in a layout or page will opt a route into dynamic rendering .",
                        "The .delete method can only be called: In a Server Action or Route Handler . If it belongs to the same domain from which .set is called. Additionally, the code must be executed on the same protocol (HTTP or HTTPS) as the cookie you want to delete.",
                        "In a Server Action or Route Handler .",
                        "If it belongs to the same domain from which .set is called. Additionally, the code must be executed on the same protocol (HTTP or HTTPS) as the cookie you want to delete.",
                        "HTTP does not allow setting cookies after streaming starts, so you must use .set in a Server Action or Route Handler ."
                    ]
                },
                {
                    "type": "p",
                    "text": "When working with cookies in Server Components, it's important to understand that cookies are fundamentally a client-side storage mechanism:"
                },
                {
                    "type": "list",
                    "items": [
                        "Reading cookies works in Server Components because you're accessing the cookie data that the client's browser sends to the server in the HTTP request headers.",
                        "Setting cookies cannot be done directly in a Server Component, even when using a Route Handler or Server Action. This is because cookies are actually stored by the browser, not the server."
                    ]
                },
                {
                    "type": "p",
                    "text": "The server can only send instructions (via Set-Cookie headers) to tell the browser to store cookies - the actual storage happens on the client side. This is why cookie operations that modify state ( .set , .delete , .clear ) must be performed in a Route Handler or Server Action where the response headers can be properly set. You can use the (await cookies()).get('name') method to get a single cookie:"
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' export default async function Page () { const cookieStore = await cookies () const theme = cookieStore .get ( 'theme' ) return '...' }"
                },
                {
                    "type": "p",
                    "text": "You can use the (await cookies()).getAll() method to get all cookies with a matching name. If name is unspecified, it returns all the available cookies."
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' export default async function Page () { const cookieStore = await cookies () return cookieStore .getAll () .map ((cookie) => ( < div key = { cookie .name}> < p >Name: { cookie .name}</ p > < p >Value: { cookie .value}</ p > </ div > )) }"
                },
                {
                    "type": "p",
                    "text": "You can use the (await cookies()).set(name, value, options) method in a Server Action or Route Handler to set a cookie. The options object is optional."
                },
                {
                    "type": "code",
                    "code": "'use server' import { cookies } from 'next/headers' export async function create (data) { const cookieStore = await cookies () cookieStore .set ( 'name' , 'lee' ) // or cookieStore .set ( 'name' , 'lee' , { secure : true }) // or cookieStore .set ({ name : 'name' , value : 'lee' , httpOnly : true , path : '/' , }) }"
                },
                {
                    "type": "p",
                    "text": "You can use the (await cookies()).has(name) method to check if a cookie exists:"
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' export default async function Page () { const cookieStore = await cookies () const hasCookie = cookieStore .has ( 'theme' ) return '...' }"
                },
                {
                    "type": "p",
                    "text": "There are three ways you can delete a cookie."
                },
                {
                    "type": "code",
                    "code": "'use server' import { cookies } from 'next/headers' export async function delete (data) { ( await cookies ()) .delete ( 'name' ) }"
                },
                {
                    "type": "p",
                    "text": "Setting a new cookie with the same name and an empty value:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { cookies } from 'next/headers' export async function delete (data) { ( await cookies ()) .set ( 'name' , '' ) }"
                },
                {
                    "type": "p",
                    "text": "Setting the maxAge to 0 will immediately expire a cookie. maxAge accepts a value in seconds."
                },
                {
                    "type": "code",
                    "code": "'use server' import { cookies } from 'next/headers' export async function delete (data) { ( await cookies ()) .set ( 'name' , 'value' , { maxAge : 0 }) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/draft-mode",
            "title": "Functions: draftMode | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "draftMode is an async function allows you to enable and disable Draft Mode , as well as check if Draft Mode is enabled in a Server Component ."
                },
                {
                    "type": "code",
                    "code": "import { draftMode } from 'next/headers' export default async function Page () { const { isEnabled } = await draftMode () }"
                },
                {
                    "type": "p",
                    "text": "The following methods and properties are available:"
                },
                {
                    "type": "list",
                    "items": [
                        "draftMode is an asynchronous function that returns a promise. You must use async/await or React's use function. In version 14 and earlier, draftMode was a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "In version 14 and earlier, draftMode was a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "A new bypass cookie value will be generated each time you run next build . This ensures that the bypass cookie can’t be guessed.",
                        "To test Draft Mode locally over HTTP, your browser will need to allow third-party cookies and local storage access."
                    ]
                },
                {
                    "type": "p",
                    "text": "To enable Draft Mode, create a new Route Handler and call the enable() method:"
                },
                {
                    "type": "code",
                    "code": "import { draft Mode } from 'next/headers' export async function GET (request : Request ) { const draft = await draft Mode () draft () .enable () return new Response ( 'Draft mode is enabled' ) }"
                },
                {
                    "type": "p",
                    "text": "By default, the Draft Mode session ends when the browser is closed. To disable Draft Mode manually, call the disable() method in your Route Handler :"
                },
                {
                    "type": "code",
                    "code": "import { draft Mode } from 'next/headers' export async function GET (request : Request ) { const draft = await draft Mode () draft () .disable () return new Response ( 'Draft mode is disabled' ) }"
                },
                {
                    "type": "p",
                    "text": "Then, send a request to invoke the Route Handler. If calling the route using the <Link> component , you must pass prefetch={false} to prevent accidentally deleting the cookie on prefetch. You can check if Draft Mode is enabled in a Server Component with the isEnabled property:"
                },
                {
                    "type": "code",
                    "code": "import { draftMode } from 'next/headers' export default async function Page () { const { isEnabled } = await draftMode () return ( < main > < h1 >My Blog Post</ h1 > < p >Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled' }</ p > </ main > ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/fetch",
            "title": "Functions: fetch | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js extends the Web fetch() API to allow each request on the server to set its own persistent caching and revalidation semantics. In the browser, the cache option indicates how a fetch request will interact with the browser's HTTP cache. With this extension, cache indicates how a server-side fetch request will interact with the framework's persistent Data Cache . You can call fetch with async and await directly within Server Components."
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { let data = await fetch ( 'https://api.vercel.app/blog' ) let posts = await data .json () return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "Since Next.js extends the Web fetch() API , you can use any of the native options available . Configure how the request should interact with Next.js Data Cache ."
                },
                {
                    "type": "code",
                    "code": "fetch ( `https://...` , { cache : 'force-cache' | 'no-store' })"
                },
                {
                    "type": "list",
                    "items": [
                        "auto no cache (default): Next.js fetches the resource from the remote server on every request in development, but will fetch once during next build because the route will be statically prerendered. If Dynamic APIs are detected on the route, Next.js will fetch the resource on every request.",
                        "no-store : Next.js fetches the resource from the remote server on every request, even if Dynamic APIs are not detected on the route.",
                        "force-cache : Next.js looks for a matching request in its Data Cache. If there is a match and it is fresh, it will be returned from the cache. If there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource.",
                        "If there is a match and it is fresh, it will be returned from the cache.",
                        "If there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource."
                    ]
                },
                {
                    "type": "code",
                    "code": "fetch ( `https://...` , { next : { revalidate : false | 0 | number } })"
                },
                {
                    "type": "p",
                    "text": "Set the cache lifetime of a resource (in seconds)."
                },
                {
                    "type": "list",
                    "items": [
                        "false - Cache the resource indefinitely. Semantically equivalent to revalidate: Infinity . The HTTP cache may evict older resources over time.",
                        "0 - Prevent the resource from being cached.",
                        "number - (in seconds) Specify the resource should have a cache lifetime of at most n seconds."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "If an individual fetch() request sets a revalidate number lower than the default revalidate of a route, the whole route revalidation interval will be decreased.",
                        "If two fetch requests with the same URL in the same route have different revalidate values, the lower value will be used.",
                        "As a convenience, it is not necessary to set the cache option if revalidate is set to a number.",
                        "Conflicting options such as { revalidate: 3600, cache: 'no-store' } will cause an error."
                    ]
                },
                {
                    "type": "code",
                    "code": "fetch ( `https://...` , { next : { tags : [ 'collection' ] } })"
                },
                {
                    "type": "p",
                    "text": "Set the cache tags of a resource. Data can then be revalidated on-demand using revalidateTag . The max length for a custom tag is 256 characters and the max tag items is 128. Next.js caches fetch responses in Server Components across Hot Module Replacement (HMR) in local development for faster responses and to reduce costs for billed API calls. By default, the HMR cache applies to all fetch requests, including those with the default auto no cache and cache: 'no-store' option. This means uncached requests will not show fresh data between HMR refreshes. However, the cache will be cleared on navigation or full-page reloads. See the serverComponentsHmrCache docs for more information."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden",
            "title": "Functions: forbidden | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The forbidden function throws an error that renders a Next.js 403 error page. It's useful for handling authorization errors in your application. You can customize the UI using the forbidden.js file . To start using forbidden , enable the experimental authInterrupts configuration option in your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { authInterrupts : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "forbidden can be invoked in Server Components , Server Actions , and Route Handlers ."
                },
                {
                    "type": "code",
                    "code": "import { verifySession } from '@/app/lib/dal' import { forbidden } from 'next/navigation' export default async function AdminPage () { const session = await verifySession () // Check if the user has the 'admin' role if ( session .role !== 'admin' ) { forbidden () } // Render the admin page for auth orized users return <></> }"
                },
                {
                    "type": "list",
                    "items": [
                        "The forbidden function cannot be called in the root layout ."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can use forbidden to restrict access to certain routes based on user roles. This ensures that users who are authenticated but lack the required permissions cannot access the route."
                },
                {
                    "type": "code",
                    "code": "import { verifySession } from '@/app/lib/dal' import { forbidden } from 'next/navigation' export default async function AdminPage () { const session = await verifySession () // Check if the user has the ' admin ' role if ( session .role !== ' admin ' ) { forbidden () } // Render the admin page for authorized users return ( < main > < h1 >Admin Dashboard</ h1 > < p >Welcome, { session . user .name}!</ p > </ main > ) }"
                },
                {
                    "type": "p",
                    "text": "When implementing mutations in Server Actions, you can use forbidden to only allow users with a specific role to update sensitive data."
                },
                {
                    "type": "code",
                    "code": "'use server' import { verifySession } from '@/app/lib/dal' import { forbidden } from 'next/navigation' import db from '@/app/lib/db' export async function updateRole (formData : FormData ) { const session = await verifySession () // Ensure only admins can update roles if ( session .role !== 'admin' ) { forbidden () } // Perform the role update for authorized users // ... }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-image-metadata",
            "title": "Functions: generateImageMetadata | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "You can use generateImageMetadata to generate different versions of one image or return multiple images for one route segment. This is useful for when you want to avoid hard-coding metadata values, such as for icons. generateImageMetadata function accepts the following parameters: An object containing the dynamic route parameters object from the root segment down to the segment generateImageMetadata is called from."
                },
                {
                    "type": "code",
                    "code": "export function generateImageMetadata ({ params , } : { params : { slug : string } }) { // ... }"
                },
                {
                    "type": "p",
                    "text": "The generateImageMetadata function should return an array of objects containing the image's metadata such as alt and size . In addition, each item must include an id value which will be passed to the props of the image generating function."
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og' export function generateImageMetadata () { return [ { contentType : 'image/png' , size : { width : 48 , height : 48 } , id : 'small' , } , { contentType : 'image/png' , size : { width : 72 , height : 72 } , id : 'medium' , } , ] } export default function Icon ({ id } : { id : string }) { return new ImageResponse ( ( < div style = {{ width : '100%' , height : '100%' , display : 'flex' , alignItems : 'center' , justifyContent : 'center' , fontSize : 88 , background : '#000' , color : '#fafafa' , }} > Icon {id} </ div > ) ) }"
                },
                {
                    "type": "p",
                    "text": "This example uses the params object and external data to generate multiple Open Graph images for a route segment."
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og' import { getCaptionForImage , getOGImages } from '@/app/utils/images' export async function generateImageMetadata ({ params , } : { params : { id : string } }) { const images = await getOGImages ( params .id) return images .map ((image , idx) => ({ id : idx , size : { width : 1200 , height : 600 } , alt : image .text , contentType : 'image/png' , })) } export default async function Image ({ params , id , } : { params : { id : string } id : number }) { const productId = ( await params).id const imageId = id const text = await getCaptionForImage (productId , imageId) return new ImageResponse ( ( < div style = { { // ... } } > {text} </ div > ) ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-metadata",
            "title": "Functions: generateMetadata | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This page covers all Config-based Metadata options with generateMetadata and the static metadata object."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' // either Static metadata export const metadata : Metadata = { title : '...' , } // or Dynamic metadata export async function generateMetadata ({ params }) { return { title : '...' , } }"
                },
                {
                    "type": "list",
                    "items": [
                        "The metadata object and generateMetadata function exports are only supported in Server Components .",
                        "You cannot export both the metadata object and generateMetadata function from the same route segment.",
                        "On the initial load, streaming is blocked until generateMetadata has fully resolved, including any content from loading.js ."
                    ]
                },
                {
                    "type": "p",
                    "text": "To define static metadata, export a Metadata object from a layout.js or page.js file."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : '...' , description : '...' , } export default function Page () {}"
                },
                {
                    "type": "p",
                    "text": "See the Metadata Fields for a complete list of supported options. Dynamic metadata depends on dynamic information , such as the current route parameters, external data, or metadata in parent segments, can be set by exporting a generateMetadata function that returns a Metadata object ."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata , ResolvingMetadata } from 'next' type Props = { params : Promise <{ id : string }> searchParams : Promise <{ [key : string ] : string | string [] | undefined }> } export async function generateMetadata ( { params , searchParams } : Props , parent : ResolvingMetadata ) : Promise < Metadata > { // read route params const id = ( await params).id // fetch data const product = await fetch ( `https://.../ ${ id } ` ) .then ((res) => res .json ()) // optionally access and extend (rather than replace) parent metadata const previousImages = ( await parent). openGraph ?.images || [] return { title : product .title , openGraph : { images : [ '/some-specific-page-image.jpg' , ... previousImages] , } , } } export default function Page ({ params , searchParams } : Props ) {}"
                },
                {
                    "type": "p",
                    "text": "generateMetadata function accepts the following parameters:"
                },
                {
                    "type": "list",
                    "items": [
                        "props - An object containing the parameters of the current route: params - An object containing the dynamic route parameters object from the root segment down to the segment generateMetadata is called from. Examples: Route URL params app/shop/[slug]/page.js /shop/1 { slug: '1' } app/shop/[tag]/[item]/page.js /shop/1/2 { tag: '1', item: '2' } app/shop/[...slug]/page.js /shop/1/2 { slug: ['1', '2'] } searchParams - An object containing the current URL's search params . Examples: URL searchParams /shop?a=1 { a: '1' } /shop?a=1&b=2 { a: '1', b: '2' } /shop?a=1&a=2 { a: ['1', '2'] }",
                        "params - An object containing the dynamic route parameters object from the root segment down to the segment generateMetadata is called from. Examples: Route URL params app/shop/[slug]/page.js /shop/1 { slug: '1' } app/shop/[tag]/[item]/page.js /shop/1/2 { tag: '1', item: '2' } app/shop/[...slug]/page.js /shop/1/2 { slug: ['1', '2'] }",
                        "searchParams - An object containing the current URL's search params . Examples: URL searchParams /shop?a=1 { a: '1' } /shop?a=1&b=2 { a: '1', b: '2' } /shop?a=1&a=2 { a: ['1', '2'] }",
                        "parent - A promise of the resolved metadata from parent route segments."
                    ]
                },
                {
                    "type": "p",
                    "text": "generateMetadata should return a Metadata object containing one or more metadata fields."
                },
                {
                    "type": "list",
                    "items": [
                        "If metadata doesn't depend on runtime information, it should be defined using the static metadata object rather than generateMetadata .",
                        "fetch requests are automatically memoized for the same data across generateMetadata , generateStaticParams , Layouts, Pages, and Server Components. React cache can be used if fetch is unavailable.",
                        "searchParams are only available in page.js segments.",
                        "The redirect() and notFound() Next.js methods can also be used inside generateMetadata ."
                    ]
                },
                {
                    "type": "p",
                    "text": "The title attribute is used to set the title of the document. It can be defined as a simple string or an optional template object ."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { title : 'Next.js' , }"
                },
                {
                    "type": "code",
                    "code": "< title >Next.js</ title >"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : { template : '...' , default : '...' , absolute : '...' , } , }"
                },
                {
                    "type": "p",
                    "text": "title.default can be used to provide a fallback title to child route segments that don't define a title ."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : { default : 'Acme' , } , }"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = {} // Output: <title>Acme</title>"
                },
                {
                    "type": "p",
                    "text": "title.template can be used to add a prefix or a suffix to titles defined in child route segments."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : { template : '%s | Acme' , default : 'Acme' , // a default is required when creating a template } , }"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : 'About' , } // Output: <title>About | Acme</title>"
                },
                {
                    "type": "list",
                    "items": [
                        "title.template applies to child route segments and not the segment it's defined in. This means: title.default is required when you add a title.template . title.template defined in layout.js will not apply to a title defined in a page.js of the same route segment. title.template defined in page.js has no effect because a page is always the terminating segment (it doesn't have any children route segments).",
                        "title.default is required when you add a title.template .",
                        "title.template defined in layout.js will not apply to a title defined in a page.js of the same route segment.",
                        "title.template defined in page.js has no effect because a page is always the terminating segment (it doesn't have any children route segments).",
                        "title.template has no effect if a route has not defined a title or title.default ."
                    ]
                },
                {
                    "type": "p",
                    "text": "title.absolute can be used to provide a title that ignores title.template set in parent segments."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : { template : '%s | Acme' , } , }"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : { absolute : 'About' , } , } // Output: <title>About</title>"
                },
                {
                    "type": "list",
                    "items": [
                        "layout.js title (string) and title.default define the default title for child segments (that do not define their own title ). It will augment title.template from the closest parent segment if it exists. title.absolute defines the default title for child segments. It ignores title.template from parent segments. title.template defines a new title template for child segments.",
                        "title (string) and title.default define the default title for child segments (that do not define their own title ). It will augment title.template from the closest parent segment if it exists.",
                        "title.absolute defines the default title for child segments. It ignores title.template from parent segments.",
                        "title.template defines a new title template for child segments.",
                        "page.js If a page does not define its own title the closest parents resolved title will be used. title (string) defines the routes title. It will augment title.template from the closest parent segment if it exists. title.absolute defines the route title. It ignores title.template from parent segments. title.template has no effect in page.js because a page is always the terminating segment of a route.",
                        "If a page does not define its own title the closest parents resolved title will be used.",
                        "title (string) defines the routes title. It will augment title.template from the closest parent segment if it exists.",
                        "title.absolute defines the route title. It ignores title.template from parent segments.",
                        "title.template has no effect in page.js because a page is always the terminating segment of a route."
                    ]
                },
                {
                    "type": "code",
                    "code": "export const metadata = { description : 'The React Framework for the Web' , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"description\" content = \"The React Framework for the Web\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { generator : 'Next.js' , applicationName : 'Next.js' , referrer : 'origin-when-cross-origin' , keywords : [ 'Next.js' , 'React' , 'JavaScript' ] , authors : [{ name : 'Seb' } , { name : 'Josh' , url : 'https://nextjs.org' }] , creator : 'Jiachi Liu' , publisher : 'Sebastian Markbåge' , formatDetection : { email : false , address : false , telephone : false , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"application-name\" content = \"Next.js\" /> < meta name = \"author\" content = \"Seb\" /> < link rel = \"author\" href = \"https://nextjs.org\" /> < meta name = \"author\" content = \"Josh\" /> < meta name = \"generator\" content = \"Next.js\" /> < meta name = \"keywords\" content = \"Next.js,React,JavaScript\" /> < meta name = \"referrer\" content = \"origin-when-cross-origin\" /> < meta name = \"color-scheme\" content = \"dark\" /> < meta name = \"creator\" content = \"Jiachi Liu\" /> < meta name = \"publisher\" content = \"Sebastian Markbåge\" /> < meta name = \"format-detection\" content = \"telephone=no, address=no, email=no\" />"
                },
                {
                    "type": "p",
                    "text": "metadataBase is a convenience option to set a base URL prefix for metadata fields that require a fully qualified URL."
                },
                {
                    "type": "list",
                    "items": [
                        "metadataBase allows URL-based metadata fields defined in the current route segment and below to use a relative path instead of an otherwise required absolute URL.",
                        "The field's relative path will be composed with metadataBase to form a fully qualified URL.",
                        "If not configured, metadataBase is automatically populated with a default value ."
                    ]
                },
                {
                    "type": "code",
                    "code": "export const metadata = { metadataBase : new URL ( 'https://acme.com' ) , alternates : { canonical : '/' , languages : { 'en-US' : '/en-US' , 'de-DE' : '/de-DE' , } , } , openGraph : { images : '/og-image.png' , } , }"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"canonical\" href = \"https://acme.com\" /> < link rel = \"alternate\" hreflang = \"en-US\" href = \"https://acme.com/en-US\" /> < link rel = \"alternate\" hreflang = \"de-DE\" href = \"https://acme.com/de-DE\" /> < meta property = \"og:image\" content = \"https://acme.com/og-image.png\" />"
                },
                {
                    "type": "list",
                    "items": [
                        "metadataBase is typically set in root app/layout.js to apply to URL-based metadata fields across all routes.",
                        "All URL-based metadata fields that require absolute URLs can be configured with a metadataBase option.",
                        "metadataBase can contain a subdomain e.g. https://app.acme.com or base path e.g. https://acme.com/start/from/here",
                        "If a metadata field provides an absolute URL, metadataBase will be ignored.",
                        "Using a relative path in a URL-based metadata field without configuring a metadataBase will cause a build error.",
                        "Next.js will normalize duplicate slashes between metadataBase (e.g. https://acme.com/ ) and a relative field (e.g. /path ) to a single slash (e.g. https://acme.com/path )"
                    ]
                },
                {
                    "type": "p",
                    "text": "If not configured, metadataBase has a default value ."
                },
                {
                    "type": "list",
                    "items": [
                        "For production deployments, VERCEL_PROJECT_PRODUCTION_URL will be used.",
                        "For preview deployments, VERCEL_BRANCH_URL will take priority, and fallback to VERCEL_URL if it's not present."
                    ]
                },
                {
                    "type": "p",
                    "text": "If these values are present they will be used as the default value of metadataBase , otherwise it falls back to http://localhost:${process.env.PORT || 3000} . This allows Open Graph images to work on both local build and Vercel preview and production deployments. When overriding the default, we recommend using environment variables to compute the URL. This allows configuring a URL for local development, staging, and production environments. See more details about these environment variables in the System Environment Variables docs. URL composition favors developer intent over default directory traversal semantics."
                },
                {
                    "type": "list",
                    "items": [
                        "Trailing slashes between metadataBase and metadata fields are normalized.",
                        "An \"absolute\" path in a metadata field (that typically would replace the whole URL path) is treated as a \"relative\" path (starting from the end of metadataBase )."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, given the following metadataBase :"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { metadataBase : new URL ( 'https://acme.com' ) , }"
                },
                {
                    "type": "p",
                    "text": "Any metadata fields that inherit the above metadataBase and set their own value will be resolved as follows:"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { openGraph : { title : 'Next.js' , description : 'The React Framework for the Web' , url : 'https://nextjs.org' , siteName : 'Next.js' , images : [ { url : 'https://nextjs.org/og.png' , // Must be an absolute URL width : 800 , height : 600 , } , { url : 'https://nextjs.org/og-alt.png' , // Must be an absolute URL width : 1800 , height : 1600 , alt : 'My custom alt' , } , ] , videos : [ { url : 'https://nextjs.org/video.mp4' , // Must be an absolute URL width : 800 , height : 600 , } , ] , audio : [ { url : 'https://nextjs.org/audio.mp3' , // Must be an absolute URL } , ] , locale : 'en_US' , type : 'website' , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"og:title\" content = \"Next.js\" /> < meta property = \"og:description\" content = \"The React Framework for the Web\" /> < meta property = \"og:url\" content = \"https://nextjs.org/\" /> < meta property = \"og:site_name\" content = \"Next.js\" /> < meta property = \"og:locale\" content = \"en_US\" /> < meta property = \"og:image\" content = \"https://nextjs.org/og.png\" /> < meta property = \"og:image:width\" content = \"800\" /> < meta property = \"og:image:height\" content = \"600\" /> < meta property = \"og:image\" content = \"https://nextjs.org/og-alt.png\" /> < meta property = \"og:image:width\" content = \"1800\" /> < meta property = \"og:image:height\" content = \"1600\" /> < meta property = \"og:image:alt\" content = \"My custom alt\" /> < meta property = \"og:video\" content = \"https://nextjs.org/video.mp4\" /> < meta property = \"og:video:width\" content = \"800\" /> < meta property = \"og:video:height\" content = \"600\" /> < meta property = \"og:audio\" content = \"https://nextjs.org/audio.mp3\" /> < meta property = \"og:type\" content = \"website\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { openGraph : { title : 'Next.js' , description : 'The React Framework for the Web' , type : 'article' , publishedTime : '2023-01-01T00:00:00.000Z' , authors : [ 'Seb' , 'Josh' ] , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"og:title\" content = \"Next.js\" /> < meta property = \"og:description\" content = \"The React Framework for the Web\" /> < meta property = \"og:type\" content = \"article\" /> < meta property = \"article:published_time\" content = \"2023-01-01T00:00:00.000Z\" /> < meta property = \"article:author\" content = \"Seb\" /> < meta property = \"article:author\" content = \"Josh\" />"
                },
                {
                    "type": "list",
                    "items": [
                        "It may be more convenient to use the file-based Metadata API for Open Graph images. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you."
                    ]
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { robots : { index : false , follow : true , nocache : true , googleBot : { index : true , follow : false , noimageindex : true , 'max-video-preview' : - 1 , 'max-image-preview' : 'large' , 'max-snippet' : - 1 , } , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"robots\" content = \"noindex, follow, nocache\" /> < meta name = \"googlebot\" content = \"index, nofollow, noimageindex, max-video-preview:-1, max-image-preview:large, max-snippet:-1\" />"
                },
                {
                    "type": "p",
                    "text": "Good to know : We recommend using the file-based Metadata API for icons where possible. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { icons : { icon : '/icon.png' , shortcut : '/shortcut-icon.png' , apple : '/apple-icon.png' , other : { rel : 'apple-touch-icon-precomposed' , url : '/apple-touch-icon-precomposed.png' , } , } , }"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"shortcut icon\" href = \"/shortcut-icon.png\" /> < link rel = \"icon\" href = \"/icon.png\" /> < link rel = \"apple-touch-icon\" href = \"/apple-icon.png\" /> < link rel = \"apple-touch-icon-precomposed\" href = \"/apple-touch-icon-precomposed.png\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { icons : { icon : [ { url : '/icon.png' } , new URL ( '/icon.png' , 'https://example.com' ) , { url : '/icon-dark.png' , media : '(prefers-color-scheme: dark)' } , ] , shortcut : [ '/shortcut-icon.png' ] , apple : [ { url : '/apple-icon.png' } , { url : '/apple-icon-x3.png' , sizes : '180x180' , type : 'image/png' } , ] , other : [ { rel : 'apple-touch-icon-precomposed' , url : '/apple-touch-icon-precomposed.png' , } , ] , } , }"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"shortcut icon\" href = \"/shortcut-icon.png\" /> < link rel = \"icon\" href = \"/icon.png\" /> < link rel = \"icon\" href = \"https://example.com/icon.png\" /> < link rel = \"icon\" href = \"/icon-dark.png\" media = \"(prefers-color-scheme: dark)\" /> < link rel = \"apple-touch-icon\" href = \"/apple-icon.png\" /> < link rel = \"apple-touch-icon-precomposed\" href = \"/apple-touch-icon-precomposed.png\" /> < link rel = \"apple-touch-icon\" href = \"/apple-icon-x3.png\" sizes = \"180x180\" type = \"image/png\" />"
                },
                {
                    "type": "p",
                    "text": "Good to know : The msapplication-* meta tags are no longer supported in Chromium builds of Microsoft Edge, and thus no longer needed. Deprecated : The themeColor option in metadata is deprecated as of Next.js 14. Please use the viewport configuration instead. A web application manifest, as defined in the Web Application Manifest specification ."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { manifest : 'https://nextjs.org/manifest.json' , }"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"manifest\" href = \"https://nextjs.org/manifest.json\" />"
                },
                {
                    "type": "p",
                    "text": "The Twitter specification is (surprisingly) used for more than just X (formerly known as Twitter). Learn more about the Twitter Card markup reference ."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { twitter : { card : 'summary_large_image' , title : 'Next.js' , description : 'The React Framework for the Web' , siteId : '1467726470533754880' , creator : '@nextjs' , creatorId : '1467726470533754880' , images : [ 'https://nextjs.org/og.png' ] , // Must be an absolute URL } , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"twitter:card\" content = \"summary_large_image\" /> < meta name = \"twitter:site:id\" content = \"1467726470533754880\" /> < meta name = \"twitter:creator\" content = \"@nextjs\" /> < meta name = \"twitter:creator:id\" content = \"1467726470533754880\" /> < meta name = \"twitter:title\" content = \"Next.js\" /> < meta name = \"twitter:description\" content = \"The React Framework for the Web\" /> < meta name = \"twitter:image\" content = \"https://nextjs.org/og.png\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { twitter : { card : 'app' , title : 'Next.js' , description : 'The React Framework for the Web' , siteId : '1467726470533754880' , creator : '@nextjs' , creatorId : '1467726470533754880' , images : { url : 'https://nextjs.org/og.png' , alt : 'Next.js Logo' , } , app : { name : 'twitter_app' , id : { iphone : 'twitter_app://iphone' , ipad : 'twitter_app://ipad' , googleplay : 'twitter_app://googleplay' , } , url : { iphone : 'https://iphone_url' , ipad : 'https://ipad_url' , } , } , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"twitter:site:id\" content = \"1467726470533754880\" /> < meta name = \"twitter:creator\" content = \"@nextjs\" /> < meta name = \"twitter:creator:id\" content = \"1467726470533754880\" /> < meta name = \"twitter:title\" content = \"Next.js\" /> < meta name = \"twitter:description\" content = \"The React Framework for the Web\" /> < meta name = \"twitter:card\" content = \"app\" /> < meta name = \"twitter:image\" content = \"https://nextjs.org/og.png\" /> < meta name = \"twitter:image:alt\" content = \"Next.js Logo\" /> < meta name = \"twitter:app:name:iphone\" content = \"twitter_app\" /> < meta name = \"twitter:app:id:iphone\" content = \"twitter_app://iphone\" /> < meta name = \"twitter:app:id:ipad\" content = \"twitter_app://ipad\" /> < meta name = \"twitter:app:id:googleplay\" content = \"twitter_app://googleplay\" /> < meta name = \"twitter:app:url:iphone\" content = \"https://iphone_url\" /> < meta name = \"twitter:app:url:ipad\" content = \"https://ipad_url\" /> < meta name = \"twitter:app:name:ipad\" content = \"twitter_app\" /> < meta name = \"twitter:app:name:googleplay\" content = \"twitter_app\" />"
                },
                {
                    "type": "p",
                    "text": "Deprecated : The viewport option in metadata is deprecated as of Next.js 14. Please use the viewport configuration instead."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { verification : { google : 'google' , yandex : 'yandex' , yahoo : 'yahoo' , other : { me : [ 'my-email' , 'my-link' ] , } , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"google-site-verification\" content = \"google\" /> < meta name = \"y_key\" content = \"yahoo\" /> < meta name = \"yandex-verification\" content = \"yandex\" /> < meta name = \"me\" content = \"my-email\" /> < meta name = \"me\" content = \"my-link\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { itunes : { appId : 'myAppStoreID' , appArgument : 'myAppArgument' , } , appleWebApp : { title : 'Apple Web App' , statusBarStyle : 'black-translucent' , startupImage : [ '/assets/startup/apple-touch-startup-image-768x1004.png' , { url : '/assets/startup/apple-touch-startup-image-1536x2008.png' , media : '(device-width: 768px) and (device-height: 1024px)' , } , ] , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"apple-itunes-app\" content = \"app-id=myAppStoreID, app-argument=myAppArgument\" /> < meta name = \"mobile-web-app-capable\" content = \"yes\" /> < meta name = \"apple-mobile-web-app-title\" content = \"Apple Web App\" /> < link href = \"/assets/startup/apple-touch-startup-image-768x1004.png\" rel = \"apple-touch-startup-image\" /> < link href = \"/assets/startup/apple-touch-startup-image-1536x2008.png\" media = \"(device-width: 768px) and (device-height: 1024px)\" rel = \"apple-touch-startup-image\" /> < meta name = \"apple-mobile-web-app-status-bar-style\" content = \"black-translucent\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { alternates : { canonical : 'https://nextjs.org' , languages : { 'en-US' : 'https://nextjs.org/en-US' , 'de-DE' : 'https://nextjs.org/de-DE' , } , media : { 'only screen and (max-width: 600px)' : 'https://nextjs.org/mobile' , } , types : { 'application/rss+xml' : 'https://nextjs.org/rss' , } , } , }"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"canonical\" href = \"https://nextjs.org\" /> < link rel = \"alternate\" hreflang = \"en-US\" href = \"https://nextjs.org/en-US\" /> < link rel = \"alternate\" hreflang = \"de-DE\" href = \"https://nextjs.org/de-DE\" /> < link rel = \"alternate\" media = \"only screen and (max-width: 600px)\" href = \"https://nextjs.org/mobile\" /> < link rel = \"alternate\" type = \"application/rss+xml\" href = \"https://nextjs.org/rss\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { appLinks : { ios : { url : 'https://nextjs.org/ios' , app_store_id : 'app_store_id' , } , android : { package : 'com.example.android/package' , app_name : 'app_name_android' , } , web : { url : 'https://nextjs.org/web' , should_fallback : true , } , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"al:ios:url\" content = \"https://nextjs.org/ios\" /> < meta property = \"al:ios:app_store_id\" content = \"app_store_id\" /> < meta property = \"al:android:package\" content = \"com.example.android/package\" /> < meta property = \"al:android:app_name\" content = \"app_name_android\" /> < meta property = \"al:web:url\" content = \"https://nextjs.org/web\" /> < meta property = \"al:web:should_fallback\" content = \"true\" />"
                },
                {
                    "type": "p",
                    "text": "Describes a collection of records, documents, or other materials of historical interest ( source )."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { archives : [ 'https://nextjs.org/13' ] , }"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"archives\" href = \"https://nextjs.org/13\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { assets : [ 'https://nextjs.org/assets' ] , }"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"assets\" href = \"https://nextjs.org/assets\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { bookmarks : [ 'https://nextjs.org/13' ] , }"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"bookmarks\" href = \"https://nextjs.org/13\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { category : 'technology' , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"category\" content = \"technology\" />"
                },
                {
                    "type": "p",
                    "text": "You can connect a Facebook app or Facebook account to you webpage for certain Facebook Social Plugins Facebook Documentation Good to know : You can specify either appId or admins, but not both."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { facebook : { appId : '12345678' , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"fb:app_id\" content = \"12345678\" />"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { facebook : { admins : '12345678' , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"fb:admins\" content = \"12345678\" />"
                },
                {
                    "type": "p",
                    "text": "If you want to generate multiple fb:admins meta tags you can use array value."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { facebook : { admins : [ '12345678' , '87654321' ] , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta property = \"fb:admins\" content = \"12345678\" /> < meta property = \"fb:admins\" content = \"87654321\" />"
                },
                {
                    "type": "p",
                    "text": "All metadata options should be covered using the built-in support. However, there may be custom metadata tags specific to your site, or brand new metadata tags just released. You can use the other option to render any custom metadata tag."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { other : { custom : 'meta' , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"custom\" content = \"meta\" />"
                },
                {
                    "type": "p",
                    "text": "If you want to generate multiple same key meta tags you can use array value."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { other : { custom : [ 'meta1' , 'meta2' ] , } , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"custom\" content = \"meta1\" /> < meta name = \"custom\" content = \"meta2\" />"
                },
                {
                    "type": "p",
                    "text": "The following metadata types do not currently have built-in support. However, they can still be rendered in the layout or page itself. The <link> element has a number of rel keywords that can be used to hint to the browser that an external resource is likely to be needed. The browser uses this information to apply preloading optimizations depending on the keyword. While the Metadata API doesn't directly support these hints, you can use new ReactDOM methods to safely insert them into the <head> of the document."
                },
                {
                    "type": "code",
                    "code": "'use client' import ReactDOM from 'react-dom' export function PreloadResources () { ReactDOM .preload ( '...' , { as : '...' }) ReactDOM .preconnect ( '...' , { crossOrigin : '...' }) ReactDOM .prefetchDNS ( '...' ) return '...' }"
                },
                {
                    "type": "p",
                    "text": "Start loading a resource early in the page rendering (browser) lifecycle. MDN Docs ."
                },
                {
                    "type": "code",
                    "code": "ReactDOM .preload (href: string , options: { as : string })"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"preload\" href = \"...\" as = \"...\" />"
                },
                {
                    "type": "p",
                    "text": "Preemptively initiate a connection to an origin. MDN Docs ."
                },
                {
                    "type": "code",
                    "code": "ReactDOM .preconnect (href: string , options ?: { crossOrigin? : string })"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"preconnect\" href = \"...\" crossorigin />"
                },
                {
                    "type": "p",
                    "text": "Attempt to resolve a domain name before resources get requested. MDN Docs ."
                },
                {
                    "type": "code",
                    "code": "ReactDOM .prefetchDNS (href: string)"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"dns-prefetch\" href = \"...\" />"
                },
                {
                    "type": "list",
                    "items": [
                        "These methods are currently only supported in Client Components, which are still Server Side Rendered on initial page load.",
                        "Next.js in-built features such as next/font , next/image and next/script automatically handle relevant resource hints."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can add type safety to your metadata by using the Metadata type. If you are using the built-in TypeScript plugin in your IDE, you do not need to manually add the type, but you can still explicitly add it if you want."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : 'Next.js' , }"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export function generateMetadata () : Metadata { return { title : 'Next.js' , } }"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export async function generateMetadata () : Promise < Metadata > { return { title : 'Next.js' , } }"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' type Props = { params : Promise <{ id : string }> searchParams : Promise <{ [key : string ] : string | string [] | undefined }> } export function generateMetadata ({ params , searchParams } : Props ) : Metadata { return { title : 'Next.js' , } } export default function Page ({ params , searchParams } : Props ) {}"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata , ResolvingMetadata } from 'next' export async function generateMetadata ( { params , searchParams } : Props , parent : ResolvingMetadata ) : Promise < Metadata > { return { title : 'Next.js' , } }"
                },
                {
                    "type": "p",
                    "text": "For JavaScript projects, you can use JSDoc to add type safety."
                },
                {
                    "type": "code",
                    "code": "/** @type {import(\"next\").Metadata} */ export const metadata = { title : 'Next.js' , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-sitemaps",
            "title": "Functions: generateSitemaps | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "You can use the generateSitemaps function to generate multiple sitemaps for your application. The generateSitemaps returns an array of objects with an id property. Your generated sitemaps will be available at /.../sitemap/[id].xml . For example, /product/sitemap/1.xml . For example, to split a sitemap using generateSitemaps , return an array of objects with the sitemap id . Then, use the id to generate the unique sitemaps."
                },
                {
                    "type": "code",
                    "code": "import { BASE_URL } from '@/app/lib/constants' export async function generateSitemaps () { // Fetch the total number of product s and calculate the number of sitemaps needed return [{ id : 0 } , { id : 1 } , { id : 2 } , { id : 3 }] } export default async function sitemap ({ id , } : { id : number }) : Promise < MetadataRoute . Sitemap > { // Google's limit is 50,000 URLs per sitemap const start = id * 50000 const end = start + 50000 const product s = await getProducts ( `SELECT id, date FROM product s WHERE id BETWEEN ${ start } AND ${ end } ` ) return product s .map (( product ) => ({ url : ` ${ BASE_URL } / product / ${ product .id } ` , lastModified : product .date , })) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-static-params",
            "title": "Functions: generateStaticParams | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The generateStaticParams function can be used in combination with dynamic route segments to statically generate routes at build time instead of on-demand at request time."
                },
                {
                    "type": "code",
                    "code": "// Return a list of `params` to populate the [slug] dynamic segment export async function generateStaticParams () { const posts = await fetch ( 'https://.../posts' ) .then ((res) => res .json ()) return posts .map ((post) => ({ slug : post .slug , })) } // Multiple versions of this page will be statically generated // using the `params` returned by `generateStaticParams` export default async function Page ({ params }) { const { slug } = await params // ... }"
                },
                {
                    "type": "list",
                    "items": [
                        "You can use the dynamicParams segment config option to control what happens when a dynamic segment is visited that was not generated with generateStaticParams .",
                        "You must return an empty array from generateStaticParams or utilize export const dynamic = 'force-static' in order to revalidate (ISR) paths at runtime .",
                        "During next dev , generateStaticParams will be called when you navigate to a route.",
                        "During next build , generateStaticParams runs before the corresponding Layouts or Pages are generated.",
                        "During revalidation (ISR), generateStaticParams will not be called again.",
                        "generateStaticParams replaces the getStaticPaths function in the Pages Router."
                    ]
                },
                {
                    "type": "p",
                    "text": "If multiple dynamic segments in a route use generateStaticParams , the child generateStaticParams function is executed once for each set of params the parent generates. The params object contains the populated params from the parent generateStaticParams , which can be used to generate the params in a child segment . generateStaticParams should return an array of objects where each object represents the populated dynamic segments of a single route."
                },
                {
                    "type": "list",
                    "items": [
                        "Each property in the object is a dynamic segment to be filled in for the route.",
                        "The properties name is the segment's name, and the properties value is what that segment should be filled in with."
                    ]
                },
                {
                    "type": "code",
                    "code": "export function generateStaticParams () { return [{ id : '1' } , { id : '2' } , { id : '3' }] } // Three versions of this page will be statically generated // using the `params` returned by `generateStaticParams` // - / product /1 // - / product /2 // - / product /3 export default async function Page ({ params , } : { params : Promise <{ id : string }> }) { const { id } = await params // ... }"
                },
                {
                    "type": "code",
                    "code": "export function generateStaticParams () { return [ { category : 'a' , product : '1' } , { category : 'b' , product : '2' } , { category : 'c' , product : '3' } , ] } // Three versions of this page will be statically generated // using the `params` returned by `generateStaticParams` // - / products /a/1 // - / products /b/2 // - / products /c/3 export default async function Page ({ params , } : { params : Promise <{ category : string ; product : string }> }) { const { category , product } = await params // ... }"
                },
                {
                    "type": "code",
                    "code": "export function generateStaticParams () { return [{ slug : [ 'a' , '1' ] } , { slug : [ 'b' , '2' ] } , { slug : [ 'c' , '3' ] }] } // Three versions of this page will be statically generated // using the `params` returned by `generateStaticParams` // - / product /a/1 // - / product /b/2 // - / product /c/3 export default async function Page ({ params , } : { params : Promise <{ slug : string [] }> }) { const { slug } = await params // ... }"
                },
                {
                    "type": "p",
                    "text": "To statically render all paths at build time, supply the full list of paths to generateStaticParams :"
                },
                {
                    "type": "code",
                    "code": "export async function generateStaticParams () { const posts = await fetch ( 'https://.../posts' ) .then ((res) => res .json ()) return posts .map ((post) => ({ slug : post .slug , })) }"
                },
                {
                    "type": "p",
                    "text": "To statically render a subset of paths at build time, and the rest the first time they're visited at runtime, return a partial list of paths:"
                },
                {
                    "type": "code",
                    "code": "export async function generateStaticParams () { const posts = await fetch ( 'https://.../posts' ) .then ((res) => res .json ()) // Render the first 10 posts at build time return posts .slice ( 0 , 10 ) .map ((post) => ({ slug : post .slug , })) }"
                },
                {
                    "type": "p",
                    "text": "Then, by using the dynamicParams segment config option, you can control what happens when a dynamic segment is visited that was not generated with generateStaticParams ."
                },
                {
                    "type": "code",
                    "code": "// All posts besides the top 10 will be a 404 export const dynamicParams = false export async function generateStaticParams () { const posts = await fetch ( 'https://.../posts' ) .then ((res) => res .json ()) const topPosts = posts .slice ( 0 , 10 ) return topPosts .map ((post) => ({ slug : post .slug , })) }"
                },
                {
                    "type": "p",
                    "text": "To statically render all paths the first time they're visited, return an empty array (no paths will be rendered at build time) or utilize export const dynamic = 'force-static' :"
                },
                {
                    "type": "code",
                    "code": "export async function generateStaticParams () { return [] }"
                },
                {
                    "type": "p",
                    "text": "Good to know: You must always return an array from generateStaticParams , even if it's empty. Otherwise, the route will be dynamically rendered."
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'force-static'"
                },
                {
                    "type": "p",
                    "text": "To prevent unspecified paths from being statically rendered at runtime, add the export const dynamicParams = false option in a route segment. When this config option is used, only paths provided by generateStaticParams will be served, and unspecified routes will 404 or match (in the case of catch-all routes ). You can generate params for dynamic segments above the current layout or page, but not below . For example, given the app/products/[category]/[product] route:"
                },
                {
                    "type": "list",
                    "items": [
                        "app/products/[category]/[product]/page.js can generate params for both [category] and [product] .",
                        "app/products/[category]/layout.js can only generate params for [category] ."
                    ]
                },
                {
                    "type": "p",
                    "text": "There are two approaches to generating params for a route with multiple dynamic segments: Generate multiple dynamic segments from the child route segment."
                },
                {
                    "type": "code",
                    "code": "// Generate segments for both [category] and [product] export async function generateStaticParams () { const products = await fetch ( 'https://.../ products ' ) .then ((res) => res .json ()) return products .map ((product) => ({ category : product . category .slug , product : product .id , })) } export default function Page ({ params , } : { params : Promise <{ category : string ; product : string }> }) { // ... }"
                },
                {
                    "type": "p",
                    "text": "Generate the parent segments first and use the result to generate the child segments."
                },
                {
                    "type": "code",
                    "code": "// Generate segments for [category] export async function generateStaticParams () { const products = await fetch ( 'https://.../ products ' ) .then ((res) => res .json ()) return products .map ((product) => ({ category : product . category .slug , })) } export default function Layout ({ params , } : { params : Promise <{ category : string }> }) { // ... }"
                },
                {
                    "type": "p",
                    "text": "A child route segment's generateStaticParams function is executed once for each segment a parent generateStaticParams generates. The child generateStaticParams function can use the params returned from the parent generateStaticParams function to dynamically generate its own segments."
                },
                {
                    "type": "code",
                    "code": "// Generate segments for [product] using the `params` passed from // the parent segment's `generateStaticParams` function export async function generateStaticParams ({ params: { category } , } : { params : { category : string } }) { const products = await fetch ( `https://.../ products ?category= ${ category } ` ) .then ((res) => res .json ()) return products .map ((product) => ({ product : product .id , })) } export default function Page ({ params , } : { params : Promise <{ category : string ; product : string }> }) { // ... }"
                },
                {
                    "type": "p",
                    "text": "Good to know : fetch requests are automatically memoized for the same data across all generate -prefixed functions, Layouts, Pages, and Server Components. React cache can be used if fetch is unavailable."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/generate-viewport",
            "title": "Functions: generateViewport | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "You can customize the initial viewport of the page with the static viewport object or the dynamic generateViewport function."
                },
                {
                    "type": "list",
                    "items": [
                        "The viewport object and generateViewport function exports are only supported in Server Components .",
                        "You cannot export both the viewport object and generateViewport function from the same route segment.",
                        "If you're coming from migrating metadata exports, you can use metadata-to-viewport-export codemod to update your changes."
                    ]
                },
                {
                    "type": "p",
                    "text": "To define the viewport options, export a viewport object from a layout.jsx or page.jsx file."
                },
                {
                    "type": "code",
                    "code": "import type { Viewport } from 'next' export const viewport : Viewport = { themeColor : 'black' , } export default function Page () {}"
                },
                {
                    "type": "p",
                    "text": "generateViewport should return a Viewport object containing one or more viewport fields."
                },
                {
                    "type": "code",
                    "code": "export function generateViewport ({ params }) { return { themeColor : '...' , } }"
                },
                {
                    "type": "list",
                    "items": [
                        "If the viewport doesn't depend on runtime information, it should be defined using the static viewport object rather than generateViewport ."
                    ]
                },
                {
                    "type": "code",
                    "code": "import type { Viewport } from 'next' export const viewport : Viewport = { themeColor : 'black' , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"theme-color\" content = \"black\" />"
                },
                {
                    "type": "code",
                    "code": "import type { Viewport } from 'next' export const viewport : Viewport = { themeColor : [ { media : '(prefers-color-scheme: light)' , color : 'cyan' } , { media : '(prefers-color-scheme: dark)' , color : 'black' } , ] , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"theme-color\" media = \"(prefers-color-scheme: light)\" content = \"cyan\" /> < meta name = \"theme-color\" media = \"(prefers-color-scheme: dark)\" content = \"black\" />"
                },
                {
                    "type": "p",
                    "text": "Good to know : The viewport meta tag is automatically set, and manual configuration is usually unnecessary as the default is sufficient. However, the information is provided for completeness."
                },
                {
                    "type": "code",
                    "code": "import type { Viewport } from 'next' export const viewport : Viewport = { width : 'device-width' , initialScale : 1 , maximumScale : 1 , userScalable : false , // Also supported by less commonly used // interactiveWidget: 'resizes-visual', }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"viewport\" content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />"
                },
                {
                    "type": "code",
                    "code": "import type { Viewport } from 'next' export const viewport : Viewport = { colorScheme : 'dark' , }"
                },
                {
                    "type": "code",
                    "code": "< meta name = \"color-scheme\" content = \"dark\" />"
                },
                {
                    "type": "p",
                    "text": "You can add type safety to your viewport object by using the Viewport type. If you are using the built-in TypeScript plugin in your IDE, you do not need to manually add the type, but you can still explicitly add it if you want."
                },
                {
                    "type": "code",
                    "code": "import type { Viewport } from 'next' export const viewport : Viewport = { themeColor : 'black' , }"
                },
                {
                    "type": "code",
                    "code": "import type { Viewport } from 'next' export function generateViewport () : Viewport { return { themeColor : 'black' , } }"
                },
                {
                    "type": "code",
                    "code": "import type { Viewport } from 'next' type Props = { params : Promise <{ id : string }> searchParams : Promise <{ [key : string ] : string | string [] | undefined }> } export function generateViewport ({ params , searchParams } : Props ) : Viewport { return { themeColor : 'black' , } } export default function Page ({ params , searchParams } : Props ) {}"
                },
                {
                    "type": "p",
                    "text": "For JavaScript projects, you can use JSDoc to add type safety."
                },
                {
                    "type": "code",
                    "code": "/** @type {import(\"next\").Viewport} */ export const viewport = { themeColor : 'black' , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/headers",
            "title": "Functions: headers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "headers is an async function that allows you to read the HTTP incoming request headers from a Server Component ."
                },
                {
                    "type": "code",
                    "code": "import { headers } from 'next/headers' export default async function Page () { const headersList = await headers () const userAgent = headersList .get ( 'user-agent' ) }"
                },
                {
                    "type": "p",
                    "text": "headers does not take any parameters. headers returns a read-only Web Headers object."
                },
                {
                    "type": "list",
                    "items": [
                        "Headers.entries() : Returns an iterator allowing to go through all key/value pairs contained in this object.",
                        "Headers.forEach() : Executes a provided function once for each key/value pair in this Headers object.",
                        "Headers.get() : Returns a String sequence of all the values of a header within a Headers object with a given name.",
                        "Headers.has() : Returns a boolean stating whether a Headers object contains a certain header.",
                        "Headers.keys() : Returns an iterator allowing you to go through all keys of the key/value pairs contained in this object.",
                        "Headers.values() : Returns an iterator allowing you to go through all values of the key/value pairs contained in this object."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "headers is an asynchronous function that returns a promise. You must use async/await or React's use function. In version 14 and earlier, headers was a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "In version 14 and earlier, headers was a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "Since headers is read-only, you cannot set or delete the outgoing request headers.",
                        "headers is a Dynamic API whose returned values cannot be known ahead of time. Using it in will opt a route into dynamic rendering ."
                    ]
                },
                {
                    "type": "code",
                    "code": "import { headers } from 'next/headers' export default async function Page () { const authorization = ( await headers ()) .get ( 'authorization' ) const res = await fetch ( '...' , { headers : { authorization } , // Forward the authorization header }) const user = await res .json () return < h1 >{ user .name}</ h1 > }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/image-response",
            "title": "Functions: ImageResponse | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The ImageResponse constructor allows you to generate dynamic images using JSX and CSS. This is useful for generating social media images such as Open Graph images, Twitter cards, and more. The following options are available for ImageResponse :"
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og' new ImageResponse ( element: ReactElement , options: { width? : number = 1200 height ?: number = 630 emoji ?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji' , fonts? : { name : string , data : ArrayBuffer , weight : number , style : 'normal' | 'italic' }[] debug ?: boolean = false // Options that will be passed to the HTTP response status ?: number = 200 statusText ?: string headers ?: Record < string , string> } , )"
                },
                {
                    "type": "p",
                    "text": "Please refer to Satori’s documentation for a list of supported HTML and CSS features."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/next-request",
            "title": "Functions: NextRequest | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "NextRequest extends the Web Request API with additional convenience methods. Read or mutate the Set-Cookie header of the request. Given a name, set a cookie with the given value on the request."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home // Set a cookie to hide the banner // request will have a `Set-Cookie:show-banner=false;path=/home` header request . cookies .set ( 'show-banner' , 'false' )"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, return the value of the cookie. If the cookie is not found, undefined is returned. If multiple cookies are found, the first one is returned."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home // { name: 'show-banner', value: 'false', Path: '/home' } request . cookies .get ( 'show-banner' )"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, return the values of the cookie. If no name is given, return all cookies on the request."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home // [ //   { name: 'experiments', value: 'new-pricing-page', Path: '/home' }, //   { name: 'experiments', value: 'winter-launch', Path: '/home' }, // ] request . cookies .getAll ( 'experiments' ) // Alternatively, get all cookies for the request request . cookies .getAll ()"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, delete the cookie from the request."
                },
                {
                    "type": "code",
                    "code": "// Returns true for deleted, false is nothing is deleted request . cookies .delete ( 'experiments' )"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, return true if the cookie exists on the request."
                },
                {
                    "type": "code",
                    "code": "// Returns true if cookie exists, false if it does not request . cookies .has ( 'experiments' )"
                },
                {
                    "type": "p",
                    "text": "Remove the Set-Cookie header from the request."
                },
                {
                    "type": "code",
                    "code": "request . cookies .clear ()"
                },
                {
                    "type": "p",
                    "text": "Extends the native URL API with additional convenience methods, including Next.js specific properties."
                },
                {
                    "type": "code",
                    "code": "// Given a request to /home, pathname is /home request . nextUrl .pathname // Given a request to /home?name=lee, searchParams is { 'name': 'lee' } request . nextUrl .searchParams"
                },
                {
                    "type": "p",
                    "text": "Note: The internationalization properties from the Pages Router are not available for usage in the App Router. Learn more about internationalization with the App Router ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/next-response",
            "title": "Functions: NextResponse | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "NextResponse extends the Web Response API with additional convenience methods. Read or mutate the Set-Cookie header of the response. Given a name, set a cookie with the given value on the response."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home let response = NextResponse .next () // Set a cookie to hide the banner response . cookies .set ( 'show-banner' , 'false' ) // Response will have a `Set-Cookie:show-banner=false;path=/home` header return response"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, return the value of the cookie. If the cookie is not found, undefined is returned. If multiple cookies are found, the first one is returned."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home let response = NextResponse .next () // { name: 'show-banner', value: 'false', Path: '/home' } response . cookies .get ( 'show-banner' )"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, return the values of the cookie. If no name is given, return all cookies on the response."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home let response = NextResponse .next () // [ //   { name: 'experiments', value: 'new-pricing-page', Path: '/home' }, //   { name: 'experiments', value: 'winter-launch', Path: '/home' }, // ] response . cookies .getAll ( 'experiments' ) // Alternatively, get all cookies for the response response . cookies .getAll ()"
                },
                {
                    "type": "p",
                    "text": "Given a cookie name, delete the cookie from the response."
                },
                {
                    "type": "code",
                    "code": "// Given incoming request /home let response = NextResponse .next () // Returns true for deleted, false is nothing is deleted response . cookies .delete ( 'experiments' )"
                },
                {
                    "type": "p",
                    "text": "Produce a response with the given JSON body."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' export async function GET (request : Request ) { return NextResponse .json ({ error : 'Internal Server Error' } , { status : 500 }) }"
                },
                {
                    "type": "p",
                    "text": "Produce a response that redirects to a URL ."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' return NextResponse .redirect ( new URL ( '/new' , request .url))"
                },
                {
                    "type": "p",
                    "text": "The URL can be created and modified before being used in the NextResponse.redirect() method. For example, you can use the request.nextUrl property to get the current URL, and then modify it to redirect to a different URL."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' // Given an incoming request... const loginUrl = new URL ( '/login' , request .url) // Add ?from=/incoming-url to the /login URL loginUrl . searchParams .set ( 'from' , request . nextUrl .pathname) // And redirect to the new URL return NextResponse .redirect (loginUrl)"
                },
                {
                    "type": "p",
                    "text": "Produce a response that rewrites (proxies) the given URL while preserving the original URL."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' // Incoming request: /about, browser shows /about // Rewritten request: /proxy, browser shows /about return NextResponse .rewrite ( new URL ( '/proxy' , request .url))"
                },
                {
                    "type": "p",
                    "text": "The next() method is useful for Middleware, as it allows you to return early and continue routing."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' return NextResponse .next ()"
                },
                {
                    "type": "p",
                    "text": "You can also forward headers when producing the response:"
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' // Given an incoming request... const newHeaders = new Headers ( request .headers) // Add a new header newHeaders .set ( 'x-version' , '123' ) // And produce a response with the new headers return NextResponse .next ({ request : { // New request headers headers : newHeaders , } , })"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/not-found",
            "title": "Functions: notFound | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The notFound function allows you to render the not-found file within a route segment as well as inject a <meta name=\"robots\" content=\"noindex\" /> tag. Invoking the notFound() function throws a NEXT_NOT_FOUND error and terminates rendering of the route segment in which it was thrown. Specifying a not-found file allows you to gracefully handle such errors by rendering a Not Found UI within the segment."
                },
                {
                    "type": "code",
                    "code": "import { notFound } from 'next/navigation' async function fetchUser (id) { const res = await fetch ( 'https://...' ) if ( ! res .ok) return undefined return res .json () } export default async function Profile ({ params }) { const user = await fetchUser ( params .id) if ( ! user ) { notFound () } // ... }"
                },
                {
                    "type": "p",
                    "text": "Good to know : notFound() does not require you to use return notFound() due to using the TypeScript never type."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/permanentRedirect",
            "title": "Functions: permanentRedirect | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The permanentRedirect function allows you to redirect the user to another URL. permanentRedirect can be used in Server Components, Client Components, Route Handlers , and Server Actions . When used in a streaming context, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 308 (Permanent) HTTP redirect response to the caller. If a resource doesn't exist, you can use the notFound function instead. Good to know : If you prefer to return a 307 (Temporary) HTTP redirect instead of 308 (Permanent), you can use the redirect function instead. The permanentRedirect function accepts two arguments:"
                },
                {
                    "type": "code",
                    "code": "permanentRedirect (path , type)"
                },
                {
                    "type": "p",
                    "text": "By default, permanentRedirect will use push (adding a new entry to the browser history stack) in Server Actions and replace (replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying the type parameter. The type parameter has no effect when used in Server Components. permanentRedirect does not return a value. Invoking the permanentRedirect() function throws a NEXT_REDIRECT error and terminates rendering of the route segment in which it was thrown."
                },
                {
                    "type": "code",
                    "code": "import { permanentRedirect } from 'next/navigation' async function fetchTeam (id) { const res = await fetch ( 'https://...' ) if ( ! res .ok) return undefined return res .json () } export default async function Profile ({ params }) { const team = await fetchTeam ( params .id) if ( ! team ) { permanentRedirect ( '/login' ) } // ... }"
                },
                {
                    "type": "p",
                    "text": "Good to know : permanentRedirect does not require you to use return permanentRedirect() as it uses the TypeScript never type."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/redirect",
            "title": "Functions: redirect | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The redirect function allows you to redirect the user to another URL. redirect can be used in Server Components , Route Handlers , and Server Actions . When used in a streaming context , this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 307 HTTP redirect response to the caller. If a resource doesn't exist, you can use the notFound function instead."
                },
                {
                    "type": "list",
                    "items": [
                        "In Server Actions and Route Handlers, redirect should be called after the try/catch block.",
                        "If you prefer to return a 308 (Permanent) HTTP redirect instead of 307 (Temporary), you can use the permanentRedirect function instead."
                    ]
                },
                {
                    "type": "p",
                    "text": "The redirect function accepts two arguments:"
                },
                {
                    "type": "code",
                    "code": "redirect (path , type)"
                },
                {
                    "type": "p",
                    "text": "By default, redirect will use push (adding a new entry to the browser history stack) in Server Actions and replace (replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying the type parameter. The type parameter has no effect when used in Server Components. redirect does not return a value. Invoking the redirect() function throws a NEXT_REDIRECT error and terminates rendering of the route segment in which it was thrown."
                },
                {
                    "type": "code",
                    "code": "import { redirect } from 'next/navigation' async function fetchTeam (id : string ) { const res = await fetch ( 'https://...' ) if ( ! res .ok) return undefined return res .json () } export default async function Profile ({ params , } : { params : Promise <{ id : string }> }) { const { id } = await params const team = await fetchTeam (id) if ( ! team ) { redirect ( '/login' ) } // ... }"
                },
                {
                    "type": "p",
                    "text": "Good to know : redirect does not require you to use return redirect() as it uses the TypeScript never type. redirect can be used in a Client Component through a Server Action. If you need to use an event handler to redirect the user, you can use the useRouter hook."
                },
                {
                    "type": "code",
                    "code": "'use client' import { navigate } from './actions' export function ClientRedirect () { return ( < form action = {navigate}> < input type = \"text\" name = \"id\" /> < button >Submit</ button > </ form > ) }"
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' export async function navigate (data : FormData ) { redirect ( `/posts/ ${ data .get ( 'id' ) } ` ) }"
                },
                {
                    "type": "p",
                    "text": "When using redirect() you may notice that the status codes used are 307 for a temporary redirect, and 308 for a permanent redirect. While traditionally a 302 was used for a temporary redirect, and a 301 for a permanent redirect, many browsers changed the request method of the redirect, from a POST to GET request when using a 302 , regardless of the origins request method. Taking the following example of a redirect from /users to /people , if you make a POST request to /users to create a new user, and are conforming to a 302 temporary redirect, the request method will be changed from a POST to a GET request. This doesn't make sense, as to create a new user, you should be making a POST request to /people , and not a GET request. The introduction of the 307 status code means that the request method is preserved as POST ."
                },
                {
                    "type": "list",
                    "items": [
                        "302 - Temporary redirect, will change the request method from POST to GET",
                        "307 - Temporary redirect, will preserve the request method as POST"
                    ]
                },
                {
                    "type": "p",
                    "text": "The redirect() method uses a 307 by default, instead of a 302 temporary redirect, meaning your requests will always be preserved as POST requests."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/revalidatePath",
            "title": "Functions: revalidatePath | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "revalidatePath allows you to purge cached data on-demand for a specific path."
                },
                {
                    "type": "list",
                    "items": [
                        "revalidatePath is available in both Node.js and Edge runtimes .",
                        "revalidatePath only invalidates the cache when the included path is next visited. This means calling revalidatePath with a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited.",
                        "Currently, revalidatePath invalidates all the routes in the client-side Router Cache when used in a server action. This behavior is temporary and will be updated in the future to apply only to the specific path.",
                        "Using revalidatePath invalidates only the specific path in the server-side Route Cache ."
                    ]
                },
                {
                    "type": "code",
                    "code": "revalidatePath (path: string , type ?: 'page' | 'layout' ): void ;"
                },
                {
                    "type": "list",
                    "items": [
                        "path : Either a string representing the filesystem path associated with the data you want to revalidate (for example, /product/[slug]/page ), or the literal route segment (for example, /product/123 ). Must be less than 1024 characters. This value is case-sensitive.",
                        "type : (optional) 'page' or 'layout' string to change the type of path to revalidate. If path contains a dynamic segment (for example, /product/[slug]/page ), this parameter is required. If path refers to the literal route segment, e.g., /product/1 for a dynamic page (e.g., /product/[slug]/page ), you should not provide type ."
                    ]
                },
                {
                    "type": "p",
                    "text": "revalidatePath does not return a value."
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' revalidatePath ( '/blog/post-1' )"
                },
                {
                    "type": "p",
                    "text": "This will revalidate one specific URL on the next page visit."
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' revalidatePath ( '/blog/[slug]' , 'page' ) // or with route groups revalidatePath ( '/(main)/blog/[slug]' , 'page' )"
                },
                {
                    "type": "p",
                    "text": "This will revalidate any URL that matches the provided page file on the next page visit. This will not invalidate pages beneath the specific page. For example, /blog/[slug] won't invalidate /blog/[slug]/[author] ."
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' revalidatePath ( '/blog/[slug]' , 'layout' ) // or with route groups revalidatePath ( '/(main)/post/[slug]' , 'layout' )"
                },
                {
                    "type": "p",
                    "text": "This will revalidate any URL that matches the provided layout file on the next page visit. This will cause pages beneath with the same layout to revalidate on the next visit. For example, in the above case, /blog/[slug]/[another] would also revalidate on the next visit."
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' revalidatePath ( '/' , 'layout' )"
                },
                {
                    "type": "p",
                    "text": "This will purge the Client-side Router Cache, and revalidate the Data Cache on the next page visit."
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidatePath } from 'next/cache' export default async function submit () { await submitForm () revalidatePath ( '/' ) }"
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' import type { NextRequest } from 'next/server' export async function GET (request : NextRequest ) { const path = request . nextUrl . searchParams .get ( 'path' ) if (path) { revalidatePath (path) return Response .json ({ revalidated : true , now : Date .now () }) } return Response .json ({ revalidated : false , now : Date .now () , message : 'Missing path to revalidate' , }) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/revalidateTag",
            "title": "Functions: revalidateTag | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "revalidateTag allows you to purge cached data on-demand for a specific cache tag."
                },
                {
                    "type": "list",
                    "items": [
                        "revalidateTag is available in both Node.js and Edge runtimes .",
                        "revalidateTag only invalidates the cache when the path is next visited. This means calling revalidateTag with a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited."
                    ]
                },
                {
                    "type": "code",
                    "code": "revalidateTag (tag: string): void ;"
                },
                {
                    "type": "list",
                    "items": [
                        "tag : A string representing the cache tag associated with the data you want to revalidate. Must be less than or equal to 256 characters. This value is case-sensitive."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can add tags to fetch as follows:"
                },
                {
                    "type": "code",
                    "code": "fetch (url , { next : { tags : [ ... ] } });"
                },
                {
                    "type": "p",
                    "text": "revalidateTag does not return a value."
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidateTag } from 'next/cache' export default async function submit () { await addPost () revalidateTag ( 'posts' ) }"
                },
                {
                    "type": "code",
                    "code": "import type { NextRequest } from 'next/server' import { revalidateTag } from 'next/cache' export async function GET (request : NextRequest ) { const tag = request . nextUrl . searchParams .get ( 'tag' ) revalidateTag (tag) return Response .json ({ revalidated : true , now : Date .now () }) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/unauthorized",
            "title": "Functions: unauthorized | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The unauthorized function throws an error that renders a Next.js 401 error page. It's useful for handling authorization errors in your application. You can customize the UI using the unauthorized.js file . To start using unauthorized , enable the experimental authInterrupts configuration option in your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { authInterrupts : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "unauthorized can be invoked in Server Components , Server Actions , and Route Handlers ."
                },
                {
                    "type": "code",
                    "code": "import { verifySession } from '@/app/lib/dal' import { unauthorized } from 'next/navigation' export default async function DashboardPage () { const session = await verifySession () if ( ! session) { unauthorized () } // Render the dashboard for authenticated users return ( < main > < h1 >Welcome to the Dashboard</ h1 > < p >Hi, { session . user .name}.</ p > </ main > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "The unauthorized function cannot be called in the root layout ."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can use unauthorized function to display the unauthorized.js file with a login UI."
                },
                {
                    "type": "code",
                    "code": "import { verifySession } from '@/app/lib/dal' import { unauthorized } from 'next/navigation' export default async function DashboardPage () { const session = await verifySession () if ( ! session) { unauthorized () } return < div >Dashboard</ div > }"
                },
                {
                    "type": "code",
                    "code": "import Login from '@/app/components/Login' export default function UnauthorizedPage () { return ( < main > < h1 >401 - Unauthorized</ h1 > < p >Please log in to access this page.</ p > < Login /> </ main > ) }"
                },
                {
                    "type": "p",
                    "text": "You can invoke unauthorized in Server Actions to ensure only authenticated users can perform specific mutations."
                },
                {
                    "type": "code",
                    "code": "'use server' import { verifySession } from '@/app/lib/dal' import { unauthorized } from 'next/navigation' import db from '@/app/lib/db' export async function updateProfile (data : FormData ) { const session = await verifySession () // If the user is not authenticated, return a 401 if ( ! session) { unauthorized () } // Proceed with mutation // ... }"
                },
                {
                    "type": "p",
                    "text": "You can use unauthorized in Route Handlers to ensure only authenticated users can access the endpoint."
                },
                {
                    "type": "code",
                    "code": "import { NextRequest , NextResponse } from 'next/server' import { verifySession } from '@/app/lib/dal' import { unauthorized } from 'next/navigation' export async function GET (req : NextRequest ) : Promise < NextResponse > { // Verify the user's session const session = await verifySession () // If no session exists, return a 401 and render unauthorized.tsx if ( ! session) { unauthorized () } // Fetch data // ... }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_after",
            "title": "Functions: after | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "after allows you to schedule work to be executed after a response (or prerender) is finished. This is useful for tasks and other side effects that should not block the response, such as logging and analytics. It can be used in Server Components (including generateMetadata ), Server Actions , Route Handlers , and Middleware . The function accepts a callback that will be executed after the response (or prerender) is finished:"
                },
                {
                    "type": "code",
                    "code": "import { after } from 'next/server' // Custom logging function import { log } from '@/app/utils' export default function Layout ({ children } : { children : React . ReactNode }) { after (() => { // Execute after the layout is rendered and sent to the user log () }) return <>{children}</> }"
                },
                {
                    "type": "p",
                    "text": "Good to know: after is not a Dynamic API and calling it does not cause a route to become dynamic. If it's used within a static page, the callback will execute at build time, or whenever a page is revalidated."
                },
                {
                    "type": "list",
                    "items": [
                        "A callback function which will be executed after the response (or prerender) is finished."
                    ]
                },
                {
                    "type": "p",
                    "text": "after will run for the platform's default or configured max duration of your route. If your platform supports it, you can configure the timeout limit using the maxDuration route segment config."
                },
                {
                    "type": "list",
                    "items": [
                        "after will be executed even if the response didn't complete successfully. Including when an error is thrown or when notFound or redirect is called.",
                        "You can use React cache to deduplicate functions called inside after .",
                        "after can be nested inside other after calls, for example, you can create utility functions that wrap after calls to add additional functionality."
                    ]
                },
                {
                    "type": "p",
                    "text": "The use case for after is to process secondary tasks without blocking the primary response. It's similar to using the platform's waitUntil() or removing await from a promise, but with the following differences:"
                },
                {
                    "type": "list",
                    "items": [
                        "waitUntil() : accepts a promise and enqueues a task to be executed during the lifecycle of the request, whereas after accepts a callback that will be executed after the response is finished.",
                        "Removing await : starts executing during the response, which uses resources. It's also not reliable in serverless environments as the function stops computation immediately after the response is sent, potentially interrupting the task."
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend using after as it has been designed to consider other Next.js APIs and contexts. You can use request APIs such as cookies and headers inside after in Server Actions and Route Handlers . This is useful for logging activity after a mutation. For example:"
                },
                {
                    "type": "code",
                    "code": "import { after } from 'next/server' import { cookies , headers } from 'next/headers' import { logUserAction } from '@/app/utils' export async function POST (request : Request ) { // Perform mutation // ... // Log user activity for analytics after ( async () => { const userAgent = ( await headers () .get ( 'user-agent' )) || 'unknown' const sessionCookie = ( await cookies () .get ( 'session-id' ))?.value || 'anonymous' logUserAction ({ sessionCookie , userAgent }) }) return new Response ( JSON .stringify ({ status : 'success' }) , { status : 200 , headers : { 'Content-Type' : 'application/json' } , }) }"
                },
                {
                    "type": "p",
                    "text": "However, you cannot use these request APIs inside after in Server Components . This is because Next.js needs to know which part of the tree access the request APIs to support Partial Prerendering , but after runs after React's rendering lifecycle."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_cache",
            "title": "Functions: unstable_cache | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "In version 15, we recommend using the use cache directive instead. unstable_cache allows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests."
                },
                {
                    "type": "code",
                    "code": "import { getUser } from './data' ; import { unstable_cache } from 'next/cache' ; const getCachedUser = unstable_cache ( async (id) => getUser (id) , [ 'my-app-user' ] ); export default async function Component ({ userID }) { const user = await getCachedUser (userID); ... }"
                },
                {
                    "type": "list",
                    "items": [
                        "Accessing dynamic data sources such as headers or cookies inside a cache scope is not supported. If you need this data inside a cached function use headers outside of the cached function and pass the required dynamic data in as an argument.",
                        "This API uses Next.js' built-in Data Cache to persist the result across requests and deployments."
                    ]
                },
                {
                    "type": "p",
                    "text": "Warning : This API is unstable and may change in the future. We will provide migration documentation and codemods, if needed, as this API stabilizes."
                },
                {
                    "type": "code",
                    "code": "const data = unstable_cache (fetchData , keyParts , options)()"
                },
                {
                    "type": "list",
                    "items": [
                        "fetchData : This is an asynchronous function that fetches the data you want to cache. It must be a function that returns a Promise .",
                        "keyParts : This is an extra array of keys that further adds identification to the cache. By default, unstable_cache already uses the arguments and the stringified version of your function as the cache key. It is optional in most cases; the only time you need to use it is when you use external variables without passing them as parameters. However, it is important to add closures used within the function if you do not pass them as parameters.",
                        "options : This is an object that controls how the cache behaves. It can contain the following properties: tags : An array of tags that can be used to control cache invalidation. Next.js will not use this to uniquely identify the function. revalidate : The number of seconds after which the cache should be revalidated. Omit or pass false to cache indefinitely or until matching revalidateTag() or revalidatePath() methods are called.",
                        "tags : An array of tags that can be used to control cache invalidation. Next.js will not use this to uniquely identify the function.",
                        "revalidate : The number of seconds after which the cache should be revalidated. Omit or pass false to cache indefinitely or until matching revalidateTag() or revalidatePath() methods are called."
                    ]
                },
                {
                    "type": "p",
                    "text": "unstable_cache returns a function that when invoked, returns a Promise that resolves to the cached data. If the data is not in the cache, the provided function will be invoked, and its result will be cached and returned."
                },
                {
                    "type": "code",
                    "code": "import { unstable_cache } from 'next/cache' export default async function Page ({ params } : { params : { userId : string } }) { const getCachedUser = unstable_cache ( async () => { return { id : params .userId } } , [ params .userId] , // add the user ID to the cache key { tags : [ 'users' ] , revalidate : 60 , } ) //... }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath",
            "title": "Functions: revalidatePath | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "revalidatePath allows you to purge cached data on-demand for a specific path."
                },
                {
                    "type": "list",
                    "items": [
                        "revalidatePath is available in both Node.js and Edge runtimes .",
                        "revalidatePath only invalidates the cache when the included path is next visited. This means calling revalidatePath with a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited.",
                        "Currently, revalidatePath invalidates all the routes in the client-side Router Cache when used in a server action. This behavior is temporary and will be updated in the future to apply only to the specific path.",
                        "Using revalidatePath invalidates only the specific path in the server-side Route Cache ."
                    ]
                },
                {
                    "type": "code",
                    "code": "revalidatePath (path: string , type ?: 'page' | 'layout' ): void ;"
                },
                {
                    "type": "list",
                    "items": [
                        "path : Either a string representing the filesystem path associated with the data you want to revalidate (for example, /product/[slug]/page ), or the literal route segment (for example, /product/123 ). Must be less than 1024 characters. This value is case-sensitive.",
                        "type : (optional) 'page' or 'layout' string to change the type of path to revalidate. If path contains a dynamic segment (for example, /product/[slug]/page ), this parameter is required. If path refers to the literal route segment, e.g., /product/1 for a dynamic page (e.g., /product/[slug]/page ), you should not provide type ."
                    ]
                },
                {
                    "type": "p",
                    "text": "revalidatePath does not return a value."
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' revalidatePath ( '/blog/post-1' )"
                },
                {
                    "type": "p",
                    "text": "This will revalidate one specific URL on the next page visit."
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' revalidatePath ( '/blog/[slug]' , 'page' ) // or with route groups revalidatePath ( '/(main)/blog/[slug]' , 'page' )"
                },
                {
                    "type": "p",
                    "text": "This will revalidate any URL that matches the provided page file on the next page visit. This will not invalidate pages beneath the specific page. For example, /blog/[slug] won't invalidate /blog/[slug]/[author] ."
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' revalidatePath ( '/blog/[slug]' , 'layout' ) // or with route groups revalidatePath ( '/(main)/post/[slug]' , 'layout' )"
                },
                {
                    "type": "p",
                    "text": "This will revalidate any URL that matches the provided layout file on the next page visit. This will cause pages beneath with the same layout to revalidate on the next visit. For example, in the above case, /blog/[slug]/[another] would also revalidate on the next visit."
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' revalidatePath ( '/' , 'layout' )"
                },
                {
                    "type": "p",
                    "text": "This will purge the Client-side Router Cache, and revalidate the Data Cache on the next page visit."
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidatePath } from 'next/cache' export default async function submit () { await submitForm () revalidatePath ( '/' ) }"
                },
                {
                    "type": "code",
                    "code": "import { revalidatePath } from 'next/cache' import type { NextRequest } from 'next/server' export async function GET (request : NextRequest ) { const path = request . nextUrl . searchParams .get ( 'path' ) if (path) { revalidatePath (path) return Response .json ({ revalidated : true , now : Date .now () }) } return Response .json ({ revalidated : false , now : Date .now () , message : 'Missing path to revalidate' , }) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_expireTag",
            "title": "Functions: revalidateTag | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "revalidateTag allows you to purge cached data on-demand for a specific cache tag."
                },
                {
                    "type": "list",
                    "items": [
                        "revalidateTag is available in both Node.js and Edge runtimes .",
                        "revalidateTag only invalidates the cache when the path is next visited. This means calling revalidateTag with a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited."
                    ]
                },
                {
                    "type": "code",
                    "code": "revalidateTag (tag: string): void ;"
                },
                {
                    "type": "list",
                    "items": [
                        "tag : A string representing the cache tag associated with the data you want to revalidate. Must be less than or equal to 256 characters. This value is case-sensitive."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can add tags to fetch as follows:"
                },
                {
                    "type": "code",
                    "code": "fetch (url , { next : { tags : [ ... ] } });"
                },
                {
                    "type": "p",
                    "text": "revalidateTag does not return a value."
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidateTag } from 'next/cache' export default async function submit () { await addPost () revalidateTag ( 'posts' ) }"
                },
                {
                    "type": "code",
                    "code": "import type { NextRequest } from 'next/server' import { revalidateTag } from 'next/cache' export async function GET (request : NextRequest ) { const tag = request . nextUrl . searchParams .get ( 'tag' ) revalidateTag (tag) return Response .json ({ revalidated : true , now : Date .now () }) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_noStore",
            "title": "Functions: unstable_noStore | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "In version 15, we recommend using connection instead of unstable_noStore . unstable_noStore can be used to declaratively opt out of static rendering and indicate a particular component should not be cached."
                },
                {
                    "type": "code",
                    "code": "import { unstable_noStore as noStore } from 'next/cache' ; export default async function ServerComponent () { noStore (); const result = await db .query ( ... ); ... }"
                },
                {
                    "type": "list",
                    "items": [
                        "unstable_noStore is equivalent to cache: 'no-store' on a fetch",
                        "unstable_noStore is preferred over export const dynamic = 'force-dynamic' as it is more granular and can be used on a per-component basis"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Using unstable_noStore inside unstable_cache will not opt out of static generation. Instead, it will defer to the cache configuration to determine whether to cache the result or not."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you prefer not to pass additional options to fetch , like cache: 'no-store' , next: { revalidate: 0 } or in cases where fetch is not available, you can use noStore() as a replacement for all of these use cases."
                },
                {
                    "type": "code",
                    "code": "import { unstable_noStore as noStore } from 'next/cache' ; export default async function ServerComponent () { noStore (); const result = await db .query ( ... ); ... }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow",
            "title": "Functions: unstable_rethrow | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "unstable_rethrow can be used to avoid catching internal errors thrown by Next.js when attempting to handle errors thrown in your application code. For example, calling the notFound function will throw an internal Next.js error and render the not-found.js component. However, if used inside a try/catch block, the error will be caught, preventing not-found.js from rendering:"
                },
                {
                    "type": "code",
                    "code": "import { notFound } from 'next/navigation' export default async function Page () { try { const post = await fetch ( 'https://.../posts/1' ) .then ((res) => { if ( res .status === 404 ) notFound () if ( ! res .ok) throw new Error ( res .statusText) return res .json () }) } catch (err) { console .error (err) } }"
                },
                {
                    "type": "p",
                    "text": "You can use unstable_rethrow API to re-throw the internal error and continue with the expected behavior:"
                },
                {
                    "type": "code",
                    "code": "import { notFound , unstable_rethrow } from 'next/navigation' export default async function Page () { try { const post = await fetch ( 'https://.../posts/1' ) .then ((res) => { if ( res .status === 404 ) notFound () if ( ! res .ok) throw new Error ( res .statusText) return res .json () }) } catch (err) { unstable_rethrow (err) console .error (err) } }"
                },
                {
                    "type": "p",
                    "text": "The following Next.js APIs rely on throwing an error which should be rethrown and handled by Next.js itself:"
                },
                {
                    "type": "list",
                    "items": [
                        "notFound()",
                        "redirect()",
                        "permanentRedirect()"
                    ]
                },
                {
                    "type": "p",
                    "text": "If a route segment is marked to throw an error unless it's static, a Dynamic API call will also throw an error that should similarly not be caught by the developer. Note that Partial Prerendering (PPR) affects this behavior as well. These APIs are:"
                },
                {
                    "type": "list",
                    "items": [
                        "cookies",
                        "headers",
                        "searchParams",
                        "fetch(..., { cache: 'no-store' })",
                        "fetch(..., { next: { revalidate: 0 } })"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "This method should be called at the top of the catch block, passing the error object as its only argument. It can also be used within a .catch handler of a promise.",
                        "If you ensure that your calls to APIs that throw are not wrapped in a try/catch then you don't need to use unstable_rethrow",
                        "Any resource cleanup (like clearing intervals, timers, etc) would have to either happen prior to the call to unstable_rethrow or within a finally block."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-params",
            "title": "Functions: useParams | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "useParams is a Client Component hook that lets you read a route's dynamic params filled in by the current URL."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useParams } from 'next/navigation' export default function ExampleClientComponent () { const params = useParams <{ tag : string ; item : string }>() // Route -> /shop/[tag]/[item] // URL -> /shop/shoes/nike-air-max-97 // `params` -> { tag: 'shoes', item: 'nike-air-max-97' } console .log (params) return '...' }"
                },
                {
                    "type": "code",
                    "code": "const params = useParams ()"
                },
                {
                    "type": "p",
                    "text": "useParams does not take any parameters. useParams returns an object containing the current route's filled in dynamic parameters ."
                },
                {
                    "type": "list",
                    "items": [
                        "Each property in the object is an active dynamic segment.",
                        "The properties name is the segment's name, and the properties value is what the segment is filled in with.",
                        "The properties value will either be a string or array of string 's depending on the type of dynamic segment .",
                        "If the route contains no dynamic parameters, useParams returns an empty object.",
                        "If used in Pages Router, useParams will return null on the initial render and updates with properties following the rules above once the router is ready."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-pathname",
            "title": "Functions: usePathname | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "usePathname is a Client Component hook that lets you read the current URL's pathname ."
                },
                {
                    "type": "code",
                    "code": "'use client' import { usePathname } from 'next/navigation' export default function ExampleClientComponent () { const pathname = usePathname () return < p >Current pathname: {pathname}</ p > }"
                },
                {
                    "type": "p",
                    "text": "usePathname intentionally requires using a Client Component . It's important to note Client Components are not a de-optimization. They are an integral part of the Server Components architecture. For example, a Client Component with usePathname will be rendered into HTML on the initial page load. When navigating to a new route, this component does not need to be re-fetched. Instead, the component is downloaded once (in the client JavaScript bundle), and re-renders based on the current state."
                },
                {
                    "type": "list",
                    "items": [
                        "Reading the current URL from a Server Component is not supported. This design is intentional to support layout state being preserved across page navigations.",
                        "Compatibility mode: usePathname can return null when a fallback route is being rendered or when a pages directory page has been automatically statically optimized by Next.js and the router is not ready. When using usePathname with rewrites in next.config or Middleware , useState and useEffect must also be used in order to avoid hydration mismatch errors. See the rewrites example for more information. Next.js will automatically update your types if it detects both an app and pages directory in your project.",
                        "usePathname can return null when a fallback route is being rendered or when a pages directory page has been automatically statically optimized by Next.js and the router is not ready.",
                        "When using usePathname with rewrites in next.config or Middleware , useState and useEffect must also be used in order to avoid hydration mismatch errors. See the rewrites example for more information.",
                        "Next.js will automatically update your types if it detects both an app and pages directory in your project."
                    ]
                },
                {
                    "type": "code",
                    "code": "const pathname = usePathname ()"
                },
                {
                    "type": "p",
                    "text": "usePathname does not take any parameters. usePathname returns a string of the current URL's pathname. For example:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { usePathname , useSearchParams } from 'next/navigation' function ExampleClientComponent () { const pathname = usePathname () const searchParams = useSearchParams () useEffect (() => { // Do something here... } , [pathname , searchParams]) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals",
            "title": "Functions: useReportWebVitals | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The useReportWebVitals hook allows you to report Core Web Vitals , and can be used in combination with your analytics service."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useReportWebVitals } from 'next/web-vitals' export function WebVitals () { useReportWebVitals ((metric) => { console .log (metric) }) return null }"
                },
                {
                    "type": "code",
                    "code": "import { WebVitals } from './_components/web-vitals' export default function Layout ({ children }) { return ( < html > < body > < WebVitals /> {children} </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Since the useReportWebVitals hook requires the \"use client\" directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to the WebVitals component. The metric object passed as the hook's argument consists of a number of properties:"
                },
                {
                    "type": "list",
                    "items": [
                        "id : Unique identifier for the metric in the context of the current page load",
                        "name : The name of the performance metric. Possible values include names of Web Vitals metrics (TTFB, FCP, LCP, FID, CLS) specific to a web application.",
                        "delta : The difference between the current value and the previous value of the metric. The value is typically in milliseconds and represents the change in the metric's value over time.",
                        "entries : An array of Performance Entries associated with the metric. These entries provide detailed information about the performance events related to the metric.",
                        "navigationType : Indicates the type of navigation that triggered the metric collection. Possible values include \"navigate\" , \"reload\" , \"back_forward\" , and \"prerender\" .",
                        "rating : A qualitative rating of the metric value, providing an assessment of the performance. Possible values are \"good\" , \"needs-improvement\" , and \"poor\" . The rating is typically determined by comparing the metric value against predefined thresholds that indicate acceptable or suboptimal performance.",
                        "value : The actual value or duration of the performance entry, typically in milliseconds. The value provides a quantitative measure of the performance aspect being tracked by the metric. The source of the value depends on the specific metric being measured and can come from various Performance API s."
                    ]
                },
                {
                    "type": "p",
                    "text": "Web Vitals are a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:"
                },
                {
                    "type": "list",
                    "items": [
                        "Time to First Byte (TTFB)",
                        "First Contentful Paint (FCP)",
                        "Largest Contentful Paint (LCP)",
                        "First Input Delay (FID)",
                        "Cumulative Layout Shift (CLS)",
                        "Interaction to Next Paint (INP)"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can handle all the results of these metrics using the name property."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useReportWebVitals } from 'next/web-vitals' export function WebVitals () { useReportWebVitals ((metric) => { switch ( metric .name) { case 'FCP' : { // handle FCP results } case 'LCP' : { // handle LCP results } // ... } }) }"
                },
                {
                    "type": "p",
                    "text": "Vercel Speed Insights does not useReportWebVitals , but @vercel/speed-insights package instead. useReportWebVitals hook is useful in local development, or if you're using a different service for collecting Web Vitals. You can send results to any endpoint to measure and track\nreal user performance on your site. For example:"
                },
                {
                    "type": "code",
                    "code": "useReportWebVitals ((metric) => { const body = JSON .stringify (metric) const url = 'https://example.com/analytics' // Use `navigator.sendBeacon()` if available, falling back to `fetch()`. if ( navigator .sendBeacon) { navigator .sendBeacon (url , body) } else { fetch (url , { body , method : 'POST' , keepalive : true }) } })"
                },
                {
                    "type": "p",
                    "text": "Good to know : If you use Google Analytics , using the id value can allow you to construct metric distributions manually (to calculate percentiles,\netc.)"
                },
                {
                    "type": "code",
                    "code": "useReportWebVitals (metric => { // Use `window.gtag` if you initialized Google Analytics as this example: // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics window .gtag ( 'event' , metric .name , { value : Math .round ( metric .name === 'CLS' ? metric .value * 1000 : metric .value) , // values must be integers event_label : metric .id , // id unique to current page load non_interaction : true , // avoids affecting bounce rate. }); }"
                },
                {
                    "type": "p",
                    "text": "Read more about sending results to Google Analytics ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-router",
            "title": "Functions: useRouter | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The useRouter hook allows you to programmatically change routes inside Client Components . Recommendation: Use the <Link> component for navigation unless you have a specific requirement for using useRouter ."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useRouter } from 'next/navigation' export default function Page () { const router = useRouter () return ( < button type = \"button\" onClick = {() => router .push ( '/dashboard' )}> Dashboard </ button > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "router.push(href: string, { scroll: boolean }) : Perform a client-side navigation to the provided route. Adds a new entry into the browser’s history stack.",
                        "router.replace(href: string, { scroll: boolean }) : Perform a client-side navigation to the provided route without adding a new entry into the browser’s history stack .",
                        "router.refresh() : Refresh the current route. Making a new request to the server, re-fetching data requests, and re-rendering Server Components. The client will merge the updated React Server Component payload without losing unaffected client-side React (e.g. useState ) or browser state (e.g. scroll position).",
                        "router.prefetch(href: string) : Prefetch the provided route for faster client-side transitions.",
                        "router.back() : Navigate back to the previous route in the browser’s history stack.",
                        "router.forward() : Navigate forwards to the next page in the browser’s history stack."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "You must not send untrusted or unsanitized URLs to router.push or router.replace , as this can open your site to cross-site scripting (XSS) vulnerabilities. For example, javascript: URLs sent to router.push or router.replace will be executed in the context of your page.",
                        "The <Link> component automatically prefetch routes as they become visible in the viewport.",
                        "refresh() could re-produce the same result if fetch requests are cached. Other Dynamic APIs like cookies and headers could also change the response."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The useRouter hook should be imported from next/navigation and not next/router when using the App Router",
                        "The pathname string has been removed and is replaced by usePathname()",
                        "The query object has been removed and is replaced by useSearchParams()",
                        "router.events has been replaced. See below."
                    ]
                },
                {
                    "type": "p",
                    "text": "View the full migration guide . You can listen for page changes by composing other Client Component hooks like usePathname and useSearchParams ."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useEffect } from 'react' import { usePathname , useSearchParams } from 'next/navigation' export function NavigationEvents () { const pathname = usePathname () const searchParams = useSearchParams () useEffect (() => { const url = ` ${ pathname } ? ${ searchParams } ` console .log (url) // You can now use the current URL // ... } , [pathname , searchParams]) return '...' }"
                },
                {
                    "type": "p",
                    "text": "Which can be imported into a layout."
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from 'react' import { NavigationEvents } from './components/navigation-events' export default function Layout ({ children }) { return ( < html lang = \"en\" > < body > {children} < Suspense fallback = { null }> < NavigationEvents /> </ Suspense > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : <NavigationEvents> is wrapped in a Suspense boundary because useSearchParams() causes client-side rendering up to the closest Suspense boundary during static rendering . Learn more . By default, Next.js will scroll to the top of the page when navigating to a new route. You can disable this behavior by passing scroll: false to router.push() or router.replace() ."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useRouter } from 'next/navigation' export default function Page () { const router = useRouter () return ( < button type = \"button\" onClick = {() => router .push ( '/dashboard' , { scroll : false })} > Dashboard </ button > ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params",
            "title": "Functions: useSearchParams | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "useSearchParams is a Client Component hook that lets you read the current URL's query string . useSearchParams returns a read-only version of the URLSearchParams interface."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useSearchParams } from 'next/navigation' export default function SearchBar () { const searchParams = useSearchParams () const search = searchParams .get ( 'search' ) // URL -> `/ dashboard ?search=my-project` // `search` -> 'my-project' return <>Search: {search}</> }"
                },
                {
                    "type": "code",
                    "code": "const searchParams = useSearchParams ()"
                },
                {
                    "type": "p",
                    "text": "useSearchParams does not take any parameters. useSearchParams returns a read-only version of the URLSearchParams interface, which includes utility methods for reading the URL's query string:"
                },
                {
                    "type": "list",
                    "items": [
                        "URLSearchParams.get() : Returns the first value associated with the search parameter. For example: URL searchParams.get(\"a\") /dashboard?a=1 '1' /dashboard?a= '' /dashboard?b=3 null /dashboard?a=1&a=2 '1' - use getAll() to get all values",
                        "URLSearchParams.has() : Returns a boolean value indicating if the given parameter exists. For example: URL searchParams.has(\"a\") /dashboard?a=1 true /dashboard?b=3 false",
                        "Learn more about other read-only methods of URLSearchParams , including the getAll() , keys() , values() , entries() , forEach() , and toString() ."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "useSearchParams is a Client Component hook and is not supported in Server Components to prevent stale values during partial rendering .",
                        "If an application includes the /pages directory, useSearchParams will return ReadonlyURLSearchParams | null . The null value is for compatibility during migration since search params cannot be known during pre-rendering of a page that doesn't use getServerSideProps"
                    ]
                },
                {
                    "type": "p",
                    "text": "If a route is statically rendered , calling useSearchParams will cause the Client Component tree up to the closest Suspense boundary to be client-side rendered. This allows a part of the route to be statically rendered while the dynamic part that uses useSearchParams is client-side rendered. We recommend wrapping the Client Component that uses useSearchParams in a <Suspense/> boundary. This will allow any Client Components above it to be statically rendered and sent as part of initial HTML. Example ."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useSearchParams } from 'next/navigation' export default function SearchBar () { const searchParams = useSearchParams () const search = searchParams .get ( 'search' ) // This will not be logged on the server when using static rendering console .log (search) return <>Search: {search}</> }"
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from 'react' import SearchBar from './search-bar' // This component passed as a fallback to the Suspense boundary // will be rendered in place of the search bar in the initial HTML. // When the value is available during React hydration the fallback // will be replaced with the `<SearchBar>` component. function SearchBarFallback () { return <>placeholder</> } export default function Page () { return ( <> < nav > < Suspense fallback = {< SearchBarFallback />}> < SearchBar /> </ Suspense > </ nav > < h1 >Dashboard</ h1 > </> ) }"
                },
                {
                    "type": "p",
                    "text": "If a route is dynamically rendered , useSearchParams will be available on the server during the initial server render of the Client Component."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useSearchParams } from 'next/navigation' export default function SearchBar () { const searchParams = useSearchParams () const search = searchParams .get ( 'search' ) // This will be logged on the server during the initial render // and on the client on subsequent navigations. console .log (search) return <>Search: {search}</> }"
                },
                {
                    "type": "code",
                    "code": "import SearchBar from './search-bar' export const dynamic = 'force-dynamic' export default function Page () { return ( <> < nav > < SearchBar /> </ nav > < h1 >Dashboard</ h1 > </> ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Setting the dynamic route segment config option to force-dynamic can be used to force dynamic rendering. To access search params in Pages (Server Components), use the searchParams prop. Unlike Pages, Layouts (Server Components) do not receive the searchParams prop. This is because a shared layout is not re-rendered during navigation which could lead to stale searchParams between navigations. View detailed explanation . Instead, use the Page searchParams prop or the useSearchParams hook in a Client Component, which is re-rendered on the client with the latest searchParams . You can use useRouter or Link to set new searchParams . After a navigation is performed, the current page.js will receive an updated searchParams prop ."
                },
                {
                    "type": "code",
                    "code": "'use client' export default function ExampleClientComponent () { const router = useRouter () const pathname = usePathname () const searchParams = useSearchParams () // Get a new searchParams string by merging the current // searchParams with a provided key/value pair const createQueryString = useCallback ( (name : string , value : string ) => { const params = new URLSearchParams ( searchParams .toString ()) params .set (name , value) return params .toString () } , [searchParams] ) return ( <> < p >Sort By</ p > { /* using useRouter */ } < button onClick = {() => { // <pathname>?sort=asc router .push (pathname + '?' + createQueryString ( 'sort' , 'asc' )) }} > ASC </ button > { /* using <Link> */ } < Link href = { // <pathname>?sort=desc pathname + '?' + createQueryString ( 'sort' , 'desc' ) } > DESC </ Link > </> ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segment",
            "title": "Functions: useSelectedLayoutSegment | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegment is a Client Component hook that lets you read the active route segment one level below the Layout it is called from. It is useful for navigation UI, such as tabs inside a parent layout that change style depending on the active child segment."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useSelectedLayoutSegment } from 'next/navigation' export default function ExampleClientComponent () { const segment = useSelectedLayoutSegment () return < p >Active segment: {segment}</ p > }"
                },
                {
                    "type": "list",
                    "items": [
                        "Since useSelectedLayoutSegment is a Client Component hook, and Layouts are Server Components by default, useSelectedLayoutSegment is usually called via a Client Component that is imported into a Layout.",
                        "useSelectedLayoutSegment only returns the segment one level down. To return all active segments, see useSelectedLayoutSegments"
                    ]
                },
                {
                    "type": "code",
                    "code": "const segment = useSelectedLayoutSegment (parallelRoutesKey ?: string)"
                },
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegment optionally accepts a parallelRoutesKey , which allows you to read the active route segment within that slot. useSelectedLayoutSegment returns a string of the active segment or null if one doesn't exist. For example, given the Layouts and URLs below, the returned segment would be: You can use useSelectedLayoutSegment to create an active link component that changes style depending on the active segment. For example, a featured posts list in the sidebar of a blog:"
                },
                {
                    "type": "code",
                    "code": "'use client' import Link from 'next/link' import { useSelectedLayoutSegment } from 'next/navigation' // This *client* component will be imported into a blog layout export default function BlogNavLink ({ slug , children , } : { slug : string children : React . ReactNode }) { // Navigating to `/ blog /hello-world` will return 'hello-world' // for the selected layout segment const segment = useSelectedLayoutSegment () const isActive = slug === segment return ( < Link href = { `/ blog / ${ slug } ` } // Change style depending on whether the link is active style = {{ fontWeight : isActive ? 'bold' : 'normal' }} > {children} </ Link > ) }"
                },
                {
                    "type": "code",
                    "code": "// Import the Client Component into a parent Layout (Server Component) import { BlogNavLink } from './ blog -nav-link' import getFeaturedPosts from './get-featured-posts' export default async function Layout ({ children , } : { children : React . ReactNode }) { const featuredPosts = await getFeaturedPosts () return ( < div > { featuredPosts .map ((post) => ( < div key = { post .id}> < BlogNavLink slug = { post .slug}>{ post .title}</ BlogNavLink > </ div > ))} < div >{children}</ div > </ div > ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segments",
            "title": "Functions: useSelectedLayoutSegments | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegments is a Client Component hook that lets you read the active route segments below the Layout it is called from. It is useful for creating UI in parent Layouts that need knowledge of active child segments such as breadcrumbs."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useSelectedLayoutSegments } from 'next/navigation' export default function ExampleClientComponent () { const segments = useSelectedLayoutSegments () return ( < ul > { segments .map ((segment , index) => ( < li key = {index}>{segment}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Since useSelectedLayoutSegments is a Client Component hook, and Layouts are Server Components by default, useSelectedLayoutSegments is usually called via a Client Component that is imported into a Layout.",
                        "The returned segments include Route Groups , which you might not want to be included in your UI. You can use the filter() array method to remove items that start with a bracket."
                    ]
                },
                {
                    "type": "code",
                    "code": "const segments = useSelectedLayoutSegments (parallelRoutesKey ?: string)"
                },
                {
                    "type": "p",
                    "text": "useSelectedLayoutSegments optionally accepts a parallelRoutesKey , which allows you to read the active route segment within that slot. useSelectedLayoutSegments returns an array of strings containing the active segments one level down from the layout the hook was called from. Or an empty array if none exist. For example, given the Layouts and URLs below, the returned segments would be:"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/functions/userAgent",
            "title": "Functions: userAgent | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The userAgent helper extends the Web Request API with additional properties and methods to interact with the user agent object from the request."
                },
                {
                    "type": "code",
                    "code": "import { NextRequest , NextResponse , userAgent } from 'next/server' export function middleware (request : NextRequest ) { const url = request .nextUrl const { device } = userAgent (request) const viewport = device .type === 'mobile' ? 'mobile' : 'desktop' url . searchParams .set ( 'viewport' , viewport) return NextResponse .rewrite (url) }"
                },
                {
                    "type": "p",
                    "text": "A boolean indicating whether the request comes from a known bot. An object containing information about the browser used in the request."
                },
                {
                    "type": "list",
                    "items": [
                        "name : A string representing the browser's name, or undefined if not identifiable.",
                        "version : A string representing the browser's version, or undefined ."
                    ]
                },
                {
                    "type": "p",
                    "text": "An object containing information about the device used in the request."
                },
                {
                    "type": "list",
                    "items": [
                        "model : A string representing the model of the device, or undefined .",
                        "type : A string representing the type of the device, such as console , mobile , tablet , smarttv , wearable , embedded , or undefined .",
                        "vendor : A string representing the vendor of the device, or undefined ."
                    ]
                },
                {
                    "type": "p",
                    "text": "An object containing information about the browser's engine."
                },
                {
                    "type": "list",
                    "items": [
                        "name : A string representing the engine's name. Possible values include: Amaya , Blink , EdgeHTML , Flow , Gecko , Goanna , iCab , KHTML , Links , Lynx , NetFront , NetSurf , Presto , Tasman , Trident , w3m , WebKit or undefined .",
                        "version : A string representing the engine's version, or undefined ."
                    ]
                },
                {
                    "type": "p",
                    "text": "An object containing information about the operating system."
                },
                {
                    "type": "list",
                    "items": [
                        "name : A string representing the name of the OS, or undefined .",
                        "version : A string representing the version of the OS, or undefined ."
                    ]
                },
                {
                    "type": "p",
                    "text": "An object containing information about the CPU architecture."
                },
                {
                    "type": "list",
                    "items": [
                        "architecture : A string representing the architecture of the CPU. Possible values include: 68k , amd64 , arm , arm64 , armhf , avr , ia32 , ia64 , irix , irix64 , mips , mips64 , pa-risc , ppc , sparc , sparc64 or undefined"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/expireTime",
            "title": "next.config.js: expireTime | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "You can specify a custom stale-while-revalidate expire time for CDNs to consume in the Cache-Control header for ISR enabled pages. Open next.config.js and add the expireTime config:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { // one hour in seconds expireTime : 3600 , }"
                },
                {
                    "type": "p",
                    "text": "Now when sending the Cache-Control header the expire time will be calculated depending on the specific revalidate period. For example, if you have a revalidate of 15 minutes on a path and the expire time is one hour the generated Cache-Control header will be s-maxage=900, stale-while-revalidate=2700 so that it can stay stale for 15 minutes less than the configured expire time."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/logging",
            "title": "next.config.js: logging | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "You can configure the logging level and whether the full URL is logged to the console when running Next.js in development mode. Currently, logging only applies to data fetching using the fetch API. It does not yet apply to other logs inside of Next.js."
                },
                {
                    "type": "code",
                    "code": "module . exports = { logging : { fetches : { fullUrl : true , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Any fetch requests that are restored from the Server Components HMR cache are not logged by default. However, this can be enabled by setting logging.fetches.hmrRefreshes to true ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { logging : { fetches : { hmrRefreshes : true , } , } , }"
                },
                {
                    "type": "p",
                    "text": "In addition, you can disable the development logging by setting logging to false ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { logging : false , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/optimizePackageImports",
            "title": "next.config.js: optimizePackageImports | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Some packages can export hundreds or thousands of modules, which can cause performance issues in development and production. Adding a package to experimental.optimizePackageImports will only load the modules you are actually using, while still giving you the convenience of writing import statements with many named exports."
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { optimizePackageImports : [ 'package-name' ] , } , }"
                },
                {
                    "type": "p",
                    "text": "The following libraries are optimized by default:"
                },
                {
                    "type": "list",
                    "items": [
                        "lucide-react",
                        "date-fns",
                        "lodash-es",
                        "ramda",
                        "antd",
                        "react-bootstrap",
                        "ahooks",
                        "@ant-design/icons",
                        "@headlessui/react",
                        "@headlessui-float/react",
                        "@heroicons/react/20/solid",
                        "@heroicons/react/24/solid",
                        "@heroicons/react/24/outline",
                        "@visx/visx",
                        "@tremor/react",
                        "rxjs",
                        "@mui/material",
                        "@mui/icons-material",
                        "recharts",
                        "react-use",
                        "@material-ui/core",
                        "@material-ui/icons",
                        "@tabler/icons-react",
                        "mui-core",
                        "react-icons/*"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/output",
            "title": "next.config.js: output | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "During a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application. This feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package's dependencies installed to run next start . Starting with Next.js 12, you can leverage Output File Tracing in the .next/ directory to only include the necessary files. Furthermore, this removes the need for the deprecated serverless target which can cause various issues and also creates unnecessary duplication. During next build , Next.js will use @vercel/nft to statically analyze import , require , and fs usage to determine all files that a page might load. Next.js' production server is also traced for its needed files and output at .next/next-server.js.nft.json which can be leveraged in production. To leverage the .nft.json files emitted to the .next output directory, you can read the list of files in each trace that are relative to the .nft.json file and then copy them to your deployment location. Next.js can automatically create a standalone folder that copies only the necessary files for a production deployment including select files in node_modules . To leverage this automatic copying you can enable it in your next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { output : 'standalone' , }"
                },
                {
                    "type": "p",
                    "text": "This will create a folder at .next/standalone which can then be deployed on its own without installing node_modules . Additionally, a minimal server.js file is also output which can be used instead of next start . This minimal server does not copy the public or .next/static folders by default as these should ideally be handled by a CDN instead, although these folders can be copied to the standalone/public and standalone/.next/static folders manually, after which server.js file will serve these automatically. To copy these manually, you can use the cp command-line tool after you next build :"
                },
                {
                    "type": "code",
                    "code": "cp -r public .next/standalone/ && cp -r .next/static .next/standalone/.next/"
                },
                {
                    "type": "p",
                    "text": "To start your minimal server.js file locally, run the following command:"
                },
                {
                    "type": "code",
                    "code": "node .next/standalone/server.js"
                },
                {
                    "type": "list",
                    "items": [
                        "If your project needs to listen to a specific port or hostname, you can define PORT or HOSTNAME environment variables before running server.js . For example, run PORT=8080 HOSTNAME=0.0.0.0 node server.js to start the server on http://0.0.0.0:8080 ."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "While tracing in monorepo setups, the project directory is used for tracing by default. For next build packages/web-app , packages/web-app would be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can set outputFileTracingRoot in your next.config.js ."
                    ]
                },
                {
                    "type": "code",
                    "code": "module . exports = { // this includes files from the monorepo base two directories up outputFileTracingRoot : path .join (__dirname , '../../' ) , }"
                },
                {
                    "type": "list",
                    "items": [
                        "There are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can leverage outputFileTracingExcludes and outputFileTracingIncludes respectively in next.config.js . Each config accepts an object with minimatch globs for the key to match specific pages and a value of an array with globs relative to the project's root to either include or exclude in the trace."
                    ]
                },
                {
                    "type": "code",
                    "code": "module . exports = { outputFileTracingExcludes : { '/api/hello' : [ './un-necessary-folder/**/*' ] , } , outputFileTracingIncludes : { '/api/another' : [ './necessary-folder/**/*' ] , '/api/login/\\\\[\\\\[\\\\.\\\\.\\\\.slug\\\\]\\\\]' : [ './node_modules/aws-crt/dist/bin/**/*' , ] , } , }"
                },
                {
                    "type": "p",
                    "text": "Note: The key of outputFileTracingIncludes / outputFileTracingExcludes is a glob , so special characters need to be escaped."
                },
                {
                    "type": "list",
                    "items": [
                        "Currently, Next.js does not do anything with the emitted .nft.json files. The files must be read by your deployment platform, for example Vercel , to create a minimal deployment. In a future release, a new command is planned to utilize these .nft.json files."
                    ]
                },
                {
                    "type": "p",
                    "text": "Tracing dependencies can be slow because it requires very complex computations and analysis. We created turbotrace in Rust as a faster and smarter alternative to the JavaScript implementation. To enable it, you can add the following configuration to your next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { turbotrace : { // control the log level of the turbotrace, default is `error` logLevel? : | 'bug' | 'fatal' | 'error' | 'warning' | 'hint' | 'note' | 'suggestions' | 'info' , // control if the log of turbotrace should contain the details of the analysis, default is `false` logDetail? : boolean // show all log messages without limit // turbotrace only show 1 log message for each categories by default logAll ?: boolean // control the context directory of the turbotrace // files outside of the context directory will not be traced // set the `outputFileTracingRoot` has the same effect // if the `outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used contextDirectory ?: string // if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing. // for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json') processCwd ?: string // control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`. memoryLimit ?: number } , } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverComponentsHmrCache",
            "title": "next.config.js: serverComponentsHmrCache | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The experimental serverComponentsHmrCache option allows you to cache fetch responses in Server Components across Hot Module Replacement (HMR) refreshes in local development. This results in faster responses and reduced costs for billed API calls. By default, the HMR cache applies to all fetch requests, including those with the cache: 'no-store' option. This means uncached requests will not show fresh data between HMR refreshes. However, the cache will be cleared on navigation or full-page reloads. You can disable the HMR cache by setting serverComponentsHmrCache to false in your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { serverComponentsHmrCache : false , // defaults to true } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Good to know: For better observability, we recommend using the logging.fetches option which logs fetch cache hits and misses in the console during development."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverExternalPackages",
            "title": "next.config.js: serverExternalPackages | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Dependencies used inside Server Components and Route Handlers will automatically be bundled by Next.js. If a dependency is using Node.js specific features, you can choose to opt-out specific dependencies from the Server Components bundling and use native Node.js require ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { serverExternalPackages : [ '@acme/ui' ] , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js includes a short list of popular packages that currently are working on compatibility and automatically opt-ed out:"
                },
                {
                    "type": "list",
                    "items": [
                        "@appsignal/nodejs",
                        "@aws-sdk/client-s3",
                        "@aws-sdk/s3-presigned-post",
                        "@blockfrost/blockfrost-js",
                        "@highlight-run/node",
                        "@jpg-store/lucid-cardano",
                        "@libsql/client",
                        "@mikro-orm/core",
                        "@mikro-orm/knex",
                        "@node-rs/argon2",
                        "@node-rs/bcrypt",
                        "@prisma/client",
                        "@react-pdf/renderer",
                        "@sentry/profiling-node",
                        "@sparticuz/chromium",
                        "@swc/core",
                        "argon2",
                        "autoprefixer",
                        "aws-crt",
                        "bcrypt",
                        "better-sqlite3",
                        "canvas",
                        "cpu-features",
                        "cypress",
                        "dd-trace",
                        "eslint",
                        "express",
                        "firebase-admin",
                        "import-in-the-middle",
                        "isolated-vm",
                        "jest",
                        "jsdom",
                        "keyv",
                        "libsql",
                        "mdx-bundler",
                        "mongodb",
                        "mongoose",
                        "newrelic",
                        "next-mdx-remote",
                        "next-seo",
                        "node-cron",
                        "node-pty",
                        "node-web-audio-api",
                        "oslo",
                        "pg",
                        "playwright",
                        "playwright-core",
                        "postcss",
                        "prettier",
                        "prisma",
                        "puppeteer-core",
                        "puppeteer",
                        "require-in-the-middle",
                        "rimraf",
                        "sharp",
                        "shiki",
                        "sqlite3",
                        "ts-node",
                        "ts-morph",
                        "typescript",
                        "vscode-oniguruma",
                        "webpack",
                        "websocket",
                        "zeromq"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/staleTimes",
            "title": "next.config.js: staleTimes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "staleTimes is an experimental feature that enables caching of page segments in the client-side router cache . You can enable this experimental feature and provide custom revalidation times by setting the experimental staleTimes flag:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { experimental : { staleTimes : { dynamic : 30 , static : 180 , } , } , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "The static and dynamic properties correspond with the time period (in seconds) based on different types of link prefetching ."
                },
                {
                    "type": "list",
                    "items": [
                        "The dynamic property is used when the page is neither statically generated nor fully prefetched (e.g. with prefetch={true} ). Default: 0 seconds (not cached)",
                        "Default: 0 seconds (not cached)",
                        "The static property is used for statically generated pages, or when the prefetch prop on Link is set to true , or when calling router.prefetch . Default: 5 minutes",
                        "Default: 5 minutes"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Loading boundaries are considered reusable for the static period defined in this configuration.",
                        "This doesn't affect partial rendering , meaning shared layouts won't automatically be refetched on every navigation, only the page segment that changes.",
                        "This doesn't change back/forward caching behavior to prevent layout shift and to prevent losing the browser scroll position."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can learn more about the Client Router Cache here ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/next-config-js/staticGeneration",
            "title": "next.config.js: staticGeneration* | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The staticGeneration* options allow you to configure the Static Generation process for advanced use cases."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { staticGenerationRetryCount : 1 , staticGenerationMaxConcurrency : 8 , staticGenerationMinPagesPerWorker : 25 , } , } export default nextConfig"
                },
                {
                    "type": "list",
                    "items": [
                        "staticGenerationRetryCount : The number of times to retry a failed page generation before failing the build.",
                        "staticGenerationMaxConcurrency : The maximum number of pages to be processed per worker.",
                        "staticGenerationMinPagesPerWorker : The minimum number of pages to be processed before starting a new worker."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/api-reference/turbopack",
            "title": "API Reference: Turbopack | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Turbopack is an incremental bundler optimized for JavaScript and TypeScript, written in Rust, and built into Next.js. Turbopack can be used in Next.js in both the pages and app directories for faster local development. To enable Turbopack, use the --turbopack flag when running the Next.js development server."
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"next dev --turbopack\" , \"build\" : \"next build\" , \"start\" : \"next start\" , \"lint\" : \"next lint\" } }"
                },
                {
                    "type": "p",
                    "text": "Turbopack in Next.js requires zero-configuration for most users and can be extended for more advanced use cases. To learn more about the currently supported features for Turbopack, view the API Reference . Turbopack currently only supports next dev and does not support next build . We are currently working on support for builds as we move closer towards stability. These features are currently not supported:"
                },
                {
                    "type": "list",
                    "items": [
                        "Turbopack leverages Lightning CSS which doesn't support some low usage CSS Modules features :local and :global as standalone pseudo classes. Only the function variant is supported, for example: :global(a) . The @value rule which has been superseded by CSS variables. :import and :export ICSS rules.",
                        ":local and :global as standalone pseudo classes. Only the function variant is supported, for example: :global(a) .",
                        "The @value rule which has been superseded by CSS variables.",
                        ":import and :export ICSS rules.",
                        "Invalid CSS comment syntax such as // CSS comments should be written as /* comment */ per the specification. Preprocessors such as Sass do support this alternative syntax for comments.",
                        "CSS comments should be written as /* comment */ per the specification.",
                        "Preprocessors such as Sass do support this alternative syntax for comments.",
                        "webpack() configuration in next.config.js Turbopack replaces Webpack, this means that webpack configuration is not supported. To configure Turbopack, see the documentation . A subset of Webpack loaders are supported in Turbopack.",
                        "Turbopack replaces Webpack, this means that webpack configuration is not supported.",
                        "To configure Turbopack, see the documentation .",
                        "A subset of Webpack loaders are supported in Turbopack.",
                        "Babel ( .babelrc ) Turbopack leverages the SWC compiler for all transpilation and optimizations. This means that Babel is not included by default. If you have a .babelrc file, you might no longer need it because Next.js includes common Babel plugins as SWC transforms that can be enabled. You can read more about this in the compiler documentation . If you still need to use Babel after verifying your particular use case is not covered, you can leverage Turbopack's support for custom webpack loaders to include babel-loader .",
                        "Turbopack leverages the SWC compiler for all transpilation and optimizations. This means that Babel is not included by default.",
                        "If you have a .babelrc file, you might no longer need it because Next.js includes common Babel plugins as SWC transforms that can be enabled. You can read more about this in the compiler documentation .",
                        "If you still need to use Babel after verifying your particular use case is not covered, you can leverage Turbopack's support for custom webpack loaders to include babel-loader .",
                        "Creating a root layout automatically in App Router. This behavior is currently not supported since it changes input files, instead, an error will be shown for you to manually add a root layout in the desired location.",
                        "This behavior is currently not supported since it changes input files, instead, an error will be shown for you to manually add a root layout in the desired location.",
                        "@next/font (legacy font support). @next/font is deprecated in favor of next/font . next/font is fully supported with Turbopack.",
                        "@next/font is deprecated in favor of next/font . next/font is fully supported with Turbopack.",
                        "Relay transforms We are planning to implement this in the future.",
                        "We are planning to implement this in the future.",
                        "Blocking .css imports in pages/_document.tsx Currently with webpack Next.js blocks importing .css files in pages/_document.tsx We are planning to implement this warning in the future.",
                        "Currently with webpack Next.js blocks importing .css files in pages/_document.tsx",
                        "We are planning to implement this warning in the future.",
                        "experimental.typedRoutes We are planning to implement this in the future.",
                        "We are planning to implement this in the future.",
                        "experimental.nextScriptWorkers We are planning to implement this in the future.",
                        "We are planning to implement this in the future.",
                        "experimental.sri.algorithm We are planning to implement this in the future.",
                        "We are planning to implement this in the future.",
                        "experimental.fallbackNodePolyfills We are planning to implement this in the future.",
                        "We are planning to implement this in the future.",
                        "experimental.esmExternals We are currently not planning to support the legacy esmExternals configuration in Next.js with Turbopack.",
                        "We are currently not planning to support the legacy esmExternals configuration in Next.js with Turbopack.",
                        "AMP . We are currently not planning to support AMP in Next.js with Turbopack.",
                        "We are currently not planning to support AMP in Next.js with Turbopack.",
                        "Yarn PnP We are currently not planning to support Yarn PnP in Next.js with Turbopack.",
                        "We are currently not planning to support Yarn PnP in Next.js with Turbopack.",
                        "experimental.urlImports We are currently not planning to support experimental.urlImports in Next.js with Turbopack.",
                        "We are currently not planning to support experimental.urlImports in Next.js with Turbopack.",
                        ":import and :export ICSS rules We are currently not planning to support :import and :export ICSS rules in Next.js with Turbopack as Lightning CSS the CSS parser Turbopack uses does not support these rules.",
                        "We are currently not planning to support :import and :export ICSS rules in Next.js with Turbopack as Lightning CSS the CSS parser Turbopack uses does not support these rules.",
                        "unstable_allowDynamic configuration in edge runtime"
                    ]
                },
                {
                    "type": "p",
                    "text": "Trace files allow the Next.js team to investigate and improve performance metrics and memory usage. To generate a trace file, append NEXT_TURBOPACK_TRACING=1 to the next dev --turbopack command, this will generate a .next/trace-turbopack file. When reporting issues related to Turbopack performance and memory usage, please include the trace file in your GitHub issue."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application",
            "title": "App Router: Building Your Application | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js provides the building blocks to create flexible, full-stack web applications. The guides in Building Your Application explain how to use these features and how to customize your application's behavior. The sections and pages are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your Next.js application. However, you can read them in any order or skip to the pages that apply to your use case. If you're new to Next.js, we recommend starting with the Routing , Rendering , Data Fetching and Styling sections, as they introduce the fundamental Next.js and web concepts to help you get started. Then, you can dive deeper into the other sections such as Optimizing and Configuring . Finally, once you're ready, checkout the Deploying and Upgrading sections."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/authentication",
            "title": "Building Your Application: Authentication | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Understanding authentication is crucial for protecting your application's data. This page will guide you through what React and Next.js features to use to implement auth. Before starting, it helps to break down the process into three concepts:"
                },
                {
                    "type": "list",
                    "items": [
                        "Authentication : Verifies if the user is who they say they are. It requires the user to prove their identity with something they have, such as a username and password.",
                        "Session Management : Tracks the user's auth state across requests.",
                        "Authorization : Decides what routes and data the user can access."
                    ]
                },
                {
                    "type": "p",
                    "text": "This diagram shows the authentication flow using React and Next.js features: The examples on this page walk through basic username and password auth for educational purposes. While you can implement a custom auth solution, for increased security and simplicity, we recommend using an authentication library. These offer built-in solutions for authentication, session management, and authorization, as well as additional features such as social logins, multi-factor authentication, and role-based access control. You can find a list in the Auth Libraries section. You can use the <form> element with React's Server Actions and useActionState to capture user credentials, validate form fields, and call your Authentication Provider's API or database. Since Server Actions always execute on the server, they provide a secure environment for handling authentication logic. Here are the steps to implement signup/login functionality: To capture user credentials, create a form that invokes a Server Action on submission. For example, a signup form that accepts the user's name, email, and password:"
                },
                {
                    "type": "code",
                    "code": "import { signup } from '@/app/actions/auth' export function SignupForm () { return ( < form action = {signup}> < div > < label htmlFor = \"name\" >Name</ label > < input id = \"name\" name = \"name\" placeholder = \"Name\" /> </ div > < div > < label htmlFor = \"email\" >Email</ label > < input id = \"email\" name = \"email\" type = \"email\" placeholder = \"Email\" /> </ div > < div > < label htmlFor = \"password\" >Password</ label > < input id = \"password\" name = \"password\" type = \"password\" /> </ div > < button type = \"submit\" >Sign Up</ button > </ form > ) }"
                },
                {
                    "type": "code",
                    "code": "export async function signup (formData : FormData ) {}"
                },
                {
                    "type": "p",
                    "text": "Use the Server Action to validate the form fields on the server. If your authentication provider doesn't provide form validation, you can use a schema validation library like Zod or Yup . Using Zod as an example, you can define a form schema with appropriate error messages:"
                },
                {
                    "type": "code",
                    "code": "import { z } from 'zod' export const SignupFormSchema = z .object ({ name : z .string () .min ( 2 , { message : 'Name must be at least 2 characters long.' }) .trim () , email : z .string () .email ({ message : 'Please enter a valid email.' }) .trim () , password : z .string () .min ( 8 , { message : 'Be at least 8 characters long' }) .regex ( /[a-zA-Z]/ , { message : 'Contain at least one letter.' }) .regex ( /[0-9]/ , { message : 'Contain at least one number.' }) .regex ( /[ ^ a-zA-Z0-9]/ , { message : 'Contain at least one special character.' , }) .trim () , }) export type FormState = | { errors ?: { name ?: string [] email ?: string [] password ?: string [] } message ?: string } | undefined"
                },
                {
                    "type": "p",
                    "text": "To prevent unnecessary calls to your authentication provider's API or database, you can return early in the Server Action if any form fields do not match the defined schema."
                },
                {
                    "type": "code",
                    "code": "import { SignupFormSchema , FormState } from '@/app/lib/definitions' export async function signup (state : FormState , formData : FormData ) { // Validate form fields const validatedFields = SignupFormSchema .safeParse ({ name : formData .get ( 'name' ) , email : formData .get ( 'email' ) , password : formData .get ( 'password' ) , }) // If any form fields are invalid, return early if ( ! validatedFields .success) { return { errors : validatedFields . error .flatten ().fieldErrors , } } // Call the provider or db to create a user... }"
                },
                {
                    "type": "p",
                    "text": "Back in your <SignupForm /> , you can use React's useActionState hook to display validation errors while the form is submitting:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { signup } from '@/app/actions/auth' import { useActionState } from 'react' export default function SignupForm () { const [ state , action , pending ] = useActionState (signup , undefined ) return ( < form action = {action}> < div > < label htmlFor = \"name\" >Name</ label > < input id = \"name\" name = \"name\" placeholder = \"Name\" /> </ div > { state ?. errors ?.name && < p >{ state . errors .name}</ p >} < div > < label htmlFor = \"email\" >Email</ label > < input id = \"email\" name = \"email\" placeholder = \"Email\" /> </ div > { state ?. errors ?.email && < p >{ state . errors .email}</ p >} < div > < label htmlFor = \"password\" >Password</ label > < input id = \"password\" name = \"password\" type = \"password\" /> </ div > { state ?. errors ?.password && ( < div > < p >Password must:</ p > < ul > { state . errors . password .map ((error) => ( < li key = {error}>- {error}</ li > ))} </ ul > </ div > )} < button disabled = {pending} type = \"submit\" > Sign Up </ button > </ form > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "In React 19, useFormStatus includes additional keys on the returned object, like data, method, and action. If you are not using React 19, only the pending key is available.",
                        "Before mutating data, you should always ensure a user is also authorized to perform the action. See Authentication and Authorization ."
                    ]
                },
                {
                    "type": "p",
                    "text": "After validating form fields, you can create a new user account or check if the user exists by calling your authentication provider's API or database."
                },
                {
                    "type": "code",
                    "code": "export async function signup (state : FormState , formData : FormData ) { // 1. Validate form fields // ... // 2. Prepare data for insertion into database const { name , email , password } = validatedFields .data // e.g. Hash the user's password before storing it const hashedPassword = await bcrypt .hash (password , 10 ) // 3. Insert the user into the database or call an Auth Library's API const data = await db .insert (users) .values ({ name , email , password : hashedPassword , }) .returning ({ id : users .id }) const user = data[ 0 ] if ( ! user) { return { message : 'An error occurred while creating your account.' , } } // TODO: // 4. Create user session // 5. Redirect user }"
                },
                {
                    "type": "p",
                    "text": "After successfully creating the user account or verifying the user credentials, you can create a session to manage the user's auth state. Depending on your session management strategy, the session can be stored in a cookie or database, or both. Continue to the Session Management section to learn more."
                },
                {
                    "type": "list",
                    "items": [
                        "The example above is verbose since it breaks down the authentication steps for the purpose of education. This highlights that implementing your own secure solution can quickly become complex. Consider using an Auth Library to simplify the process.",
                        "To improve the user experience, you may want to check for duplicate emails or usernames earlier in the registration flow. For example, as the user types in a username or the input field loses focus. This can help prevent unnecessary form submissions and provide immediate feedback to the user. You can debounce requests with libraries such as use-debounce to manage the frequency of these checks."
                    ]
                },
                {
                    "type": "p",
                    "text": "Session management ensures that the user's authenticated state is preserved across requests. It involves creating, storing, refreshing, and deleting sessions or tokens. There are two types of sessions:"
                },
                {
                    "type": "list",
                    "items": [
                        "Stateless : Session data (or a token) is stored in the browser's cookies. The cookie is sent with each request, allowing the session to be verified on the server. This method is simpler, but can be less secure if not implemented correctly.",
                        "Database : Session data is stored in a database, with the user's browser only receiving the encrypted session ID. This method is more secure, but can be complex and use more server resources."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: While you can use either method, or both, we recommend using a session management library such as iron-session or Jose . To create and manage stateless sessions, there are a few steps you need to follow:"
                },
                {
                    "type": "list",
                    "items": [
                        "Generate a secret key, which will be used to sign your session, and store it as an environment variable .",
                        "Write logic to encrypt/decrypt session data using a session management library.",
                        "Manage cookies using the Next.js cookies API."
                    ]
                },
                {
                    "type": "p",
                    "text": "In addition to the above, consider adding functionality to update (or refresh) the session when the user returns to the application, and delete the session when the user logs out. Good to know: Check if your auth library includes session management. There are a few ways you can generate secret key to sign your session. For example, you may choose to use the openssl command in your terminal:"
                },
                {
                    "type": "code",
                    "code": "openssl rand -base64 32"
                },
                {
                    "type": "p",
                    "text": "This command generates a 32-character random string that you can use as your secret key and store in your environment variables file :"
                },
                {
                    "type": "code",
                    "code": "SESSION_SECRET = your_secret_key"
                },
                {
                    "type": "p",
                    "text": "You can then reference this key in your session management logic:"
                },
                {
                    "type": "code",
                    "code": "const secretKey = process . env . SESSION_SECRET"
                },
                {
                    "type": "p",
                    "text": "Next, you can use your preferred session management library to encrypt and decrypt sessions. Continuing from the previous example, we'll use Jose (compatible with the Edge Runtime ) and React's server-only package to ensure that your session management logic is only executed on the server."
                },
                {
                    "type": "code",
                    "code": "import 'server-only' import { SignJWT , jwtVerify } from 'jose' import { SessionPayload } from '@/app/ lib /definitions' const secretKey = process . env . SESSION_SECRET const encodedKey = new TextEncoder () .encode (secretKey) export async function encrypt (payload : SessionPayload ) { return new SignJWT (payload) .setProtectedHeader ({ alg : 'HS256' }) .setIssuedAt () .setExpirationTime ( '7d' ) .sign (encodedKey) } export async function decrypt (session : string | undefined = '' ) { try { const { payload } = await jwtVerify (session , encodedKey , { algorithms : [ 'HS256' ] , }) return payload } catch (error) { console .log ( 'Failed to verify session' ) } }"
                },
                {
                    "type": "list",
                    "items": [
                        "The payload should contain the minimum , unique user data that'll be used in subsequent requests, such as the user's ID, role, etc. It should not contain personally identifiable information like phone number, email address, credit card information, etc, or sensitive data like passwords."
                    ]
                },
                {
                    "type": "p",
                    "text": "To store the session in a cookie, use the Next.js cookies API. The cookie should be set on the server, and include the recommended options:"
                },
                {
                    "type": "list",
                    "items": [
                        "HttpOnly : Prevents client-side JavaScript from accessing the cookie.",
                        "Secure : Use https to send the cookie.",
                        "SameSite : Specify whether the cookie can be sent with cross-site requests.",
                        "Max-Age or Expires : Delete the cookie after a certain period.",
                        "Path : Define the URL path for the cookie."
                    ]
                },
                {
                    "type": "p",
                    "text": "Please refer to MDN for more information on each of these options."
                },
                {
                    "type": "code",
                    "code": "import 'server-only' import { cookies } from 'next/headers' export async function createSession (userId : string ) { const expiresAt = new Date ( Date .now () + 7 * 24 * 60 * 60 * 1000 ) const session = await encrypt ({ userId , expiresAt }) const cookieStore = await cookies () cookieStore .set ( 'session' , session , { httpOnly : true , secure : true , expires : expiresAt , sameSite : 'lax' , path : '/' , }) }"
                },
                {
                    "type": "p",
                    "text": "Back in your Server Action, you can invoke the createSession() function, and use the redirect() API to redirect the user to the appropriate page:"
                },
                {
                    "type": "code",
                    "code": "import { createSession } from '@/app/lib/session' export async function signup (state : FormState , formData : FormData ) { // Previous steps: // 1. Validate form fields // 2. Prepare data for insertion into database // 3. Insert the user into the database or call an Library API // Current steps: // 4. Create user session await createSession ( user .id) // 5. Redirect user redirect ( '/profile' ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Cookies should be set on the server to prevent client-side tampering.",
                        "🎥 Watch: Learn more about stateless sessions and authentication with Next.js → YouTube (11 minutes) ."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can also extend the session's expiration time. This is useful for keeping the user logged in after they access the application again. For example:"
                },
                {
                    "type": "code",
                    "code": "import 'server-only' import { cookies } from 'next/headers' import { decrypt } from '@/app/ lib /session' export async function updateSession () { const session = ( await cookies ()) .get ( 'session' )?.value const payload = await decrypt (session) if ( ! session || ! payload) { return null } const expires = new Date ( Date .now () + 7 * 24 * 60 * 60 * 1000 ) const cookieStore = await cookies () cookieStore .set ( 'session' , session , { httpOnly : true , secure : true , expires : expires , sameSite : 'lax' , path : '/' , }) }"
                },
                {
                    "type": "p",
                    "text": "Tip: Check if your auth library supports refresh tokens, which can be used to extend the user's session. To delete the session, you can delete the cookie:"
                },
                {
                    "type": "code",
                    "code": "import 'server-only' import { cookies } from 'next/headers' export async function deleteSession () { const cookieStore = await cookies () cookieStore .delete ( 'session' ) }"
                },
                {
                    "type": "p",
                    "text": "Then you can reuse the deleteSession() function in your application, for example, on logout:"
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' import { deleteSession } from '@/app/lib/session' export async function logout () { deleteSession () redirect ( '/login' ) }"
                },
                {
                    "type": "p",
                    "text": "To create and manage database sessions, you'll need to follow these steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a table in your database to store session and data (or check if your Auth Library handles this).",
                        "Implement functionality to insert, update, and delete sessions",
                        "Encrypt the session ID before storing it in the user's browser, and ensure the database and cookie stay in sync (this is optional, but recommended for optimistic auth checks in Middleware )."
                    ]
                },
                {
                    "type": "code",
                    "code": "import cookies from 'next/headers' import { db } from '@/app/ lib /db' import { encrypt } from '@/app/ lib /session' export async function createSession (id : number ) { const expiresAt = new Date ( Date .now () + 7 * 24 * 60 * 60 * 1000 ) // 1. Create a session in the database const data = await db .insert (sessions) .values ({ userId : id , expiresAt , }) // Return the session ID .returning ({ id : sessions .id }) const sessionId = data[ 0 ].id // 2. Encrypt the session ID const session = await encrypt ({ sessionId , expiresAt }) // 3. Store the session in cookies for optimistic auth checks const cookieStore = await cookies () cookieStore .set ( 'session' , session , { httpOnly : true , secure : true , expires : expiresAt , sameSite : 'lax' , path : '/' , }) }"
                },
                {
                    "type": "list",
                    "items": [
                        "For faster data retrieval, consider using a database like Vercel Redis . However, you can also keep the session data in your primary database, and combine data requests to reduce the number of queries.",
                        "You may opt to use database sessions for more advanced use cases, such as keeping track of the last time a user logged in, or number of active devices, or give users the ability to log out of all devices."
                    ]
                },
                {
                    "type": "p",
                    "text": "After implementing session management, you'll need to add authorization logic to control what users can access and do within your application. Continue to the Authorization section to learn more. Once a user is authenticated and a session is created, you can implement authorization to control what the user can access and do within your application. There are two main types of authorization checks:"
                },
                {
                    "type": "list",
                    "items": [
                        "Optimistic : Checks if the user is authorized to access a route or perform an action using the session data stored in the cookie. These checks are useful for quick operations, such as showing/hiding UI elements or redirecting users based on permissions or roles.",
                        "Secure : Checks if the user is authorized to access a route or perform an action using the session data stored in the database. These checks are more secure and are used for operations that require access to sensitive data or actions."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Creating a Data Access Layer to centralize your authorization logic",
                        "Using Data Transfer Objects (DTO) to only return the necessary data",
                        "Optionally use Middleware to perform optimistic checks."
                    ]
                },
                {
                    "type": "p",
                    "text": "There are some cases where you may want to use Middleware and redirect users based on permissions:"
                },
                {
                    "type": "list",
                    "items": [
                        "To perform optimistic checks. Since Middleware runs on every route, it's a good way to centralize redirect logic and pre-filter unauthorized users.",
                        "To protect static routes that share data between users (e.g. content behind a paywall)."
                    ]
                },
                {
                    "type": "p",
                    "text": "However, since Middleware runs on every route, including prefetched routes, it's important to only read the session from the cookie (optimistic checks), and avoid database checks to prevent performance issues."
                },
                {
                    "type": "code",
                    "code": "import { NextRequest , NextResponse } from 'next/server' import { decrypt } from '@/app/lib/session' import { cookies } from 'next/headers' // 1. Specify protected and public routes const protectedRoutes = [ '/dashboard' ] const publicRoutes = [ '/login' , '/signup' , '/' ] export default async function middleware (req : NextRequest ) { // 2. Check if the current route is protected or public const path = req . nextUrl .pathname const isProtectedRoute = protectedRoutes .includes (path) const isPublicRoute = publicRoutes .includes (path) // 3. Decrypt the session from the cookie const cookie = ( await cookies ()) .get ( 'session' )?.value const session = await decrypt (cookie) // 4. Redirect to /login if the user is not authenticated if (isProtectedRoute && ! session ?.userId) { return NextResponse .redirect ( new URL ( '/login' , req .nextUrl)) } // 5. Redirect to /dashboard if the user is authenticated if ( isPublicRoute && session ?.userId && ! req . nextUrl . pathname .startsWith ( '/dashboard' ) ) { return NextResponse .redirect ( new URL ( '/dashboard' , req .nextUrl)) } return NextResponse .next () } // Routes Middleware should not run on export const config = { matcher : [ '/((?!api|_next/static|_next/image|.*\\\\.png$).*)' ] , }"
                },
                {
                    "type": "p",
                    "text": "While Middleware can be useful for initial checks, it should not be your only line of defense in protecting your data. The majority of security checks should be performed as close as possible to your data source, see Data Access Layer for more information."
                },
                {
                    "type": "list",
                    "items": [
                        "In Middleware, you can also read cookies using req.cookies.get('session').value .",
                        "Middleware uses the Edge Runtime , check if your Auth library and session management library are compatible.",
                        "You can use the matcher property in the Middleware to specify which routes Middleware should run on. Although, for auth, it's recommended Middleware runs on all routes."
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend creating a DAL to centralize your data requests and authorization logic. The DAL should include a function that verifies the user's session as they interact with your application. At the very least, the function should check if the session is valid, then redirect or return the user information needed to make further requests. For example, create a separate file for your DAL that includes a verifySession() function. Then use React's cache API to memoize the return value of the function during a React render pass:"
                },
                {
                    "type": "code",
                    "code": "import 'server-only' import { cookies } from 'next/headers' import { decrypt } from '@/app/ lib /session' export const verifySession = cache ( async () => { const cookie = ( await cookies ()) .get ( 'session' )?.value const session = await decrypt (cookie) if ( ! session ?.userId) { redirect ( '/login' ) } return { isAuth : true , userId : session .userId } })"
                },
                {
                    "type": "p",
                    "text": "You can then invoke the verifySession() function in your data requests, Server Actions, Route Handlers:"
                },
                {
                    "type": "code",
                    "code": "export const getUser = cache ( async () => { const session = await verifySession () if ( ! session) return null try { const data = await db . query . users .findMany ({ where : eq ( users .id , session .userId) , // Explicitly return the columns you need rather than the whole user object columns : { id : true , name : true , email : true , } , }) const user = data[ 0 ] return user } catch (error) { console .log ( 'Failed to fetch user' ) return null } })"
                },
                {
                    "type": "list",
                    "items": [
                        "A DAL can be used to protect data fetched at request time. However, for static routes that share data between users, data will be fetched at build time and not at request time. Use Middleware to protect static routes.",
                        "For secure checks, you can check if the session is valid by comparing the session ID with your database. Use React's cache function to avoid unnecessary duplicate requests to the database during a render pass.",
                        "You may wish to consolidate related data requests in a JavaScript class that runs verifySession() before any methods."
                    ]
                },
                {
                    "type": "p",
                    "text": "When retrieving data, it's recommended you return only the necessary data that will be used in your application, and not entire objects. For example, if you're fetching user data, you might only return the user's ID and name, rather than the entire user object which could contain passwords, phone numbers, etc. However, if you have no control over the returned data structure, or are working in a team where you want to avoid whole objects being passed to the client, you can use strategies such as specifying what fields are safe to be exposed to the client."
                },
                {
                    "type": "code",
                    "code": "import 'server-only' import { getUser } from '@/app/ lib /dal' function canSeeUsername (viewer : User ) { return true } function canSeePhoneNumber (viewer : User , team : string ) { return viewer .isAdmin || team === viewer .team } export async function getProfileDTO (slug : string ) { const data = await db . query . users .findMany ({ where : eq ( users .slug , slug) , // Return specific columns here }) const user = data[ 0 ] const currentUser = await getUser ( user .id) // Or return only what's specific to the query here return { username : canSeeUsername (currentUser) ? user .username : null , phonenumber : canSeePhoneNumber (currentUser , user .team) ? user .phonenumber : null , } }"
                },
                {
                    "type": "p",
                    "text": "By centralizing your data requests and authorization logic in a DAL and using DTOs, you can ensure that all data requests are secure and consistent, making it easier to maintain, audit, and debug as your application scales."
                },
                {
                    "type": "list",
                    "items": [
                        "There are a couple of different ways you can define a DTO, from using toJSON() , to individual functions like the example above, or JS classes. Since these are JavaScript patterns and not a React or Next.js feature, we recommend doing some research to find the best pattern for your application.",
                        "Learn more about security best practices in our Security in Next.js article ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Auth check in Server Components are useful for role-based access. For example, to conditionally render components based on the user's role:"
                },
                {
                    "type": "code",
                    "code": "import { verifySession } from '@/app/lib/dal' export default function Dashboard () { const session = await verifySession () const userRole = session ?. user ?.role // Assuming 'role' is part of the session object if (userRole === 'admin' ) { return < AdminDashboard /> } else if (userRole === 'user' ) { return < UserDashboard /> } else { redirect ( '/login' ) } }"
                },
                {
                    "type": "p",
                    "text": "In the example, we use the verifySession() function from our DAL to check for 'admin', 'user', and unauthorized roles. This pattern ensures that each user interacts only with components appropriate to their role. Due to Partial Rendering , be cautious when doing checks in Layouts as these don't re-render on navigation, meaning the user session won't be checked on every route change. Instead, you should do the checks close to your data source or the component that'll be conditionally rendered. For example, consider a shared layout that fetches the user data and displays the user image in a nav. Instead of doing the auth check in the layout, you should fetch the user data ( getUser() ) in the layout and do the auth check in your DAL. This guarantees that wherever getUser() is called within your application, the auth check is performed, and prevents developers forgetting to check the user is authorized to access the data."
                },
                {
                    "type": "code",
                    "code": "export default async function Layout ({ children , } : { children : React . ReactNode ; }) { const user = await getUser (); return ( // ... ) }"
                },
                {
                    "type": "code",
                    "code": "export const getUser = cache ( async () => { const session = await verifySession () if ( ! session) return null // Get user ID from session and fetch data })"
                },
                {
                    "type": "list",
                    "items": [
                        "A common pattern in SPAs is to return null in a layout or a top-level component if a user is not authorized. This pattern is not recommended since Next.js applications have multiple entry points, which will not prevent nested route segments and Server Actions from being accessed."
                    ]
                },
                {
                    "type": "p",
                    "text": "Treat Server Actions with the same security considerations as public-facing API endpoints, and verify if the user is allowed to perform a mutation. In the example below, we check the user's role before allowing the action to proceed:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { verifySession } from '@/app/ lib /dal' export async function serverAction (formData : FormData ) { const session = await verifySession () const userRole = session ?. user ?.role // Return early if user is not authorized to perform the action if (userRole !== 'admin' ) { return null } // Proceed with the action for authorized users }"
                },
                {
                    "type": "p",
                    "text": "Treat Route Handlers with the same security considerations as public-facing API endpoints, and verify if the user is allowed to access the Route Handler."
                },
                {
                    "type": "code",
                    "code": "import { verifySession } from '@/app/lib/dal' export async function GET () { // User authentication and role verification const session = await verifySession () // Check if the user is authenticated if ( ! session) { // User is not authenticated return new Response ( null , { status : 401 }) } // Check if the user has the 'admin' role if ( session . user .role !== 'admin' ) { // User is authenticated but does not have the right permissions return new Response ( null , { status : 403 }) } // Continue for authorized users }"
                },
                {
                    "type": "p",
                    "text": "The example above demonstrates a Route Handler with a two-tier security check. It first checks for an active session, and then verifies if the logged-in user is an 'admin'. Using context providers for auth works due to interleaving . However, React context is not supported in Server Components, making them only applicable to Client Components. This works, but any child Server Components will be rendered on the server first, and will not have access to the context provider’s session data:"
                },
                {
                    "type": "code",
                    "code": "import { ContextProvider } from 'auth-lib' export default function RootLayout ({ children }) { return ( < html lang = \"en\" > < body > < ContextProvider >{children}</ ContextProvider > </ body > </ html > ) }"
                },
                {
                    "type": "code",
                    "code": "\"use client\" ; import { useSession } from \"auth-lib\" ; export default function Profile () { const { userId } = useSession (); const { data } = useSWR ( `/api/user/ ${ userId } ` , fetcher) return ( // ... ); }"
                },
                {
                    "type": "p",
                    "text": "If session data is needed in Client Components (e.g. for client-side data fetching), use React’s taintUniqueValue API to prevent sensitive session data from being exposed to the client. Now that you've learned about authentication in Next.js, here are Next.js-compatible libraries and resources to help you implement secure authentication and session management:"
                },
                {
                    "type": "list",
                    "items": [
                        "Auth0",
                        "Clerk",
                        "Kinde",
                        "NextAuth.js",
                        "Ory",
                        "Stack Auth",
                        "Supabase",
                        "Stytch",
                        "WorkOS"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Iron Session",
                        "Jose"
                    ]
                },
                {
                    "type": "p",
                    "text": "To continue learning about authentication and security, check out the following resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "How to think about security in Next.js",
                        "Understanding XSS Attacks",
                        "Understanding CSRF Attacks",
                        "The Copenhagen Book"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/caching",
            "title": "Building Your Application: Caching | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js improves your application's performance and reduces costs by caching rendering work and data requests. This page provides an in-depth look at Next.js caching mechanisms, the APIs you can use to configure them, and how they interact with each other. Good to know : This page helps you understand how Next.js works under the hood but is not essential knowledge to be productive with Next.js. Most of Next.js' caching heuristics are determined by your API usage and have defaults for the best performance with zero or minimal configuration. If you instead want to jump to examples, start here . Here's a high-level overview of the different caching mechanisms and their purpose: By default, Next.js will cache as much as possible to improve performance and reduce cost. This means routes are statically rendered and data requests are cached unless you opt out. The diagram below shows the default caching behavior: when a route is statically rendered at build time and when a static route is first visited. Caching behavior changes depending on whether the route is statically or dynamically rendered, data is cached or uncached, and whether a request is part of an initial visit or a subsequent navigation. Depending on your use case, you can configure the caching behavior for individual routes and data requests. React extends the fetch API to automatically memoize requests that have the same URL and options. This means you can call a fetch function for the same data in multiple places in a React component tree while only executing it once. For example, if you need to use the same data across a route (e.g. in a Layout, Page, and multiple components), you do not have to fetch data at the top of the tree, and forward props between components. Instead, you can fetch data in the components that need it without worrying about the performance implications of making multiple requests across the network for the same data."
                },
                {
                    "type": "code",
                    "code": "async function getItem () { // The `fetch` function is automatically memoized and the result // is cached const res = await fetch ( 'https://.../item/1' ) return res .json () } // This function is called twice, but only executed the first time const item = await getItem () // cache MISS // The second call could be anywhere in your route const item = await getItem () // cache HIT"
                },
                {
                    "type": "list",
                    "items": [
                        "While rendering a route, the first time a particular request is called, its result will not be in memory and it'll be a cache MISS .",
                        "Therefore, the function will be executed, and the data will be fetched from the external source, and the result will be stored in memory.",
                        "Subsequent function calls of the request in the same render pass will be a cache HIT , and the data will be returned from memory without executing the function.",
                        "Once the route has been rendered and the rendering pass is complete, memory is \"reset\" and all request memoization entries are cleared."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Request memoization is a React feature, not a Next.js feature. It's included here to show how it interacts with the other caching mechanisms.",
                        "Memoization only applies to the GET method in fetch requests.",
                        "Memoization only applies to the React Component tree, this means: It applies to fetch requests in generateMetadata , generateStaticParams , Layouts, Pages, and other Server Components. It doesn't apply to fetch requests in Route Handlers as they are not a part of the React component tree.",
                        "It applies to fetch requests in generateMetadata , generateStaticParams , Layouts, Pages, and other Server Components.",
                        "It doesn't apply to fetch requests in Route Handlers as they are not a part of the React component tree.",
                        "For cases where fetch is not suitable (e.g. some database clients, CMS clients, or GraphQL clients), you can use the React cache function to memoize functions."
                    ]
                },
                {
                    "type": "p",
                    "text": "The cache lasts the lifetime of a server request until the React component tree has finished rendering. Since the memoization is not shared across server requests and only applies during rendering, there is no need to revalidate it. Memoization only applies to the GET method in fetch requests, other methods, such as POST and DELETE , are not memoized. This default behavior is a React optimization and we do not recommend opting out of it. To manage individual requests, you can use the signal property from AbortController . However, this will not opt requests out of memoization, rather, abort in-flight requests."
                },
                {
                    "type": "code",
                    "code": "const { signal } = new AbortController () fetch (url , { signal })"
                },
                {
                    "type": "p",
                    "text": "Next.js has a built-in Data Cache that persists the result of data fetches across incoming server requests and deployments . This is possible because Next.js extends the native fetch API to allow each request on the server to set its own persistent caching semantics. Good to know : In the browser, the cache option of fetch indicates how a request will interact with the browser's HTTP cache, in Next.js, the cache option indicates how a server-side request will interact with the server's Data Cache. You can use the cache and next.revalidate options of fetch to configure the caching behavior."
                },
                {
                    "type": "list",
                    "items": [
                        "The first time a fetch request with the 'force-cache' option is called during rendering, Next.js checks the Data Cache for a cached response.",
                        "If a cached response is found, it's returned immediately and memoized .",
                        "If a cached response is not found, the request is made to the data source, the result is stored in the Data Cache, and memoized.",
                        "For uncached data (e.g. no cache option defined or using { cache: 'no-store' } ), the result is always fetched from the data source, and memoized.",
                        "Whether the data is cached or uncached, the requests are always memoized to avoid making duplicate requests for the same data during a React render pass."
                    ]
                },
                {
                    "type": "p",
                    "text": "Differences between the Data Cache and Request Memoization While both caching mechanisms help improve performance by re-using cached data, the Data Cache is persistent across incoming requests and deployments, whereas memoization only lasts the lifetime of a request. The Data Cache is persistent across incoming requests and deployments unless you revalidate or opt-out. Cached data can be revalidated in two ways, with:"
                },
                {
                    "type": "list",
                    "items": [
                        "Time-based Revalidation : Revalidate data after a certain amount of time has passed and a new request is made. This is useful for data that changes infrequently and freshness is not as critical.",
                        "On-demand Revalidation: Revalidate data based on an event (e.g. form submission). On-demand revalidation can use a tag-based or path-based approach to revalidate groups of data at once. This is useful when you want to ensure the latest data is shown as soon as possible (e.g. when content from your headless CMS is updated)."
                    ]
                },
                {
                    "type": "p",
                    "text": "To revalidate data at a timed interval, you can use the next.revalidate option of fetch to set the cache lifetime of a resource (in seconds)."
                },
                {
                    "type": "code",
                    "code": "// Revalidate at most every hour fetch ( 'https://...' , { next : { revalidate : 3600 } })"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can use Route Segment Config options to configure all fetch requests in a segment or for cases where you're not able to use fetch ."
                },
                {
                    "type": "list",
                    "items": [
                        "The first time a fetch request with revalidate is called, the data will be fetched from the external data source and stored in the Data Cache.",
                        "Any requests that are called within the specified timeframe (e.g. 60-seconds) will return the cached data.",
                        "After the timeframe, the next request will still return the cached (now stale) data. Next.js will trigger a revalidation of the data in the background. Once the data is fetched successfully, Next.js will update the Data Cache with the fresh data. If the background revalidation fails, the previous data will be kept unaltered.",
                        "Next.js will trigger a revalidation of the data in the background.",
                        "Once the data is fetched successfully, Next.js will update the Data Cache with the fresh data.",
                        "If the background revalidation fails, the previous data will be kept unaltered."
                    ]
                },
                {
                    "type": "p",
                    "text": "This is similar to stale-while-revalidate behavior. Data can be revalidated on-demand by path ( revalidatePath ) or by cache tag ( revalidateTag )."
                },
                {
                    "type": "list",
                    "items": [
                        "The first time a fetch request is called, the data will be fetched from the external data source and stored in the Data Cache.",
                        "When an on-demand revalidation is triggered, the appropriate cache entries will be purged from the cache. This is different from time-based revalidation, which keeps the stale data in the cache until the fresh data is fetched.",
                        "This is different from time-based revalidation, which keeps the stale data in the cache until the fresh data is fetched.",
                        "The next time a request is made, it will be a cache MISS again, and the data will be fetched from the external data source and stored in the Data Cache."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you do not want to cache the response from fetch , you can do the following:"
                },
                {
                    "type": "code",
                    "code": "let data = await fetch ( 'https://api.vercel.app/blog' , { cache : 'no-store' })"
                },
                {
                    "type": "p",
                    "text": "You may see the terms Automatic Static Optimization , Static Site Generation , or Static Rendering being used interchangeably to refer to the process of rendering and caching routes of your application at build time. Next.js automatically renders and caches routes at build time. This is an optimization that allows you to serve the cached route instead of rendering on the server for every request, resulting in faster page loads. To understand how the Full Route Cache works, it's helpful to look at how React handles rendering, and how Next.js caches the result: On the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks: by individual routes segments and Suspense boundaries. Each chunk is rendered in two steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "React renders Server Components into a special data format, optimized for streaming, called the React Server Component Payload .",
                        "Next.js uses the React Server Component Payload and Client Component JavaScript instructions to render HTML on the server."
                    ]
                },
                {
                    "type": "p",
                    "text": "This means we don't have to wait for everything to render before caching the work or sending a response. Instead, we can stream a response as work is completed. What is the React Server Component Payload? The React Server Component Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The React Server Component Payload contains:"
                },
                {
                    "type": "list",
                    "items": [
                        "The rendered result of Server Components",
                        "Placeholders for where Client Components should be rendered and references to their JavaScript files",
                        "Any props passed from a Server Component to a Client Component"
                    ]
                },
                {
                    "type": "p",
                    "text": "To learn more, see the Server Components documentation. The default behavior of Next.js is to cache the rendered result (React Server Component Payload and HTML) of a route on the server. This applies to statically rendered routes at build time, or during revalidation. At request time, on the client:"
                },
                {
                    "type": "list",
                    "items": [
                        "The HTML is used to immediately show a fast non-interactive initial preview of the Client and Server Components.",
                        "The React Server Components Payload is used to reconcile the Client and rendered Server Component trees, and update the DOM.",
                        "The JavaScript instructions are used to hydrate Client Components and make the application interactive."
                    ]
                },
                {
                    "type": "p",
                    "text": "The React Server Component Payload is stored in the client-side Router Cache - a separate in-memory cache, split by individual route segment. This Router Cache is used to improve the navigation experience by storing previously visited routes and prefetching future routes. On subsequent navigations or during prefetching, Next.js will check if the React Server Components Payload is stored in the Router Cache. If so, it will skip sending a new request to the server. If the route segments are not in the cache, Next.js will fetch the React Server Components Payload from the server, and populate the Router Cache on the client. Whether a route is cached or not at build time depends on whether it's statically or dynamically rendered. Static routes are cached by default, whereas dynamic routes are rendered at request time, and not cached. This diagram shows the difference between statically and dynamically rendered routes, with cached and uncached data: Learn more about static and dynamic rendering . By default, the Full Route Cache is persistent. This means that the render output is cached across user requests. There are two ways you can invalidate the Full Route Cache:"
                },
                {
                    "type": "list",
                    "items": [
                        "Revalidating Data : Revalidating the Data Cache , will in turn invalidate the Router Cache by re-rendering components on the server and caching the new render output.",
                        "Redeploying : Unlike the Data Cache, which persists across deployments, the Full Route Cache is cleared on new deployments."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can opt out of the Full Route Cache, or in other words, dynamically render components for every incoming request, by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using a Dynamic API : This will opt the route out from the Full Route Cache and dynamically render it at request time. The Data Cache can still be used.",
                        "Using the dynamic = 'force-dynamic' or revalidate = 0 route segment config options : This will skip the Full Route Cache and the Data Cache. Meaning components will be rendered and data fetched on every incoming request to the server. The Router Cache will still apply as it's a client-side cache.",
                        "Opting out of the Data Cache : If a route has a fetch request that is not cached, this will opt the route out of the Full Route Cache. The data for the specific fetch request will be fetched for every incoming request. Other fetch requests that do not opt out of caching will still be cached in the Data Cache. This allows for a hybrid of cached and uncached data."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js has an in-memory client-side router cache that stores the RSC payload of route segments, split by layouts, loading states, and pages. When a user navigates between routes, Next.js caches the visited route segments and prefetches the routes the user is likely to navigate to. This results in instant back/forward navigation, no full-page reload between navigations, and preservation of React state and browser state."
                },
                {
                    "type": "list",
                    "items": [
                        "Layouts are cached and reused on navigation ( partial rendering ).",
                        "Loading states are cached and reused on navigation for instant navigation .",
                        "Pages are not cached by default, but are reused during browser backward and forward navigation. You can enable caching for page segments by using the experimental staleTimes config option."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: This cache specifically applies to Next.js and Server Components, and is different to the browser's bfcache , though it has a similar result. The cache is stored in the browser's temporary memory. Two factors determine how long the router cache lasts:"
                },
                {
                    "type": "list",
                    "items": [
                        "Session : The cache persists across navigation. However, it's cleared on page refresh.",
                        "Automatic Invalidation Period : The cache of layouts and loading states is automatically invalidated after a specific time. The duration depends on how the resource was prefetched , and if the resource was statically generated : Default Prefetching ( prefetch={null} or unspecified): not cached for dynamic pages, 5 minutes for static pages. Full Prefetching ( prefetch={true} or router.prefetch ): 5 minutes for both static & dynamic pages.",
                        "Default Prefetching ( prefetch={null} or unspecified): not cached for dynamic pages, 5 minutes for static pages.",
                        "Full Prefetching ( prefetch={true} or router.prefetch ): 5 minutes for both static & dynamic pages."
                    ]
                },
                {
                    "type": "p",
                    "text": "While a page refresh will clear all cached segments, the automatic invalidation period only affects the individual segment from the time it was prefetched. Good to know : The experimental staleTimes config option can be used to adjust the automatic invalidation times mentioned above. There are two ways you can invalidate the Router Cache:"
                },
                {
                    "type": "list",
                    "items": [
                        "In a Server Action : Revalidating data on-demand by path with ( revalidatePath ) or by cache tag with ( revalidateTag ) Using cookies.set or cookies.delete invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. authentication).",
                        "Revalidating data on-demand by path with ( revalidatePath ) or by cache tag with ( revalidateTag )",
                        "Using cookies.set or cookies.delete invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. authentication).",
                        "Calling router.refresh will invalidate the Router Cache and make a new request to the server for the current route."
                    ]
                },
                {
                    "type": "p",
                    "text": "As of Next.js 15, page segments are opted out by default. Good to know: You can also opt out of prefetching by setting the prefetch prop of the <Link> component to false . When configuring the different caching mechanisms, it's important to understand how they interact with each other:"
                },
                {
                    "type": "list",
                    "items": [
                        "Revalidating or opting out of the Data Cache will invalidate the Full Route Cache, as the render output depends on data.",
                        "Invalidating or opting out of the Full Route Cache does not affect the Data Cache. You can dynamically render a route that has both cached and uncached data. This is useful when most of your page uses cached data, but you have a few components that rely on data that needs to be fetched at request time. You can dynamically render without worrying about the performance impact of re-fetching all the data."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To immediately invalidate the Data Cache and Router cache, you can use revalidatePath or revalidateTag in a Server Action .",
                        "Revalidating the Data Cache in a Route Handler will not immediately invalidate the Router Cache as the Route Handler isn't tied to a specific route. This means Router Cache will continue to serve the previous payload until a hard refresh, or the automatic invalidation period has elapsed."
                    ]
                },
                {
                    "type": "p",
                    "text": "The following table provides an overview of how different Next.js APIs affect caching: By default, the <Link> component automatically prefetches routes from the Full Route Cache and adds the React Server Component Payload to the Router Cache. To disable prefetching, you can set the prefetch prop to false . But this will not skip the cache permanently, the route segment will still be cached client-side when the user visits the route. Learn more about the <Link> component . The prefetch option of the useRouter hook can be used to manually prefetch a route. This adds the React Server Component Payload to the Router Cache. See the useRouter hook API reference. The refresh option of the useRouter hook can be used to manually refresh a route. This completely clears the Router Cache, and makes a new request to the server for the current route. refresh does not affect the Data or Full Route Cache. The rendered result will be reconciled on the client while preserving React state and browser state. See the useRouter hook API reference. Data returned from fetch is not automatically cached in the Data Cache. The default caching behavior of fetch (e.g., when the cache option is not specified) is equal to setting the cache option to no-store :"
                },
                {
                    "type": "code",
                    "code": "let data = await fetch ( 'https://api.vercel.app/blog' , { cache : 'no-store' })"
                },
                {
                    "type": "p",
                    "text": "See the fetch API Reference for more options. You can opt individual fetch into caching by setting the cache option to force-cache :"
                },
                {
                    "type": "code",
                    "code": "// Opt into caching fetch ( `https://...` , { cache : 'force-cache' })"
                },
                {
                    "type": "p",
                    "text": "See the fetch API Reference for more options. You can use the next.revalidate option of fetch to set the revalidation period (in seconds) of an individual fetch request. This will revalidate the Data Cache, which in turn will revalidate the Full Route Cache. Fresh data will be fetched, and components will be re-rendered on the server."
                },
                {
                    "type": "code",
                    "code": "// Revalidate at most after 1 hour fetch ( `https://...` , { next : { revalidate : 3600 } })"
                },
                {
                    "type": "p",
                    "text": "See the fetch API reference for more options. Next.js has a cache tagging system for fine-grained data caching and revalidation."
                },
                {
                    "type": "list",
                    "items": [
                        "When using fetch or unstable_cache , you have the option to tag cache entries with one or more tags.",
                        "Then, you can call revalidateTag to purge the cache entries associated with that tag."
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, you can set a tag when fetching data:"
                },
                {
                    "type": "code",
                    "code": "// Cache data with a tag fetch ( `https://...` , { next : { tags : [ 'a' , 'b' , 'c' ] } })"
                },
                {
                    "type": "p",
                    "text": "Then, call revalidateTag with a tag to purge the cache entry:"
                },
                {
                    "type": "code",
                    "code": "// Revalidate entries with a specific tag revalidateTag ( 'a' )"
                },
                {
                    "type": "p",
                    "text": "There are two places you can use revalidateTag , depending on what you're trying to achieve:"
                },
                {
                    "type": "list",
                    "items": [
                        "Route Handlers - to revalidate data in response of a third party event (e.g. webhook). This will not invalidate the Router Cache immediately as the Router Handler isn't tied to a specific route.",
                        "Server Actions - to revalidate data after a user action (e.g. form submission). This will invalidate the Router Cache for the associated route."
                    ]
                },
                {
                    "type": "p",
                    "text": "revalidatePath allows you manually revalidate data and re-render the route segments below a specific path in a single operation. Calling the revalidatePath method revalidates the Data Cache, which in turn invalidates the Full Route Cache."
                },
                {
                    "type": "code",
                    "code": "revalidatePath ( '/' )"
                },
                {
                    "type": "p",
                    "text": "There are two places you can use revalidatePath , depending on what you're trying to achieve:"
                },
                {
                    "type": "list",
                    "items": [
                        "Route Handlers - to revalidate data in response to a third party event (e.g. webhook).",
                        "Server Actions - to revalidate data after a user interaction (e.g. form submission, clicking a button)."
                    ]
                },
                {
                    "type": "p",
                    "text": "See the revalidatePath API reference for more information. Calling router.refresh will clear the Router cache, and re-render route segments on the server without invalidating the Data Cache or the Full Route Cache. The difference is that revalidatePath purges the Data Cache and Full Route Cache, whereas router.refresh() does not change the Data Cache and Full Route Cache, as it is a client-side API. Dynamic APIs like cookies and headers , and the searchParams prop in Pages depend on runtime incoming request information. Using them will opt a route out of the Full Route Cache, in other words, the route will be dynamically rendered. Using cookies.set or cookies.delete in a Server Action invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. to reflect authentication changes). The Route Segment Config options can be used to override the route segment defaults or when you're not able to use the fetch API (e.g. database client or 3rd party libraries). The following Route Segment Config options will opt out of the Full Route Cache: This config option will opt all fetches out of the Data Cache (i.e. no-store ): See the fetchCache to see more advanced options. See the Route Segment Config documentation for more options. For dynamic segments (e.g. app/blog/[slug]/page.js ), paths provided by generateStaticParams are cached in the Full Route Cache at build time. At request time, Next.js will also cache paths that weren't known at build time the first time they're visited. To statically render all paths at build time, supply the full list of paths to generateStaticParams :"
                },
                {
                    "type": "code",
                    "code": "export async function generateStaticParams () { const posts = await fetch ( 'https://.../posts' ) .then ((res) => res .json ()) return posts .map ((post) => ({ slug : post .slug , })) }"
                },
                {
                    "type": "p",
                    "text": "To statically render a subset of paths at build time, and the rest the first time they're visited at runtime, return a partial list of paths:"
                },
                {
                    "type": "code",
                    "code": "export async function generateStaticParams () { const posts = await fetch ( 'https://.../posts' ) .then ((res) => res .json ()) // Render the first 10 posts at build time return posts .slice ( 0 , 10 ) .map ((post) => ({ slug : post .slug , })) }"
                },
                {
                    "type": "p",
                    "text": "To statically render all paths the first time they're visited, return an empty array (no paths will be rendered at build time) or utilize export const dynamic = 'force-static' :"
                },
                {
                    "type": "code",
                    "code": "export async function generateStaticParams () { return [] }"
                },
                {
                    "type": "p",
                    "text": "Good to know: You must return an array from generateStaticParams , even if it's empty. Otherwise, the route will be dynamically rendered."
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'force-static'"
                },
                {
                    "type": "p",
                    "text": "To disable caching at request time, add the export const dynamicParams = false option in a route segment. When this config option is used, only paths provided by generateStaticParams will be served, and other routes will 404 or match (in the case of catch-all routes ). The React cache function allows you to memoize the return value of a function, allowing you to call the same function multiple times while only executing it once. Since fetch requests are automatically memoized, you do not need to wrap it in React cache . However, you can use cache to manually memoize data requests for use cases when the fetch API is not suitable. For example, some database clients, CMS clients, or GraphQL clients."
                },
                {
                    "type": "code",
                    "code": "import { cache } from 'react' import db from '@/lib/db' export const getItem = cache ( async (id : string ) => { const item = await db . item .findUnique ({ id }) return item })"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring",
            "title": "Building Your Application: Configuring | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js allows you to customize your project to meet specific requirements. This includes integrations with TypeScript, ESlint, and more, as well as internal configuration options such as Absolute Imports and Environment Variables."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/content-security-policy",
            "title": "Configuring: Content Security Policy | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Content Security Policy (CSP) is important to guard your Next.js application against various security threats such as cross-site scripting (XSS), clickjacking, and other code injection attacks. By using CSP, developers can specify which origins are permissible for content sources, scripts, stylesheets, images, fonts, objects, media (audio, video), iframes, and more. A nonce is a unique, random string of characters created for a one-time use. It is used in conjunction with CSP to selectively allow certain inline scripts or styles to execute, bypassing strict CSP directives. Even though CSPs are designed to block malicious scripts, there are legitimate scenarios where inline scripts are necessary. In such cases, nonces offer a way to allow these scripts to execute if they have the correct nonce. Middleware enables you to add headers and generate nonces before the page renders. Every time a page is viewed, a fresh nonce should be generated. This means that you must use dynamic rendering to add nonces ."
                },
                {
                    "type": "code",
                    "code": "import { NextRequest , NextResponse } from 'next/server' export function middleware (request : NextRequest ) { const nonce = Buffer .from ( crypto .randomUUID ()) .toString ( 'base64' ) const cspHeader = ` default-src 'self'; script-src 'self' 'nonce- ${ nonce } ' 'strict-dynamic'; style-src 'self' 'nonce- ${ nonce } '; img-src 'self' blob: data:; font-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests; ` // Replace newline characters and spaces const contentSecurityPolicyHeaderValue = cspHeader .replace ( /\\s {2,} / g , ' ' ) .trim () const requestHeaders = new Headers ( request .headers) requestHeaders .set ( 'x-nonce' , nonce) requestHeaders .set ( 'Content-Security-Policy' , contentSecurityPolicyHeaderValue ) const response = NextResponse .next ({ request : { headers : requestHeaders , } , }) response . headers .set ( 'Content-Security-Policy' , contentSecurityPolicyHeaderValue ) return response }"
                },
                {
                    "type": "p",
                    "text": "By default, Middleware runs on all requests. You can filter Middleware to run on specific paths using a matcher . We recommend ignoring matching prefetches (from next/link ) and static assets that don't need the CSP header."
                },
                {
                    "type": "code",
                    "code": "export const config = { matcher : [ /* * Match all request paths except for the ones starting with: * - api (API routes) * - _next/static (static files) * - _next/image (image optimization files) * - favicon.ico (favicon file) */ { source : '/((?!api|_next/static|_next/image|favicon.ico).*)' , missing : [ { type : 'header' , key : 'next-router-prefetch' } , { type : 'header' , key : 'purpose' , value : 'prefetch' } , ] , } , ] , }"
                },
                {
                    "type": "p",
                    "text": "You can now read the nonce from a Server Component using headers :"
                },
                {
                    "type": "code",
                    "code": "import { headers } from 'next/headers' import Script from 'next/script' export default async function Page () { const nonce = ( await headers ()) .get ( 'x-nonce' ) return ( < Script src = \"https://www.googletagmanager.com/gtag/js\" strategy = \"afterInteractive\" nonce = {nonce} /> ) }"
                },
                {
                    "type": "p",
                    "text": "For applications that do not require nonces, you can set the CSP header directly in your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "const cspHeader = ` default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' blob: data:; font-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests; ` module . exports = { async headers () { return [ { source : '/(.*)' , headers : [ { key : 'Content-Security-Policy' , value : cspHeader .replace ( /\\n/ g , '' ) , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "We recommend using v13.4.20+ of Next.js to properly handle and apply nonces."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/custom-server",
            "title": "Configuring: Custom Server | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js includes its own server with next start by default. If you have an existing backend, you can still use it with Next.js (this is not a custom server). A custom Next.js server allows you to programmatically start a server for custom patterns. The majority of the time, you will not need this approach. However, it's available if you need to eject."
                },
                {
                    "type": "list",
                    "items": [
                        "Before deciding to use a custom server, keep in mind that it should only be used when the integrated router of Next.js can't meet your app requirements. A custom server will remove important performance optimizations, like Automatic Static Optimization .",
                        "A custom server cannot be deployed on Vercel .",
                        "When using standalone output mode, it does not trace custom server files. This mode outputs a separate minimal server.js file, instead. These cannot be used together."
                    ]
                },
                {
                    "type": "p",
                    "text": "Take a look at the following example of a custom server:"
                },
                {
                    "type": "code",
                    "code": "import { createServer } from 'http' import { parse } from 'url' import next from 'next' const port = parseInt ( process . env . PORT || '3000' , 10 ) const dev = process . env . NODE_ENV !== 'production' const app = next ({ dev }) const handle = app .getRequestHandler () app .prepare () .then (() => { createServer ((req , res) => { const parsedUrl = parse ( req .url ! , true ) handle (req , res , parsedUrl) }) .listen (port) console .log ( `> Server listening at http://localhost: ${ port } as ${ dev ? 'development' : process . env . NODE_ENV } ` ) })"
                },
                {
                    "type": "p",
                    "text": "server.js does not run through the Next.js Compiler or bundling process. Make sure the syntax and source code this file requires are compatible with the current Node.js version you are using. View an example . To run the custom server, you'll need to update the scripts in package.json like so:"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"node server.js\" , \"build\" : \"next build\" , \"start\" : \"NODE_ENV=production node server.js\" } }"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can set up nodemon ( example ). The custom server uses the following import to connect the server with the Next.js application:"
                },
                {
                    "type": "code",
                    "code": "import next from 'next' const app = next ({})"
                },
                {
                    "type": "p",
                    "text": "The above next import is a function that receives an object with the following options: The returned app can then be used to let Next.js handle requests as required."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/debugging",
            "title": "Configuring: Debugging | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This documentation explains how you can debug your Next.js frontend and backend code with full source maps support using the VS Code debugger , Chrome DevTools , or Firefox DevTools . Any debugger that can attach to Node.js can also be used to debug a Next.js application. You can find more details in the Node.js Debugging Guide . Create a file named .vscode/launch.json at the root of your project with the following content:"
                },
                {
                    "type": "code",
                    "code": "{ \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Next.js: debug server-side\" , \"type\" : \"node-terminal\" , \"request\" : \"launch\" , \"command\" : \"npm run dev\" } , { \"name\" : \"Next.js: debug client-side\" , \"type\" : \"chrome\" , \"request\" : \"launch\" , \"url\" : \"http://localhost:3000\" } , { \"name\" : \"Next.js: debug client-side (Firefox)\" , \"type\" : \"firefox\" , \"request\" : \"launch\" , \"url\" : \"http://localhost:3000\" , \"reAttach\" : true , \"pathMappings\" : [ { \"url\" : \"webpack://_N_E\" , \"path\" : \"${workspaceFolder}\" } ] } , { \"name\" : \"Next.js: debug full stack\" , \"type\" : \"node\" , \"request\" : \"launch\" , \"program\" : \"${workspaceFolder}/node_modules/.bin/next\" , \"runtimeArgs\" : [ \"--inspect\" ] , \"skipFiles\" : [ \"<node_internals>/**\" ] , \"serverReadyAction\" : { \"action\" : \"debugWithEdge\" , \"killOnServerStop\" : true , \"pattern\" : \"- Local:.+(https?://.+)\" , \"uriFormat\" : \"%s\" , \"webRoot\" : \"${workspaceFolder}\" } } ] }"
                },
                {
                    "type": "p",
                    "text": "Note : To use Firefox debugging in VS Code, you'll need to install the Firefox Debugger extension . npm run dev can be replaced with yarn dev if you're using Yarn or pnpm dev if you're using pnpm. In the \"Next.js: debug full stack\" configuration, serverReadyAction.action specifies which browser to open when the server is ready. debugWithEdge means to launch the Edge browser. If you are using Chrome, change this value to debugWithChrome . If you're changing the port number your application starts on, replace the 3000 in http://localhost:3000 with the port you're using instead. If you're running Next.js from a directory other than root (for example, if you're using Turborepo) then you need to add cwd to the server-side and full stack debugging tasks. For example, \"cwd\": \"${workspaceFolder}/apps/web\" . Now go to the Debug panel ( Ctrl+Shift+D on Windows/Linux, ⇧+⌘+D on macOS), select a launch configuration, then press F5 or select Debug: Start Debugging from the Command Palette to start your debugging session. Click the drop down menu listing the runtime configuration, and click Edit Configurations... . Create a JavaScript Debug debug configuration with http://localhost:3000 as the URL. Customize to your liking (e.g. Browser for debugging, store as project file), and click OK . Run this debug configuration, and the selected browser should automatically open. At this point, you should have 2 applications in debug mode: the NextJS node application, and the client/browser application. Start your development server as usual by running next dev , npm run dev , or yarn dev . Once the server starts, open http://localhost:3000 (or your alternate URL) in your preferred browser."
                },
                {
                    "type": "list",
                    "items": [
                        "Open Chrome's Developer Tools ( Ctrl+Shift+J on Windows/Linux, ⌥+⌘+I on macOS)",
                        "Go to the Sources tab"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Open Firefox's Developer Tools ( Ctrl+Shift+I on Windows/Linux, ⌥+⌘+I on macOS)",
                        "Go to the Debugger tab"
                    ]
                },
                {
                    "type": "p",
                    "text": "In either browser, any time your client-side code reaches a debugger statement, code execution will pause and that file will appear in the debug area. You can also search for files to set breakpoints manually:"
                },
                {
                    "type": "list",
                    "items": [
                        "In Chrome: Press Ctrl+P on Windows/Linux or ⌘+P on macOS",
                        "In Firefox: Press Ctrl+P on Windows/Linux or ⌘+P on macOS, or use the file tree in the left panel"
                    ]
                },
                {
                    "type": "p",
                    "text": "Note that when searching, your source files will have paths starting with webpack://_N_E/./ . To debug server-side Next.js code with browser DevTools, you need to pass the --inspect flag to the underlying Node.js process:"
                },
                {
                    "type": "code",
                    "code": "NODE_OPTIONS = '--inspect' next dev"
                },
                {
                    "type": "p",
                    "text": "Good to know : Use NODE_OPTIONS='--inspect=0.0.0.0' to allow remote debugging access outside localhost, such as when running the app in a Docker container. If you're using npm run dev or yarn dev then you should update the dev script on your package.json :"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"NODE_OPTIONS='--inspect' next dev\" } }"
                },
                {
                    "type": "p",
                    "text": "Launching the Next.js dev server with the --inspect flag will look something like this:"
                },
                {
                    "type": "code",
                    "code": "Debugger listening on ws://127.0.0.1: 9229 /0cf90313-350d- 4466 -a748-cd60f4e47c95 For help, see: https://nodejs.org/en/docs/inspector ready - started server on 0.0.0.0: 3000 , url: http://localhost: 3000"
                },
                {
                    "type": "list",
                    "items": [
                        "Open a new tab and visit chrome://inspect",
                        "Look for your Next.js application in the Remote Target section",
                        "Click inspect to open a separate DevTools window",
                        "Go to the Sources tab"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Open a new tab and visit about:debugging",
                        "Click This Firefox in the left sidebar",
                        "Under Remote Targets , find your Next.js application",
                        "Click Inspect to open the debugger",
                        "Go to the Debugger tab"
                    ]
                },
                {
                    "type": "p",
                    "text": "Debugging server-side code works similarly to client-side debugging. When searching for files ( Ctrl+P / ⌘+P ), your source files will have paths starting with webpack://{application-name}/./ (where {application-name} will be replaced with the name of your application according to your package.json file). When you encounter an error, inspecting the source code can help trace the root cause of errors. Next.js will display a Node.js logo like a green button on the dev overlay. By clicking that button, the DevTools URL is copied to your clipboard. You can open a new browser tab with that URL to inspect the Next.js server process. Windows users may run into an issue when using NODE_OPTIONS='--inspect' as that syntax is not supported on Windows platforms. To get around this, install the cross-env package as a development dependency ( -D with npm and yarn ) and replace the dev script with the following."
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"cross-env NODE_OPTIONS='--inspect' next dev\" } }"
                },
                {
                    "type": "p",
                    "text": "cross-env will set the NODE_OPTIONS environment variable regardless of which platform you are on (including Mac, Linux, and Windows) and allow you to debug consistently across devices and operating systems. Good to know : Ensure Windows Defender is disabled on your machine. This external service will check every file read , which has been reported to greatly increase Fast Refresh time with next dev . This is a known issue, not related to Next.js, but it does affect Next.js development. To learn more about how to use a JavaScript debugger, take a look at the following documentation:"
                },
                {
                    "type": "list",
                    "items": [
                        "Node.js debugging in VS Code: Breakpoints",
                        "Chrome DevTools: Debug JavaScript",
                        "Firefox DevTools: Debugger"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode",
            "title": "Configuring: Draft Mode | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Draft Mode allows you to preview draft content from your headless CMS in your Next.js application. This is useful for static pages that are generated at build time as it allows you to switch to dynamic rendering and see the draft changes without having to rebuild your entire site. This page walks through how to enable and use Draft Mode. Create a Route Handler . It can have any name, for example, app/api/draft/route.ts ."
                },
                {
                    "type": "code",
                    "code": "export async function GET (request : Request ) { return new Response ( '' ) }"
                },
                {
                    "type": "p",
                    "text": "Then, import the draftMode function and call the enable() method."
                },
                {
                    "type": "code",
                    "code": "import { draftMode } from 'next/headers' export async function GET (request : Request ) { const draft = await draftMode () draft .enable () return new Response ( 'Draft mode is enabled' ) }"
                },
                {
                    "type": "p",
                    "text": "This will set a cookie to enable draft mode. Subsequent requests containing this cookie will trigger draft mode and change the behavior of statically generated pages. You can test this manually by visiting /api/draft and looking at your browser’s developer tools. Notice the Set-Cookie response header with a cookie named __prerender_bypass . These steps assume that the headless CMS you’re using supports setting custom draft URLs . If it doesn’t, you can still use this method to secure your draft URLs, but you’ll need to construct and access the draft URL manually. The specific steps will vary depending on which headless CMS you’re using. To securely access the Route Handler from your headless CMS:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a secret token string using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS.",
                        "If your headless CMS supports setting custom draft URLs, specify a draft URL (this assumes that your Route Handler is located at app/api/draft/route.ts ). For example:"
                    ]
                },
                {
                    "type": "code",
                    "code": "https://<your-site>/api/draft?secret=<token> & slug =< pat h >"
                },
                {
                    "type": "list",
                    "items": [
                        "<your-site> should be your deployment domain.",
                        "<token> should be replaced with the secret token you generated.",
                        "<path> should be the path for the page that you want to view. If you want to view /posts/one , then you should use &slug=/posts/one ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Your headless CMS might allow you to include a variable in the draft URL so that <path> can be set dynamically based on the CMS’s data like so: &slug=/posts/{entry.fields.slug}"
                },
                {
                    "type": "list",
                    "items": [
                        "In your Route Handler, check that the secret matches and that the slug parameter exists (if not, the request should fail), call draftMode.enable() to set the cookie. Then, redirect the browser to the path specified by slug :"
                    ]
                },
                {
                    "type": "code",
                    "code": "import { draftMode } from 'next/headers' import { redirect } from 'next/navigation' export async function GET (request : Request ) { // Parse query string parameters const { searchParams } = new URL ( request .url) const secret = searchParams .get ( 'secret' ) const slug = searchParams .get ( 'slug' ) // Check the secret and next parameters // This secret should only be known to this Route Handler and the CMS if (secret !== 'MY_SECRET_TOKEN' || ! slug) { return new Response ( 'Invalid token' , { status : 401 }) } // Fetch the headless CMS to check if the provided `slug` exists // getPostBySlug would implement the required fetching logic to the headless CMS const post = await getPostBySlug (slug) // If the slug doesn't exist prevent draft mode from being enabled if ( ! post) { return new Response ( 'Invalid slug' , { status : 401 }) } // Enable Draft Mode by setting the cookie const draft = await draftMode () draft .enable () // Redirect to the path from the fetched post // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities redirect ( post .slug) }"
                },
                {
                    "type": "p",
                    "text": "If it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie. The next step is to update your page to check the value of draftMode().isEnabled . If you request a page which has the cookie set, then data will be fetched at request time (instead of at build time). Furthermore, the value of isEnabled will be true ."
                },
                {
                    "type": "code",
                    "code": "// page that fetches data import { draftMode } from 'next/headers' async function getData () { const { isEnabled } = await draftMode () const url = isEnabled ? 'https://draft.example.com' : 'https://production.example.com' const res = await fetch (url) return res .json () } export default async function Page () { const { title , desc } = await getData () return ( < main > < h1 >{title}</ h1 > < p >{desc}</ p > </ main > ) }"
                },
                {
                    "type": "p",
                    "text": "If you access the draft Route Handler (with secret and slug ) from your headless CMS or manually using the URL, you should now be able to see the draft content. And, if you update your draft without publishing, you should be able to view the draft."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/environment-variables",
            "title": "Configuring: Environment Variables | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js comes with built-in support for environment variables, which allows you to do the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use .env to load environment variables",
                        "Bundle environment variables for the browser by prefixing with NEXT_PUBLIC_"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js has built-in support for loading environment variables from .env* files into process.env ."
                },
                {
                    "type": "code",
                    "code": "DB_HOST=localhost DB_USER=myuser DB_PASS=mypassword"
                },
                {
                    "type": "p",
                    "text": "Note : Next.js also supports multiline variables inside of your .env* files:"
                },
                {
                    "type": "code",
                    "code": "# .env # you can write with line breaks PRIVATE_KEY = \"-----BEGIN RSA PRIVATE KEY----- ... Kh9NV... ... -----END DSA PRIVATE KEY-----\" # or with `\\n` inside double quotes PRIVATE_KEY = \"-----BEGIN RSA PRIVATE KEY-----\\nKh9NV...\\n-----END DSA PRIVATE KEY-----\\n\""
                },
                {
                    "type": "p",
                    "text": "Note : If you are using a /src folder, please note that Next.js will load the .env files only from the parent folder and not from the /src folder.\nThis loads process.env.DB_HOST , process.env.DB_USER , and process.env.DB_PASS into the Node.js environment automatically allowing you to use them in Route Handlers ."
                },
                {
                    "type": "code",
                    "code": "export async function GET () { const db = await myDB .connect ({ host : process . env . DB_HOST , username : process . env . DB_USER , password : process . env . DB_PASS , }) // ... }"
                },
                {
                    "type": "p",
                    "text": "If you need to load environment variables outside of the Next.js runtime, such as in a root config file for an ORM or test runner, you can use the @next/env package. This package is used internally by Next.js to load environment variables from .env* files. To use it, install the package and use the loadEnvConfig function to load the environment variables:"
                },
                {
                    "type": "code",
                    "code": "npm install @next/env"
                },
                {
                    "type": "code",
                    "code": "import { loadEnvConfig } from '@next/env' const projectDir = process .cwd () loadEnvConfig (projectDir)"
                },
                {
                    "type": "p",
                    "text": "Then, you can import the configuration where needed. For example:"
                },
                {
                    "type": "code",
                    "code": "import './envConfig.ts' export default defineConfig ({ dbCredentials : { connectionString : process . env . DATABASE_URL ! , } , })"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically expand variables that use $ to reference other variables e.g. $VARIABLE inside of your .env* files. This allows you to reference other secrets. For example:"
                },
                {
                    "type": "code",
                    "code": "TWITTER_USER=nextjs TWITTER_URL=https://x.com/$TWITTER_USER"
                },
                {
                    "type": "p",
                    "text": "In the above example, process.env.TWITTER_URL would be set to https://x.com/nextjs . Good to know : If you need to use variable with a $ in the actual value, it needs to be escaped e.g. \\$ . Non- NEXT_PUBLIC_ environment variables are only available in the Node.js environment, meaning they aren't accessible to the browser (the client runs in a different environment ). In order to make the value of an environment variable accessible in the browser, Next.js can \"inline\" a value, at build time, into the js bundle that is delivered to the client, replacing all references to process.env.[variable] with a hard-coded value. To tell it to do this, you just have to prefix the variable with NEXT_PUBLIC_ . For example:"
                },
                {
                    "type": "code",
                    "code": "NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk"
                },
                {
                    "type": "p",
                    "text": "This will tell Next.js to replace all references to process.env.NEXT_PUBLIC_ANALYTICS_ID in the Node.js environment with the value from the environment in which you run next build , allowing you to use it anywhere in your code. It will be inlined into any JavaScript sent to the browser. Note : After being built, your app will no longer respond to changes to these environment variables. For instance, if you use a Heroku pipeline to promote slugs built in one environment to another environment, or if you build and deploy a single Docker image to multiple environments, all NEXT_PUBLIC_ variables will be frozen with the value evaluated at build time, so these values need to be set appropriately when the project is built. If you need access to runtime environment values, you'll have to setup your own API to provide them to the client (either on demand or during initialization)."
                },
                {
                    "type": "code",
                    "code": "import setupAnalyticsService from '../lib/my-analytics-service' // 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'. // It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`. setupAnalyticsService ( process . env . NEXT_PUBLIC_ANALYTICS_ID ) function HomePage () { return < h1 >Hello World</ h1 > } export default HomePage"
                },
                {
                    "type": "p",
                    "text": "Note that dynamic lookups will not be inlined, such as:"
                },
                {
                    "type": "code",
                    "code": "// This will NOT be inlined, because it uses a variable const varName = 'NEXT_PUBLIC_ANALYTICS_ID' setupAnalyticsService ( process .env[varName]) // This will NOT be inlined, because it uses a variable const env = process .env setupAnalyticsService ( env . NEXT_PUBLIC_ANALYTICS_ID )"
                },
                {
                    "type": "p",
                    "text": "Next.js can support both build time and runtime environment variables. By default, environment variables are only available on the server . To expose an environment variable to the browser, it must be prefixed with NEXT_PUBLIC_ . However, these public environment variables will be inlined into the JavaScript bundle during next build . You can safely read environment variables on the server during dynamic rendering:"
                },
                {
                    "type": "code",
                    "code": "import { connection } from 'next/server' export default async function Component () { await connection () // cookies, headers, and other Dynamic APIs // will also opt into dynamic rendering, meaning // this env variable is evaluated at runtime const value = process . env . MY_VALUE // ... }"
                },
                {
                    "type": "p",
                    "text": "This allows you to use a singular Docker image that can be promoted through multiple environments with different values."
                },
                {
                    "type": "list",
                    "items": [
                        "You can run code on server startup using the register function .",
                        "We do not recommend using the runtimeConfig option, as this does not work with the standalone output mode. Instead, we recommend incrementally adopting the App Router."
                    ]
                },
                {
                    "type": "p",
                    "text": "Typically, only .env* file is needed. However, sometimes you might want to add some defaults for the development ( next dev ) or production ( next start ) environment. Next.js allows you to set defaults in .env (all environments), .env.development (development environment), and .env.production (production environment). Good to know : .env , .env.development , and .env.production files should be included in your repository as they define defaults. All .env files are excluded in .gitignore by default, allowing you to opt-into committing these values to your repository. When deploying your Next.js application to Vercel , Environment Variables can be configured in the Project Settings . All types of Environment Variables should be configured there. Even Environment Variables used in Development – which can be downloaded onto your local device afterwards. If you've configured Development Environment Variables you can pull them into a .env.local for usage on your local machine using the following command:"
                },
                {
                    "type": "code",
                    "code": "vercel env pull"
                },
                {
                    "type": "p",
                    "text": "Good to know : When deploying your Next.js application to Vercel , your environment variables in .env* files will not be made available to Edge Runtime, unless their name are prefixed with NEXT_PUBLIC_ . We strongly recommend managing your environment variables in Project Settings instead, from where all environment variables are available. Apart from development and production environments, there is a 3rd option available: test . In the same way you can set defaults for development or production environments, you can do the same with a .env.test file for the testing environment (though this one is not as common as the previous two). Next.js will not load environment variables from .env.development or .env.production in the testing environment. This one is useful when running tests with tools like jest or cypress where you need to set specific environment vars only for testing purposes. Test default values will be loaded if NODE_ENV is set to test , though you usually don't need to do this manually as testing tools will address it for you. There is a small difference between test environment, and both development and production that you need to bear in mind: .env.local won't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use the same env defaults across different executions by ignoring your .env.local (which is intended to override the default set). Good to know : similar to Default Environment Variables, .env.test file should be included in your repository, but .env.test.local shouldn't, as .env*.local are intended to be ignored through .gitignore . While running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging the loadEnvConfig function from the @next/env package."
                },
                {
                    "type": "code",
                    "code": "// The below can be used in a Jest global setup file or similar for your testing set-up import { loadEnvConfig } from '@next/env' export default async () => { const projectDir = process .cwd () loadEnvConfig (projectDir) }"
                },
                {
                    "type": "p",
                    "text": "Environment variables are looked up in the following places, in order, stopping once the variable is found."
                },
                {
                    "type": "list",
                    "items": [
                        "process.env",
                        ".env.$(NODE_ENV).local",
                        ".env.local (Not checked when NODE_ENV is test .)",
                        ".env.$(NODE_ENV)",
                        ".env"
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, if NODE_ENV is development and you define a variable in both .env.development.local and .env , the value in .env.development.local will be used. Good to know : The allowed values for NODE_ENV are production , development and test ."
                },
                {
                    "type": "list",
                    "items": [
                        "If you are using a /src directory , .env.* files should remain in the root of your project.",
                        "If the environment variable NODE_ENV is unassigned, Next.js automatically assigns development when running the next dev command, or production for all other commands."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx",
            "title": "Configuring: MDX | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Markdown is a lightweight markup language used to format text. It allows you to write using plain text syntax and convert it to structurally valid HTML. It's commonly used for writing content on websites and blogs."
                },
                {
                    "type": "code",
                    "code": "I **love** using [ Next.js ] (https://nextjs.org/)"
                },
                {
                    "type": "code",
                    "code": "< p >I < strong >love</ strong > using < a href = \"https://nextjs.org/\" >Next.js</ a ></ p >"
                },
                {
                    "type": "p",
                    "text": "MDX is a superset of markdown that lets you write JSX directly in your markdown files. It is a powerful way to add dynamic interactivity and embed React components within your content. Next.js can support both local MDX content inside your application, as well as remote MDX files fetched dynamically on the server. The Next.js plugin handles transforming markdown and React components into HTML, including support for usage in Server Components (the default in App Router). Good to know : View the Portfolio Starter Kit template for a complete working example. The @next/mdx package, and related packages, are used to configure Next.js so it can process markdown and MDX. It sources data from local files , allowing you to create pages with a .md or .mdx extension, directly in your /pages or /app directory. Install these packages to render MDX with Next.js:"
                },
                {
                    "type": "code",
                    "code": "npm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx"
                },
                {
                    "type": "p",
                    "text": "Update the next.config.mjs file at your project's root to configure it to use MDX:"
                },
                {
                    "type": "code",
                    "code": "import createMDX from '@next/mdx' /** @type {import('next').NextConfig} */ const nextConfig = { // Configure `pageExtensions` to include markdown and MDX files pageExtensions : [ 'js' , 'jsx' , 'md' , 'mdx' , 'ts' , 'tsx' ] , // Optionally, add any other Next.js config below } const withMDX = createMDX ({ // Add markdown plugins here, as desired }) // Merge MDX config with Next.js config export default withMDX (nextConfig)"
                },
                {
                    "type": "p",
                    "text": "This allows .md and .mdx files to act as pages, routes, or imports in your application. Create an mdx-components.tsx (or .js ) file in the root of your project to define global MDX Components. For example, at the same level as pages or app , or inside src if applicable."
                },
                {
                    "type": "code",
                    "code": "import type { MDXComponents } from 'mdx/types' export function useMDXComponents (components : MDXComponents ) : MDXComponents { return { ... components , } }"
                },
                {
                    "type": "list",
                    "items": [
                        "mdx-components.tsx is required to use @next/mdx with App Router and will not work without it.",
                        "Learn more about the mdx-components.tsx file convention .",
                        "Learn how to use custom styles and components ."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can render MDX using Next.js's file based routing or by importing MDX files into other pages. When using file based routing, you can use MDX pages like any other page. In App Router apps, that includes being able to use metadata . Create a new MDX page within the /app directory:"
                },
                {
                    "type": "code",
                    "code": "my-project ├── app │   └── mdx-page │       └── page.(mdx/md) |── mdx-components.(tsx/js) └── package.json"
                },
                {
                    "type": "p",
                    "text": "You can use MDX in these files, and even import React components, directly inside your MDX page:"
                },
                {
                    "type": "code",
                    "code": "import { MyComponent } from 'my-component' # Welcome to my MDX page ! This is some ** bold ** and _italics_ text. This is a list in markdown : - One - Two - Three Checkout my React component : < MyComponent />"
                },
                {
                    "type": "p",
                    "text": "Navigating to the /mdx-page route should display your rendered MDX page. Create a new page within the /app directory and an MDX file wherever you'd like:"
                },
                {
                    "type": "code",
                    "code": "my-project ├── app │   └── mdx-page │       └── page.(tsx/js) ├── markdown │   └── welcome.(mdx/md) |── mdx-components.(tsx/js) └── package.json"
                },
                {
                    "type": "p",
                    "text": "You can use MDX in these files, and even import React components, directly inside your MDX page: Import the MDX file inside the page to display the content:"
                },
                {
                    "type": "code",
                    "code": "import Welcome from '@/markdown/welcome.mdx' export default function Page () { return < Welcome /> }"
                },
                {
                    "type": "p",
                    "text": "Navigating to the /mdx-page route should display your rendered MDX page. You can import dynamic MDX components instead of using filesystem routing for MDX files. For example, you can have a dynamic route segment which loads MDX components from a separate directory: generateStaticParams can be used to prerender the provided routes. By marking dynamicParams as false , accessing a route not defined in generateStaticParams will 404."
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ params , } : { params : Promise <{ slug : string }> }) { const slug = ( await params).slug const { default: Post } = await import ( `@/content/ ${ slug } .mdx` ) return < Post /> } export function generateStaticParams () { return [{ slug : 'welcome' } , { slug : 'about' }] } export const dynamicParams = false"
                },
                {
                    "type": "p",
                    "text": "Good to know : Ensure you specify the .mdx file extension in your import. While it is not required to use module path aliases (e.g., @/content ), it does simplify your import path. Markdown, when rendered, maps to native HTML elements. For example, writing the following markdown:"
                },
                {
                    "type": "code",
                    "code": "## This is a heading This is a list in markdown: - One - Two - Three"
                },
                {
                    "type": "code",
                    "code": "< h2 >This is a heading</ h2 > < p >This is a list in markdown:</ p > < ul > < li >One</ li > < li >Two</ li > < li >Three</ li > </ ul >"
                },
                {
                    "type": "p",
                    "text": "To style your markdown, you can provide custom components that map to the generated HTML elements. Styles and components can be implemented globally, locally, and with shared layouts. Adding styles and components in mdx-components.tsx will affect all MDX files in your application."
                },
                {
                    "type": "code",
                    "code": "import type { MDXComponents } from 'mdx/types' import Image , { ImageProps } from 'next/image' // This file allows you to provide custom React components // to be used in MDX files. You can import and use any // React component you want, including inline styles, // components from other libraries, and more. export function useMDXComponents (components : MDXComponents ) : MDXComponents { return { // Allows customizing built-in components, e.g. to add styling. h1 : ({ children }) => ( < h1 style = {{ color : 'red' , fontSize : '48px' }}>{children}</ h1 > ) , img : (props) => ( < Image sizes = \"100vw\" style = {{ width : '100%' , height : 'auto' }} { ... (props as ImageProps )} /> ) , ... components , } }"
                },
                {
                    "type": "p",
                    "text": "You can apply local styles and components to specific pages by passing them into imported MDX components. These will merge with and override global styles and components ."
                },
                {
                    "type": "code",
                    "code": "import Welcome from '@/markdown/welcome.mdx' function CustomH1 ({ children }) { return < h1 style = {{ color : 'blue' , fontSize : '100px' }}>{children}</ h1 > } const overrideComponents = { h1 : CustomH1 , } export default function Page () { return < Welcome components = {overrideComponents} /> }"
                },
                {
                    "type": "p",
                    "text": "To share a layout across MDX pages, you can use the built-in layouts support with the App Router."
                },
                {
                    "type": "code",
                    "code": "export default function MdxLayout ({ children } : { children : React . ReactNode }) { // Create any shared layout or styles here return < div style = {{ color : 'blue' }}>{children}</ div > }"
                },
                {
                    "type": "p",
                    "text": "If you are using Tailwind to style your application, using the @tailwindcss/typography plugin will allow you to reuse your Tailwind configuration and styles in your markdown files. The plugin adds a set of prose classes that can be used to add typographic styles to content blocks that come from sources, like markdown. Install Tailwind typography and use with shared layouts to add the prose you want."
                },
                {
                    "type": "code",
                    "code": "export default function MdxLayout ({ children } : { children : React . ReactNode }) { // Create any shared layout or styles here return ( < div className = \"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\" > {children} </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Frontmatter is a YAML like key/value pairing that can be used to store data about a page. @next/mdx does not support frontmatter by default, though there are many solutions for adding frontmatter to your MDX content, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "remark-frontmatter",
                        "remark-mdx-frontmatter",
                        "gray-matter"
                    ]
                },
                {
                    "type": "p",
                    "text": "@next/mdx does allow you to use exports like any other JavaScript component: Metadata can now be referenced outside of the MDX file:"
                },
                {
                    "type": "code",
                    "code": "import BlogPost , { metadata } from '@/content/ blog -post.mdx' export default function Page () { console .log ( 'metadata: ' , metadata) //=> { author: 'John Doe' } return < BlogPost /> }"
                },
                {
                    "type": "p",
                    "text": "A common use case for this is when you want to iterate over a collection of MDX and extract data. For example, creating a blog index page from all blog posts. You can use packages like Node's fs module or globby to read a directory of posts and extract the metadata."
                },
                {
                    "type": "list",
                    "items": [
                        "Using fs , globby , etc. can only be used server-side.",
                        "View the Portfolio Starter Kit template for a complete working example."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can optionally provide remark and rehype plugins to transform the MDX content. For example, you can use remark-gfm to support GitHub Flavored Markdown. Since the remark and rehype ecosystem is ESM only, you'll need to use next.config.mjs or next.config.ts as the configuration file."
                },
                {
                    "type": "code",
                    "code": "import remarkGfm from 'remark-gfm' import createMDX from '@next/mdx' /** @type {import('next').NextConfig} */ const nextConfig = { // Allow .mdx extensions for files pageExtensions : [ 'js' , 'jsx' , 'md' , 'mdx' , 'ts' , 'tsx' ] , // Optionally, add any other Next.js config below } const withMDX = createMDX ({ // Add markdown plugins here, as desired options : { remarkPlugins : [remarkGfm] , rehypePlugins : [] , } , }) // Combine MDX and Next.js config export default withMDX (nextConfig)"
                },
                {
                    "type": "p",
                    "text": "To use plugins with Turbopack , upgrade to the latest @next/mdx and specify plugin names using a string:"
                },
                {
                    "type": "code",
                    "code": "import createMDX from '@next/mdx' /** @type {import('next').NextConfig} */ const nextConfig = { pageExtensions : [ 'js' , 'jsx' , 'md' , 'mdx' , 'ts' , 'tsx' ] , } const withMDX = createMDX ({ options : { remarkPlugins : [] , rehypePlugins : [[ 'rehype-katex' , { strict : true , throwOnError : true }]] , } , }) export default withMDX (nextConfig)"
                },
                {
                    "type": "p",
                    "text": "remark and rehype plugins without serializable options cannot be used yet with Turbopack , due to inability to pass JavaScript functions to Rust If your MDX files or content lives somewhere else , you can fetch it dynamically on the server. This is useful for content stored in a CMS, database, or anywhere else. A popular community package for this use is next-mdx-remote . Good to know : Please proceed with caution. MDX compiles to JavaScript and is executed on the server. You should only fetch MDX content from a trusted source, otherwise this can lead to remote code execution (RCE). The following example uses next-mdx-remote :"
                },
                {
                    "type": "code",
                    "code": "import { MDXRemote } from 'next-mdx-remote/rsc' export default async function RemoteMdxPage () { // MDX text - can be from a database, CMS, fetch, anywhere... const res = await fetch ( 'https://...' ) const markdown = await res .text () return < MDXRemote source = {markdown} /> }"
                },
                {
                    "type": "p",
                    "text": "Navigating to the /mdx-page-remote route should display your rendered MDX. React does not natively understand markdown. The markdown plaintext needs to first be transformed into HTML. This can be accomplished with remark and rehype . remark is an ecosystem of tools around markdown. rehype is the same, but for HTML. For example, the following code snippet transforms markdown into HTML:"
                },
                {
                    "type": "code",
                    "code": "import { unified } from 'unified' import remarkParse from 'remark-parse' import remarkRehype from 'remark-rehype' import rehypeSanitize from 'rehype-sanitize' import rehypeStringify from 'rehype-stringify' main () async function main () { const file = await unified () .use (remarkParse) // Convert into markdown AST .use (remarkRehype) // Transform to HTML AST .use (rehypeSanitize) // Sanitize HTML input .use (rehypeStringify) // Convert AST into serialized HTML .process ( 'Hello, Next.js!' ) console .log ( String (file)) // <p>Hello, Next.js!</p> }"
                },
                {
                    "type": "p",
                    "text": "The remark and rehype ecosystem contains plugins for syntax highlighting , linking headings , generating a table of contents , and more. When using @next/mdx as shown above, you do not need to use remark or rehype directly, as it is handled for you. We're describing it here for a deeper understanding of what the @next/mdx package is doing underneath. Next.js supports a new MDX compiler written in Rust. This compiler is still experimental and is not recommended for production use. To use the new compiler, you need to configure next.config.js when you pass it to withMDX :"
                },
                {
                    "type": "code",
                    "code": "module . exports = withMDX ({ experimental : { mdxRs : true , } , })"
                },
                {
                    "type": "p",
                    "text": "mdxRs also accepts an object to configure how to transform mdx files."
                },
                {
                    "type": "code",
                    "code": "module . exports = withMDX ({ experimental : { mdxRs : { jsxRuntime? : string // Custom jsx runtime jsxImportSource ?: string // Custom jsx import source, mdxType ?: 'gfm' | 'commonmark' // Configure what kind of mdx syntax will be used to parse & transform } , } , })"
                },
                {
                    "type": "list",
                    "items": [
                        "MDX",
                        "@next/mdx",
                        "remark",
                        "rehype",
                        "Markdoc"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/progressive-web-apps",
            "title": "Configuring: Progressive Web Applications (PWA) | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Progressive Web Applications (PWAs) offer the reach and accessibility of web applications combined with the features and user experience of native mobile apps. With Next.js, you can create PWAs that provide a seamless, app-like experience across all platforms without the need for multiple codebases or app store approvals."
                },
                {
                    "type": "list",
                    "items": [
                        "Deploy updates instantly without waiting for app store approval",
                        "Create cross-platform applications with a single codebase",
                        "Provide native-like features such as home screen installation and push notifications"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js provides built-in support for creating a web app manifest using the App Router. You can create either a static or dynamic manifest file: For example, create a app/manifest.ts or app/manifest.json file:"
                },
                {
                    "type": "code",
                    "code": "import type { MetadataRoute } from 'next' export default function manifest () : MetadataRoute . Manifest { return { name : 'Next.js PWA' , short_name : 'NextPWA' , description : 'A Progressive Web App built with Next.js' , start_url : '/' , display : 'standalone' , background_color : '#ffffff' , theme_color : '#000000' , icons : [ { src : '/icon-192x192.png' , sizes : '192x192' , type : 'image/png' , } , { src : '/icon-512x512.png' , sizes : '512x512' , type : 'image/png' , } , ] , } }"
                },
                {
                    "type": "p",
                    "text": "This file should contain information about the name, icons, and how it should be displayed as an icon on the user's device. This will allow users to install your PWA on their home screen, providing a native app-like experience. You can use tools like favicon generators to create the different icon sets and place the generated files in your public/ folder. Web Push Notifications are supported with all modern browsers, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "iOS 16.4+ for applications installed to the home screen",
                        "Safari 16 for macOS 13 or later",
                        "Chromium based browsers",
                        "Firefox"
                    ]
                },
                {
                    "type": "p",
                    "text": "This makes PWAs a viable alternative to native apps. Notably, you can trigger install prompts without needing offline support. Web Push Notifications allow you to re-engage users even when they're not actively using your app. Here's how to implement them in a Next.js application: First, let's create the main page component in app/page.tsx . We'll break it down into smaller parts for better understanding. First, we’ll add some of the imports and utilities we’ll need. It’s okay that the referenced Server Actions do not yet exist:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState , useEffect } from 'react' import { subscribeUser , unsubscribeUser , sendNotification } from './actions' function urlBase64ToUint8Array (base64String : string ) { const padding = '=' .repeat (( 4 - ( base64String . length % 4 )) % 4 ) const base64 = (base64String + padding) .replace ( /-/ g , '+' ) .replace ( /_/ g , '/' ) const rawData = window .atob (base64) const outputArray = new Uint8Array ( rawData . length ) for ( let i = 0 ; i < rawData . length ; ++ i) { outputArray[i] = rawData .charCodeAt (i) } return outputArray }"
                },
                {
                    "type": "p",
                    "text": "Let’s now add a component to manage subscribing, unsubscribing, and sending push notifications."
                },
                {
                    "type": "code",
                    "code": "function PushNotificationManager () { const [ isSupported , setIsSupported ] = useState ( false ) const [ subscription , setSubscription ] = useState < PushSubscription | null >( null ) const [ message , setMessage ] = useState ( '' ) useEffect (() => { if ( 'serviceWorker' in navigator && 'PushManager' in window) { setIsSupported ( true ) registerServiceWorker () } } , []) async function registerServiceWorker () { const registration = await navigator . serviceWorker .register ( '/sw.js' , { scope : '/' , updateViaCache : 'none' , }) const sub = await registration . pushManager .getSubscription () setSubscription (sub) } async function subscribeToPush () { const registration = await navigator . serviceWorker .ready const sub = await registration . pushManager .subscribe ({ userVisibleOnly : true , applicationServerKey : urlBase64ToUint8Array ( process . env . NEXT_PUBLIC_VAPID_PUBLIC_KEY ! ) , }) setSubscription (sub) const serializedSub = JSON .parse ( JSON .stringify (sub)) await subscribeUser (serializedSub) } async function unsubscribeFromPush () { await subscription ?.unsubscribe () setSubscription ( null ) await unsubscribeUser () } async function sendTestNotification () { if (subscription) { await sendNotification (message) setMessage ( '' ) } } if ( ! isSupported) { return < p >Push notifications are not supported in this browser.</ p > } return ( < div > < h3 >Push Notifications</ h3 > {subscription ? ( <> < p >You are subscribed to push notifications.</ p > < button onClick = {unsubscribeFromPush}>Unsubscribe</ button > < input type = \"text\" placeholder = \"Enter notification message\" value = {message} onChange = {(e) => setMessage ( e . target .value)} /> < button onClick = {sendTestNotification}>Send Test</ button > </> ) : ( <> < p >You are not subscribed to push notifications.</ p > < button onClick = {subscribeToPush}>Subscribe</ button > </> )} </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Finally, let’s create a component to show a message for iOS devices to instruct them to install to their home screen, and only show this if the app is not already installed."
                },
                {
                    "type": "code",
                    "code": "function InstallPrompt () { const [ isIOS , setIsIOS ] = useState ( false ) const [ isStandalone , setIsStandalone ] = useState ( false ) useEffect (() => { setIsIOS ( /iPad | iPhone | iPod/ .test ( navigator .userAgent) && ! (window as any ).MSStream ) setIsStandalone ( window .matchMedia ( '(display-mode: standalone)' ).matches) } , []) if (isStandalone) { return null // Don't show install button if already installed } return ( < div > < h3 >Install App</ h3 > < button >Add to Home Screen</ button > {isIOS && ( < p > To install this app on your iOS device, tap the share button < span role = \"img\" aria-label = \"share icon\" > { ' ' } ⎋{ ' ' } </ span > and then \"Add to Home Screen\" < span role = \"img\" aria-label = \"plus icon\" > { ' ' } ➕{ ' ' } </ span >. </ p > )} </ div > ) } export default function Page () { return ( < div > < PushNotificationManager /> < InstallPrompt /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Now, let’s create the Server Actions which this file calls. Create a new file to contain your actions at app/actions.ts . This file will handle creating subscriptions, deleting subscriptions, and sending notifications."
                },
                {
                    "type": "code",
                    "code": "'use server' import webpush from 'web-push' webpush .setVapidDetails ( '<mailto:your-email@example.com>' , process . env . NEXT_PUBLIC_VAPID_PUBLIC_KEY ! , process . env . VAPID_PRIVATE_KEY ! ) let subscription : PushSubscription | null = null export async function subscribeUser (sub : PushSubscription ) { subscription = sub // In a production environment, you would want to store the subscription in a database // For example: await db.subscriptions.create({ data: sub }) return { success : true } } export async function unsubscribeUser () { subscription = null // In a production environment, you would want to remove the subscription from the database // For example: await db.subscriptions.delete({ where: { ... } }) return { success : true } } export async function sendNotification (message : string ) { if ( ! subscription) { throw new Error ( 'No subscription available' ) } try { await webpush .sendNotification ( subscription , JSON .stringify ({ title : 'Test Notification' , body : message , icon : '/icon.png' , }) ) return { success : true } } catch (error) { console .error ( 'Error sending push notification:' , error) return { success : false , error : 'Failed to send notification' } } }"
                },
                {
                    "type": "p",
                    "text": "Sending a notification will be handled by our service worker, created in step 5. In a production environment, you would want to store the subscription in a database for persistence across server restarts and to manage multiple users' subscriptions. To use the Web Push API, you need to generate VAPID keys. The simplest way is to use the web-push CLI directly:"
                },
                {
                    "type": "code",
                    "code": "npm install -g web-push"
                },
                {
                    "type": "p",
                    "text": "Generate the VAPID keys by running:"
                },
                {
                    "type": "code",
                    "code": "web-push generate-vapid-keys"
                },
                {
                    "type": "p",
                    "text": "Copy the output and paste the keys into your .env file:"
                },
                {
                    "type": "code",
                    "code": "NEXT_PUBLIC_VAPID_PUBLIC_KEY=your_public_key_here VAPID_PRIVATE_KEY=your_private_key_here"
                },
                {
                    "type": "p",
                    "text": "Create a public/sw.js file for your service worker:"
                },
                {
                    "type": "code",
                    "code": "self .addEventListener ( 'push' , function (event) { if ( event .data) { const data = event . data .json () const options = { body : data .body , icon : data .icon || '/icon.png' , badge : '/badge.png' , vibrate : [ 100 , 50 , 100 ] , data : { dateOfArrival : Date .now () , primaryKey : '2' , } , } event .waitUntil ( self . registration .showNotification ( data .title , options)) } }) self .addEventListener ( 'notificationclick' , function (event) { console .log ( 'Notification click received.' ) event . notification .close () event .waitUntil ( clients .openWindow ( '<https://your-website.com>' )) })"
                },
                {
                    "type": "p",
                    "text": "This service worker supports custom images and notifications. It handles incoming push events and notification clicks."
                },
                {
                    "type": "list",
                    "items": [
                        "You can set custom icons for notifications using the icon and badge properties.",
                        "The vibrate pattern can be adjusted to create custom vibration alerts on supported devices.",
                        "Additional data can be attached to the notification using the data property."
                    ]
                },
                {
                    "type": "p",
                    "text": "Remember to test your service worker thoroughly to ensure it behaves as expected across different devices and browsers. Also, make sure to update the 'https://your-website.com' link in the notificationclick event listener to the appropriate URL for your application. The InstallPrompt component defined in step 2 shows a message for iOS devices to instruct them to install to their home screen. To ensure your application can be installed to a mobile home screen, you must have:"
                },
                {
                    "type": "list",
                    "items": [
                        "A valid web app manifest (created in step 1)",
                        "The website served over HTTPS"
                    ]
                },
                {
                    "type": "p",
                    "text": "Modern browsers will automatically show an installation prompt to users when these criteria are met. You can provide a custom installation button with beforeinstallprompt , however, we do not recommend this as it is not cross browser and platform (does not work on Safari iOS). To ensure you can view notifications locally, ensure that:"
                },
                {
                    "type": "list",
                    "items": [
                        "You are running locally with HTTPS Use next dev --experimental-https for testing",
                        "Use next dev --experimental-https for testing",
                        "Your browser (Chrome, Safari, Firefox) has notifications enabled When prompted locally, accept permissions to use notifications Ensure notifications are not disabled globally for the entire browser If you are still not seeing notifications, try using another browser to debug",
                        "When prompted locally, accept permissions to use notifications",
                        "Ensure notifications are not disabled globally for the entire browser",
                        "If you are still not seeing notifications, try using another browser to debug"
                    ]
                },
                {
                    "type": "p",
                    "text": "Security is a crucial aspect of any web application, especially for PWAs. Next.js allows you to configure security headers using the next.config.js file. For example:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async headers () { return [ { source : '/(.*)' , headers : [ { key : 'X-Content-Type-Options' , value : 'nosniff' , } , { key : 'X-Frame-Options' , value : 'DENY' , } , { key : 'Referrer-Policy' , value : 'strict-origin-when-cross-origin' , } , ] , } , { source : '/sw.js' , headers : [ { key : 'Content-Type' , value : 'application/javascript; charset=utf-8' , } , { key : 'Cache-Control' , value : 'no-cache, no-store, must-revalidate' , } , { key : 'Content-Security-Policy' , value : \"default-src 'self'; script-src 'self'\" , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "Let’s go over each of these options:"
                },
                {
                    "type": "list",
                    "items": [
                        "Global Headers (applied to all routes): X-Content-Type-Options: nosniff : Prevents MIME type sniffing, reducing the risk of malicious file uploads. X-Frame-Options: DENY : Protects against clickjacking attacks by preventing your site from being embedded in iframes. Referrer-Policy: strict-origin-when-cross-origin : Controls how much referrer information is included with requests, balancing security and functionality.",
                        "X-Content-Type-Options: nosniff : Prevents MIME type sniffing, reducing the risk of malicious file uploads.",
                        "X-Frame-Options: DENY : Protects against clickjacking attacks by preventing your site from being embedded in iframes.",
                        "Referrer-Policy: strict-origin-when-cross-origin : Controls how much referrer information is included with requests, balancing security and functionality.",
                        "Service Worker Specific Headers: Content-Type: application/javascript; charset=utf-8 : Ensures the service worker is interpreted correctly as JavaScript. Cache-Control: no-cache, no-store, must-revalidate : Prevents caching of the service worker, ensuring users always get the latest version. Content-Security-Policy: default-src 'self'; script-src 'self' : Implements a strict Content Security Policy for the service worker, only allowing scripts from the same origin.",
                        "Content-Type: application/javascript; charset=utf-8 : Ensures the service worker is interpreted correctly as JavaScript.",
                        "Cache-Control: no-cache, no-store, must-revalidate : Prevents caching of the service worker, ensuring users always get the latest version.",
                        "Content-Security-Policy: default-src 'self'; script-src 'self' : Implements a strict Content Security Policy for the service worker, only allowing scripts from the same origin."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about defining Content Security Policies with Next.js."
                },
                {
                    "type": "list",
                    "items": [
                        "Exploring PWA Capabilities : PWAs can leverage various web APIs to provide advanced functionality. Consider exploring features like background sync, periodic background sync, or the File System Access API to enhance your application. For inspiration and up-to-date information on PWA capabilities, you can refer to resources like What PWA Can Do Today .",
                        "Static Exports: If your application requires not running a server, and instead using a static export of files, you can update the Next.js configuration to enable this change. Learn more in the Next.js Static Export documentation . However, you will need to move from Server Actions to calling an external API, as well as moving your defined headers to your proxy.",
                        "Offline Support : To provide offline functionality, one option is Serwist with Next.js. You can find an example of how to integrate Serwist with Next.js in their documentation . Note: this plugin currently requires webpack configuration.",
                        "Security Considerations : Ensure that your service worker is properly secured. This includes using HTTPS, validating the source of push messages, and implementing proper error handling.",
                        "User Experience : Consider implementing progressive enhancement techniques to ensure your app works well even when certain PWA features are not supported by the user's browser."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/configuring/src-directory",
            "title": "Configuring: src Directory | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "As an alternative to having the special Next.js app or pages directories in the root of your project, Next.js also supports the common pattern of placing application code under the src directory. This separates application code from project configuration files which mostly live in the root of a project, which is preferred by some individuals and teams. To use the src directory, move the app Router folder or pages Router folder to src/app or src/pages respectively."
                },
                {
                    "type": "list",
                    "items": [
                        "The /public directory should remain in the root of your project.",
                        "Config files like package.json , next.config.js and tsconfig.json should remain in the root of your project.",
                        ".env.* files should remain in the root of your project.",
                        "src/app or src/pages will be ignored if app or pages are present in the root directory.",
                        "If you're using src , you'll probably also move other application folders such as /components or /lib .",
                        "If you're using Middleware, ensure it is placed inside the src directory.",
                        "If you're using Tailwind CSS, you'll need to add the /src prefix to the tailwind.config.js file in the content section .",
                        "If you are using TypeScript paths for imports such as @/* , you should update the paths object in tsconfig.json to include src/ ."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching",
            "title": "Building Your Application: Data Fetching | Next.js",
            "content": []
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/fetching",
            "title": "Data Fetching: Data Fetching and Caching | Next.js",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Next.js Commerce",
                        "On-Demand ISR",
                        "Next.js Forms"
                    ]
                },
                {
                    "type": "p",
                    "text": "This guide will walk you through the basics of data fetching and caching in Next.js, providing practical examples and best practices. Here's a minimal example of data fetching in Next.js:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const data = await fetch ( 'https://api.vercel.app/blog' ) const posts = await data .json () return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "This example demonstrates a basic server-side data fetch using the fetch API in an asynchronous React Server Component."
                },
                {
                    "type": "list",
                    "items": [
                        "fetch",
                        "React cache",
                        "Next.js unstable_cache"
                    ]
                },
                {
                    "type": "p",
                    "text": "This component will fetch and display a list of blog posts. The response from fetch is not cached by default."
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const data = await fetch ( 'https://api.vercel.app/blog' ) const posts = await data .json () return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "If you are not using any Dynamic APIs anywhere else in this route, it will be prerendered during next build to a static page. The data can then be updated using Incremental Static Regeneration . To prevent the page from prerendering, you can add the following to your file:"
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'force-dynamic'"
                },
                {
                    "type": "p",
                    "text": "However, you will commonly use functions like cookies , headers , or reading the incoming searchParams from the page props, which will automatically make the page render dynamically. In this case, you do not need to explicitly use force-dynamic . This component will fetch and display a list of blog posts. The response from the database is not cached by default but could be with additional configuration ."
                },
                {
                    "type": "code",
                    "code": "import { db , posts } from '@/lib/db' export default async function Page () { const allPosts = await db .select () .from (posts) return ( < ul > { allPosts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "If you are not using any Dynamic APIs anywhere else in this route, it will be prerendered during next build to a static page. The data can then be updated using Incremental Static Regeneration . To prevent the page from prerendering, you can add the following to your file:"
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'force-dynamic'"
                },
                {
                    "type": "p",
                    "text": "However, you will commonly use functions like cookies , headers , or reading the incoming searchParams from the page props, which will automatically make the page render dynamically. In this case, you do not need to explicitly use force-dynamic . We recommend first attempting to fetch data on the server-side. However, there are still cases where client-side data fetching makes sense. In these scenarios, you can manually call fetch in a useEffect (not recommended), or lean on popular React libraries in the community (such as SWR or React Query ) for client fetching."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState , useEffect } from 'react' export function Posts () { const [ posts , setPosts ] = useState ( null ) useEffect (() => { async function fetchPosts () { const res = await fetch ( 'https://api.vercel.app/blog' ) const data = await res .json () setPosts (data) } fetchPosts () } , []) if ( ! posts) return < div >Loading...</ div > return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "You can use the unstable_cache API to cache the response to allow pages to be prerendered when running next build ."
                },
                {
                    "type": "code",
                    "code": "import { unstable_cache } from 'next/cache' import { db , posts } from '@/lib/db' const getPosts = unstable_cache ( async () => { return await db .select () .from (posts) } , [ 'posts' ] , { revalidate : 3600 , tags : [ 'posts' ] } ) export default async function Page () { const allPosts = await getPosts () return ( < ul > { allPosts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "This example caches the result of the database query for 1 hour (3600 seconds). It also adds the cache tag posts which can then be invalidated with Incremental Static Regeneration . Next.js uses APIs like generateMetadata and generateStaticParams where you will need to use the same data fetched in the page . If you are using fetch , requests can be memoized by adding cache: 'force-cache' . This means you can safely call the same URL with the same options, and only one request will be made."
                },
                {
                    "type": "list",
                    "items": [
                        "In previous versions of Next.js, using fetch would have a default cache value of force-cache . This changed in version 15, to a default of cache: no-store ."
                    ]
                },
                {
                    "type": "code",
                    "code": "import { notFound } from 'next/navigation' interface Post { id : string title : string content : string } async function getPost (id : string ) { const res = await fetch ( `https://api.vercel.app/ blog / ${ id } ` , { cache : 'force-cache' , }) const post : Post = await res .json () if ( ! post) notFound () return post } export async function generateStaticParams () { const posts = await fetch ( 'https://api.vercel.app/ blog ' , { cache : 'force-cache' , }) .then ((res) => res .json ()) return posts .map ((post : Post ) => ({ id : String ( post .id) , })) } export async function generateMetadata ({ params , } : { params : Promise <{ id : string }> }) { const { id } = await params const post = await getPost (id) return { title : post .title , } } export default async function Page ({ params , } : { params : Promise <{ id : string }> }) { const { id } = await params const post = await getPost (id) return ( < article > < h1 >{ post .title}</ h1 > < p >{ post .content}</ p > </ article > ) }"
                },
                {
                    "type": "p",
                    "text": "If you are not using fetch , and instead using an ORM or database directly, you can wrap your data fetch with the React cache function. This will de-duplicate and only make one query."
                },
                {
                    "type": "code",
                    "code": "import { cache } from 'react' import { db , posts , eq } from '@/lib/db' // Example with Drizzle ORM import { notFound } from 'next/navigation' export const getPost = cache ( async (id) => { const post = await db . query . posts .findFirst ({ where : eq ( posts .id , parseInt (id)) , }) if ( ! post) notFound () return post })"
                },
                {
                    "type": "p",
                    "text": "Learn more about revalidating cached data with Incremental Static Regeneration . When fetching data inside components, you need to be aware of two data fetching patterns: Parallel and Sequential."
                },
                {
                    "type": "list",
                    "items": [
                        "Sequential : requests in a component tree are dependent on each other. This can lead to longer loading times.",
                        "Parallel : requests in a route are eagerly initiated and will load data at the same time. This reduces the total time it takes to load data."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are not memoized . There may be cases where you want this pattern because one fetch depends on the result of the other. For example, the Playlists component will only start fetching data once the Artist component has finished fetching data because Playlists depends on the artistID prop:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ params , } : { params : Promise <{ username : string }> }) { const { username } = await params // Get artist information const artist = await getArtist (username) return ( <> < h1 >{ artist .name}</ h1 > { /* Show fallback UI while the Playlists component is loading */ } < Suspense fallback = {< div >Loading...</ div >}> { /* Pass the artist ID to the Playlists component */ } < Playlists artist ID = { artist .id} /> </ Suspense > </> ) } async function Playlists ({ artist ID } : { artist ID : string }) { // Use the artist ID to fetch playlists const playlists = await getArtistPlaylists ( artist ID) return ( < ul > { playlists .map ((playlist) => ( < li key = { playlist .id}>{ playlist .name}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "You can use loading.js (for route segments) or React <Suspense> (for nested components) to show an instant loading state while React streams in the result. This will prevent the whole route from being blocked by data requests, and the user will be able to interact with the parts of the page that are ready. By default, layout and page segments are rendered in parallel. This means requests will be initiated in parallel. However, due to the nature of async / await , an awaited request inside the same segment or component will block any requests below it. To fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved. In the example below, the getArtist and getAlbums functions are defined outside the Page component and initiated inside the component using Promise.all :"
                },
                {
                    "type": "code",
                    "code": "import Albums from './albums' async function getArtist (username : string ) { const res = await fetch ( `https://api.example.com/ artist / ${ username } ` ) return res .json () } async function getAlbums (username : string ) { const res = await fetch ( `https://api.example.com/ artist / ${ username } /albums` ) return res .json () } export default async function Page ({ params , } : { params : Promise <{ username : string }> }) { const { username } = await params const artist Data = getArtist (username) const albumsData = getAlbums (username) // Initiate both requests in parallel const [ artist , albums ] = await Promise .all ([ artist Data , albumsData]) return ( <> < h1 >{ artist .name}</ h1 > < Albums list = {albums} /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "In addition, you can add a Suspense Boundary to break up the rendering work and show part of the result as soon as possible. Another way to prevent waterfalls is to use the preload pattern by creating an utility function that you eagerly call above blocking requests. For example, checkIsAvailable() blocks <Item/> from rendering, so you can call preload() before it to eagerly initiate <Item/> data dependencies. By the time <Item/> is rendered, its data has already been fetched. Note that preload function doesn't block checkIsAvailable() from running."
                },
                {
                    "type": "code",
                    "code": "import { getItem } from '@/utils/get-item' export const preload = (id : string ) => { // void evaluates the given expression and returns undefined // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void void getItem (id) } export default async function Item ({ id } : { id : string }) { const result = await getItem (id) // ... }"
                },
                {
                    "type": "code",
                    "code": "import Item , { preload , checkIsAvailable } from '@/components/Item' export default async function Page ({ params , } : { params : Promise <{ id : string }> }) { const { id } = await params // starting loading item data preload (id) // perform another asynchronous task const isAvailable = await checkIsAvailable () return isAvailable ? < Item id = {id} /> : null }"
                },
                {
                    "type": "p",
                    "text": "Good to know: The \"preload\" function can also have any name as it's a pattern, not an API. You can combine the cache function, the preload pattern, and the server-only package to create a data fetching utility that can be used throughout your app."
                },
                {
                    "type": "code",
                    "code": "import { cache } from 'react' import 'server-only' export const preload = (id : string ) => { void getItem (id) } export const getItem = cache ( async (id : string ) => { // ... })"
                },
                {
                    "type": "p",
                    "text": "With this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetching only happens on the server . The utils/get-item exports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched."
                },
                {
                    "type": "list",
                    "items": [
                        "We recommend using the server-only package to make sure server data fetching functions are never used on the client."
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend using React's taint APIs, taintObjectReference and taintUniqueValue , to prevent whole object instances or sensitive values from being passed to the client. To enable tainting in your application, set the Next.js Config experimental.taint option to true :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { taint : true , } , }"
                },
                {
                    "type": "p",
                    "text": "Then pass the object or value you want to taint to the experimental_taintObjectReference or experimental_taintUniqueValue functions:"
                },
                {
                    "type": "code",
                    "code": "import { queryDataFromDB } from './api' import { experimental_taintObjectReference , experimental_taintUniqueValue , } from 'react' export async function getUserData () { const data = await queryDataFromDB () experimental_taintObjectReference ( 'Do not pass the whole user object to the client' , data ) experimental_taintUniqueValue ( \"Do not pass the user's address to the client\" , data , data .address ) return data }"
                },
                {
                    "type": "code",
                    "code": "import { getUserData } from './data' export async function Page () { const userData = getUserData () return ( < ClientComponent user = {userData} // this will cause an error because of taintObjectReference address = { userData .address} // this will cause an error because of taintUniqueValue /> ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating",
            "title": "Data Fetching: Data Fetching and Caching | Next.js",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Next.js Commerce",
                        "On-Demand ISR",
                        "Next.js Forms"
                    ]
                },
                {
                    "type": "p",
                    "text": "This guide will walk you through the basics of data fetching and caching in Next.js, providing practical examples and best practices. Here's a minimal example of data fetching in Next.js:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const data = await fetch ( 'https://api.vercel.app/blog' ) const posts = await data .json () return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "This example demonstrates a basic server-side data fetch using the fetch API in an asynchronous React Server Component."
                },
                {
                    "type": "list",
                    "items": [
                        "fetch",
                        "React cache",
                        "Next.js unstable_cache"
                    ]
                },
                {
                    "type": "p",
                    "text": "This component will fetch and display a list of blog posts. The response from fetch is not cached by default."
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const data = await fetch ( 'https://api.vercel.app/blog' ) const posts = await data .json () return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "If you are not using any Dynamic APIs anywhere else in this route, it will be prerendered during next build to a static page. The data can then be updated using Incremental Static Regeneration . To prevent the page from prerendering, you can add the following to your file:"
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'force-dynamic'"
                },
                {
                    "type": "p",
                    "text": "However, you will commonly use functions like cookies , headers , or reading the incoming searchParams from the page props, which will automatically make the page render dynamically. In this case, you do not need to explicitly use force-dynamic . This component will fetch and display a list of blog posts. The response from the database is not cached by default but could be with additional configuration ."
                },
                {
                    "type": "code",
                    "code": "import { db , posts } from '@/lib/db' export default async function Page () { const allPosts = await db .select () .from (posts) return ( < ul > { allPosts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "If you are not using any Dynamic APIs anywhere else in this route, it will be prerendered during next build to a static page. The data can then be updated using Incremental Static Regeneration . To prevent the page from prerendering, you can add the following to your file:"
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'force-dynamic'"
                },
                {
                    "type": "p",
                    "text": "However, you will commonly use functions like cookies , headers , or reading the incoming searchParams from the page props, which will automatically make the page render dynamically. In this case, you do not need to explicitly use force-dynamic . We recommend first attempting to fetch data on the server-side. However, there are still cases where client-side data fetching makes sense. In these scenarios, you can manually call fetch in a useEffect (not recommended), or lean on popular React libraries in the community (such as SWR or React Query ) for client fetching."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState , useEffect } from 'react' export function Posts () { const [ posts , setPosts ] = useState ( null ) useEffect (() => { async function fetchPosts () { const res = await fetch ( 'https://api.vercel.app/blog' ) const data = await res .json () setPosts (data) } fetchPosts () } , []) if ( ! posts) return < div >Loading...</ div > return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "You can use the unstable_cache API to cache the response to allow pages to be prerendered when running next build ."
                },
                {
                    "type": "code",
                    "code": "import { unstable_cache } from 'next/cache' import { db , posts } from '@/lib/db' const getPosts = unstable_cache ( async () => { return await db .select () .from (posts) } , [ 'posts' ] , { revalidate : 3600 , tags : [ 'posts' ] } ) export default async function Page () { const allPosts = await getPosts () return ( < ul > { allPosts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "This example caches the result of the database query for 1 hour (3600 seconds). It also adds the cache tag posts which can then be invalidated with Incremental Static Regeneration . Next.js uses APIs like generateMetadata and generateStaticParams where you will need to use the same data fetched in the page . If you are using fetch , requests can be memoized by adding cache: 'force-cache' . This means you can safely call the same URL with the same options, and only one request will be made."
                },
                {
                    "type": "list",
                    "items": [
                        "In previous versions of Next.js, using fetch would have a default cache value of force-cache . This changed in version 15, to a default of cache: no-store ."
                    ]
                },
                {
                    "type": "code",
                    "code": "import { notFound } from 'next/navigation' interface Post { id : string title : string content : string } async function getPost (id : string ) { const res = await fetch ( `https://api.vercel.app/ blog / ${ id } ` , { cache : 'force-cache' , }) const post : Post = await res .json () if ( ! post) notFound () return post } export async function generateStaticParams () { const posts = await fetch ( 'https://api.vercel.app/ blog ' , { cache : 'force-cache' , }) .then ((res) => res .json ()) return posts .map ((post : Post ) => ({ id : String ( post .id) , })) } export async function generateMetadata ({ params , } : { params : Promise <{ id : string }> }) { const { id } = await params const post = await getPost (id) return { title : post .title , } } export default async function Page ({ params , } : { params : Promise <{ id : string }> }) { const { id } = await params const post = await getPost (id) return ( < article > < h1 >{ post .title}</ h1 > < p >{ post .content}</ p > </ article > ) }"
                },
                {
                    "type": "p",
                    "text": "If you are not using fetch , and instead using an ORM or database directly, you can wrap your data fetch with the React cache function. This will de-duplicate and only make one query."
                },
                {
                    "type": "code",
                    "code": "import { cache } from 'react' import { db , posts , eq } from '@/lib/db' // Example with Drizzle ORM import { notFound } from 'next/navigation' export const getPost = cache ( async (id) => { const post = await db . query . posts .findFirst ({ where : eq ( posts .id , parseInt (id)) , }) if ( ! post) notFound () return post })"
                },
                {
                    "type": "p",
                    "text": "Learn more about revalidating cached data with Incremental Static Regeneration . When fetching data inside components, you need to be aware of two data fetching patterns: Parallel and Sequential."
                },
                {
                    "type": "list",
                    "items": [
                        "Sequential : requests in a component tree are dependent on each other. This can lead to longer loading times.",
                        "Parallel : requests in a route are eagerly initiated and will load data at the same time. This reduces the total time it takes to load data."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are not memoized . There may be cases where you want this pattern because one fetch depends on the result of the other. For example, the Playlists component will only start fetching data once the Artist component has finished fetching data because Playlists depends on the artistID prop:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ params , } : { params : Promise <{ username : string }> }) { const { username } = await params // Get artist information const artist = await getArtist (username) return ( <> < h1 >{ artist .name}</ h1 > { /* Show fallback UI while the Playlists component is loading */ } < Suspense fallback = {< div >Loading...</ div >}> { /* Pass the artist ID to the Playlists component */ } < Playlists artist ID = { artist .id} /> </ Suspense > </> ) } async function Playlists ({ artist ID } : { artist ID : string }) { // Use the artist ID to fetch playlists const playlists = await getArtistPlaylists ( artist ID) return ( < ul > { playlists .map ((playlist) => ( < li key = { playlist .id}>{ playlist .name}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "You can use loading.js (for route segments) or React <Suspense> (for nested components) to show an instant loading state while React streams in the result. This will prevent the whole route from being blocked by data requests, and the user will be able to interact with the parts of the page that are ready. By default, layout and page segments are rendered in parallel. This means requests will be initiated in parallel. However, due to the nature of async / await , an awaited request inside the same segment or component will block any requests below it. To fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved. In the example below, the getArtist and getAlbums functions are defined outside the Page component and initiated inside the component using Promise.all :"
                },
                {
                    "type": "code",
                    "code": "import Albums from './albums' async function getArtist (username : string ) { const res = await fetch ( `https://api.example.com/ artist / ${ username } ` ) return res .json () } async function getAlbums (username : string ) { const res = await fetch ( `https://api.example.com/ artist / ${ username } /albums` ) return res .json () } export default async function Page ({ params , } : { params : Promise <{ username : string }> }) { const { username } = await params const artist Data = getArtist (username) const albumsData = getAlbums (username) // Initiate both requests in parallel const [ artist , albums ] = await Promise .all ([ artist Data , albumsData]) return ( <> < h1 >{ artist .name}</ h1 > < Albums list = {albums} /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "In addition, you can add a Suspense Boundary to break up the rendering work and show part of the result as soon as possible. Another way to prevent waterfalls is to use the preload pattern by creating an utility function that you eagerly call above blocking requests. For example, checkIsAvailable() blocks <Item/> from rendering, so you can call preload() before it to eagerly initiate <Item/> data dependencies. By the time <Item/> is rendered, its data has already been fetched. Note that preload function doesn't block checkIsAvailable() from running."
                },
                {
                    "type": "code",
                    "code": "import { getItem } from '@/utils/get-item' export const preload = (id : string ) => { // void evaluates the given expression and returns undefined // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void void getItem (id) } export default async function Item ({ id } : { id : string }) { const result = await getItem (id) // ... }"
                },
                {
                    "type": "code",
                    "code": "import Item , { preload , checkIsAvailable } from '@/components/Item' export default async function Page ({ params , } : { params : Promise <{ id : string }> }) { const { id } = await params // starting loading item data preload (id) // perform another asynchronous task const isAvailable = await checkIsAvailable () return isAvailable ? < Item id = {id} /> : null }"
                },
                {
                    "type": "p",
                    "text": "Good to know: The \"preload\" function can also have any name as it's a pattern, not an API. You can combine the cache function, the preload pattern, and the server-only package to create a data fetching utility that can be used throughout your app."
                },
                {
                    "type": "code",
                    "code": "import { cache } from 'react' import 'server-only' export const preload = (id : string ) => { void getItem (id) } export const getItem = cache ( async (id : string ) => { // ... })"
                },
                {
                    "type": "p",
                    "text": "With this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetching only happens on the server . The utils/get-item exports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched."
                },
                {
                    "type": "list",
                    "items": [
                        "We recommend using the server-only package to make sure server data fetching functions are never used on the client."
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend using React's taint APIs, taintObjectReference and taintUniqueValue , to prevent whole object instances or sensitive values from being passed to the client. To enable tainting in your application, set the Next.js Config experimental.taint option to true :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { taint : true , } , }"
                },
                {
                    "type": "p",
                    "text": "Then pass the object or value you want to taint to the experimental_taintObjectReference or experimental_taintUniqueValue functions:"
                },
                {
                    "type": "code",
                    "code": "import { queryDataFromDB } from './api' import { experimental_taintObjectReference , experimental_taintUniqueValue , } from 'react' export async function getUserData () { const data = await queryDataFromDB () experimental_taintObjectReference ( 'Do not pass the whole user object to the client' , data ) experimental_taintUniqueValue ( \"Do not pass the user's address to the client\" , data , data .address ) return data }"
                },
                {
                    "type": "code",
                    "code": "import { getUserData } from './data' export async function Page () { const userData = getUserData () return ( < ClientComponent user = {userData} // this will cause an error because of taintObjectReference address = { userData .address} // this will cause an error because of taintUniqueValue /> ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/forms-and-mutations",
            "title": "Data Fetching: Server Actions and Mutations | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Server Actions are asynchronous functions that are executed on the server. They can be called in Server and Client Components to handle form submissions and data mutations in Next.js applications. 🎥 Watch: Learn more about mutations with Server Actions → YouTube (10 minutes) . A Server Action can be defined with the React \"use server\" directive. You can place the directive at the top of an async function to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions. Server Components can use the inline function level or module level \"use server\" directive. To inline a Server Action, add \"use server\" to the top of the function body:"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { // Server Action async function create () { 'use server' // Mutate data } return '...' }"
                },
                {
                    "type": "p",
                    "text": "To call a Server Action in a Client Component, create a new file and add the \"use server\" directive at the top of it. All exported functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:"
                },
                {
                    "type": "code",
                    "code": "'use server' export async function create () {}"
                },
                {
                    "type": "code",
                    "code": "'use client' import { create } from '@/app/actions' export function Button () { return < button onClick = {() => create ()}>Create</ button > }"
                },
                {
                    "type": "p",
                    "text": "You can also pass a Server Action to a Client Component as a prop:"
                },
                {
                    "type": "code",
                    "code": "< ClientComponent updateItemAction = {updateItem} />"
                },
                {
                    "type": "code",
                    "code": "'use client' export default function ClientComponent ({ updateItemAction , } : { updateItemAction : (formData : FormData ) => void }) { return < form action = {updateItemAction}>{ /* ... */ }</ form > }"
                },
                {
                    "type": "p",
                    "text": "Usually, the Next.js TypeScript plugin would flag updateItemAction in client-component.tsx since it is a function which generally can't be serialized across client-server boundaries.\nHowever, props named action or ending with Action are assumed to receive Server Actions.\nThis is only a heuristic since the TypeScript plugin doesn't actually know if it receives a Server Action or an ordinary function.\nRuntime type-checking will still ensure you don't accidentally pass a function to a Client Component."
                },
                {
                    "type": "list",
                    "items": [
                        "Server actions can be invoked using the action attribute in a <form> element : Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled. In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration. After hydration, the browser does not refresh on form submission.",
                        "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
                        "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
                        "After hydration, the browser does not refresh on form submission.",
                        "Server Actions are not limited to <form> and can be invoked from event handlers, useEffect , third-party libraries, and other form elements like <button> .",
                        "Server Actions integrate with the Next.js caching and revalidation architecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.",
                        "Behind the scenes, actions use the POST method, and only this HTTP method can invoke them.",
                        "The arguments and return value of Server Actions must be serializable by React. See the React docs for a list of serializable arguments and values .",
                        "Server Actions are functions. This means they can be reused anywhere in your application.",
                        "Server Actions inherit the runtime from the page or layout they are used on.",
                        "Server Actions inherit the Route Segment Config from the page or layout they are used on, including fields like maxDuration ."
                    ]
                },
                {
                    "type": "p",
                    "text": "React extends the HTML <form> element to allow Server Actions to be invoked with the action prop. When invoked in a form, the action automatically receives the FormData object. You don't need to use React useState to manage fields, instead, you can extract the data using the native FormData methods :"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { async function createInvoice (formData : FormData ) { 'use server' const rawFormData = { customerId : formData .get ( 'customerId' ) , amount : formData .get ( 'amount' ) , status : formData .get ( 'status' ) , } // mutate data // revalidate cache } return < form action = {createInvoice}>...</ form > }"
                },
                {
                    "type": "list",
                    "items": [
                        "Example: Form with Loading & Error States",
                        "When working with forms that have many fields, you may want to consider using the entries() method with JavaScript's Object.fromEntries() . For example: const rawFormData = Object.fromEntries(formData) . One thing to note is that the formData will include additional $ACTION_ properties.",
                        "See React <form> documentation to learn more."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can pass additional arguments to a Server Action using the JavaScript bind method."
                },
                {
                    "type": "code",
                    "code": "'use client' import { updateUser } from './actions' export function UserProfile ({ userId } : { userId : string }) { const updateUserWithId = updateUser .bind ( null , userId) return ( < form action = {updateUserWithId}> < input type = \"text\" name = \"name\" /> < button type = \"submit\" >Update User Name</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "The Server Action will receive the userId argument, in addition to the form data:"
                },
                {
                    "type": "code",
                    "code": "'use server' export async function updateUser (userId : string , formData : FormData ) {}"
                },
                {
                    "type": "list",
                    "items": [
                        "An alternative is to pass arguments as hidden input fields in the form (e.g. <input type=\"hidden\" name=\"userId\" value={userId} /> ). However, the value will be part of the rendered HTML and will not be encoded.",
                        ".bind works in both Server and Client Components. It also supports progressive enhancement."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can also invoke a Server Action in elements nested inside <form> such as <button> , <input type=\"submit\"> , and <input type=\"image\"> . These elements accept the formAction prop or event handlers . This is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific <button> element for saving a post draft in addition to publishing it. See the React <form> docs for more information. You can trigger a form submission programmatically using the requestSubmit() method. For example, when the user submits a form using the ⌘ + Enter keyboard shortcut, you can listen for the onKeyDown event:"
                },
                {
                    "type": "code",
                    "code": "'use client' export function Entry () { const handleKeyDown = (e : React . KeyboardEvent < HTMLTextAreaElement >) => { if ( ( e .ctrlKey || e .metaKey) && ( e .key === 'Enter' || e .key === 'NumpadEnter' ) ) { e .preventDefault () e . currentTarget . form ?.requestSubmit () } } return ( < div > < textarea name = \"entry\" rows = { 20 } required onKeyDown = {handleKeyDown} /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "This will trigger the submission of the nearest <form> ancestor, which will invoke the Server Action. You can use the HTML attributes like required and type=\"email\" for basic client-side form validation. For more advanced server-side validation, you can use a library like zod to validate the form fields before mutating the data:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { z } from 'zod' const schema = z .object ({ email : z .string ({ invalid_type_error : 'Invalid Email' , }) , }) export default async function createUser (formData : FormData ) { const validatedFields = schema .safeParse ({ email : formData .get ( 'email' ) , }) // Return early if the form data is invalid if ( ! validatedFields .success) { return { errors : validatedFields . error .flatten ().fieldErrors , } } // Mutate data }"
                },
                {
                    "type": "p",
                    "text": "Once the fields have been validated on the server, you can return a serializable object in your action and use the React useActionState hook to show a message to the user."
                },
                {
                    "type": "list",
                    "items": [
                        "By passing the action to useActionState , the action's function signature changes to receive a new prevState or initialState parameter as its first argument.",
                        "useActionState is a React hook and therefore must be used in a Client Component."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' export async function createUser (prevState : any , formData : FormData ) { const res = await fetch ( 'https://...' ) const json = await res .json () if ( ! res .ok) { return { message : 'Please enter a valid email' } } redirect ( '/dashboard' ) }"
                },
                {
                    "type": "p",
                    "text": "Then, you can pass your action to the useActionState hook and use the returned state to display an error message."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useActionState } from 'react' import { createUser } from '@/app/actions' const initialState = { message : '' , } export function Signup () { const [ state , formAction , pending ] = useActionState (createUser , initialState) return ( < form action = {formAction}> < label htmlFor = \"email\" >Email</ label > < input type = \"text\" id = \"email\" name = \"email\" req ui red /> { /* ... */ } < p aria-live = \"polite\" >{ state ?.message}</ p > < button disabled = {pending}>Sign up</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "The useActionState hook exposes a pending boolean that can be used to show a loading indicator while the action is being executed. Alternatively, you can use the useFormStatus hook to show a loading indicator while the action is being executed. When using this hook, you'll need to create a separate component to render the loading indicator. For example, to disable the button when the action is pending:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useFormStatus } from 'react-dom' export function SubmitButton () { const { pending } = useFormStatus () return ( < button disabled = {pending} type = \"submit\" > Sign Up </ button > ) }"
                },
                {
                    "type": "p",
                    "text": "You can then nest the SubmitButton component inside the form:"
                },
                {
                    "type": "code",
                    "code": "import { SubmitButton } from './button' import { createUser } from '@/app/actions' export function Signup () { return ( < form action = {createUser}> { /* Other form elements */ } < SubmitButton /> </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know: In React 19, useFormStatus includes additional keys on the returned object, like data, method, and action. If you are not using React 19, only the pending key is available. You can use the React useOptimistic hook to optimistically update the UI before the Server Action finishes executing, rather than waiting for the response:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useOptimistic } from 'react' import { send } from './actions' type Message = { message : string } export function Thread ({ messages } : { messages : Message [] }) { const [ optimisticMessages , addOptimisticMessage ] = useOptimistic < Message[] , string > (messages , (state , newMessage) => [ ... state , { message : newMessage }]) const formAction = async (formData : FormData ) => { const message = formData .get ( 'message' ) as string addOptimisticMessage (message) await send (message) } return ( < div > { optimisticMessages .map ((m , i) => ( < div key = {i}>{ m .message}</ div > ))} < form action = {formAction}> < input type = \"text\" name = \"message\" /> < button type = \"submit\" >Send</ button > </ form > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "While it's common to use Server Actions within <form> elements, they can also be invoked with event handlers such as onClick . For example, to increment a like count:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { incrementLike } from './actions' import { useState } from 'react' export default function LikeButton ({ initialLikes } : { initialLikes : number }) { const [ likes , setLikes ] = useState (initialLikes) return ( <> < p >Total Likes: {likes}</ p > < button onClick = { async () => { const updatedLikes = await incrementLike () setLikes (updatedLikes) }} > Like </ button > </> ) }"
                },
                {
                    "type": "p",
                    "text": "You can also add event handlers to form elements, for example, to save a form field onChange :"
                },
                {
                    "type": "code",
                    "code": "'use client' import { publishPost , saveDraft } from './actions' export default function EditPost () { return ( < form action = {publishPost}> < textarea name = \"content\" onChange = { async (e) => { await saveDraft ( e . target .value) }} /> < button type = \"submit\" >Publish</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "For cases like this, where multiple events might be fired in quick succession, we recommend debouncing to prevent unnecessary Server Action invocations. You can use the React useEffect hook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example, onKeyDown for app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { incrementViews } from './actions' import { useState , useEffect } from 'react' export default function ViewCount ({ initialViews } : { initialViews : number }) { const [ views , setViews ] = useState (initialViews) useEffect (() => { const updateViews = async () => { const updatedViews = await incrementViews () setViews (updatedViews) } updateViews () } , []) return < p >Total Views: {views}</ p > }"
                },
                {
                    "type": "p",
                    "text": "Remember to consider the behavior and caveats of useEffect . When an error is thrown, it'll be caught by the nearest error.js or <Suspense> boundary on the client. See Error Handling for more information."
                },
                {
                    "type": "list",
                    "items": [
                        "Aside from throwing the error, you can also return an object to be handled by useActionState . See Server-side validation and error handling ."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can revalidate the Next.js Cache inside your Server Actions with the revalidatePath API:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidatePath } from 'next/cache' export async function createPost () { try { // ... } catch (error) { // ... } revalidatePath ( '/posts' ) }"
                },
                {
                    "type": "p",
                    "text": "Or invalidate a specific data fetch with a cache tag using revalidateTag :"
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidateTag } from 'next/cache' export async function createPost () { try { // ... } catch (error) { // ... } revalidateTag ( 'posts' ) }"
                },
                {
                    "type": "p",
                    "text": "If you would like to redirect the user to a different route after the completion of a Server Action, you can use redirect API. redirect needs to be called outside of the try/catch block:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' import { revalidateTag } from 'next/cache' export async function createPost (id : string ) { try { // ... } catch (error) { // ... } revalidateTag ( 'posts' ) // Update cached posts redirect ( `/post/ ${ id } ` ) // Navigate to the new post page }"
                },
                {
                    "type": "p",
                    "text": "You can get , set , and delete cookies inside a Server Action using the cookies API:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { cookies } from 'next/headers' export async function exampleAction () { const cookieStore = await cookies () // Get cookie cookieStore .get ( 'name' )?.value // Set cookie cookieStore .set ( 'name' , 'Delba' ) // Delete cookie cookieStore .delete ( 'name' ) }"
                },
                {
                    "type": "p",
                    "text": "See additional examples for deleting cookies from Server Actions. By default, when a Server Action is created and exported, it creates a public HTTP endpoint\nand should be treated with the same security assumptions and authorization checks. This means, even if a Server Action or utility function is not imported elsewhere in your code, it’s still publicly accessible. To improve security, Next.js has the following built-in features:"
                },
                {
                    "type": "list",
                    "items": [
                        "Secure action IDs: Next.js creates encrypted, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security.",
                        "Dead code elimination: Unused Server Actions (referenced by their IDs) are removed from client bundle to avoid public access by third-party."
                    ]
                },
                {
                    "type": "p",
                    "text": "The IDs are created during compilation and are cached for a maximum of 14 days. They will be regenerated when a new build is initiated or when the build cache is invalidated.\nThis security improvement reduces the risk in cases where an authentication layer is missing. However, you should still treat Server Actions like public HTTP endpoints."
                },
                {
                    "type": "code",
                    "code": "// app/actions.js 'use server' // This action **is** used in our application, so Next.js // will create a secure ID to allow the client to reference // and call the Server Action. export async function updateUserAction (formData) {} // This action **is not** used in our application, so Next.js // will automatically remove this code during `next build` // and will not create a public endpoint. export async function deleteUserAction (formData) {}"
                },
                {
                    "type": "p",
                    "text": "You should ensure that the user is authorized to perform the action. For example:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { auth } from './lib' export function addItem () { const { user } = auth () if ( ! user) { throw new Error ( 'You must be signed in to perform this action' ) } // ... }"
                },
                {
                    "type": "p",
                    "text": "Defining a Server Action inside a component creates a closure where the action has access to the outer function's scope. For example, the publish action has access to the publishVersion variable:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const publishVersion = await getLatestVersion (); async function publish () { \"use server\" ; if (publishVersion !== await getLatestVersion ()) { throw new Error ( 'The version has changed since pressing publish' ); } ... } return ( < form > < button formAction = {publish}>Publish</ button > </ form > ); }"
                },
                {
                    "type": "p",
                    "text": "Closures are useful when you need to capture a snapshot of data (e.g. publishVersion ) at the time of rendering so that it can be used later when the action is invoked. However, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build. Good to know: We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use the React taint APIs to proactively prevent specific data from being sent to the client. When self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies. To mitigate this, you can overwrite the encryption key using the process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY environment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key. This is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing. Good to know: Next.js applications deployed to Vercel automatically handle this. Since Server Actions can be invoked in a <form> element, this opens them up to CSRF attacks . Behind the scenes, Server Actions use the POST method, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly with SameSite cookies being the default. As an additional protection, Server Actions in Next.js also compare the Origin header to the Host header (or X-Forwarded-Host ). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it. For large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration option serverActions.allowedOrigins option to specify a list of safe origins. The option accepts an array of strings."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ module . exports = { experimental : { serverActions : { allowedOrigins : [ 'my-proxy.com' , '*.my-proxy.com' ] , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Learn more about Security and Server Actions . For more information, check out the following React docs:"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Actions",
                        "\"use server\"",
                        "<form>",
                        "useFormStatus",
                        "useActionState",
                        "useOptimistic"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration",
            "title": "Data Fetching: Incremental Static Regeneration (ISR) | Next.js",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Next.js Commerce",
                        "On-Demand ISR",
                        "Next.js Forms"
                    ]
                },
                {
                    "type": "p",
                    "text": "Incremental Static Regeneration (ISR) enables you to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Update static content without rebuilding the entire site",
                        "Reduce server load by serving prerendered, static pages for most requests",
                        "Ensure proper cache-control headers are automatically added to pages",
                        "Handle large amounts of content pages without long next build times"
                    ]
                },
                {
                    "type": "code",
                    "code": "interface Post { id : string title : string content : string } // Next.js will invalidate the cache when a // request comes in, at most once every 60 seconds. export const revalidate = 60 // We'll prerender only the params from `generateStaticParams` at build time. // If a request comes in for a path that hasn't been generated, // Next.js will server-render the page on-demand. export const dynamicParams = true // or false, to 404 on unknown paths export async function generateStaticParams () { const posts : Post [] = await fetch ( 'https://api.vercel.app/ blog ' ) .then ((res) => res .json () ) return posts .map ((post) => ({ id : String ( post .id) , })) } export default async function Page ({ params , } : { params : Promise <{ id : string }> }) { const id = ( await params).id const post : Post = await fetch ( `https://api.vercel.app/ blog / ${ id } ` ) .then ( (res) => res .json () ) return ( < main > < h1 >{ post .title}</ h1 > < p >{ post .content}</ p > </ main > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "During next build , all known blog posts are generated (there are 25 in this example)",
                        "All requests made to these pages (e.g. /blog/1 ) are cached and instantaneous",
                        "After 60 seconds has passed, the next request will still show the cached (stale) page",
                        "The cache is invalidated and a new version of the page begins generating in the background",
                        "Once generated successfully, Next.js will display and cache the updated page",
                        "If /blog/26 is requested, Next.js will generate and cache this page on-demand"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "revalidate",
                        "dynamicParams"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "revalidatePath",
                        "revalidateTag"
                    ]
                },
                {
                    "type": "p",
                    "text": "This fetches and displays a list of blog posts on /blog . After an hour, the cache for this page is invalidated on the next visit to the page. Then, in the background, a new version of the page is generated with the latest blog posts."
                },
                {
                    "type": "code",
                    "code": "interface Post { id : string title : string content : string } export const revalidate = 3600 // invalidate every hour export default async function Page () { const data = await fetch ( 'https://api.vercel.app/ blog ' ) const posts : Post [] = await data .json () return ( < main > < h1 >Blog Posts</ h1 > < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > </ main > ) }"
                },
                {
                    "type": "p",
                    "text": "We recommend setting a high revalidation time. For instance, 1 hour instead of 1 second. If you need more precision, consider using on-demand revalidation. If you need real-time data, consider switching to dynamic rendering . For a more precise method of revalidation, invalidate pages on-demand with the revalidatePath function. For example, this Server Action would get called after adding a new post. Regardless of how you retrieve your data in your Server Component, either using fetch or connecting to a database, this will clear the cache for the entire route and allow the Server Component to fetch fresh data."
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidatePath } from 'next/cache' export async function createPost () { // Invalidate the /posts route in the cache revalidatePath ( '/posts' ) }"
                },
                {
                    "type": "p",
                    "text": "View a demo and explore the source code . For most use cases, prefer revalidating entire paths. If you need more granular control, you can use the revalidateTag function. For example, you can tag individual fetch calls:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const data = await fetch ( 'https://api.vercel.app/ blog ' , { next : { tags : [ 'posts' ] } , }) const posts = await data .json () // ... }"
                },
                {
                    "type": "p",
                    "text": "If you are using an ORM or connecting to a database, you can use unstable_cache :"
                },
                {
                    "type": "code",
                    "code": "import { unstable_cache } from 'next/cache' import { db , posts } from '@/lib/db' const getCachedPosts = unstable_cache ( async () => { return await db .select () .from (posts) } , [ 'posts' ] , { revalidate : 3600 , tags : [ 'posts' ] } ) export default async function Page () { const posts = getCachedPosts () // ... }"
                },
                {
                    "type": "p",
                    "text": "You can then use revalidateTag in a Server Actions or Route Handler :"
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidateTag } from 'next/cache' export async function createPost () { // Invalidate all data tagged with 'posts' in the cache revalidateTag ( 'posts' ) }"
                },
                {
                    "type": "p",
                    "text": "If an error is thrown while attempting to revalidate data, the last successfully generated data will continue to be served from the cache. On the next subsequent request, Next.js will retry revalidating the data. Learn more about error handling . Caching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. When deploying to Vercel , the ISR cache is automatically persisted to durable storage. When self-hosting, the ISR cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router. You can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application. Learn more . If you are using the fetch API, you can add additional logging to understand which requests are cached or uncached. Learn more about the logging option ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { logging : { fetches : { fullUrl : true , } , } , }"
                },
                {
                    "type": "p",
                    "text": "To verify your pages are cached and revalidated correctly in production, you can test locally by running next build and then next start to run the production Next.js server. This will allow you to test ISR behavior as it would work in a production environment. For further debugging, add the following environment variable to your .env file:"
                },
                {
                    "type": "code",
                    "code": "NEXT_PRIVATE_DEBUG_CACHE = 1"
                },
                {
                    "type": "p",
                    "text": "This will make the Next.js server console log ISR cache hits and misses. You can inspect the output to see which pages are generated during next build , as well as how pages are updated as paths are accessed on-demand."
                },
                {
                    "type": "list",
                    "items": [
                        "ISR is only supported when using the Node.js runtime (default).",
                        "ISR is not supported when creating a Static Export .",
                        "If you have multiple fetch requests in a statically rendered route, and each has a different revalidate frequency, the lowest time will be used for ISR. However, those revalidate frequencies will still be respected by the Data Cache .",
                        "If any of the fetch requests used on a route have a revalidate time of 0 , or an explicit no-store , the route will be dynamically rendered .",
                        "Middleware won't be executed for on-demand ISR requests, meaning any path rewrites or logic in Middleware will not be applied. Ensure you are revalidating the exact path. For example, /post/1 instead of a rewritten /post-1 ."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions",
            "title": "Data Fetching: Server Actions and Mutations | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Server Actions are asynchronous functions that are executed on the server. They can be called in Server and Client Components to handle form submissions and data mutations in Next.js applications. 🎥 Watch: Learn more about mutations with Server Actions → YouTube (10 minutes) . A Server Action can be defined with the React \"use server\" directive. You can place the directive at the top of an async function to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions. Server Components can use the inline function level or module level \"use server\" directive. To inline a Server Action, add \"use server\" to the top of the function body:"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { // Server Action async function create () { 'use server' // Mutate data } return '...' }"
                },
                {
                    "type": "p",
                    "text": "To call a Server Action in a Client Component, create a new file and add the \"use server\" directive at the top of it. All exported functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:"
                },
                {
                    "type": "code",
                    "code": "'use server' export async function create () {}"
                },
                {
                    "type": "code",
                    "code": "'use client' import { create } from '@/app/actions' export function Button () { return < button onClick = {() => create ()}>Create</ button > }"
                },
                {
                    "type": "p",
                    "text": "You can also pass a Server Action to a Client Component as a prop:"
                },
                {
                    "type": "code",
                    "code": "< ClientComponent updateItemAction = {updateItem} />"
                },
                {
                    "type": "code",
                    "code": "'use client' export default function ClientComponent ({ updateItemAction , } : { updateItemAction : (formData : FormData ) => void }) { return < form action = {updateItemAction}>{ /* ... */ }</ form > }"
                },
                {
                    "type": "p",
                    "text": "Usually, the Next.js TypeScript plugin would flag updateItemAction in client-component.tsx since it is a function which generally can't be serialized across client-server boundaries.\nHowever, props named action or ending with Action are assumed to receive Server Actions.\nThis is only a heuristic since the TypeScript plugin doesn't actually know if it receives a Server Action or an ordinary function.\nRuntime type-checking will still ensure you don't accidentally pass a function to a Client Component."
                },
                {
                    "type": "list",
                    "items": [
                        "Server actions can be invoked using the action attribute in a <form> element : Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled. In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration. After hydration, the browser does not refresh on form submission.",
                        "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
                        "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
                        "After hydration, the browser does not refresh on form submission.",
                        "Server Actions are not limited to <form> and can be invoked from event handlers, useEffect , third-party libraries, and other form elements like <button> .",
                        "Server Actions integrate with the Next.js caching and revalidation architecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.",
                        "Behind the scenes, actions use the POST method, and only this HTTP method can invoke them.",
                        "The arguments and return value of Server Actions must be serializable by React. See the React docs for a list of serializable arguments and values .",
                        "Server Actions are functions. This means they can be reused anywhere in your application.",
                        "Server Actions inherit the runtime from the page or layout they are used on.",
                        "Server Actions inherit the Route Segment Config from the page or layout they are used on, including fields like maxDuration ."
                    ]
                },
                {
                    "type": "p",
                    "text": "React extends the HTML <form> element to allow Server Actions to be invoked with the action prop. When invoked in a form, the action automatically receives the FormData object. You don't need to use React useState to manage fields, instead, you can extract the data using the native FormData methods :"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { async function createInvoice (formData : FormData ) { 'use server' const rawFormData = { customerId : formData .get ( 'customerId' ) , amount : formData .get ( 'amount' ) , status : formData .get ( 'status' ) , } // mutate data // revalidate cache } return < form action = {createInvoice}>...</ form > }"
                },
                {
                    "type": "list",
                    "items": [
                        "Example: Form with Loading & Error States",
                        "When working with forms that have many fields, you may want to consider using the entries() method with JavaScript's Object.fromEntries() . For example: const rawFormData = Object.fromEntries(formData) . One thing to note is that the formData will include additional $ACTION_ properties.",
                        "See React <form> documentation to learn more."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can pass additional arguments to a Server Action using the JavaScript bind method."
                },
                {
                    "type": "code",
                    "code": "'use client' import { updateUser } from './actions' export function UserProfile ({ userId } : { userId : string }) { const updateUserWithId = updateUser .bind ( null , userId) return ( < form action = {updateUserWithId}> < input type = \"text\" name = \"name\" /> < button type = \"submit\" >Update User Name</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "The Server Action will receive the userId argument, in addition to the form data:"
                },
                {
                    "type": "code",
                    "code": "'use server' export async function updateUser (userId : string , formData : FormData ) {}"
                },
                {
                    "type": "list",
                    "items": [
                        "An alternative is to pass arguments as hidden input fields in the form (e.g. <input type=\"hidden\" name=\"userId\" value={userId} /> ). However, the value will be part of the rendered HTML and will not be encoded.",
                        ".bind works in both Server and Client Components. It also supports progressive enhancement."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can also invoke a Server Action in elements nested inside <form> such as <button> , <input type=\"submit\"> , and <input type=\"image\"> . These elements accept the formAction prop or event handlers . This is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific <button> element for saving a post draft in addition to publishing it. See the React <form> docs for more information. You can trigger a form submission programmatically using the requestSubmit() method. For example, when the user submits a form using the ⌘ + Enter keyboard shortcut, you can listen for the onKeyDown event:"
                },
                {
                    "type": "code",
                    "code": "'use client' export function Entry () { const handleKeyDown = (e : React . KeyboardEvent < HTMLTextAreaElement >) => { if ( ( e .ctrlKey || e .metaKey) && ( e .key === 'Enter' || e .key === 'NumpadEnter' ) ) { e .preventDefault () e . currentTarget . form ?.requestSubmit () } } return ( < div > < textarea name = \"entry\" rows = { 20 } required onKeyDown = {handleKeyDown} /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "This will trigger the submission of the nearest <form> ancestor, which will invoke the Server Action. You can use the HTML attributes like required and type=\"email\" for basic client-side form validation. For more advanced server-side validation, you can use a library like zod to validate the form fields before mutating the data:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { z } from 'zod' const schema = z .object ({ email : z .string ({ invalid_type_error : 'Invalid Email' , }) , }) export default async function createUser (formData : FormData ) { const validatedFields = schema .safeParse ({ email : formData .get ( 'email' ) , }) // Return early if the form data is invalid if ( ! validatedFields .success) { return { errors : validatedFields . error .flatten ().fieldErrors , } } // Mutate data }"
                },
                {
                    "type": "p",
                    "text": "Once the fields have been validated on the server, you can return a serializable object in your action and use the React useActionState hook to show a message to the user."
                },
                {
                    "type": "list",
                    "items": [
                        "By passing the action to useActionState , the action's function signature changes to receive a new prevState or initialState parameter as its first argument.",
                        "useActionState is a React hook and therefore must be used in a Client Component."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' export async function createUser (prevState : any , formData : FormData ) { const res = await fetch ( 'https://...' ) const json = await res .json () if ( ! res .ok) { return { message : 'Please enter a valid email' } } redirect ( '/dashboard' ) }"
                },
                {
                    "type": "p",
                    "text": "Then, you can pass your action to the useActionState hook and use the returned state to display an error message."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useActionState } from 'react' import { createUser } from '@/app/actions' const initialState = { message : '' , } export function Signup () { const [ state , formAction , pending ] = useActionState (createUser , initialState) return ( < form action = {formAction}> < label htmlFor = \"email\" >Email</ label > < input type = \"text\" id = \"email\" name = \"email\" req ui red /> { /* ... */ } < p aria-live = \"polite\" >{ state ?.message}</ p > < button disabled = {pending}>Sign up</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "The useActionState hook exposes a pending boolean that can be used to show a loading indicator while the action is being executed. Alternatively, you can use the useFormStatus hook to show a loading indicator while the action is being executed. When using this hook, you'll need to create a separate component to render the loading indicator. For example, to disable the button when the action is pending:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useFormStatus } from 'react-dom' export function SubmitButton () { const { pending } = useFormStatus () return ( < button disabled = {pending} type = \"submit\" > Sign Up </ button > ) }"
                },
                {
                    "type": "p",
                    "text": "You can then nest the SubmitButton component inside the form:"
                },
                {
                    "type": "code",
                    "code": "import { SubmitButton } from './button' import { createUser } from '@/app/actions' export function Signup () { return ( < form action = {createUser}> { /* Other form elements */ } < SubmitButton /> </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know: In React 19, useFormStatus includes additional keys on the returned object, like data, method, and action. If you are not using React 19, only the pending key is available. You can use the React useOptimistic hook to optimistically update the UI before the Server Action finishes executing, rather than waiting for the response:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useOptimistic } from 'react' import { send } from './actions' type Message = { message : string } export function Thread ({ messages } : { messages : Message [] }) { const [ optimisticMessages , addOptimisticMessage ] = useOptimistic < Message[] , string > (messages , (state , newMessage) => [ ... state , { message : newMessage }]) const formAction = async (formData : FormData ) => { const message = formData .get ( 'message' ) as string addOptimisticMessage (message) await send (message) } return ( < div > { optimisticMessages .map ((m , i) => ( < div key = {i}>{ m .message}</ div > ))} < form action = {formAction}> < input type = \"text\" name = \"message\" /> < button type = \"submit\" >Send</ button > </ form > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "While it's common to use Server Actions within <form> elements, they can also be invoked with event handlers such as onClick . For example, to increment a like count:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { incrementLike } from './actions' import { useState } from 'react' export default function LikeButton ({ initialLikes } : { initialLikes : number }) { const [ likes , setLikes ] = useState (initialLikes) return ( <> < p >Total Likes: {likes}</ p > < button onClick = { async () => { const updatedLikes = await incrementLike () setLikes (updatedLikes) }} > Like </ button > </> ) }"
                },
                {
                    "type": "p",
                    "text": "You can also add event handlers to form elements, for example, to save a form field onChange :"
                },
                {
                    "type": "code",
                    "code": "'use client' import { publishPost , saveDraft } from './actions' export default function EditPost () { return ( < form action = {publishPost}> < textarea name = \"content\" onChange = { async (e) => { await saveDraft ( e . target .value) }} /> < button type = \"submit\" >Publish</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "For cases like this, where multiple events might be fired in quick succession, we recommend debouncing to prevent unnecessary Server Action invocations. You can use the React useEffect hook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example, onKeyDown for app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { incrementViews } from './actions' import { useState , useEffect } from 'react' export default function ViewCount ({ initialViews } : { initialViews : number }) { const [ views , setViews ] = useState (initialViews) useEffect (() => { const updateViews = async () => { const updatedViews = await incrementViews () setViews (updatedViews) } updateViews () } , []) return < p >Total Views: {views}</ p > }"
                },
                {
                    "type": "p",
                    "text": "Remember to consider the behavior and caveats of useEffect . When an error is thrown, it'll be caught by the nearest error.js or <Suspense> boundary on the client. See Error Handling for more information."
                },
                {
                    "type": "list",
                    "items": [
                        "Aside from throwing the error, you can also return an object to be handled by useActionState . See Server-side validation and error handling ."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can revalidate the Next.js Cache inside your Server Actions with the revalidatePath API:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidatePath } from 'next/cache' export async function createPost () { try { // ... } catch (error) { // ... } revalidatePath ( '/posts' ) }"
                },
                {
                    "type": "p",
                    "text": "Or invalidate a specific data fetch with a cache tag using revalidateTag :"
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidateTag } from 'next/cache' export async function createPost () { try { // ... } catch (error) { // ... } revalidateTag ( 'posts' ) }"
                },
                {
                    "type": "p",
                    "text": "If you would like to redirect the user to a different route after the completion of a Server Action, you can use redirect API. redirect needs to be called outside of the try/catch block:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' import { revalidateTag } from 'next/cache' export async function createPost (id : string ) { try { // ... } catch (error) { // ... } revalidateTag ( 'posts' ) // Update cached posts redirect ( `/post/ ${ id } ` ) // Navigate to the new post page }"
                },
                {
                    "type": "p",
                    "text": "You can get , set , and delete cookies inside a Server Action using the cookies API:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { cookies } from 'next/headers' export async function exampleAction () { const cookieStore = await cookies () // Get cookie cookieStore .get ( 'name' )?.value // Set cookie cookieStore .set ( 'name' , 'Delba' ) // Delete cookie cookieStore .delete ( 'name' ) }"
                },
                {
                    "type": "p",
                    "text": "See additional examples for deleting cookies from Server Actions. By default, when a Server Action is created and exported, it creates a public HTTP endpoint\nand should be treated with the same security assumptions and authorization checks. This means, even if a Server Action or utility function is not imported elsewhere in your code, it’s still publicly accessible. To improve security, Next.js has the following built-in features:"
                },
                {
                    "type": "list",
                    "items": [
                        "Secure action IDs: Next.js creates encrypted, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security.",
                        "Dead code elimination: Unused Server Actions (referenced by their IDs) are removed from client bundle to avoid public access by third-party."
                    ]
                },
                {
                    "type": "p",
                    "text": "The IDs are created during compilation and are cached for a maximum of 14 days. They will be regenerated when a new build is initiated or when the build cache is invalidated.\nThis security improvement reduces the risk in cases where an authentication layer is missing. However, you should still treat Server Actions like public HTTP endpoints."
                },
                {
                    "type": "code",
                    "code": "// app/actions.js 'use server' // This action **is** used in our application, so Next.js // will create a secure ID to allow the client to reference // and call the Server Action. export async function updateUserAction (formData) {} // This action **is not** used in our application, so Next.js // will automatically remove this code during `next build` // and will not create a public endpoint. export async function deleteUserAction (formData) {}"
                },
                {
                    "type": "p",
                    "text": "You should ensure that the user is authorized to perform the action. For example:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { auth } from './lib' export function addItem () { const { user } = auth () if ( ! user) { throw new Error ( 'You must be signed in to perform this action' ) } // ... }"
                },
                {
                    "type": "p",
                    "text": "Defining a Server Action inside a component creates a closure where the action has access to the outer function's scope. For example, the publish action has access to the publishVersion variable:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const publishVersion = await getLatestVersion (); async function publish () { \"use server\" ; if (publishVersion !== await getLatestVersion ()) { throw new Error ( 'The version has changed since pressing publish' ); } ... } return ( < form > < button formAction = {publish}>Publish</ button > </ form > ); }"
                },
                {
                    "type": "p",
                    "text": "Closures are useful when you need to capture a snapshot of data (e.g. publishVersion ) at the time of rendering so that it can be used later when the action is invoked. However, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build. Good to know: We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use the React taint APIs to proactively prevent specific data from being sent to the client. When self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies. To mitigate this, you can overwrite the encryption key using the process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY environment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key. This is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing. Good to know: Next.js applications deployed to Vercel automatically handle this. Since Server Actions can be invoked in a <form> element, this opens them up to CSRF attacks . Behind the scenes, Server Actions use the POST method, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly with SameSite cookies being the default. As an additional protection, Server Actions in Next.js also compare the Origin header to the Host header (or X-Forwarded-Host ). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it. For large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration option serverActions.allowedOrigins option to specify a list of safe origins. The option accepts an array of strings."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ module . exports = { experimental : { serverActions : { allowedOrigins : [ 'my-proxy.com' , '*.my-proxy.com' ] , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Learn more about Security and Server Actions . For more information, check out the following React docs:"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Actions",
                        "\"use server\"",
                        "<form>",
                        "useFormStatus",
                        "useActionState",
                        "useOptimistic"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations",
            "title": "Data Fetching: Server Actions and Mutations | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Server Actions are asynchronous functions that are executed on the server. They can be called in Server and Client Components to handle form submissions and data mutations in Next.js applications. 🎥 Watch: Learn more about mutations with Server Actions → YouTube (10 minutes) . A Server Action can be defined with the React \"use server\" directive. You can place the directive at the top of an async function to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions. Server Components can use the inline function level or module level \"use server\" directive. To inline a Server Action, add \"use server\" to the top of the function body:"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { // Server Action async function create () { 'use server' // Mutate data } return '...' }"
                },
                {
                    "type": "p",
                    "text": "To call a Server Action in a Client Component, create a new file and add the \"use server\" directive at the top of it. All exported functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:"
                },
                {
                    "type": "code",
                    "code": "'use server' export async function create () {}"
                },
                {
                    "type": "code",
                    "code": "'use client' import { create } from '@/app/actions' export function Button () { return < button onClick = {() => create ()}>Create</ button > }"
                },
                {
                    "type": "p",
                    "text": "You can also pass a Server Action to a Client Component as a prop:"
                },
                {
                    "type": "code",
                    "code": "< ClientComponent updateItemAction = {updateItem} />"
                },
                {
                    "type": "code",
                    "code": "'use client' export default function ClientComponent ({ updateItemAction , } : { updateItemAction : (formData : FormData ) => void }) { return < form action = {updateItemAction}>{ /* ... */ }</ form > }"
                },
                {
                    "type": "p",
                    "text": "Usually, the Next.js TypeScript plugin would flag updateItemAction in client-component.tsx since it is a function which generally can't be serialized across client-server boundaries.\nHowever, props named action or ending with Action are assumed to receive Server Actions.\nThis is only a heuristic since the TypeScript plugin doesn't actually know if it receives a Server Action or an ordinary function.\nRuntime type-checking will still ensure you don't accidentally pass a function to a Client Component."
                },
                {
                    "type": "list",
                    "items": [
                        "Server actions can be invoked using the action attribute in a <form> element : Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled. In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration. After hydration, the browser does not refresh on form submission.",
                        "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
                        "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
                        "After hydration, the browser does not refresh on form submission.",
                        "Server Actions are not limited to <form> and can be invoked from event handlers, useEffect , third-party libraries, and other form elements like <button> .",
                        "Server Actions integrate with the Next.js caching and revalidation architecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.",
                        "Behind the scenes, actions use the POST method, and only this HTTP method can invoke them.",
                        "The arguments and return value of Server Actions must be serializable by React. See the React docs for a list of serializable arguments and values .",
                        "Server Actions are functions. This means they can be reused anywhere in your application.",
                        "Server Actions inherit the runtime from the page or layout they are used on.",
                        "Server Actions inherit the Route Segment Config from the page or layout they are used on, including fields like maxDuration ."
                    ]
                },
                {
                    "type": "p",
                    "text": "React extends the HTML <form> element to allow Server Actions to be invoked with the action prop. When invoked in a form, the action automatically receives the FormData object. You don't need to use React useState to manage fields, instead, you can extract the data using the native FormData methods :"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { async function createInvoice (formData : FormData ) { 'use server' const rawFormData = { customerId : formData .get ( 'customerId' ) , amount : formData .get ( 'amount' ) , status : formData .get ( 'status' ) , } // mutate data // revalidate cache } return < form action = {createInvoice}>...</ form > }"
                },
                {
                    "type": "list",
                    "items": [
                        "Example: Form with Loading & Error States",
                        "When working with forms that have many fields, you may want to consider using the entries() method with JavaScript's Object.fromEntries() . For example: const rawFormData = Object.fromEntries(formData) . One thing to note is that the formData will include additional $ACTION_ properties.",
                        "See React <form> documentation to learn more."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can pass additional arguments to a Server Action using the JavaScript bind method."
                },
                {
                    "type": "code",
                    "code": "'use client' import { updateUser } from './actions' export function UserProfile ({ userId } : { userId : string }) { const updateUserWithId = updateUser .bind ( null , userId) return ( < form action = {updateUserWithId}> < input type = \"text\" name = \"name\" /> < button type = \"submit\" >Update User Name</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "The Server Action will receive the userId argument, in addition to the form data:"
                },
                {
                    "type": "code",
                    "code": "'use server' export async function updateUser (userId : string , formData : FormData ) {}"
                },
                {
                    "type": "list",
                    "items": [
                        "An alternative is to pass arguments as hidden input fields in the form (e.g. <input type=\"hidden\" name=\"userId\" value={userId} /> ). However, the value will be part of the rendered HTML and will not be encoded.",
                        ".bind works in both Server and Client Components. It also supports progressive enhancement."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can also invoke a Server Action in elements nested inside <form> such as <button> , <input type=\"submit\"> , and <input type=\"image\"> . These elements accept the formAction prop or event handlers . This is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific <button> element for saving a post draft in addition to publishing it. See the React <form> docs for more information. You can trigger a form submission programmatically using the requestSubmit() method. For example, when the user submits a form using the ⌘ + Enter keyboard shortcut, you can listen for the onKeyDown event:"
                },
                {
                    "type": "code",
                    "code": "'use client' export function Entry () { const handleKeyDown = (e : React . KeyboardEvent < HTMLTextAreaElement >) => { if ( ( e .ctrlKey || e .metaKey) && ( e .key === 'Enter' || e .key === 'NumpadEnter' ) ) { e .preventDefault () e . currentTarget . form ?.requestSubmit () } } return ( < div > < textarea name = \"entry\" rows = { 20 } required onKeyDown = {handleKeyDown} /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "This will trigger the submission of the nearest <form> ancestor, which will invoke the Server Action. You can use the HTML attributes like required and type=\"email\" for basic client-side form validation. For more advanced server-side validation, you can use a library like zod to validate the form fields before mutating the data:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { z } from 'zod' const schema = z .object ({ email : z .string ({ invalid_type_error : 'Invalid Email' , }) , }) export default async function createUser (formData : FormData ) { const validatedFields = schema .safeParse ({ email : formData .get ( 'email' ) , }) // Return early if the form data is invalid if ( ! validatedFields .success) { return { errors : validatedFields . error .flatten ().fieldErrors , } } // Mutate data }"
                },
                {
                    "type": "p",
                    "text": "Once the fields have been validated on the server, you can return a serializable object in your action and use the React useActionState hook to show a message to the user."
                },
                {
                    "type": "list",
                    "items": [
                        "By passing the action to useActionState , the action's function signature changes to receive a new prevState or initialState parameter as its first argument.",
                        "useActionState is a React hook and therefore must be used in a Client Component."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' export async function createUser (prevState : any , formData : FormData ) { const res = await fetch ( 'https://...' ) const json = await res .json () if ( ! res .ok) { return { message : 'Please enter a valid email' } } redirect ( '/dashboard' ) }"
                },
                {
                    "type": "p",
                    "text": "Then, you can pass your action to the useActionState hook and use the returned state to display an error message."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useActionState } from 'react' import { createUser } from '@/app/actions' const initialState = { message : '' , } export function Signup () { const [ state , formAction , pending ] = useActionState (createUser , initialState) return ( < form action = {formAction}> < label htmlFor = \"email\" >Email</ label > < input type = \"text\" id = \"email\" name = \"email\" req ui red /> { /* ... */ } < p aria-live = \"polite\" >{ state ?.message}</ p > < button disabled = {pending}>Sign up</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "The useActionState hook exposes a pending boolean that can be used to show a loading indicator while the action is being executed. Alternatively, you can use the useFormStatus hook to show a loading indicator while the action is being executed. When using this hook, you'll need to create a separate component to render the loading indicator. For example, to disable the button when the action is pending:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useFormStatus } from 'react-dom' export function SubmitButton () { const { pending } = useFormStatus () return ( < button disabled = {pending} type = \"submit\" > Sign Up </ button > ) }"
                },
                {
                    "type": "p",
                    "text": "You can then nest the SubmitButton component inside the form:"
                },
                {
                    "type": "code",
                    "code": "import { SubmitButton } from './button' import { createUser } from '@/app/actions' export function Signup () { return ( < form action = {createUser}> { /* Other form elements */ } < SubmitButton /> </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know: In React 19, useFormStatus includes additional keys on the returned object, like data, method, and action. If you are not using React 19, only the pending key is available. You can use the React useOptimistic hook to optimistically update the UI before the Server Action finishes executing, rather than waiting for the response:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useOptimistic } from 'react' import { send } from './actions' type Message = { message : string } export function Thread ({ messages } : { messages : Message [] }) { const [ optimisticMessages , addOptimisticMessage ] = useOptimistic < Message[] , string > (messages , (state , newMessage) => [ ... state , { message : newMessage }]) const formAction = async (formData : FormData ) => { const message = formData .get ( 'message' ) as string addOptimisticMessage (message) await send (message) } return ( < div > { optimisticMessages .map ((m , i) => ( < div key = {i}>{ m .message}</ div > ))} < form action = {formAction}> < input type = \"text\" name = \"message\" /> < button type = \"submit\" >Send</ button > </ form > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "While it's common to use Server Actions within <form> elements, they can also be invoked with event handlers such as onClick . For example, to increment a like count:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { incrementLike } from './actions' import { useState } from 'react' export default function LikeButton ({ initialLikes } : { initialLikes : number }) { const [ likes , setLikes ] = useState (initialLikes) return ( <> < p >Total Likes: {likes}</ p > < button onClick = { async () => { const updatedLikes = await incrementLike () setLikes (updatedLikes) }} > Like </ button > </> ) }"
                },
                {
                    "type": "p",
                    "text": "You can also add event handlers to form elements, for example, to save a form field onChange :"
                },
                {
                    "type": "code",
                    "code": "'use client' import { publishPost , saveDraft } from './actions' export default function EditPost () { return ( < form action = {publishPost}> < textarea name = \"content\" onChange = { async (e) => { await saveDraft ( e . target .value) }} /> < button type = \"submit\" >Publish</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "For cases like this, where multiple events might be fired in quick succession, we recommend debouncing to prevent unnecessary Server Action invocations. You can use the React useEffect hook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example, onKeyDown for app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { incrementViews } from './actions' import { useState , useEffect } from 'react' export default function ViewCount ({ initialViews } : { initialViews : number }) { const [ views , setViews ] = useState (initialViews) useEffect (() => { const updateViews = async () => { const updatedViews = await incrementViews () setViews (updatedViews) } updateViews () } , []) return < p >Total Views: {views}</ p > }"
                },
                {
                    "type": "p",
                    "text": "Remember to consider the behavior and caveats of useEffect . When an error is thrown, it'll be caught by the nearest error.js or <Suspense> boundary on the client. See Error Handling for more information."
                },
                {
                    "type": "list",
                    "items": [
                        "Aside from throwing the error, you can also return an object to be handled by useActionState . See Server-side validation and error handling ."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can revalidate the Next.js Cache inside your Server Actions with the revalidatePath API:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidatePath } from 'next/cache' export async function createPost () { try { // ... } catch (error) { // ... } revalidatePath ( '/posts' ) }"
                },
                {
                    "type": "p",
                    "text": "Or invalidate a specific data fetch with a cache tag using revalidateTag :"
                },
                {
                    "type": "code",
                    "code": "'use server' import { revalidateTag } from 'next/cache' export async function createPost () { try { // ... } catch (error) { // ... } revalidateTag ( 'posts' ) }"
                },
                {
                    "type": "p",
                    "text": "If you would like to redirect the user to a different route after the completion of a Server Action, you can use redirect API. redirect needs to be called outside of the try/catch block:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' import { revalidateTag } from 'next/cache' export async function createPost (id : string ) { try { // ... } catch (error) { // ... } revalidateTag ( 'posts' ) // Update cached posts redirect ( `/post/ ${ id } ` ) // Navigate to the new post page }"
                },
                {
                    "type": "p",
                    "text": "You can get , set , and delete cookies inside a Server Action using the cookies API:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { cookies } from 'next/headers' export async function exampleAction () { const cookieStore = await cookies () // Get cookie cookieStore .get ( 'name' )?.value // Set cookie cookieStore .set ( 'name' , 'Delba' ) // Delete cookie cookieStore .delete ( 'name' ) }"
                },
                {
                    "type": "p",
                    "text": "See additional examples for deleting cookies from Server Actions. By default, when a Server Action is created and exported, it creates a public HTTP endpoint\nand should be treated with the same security assumptions and authorization checks. This means, even if a Server Action or utility function is not imported elsewhere in your code, it’s still publicly accessible. To improve security, Next.js has the following built-in features:"
                },
                {
                    "type": "list",
                    "items": [
                        "Secure action IDs: Next.js creates encrypted, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security.",
                        "Dead code elimination: Unused Server Actions (referenced by their IDs) are removed from client bundle to avoid public access by third-party."
                    ]
                },
                {
                    "type": "p",
                    "text": "The IDs are created during compilation and are cached for a maximum of 14 days. They will be regenerated when a new build is initiated or when the build cache is invalidated.\nThis security improvement reduces the risk in cases where an authentication layer is missing. However, you should still treat Server Actions like public HTTP endpoints."
                },
                {
                    "type": "code",
                    "code": "// app/actions.js 'use server' // This action **is** used in our application, so Next.js // will create a secure ID to allow the client to reference // and call the Server Action. export async function updateUserAction (formData) {} // This action **is not** used in our application, so Next.js // will automatically remove this code during `next build` // and will not create a public endpoint. export async function deleteUserAction (formData) {}"
                },
                {
                    "type": "p",
                    "text": "You should ensure that the user is authorized to perform the action. For example:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { auth } from './lib' export function addItem () { const { user } = auth () if ( ! user) { throw new Error ( 'You must be signed in to perform this action' ) } // ... }"
                },
                {
                    "type": "p",
                    "text": "Defining a Server Action inside a component creates a closure where the action has access to the outer function's scope. For example, the publish action has access to the publishVersion variable:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const publishVersion = await getLatestVersion (); async function publish () { \"use server\" ; if (publishVersion !== await getLatestVersion ()) { throw new Error ( 'The version has changed since pressing publish' ); } ... } return ( < form > < button formAction = {publish}>Publish</ button > </ form > ); }"
                },
                {
                    "type": "p",
                    "text": "Closures are useful when you need to capture a snapshot of data (e.g. publishVersion ) at the time of rendering so that it can be used later when the action is invoked. However, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build. Good to know: We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use the React taint APIs to proactively prevent specific data from being sent to the client. When self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies. To mitigate this, you can overwrite the encryption key using the process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY environment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key. This is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing. Good to know: Next.js applications deployed to Vercel automatically handle this. Since Server Actions can be invoked in a <form> element, this opens them up to CSRF attacks . Behind the scenes, Server Actions use the POST method, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly with SameSite cookies being the default. As an additional protection, Server Actions in Next.js also compare the Origin header to the Host header (or X-Forwarded-Host ). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it. For large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration option serverActions.allowedOrigins option to specify a list of safe origins. The option accepts an array of strings."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ module . exports = { experimental : { serverActions : { allowedOrigins : [ 'my-proxy.com' , '*.my-proxy.com' ] , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Learn more about Security and Server Actions . For more information, check out the following React docs:"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Actions",
                        "\"use server\"",
                        "<form>",
                        "useFormStatus",
                        "useActionState",
                        "useOptimistic"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/deploying",
            "title": "Building Your Application: Deploying | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Congratulations, it's time to ship to production. You can deploy managed Next.js with Vercel , or self-host on a Node.js server, Docker image, or even static HTML files. When deploying using next start , all Next.js features are supported. Running next build generates an optimized version of your application for production. HTML, CSS, and JavaScript files are created based on your pages. JavaScript is compiled and browser bundles are minified using the Next.js Compiler to help achieve the best performance and support all modern browsers . Next.js produces a standard deployment output used by managed and self-hosted Next.js. This ensures all features are supported across both methods of deployment. In the next major version, we will be transforming this output into our Build Output API specification . Vercel , the creators and maintainers of Next.js, provide managed infrastructure and a developer experience platform for your Next.js applications. Deploying to Vercel is zero-configuration and provides additional enhancements for scalability, availability, and performance globally. However, all Next.js features are still supported when self-hosted. Learn more about Next.js on Vercel or deploy a template for free to try it out. You can self-host Next.js in three different ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "A Node.js server",
                        "A Docker container",
                        "A static export"
                    ]
                },
                {
                    "type": "p",
                    "text": "🎥 Watch: Learn more about self-hosting Next.js → YouTube (45 minutes) . We have community maintained deployment examples with the following providers:"
                },
                {
                    "type": "list",
                    "items": [
                        "Deno",
                        "DigitalOcean",
                        "Flightcontrol",
                        "Fly.io",
                        "GitHub Pages",
                        "Google Cloud Run",
                        "Railway",
                        "Render",
                        "SST"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js can be deployed to any hosting provider that supports Node.js. Ensure your package.json has the \"build\" and \"start\" scripts:"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"next dev\" , \"build\" : \"next build\" , \"start\" : \"next start\" } }"
                },
                {
                    "type": "p",
                    "text": "Then, run npm run build to build your application. Finally, run npm run start to start the Node.js server. This server supports all Next.js features. Next.js can be deployed to any hosting provider that supports Docker containers. You can use this approach when deploying to container orchestrators such as Kubernetes or when running inside a container in any cloud provider."
                },
                {
                    "type": "list",
                    "items": [
                        "Install Docker on your machine",
                        "Clone our example (or the multi-environment example )",
                        "Build your container: docker build -t nextjs-docker .",
                        "Run your container: docker run -p 3000:3000 nextjs-docker"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js through Docker supports all Next.js features. Next.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server. Since Next.js supports this static export , it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets. This includes tools like AWS S3, Nginx, or Apache. Running as a static export does not support Next.js features that require a server. Learn more ."
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components are supported with static exports."
                    ]
                },
                {
                    "type": "p",
                    "text": "Image Optimization through next/image works self-hosted with zero configuration when deploying using next start . If you would prefer to have a separate service to optimize images, you can configure an image loader . Image Optimization can be used with a static export by defining a custom image loader in next.config.js . Note that images are optimized at runtime, not during the build."
                },
                {
                    "type": "list",
                    "items": [
                        "On glibc-based Linux systems, Image Optimization may require additional configuration to prevent excessive memory usage.",
                        "Learn more about the caching behavior of optimized images and how to configure the TTL.",
                        "You can also disable Image Optimization and still retain other benefits of using next/image if you prefer. For example, if you are optimizing images yourself separately."
                    ]
                },
                {
                    "type": "p",
                    "text": "Middleware works self-hosted with zero configuration when deploying using next start . Since it requires access to the incoming request, it is not supported when using a static export . Middleware uses a runtime that is a subset of all available Node.js APIs to help ensure low latency, since it may run in front of every route or asset in your application. This runtime does not require running “at the edge” and works in a single-region server. Additional configuration and infrastructure are required to run Middleware in multiple regions. If you are looking to add logic (or use an external package) that requires all Node.js APIs, you might be able to move this logic to a layout as a Server Component . For example, checking headers and redirecting . You can also use headers, cookies, or query parameters to redirect or rewrite through next.config.js . If that does not work, you can also use a custom server . Next.js can support both build time and runtime environment variables. By default, environment variables are only available on the server . To expose an environment variable to the browser, it must be prefixed with NEXT_PUBLIC_ . However, these public environment variables will be inlined into the JavaScript bundle during next build . You safely read environment variables on the server during dynamic rendering."
                },
                {
                    "type": "code",
                    "code": "import { connection } from 'next/server' export default async function Component () { await connection () // cookies, headers, and other Dynamic APIs // will also opt into dynamic rendering, meaning // this env variable is evaluated at runtime const value = process . env . MY_VALUE // ... }"
                },
                {
                    "type": "p",
                    "text": "This allows you to use a singular Docker image that can be promoted through multiple environments with different values."
                },
                {
                    "type": "list",
                    "items": [
                        "You can run code on server startup using the register function .",
                        "We do not recommend using the runtimeConfig option, as this does not work with the standalone output mode. Instead, we recommend incrementally adopting the App Router."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js can cache responses, generated static pages, build outputs, and other static assets like images, fonts, and scripts. Caching and revalidating pages (with Incremental Static Regeneration ) use the same shared cache . By default, this cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router. You can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application."
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js sets the Cache-Control header of public, max-age=31536000, immutable to truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example, Static Image Imports . You can configure the TTL for images.",
                        "Incremental Static Regeneration (ISR) sets the Cache-Control header of s-maxage: <revalidate in getStaticProps>, stale-while-revalidate . This revalidation time is defined in your getStaticProps function in seconds. If you set revalidate: false , it will default to a one-year cache duration.",
                        "Dynamically rendered pages set a Cache-Control header of private, no-cache, no-store, max-age=0, must-revalidate to prevent user-specific data from being cached. This applies to both the App Router and Pages Router. This also includes Draft Mode ."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you want to host static assets on a different domain or CDN, you can use the assetPrefix configuration in next.config.js . Next.js will use this asset prefix when retrieving JavaScript or CSS files. Separating your assets to a different domain does come with the downside of extra time spent on DNS and TLS resolution. By default, generated cache assets will be stored in memory (defaults to 50mb) and on disk. If you are hosting Next.js using a container orchestration platform like Kubernetes, each pod will have a copy of the cache. To prevent stale data from being shown since the cache is not shared between pods by default, you can configure the Next.js cache to provide a cache handler and disable in-memory caching. To configure the ISR/Data Cache location when self-hosting, you can configure a custom handler in your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { cacheHandler : require .resolve ( './cache-handler.js' ) , cacheMaxMemorySize : 0 , // disable default in-memory caching }"
                },
                {
                    "type": "p",
                    "text": "Then, create cache-handler.js in the root of your project, for example:"
                },
                {
                    "type": "code",
                    "code": "const cache = new Map () module . exports = class CacheHandler { constructor (options) { this .options = options } async get (key) { // This could be stored anywhere, like durable storage return cache .get (key) } async set (key , data , ctx) { // This could be stored anywhere, like durable storage cache .set (key , { value : data , lastModified : Date .now () , tags : ctx .tags , }) } async revalidateTag (tags) { // tags is either a string or an array of strings tags = [tags] .flat () // Iterate over all entries in the cache for ( let [key , value] of cache) { // If the value's tags include the specified tag, delete this entry if ( value . tags .some ((tag) => tags .include (tag))) { cache .delete (key) } } } }"
                },
                {
                    "type": "p",
                    "text": "Using a custom cache handler will allow you to ensure consistency across all pods hosting your Next.js application. For instance, you can save the cached values anywhere, like Redis or AWS S3."
                },
                {
                    "type": "list",
                    "items": [
                        "revalidatePath is a convenience layer on top of cache tags. Calling revalidatePath will call the revalidateTag function with a special default tag for the provided page."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js generates an ID during next build to identify which version of your application is being served. The same build should be used and boot up multiple containers. If you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use the generateBuildId command in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { generateBuildId : async () => { // This could be anything, using the latest git hash return process . env . GIT_HASH } , }"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically mitigate most instances of version skew and automatically reload the application to retrieve new assets when detected. For example, if there is a mismatch in the deploymentId , transitions between pages will perform a hard navigation versus using a prefetched value. When the application is reloaded, there may be a loss of application state if it's not designed to persist between page navigations. For example, using URL state or local storage would persist state after a page refresh. However, component state like useState would be lost in such navigations. Vercel provides additional skew protection for Next.js applications to ensure assets and functions from the previous version are still available to older clients, even after the new version is deployed. You can manually configure the deploymentId property in your next.config.js file to ensure each request uses either ?dpl query string or x-deployment-id header. The Next.js App Router supports streaming responses when self-hosting. If you are using Nginx or a similar proxy, you will need to configure it to disable buffering to enable streaming. For example, you can disable buffering in Nginx by setting X-Accel-Buffering to no :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { async headers () { return [ { source : '/:path*{/}?' , headers : [ { key : 'X-Accel-Buffering' , value : 'no' , } , ] , } , ] } , }"
                },
                {
                    "type": "p",
                    "text": "Partial Prerendering (experimental) works by default with Next.js and is not a CDN feature. This includes deployment as a Node.js server (through next start ) and when used with a Docker container. When using a CDN in front on your Next.js application, the page will include Cache-Control: private response header when dynamic APIs are accessed. This ensures that the resulting HTML page is marked as non-cachable. If the page is fully prerendered to static, it will include Cache-Control: public to allow the page to be cached on the CDN. If you don't need a mix of both static and dynamic components, you can make your entire route static and cache the output HTML on a CDN. This Automatic Static Optimization is the default behavior when running next build if dynamic APIs are not used. after is fully supported when self-hosting with next start . When stopping the server, ensure a graceful shutdown by sending SIGINT or SIGTERM signals and waiting. This allows the Next.js server to wait until after pending callback functions or promises used inside after have finished. If you want to use after on custom infrastructure, check your provider documentation to view support for after . Reference: supporting after for serverless platforms Using after in a serverless context requires waiting for asynchronous tasks to finish after the response has been sent. In Next.js and Vercel, this is achieved using a primitive called waitUntil(promise) , which extends the lifetime of a serverless invocation until all promises passed to waitUntil have settled. If you want your users to be able to run after , you will have to provide your implementation of waitUntil that behaves in an analogous way. When after is called, Next.js will access waitUntil like this:"
                },
                {
                    "type": "code",
                    "code": "const RequestContext = globalThis[ Symbol .for ( '@next/request-context' )] const contextValue = RequestContext ?.get () const waitUntil = context ?.waitUntil"
                },
                {
                    "type": "p",
                    "text": "Which means that globalThis[Symbol.for('@next/request-context')] is expected to contain an object like this:"
                },
                {
                    "type": "code",
                    "code": "type NextRequestContext = { get () : NextRequestContextValue | undefined } type NextRequestContextValue = { waitUntil ?: (promise : Promise < any >) => void }"
                },
                {
                    "type": "p",
                    "text": "Here is an example of the implementation."
                },
                {
                    "type": "code",
                    "code": "import { AsyncLocalStorage } from 'node:async_hooks' const RequestContextStorage = new AsyncLocalStorage < NextRequestContextValue >() // Define and inject the accessor that next.js will use const RequestContext : NextRequestContext = { get () { return RequestContextStorage .getStore () } , } globalThis[ Symbol .for ( '@next/request-context' )] = RequestContext const handler = (req , res) => { const contextValue = { waitUntil : YOUR_WAITUNTIL } // Provide the value return RequestContextStorage .run (contextValue , () => nextJsHandler (req , res)) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/deploying/multi-zones",
            "title": "Deploying: Multi-Zones | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Multi-Zones are an approach to micro-frontends that separate a large application on a domain into smaller Next.js applications that each serve a set of paths. This is useful when there are collections of pages unrelated to the other pages in the application. By moving those pages to a separate zone (i.e., a separate application), you can reduce the size of each application which improves build times and removes code that is only necessary for one of the zones. Since applications are decoupled, Multi-Zones also allows other applications on the domain to use their own choice of framework. For example, let's say you have the following set of pages that you would like to split up:"
                },
                {
                    "type": "list",
                    "items": [
                        "/blog/* for all blog posts",
                        "/dashboard/* for all pages when the user is logged-in to the dashboard",
                        "/* for the rest of your website not covered by other zones"
                    ]
                },
                {
                    "type": "p",
                    "text": "With Multi-Zones support, you can create three applications that all are served on the same domain and look the same to the user, but you can develop and deploy each of the applications independently. Navigating between pages in the same zone will perform soft navigations, a navigation that does not require reloading the page. For example, in this diagram, navigating from / to /products will be a soft navigation. Navigating from a page in one zone to a page in another zone, such as from / to /dashboard , will perform a hard navigation, unloading the resources of the current page and loading the resources of the new page. Pages that are frequently visited together should live in the same zone to avoid hard navigations. A zone is a normal Next.js application where you also configure an assetPrefix to avoid conflicts with pages and static files in other zones."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { assetPrefix : '/blog-static' , }"
                },
                {
                    "type": "p",
                    "text": "Next.js assets, such as JavaScript and CSS, will be prefixed with assetPrefix to make sure that they don't conflict with assets from other zones. These assets will be served under /assetPrefix/_next/... for each of the zones. The default application handling all paths not routed to another more specific zone does not need an assetPrefix . In versions older than Next.js 15, you may also need an additional rewrite to handle the static assets. This is no longer necessary in Next.js 15."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { assetPrefix : '/blog-static' , async rewrites () { return { beforeFiles : [ { source : '/blog-static/_next/:path+' , destination : '/_next/:path+' , } , ] , } } , }"
                },
                {
                    "type": "p",
                    "text": "With the Multi Zones set-up, you need to route the paths to the correct zone since they are served by different applications. You can use any HTTP proxy to do this, but one of the Next.js applications can also be used to route requests for the entire domain. To route to the correct zone using a Next.js application, you can use rewrites . For each path served by a different zone, you would add a rewrite rule to send that path to the domain of the other zone. For example:"
                },
                {
                    "type": "code",
                    "code": "async rewrites () { return [ { source : '/blog' , destination : ` ${ process . env . BLOG_DOMAIN } /blog` , } , { source : '/blog/:path+' , destination : ` ${ process . env . BLOG_DOMAIN } /blog/:path+` , } ]; }"
                },
                {
                    "type": "p",
                    "text": "destination should be a URL that is served by the zone, including scheme and domain. This should point to the zone's production domain, but it can also be used to route requests to localhost in local development. Good to know : URL paths should be unique to a zone. For example, two zones trying to serve /blog would create a routing conflict. Routing requests through rewrites is recommended to minimize latency overhead for the requests, but middleware can also be used when there is a need for a dynamic decision when routing. For example, if you are using a feature flag to decide where a path should be routed such as during a migration, you can use middleware."
                },
                {
                    "type": "code",
                    "code": "export async function middleware (request) { const { pathname , search } = req .nextUrl; if (pathname === '/your-path' && myFeatureFlag .isEnabled ()) { return NextResponse .rewrite ( ` ${ rewriteDomain }${ pathname }${ search } ); } }"
                },
                {
                    "type": "p",
                    "text": "Links to paths in a different zone should use an a tag instead of the Next.js <Link> component. This is because Next.js will try to prefetch and soft navigate to any relative path in <Link> component, which will not work across zones. The Next.js applications that make up the different zones can live in any repository. However, it is often convenient to put these zones in a monorepo to more easily share code. For zones that live in different repositories, code can also be shared using public or private NPM packages. Since the pages in different zones may be released at different times, feature flags can be useful for enabling or disabling features in unison across the different zones. For Next.js on Vercel applications, you can use a monorepo to deploy all affected zones with a single git push . When using Server Actions with Multi-Zones, you must explicitly allow the user-facing origin since your user facing domain may serve multiple applications. In your next.config.js file, add the following lines:"
                },
                {
                    "type": "code",
                    "code": "const nextConfig = { experimental : { serverActions : { allowedOrigins : [ 'your-production-domain.com' ] , } , } , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/deploying/production-checklist",
            "title": "Deploying: Production Checklist | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Before taking your Next.js application to production, there are some optimizations and patterns you should consider implementing for the best user experience, performance, and security. This page provides best practices that you can use as a reference when building your application , before going to production , and after deployment - as well as the automatic Next.js optimizations you should be aware of. These Next.js optimizations are enabled by default and require no configuration:"
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components : Next.js uses Server Components by default. Server Components run on the server, and don't require JavaScript to render on the client. As such, they have no impact on the size of your client-side JavaScript bundles. You can then use Client Components as needed for interactivity.",
                        "Code-splitting : Server Components enable automatic code-splitting by route segments. You may also consider lazy loading Client Components and third-party libraries, where appropriate.",
                        "Prefetching : When a link to a new route enters the user's viewport, Next.js prefetches the route in background. This makes navigation to new routes almost instant. You can opt out of prefetching, where appropriate.",
                        "Static Rendering : Next.js statically renders Server and Client Components on the server at build time and caches the rendered result to improve your application's performance. You can opt into Dynamic Rendering for specific routes, where appropriate.",
                        "Caching : Next.js caches data requests, the rendered result of Server and Client Components, static assets, and more, to reduce the number of network requests to your server, database, and backend services. You may opt out of caching, where appropriate."
                    ]
                },
                {
                    "type": "p",
                    "text": "These defaults aim to improve your application's performance, and reduce the cost and amount of data transferred on each network request. While building your application, we recommend using the following features to ensure the best performance and user experience:"
                },
                {
                    "type": "list",
                    "items": [
                        "Layouts : Use layouts to share UI across pages and enable partial rendering on navigation.",
                        "<Link> component : Use the <Link> component for client-side navigation and prefetching .",
                        "Error Handling : Gracefully handle catch-all errors and 404 errors in production by creating custom error pages.",
                        "Composition Patterns : Follow the recommended composition patterns for Server and Client Components, and check the placement of your \"use client\" boundaries to avoid unnecessarily increasing your client-side JavaScript bundle.",
                        "Dynamic APIs : Be aware that Dynamic APIs like cookies and the searchParams prop will opt the entire route into Dynamic Rendering (or your whole application if used in the Root Layout ). Ensure Dynamic API usage is intentional and wrap them in <Suspense> boundaries where appropriate."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know : Partial Prerendering (experimental) will allow parts of a route to be dynamic without opting the whole route into dynamic rendering."
                },
                {
                    "type": "list",
                    "items": [
                        "Server Components : Leverage the benefits of fetching data on the server using Server Components.",
                        "Route Handlers : Use Route Handlers to access your backend resources from Client Components. But do not call Route Handlers from Server Components to avoid an additional server request.",
                        "Streaming : Use Loading UI and React Suspense to progressively send UI from the server to the client, and prevent the whole route from blocking while data is being fetched.",
                        "Parallel Data Fetching : Reduce network waterfalls by fetching data in parallel, where appropriate. Also, consider preloading data where appropriate.",
                        "Data Caching : Verify whether your data requests are being cached or not, and opt into caching, where appropriate. Ensure requests that don't use fetch are cached .",
                        "Static Images : Use the public directory to automatically cache your application's static assets, e.g. images."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Forms and Validation : Use Server Actions to handle form submissions, server-side validation, and handle errors."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Font Module : Optimize fonts by using the Font Module, which automatically hosts your font files with other static assets, removes external network requests, and reduces layout shift .",
                        "<Image> Component : Optimize images by using the Image Component, which automatically optimizes images, prevents layout shift, and serves them in modern formats like WebP or AVIF.",
                        "<Script> Component : Optimize third-party scripts by using the Script Component, which automatically defers scripts and prevents them from blocking the main thread.",
                        "ESLint : Use the built-in eslint-plugin-jsx-a11y plugin to catch accessibility issues early."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Tainting : Prevent sensitive data from being exposed to the client by tainting data objects and/or specific values.",
                        "Server Actions : Ensure users are authorized to call Server Actions. Review the recommended security practices ."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Environment Variables : Ensure your .env.* files are added to .gitignore and only public variables are prefixed with NEXT_PUBLIC_ .",
                        "Content Security Policy : Consider adding a Content Security Policy to protect your application against various security threats such as cross-site scripting, clickjacking, and other code injection attacks."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Metadata API : Use the Metadata API to improve your application's Search Engine Optimization (SEO) by adding page titles, descriptions, and more.",
                        "Open Graph (OG) images : Create OG images to prepare your application for social sharing.",
                        "Sitemaps and Robots : Help Search Engines crawl and index your pages by generating sitemaps and robots files."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "TypeScript and TS Plugin : Use TypeScript and the TypeScript plugin for better type-safety, and to help you catch errors early."
                    ]
                },
                {
                    "type": "p",
                    "text": "Before going to production, you can run next build to build your application locally and catch any build errors, then run next start to measure the performance of your application in a production-like environment."
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse : Run lighthouse in incognito to gain a better understanding of how your users will experience your site, and to identify areas for improvement. This is a simulated test and should be paired with looking at field data (such as Core Web Vitals)."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "useReportWebVitals hook : Use this hook to send Core Web Vitals data to analytics tools."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the @next/bundle-analyzer plugin to analyze the size of your JavaScript bundles and identify large modules and dependencies that might be impacting your application's performance. Additionally, the following tools can help you understand the impact of adding new dependencies to your application:"
                },
                {
                    "type": "list",
                    "items": [
                        "Import Cost",
                        "Package Phobia",
                        "Bundle Phobia",
                        "bundlejs"
                    ]
                },
                {
                    "type": "p",
                    "text": "Depending on where you deploy your application, you might have access to additional tools and integrations to help you monitor and improve your application's performance. For Vercel deployments, we recommend the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Analytics : A built-in analytics dashboard to help you understand your application's traffic, including the number of unique visitors, page views, and more.",
                        "Speed Insights : Real-world performance insights based on visitor data, offering a practical view of how your website is performing in the field.",
                        "Logging : Runtime and Activity logs to help you debug issues and monitor your application in production. Alternatively, see the integrations page for a list of third-party tools and services."
                    ]
                },
                {
                    "type": "p",
                    "text": "To get a comprehensive understanding of the best practices for production deployments on Vercel, including detailed strategies for improving website performance, refer to the Vercel Production Checklist . Following these recommendations will help you build a faster, more reliable, and secure application for your users."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/deploying/static-exports",
            "title": "Deploying: Static Exports | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server. When running next build , Next.js generates an HTML file per route. By breaking a strict SPA into individual HTML files, Next.js can avoid loading unnecessary JavaScript code on the client-side, reducing the bundle size and enabling faster page loads. Since Next.js supports this static export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets. To enable a static export, change the output mode inside next.config.js :"
                },
                {
                    "type": "code",
                    "code": "/** * @type {import('next').NextConfig} */ const nextConfig = { output : 'export' , // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html` // trailingSlash: true, // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href` // skipTrailingSlashRedirect: true, // Optional: Change the output directory `out` -> `dist` // distDir: 'dist', } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "After running next build , Next.js will produce an out folder which contains the HTML/CSS/JS assets for your application. The core of Next.js has been designed to support static exports. When you run next build to generate a static export, Server Components consumed inside the app directory will run during the build, similar to traditional static-site generation. The resulting component will be rendered into static HTML for the initial page load and a static payload for client navigation between routes. No changes are required for your Server Components when using the static export, unless they consume dynamic server functions ."
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { // This fetch will run on the server during `next build` const res = await fetch ( 'https://api.example.com/...' ) const data = await res .json () return < main >...</ main > }"
                },
                {
                    "type": "p",
                    "text": "If you want to perform data fetching on the client, you can use a Client Component with SWR to memoize requests."
                },
                {
                    "type": "code",
                    "code": "'use client' import useSWR from 'swr' const fetcher = (url : string ) => fetch (url) .then ((r) => r .json ()) export default function Page () { const { data , error } = useSWR ( `https://jsonplaceholder.typicode.com/posts/1` , fetcher ) if (error) return 'Failed to load' if ( ! data) return 'Loading...' return data .title }"
                },
                {
                    "type": "p",
                    "text": "Since route transitions happen client-side, this behaves like a traditional SPA. For example, the following index route allows you to navigate to different posts on the client:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( <> < h1 >Index Page</ h1 > < hr /> < ul > < li > < Link href = \"/post/1\" >Post 1</ Link > </ li > < li > < Link href = \"/post/2\" >Post 2</ Link > </ li > </ ul > </> ) }"
                },
                {
                    "type": "p",
                    "text": "Image Optimization through next/image can be used with a static export by defining a custom image loader in next.config.js . For example, you can optimize images with a service like Cloudinary:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { output : 'export' , images : { loader : 'custom' , loaderFile : './my-loader.ts' , } , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "This custom loader will define how to fetch images from a remote source. For example, the following loader will construct the URL for Cloudinary:"
                },
                {
                    "type": "code",
                    "code": "export default function cloudinaryLoader ({ src , width , quality , } : { src : string width : number quality ?: number }) { const params = [ 'f_auto' , 'c_limit' , `w_ ${ width } ` , `q_ ${ quality || 'auto' } ` ] return `https://res.cloudinary.com/demo/image/upload/ ${ params .join ( ',' ) }${ src } ` }"
                },
                {
                    "type": "p",
                    "text": "You can then use next/image in your application, defining relative paths to the image in Cloudinary:"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export default function Page () { return < Image alt = \"turtles\" src = \"/turtles.jpg\" width = { 300 } height = { 300 } /> }"
                },
                {
                    "type": "p",
                    "text": "Route Handlers will render a static response when running next build . Only the GET HTTP verb is supported. This can be used to generate static HTML, JSON, TXT, or other files from cached or uncached data. For example:"
                },
                {
                    "type": "code",
                    "code": "export async function GET () { return Response .json ({ name : 'Lee' }) }"
                },
                {
                    "type": "p",
                    "text": "The above file app/data.json/route.ts will render to a static file during next build , producing data.json containing { name: 'Lee' } . If you need to read dynamic values from the incoming request, you cannot use a static export. Client Components are pre-rendered to HTML during next build . Because Web APIs like window , localStorage , and navigator are not available on the server, you need to safely access these APIs only when running in the browser. For example:"
                },
                {
                    "type": "code",
                    "code": "'use client' ; import { useEffect } from 'react' ; export default function ClientComponent () { useEffect (() => { // You now have access to `window` console .log ( window .innerHeight); } , []) return ... ; }"
                },
                {
                    "type": "p",
                    "text": "Features that require a Node.js server, or dynamic logic that cannot be computed during the build process, are not supported:"
                },
                {
                    "type": "list",
                    "items": [
                        "Dynamic Routes with dynamicParams: true",
                        "Dynamic Routes without generateStaticParams()",
                        "Route Handlers that rely on Request",
                        "Cookies",
                        "Rewrites",
                        "Redirects",
                        "Headers",
                        "Middleware",
                        "Incremental Static Regeneration",
                        "Image Optimization with the default loader",
                        "Draft Mode",
                        "Server Actions"
                    ]
                },
                {
                    "type": "p",
                    "text": "Attempting to use any of these features with next dev will result in an error, similar to setting the dynamic option to error in the root layout."
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'error'"
                },
                {
                    "type": "p",
                    "text": "With a static export, Next.js can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets. When running next build , Next.js generates the static export into the out folder. For example, let's say you have the following routes:"
                },
                {
                    "type": "list",
                    "items": [
                        "/",
                        "/blog/[id]"
                    ]
                },
                {
                    "type": "p",
                    "text": "After running next build , Next.js will generate the following files:"
                },
                {
                    "type": "list",
                    "items": [
                        "/out/index.html",
                        "/out/404.html",
                        "/out/blog/post-1.html",
                        "/out/blog/post-2.html"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you are using a static host like Nginx, you can configure rewrites from incoming requests to the correct files:"
                },
                {
                    "type": "code",
                    "code": "server { listen 80; server_name acme.com; root /var/www/out; location / { try_files $uri $uri.html $uri/ =404 ; } # This is necessary when `trailingSlash: false`. # You can omit this when `trailingSlash: true`. location /blog/ { rewrite ^/blog/(.*)$ /blog/$1.html break ; } error_page 404 /404.html; location = /404.html { internal ; } }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing",
            "title": "Building Your Application: Optimizing | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js comes with a variety of built-in optimizations designed to improve your application's speed and Core Web Vitals . This guide will cover the optimizations you can leverage to enhance your user experience. Built-in components abstract away the complexity of implementing common UI optimizations. These components are:"
                },
                {
                    "type": "list",
                    "items": [
                        "Images : Built on the native <img> element. The Image Component optimizes images for performance by lazy loading and automatically resizing images based on device size.",
                        "Link : Built on the native <a> tags. The Link Component prefetches pages in the background, for faster and smoother page transitions.",
                        "Scripts : Built on the native <script> tags. The Script Component gives you control over loading and execution of third-party scripts."
                    ]
                },
                {
                    "type": "p",
                    "text": "Metadata helps search engines understand your content better (which can result in better SEO), and allows you to customize how your content is presented on social media, helping you create a more engaging and consistent user experience across various platforms. The Metadata API in Next.js allows you to modify the <head> element of a page. You can configure metadata in two ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Config-based Metadata : Export a static metadata object or a dynamic generateMetadata function in a layout.js or page.js file.",
                        "File-based Metadata : Add static or dynamically generated special files to route segments."
                    ]
                },
                {
                    "type": "p",
                    "text": "Additionally, you can create dynamic Open Graph Images using JSX and CSS with imageResponse constructor. Next.js /public folder can be used to serve static assets like images, fonts, and other files. Files inside /public can also be cached by CDN providers so that they are delivered efficiently. For large applications, Next.js integrates with popular analytics and monitoring tools to help you understand how your application is performing. Learn more in the OpenTelemetry and Instrumentation guides."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/analytics",
            "title": "Optimizing: Analytics | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js has built-in support for measuring and reporting performance metrics. You can either use the useReportWebVitals hook to manage reporting yourself, or alternatively, Vercel provides a managed service to automatically collect and visualize metrics for you."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useReportWebVitals } from 'next/web-vitals' export function WebVitals () { useReportWebVitals ((metric) => { console .log (metric) }) }"
                },
                {
                    "type": "code",
                    "code": "import { WebVitals } from './_components/web-vitals' export default function Layout ({ children }) { return ( < html > < body > < WebVitals /> {children} </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Since the useReportWebVitals hook requires the \"use client\" directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to the WebVitals component. View the API Reference for more information. Web Vitals are a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:"
                },
                {
                    "type": "list",
                    "items": [
                        "Time to First Byte (TTFB)",
                        "First Contentful Paint (FCP)",
                        "Largest Contentful Paint (LCP)",
                        "First Input Delay (FID)",
                        "Cumulative Layout Shift (CLS)",
                        "Interaction to Next Paint (INP)"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can handle all the results of these metrics using the name property."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useReportWebVitals } from 'next/web-vitals' export function WebVitals () { useReportWebVitals ((metric) => { switch ( metric .name) { case 'FCP' : { // handle FCP results } case 'LCP' : { // handle LCP results } // ... } }) }"
                },
                {
                    "type": "p",
                    "text": "You can send results to any endpoint to measure and track\nreal user performance on your site. For example:"
                },
                {
                    "type": "code",
                    "code": "useReportWebVitals ((metric) => { const body = JSON .stringify (metric) const url = 'https://example.com/analytics' // Use `navigator.sendBeacon()` if available, falling back to `fetch()`. if ( navigator .sendBeacon) { navigator .sendBeacon (url , body) } else { fetch (url , { body , method : 'POST' , keepalive : true }) } })"
                },
                {
                    "type": "p",
                    "text": "Good to know : If you use Google Analytics , using the id value can allow you to construct metric distributions manually (to calculate percentiles,\netc.)"
                },
                {
                    "type": "code",
                    "code": "useReportWebVitals ((metric) => { // Use `window.gtag` if you initialized Google Analytics as this example: // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics window .gtag ( 'event' , metric .name , { value : Math .round ( metric .name === 'CLS' ? metric .value * 1000 : metric .value ) , // values must be integers event_label : metric .id , // id unique to current page load non_interaction : true , // avoids affecting bounce rate. }) })"
                },
                {
                    "type": "p",
                    "text": "Read more about sending results to Google Analytics ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/fonts",
            "title": "Optimizing: Fonts | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "next/font will automatically optimize your fonts (including custom fonts) and remove external network requests for improved privacy and performance. 🎥 Watch: Learn more about using next/font → YouTube (6 minutes) . next/font includes built-in automatic self-hosting for any font file. This means you can optimally load web fonts with zero layout shift, thanks to the underlying CSS size-adjust property used. This new font system also allows you to conveniently use all Google Fonts with performance and privacy in mind. CSS and font files are downloaded at build time and self-hosted with the rest of your static assets. No requests are sent to Google by the browser. Automatically self-host any Google Font. Fonts are included in the deployment and served from the same domain as your deployment. No requests are sent to Google by the browser. Get started by importing the font you would like to use from next/font/google as a function. We recommend using variable fonts for the best performance and flexibility."
                },
                {
                    "type": "code",
                    "code": "import { Inter } from 'next/font/google' // If loading a variable font, you don't need to specify the font weight const inter = Inter ({ subsets : [ 'latin' ] , display : 'swap' , }) export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { inter .className}> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "If you can't use a variable font, you will need to specify a weight :"
                },
                {
                    "type": "code",
                    "code": "import { Roboto } from 'next/font/google' const roboto = Roboto ({ weight : '400' , subsets : [ 'latin' ] , display : 'swap' , }) export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { roboto .className}> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "You can specify multiple weights and/or styles by using an array:"
                },
                {
                    "type": "code",
                    "code": "const roboto = Roboto ({ weight : [ '400' , '700' ] , style : [ 'normal' , 'italic' ] , subsets : [ 'latin' ] , display : 'swap' , })"
                },
                {
                    "type": "p",
                    "text": "Good to know : Use an underscore (_) for font names with multiple words. E.g. Roboto Mono should be imported as Roboto_Mono . Google Fonts are automatically subset . This reduces the size of the font file and improves performance. You'll need to define which of these subsets you want to preload. Failing to specify any subsets while preload is true will result in a warning. This can be done by adding it to the function call:"
                },
                {
                    "type": "code",
                    "code": "const inter = Inter ({ subsets : [ 'latin' ] })"
                },
                {
                    "type": "p",
                    "text": "View the Font API Reference for more information. You can import and use multiple fonts in your application. There are two approaches you can take. The first approach is to create a utility function that exports a font, imports it, and applies its className where needed. This ensures the font is preloaded only when it's rendered:"
                },
                {
                    "type": "code",
                    "code": "import { Inter , Roboto_Mono } from 'next/font/google' export const inter = Inter ({ subsets : [ 'latin' ] , display : 'swap' , }) export const roboto_mono = Roboto_Mono ({ subsets : [ 'latin' ] , display : 'swap' , })"
                },
                {
                    "type": "code",
                    "code": "import { inter } from './fonts' export default function Layout ({ children } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { inter .className}> < body > < div >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "code",
                    "code": "import { roboto_mono } from './fonts' export default function Page () { return ( <> < h1 className = { roboto_mono .className}>My page</ h1 > </> ) }"
                },
                {
                    "type": "p",
                    "text": "In the example above, Inter will be applied globally, and Roboto Mono can be imported and applied as needed. Alternatively, you can create a CSS variable and use it with your preferred CSS solution:"
                },
                {
                    "type": "code",
                    "code": "import { Inter , Roboto_Mono } from 'next/font/google' import styles from './global.css' const inter = Inter ({ subsets : [ 'latin' ] , variable : '--font-inter' , display : 'swap' , }) const roboto_mono = Roboto_Mono ({ subsets : [ 'latin' ] , variable : '--font-roboto-mono' , display : 'swap' , }) export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { ` ${ inter .variable } ${ roboto_mono .variable } ` }> < body > < h1 >My App</ h1 > < div >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "code",
                    "code": "html { font-family : var (--font-inter) ; } h1 { font-family : var (--font-roboto-mono) ; }"
                },
                {
                    "type": "p",
                    "text": "In the example above, Inter will be applied globally, and any <h1> tags will be styled with Roboto Mono . Recommendation : Use multiple fonts conservatively since each new font is an additional resource the client has to download. Import next/font/local and specify the src of your local font file. We recommend using variable fonts for the best performance and flexibility."
                },
                {
                    "type": "code",
                    "code": "import localFont from 'next/font/local' // Font files can be colocated inside of `app` const myFont = localFont ({ src : './my-font.woff2' , display : 'swap' , }) export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { myFont .className}> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "If you want to use multiple files for a single font family, src can be an array:"
                },
                {
                    "type": "code",
                    "code": "const roboto = localFont ({ src : [ { path : './Roboto-Regular.woff2' , weight : '400' , style : 'normal' , } , { path : './Roboto-Italic.woff2' , weight : '400' , style : 'italic' , } , { path : './Roboto-Bold.woff2' , weight : '700' , style : 'normal' , } , { path : './Roboto-BoldItalic.woff2' , weight : '700' , style : 'italic' , } , ] , })"
                },
                {
                    "type": "p",
                    "text": "View the Font API Reference for more information. next/font can be used with Tailwind CSS through a CSS variable . In the example below, we use the font Inter from next/font/google (you can use any font from Google or Local Fonts). Load your font with the variable option to define your CSS variable name and assign it to inter . Then, use inter.variable to add the CSS variable to your HTML document."
                },
                {
                    "type": "code",
                    "code": "import { Inter , Roboto_Mono } from 'next/font/google' const inter = Inter ({ subsets : [ 'latin' ] , display : 'swap' , variable : '--font-inter' , }) const roboto_mono = Roboto_Mono ({ subsets : [ 'latin' ] , display : 'swap' , variable : '--font-roboto-mono' , }) export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { ` ${ inter .variable } ${ roboto_mono .variable } ` }> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Finally, add the CSS variable to your Tailwind CSS config :"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('tailwindcss').Config} */ module . exports = { content : [ './pages/**/*.{js,ts,jsx,tsx}' , './components/**/*.{js,ts,jsx,tsx}' , './app/**/*.{js,ts,jsx,tsx}' , ] , theme : { extend : { fontFamily : { sans : [ 'var(--font-inter)' ] , mono : [ 'var(--font-roboto-mono)' ] , } , } , } , plugins : [] , }"
                },
                {
                    "type": "p",
                    "text": "You can now use the font-sans and font-mono utility classes to apply the font to your elements. When a font function is called on a page of your site, it is not globally available and preloaded on all routes. Rather, the font is only preloaded on the related routes based on the type of file where it is used:"
                },
                {
                    "type": "list",
                    "items": [
                        "If it's a unique page , it is preloaded on the unique route for that page.",
                        "If it's a layout , it is preloaded on all the routes wrapped by the layout.",
                        "If it's the root layout , it is preloaded on all routes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Every time you call the localFont or Google font function, that font is hosted as one instance in your application. Therefore, if you load the same font function in multiple files, multiple instances of the same font are hosted. In this situation, it is recommended to do the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Call the font loader function in one shared file",
                        "Export it as a constant",
                        "Import the constant in each file where you would like to use this font"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/images",
            "title": "Optimizing: Images | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "According to Web Almanac , images account for a huge portion of the typical website’s page weight and can have a sizable impact on your website's LCP performance . The Next.js Image component extends the HTML <img> element with features for automatic image optimization:"
                },
                {
                    "type": "list",
                    "items": [
                        "Size Optimization: Automatically serve correctly sized images for each device, using modern image formats like WebP and AVIF.",
                        "Visual Stability: Prevent layout shift automatically when images are loading.",
                        "Faster Page Loads: Images are only loaded when they enter the viewport using native browser lazy loading, with optional blur-up placeholders.",
                        "Asset Flexibility: On-demand image resizing, even for images stored on remote servers"
                    ]
                },
                {
                    "type": "p",
                    "text": "🎥 Watch: Learn more about how to use next/image → YouTube (9 minutes) ."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image'"
                },
                {
                    "type": "p",
                    "text": "You can then define the src for your image (either local or remote). To use a local image, import your .jpg , .png , or .webp image files. Next.js will automatically determine the intrinsic width and height of your image based on the imported file. These values are used to determine the image ratio and prevent Cumulative Layout Shift while your image is loading."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' import profilePic from './me.png' export default function Page () { return ( < Image src = {profilePic} alt = \"Picture of the author\" // width={500} automatically provided // height={500} automatically provided // blurDataURL=\"data:...\" automatically provided // placeholder=\"blur\" // Optional blur-up while loading /> ) }"
                },
                {
                    "type": "p",
                    "text": "Warning: Dynamic await import() or require() are not supported. The import must be static so it can be analyzed at build time. You can optionally configure localPatterns in your next.config.js file in order to allow specific images and block all others."
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { localPatterns : [ { pathname : '/assets/images/**' , search : '' , } , ] , } , }"
                },
                {
                    "type": "p",
                    "text": "To use a remote image, the src property should be a URL string. Since Next.js does not have access to remote files during the build process, you'll need to provide the width , height and optional blurDataURL props manually. The width and height attributes are used to infer the correct aspect ratio of image and avoid layout shift from the image loading in. The width and height do not determine the rendered size of the image file. Learn more about Image Sizing ."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export default function Page () { return ( < Image src = \"https://s3.amazonaws.com/my-bucket/profile.png\" alt = \"Picture of the author\" width = { 500 } height = { 500 } /> ) }"
                },
                {
                    "type": "p",
                    "text": "To safely allow optimizing images, define a list of supported URL patterns in next.config.js . Be as specific as possible to prevent malicious usage. For example, the following configuration will only allow images from a specific AWS S3 bucket:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { remotePatterns : [ { protocol : 'https' , hostname : 's3.amazonaws.com' , port : '' , pathname : '/my-bucket/**' , search : '' , } , ] , } , }"
                },
                {
                    "type": "p",
                    "text": "Learn more about remotePatterns configuration. If you want to use relative URLs for the image src , use a loader . Sometimes you may want to optimize a remote image, but still use the built-in Next.js Image Optimization API. To do this, leave the loader at its default setting and enter an absolute URL for the Image src prop. To protect your application from malicious users, you must define a list of remote hostnames you intend to use with the next/image component. Note that in the example earlier , a partial URL ( \"/me.png\" ) is provided for a local image. This is possible because of the loader architecture. A loader is a function that generates the URLs for your image. It modifies the provided src , and generates multiple URLs to request the image at different sizes. These multiple URLs are used in the automatic srcset generation, so that visitors to your site will be served an image that is the right size for their viewport. The default loader for Next.js applications uses the built-in Image Optimization API, which optimizes images from anywhere on the web, and then serves them directly from the Next.js web server. If you would like to serve your images directly from a CDN or image server, you can write your own loader function with a few lines of JavaScript. You can define a loader per-image with the loader prop , or at the application level with the loaderFile configuration . You should add the priority property to the image that will be the Largest Contentful Paint (LCP) element for each page. Doing so allows Next.js to specially prioritize the image for loading (e.g. through preload tags or priority hints), leading to a meaningful boost in LCP. The LCP element is typically the largest image or text block visible within the viewport of the page. When you run next dev , you'll see a console warning if the LCP element is an <Image> without the priority property. Once you've identified the LCP image, you can add the property like this:"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' import profilePic from '../public/me.png' export default function Page () { return < Image src = {profilePic} alt = \"Picture of the author\" priority /> }"
                },
                {
                    "type": "p",
                    "text": "See more about priority in the next/image component documentation . One of the ways that images most commonly hurt performance is through layout shift , where the image pushes other elements around on the page as it loads in. This performance problem is so annoying to users that it has its own Core Web Vital, called Cumulative Layout Shift . The way to avoid image-based layout shifts is to always size your images . This allows the browser to reserve precisely enough space for the image before it loads. Because next/image is designed to guarantee good performance results, it cannot be used in a way that will contribute to layout shift, and must be sized in one of three ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Automatically, using a static import",
                        "Manually, by including a width and height property used to determine the image's aspect ratio.",
                        "Implicitly, by using fill which causes the image to expand to fill its parent element."
                    ]
                },
                {
                    "type": "p",
                    "text": "What if I don't know the size of my images? If you are accessing images from a source without knowledge of the images' sizes, there are several things you can do: The fill prop allows your image to be sized by its parent element. Consider using CSS to give the image's parent element space on the page along sizes prop to match any media query break points. You can also use object-fit with fill , contain , or cover , and object-position to define how the image should occupy that space. If you're serving images from a source that you control, consider modifying your image pipeline to normalize the images to a specific size. If your application is retrieving image URLs using an API call (such as to a CMS), you may be able to modify the API call to return the image dimensions along with the URL. If none of the suggested methods works for sizing your images, the next/image component is designed to work well on a page alongside standard <img> elements. Styling the Image component is similar to styling a normal <img> element, but there are a few guidelines to keep in mind:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use className or style , not styled-jsx . In most cases, we recommend using the className prop. This can be an imported CSS Module , a global stylesheet , etc. You can also use the style prop to assign inline styles. You cannot use styled-jsx because it's scoped to the current component (unless you mark the style as global ).",
                        "In most cases, we recommend using the className prop. This can be an imported CSS Module , a global stylesheet , etc.",
                        "You can also use the style prop to assign inline styles.",
                        "You cannot use styled-jsx because it's scoped to the current component (unless you mark the style as global ).",
                        "When using fill , the parent element must have position: relative This is necessary for the proper rendering of the image element in that layout mode.",
                        "This is necessary for the proper rendering of the image element in that layout mode.",
                        "When using fill , the parent element must have display: block This is the default for <div> elements but should be specified otherwise.",
                        "This is the default for <div> elements but should be specified otherwise."
                    ]
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' import mountains from '../public/mountains.jpg' export default function Responsive () { return ( < div style = {{ display : 'flex' , flexDirection : 'column' }}> < Image alt = \"Mountains\" // Importing an image will // automatically set the width and height src = {mountains} sizes = \"100vw\" // Make the image display full width style = {{ width : '100%' , height : 'auto' , }} /> </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' import mountains from '../public/mountains.jpg' export default function Fill () { return ( < div style = {{ display : 'grid' , gridGap : '8px' , gridTemplateColumns : 'repeat(auto-fit, minmax(400px, auto))' , }} > < div style = {{ position : 'relative' , height : '400px' }}> < Image alt = \"Mountains\" src = {mountains} fill sizes = \"(min-width: 808px) 50vw, 100vw\" style = {{ objectFit : 'cover' , // cover, contain, none }} /> </ div > { /* And more images in the grid... */ } </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' import mountains from '../public/mountains.jpg' export default function Background () { return ( < Image alt = \"Mountains\" src = {mountains} placeholder = \"blur\" quality = { 100 } fill sizes = \"100vw\" style = {{ objectFit : 'cover' , }} /> ) }"
                },
                {
                    "type": "p",
                    "text": "For examples of the Image component used with the various styles, see the Image Component Demo . View all properties available to the next/image component. The next/image component and Next.js Image Optimization API can be configured in the next.config.js file . These configurations allow you to enable remote images , define custom image breakpoints , change caching behavior and more. Read the full image configuration documentation for more information."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation",
            "title": "Optimizing: Instrumentation | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Instrumentation is the process of using code to integrate monitoring and logging tools into your application. This allows you to track the performance and behavior of your application, and to debug issues in production. To set up instrumentation, create instrumentation.ts|js file in the root directory of your project (or inside the src folder if using one). Then, export a register function in the file. This function will be called once when a new Next.js server instance is initiated. For example, to use Next.js with OpenTelemetry and @vercel/otel :"
                },
                {
                    "type": "code",
                    "code": "import { registerOTel } from '@vercel/otel' export function register () { registerOTel ( 'next-app' ) }"
                },
                {
                    "type": "p",
                    "text": "See the Next.js with OpenTelemetry example for a complete implementation."
                },
                {
                    "type": "list",
                    "items": [
                        "The instrumentation file should be in the root of your project and not inside the app or pages directory. If you're using the src folder, then place the file inside src alongside pages and app .",
                        "If you use the pageExtensions config option to add a suffix, you will also need to update the instrumentation filename to match."
                    ]
                },
                {
                    "type": "p",
                    "text": "Sometimes, it may be useful to import a file in your code because of the side effects it will cause. For example, you might import a file that defines a set of global variables, but never explicitly use the imported file in your code. You would still have access to the global variables the package has declared. We recommend importing files using JavaScript import syntax within your register function. The following example demonstrates a basic usage of import in a register function:"
                },
                {
                    "type": "code",
                    "code": "export async function register () { await import ( 'package-with-side-effect' ) }"
                },
                {
                    "type": "p",
                    "text": "We recommend importing the file from within the register function, rather than at the top of the file. By doing this, you can colocate all of your side effects in one place in your code, and avoid any unintended consequences from importing globally at the top of the file. Next.js calls register in all environments, so it's important to conditionally import any code that doesn't support specific runtimes (e.g. Edge or Node.js ). You can use the NEXT_RUNTIME environment variable to get the current environment:"
                },
                {
                    "type": "code",
                    "code": "export async function register () { if ( process . env . NEXT_RUNTIME === 'nodejs' ) { await import ( './instrumentation-node' ) } if ( process . env . NEXT_RUNTIME === 'edge' ) { await import ( './instrumentation-edge' ) } }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading",
            "title": "Optimizing: Lazy Loading | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Lazy loading in Next.js helps improve the initial loading performance of an application by decreasing the amount of JavaScript needed to render a route. It allows you to defer loading of Client Components and imported libraries, and only include them in the client bundle when they're needed. For example, you might want to defer loading a modal until a user clicks to open it. There are two ways you can implement lazy loading in Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using Dynamic Imports with next/dynamic",
                        "Using React.lazy() with Suspense"
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, Server Components are automatically code split , and you can use streaming to progressively send pieces of UI from the server to the client. Lazy loading applies to Client Components. next/dynamic is a composite of React.lazy() and Suspense . It behaves the same way in the app and pages directories to allow for incremental migration."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState } from 'react' import dynamic from 'next/dynamic' // Client Components: const ComponentA = dynamic (() => import ( '../components/A' )) const ComponentB = dynamic (() => import ( '../components/B' )) const ComponentC = dynamic (() => import ( '../components/C' ) , { ssr : false }) export default function ClientComponentExample () { const [ showMore , setShowMore ] = useState ( false ) return ( < div > { /* Load immediately, but in a separate client bundle */ } < ComponentA /> { /* Load on demand, only when/if the condition is met */ } {showMore && < ComponentB />} < button onClick = {() => setShowMore ( ! showMore)}>Toggle</ button > { /* Load only on the client side */ } < ComponentC /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "When using React.lazy() and Suspense, Client Components will be pre-rendered (SSR) by default. Note: ssr: false option will only work for client components, move it into client components ensure the client code-splitting working properly. If you want to disable pre-rendering for a Client Component, you can use the ssr option set to false :"
                },
                {
                    "type": "code",
                    "code": "const ComponentC = dynamic (() => import ( '../components/C' ) , { ssr : false })"
                },
                {
                    "type": "p",
                    "text": "If you dynamically import a Server Component, only the Client Components that are children of the Server Component will be lazy-loaded - not the Server Component itself.\nIt will also help preload the static assets such as CSS when you're using it in Server Components."
                },
                {
                    "type": "code",
                    "code": "import dynamic from 'next/dynamic' // Server Component: const ServerComponent = dynamic (() => import ( '../components/ServerComponent' )) export default function ServerComponentExample () { return ( < div > < ServerComponent /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Note: ssr: false option is not supported in Server Components. You will see an error if you try to use it in Server Components. ssr: false is not allowed with next/dynamic in Server Components. Please move it into a client component. External libraries can be loaded on demand using the import() function. This example uses the external library fuse.js for fuzzy search. The module is only loaded on the client after the user types in the search input."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState } from 'react' const names = [ 'Tim' , 'Joe' , 'Bel' , 'Lee' ] export default function Page () { const [ results , setResults ] = useState () return ( < div > < input type = \"text\" placeholder = \"Search\" onChange = { async (e) => { const { value } = e .currentTarget // Dynamically load fuse.js const Fuse = ( await import ( 'fuse.js' )).default const fuse = new Fuse (names) setResults ( fuse .search (value)) }} /> < pre >Results: { JSON .stringify (results , null , 2 )}</ pre > </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "import dynamic from 'next/dynamic' const WithCustomLoading = dynamic ( () => import ( '../components/WithCustomLoading' ) , { loading : () => < p >Loading...</ p > , } ) export default function Page () { return ( < div > { /* The loading component will be rendered while  <WithCustomLoading/> is loading */ } < WithCustomLoading /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "To dynamically import a named export, you can return it from the Promise returned by import() function:"
                },
                {
                    "type": "code",
                    "code": "'use client' export function Hello () { return < p >Hello!</ p > }"
                },
                {
                    "type": "code",
                    "code": "import dynamic from 'next/dynamic' const ClientComponent = dynamic (() => import ( '../components/hello' ) .then ((mod) => mod .Hello) )"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/memory-usage",
            "title": "Optimizing: Memory Usage | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "As applications grow and become more feature rich, they can demand more resources when developing locally or creating production builds. Let's explore some strategies and techniques to optimize memory and address common memory issues in Next.js. Applications with a large amount of dependencies will use more memory. The Bundle Analyzer can help you investigate large dependencies in your application that may be able to be removed to improve performance and memory usage. Starting in v15.0.0 , you can add experimental.webpackMemoryOptimizations: true to your next.config.js file to change behavior in Webpack that reduces max memory usage but may increase compilation times by a slight amount. Good to know : This feature is currently experimental to test on more projects first, but it is considered to be low-risk. Starting in 14.2.0 , you can run next build --experimental-debug-memory-usage to run the build in a mode where Next.js will print out information about memory usage continuously throughout the build, such as heap usage and garbage collection statistics. Heap snapshots will also be taken automatically when memory usage gets close to the configured limit. Good to know : This feature is not compatible with the Webpack build worker option which is auto-enabled unless you have custom webpack config. To look for memory issues, you can record a heap profile from Node.js and load it in Chrome DevTools to identify potential sources of memory leaks. In your terminal, pass the --heap-prof flag to Node.js when starting your Next.js build:"
                },
                {
                    "type": "code",
                    "code": "node --heap-prof node_modules/next/dist/bin/next build"
                },
                {
                    "type": "p",
                    "text": "At the end of the build, a .heapprofile file will be created by Node.js. In Chrome DevTools, you can open the Memory tab and click on the \"Load Profile\" button to visualize the file. You can use an inspector tool to analyze the memory usage of the application. When running the next build or next dev command, add NODE_OPTIONS=--inspect to the beginning of the command. This will expose the inspector agent on the default port.\nIf you wish to break before any user code starts, you can pass --inspect-brk instead. While the process is running, you can use a tool such as Chrome DevTools to connect to the debugging port to record and analyze a snapshot of the heap to see what memory is being retained. Starting in 14.2.0 , you can also run next build with the --experimental-debug-memory-usage flag to make it easier to take heap snapshots. While running in this mode, you can send a SIGUSR2 signal to the process at any point, and the process will take a heap snapshot. The heap snapshot will be saved to the project root of the Next.js application and can be loaded in any heap analyzer, such as Chrome DevTools, to see what memory is retained. This mode is not yet compatible with Webpack build workers. See how to record and analyze heap snapshots for more information. The Webpack build worker allows you to run Webpack compilations inside a separate Node.js worker which will decrease memory usage of your application during builds. This option is enabled by default if your application does not have a custom Webpack configuration starting in v14.1.0 . If you are using an older version of Next.js or you have a custom Webpack configuration, you can enable this option by setting experimental.webpackBuildWorker: true inside your next.config.js . Good to know : This feature may not be compatible with all custom Webpack plugins. The Webpack cache saves generated Webpack modules in memory and/or to disk to improve the speed of builds. This can\nhelp with performance, but it will also increase the memory usage of your application to store the cached data. You can disable this behavior by adding a custom Webpack configuration to your application:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { webpack : ( config , { buildId , dev , isServer , defaultLoaders , nextRuntime , webpack } ) => { if ( config .cache && ! dev) { config .cache = Object .freeze ({ type : 'memory' , }) } // Important: return the modified config return config } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Typechecking and linting may require a lot of memory, especially in large projects.\nHowever, most projects have a dedicated CI runner that already handles these tasks.\nWhen the build produces out-of-memory issues during the \"Linting and checking validity of types\" step, you can disable these task during builds:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { eslint : { // Warning: This allows production builds to successfully complete even if // your project has ESLint errors. ignoreDuringBuilds : true , } , typescript : { // !! WARN !! // Dangerously allow production builds to successfully complete even if // your project has type errors. // !! WARN !! ignoreBuildErrors : true , } , } export default nextConfig"
                },
                {
                    "type": "list",
                    "items": [
                        "Ignoring TypeScript Errors",
                        "ESLint in Next.js config"
                    ]
                },
                {
                    "type": "p",
                    "text": "Keep in mind that this may produce faulty deploys due to type errors or linting issues.\nWe strongly recommend only promoting builds to production after static analysis has completed.\nIf you deploy to Vercel, you can check out the guide for staging deployments to learn how to promote builds to production after custom tasks have succeeded. Generating source maps consumes extra memory during the build process. You can disable source map generation by adding productionBrowserSourceMaps: false and experimental.serverSourceMaps: false to your Next.js configuration. Good to know : Some plugins may turn on source maps and may require custom configuration to disable. Next.js v14.1.3 fixed a memory issue when using the Edge runtime. Please update to this version (or later) to see if it addresses your issue."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/metadata",
            "title": "Optimizing: Metadata | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js has a Metadata API that can be used to define your application metadata (e.g. meta and link tags inside your HTML head element) for improved SEO and web shareability. There are two ways you can add metadata to your application:"
                },
                {
                    "type": "list",
                    "items": [
                        "Config-based Metadata : Export a static metadata object or a dynamic generateMetadata function in a layout.js or page.js file.",
                        "File-based Metadata : Add static or dynamically generated special files to route segments."
                    ]
                },
                {
                    "type": "p",
                    "text": "With both these options, Next.js will automatically generate the relevant <head> elements for your pages. You can also create dynamic OG images using the ImageResponse constructor. To define static metadata, export a Metadata object from a layout.js or static page.js file."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : '...' , description : '...' , } export default function Page () {}"
                },
                {
                    "type": "p",
                    "text": "For all the available options, see the API Reference . You can use generateMetadata function to fetch metadata that requires dynamic values."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata , ResolvingMetadata } from 'next' type Props = { params : Promise <{ id : string }> searchParams : Promise <{ [key : string ] : string | string [] | undefined }> } export async function generateMetadata ( { params , searchParams } : Props , parent : ResolvingMetadata ) : Promise < Metadata > { // read route params const id = ( await params).id // fetch data const product = await fetch ( `https://.../ ${ id } ` ) .then ((res) => res .json ()) // optionally access and extend (rather than replace) parent metadata const previousImages = ( await parent). openGraph ?.images || [] return { title : product .title , openGraph : { images : [ '/some-specific-page-image.jpg' , ... previousImages] , } , } } export default function Page ({ params , searchParams } : Props ) {}"
                },
                {
                    "type": "p",
                    "text": "For all the available params, see the API Reference ."
                },
                {
                    "type": "list",
                    "items": [
                        "Both static and dynamic metadata through generateMetadata are only supported in Server Components .",
                        "fetch requests are automatically memoized for the same data across generateMetadata , generateStaticParams , Layouts, Pages, and Server Components. React cache can be used if fetch is unavailable.",
                        "Next.js will wait for data fetching inside generateMetadata to complete before streaming UI to the client. This guarantees the first part of a streamed response includes <head> tags."
                    ]
                },
                {
                    "type": "p",
                    "text": "These special files are available for metadata:"
                },
                {
                    "type": "list",
                    "items": [
                        "favicon.ico, apple-icon.jpg, and icon.jpg",
                        "opengraph-image.jpg and twitter-image.jpg",
                        "robots.txt",
                        "sitemap.xml"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can use these for static metadata, or you can programmatically generate these files with code. For implementation and examples, see the Metadata Files API Reference and Dynamic Image Generation . File-based metadata has the higher priority and will override any config-based metadata. There are two default meta tags that are always added even if a route doesn't define metadata:"
                },
                {
                    "type": "list",
                    "items": [
                        "The meta charset tag sets the character encoding for the website.",
                        "The meta viewport tag sets the viewport width and scale for the website to adjust for different devices."
                    ]
                },
                {
                    "type": "code",
                    "code": "< meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" />"
                },
                {
                    "type": "p",
                    "text": "Good to know : You can overwrite the default viewport meta tag. Metadata is evaluated in order, starting from the root segment down to the segment closest to the final page.js segment. For example:"
                },
                {
                    "type": "list",
                    "items": [
                        "app/layout.tsx (Root Layout)",
                        "app/blog/layout.tsx (Nested Blog Layout)",
                        "app/blog/[slug]/page.tsx (Blog Page)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Following the evaluation order , Metadata objects exported from multiple segments in the same route are shallowly merged together to form the final metadata output of a route. Duplicate keys are replaced based on their ordering. This means metadata with nested fields such as openGraph and robots that are defined in an earlier segment are overwritten by the last segment to define them."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { title : 'Acme' , openGraph : { title : 'Acme' , description : 'Acme is a...' , } , }"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { title : 'Blog' , openGraph : { title : 'Blog' , } , } // Output: // <title>Blog</title> // <meta property=\"og:title\" content=\"Blog\" />"
                },
                {
                    "type": "list",
                    "items": [
                        "title from app/layout.js is replaced by title in app/blog/page.js .",
                        "All openGraph fields from app/layout.js are replaced in app/blog/page.js because app/blog/page.js sets openGraph metadata. Note the absence of openGraph.description ."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you'd like to share some nested fields between segments while overwriting others, you can pull them out into a separate variable:"
                },
                {
                    "type": "code",
                    "code": "export const openGraphImage = { images : [ 'http://...' ] }"
                },
                {
                    "type": "code",
                    "code": "import { openGraphImage } from './shared-metadata' export const metadata = { openGraph : { ... openGraphImage , title : 'Home' , } , }"
                },
                {
                    "type": "code",
                    "code": "import { openGraphImage } from '../shared-metadata' export const metadata = { openGraph : { ... openGraphImage , title : 'About' , } , }"
                },
                {
                    "type": "p",
                    "text": "In the example above, the OG image is shared between app/layout.js and app/about/page.js while the titles are different."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { title : 'Acme' , openGraph : { title : 'Acme' , description : 'Acme is a...' , } , }"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { title : 'About' , } // Output: // <title>About</title> // <meta property=\"og:title\" content=\"Acme\" /> // <meta property=\"og:description\" content=\"Acme is a...\" />"
                },
                {
                    "type": "list",
                    "items": [
                        "title from app/layout.js is replaced by title in app/about/page.js .",
                        "All openGraph fields from app/layout.js are inherited in app/about/page.js because app/about/page.js doesn't set openGraph metadata."
                    ]
                },
                {
                    "type": "p",
                    "text": "The ImageResponse constructor allows you to generate dynamic images using JSX and CSS. This is useful for creating social media images such as Open Graph images, Twitter cards, and more. To use it, you can import ImageResponse from next/og :"
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og' export async function GET () { return new ImageResponse ( ( < div style = {{ fontSize : 128 , background : 'white' , width : '100%' , height : '100%' , display : 'flex' , textAlign : 'center' , alignItems : 'center' , justifyContent : 'center' , }} > Hello world! </ div > ) , { width : 1200 , height : 600 , } ) }"
                },
                {
                    "type": "p",
                    "text": "ImageResponse integrates well with other Next.js APIs, including Route Handlers and file-based Metadata. For example, you can use ImageResponse in a opengraph-image.tsx file to generate Open Graph images at build time or dynamically at request time. ImageResponse supports common CSS properties including flexbox and absolute positioning, custom fonts, text wrapping, centering, and nested images. See the full list of supported CSS properties ."
                },
                {
                    "type": "list",
                    "items": [
                        "Examples are available in the Vercel OG Playground .",
                        "ImageResponse uses @vercel/og , Satori , and Resvg to convert HTML and CSS into PNG.",
                        "Only the Edge Runtime is supported. The default Node.js runtime will not work.",
                        "Only flexbox and a subset of CSS properties are supported. Advanced layouts (e.g. display: grid ) will not work.",
                        "Maximum bundle size of 500KB . The bundle size includes your JSX, CSS, fonts, images, and any other assets. If you exceed the limit, consider reducing the size of any assets or fetching at runtime.",
                        "Only ttf , otf , and woff font formats are supported. To maximize the font parsing speed, ttf or otf are preferred over woff ."
                    ]
                },
                {
                    "type": "p",
                    "text": "JSON-LD is a format for structured data that can be used by search engines to understand your content. For example, you can use it to describe a person, an event, an organization, a movie, a book, a recipe, and many other types of entities. Our current recommendation for JSON-LD is to render structured data as a <script> tag in your layout.js or page.js components. For example:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ params }) { const product = await getProduct ( params .id) const jsonLd = { '@context' : 'https://schema.org' , '@type' : 'Product' , name : product .name , image : product .image , description : product .description , } return ( < section > { /* Add JSON-LD to your page */ } < script type = \"application/ld+json\" dangerouslySetInnerHTML = {{ __html : JSON .stringify (jsonLd) }} /> { /* ... */ } </ section > ) }"
                },
                {
                    "type": "p",
                    "text": "You can validate and test your structured data with the Rich Results Test for Google or the generic Schema Markup Validator . You can type your JSON-LD with TypeScript using community packages like schema-dts :"
                },
                {
                    "type": "code",
                    "code": "import { Product , WithContext } from 'schema-dts' const jsonLd : WithContext < Product > = { '@context' : 'https://schema.org' , '@type' : 'Product' , name : 'Next.js Sticker' , image : 'https://nextjs.org/imgs/sticker.png' , description : 'Dynamic at the speed of static.' , }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/open-telemetry",
            "title": "Optimizing: OpenTelemetry | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Observability is crucial for understanding and optimizing the behavior and performance of your Next.js app. As applications become more complex, it becomes increasingly difficult to identify and diagnose issues that may arise. By leveraging observability tools, such as logging and metrics, developers can gain insights into their application's behavior and identify areas for optimization. With observability, developers can proactively address issues before they become major problems and provide a better user experience. Therefore, it is highly recommended to use observability in your Next.js applications to improve performance, optimize resources, and enhance user experience. We recommend using OpenTelemetry for instrumenting your apps.\nIt's a platform-agnostic way to instrument apps that allows you to change your observability provider without changing your code.\nRead Official OpenTelemetry docs for more information about OpenTelemetry and how it works. This documentation uses terms like Span , Trace or Exporter throughout this doc, all of which can be found in the OpenTelemetry Observability Primer . Next.js supports OpenTelemetry instrumentation out of the box, which means that we already instrumented Next.js itself.\nWhen you enable OpenTelemetry we will automatically wrap all your code like getStaticProps in spans with helpful attributes. OpenTelemetry is extensible but setting it up properly can be quite verbose.\nThat's why we prepared a package @vercel/otel that helps you get started quickly. To get started, install the following packages:"
                },
                {
                    "type": "code",
                    "code": "npm install @vercel/otel @opentelemetry/sdk-logs @opentelemetry/api-logs @opentelemetry/instrumentation"
                },
                {
                    "type": "p",
                    "text": "Next, create a custom instrumentation.ts (or .js ) file in the root directory of the project (or inside src folder if using one):"
                },
                {
                    "type": "code",
                    "code": "import { registerOTel } from '@vercel/otel' export function register () { registerOTel ({ serviceName : 'next-app' }) }"
                },
                {
                    "type": "p",
                    "text": "See the @vercel/otel documentation for additional configuration options."
                },
                {
                    "type": "list",
                    "items": [
                        "The instrumentation file should be in the root of your project and not inside the app or pages directory. If you're using the src folder, then place the file inside src alongside pages and app .",
                        "If you use the pageExtensions config option to add a suffix, you will also need to update the instrumentation filename to match.",
                        "We have created a basic with-opentelemetry example that you can use."
                    ]
                },
                {
                    "type": "p",
                    "text": "The @vercel/otel package provides many configuration options and should serve most of common use cases. But if it doesn't suit your needs, you can configure OpenTelemetry manually. Firstly you need to install OpenTelemetry packages:"
                },
                {
                    "type": "code",
                    "code": "npm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http"
                },
                {
                    "type": "p",
                    "text": "Now you can initialize NodeSDK in your instrumentation.ts .\nUnlike @vercel/otel , NodeSDK is not compatible with edge runtime, so you need to make sure that you are importing them only when process.env.NEXT_RUNTIME === 'nodejs' . We recommend creating a new file instrumentation.node.ts which you conditionally import only when using node:"
                },
                {
                    "type": "code",
                    "code": "export async function register () { if ( process . env . NEXT_RUNTIME === 'nodejs' ) { await import ( './instrumentation.node.ts' ) } }"
                },
                {
                    "type": "code",
                    "code": "import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http' import { Resource } from '@opentelemetry/resources' import { NodeSDK } from '@opentelemetry/sdk-node' import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node' import { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions' const sdk = new NodeSDK ({ resource : new Resource ({ [ ATTR_SERVICE_NAME ] : 'next-app' , }) , spanProcessor : new SimpleSpanProcessor ( new OTLPTraceExporter ()) , }) sdk .start ()"
                },
                {
                    "type": "p",
                    "text": "Doing this is equivalent to using @vercel/otel , but it's possible to modify and extend some features that are not exposed by the @vercel/otel . If edge runtime support is necessary, you will have to use @vercel/otel . You need an OpenTelemetry collector with a compatible backend to test OpenTelemetry traces locally.\nWe recommend using our OpenTelemetry dev environment . If everything works well you should be able to see the root server span labeled as GET /requested/pathname .\nAll other spans from that particular trace will be nested under it. Next.js traces more spans than are emitted by default.\nTo see more spans, you must set NEXT_OTEL_VERBOSE=1 . When you are deploying with OpenTelemetry Collector, you can use @vercel/otel .\nIt will work both on Vercel and when self-hosted. We made sure that OpenTelemetry works out of the box on Vercel. Follow Vercel documentation to connect your project to an observability provider. Deploying to other platforms is also straightforward. You will need to spin up your own OpenTelemetry Collector to receive and process the telemetry data from your Next.js app. To do this, follow the OpenTelemetry Collector Getting Started guide , which will walk you through setting up the collector and configuring it to receive data from your Next.js app. Once you have your collector up and running, you can deploy your Next.js app to your chosen platform following their respective deployment guides. OpenTelemetry Collector is not necessary. You can use a custom OpenTelemetry exporter with @vercel/otel or manual OpenTelemetry configuration . You can add a custom span with OpenTelemetry APIs ."
                },
                {
                    "type": "code",
                    "code": "npm install @opentelemetry/api"
                },
                {
                    "type": "p",
                    "text": "The following example demonstrates a function that fetches GitHub stars and adds a custom fetchGithubStars span to track the fetch request's result:"
                },
                {
                    "type": "code",
                    "code": "import { trace } from '@opentelemetry/api' export async function fetchGithubStars () { return await trace .getTracer ( 'nextjs-example' ) .startActiveSpan ( 'fetchGithubStars' , async (span) => { try { return await getValue () } finally { span .end () } }) }"
                },
                {
                    "type": "p",
                    "text": "The register function will execute before your code runs in a new environment.\nYou can start creating new spans, and they should be correctly added to the exported trace. Next.js automatically instruments several spans for you to provide useful insights into your application's performance. Attributes on spans follow OpenTelemetry semantic conventions . We also add some custom attributes under the next namespace:"
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name - duplicates span name",
                        "next.span_type - each span type has a unique identifier",
                        "next.route - The route pattern of the request (e.g., /[param]/user ).",
                        "next.rsc (true/false) - Whether the request is an RSC request, such as prefetch.",
                        "next.page This is an internal value used by an app router. You can think about it as a route to a special file (like page.ts , layout.ts , loading.ts and others) It can be used as a unique identifier only when paired with next.route because /layout can be used to identify both /(groupA)/layout.ts and /(groupB)/layout.ts",
                        "This is an internal value used by an app router.",
                        "You can think about it as a route to a special file (like page.ts , layout.ts , loading.ts and others)",
                        "It can be used as a unique identifier only when paired with next.route because /layout can be used to identify both /(groupA)/layout.ts and /(groupB)/layout.ts"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the root span for each incoming request to your Next.js application. It tracks the HTTP method, route, target, and status code of the request."
                },
                {
                    "type": "list",
                    "items": [
                        "Common HTTP attributes http.method http.status_code",
                        "http.method",
                        "http.status_code",
                        "Server HTTP attributes http.route http.target",
                        "http.route",
                        "http.target",
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the process of rendering a route in the app router."
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the fetch request executed in your code."
                },
                {
                    "type": "list",
                    "items": [
                        "Common HTTP attributes http.method",
                        "http.method",
                        "Client HTTP attributes http.url net.peer.name net.peer.port (only if specified)",
                        "http.url",
                        "net.peer.name",
                        "net.peer.port (only if specified)",
                        "next.span_name",
                        "next.span_type"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span can be turned off by setting NEXT_OTEL_FETCH_DISABLED=1 in your environment. This is useful when you want to use a custom fetch instrumentation library. This span represents the execution of an API Route Handler in the app router."
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the execution of getServerSideProps for a specific route."
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the execution of getStaticProps for a specific route."
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the process of rendering the document for a specific route."
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the process of generating metadata for a specific page (a single route can have multiple of these spans)."
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.page"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents the process of resolving page components for a specific page."
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.route"
                    ]
                },
                {
                    "type": "p",
                    "text": "This span represents loading of code modules for a layout or a page."
                },
                {
                    "type": "list",
                    "items": [
                        "next.span_name",
                        "next.span_type",
                        "next.segment"
                    ]
                },
                {
                    "type": "p",
                    "text": "This zero-length span represents the time when the first byte has been sent in the response."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/package-bundling",
            "title": "Optimizing: Package Bundling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Bundling external packages can significantly improve the performance of your application. By default, packages imported inside Server Components and Route Handlers are automatically bundled by Next.js. This page will guide you through how to analyze and further optimize package bundling. @next/bundle-analyzer is a plugin for Next.js that helps you manage the size of your application bundles. It generates a visual report of the size of each package and their dependencies. You can use the information to remove large dependencies, split, or lazy-load your code. Install the plugin by running the following command:"
                },
                {
                    "type": "code",
                    "code": "npm i @next/bundle-analyzer # or yarn add @next/bundle-analyzer # or pnpm add @next/bundle-analyzer"
                },
                {
                    "type": "p",
                    "text": "Then, add the bundle analyzer's settings to your next.config.js ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = {} const withBundleAnalyzer = require ( '@next/bundle-analyzer' )({ enabled : process . env . ANALYZE === 'true' , }) module . exports = withBundleAnalyzer (nextConfig)"
                },
                {
                    "type": "p",
                    "text": "Run the following command to analyze your bundles:"
                },
                {
                    "type": "code",
                    "code": "ANALYZE = true npm run build # or ANALYZE = true yarn build # or ANALYZE = true pnpm build"
                },
                {
                    "type": "p",
                    "text": "The report will open three new tabs in your browser, which you can inspect. Periodically evaluating your application's bundles can help you maintain application performance over time. Some packages, such as icon libraries, can export hundreds of modules, which can cause performance issues in development and production. You can optimize how these packages are imported by adding the optimizePackageImports option to your next.config.js . This option will only load the modules you actually use, while still giving you the convenience of writing import statements with many named exports."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { experimental : { optimizePackageImports : [ 'icon-library' ] , } , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js also optimizes some libraries automatically, thus they do not need to be included in the optimizePackageImports list. See the full list . Since packages imported inside Server Components and Route Handlers are automatically bundled by Next.js, you can opt specific packages out of bundling using the serverExternalPackages option in your next.config.js ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { serverExternalPackages : [ 'package-name' ] , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js includes a list of popular packages that currently are working on compatibility and automatically opt-ed out. See the full list ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/scripts",
            "title": "Optimizing: Scripts | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "To load a third-party script for multiple routes, import next/script and include the script directly in your layout component:"
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function DashboardLayout ({ children , } : { children : React . ReactNode }) { return ( <> < section >{children}</ section > < Script src = \"https://example.com/script.js\" /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "The third-party script is fetched when the folder route (e.g. dashboard/page.js ) or any nested route (e.g. dashboard/settings/page.js ) is accessed by the user. Next.js will ensure the script will only load once , even if a user navigates between multiple routes in the same layout. To load a third-party script for all routes, import next/script and include the script directly in your root layout:"
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body >{children}</ body > < Script src = \"https://example.com/script.js\" /> </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "This script will load and execute when any route in your application is accessed. Next.js will ensure the script will only load once , even if a user navigates between multiple pages. Recommendation : We recommend only including third-party scripts in specific pages or layouts in order to minimize any unnecessary impact to performance. Although the default behavior of next/script allows you to load third-party scripts in any page or layout, you can fine-tune its loading behavior by using the strategy property:"
                },
                {
                    "type": "list",
                    "items": [
                        "beforeInteractive : Load the script before any Next.js code and before any page hydration occurs.",
                        "afterInteractive : ( default ) Load the script early but after some hydration on the page occurs.",
                        "lazyOnload : Load the script later during browser idle time.",
                        "worker : (experimental) Load the script in a web worker."
                    ]
                },
                {
                    "type": "p",
                    "text": "Refer to the next/script API reference documentation to learn more about each strategy and their use cases. Warning: The worker strategy is not yet stable and does not yet work with the App Router. Use with caution. Scripts that use the worker strategy are offloaded and executed in a web worker with Partytown . This can improve the performance of your site by dedicating the main thread to the rest of your application code. This strategy is still experimental and can only be used if the nextScriptWorkers flag is enabled in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { nextScriptWorkers : true , } , }"
                },
                {
                    "type": "p",
                    "text": "Then, run next (normally npm run dev or yarn dev ) and Next.js will guide you through the installation of the required packages to finish the setup:"
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "p",
                    "text": "You'll see instructions like these: Please install Partytown by running npm install @builder.io/partytown Once setup is complete, defining strategy=\"worker\" will automatically instantiate Partytown in your application and offload the script to a web worker."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function Home () { return ( <> < Script src = \"https://example.com/script.js\" strategy = \"worker\" /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "There are a number of trade-offs that need to be considered when loading a third-party script in a web worker. Please see Partytown's tradeoffs documentation for more information. Inline scripts, or scripts not loaded from an external file, are also supported by the Script component. They can be written by placing the JavaScript within curly braces:"
                },
                {
                    "type": "code",
                    "code": "< Script id = \"show-banner\" > { `document.getElementById('banner').classList.remove('hidden')` } </ Script >"
                },
                {
                    "type": "p",
                    "text": "Or by using the dangerouslySetInnerHTML property:"
                },
                {
                    "type": "code",
                    "code": "< Script id = \"show-banner\" dangerouslySetInnerHTML = {{ __html : `document.getElementById('banner').classList.remove('hidden')` , }} />"
                },
                {
                    "type": "p",
                    "text": "Warning : An id property must be assigned for inline scripts in order for Next.js to track and optimize the script. Event handlers can be used with the Script component to execute additional code after a certain event occurs:"
                },
                {
                    "type": "list",
                    "items": [
                        "onLoad : Execute code after the script has finished loading.",
                        "onReady : Execute code after the script has finished loading and every time the component is mounted.",
                        "onError : Execute code if the script fails to load."
                    ]
                },
                {
                    "type": "p",
                    "text": "These handlers will only work when next/script is imported and used inside of a Client Component where \"use client\" is defined as the first line of code:"
                },
                {
                    "type": "code",
                    "code": "'use client' import Script from 'next/script' export default function Page () { return ( <> < Script src = \"https://example.com/script.js\" onLoad = {() => { console .log ( 'Script has loaded' ) }} /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "Refer to the next/script API reference to learn more about each event handler and view examples. There are many DOM attributes that can be assigned to a <script> element that are not used by the Script component, like nonce or custom data attributes . Including any additional attributes will automatically forward it to the final, optimized <script> element that is included in the HTML."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function Page () { return ( <> < Script src = \"https://example.com/script.js\" id = \"example-script\" nonce = \"XUENAJFW\" data-test = \"script\" /> </> ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/static-assets",
            "title": "Optimizing: Static Assets | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js can serve static files, like images, under a folder called public in the root directory. Files inside public can then be referenced by your code starting from the base URL ( / ). For example, the file public/avatars/me.png can be viewed by visiting the /avatars/me.png path. The code to display that image might look like:"
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export function Avatar ({ id , alt }) { return < Image src = { `/avatars/ ${ id } .png` } alt = {alt} width = \"64\" height = \"64\" /> } export function AvatarOfMe () { return < Avatar id = \"me\" alt = \"A portrait of me\" /> }"
                },
                {
                    "type": "p",
                    "text": "Next.js cannot safely cache assets in the public folder because they may change. The default caching headers applied are:"
                },
                {
                    "type": "code",
                    "code": "Cache - Control : public , max - age = 0"
                },
                {
                    "type": "p",
                    "text": "For static metadata files, such as robots.txt , favicon.ico , etc, you should use special metadata files inside the app folder."
                },
                {
                    "type": "list",
                    "items": [
                        "The directory must be named public . The name cannot be changed and it's the only directory used to serve static assets.",
                        "Only assets that are in the public directory at build time will be served by Next.js. Files added at request time won't be available. We recommend using a third-party service like Vercel Blob for persistent file storage."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/third-party-libraries",
            "title": "Optimizing: Third Party Libraries | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "@next/third-parties is a library that provides a collection of components and utilities that improve the performance and developer experience of loading popular third-party libraries in your Next.js application. All third-party integrations provided by @next/third-parties have been optimized for performance and ease of use. To get started, install the @next/third-parties library:"
                },
                {
                    "type": "code",
                    "code": "npm install @next/third-parties@latest next@latest"
                },
                {
                    "type": "p",
                    "text": "@next/third-parties is currently an experimental library under active development. We recommend installing it with the latest or canary flags while we work on adding more third-party integrations. All supported third-party libraries from Google can be imported from @next/third-parties/google . The GoogleTagManager component can be used to instantiate a Google Tag Manager container to your page. By default, it fetches the original inline script after hydration occurs on the page. To load Google Tag Manager for all routes, include the component directly in your root layout and pass in your GTM container ID:"
                },
                {
                    "type": "code",
                    "code": "import { GoogleTagManager } from '@next/third-parties/google' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < GoogleTagManager gtmId = \"GTM-XYZ\" /> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "To load Google Tag Manager for a single route, include the component in your page file:"
                },
                {
                    "type": "code",
                    "code": "import { GoogleTagManager } from '@next/third-parties/google' export default function Page () { return < GoogleTagManager gtmId = \"GTM-XYZ\" /> }"
                },
                {
                    "type": "p",
                    "text": "The sendGTMEvent function can be used to track user interactions on your page by sending events\nusing the dataLayer object. For this function to work, the <GoogleTagManager /> component must be\nincluded in either a parent layout, page, or component, or directly in the same file."
                },
                {
                    "type": "code",
                    "code": "'use client' import { sendGTMEvent } from '@next/third-parties/google' export function EventButton () { return ( < div > < button onClick = {() => sendGTMEvent ({ event : 'buttonClicked' , value : 'xyz' })} > Send Event </ button > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Refer to the Tag Manager developer\ndocumentation to learn about the\ndifferent variables and events that can be passed into the function. If you're using a server-side tag manager and serving gtm.js scripts from your tagging server you can\nuse gtmScriptUrl option to specify the URL of the script. Options to pass to the Google Tag Manager. For a full list of options, read the Google Tag Manager\ndocs . The GoogleAnalytics component can be used to include Google Analytics\n4 to your page via the Google tag\n( gtag.js ). By default, it fetches the original scripts after hydration occurs on the page. Recommendation : If Google Tag Manager is already included in your application, you can\nconfigure Google Analytics directly using it, rather than including Google Analytics as a separate\ncomponent. Refer to the documentation to learn more about the differences between Tag Manager and gtag.js . To load Google Analytics for all routes, include the component directly in your root layout and pass\nin your measurement ID:"
                },
                {
                    "type": "code",
                    "code": "import { GoogleAnalytics } from '@next/third-parties/google' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body >{children}</ body > < GoogleAnalytics gaId = \"G-XYZ\" /> </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "To load Google Analytics for a single route, include the component in your page file:"
                },
                {
                    "type": "code",
                    "code": "import { GoogleAnalytics } from '@next/third-parties/google' export default function Page () { return < GoogleAnalytics gaId = \"G-XYZ\" /> }"
                },
                {
                    "type": "p",
                    "text": "The sendGAEvent function can be used to measure user interactions on your page by sending events\nusing the dataLayer object. For this function to work, the <GoogleAnalytics /> component must be\nincluded in either a parent layout, page, or component, or directly in the same file."
                },
                {
                    "type": "code",
                    "code": "'use client' import { sendGAEvent } from '@next/third-parties/google' export function EventButton () { return ( < div > < button onClick = {() => sendGAEvent ( 'event' , 'buttonClicked' , { value : 'xyz' })} > Send Event </ button > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Refer to the Google Analytics developer\ndocumentation to learn\nmore about event parameters. Google Analytics automatically tracks pageviews when the browser history state changes. This means\nthat client-side navigations between Next.js routes will send pageview data without any configuration. To ensure that client-side navigations are being measured correctly, verify that the “Enhanced\nMeasurement” property is\nenabled in your Admin panel and the “Page changes based on browser history events” checkbox is\nselected. Note : If you decide to manually send pageview events, make sure to disable the default\npageview measurement to avoid having duplicate data. Refer to the Google Analytics developer\ndocumentation to learn more. Options to pass to the <GoogleAnalytics> component. The GoogleMapsEmbed component can be used to add a Google Maps\nEmbed to your page. By\ndefault, it uses the loading attribute to lazy-load the embed below the fold."
                },
                {
                    "type": "code",
                    "code": "import { GoogleMapsEmbed } from '@next/third-parties/google' export default function Page () { return ( < GoogleMapsEmbed apiKey = \"XYZ\" height = { 200 } width = \"100%\" mode = \"place\" q = \"Brooklyn+Bridge,New+York,NY\" /> ) }"
                },
                {
                    "type": "p",
                    "text": "Options to pass to the Google Maps Embed. For a full list of options, read the Google Map Embed\ndocs . The YouTubeEmbed component can be used to load and display a YouTube embed. This component loads\nfaster by using lite-youtube-embed under the\nhood."
                },
                {
                    "type": "code",
                    "code": "import { YouTubeEmbed } from '@next/third-parties/google' export default function Page () { return < YouTubeEmbed videoid = \"ogfYd705cRs\" height = { 400 } params = \"controls=0\" /> }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/optimizing/videos",
            "title": "Optimizing: Videos | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This page outlines how to use videos with Next.js applications, showing how to store and display video files without affecting performance. Videos can be embedded on the page using the HTML <video> tag for direct video files and <iframe> for external platform-hosted videos. The HTML <video> tag can embed self-hosted or directly served video content, allowing full control over the playback and appearance."
                },
                {
                    "type": "code",
                    "code": "export function Video () { return ( < video width = \"320\" height = \"240\" controls preload = \"none\" > < source src = \"/path/to/video.mp4\" type = \"video/mp4\" /> < track src = \"/path/to/captions.vtt\" kind = \"subtitles\" srcLang = \"en\" label = \"English\" /> Your browser does not support the video tag. </ video > ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : When using the autoPlay attribute, it is important to also include the muted attribute to ensure the video plays automatically in most browsers and the playsInline attribute for compatibility with iOS devices. For a comprehensive list of video attributes, refer to the MDN documentation ."
                },
                {
                    "type": "list",
                    "items": [
                        "Fallback Content: When using the <video> tag, include fallback content inside the tag for browsers that do not support video playback.",
                        "Subtitles or Captions: Include subtitles or captions for users who are deaf or hard of hearing. Utilize the <track> tag with your <video> elements to specify caption file sources.",
                        "Accessible Controls: Standard HTML5 video controls are recommended for keyboard navigation and screen reader compatibility. For advanced needs, consider third-party players like react-player or video.js , which offer accessible controls and consistent browser experience."
                    ]
                },
                {
                    "type": "p",
                    "text": "The HTML <iframe> tag allows you to embed videos from external platforms like YouTube or Vimeo."
                },
                {
                    "type": "code",
                    "code": "export default function Page () { return ( < iframe src = \"https://www.youtube.com/embed/19g66ezsKAg\" allowFullScreen /> ) }"
                },
                {
                    "type": "p",
                    "text": "For a comprehensive list of iframe attributes, refer to the MDN documentation . There are two ways you can embed videos in your Next.js application:"
                },
                {
                    "type": "list",
                    "items": [
                        "Self-hosted or direct video files: Embed self-hosted videos using the <video> tag for scenarios requiring detailed control over the player's functionality and appearance. This integration method within Next.js allows for customization and control of your video content.",
                        "Using video hosting services (YouTube, Vimeo, etc.): For video hosting services like YouTube or Vimeo, you'll embed their iframe-based players using the <iframe> tag. While this method limits some control over the player, it offers ease of use and features provided by these platforms."
                    ]
                },
                {
                    "type": "p",
                    "text": "Choose the embedding method that aligns with your application's requirements and the user experience you aim to deliver. To embed videos from external platforms, you can use Next.js to fetch the video information and React Suspense to handle the fallback state while loading. 1. Create a Server Component for video embedding The first step is to create a Server Component that generates the appropriate iframe for embedding the video. This component will fetch the source URL for the video and render the iframe."
                },
                {
                    "type": "code",
                    "code": "export default async function VideoComponent () { const src = await getVideoSrc () return < iframe src = {src} allowFullScreen /> }"
                },
                {
                    "type": "p",
                    "text": "2. Stream the video component using React Suspense After creating the Server Component to embed the video, the next step is to stream the component using React Suspense ."
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from 'react' import VideoComponent from '../ui/VideoComponent.jsx' export default function Page () { return ( < section > < Suspense fallback = {< p >Loading video...</ p >}> < VideoComponent /> </ Suspense > { /* Other content of the page */ } </ section > ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : When embedding videos from external platforms, consider the following best practices:"
                },
                {
                    "type": "list",
                    "items": [
                        "Ensure the video embeds are responsive. Use CSS to make the iframe or video player adapt to different screen sizes.",
                        "Implement strategies for loading videos based on network conditions, especially for users with limited data plans."
                    ]
                },
                {
                    "type": "p",
                    "text": "This approach results in a better user experience as it prevents the page from blocking, meaning the user can interact with the page while the video component streams in. For a more engaging and informative loading experience, consider using a loading skeleton as the fallback UI. So instead of showing a simple loading message, you can show a skeleton that resembles the video player like this:"
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from 'react' import VideoComponent from '../ui/VideoComponent.jsx' import VideoSkeleton from '../ui/VideoSkeleton.jsx' export default function Page () { return ( < section > < Suspense fallback = {< VideoSkeleton />}> < VideoComponent /> </ Suspense > { /* Other content of the page */ } </ section > ) }"
                },
                {
                    "type": "p",
                    "text": "Self-hosting videos may be preferable for several reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Complete control and independence : Self-hosting gives you direct management over your video content, from playback to appearance, ensuring full ownership and control, free from external platform constraints.",
                        "Customization for specific needs : Ideal for unique requirements, like dynamic background videos, it allows for tailored customization to align with design and functional needs.",
                        "Performance and scalability considerations : Choose storage solutions that are both high-performing and scalable, to support increasing traffic and content size effectively.",
                        "Cost and integration : Balance the costs of storage and bandwidth with the need for easy integration into your Next.js framework and broader tech ecosystem."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vercel Blob offers an efficient way to host videos, providing a scalable cloud storage solution that works well with Next.js. Here's how you can host a video using Vercel Blob: 1. Uploading a video to Vercel Blob In your Vercel dashboard, navigate to the \"Storage\" tab and select your Vercel Blob store. In the Blob table's upper-right corner, find and click the \"Upload\" button. Then, choose the video file you wish to upload. After the upload completes, the video file will appear in the Blob table. Alternatively, you can upload your video using a server action. For detailed instructions, refer to the Vercel documentation on server-side uploads . Vercel also supports client-side uploads . This method may be preferable for certain use cases. 2. Displaying the video in Next.js Once the video is uploaded and stored, you can display it in your Next.js application. Here's an example of how to do this using the <video> tag and React Suspense:"
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from 'react' import { list } from '@vercel/blob' export default function Page () { return ( < Suspense fallback = {< p >Loading video...</ p >}> < VideoComponent fileName = \"my-video.mp4\" /> </ Suspense > ) } async function VideoComponent ({ fileName }) { const { blobs } = await list ({ prefix : fileName , limit : 1 , }) const { url } = blobs[ 0 ] return ( < video controls preload = \"none\" aria-label = \"Video player\" > < source src = {url} type = \"video/mp4\" /> Your browser does not support the video tag. </ video > ) }"
                },
                {
                    "type": "p",
                    "text": "In this approach, the page uses the video's @vercel/blob URL to display the video using the VideoComponent . React Suspense is used to show a fallback until the video URL is fetched and the video is ready to be displayed. If you have subtitles for your video, you can easily add them using the <track> element inside your <video> tag. You can fetch the subtitle file from Vercel Blob in a similar way as the video file. Here's how you can update the <VideoComponent> to include subtitles."
                },
                {
                    "type": "code",
                    "code": "async function VideoComponent ({ fileName }) { const { blobs } = await list ({ prefix : fileName , limit : 2 , }) const { url } = blobs[ 0 ] const { url: captionsUrl } = blobs[ 1 ] return ( < video controls preload = \"none\" aria-label = \"Video player\" > < source src = {url} type = \"video/mp4\" /> < track src = {captionsUrl} kind = \"subtitles\" srcLang = \"en\" label = \"English\" /> Your browser does not support the video tag. </ video > ) }"
                },
                {
                    "type": "p",
                    "text": "By following this approach, you can effectively self-host and integrate videos into your Next.js applications. To continue learning more about video optimization and best practices, please refer to the following resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Understanding video formats and codecs : Choose the right format and codec, like MP4 for compatibility or WebM for web optimization, for your video needs. For more details, see Mozilla's guide on video codecs .",
                        "Video compression : Use tools like FFmpeg to effectively compress videos, balancing quality with file size. Learn about compression techniques at FFmpeg's official website .",
                        "Resolution and bitrate adjustment : Adjust resolution and bitrate based on the viewing platform, with lower settings for mobile devices.",
                        "Content Delivery Networks (CDNs) : Utilize a CDN to enhance video delivery speed and manage high traffic. When using some storage solutions, such as Vercel Blob, CDN functionality is automatically handled for you. Learn more about CDNs and their benefits."
                    ]
                },
                {
                    "type": "p",
                    "text": "Explore these video streaming platforms for integrating video into your Next.js projects:"
                },
                {
                    "type": "list",
                    "items": [
                        "Provides a <Video> component for Next.js, compatible with various hosting services including Vercel Blob , S3, Backblaze, and Mux.",
                        "Detailed documentation for using next-video.dev with different hosting services."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Official documentation and integration guide for using Cloudinary with Next.js.",
                        "Includes a <CldVideoPlayer> component for drop-in video support .",
                        "Find examples of integrating Cloudinary with Next.js including Adaptive Bitrate Streaming .",
                        "Other Cloudinary libraries including a Node.js SDK are also available."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Mux provides a starter template for creating a video course with Mux and Next.js.",
                        "Learn about Mux's recommendations for embedding high-performance video for your Next.js application .",
                        "Explore an example project demonstrating Mux with Next.js."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Learn more about integrating Fastly's solutions for video on demand and streaming media into Next.js."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Check out the official quick start guide for integrating ImageKit with Next.js.",
                        "The integration provides an <IKVideo> component, offering seamless video support .",
                        "You can also explore other ImageKit libraries , such as the Node.js SDK, which is also available."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering",
            "title": "Building Your Application: Rendering | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Rendering converts the code you write into user interfaces. React and Next.js allow you to create hybrid web applications where parts of your code can be rendered on the server or the client. This section will help you understand the differences between these rendering environments, strategies, and runtimes. To start, it's helpful to be familiar with three foundational web concepts:"
                },
                {
                    "type": "list",
                    "items": [
                        "The Environments your application code can be executed in: the server and the client.",
                        "The Request-Response Lifecycle that's initiated when a user visits or interacts with your application.",
                        "The Network Boundary that separates server and client code."
                    ]
                },
                {
                    "type": "p",
                    "text": "There are two environments where web applications can be rendered: the client and the server."
                },
                {
                    "type": "list",
                    "items": [
                        "The client refers to the browser on a user's device that sends a request to a server for your application code. It then turns the response from the server into a user interface.",
                        "The server refers to the computer in a data center that stores your application code, receives requests from a client, and sends back an appropriate response."
                    ]
                },
                {
                    "type": "p",
                    "text": "Historically, developers had to use different languages (e.g. JavaScript, PHP) and frameworks when writing code for the server and the client. With React, developers can use the same language (JavaScript), and the same framework (e.g. Next.js or your framework of choice). This flexibility allows you to seamlessly write code for both environments without context switching. However, each environment has its own set of capabilities and constraints. Therefore, the code you write for the server and the client is not always the same. There are certain operations (e.g. data fetching or managing user state) that are better suited for one environment over the other. Understanding these differences is key to effectively using React and Next.js. We'll cover the differences and use cases in more detail on the Server and Client Components pages, for now, let's continue building on our foundation. Broadly speaking, all websites follow the same Request-Response Lifecycle :"
                },
                {
                    "type": "list",
                    "items": [
                        "User Action: The user interacts with a web application. This could be clicking a link, submitting a form, or typing a URL directly into the browser's address bar.",
                        "HTTP Request: The client sends an HTTP request to the server that contains necessary information about what resources are being requested, what method is being used (e.g. GET , POST ), and additional data if necessary.",
                        "Server: The server processes the request and responds with the appropriate resources. This process may take a couple of steps like routing, fetching data, etc.",
                        "HTTP Response: After processing the request, the server sends an HTTP response back to the client. This response contains a status code (which tells the client whether the request was successful or not) and requested resources (e.g. HTML, CSS, JavaScript, static assets, etc).",
                        "Client: The client parses the resources to render the user interface.",
                        "User Action: Once the user interface is rendered, the user can interact with it, and the whole process starts again."
                    ]
                },
                {
                    "type": "p",
                    "text": "A major part of building a hybrid web application is deciding how to split the work in the lifecycle, and where to place the Network Boundary. In web development, the Network Boundary is a conceptual line that separates the different environments. For example, the client and the server, or the server and the data store. In React, you choose where to place the client-server network boundary wherever it makes the most sense. Behind the scenes, the work is split into two parts: the client module graph and the server module graph . The server module graph contains all the components that are rendered on the server, and the client module graph contains all components that are rendered on the client. It may be helpful to think about module graphs as a visual representation of how files in your application depend on each other. You can use the React \"use client\" convention to define the boundary. There's also a \"use server\" convention, which tells React to do some computational work on the server. When working in these environments, it's helpful to think of the flow of the code in your application as unidirectional . In other words, during a response, your application code flows in one direction: from the server to the client. If you need to access the server from the client, you send a new request to the server rather than re-use the same request. This makes it easier to understand where to render your components and where to place the Network Boundary. In practice, this model encourages developers to think about what they want to execute on the server first, before sending the result to the client and making the application interactive. This concept will become clearer when we look at how you can interleave client and server components in the same component tree."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering/client-components",
            "title": "Rendering: Client Components | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Client Components allow you to write interactive UI that is prerendered on the server and can use client JavaScript to run in the browser. This page will go through how Client Components work, how they're rendered, and when you might use them. There are a couple of benefits to doing the rendering work on the client, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Interactivity : Client Components can use state, effects, and event listeners, meaning they can provide immediate feedback to the user and update the UI.",
                        "Browser APIs : Client Components have access to browser APIs, like geolocation or localStorage ."
                    ]
                },
                {
                    "type": "p",
                    "text": "To use Client Components, you can add the React \"use client\" directive at the top of a file, above your imports. \"use client\" is used to declare a boundary between a Server and Client Component modules. This means that by defining a \"use client\" in a file, all other modules imported into it, including child components, are considered part of the client bundle."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState } from 'react' export default function Counter () { const [ count , setCount ] = useState ( 0 ) return ( < div > < p >You clicked {count} times</ p > < button onClick = {() => setCount (count + 1 )}>Click me</ button > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "The diagram below shows that using onClick and useState in a nested component ( toggle.js ) will cause an error if the \"use client\" directive is not defined. This is because, by default, all components in the App Router are Server Components where these APIs are not available. By defining the \"use client\" directive in toggle.js , you can tell React to enter the client boundary where these APIs are available. Defining multiple use client entry points : You can define multiple \"use client\" entry points in your React Component tree. This allows you to split your application into multiple client bundles. However, \"use client\" doesn't need to be defined in every component that needs to be rendered on the client. Once you define the boundary, all child components and modules imported into it are considered part of the client bundle. In Next.js, Client Components are rendered differently depending on whether the request is part of a full page load (an initial visit to your application or a page reload triggered by a browser refresh) or a subsequent navigation. To optimize the initial page load, Next.js will use React's APIs to render a static HTML preview on the server for both Client and Server Components. This means, when the user first visits your application, they will see the content of the page immediately, without having to wait for the client to download, parse, and execute the Client Component JavaScript bundle."
                },
                {
                    "type": "list",
                    "items": [
                        "React renders Server Components into a special data format called the React Server Component Payload (RSC Payload) , which includes references to Client Components.",
                        "Next.js uses the RSC Payload and Client Component JavaScript instructions to render HTML for the route on the server."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The HTML is used to immediately show a fast non-interactive initial preview of the route.",
                        "The React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.",
                        "The JavaScript instructions are used to hydrate Client Components and make their UI interactive."
                    ]
                },
                {
                    "type": "p",
                    "text": "Hydration is the process of attaching event listeners to the DOM, to make the static HTML interactive. Behind the scenes, hydration is done with the hydrateRoot React API. On subsequent navigations, Client Components are rendered entirely on the client, without the server-rendered HTML. This means the Client Component JavaScript bundle is downloaded and parsed. Once the bundle is ready, React will use the RSC Payload to reconcile the Client and Server Component trees, and update the DOM. Sometimes, after you've declared the \"use client\" boundary, you may want to go back to the server environment. For example, you may want to reduce the client bundle size, fetch data on the server, or use an API that is only available on the server. You can keep code on the server even though it's theoretically nested inside Client Components by interleaving Client and Server Components and Server Actions . See the Composition Patterns page for more information."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns",
            "title": "Rendering: Composition Patterns | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "When building React applications, you will need to consider what parts of your application should be rendered on the server or the client. This page covers some recommended composition patterns when using Server and Client Components. Here's a quick summary of the different use cases for Server and Client Components: Before opting into client-side rendering, you may wish to do some work on the server like fetching data, or accessing your database or backend services. Here are some common patterns when working with Server Components: When fetching data on the server, there may be cases where you need to share data across different components. For example, you may have a layout and a page that depend on the same data. Instead of using React Context (which is not available on the server) or passing data as props, you can use fetch or React's cache function to fetch the same data in the components that need it, without worrying about making duplicate requests for the same data. This is because React extends fetch to automatically memoize data requests, and the cache function can be used when fetch is not available. View an example of this pattern. Since JavaScript modules can be shared between both Server and Client Components modules, it's possible for code that was only ever intended to be run on the server to sneak its way into the client. For example, take the following data-fetching function:"
                },
                {
                    "type": "code",
                    "code": "export async function getData () { const res = await fetch ( 'https://external-service.com/data' , { headers : { authorization : process . env . API_KEY , } , }) return res .json () }"
                },
                {
                    "type": "p",
                    "text": "At first glance, it appears that getData works on both the server and the client. However, this function contains an API_KEY , written with the intention that it would only ever be executed on the server. Since the environment variable API_KEY is not prefixed with NEXT_PUBLIC , it's a private variable that can only be accessed on the server. To prevent your environment variables from being leaked to the client, Next.js replaces private environment variables with an empty string. As a result, even though getData() can be imported and executed on the client, it won't work as expected. And while making the variable public would make the function work on the client, you may not want to expose sensitive information to the client. To prevent this sort of unintended client usage of server code, we can use the server-only package to give other developers a build-time error if they ever accidentally import one of these modules into a Client Component. To use server-only , first install the package:"
                },
                {
                    "type": "code",
                    "code": "npm install server-only"
                },
                {
                    "type": "p",
                    "text": "Then import the package into any module that contains server-only code:"
                },
                {
                    "type": "code",
                    "code": "import 'server-only' export async function getData () { const res = await fetch ( 'https://external-service.com/data' , { headers : { authorization : process . env . API_KEY , } , }) return res .json () }"
                },
                {
                    "type": "p",
                    "text": "Now, any Client Component that imports getData() will receive a build-time error explaining that this module can only be used on the server. The corresponding package client-only can be used to mark modules that contain client-only code – for example, code that accesses the window object. Since Server Components are a new React feature, third-party packages and providers in the ecosystem are just beginning to add the \"use client\" directive to components that use client-only features like useState , useEffect , and createContext . Today, many components from npm packages that use client-only features do not yet have the directive. These third-party components will work as expected within Client Components since they have the \"use client\" directive, but they won't work within Server Components. For example, let's say you've installed the hypothetical acme-carousel package which has a <Carousel /> component. This component uses useState , but it doesn't yet have the \"use client\" directive. If you use <Carousel /> within a Client Component, it will work as expected:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState } from 'react' import { Carousel } from 'acme-carousel' export default function Gallery () { const [ isOpen , setIsOpen ] = useState ( false ) return ( < div > < button onClick = {() => setIsOpen ( true )}>View pictures</ button > { /* Works, since Carousel is used within a Client Component */ } {isOpen && < Carousel />} </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "However, if you try to use it directly within a Server Component, you'll see an error:"
                },
                {
                    "type": "code",
                    "code": "import { Carousel } from 'acme-carousel' export default function Page () { return ( < div > < p >View pictures</ p > { /* Error: `useState` can not be used within Server Components */ } < Carousel /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "This is because Next.js doesn't know <Carousel /> is using client-only features. To fix this, you can wrap third-party components that rely on client-only features in your own Client Components:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { Carousel } from 'acme-carousel' export default Carousel"
                },
                {
                    "type": "p",
                    "text": "Now, you can use <Carousel /> directly within a Server Component:"
                },
                {
                    "type": "code",
                    "code": "import Carousel from './carousel' export default function Page () { return ( < div > < p >View pictures</ p > { /*  Works, since Carousel is a Client Component */ } < Carousel /> </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "We don't expect you to need to wrap most third-party components since it's likely you'll be using them within Client Components. However, one exception is providers, since they rely on React state and context, and are typically needed at the root of an application. Learn more about third-party context providers below . Context providers are typically rendered near the root of an application to share global concerns, like the current theme. Since React context is not supported in Server Components, trying to create a context at the root of your application will cause an error:"
                },
                {
                    "type": "code",
                    "code": "import { createContext } from 'react' //  createContext is not supported in Server Components export const ThemeContext = createContext ({}) export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html > < body > < ThemeContext.Provider value = \"dark\" >{children}</ ThemeContext.Provider > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "To fix this, create your context and render its provider inside of a Client Component:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { createContext } from 'react' export const ThemeContext = createContext ({}) export default function ThemeProvider ({ children , } : { children : React . ReactNode }) { return < ThemeContext.Provider value = \"dark\" >{children}</ ThemeContext.Provider > }"
                },
                {
                    "type": "p",
                    "text": "Your Server Component will now be able to directly render your provider since it's been marked as a Client Component:"
                },
                {
                    "type": "code",
                    "code": "import ThemeProvider from './theme-provider' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html > < body > < ThemeProvider >{children}</ ThemeProvider > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "With the provider rendered at the root, all other Client Components throughout your app will be able to consume this context. Good to know : You should render providers as deep as possible in the tree – notice how ThemeProvider only wraps {children} instead of the entire <html> document. This makes it easier for Next.js to optimize the static parts of your Server Components. In a similar fashion, library authors creating packages to be consumed by other developers can use the \"use client\" directive to mark client entry points of their package. This allows users of the package to import package components directly into their Server Components without having to create a wrapping boundary. You can optimize your package by using 'use client' deeper in the tree , allowing the imported modules to be part of the Server Component module graph. It's worth noting some bundlers might strip out \"use client\" directives. You can find an example of how to configure esbuild to include the \"use client\" directive in the React Wrap Balancer and Vercel Analytics repositories. To reduce the Client JavaScript bundle size, we recommend moving Client Components down your component tree. For example, you may have a Layout that has static elements (e.g. logo, links, etc) and an interactive search bar that uses state. Instead of making the whole layout a Client Component, move the interactive logic to a Client Component (e.g. <SearchBar /> ) and keep your layout as a Server Component. This means you don't have to send all the component JavaScript of the layout to the client."
                },
                {
                    "type": "code",
                    "code": "// SearchBar is a Client Component import SearchBar from './searchbar' // Logo is a Server Component import Logo from './logo' // Layout is a Server Component by default export default function Layout ({ children } : { children : React . ReactNode }) { return ( <> < nav > < Logo /> < SearchBar /> </ nav > < main >{children}</ main > </> ) }"
                },
                {
                    "type": "p",
                    "text": "If you fetch data in a Server Component, you may want to pass data down as props to Client Components. Props passed from the Server to Client Components need to be serializable by React. If your Client Components depend on data that is not serializable, you can fetch data on the client with a third party library or on the server with a Route Handler . When interleaving Client and Server Components, it may be helpful to visualize your UI as a tree of components. Starting with the root layout , which is a Server Component, you can then render certain subtrees of components on the client by adding the \"use client\" directive. Within those client subtrees, you can still nest Server Components or call Server Actions, however there are some things to keep in mind:"
                },
                {
                    "type": "list",
                    "items": [
                        "During a request-response lifecycle, your code moves from the server to the client. If you need to access data or resources on the server while on the client, you'll be making a new request to the server - not switching back and forth.",
                        "When a new request is made to the server, all Server Components are rendered first, including those nested inside Client Components. The rendered result ( RSC Payload ) will contain references to the locations of Client Components. Then, on the client, React uses the RSC Payload to reconcile Server and Client Components into a single tree."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Since Client Components are rendered after Server Components, you cannot import a Server Component into a Client Component module (since it would require a new request back to the server). Instead, you can pass a Server Component as props to a Client Component. See the unsupported pattern and supported pattern sections below."
                    ]
                },
                {
                    "type": "p",
                    "text": "The following pattern is not supported. You cannot import a Server Component into a Client Component:"
                },
                {
                    "type": "code",
                    "code": "'use client' // You cannot import a Server Component into a Client Component. import ServerComponent from './Server-Component' export default function ClientComponent ({ children , } : { children : React . ReactNode }) { const [ count , setCount ] = useState ( 0 ) return ( <> < button onClick = {() => setCount (count + 1 )}>{count}</ button > < ServerComponent /> </> ) }"
                },
                {
                    "type": "p",
                    "text": "The following pattern is supported. You can pass Server Components as a prop to a Client Component. A common pattern is to use the React children prop to create a \"slot\" in your Client Component. In the example below, <ClientComponent> accepts a children prop:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState } from 'react' export default function ClientComponent ({ children , } : { children : React . ReactNode }) { const [ count , setCount ] = useState ( 0 ) return ( <> < button onClick = {() => setCount (count + 1 )}>{count}</ button > {children} </> ) }"
                },
                {
                    "type": "p",
                    "text": "<ClientComponent> doesn't know that children will eventually be filled in by the result of a Server Component. The only responsibility <ClientComponent> has is to decide where children will eventually be placed. In a parent Server Component, you can import both the <ClientComponent> and <ServerComponent> and pass <ServerComponent> as a child of <ClientComponent> :"
                },
                {
                    "type": "code",
                    "code": "// This pattern works: // You can pass a Server Component as a child or prop of a // Client Component. import ClientComponent from './client-component' import ServerComponent from './server-component' // Pages in Next.js are Server Components by default export default function Page () { return ( < ClientComponent > < ServerComponent /> </ ClientComponent > ) }"
                },
                {
                    "type": "p",
                    "text": "With this approach, <ClientComponent> and <ServerComponent> are decoupled and can be rendered independently. In this case, the child <ServerComponent> can be rendered on the server, well before <ClientComponent> is rendered on the client."
                },
                {
                    "type": "list",
                    "items": [
                        "The pattern of \"lifting content up\" has been used to avoid re-rendering a nested child component when a parent component re-renders.",
                        "You're not limited to the children prop. You can use any prop to pass JSX."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes",
            "title": "Rendering: Runtimes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js has two server runtimes you can use in your application:"
                },
                {
                    "type": "list",
                    "items": [
                        "The Node.js Runtime (default), which has access to all Node.js APIs and compatible packages from the ecosystem.",
                        "The Edge Runtime which contains a more limited set of APIs ."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The Node.js Runtime is used for rendering your application.",
                        "The Edge Runtime is used for Middleware (routing rules like redirects, rewrites, and setting headers)."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The Edge Runtime does not support all Node.js APIs. Some packages may not work as expected. Learn more about the unsupported APIs in the Edge Runtime .",
                        "The Edge Runtime does not support Incremental Static Regeneration (ISR).",
                        "Both runtimes can support streaming depending on your deployment infrastructure."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering/partial-prerendering",
            "title": "Rendering: Partial Prerendering | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Note: Partial Prerendering is an experimental feature only available on canary and is subject to change. It is not ready for production use. Partial Prerendering (PPR) enables you to combine static and dynamic components together in the same route. During the build, Next.js prerenders as much of the route as possible. If dynamic code is detected, like reading from the incoming request, you can wrap the relevant component with a React Suspense boundary. The Suspense boundary fallback will then be included in the prerendered HTML. 🎥 Watch: Why PPR and how it works → YouTube (10 minutes) . PPR enables your Next.js server to immediately send prerendered content. To prevent client to server waterfalls, dynamic components begin streaming from the server in parallel while serving the initial prerender. This ensures dynamic components can begin rendering before client JavaScript has been loaded in the browser. To prevent creating many HTTP requests for each dynamic component, PPR is able to combine the static prerender and dynamic components together into a single HTTP request. This ensures there are not multiple network roundtrips needed for each dynamic component. In Next.js 15, you can incrementally adopt Partial Prerendering in layouts and pages by setting the ppr option in next.config.js to incremental , and exporting the experimental_ppr route config option at the top of the file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { experimental : { ppr : 'incremental' , } , } export default nextConfig"
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from 'react' import { StaticComponent , DynamicComponent , Fallback } from '@/app/ui' export const experimental_ppr = true export default function Page () { return ( <> < StaticComponent /> < Suspense fallback = {< Fallback />}> < DynamicComponent /> </ Suspense > </> ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Routes that don't have experimental_ppr will default to false and will not be prerendered using PPR. You need to explicitly opt-in to PPR for each route.",
                        "experimental_ppr will apply to all children of the route segment, including nested layouts and pages. You don't have to add it to every file, only the top segment of a route.",
                        "To disable PPR for children segments, you can set experimental_ppr to false in the child segment."
                    ]
                },
                {
                    "type": "p",
                    "text": "When creating the prerender for your route during next build , Next.js requires that Dynamic APIs are wrapped with React Suspense. The fallback is then included in the prerender. For example, using functions like cookies or headers :"
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' export async function User () { const session = ( await cookies ()) .get ( 'session' )?.value return '...' }"
                },
                {
                    "type": "p",
                    "text": "This component requires looking at the incoming request to read cookies. To use this with PPR, you should wrap the component with Suspense:"
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from 'react' import { User , AvatarSkeleton } from './user' export const experimental_ppr = true export default function Page () { return ( < section > < h1 >This will be prerendered</ h1 > < Suspense fallback = {< AvatarSkeleton />}> < User /> </ Suspense > </ section > ) }"
                },
                {
                    "type": "p",
                    "text": "Components only opt into dynamic rendering when the value is accessed. For example, if you are reading searchParams from a page , you can forward this value to another component as a prop:"
                },
                {
                    "type": "code",
                    "code": "import { Table } from './table' export default function Page ({ searchParams , } : { searchParams : Promise <{ sort : string }> }) { return ( < section > < h1 >This will be prerendered</ h1 > < Table searchParams = {searchParams} /> </ section > ) }"
                },
                {
                    "type": "p",
                    "text": "Inside of the table component, accessing the value from searchParams will make the component run dynamically:"
                },
                {
                    "type": "code",
                    "code": "export async function Table ({ searchParams , } : { searchParams : Promise <{ sort : string }> }) { const sort = ( await searchParams).sort === 'true' return '...' }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/rendering/server-components",
            "title": "Rendering: Server Components | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "React Server Components allow you to write UI that can be rendered and optionally cached on the server. In Next.js, the rendering work is further split by route segments to enable streaming and partial rendering, and there are three different server rendering strategies:"
                },
                {
                    "type": "list",
                    "items": [
                        "Static Rendering",
                        "Dynamic Rendering",
                        "Streaming"
                    ]
                },
                {
                    "type": "p",
                    "text": "This page will go through how Server Components work, when you might use them, and the different server rendering strategies. There are a couple of benefits to doing the rendering work on the server, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Data Fetching : Server Components allow you to move data fetching to the server, closer to your data source. This can improve performance by reducing time it takes to fetch data needed for rendering, and the number of requests the client needs to make.",
                        "Security : Server Components allow you to keep sensitive data and logic on the server, such as tokens and API keys, without the risk of exposing them to the client.",
                        "Caching : By rendering on the server, the result can be cached and reused on subsequent requests and across users. This can improve performance and reduce cost by reducing the amount of rendering and data fetching done on each request.",
                        "Performance : Server Components give you additional tools to optimize performance from the baseline. For example, if you start with an app composed of entirely Client Components, moving non-interactive pieces of your UI to Server Components can reduce the amount of client-side JavaScript needed. This is beneficial for users with slower internet or less powerful devices, as the browser has less client-side JavaScript to download, parse, and execute.",
                        "Initial Page Load and First Contentful Paint (FCP) : On the server, we can generate HTML to allow users to view the page immediately, without waiting for the client to download, parse and execute the JavaScript needed to render the page.",
                        "Search Engine Optimization and Social Network Shareability : The rendered HTML can be used by search engine bots to index your pages and social network bots to generate social card previews for your pages.",
                        "Streaming : Server Components allow you to split the rendering work into chunks and stream them to the client as they become ready. This allows the user to see parts of the page earlier without having to wait for the entire page to be rendered on the server."
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, Next.js uses Server Components. This allows you to automatically implement server rendering with no additional configuration, and you can opt into using Client Components when needed, see Client Components . On the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks: by individual route segments and Suspense Boundaries . Each chunk is rendered in two steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "React renders Server Components into a special data format called the React Server Component Payload (RSC Payload) .",
                        "Next.js uses the RSC Payload and Client Component JavaScript instructions to render HTML on the server."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The HTML is used to immediately show a fast non-interactive preview of the route - this is for the initial page load only.",
                        "The React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.",
                        "The JavaScript instructions are used to hydrate Client Components and make the application interactive."
                    ]
                },
                {
                    "type": "p",
                    "text": "The RSC Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The RSC Payload contains:"
                },
                {
                    "type": "list",
                    "items": [
                        "The rendered result of Server Components",
                        "Placeholders for where Client Components should be rendered and references to their JavaScript files",
                        "Any props passed from a Server Component to a Client Component"
                    ]
                },
                {
                    "type": "p",
                    "text": "There are three subsets of server rendering: Static, Dynamic, and Streaming. With Static Rendering, routes are rendered at build time , or in the background after data revalidation . The result is cached and can be pushed to a Content Delivery Network (CDN) . This optimization allows you to share the result of the rendering work between users and server requests. Static rendering is useful when a route has data that is not personalized to the user and can be known at build time, such as a static blog post or a product page. With Dynamic Rendering, routes are rendered for each user at request time . Dynamic rendering is useful when a route has data that is personalized to the user or has information that can only be known at request time, such as cookies or the URL's search params. In most websites, routes are not fully static or fully dynamic - it's a spectrum. For example, you can have an e-commerce page that uses cached product data that's revalidated at an interval, but also has uncached, personalized customer data. In Next.js, you can have dynamically rendered routes that have both cached and uncached data. This is because the RSC Payload and data are cached separately. This allows you to opt into dynamic rendering without worrying about the performance impact of fetching all the data at request time. Learn more about the full-route cache and Data Cache . During rendering, if a Dynamic API or a fetch option of { cache: 'no-store' } is discovered, Next.js will switch to dynamically rendering the whole route. This table summarizes how Dynamic APIs and data caching affect whether a route is statically or dynamically rendered: In the table above, for a route to be fully static, all data must be cached. However, you can have a dynamically rendered route that uses both cached and uncached data fetches. As a developer, you do not need to choose between static and dynamic rendering as Next.js will automatically choose the best rendering strategy for each route based on the features and APIs used. Instead, you choose when to cache or revalidate specific data , and you may choose to stream parts of your UI. Dynamic APIs rely on information that can only be known at request time (and not ahead of time during prerendering). Using any of these APIs signals the developer's intention and will opt the whole route into dynamic rendering at the request time. These APIs include:"
                },
                {
                    "type": "list",
                    "items": [
                        "cookies",
                        "headers",
                        "connection",
                        "draftMode",
                        "searchParams prop",
                        "unstable_noStore"
                    ]
                },
                {
                    "type": "p",
                    "text": "Streaming enables you to progressively render UI from the server. Work is split into chunks and streamed to the client as it becomes ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering. Streaming is built into the Next.js App Router by default. This helps improve both the initial page loading performance, as well as UI that depends on slower data fetches that would block rendering the whole route. For example, reviews on a product page. You can start streaming route segments using loading.js and UI components with React Suspense . See the Loading UI and Streaming section for more information."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing",
            "title": "Building Your Application: Routing | Next.js",
            "content": []
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes",
            "title": "Routing: Dynamic Routes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "When you don't know the exact segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time or prerendered at build time. A Dynamic Segment can be created by wrapping a folder's name in square brackets: [folderName] . For example, [id] or [slug] . Dynamic Segments are passed as the params prop to layout , page , route , and generateMetadata functions. For example, a blog could include the following route app/blog/[slug]/page.js where [slug] is the Dynamic Segment for blog posts."
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ params , } : { params : Promise <{ slug : string }> }) { const slug = ( await params).slug return < div >My Post: {slug}</ div > }"
                },
                {
                    "type": "p",
                    "text": "See the generateStaticParams() page to learn how to generate the params for the segment."
                },
                {
                    "type": "list",
                    "items": [
                        "Since the params prop is a promise. You must use async/await or React's use function to access the values. In version 14 and earlier, params was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "In version 14 and earlier, params was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
                        "Dynamic Segments are equivalent to Dynamic Routes in the pages directory."
                    ]
                },
                {
                    "type": "p",
                    "text": "The generateStaticParams function can be used in combination with dynamic route segments to statically generate routes at build time instead of on-demand at request time."
                },
                {
                    "type": "code",
                    "code": "export async function generateStaticParams () { const posts = await fetch ( 'https://.../posts' ) .then ((res) => res .json ()) return posts .map ((post) => ({ slug : post .slug , })) }"
                },
                {
                    "type": "p",
                    "text": "The primary benefit of the generateStaticParams function is its smart retrieval of data. If content is fetched within the generateStaticParams function using a fetch request, the requests are automatically memoized . This means a fetch request with the same arguments across multiple generateStaticParams , Layouts, and Pages will only be made once, which decreases build times. Use the migration guide if you are migrating from the pages directory. See generateStaticParams server function documentation for more information and advanced use cases. Dynamic Segments can be extended to catch-all subsequent segments by adding an ellipsis inside the brackets [...folderName] . For example, app/shop/[...slug]/page.js will match /shop/clothes , but also /shop/clothes/tops , /shop/clothes/tops/t-shirts , and so on. Catch-all Segments can be made optional by including the parameter in double square brackets: [[...folderName]] . For example, app/shop/[[...slug]]/page.js will also match /shop , in addition to /shop/clothes , /shop/clothes/tops , /shop/clothes/tops/t-shirts . The difference between catch-all and optional catch-all segments is that with optional, the route without the parameter is also matched ( /shop in the example above). When using TypeScript, you can add types for params depending on your configured route segment."
                },
                {
                    "type": "code",
                    "code": "export default async function Page ({ params , } : { params : Promise <{ slug : string }> }) { return < h1 >My Page</ h1 > }"
                },
                {
                    "type": "p",
                    "text": "Good to know : This may be done automatically by the TypeScript plugin in the future."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/error-handling",
            "title": "Routing: Error Handling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Errors can be divided into two categories: expected errors and uncaught exceptions :"
                },
                {
                    "type": "list",
                    "items": [
                        "Model expected errors as return values : Avoid using try / catch for expected errors in Server Actions. Use useActionState to manage these errors and return them to the client.",
                        "Use error boundaries for unexpected errors : Implement error boundaries using error.tsx and global-error.tsx files to handle unexpected errors and provide a fallback UI."
                    ]
                },
                {
                    "type": "p",
                    "text": "Expected errors are those that can occur during the normal operation of the application, such as those from server-side form validation or failed requests. These errors should be handled explicitly and returned to the client. Use the useActionState hook to manage the state of Server Actions, including handling errors. This approach avoids try / catch blocks for expected errors, which should be modeled as return values rather than thrown exceptions."
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' export async function createUser (prevState : any , formData : FormData ) { const res = await fetch ( 'https://...' ) const json = await res .json () if ( ! res .ok) { return { message : 'Please enter a valid email' } } redirect ( '/dashboard' ) }"
                },
                {
                    "type": "p",
                    "text": "Then, you can pass your action to the useActionState hook and use the returned state to display an error message."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useActionState } from 'react' import { createUser } from '@/app/actions' const initialState = { message : '' , } export function Signup () { const [ state , formAction , pending ] = useActionState (createUser , initialState) return ( < form action = {formAction}> < label htmlFor = \"email\" >Email</ label > < input type = \"text\" id = \"email\" name = \"email\" req ui red /> { /* ... */ } < p aria-live = \"polite\" >{ state ?.message}</ p > < button disabled = {pending}>Sign up</ button > </ form > ) }"
                },
                {
                    "type": "p",
                    "text": "You could also use the returned state to display a toast message from the client component. When fetching data inside of a Server Component, you can use the response to conditionally render an error message or redirect ."
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const res = await fetch ( `https://...` ) const data = await res .json () if ( ! res .ok) { return 'There was an error.' } return '...' }"
                },
                {
                    "type": "p",
                    "text": "Uncaught exceptions are unexpected errors that indicate bugs or issues that should not occur during the normal flow of your application. These should be handled by throwing errors, which will then be caught by error boundaries."
                },
                {
                    "type": "list",
                    "items": [
                        "Common: Handle uncaught errors below the root layout with error.js .",
                        "Optional: Handle granular uncaught errors with nested error.js files (e.g. app/dashboard/error.js )",
                        "Uncommon: Handle uncaught errors in the root layout with global-error.js ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js uses error boundaries to handle uncaught exceptions. Error boundaries catch errors in their child components and display a fallback UI instead of the component tree that crashed. Create an error boundary by adding an error.tsx file inside a route segment and exporting a React component:"
                },
                {
                    "type": "code",
                    "code": "'use client' // Error boundaries must be Client Components import { useEffect } from 'react' export default function Error ({ error , reset , } : { error : Error & { digest ?: string } reset : () => void }) { useEffect (() => { // Log the error to an error reporting service console .error (error) } , [error]) return ( < div > < h2 >Something went wrong!</ h2 > < button onClick = { // Attempt to recover by trying to re-render the segment () => reset () } > Try again </ button > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "If you want errors to bubble up to the parent error boundary, you can throw when rendering the error component. Errors will bubble up to the nearest parent error boundary. This allows for granular error handling by placing error.tsx files at different levels in the route hierarchy . While less common, you can handle errors in the root layout using app/global-error.js , located in the root app directory, even when leveraging internationalization . Global error UI must define its own <html> and <body> tags, since it is replacing the root layout or template when active."
                },
                {
                    "type": "code",
                    "code": "'use client' // Error boundaries must be Client Components export default function GlobalError ({ error , reset , } : { error : Error & { digest ?: string } reset : () => void }) { return ( // global-error must include html and body tags < html > < body > < h2 >Something went wrong!</ h2 > < button onClick = {() => reset ()}>Try again</ button > </ body > </ html > ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/intercepting-routes",
            "title": "Routing: Intercepting Routes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Intercepting routes allows you to load a route from another part of your application within the current layout. This routing paradigm can be useful when you want to display the content of a route without the user switching to a different context. For example, when clicking on a photo in a feed, you can display the photo in a modal, overlaying the feed. In this case, Next.js intercepts the /photo/123 route, masks the URL, and overlays it over /feed . However, when navigating to the photo by clicking a shareable URL or by refreshing the page, the entire photo page should render instead of the modal. No route interception should occur. Intercepting routes can be defined with the (..) convention, which is similar to relative path convention ../ but for segments."
                },
                {
                    "type": "list",
                    "items": [
                        "(.) to match segments on the same level",
                        "(..) to match segments one level above",
                        "(..)(..) to match segments two levels above",
                        "(...) to match segments from the root app directory"
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, you can intercept the photo segment from within the feed segment by creating a (..)photo directory. Note that the (..) convention is based on route segments , not the file-system. Intercepting Routes can be used together with Parallel Routes to create modals. This allows you to solve common challenges when building modals, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "Making the modal content shareable through a URL .",
                        "Preserving context when the page is refreshed, instead of closing the modal.",
                        "Closing the modal on backwards navigation rather than going to the previous route.",
                        "Reopening the modal on forwards navigation ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Consider the following UI pattern, where a user can open a photo modal from a gallery using client-side navigation, or navigate to the photo page directly from a shareable URL: In the above example, the path to the photo segment can use the (..) matcher since @modal is a slot and not a segment. This means that the photo route is only one segment level higher, despite being two file-system levels higher. See the Parallel Routes documentation for a step-by-step example, or see our image gallery example ."
                },
                {
                    "type": "list",
                    "items": [
                        "Other examples could include opening a login modal in a top navbar while also having a dedicated /login page, or opening a shopping cart in a side modal."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/internationalization",
            "title": "Routing: Internationalization | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js enables you to configure the routing and rendering of content to support multiple languages. Making your site adaptive to different locales includes translated content (localization) and internationalized routes."
                },
                {
                    "type": "list",
                    "items": [
                        "Locale: An identifier for a set of language and formatting preferences. This usually includes the preferred language of the user and possibly their geographic region. en-US : English as spoken in the United States nl-NL : Dutch as spoken in the Netherlands nl : Dutch, no specific region",
                        "en-US : English as spoken in the United States",
                        "nl-NL : Dutch as spoken in the Netherlands",
                        "nl : Dutch, no specific region"
                    ]
                },
                {
                    "type": "p",
                    "text": "It’s recommended to use the user’s language preferences in the browser to select which locale to use. Changing your preferred language will modify the incoming Accept-Language header to your application. For example, using the following libraries, you can look at an incoming Request to determine which locale to select, based on the Headers , locales you plan to support, and the default locale."
                },
                {
                    "type": "code",
                    "code": "import { match } from '@formatjs/intl-localematcher' import Negotiator from 'negotiator' let headers = { 'accept-language' : 'en-US,en;q=0.5' } let languages = new Negotiator ({ headers }) .languages () let locales = [ 'en-US' , 'nl-NL' , 'nl' ] let defaultLocale = 'en-US' match (languages , locales , defaultLocale) // -> 'en-US'"
                },
                {
                    "type": "p",
                    "text": "Routing can be internationalized by either the sub-path ( /fr/products ) or domain ( my-site.fr/products ). With this information, you can now redirect the user based on the locale inside Middleware ."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from \"next/server\" ; let locales = [ 'en-US' , 'nl-NL' , 'nl' ] // Get the preferred locale, similar to the above or using a library function getLocale (request) { ... } export function middleware (request) { // Check if there is any supported locale in the pathname const { pathname } = request .nextUrl const pathnameHasLocale = locales .some ( (locale) => pathname .startsWith ( `/ ${ locale } /` ) || pathname === `/ ${ locale } ` ) if (pathnameHasLocale) return // Redirect if there is no locale const locale = getLocale (request) request . nextUrl .pathname = `/ ${ locale }${ pathname } ` // e.g. incoming request is /products // The new URL is now /en-US/products return NextResponse .redirect ( request .nextUrl) } export const config = { matcher : [ // Skip all internal paths (_next) '/((?!_next).*)' , // Optional: only run on root (/) URL // '/' ] , }"
                },
                {
                    "type": "p",
                    "text": "Finally, ensure all special files inside app/ are nested under app/[lang] . This enables the Next.js router to dynamically handle different locales in the route, and forward the lang parameter to every layout and page. For example:"
                },
                {
                    "type": "code",
                    "code": "// You now have access to the current locale // e.g. /en-US/products -> `lang` is \"en-US\" export default async function Page ({ params , } : { params : Promise <{ lang : string }> }) { const lang = ( await params).lang; return ... }"
                },
                {
                    "type": "p",
                    "text": "The root layout can also be nested in the new folder (e.g. app/[lang]/layout.js ). Changing displayed content based on the user’s preferred locale, or localization, is not something specific to Next.js. The patterns described below would work the same with any web application. Let’s assume we want to support both English and Dutch content inside our application. We might maintain two different “dictionaries”, which are objects that give us a mapping from some key to a localized string. For example:"
                },
                {
                    "type": "code",
                    "code": "{ \"products\" : { \"cart\" : \"Add to Cart\" } }"
                },
                {
                    "type": "code",
                    "code": "{ \"products\" : { \"cart\" : \"Toevoegen aan Winkelwagen\" } }"
                },
                {
                    "type": "p",
                    "text": "We can then create a getDictionary function to load the translations for the requested locale:"
                },
                {
                    "type": "code",
                    "code": "import 'server-only' const dictionaries = { en : () => import ( './dictionaries/en.json' ) .then ((module) => module .default) , nl : () => import ( './dictionaries/nl.json' ) .then ((module) => module .default) , } export const getDictionary = async (locale : 'en' | 'nl' ) => dictionaries[locale]()"
                },
                {
                    "type": "p",
                    "text": "Given the currently selected language, we can fetch the dictionary inside of a layout or page."
                },
                {
                    "type": "code",
                    "code": "import { getDictionary } from './dictionaries' export default async function Page ({ params , } : { params : Promise <{ lang : 'en' | 'nl' }> }) { const lang = ( await params).lang const dict = await getDictionary (lang) // en return < button >{ dict . products .cart}</ button > // Add to Cart }"
                },
                {
                    "type": "p",
                    "text": "Because all layouts and pages in the app/ directory default to Server Components , we do not need to worry about the size of the translation files affecting our client-side JavaScript bundle size. This code will only run on the server , and only the resulting HTML will be sent to the browser. To generate static routes for a given set of locales, we can use generateStaticParams with any page or layout. This can be global, for example, in the root layout:"
                },
                {
                    "type": "code",
                    "code": "export async function generateStaticParams () { return [{ lang : 'en-US' } , { lang : 'de' }] } export default function RootLayout ({ children , params , } : Readonly <{ children : React . ReactNode params : { lang : 'en-US' | 'de' } }>) { return ( < html lang = { params .lang}> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Minimal i18n routing and translations",
                        "next-intl",
                        "next-international",
                        "next-i18n-router",
                        "paraglide-next",
                        "lingui"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/layouts-and-templates",
            "title": "Getting Started: Layouts and Pages | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js uses file-system based routing , meaning you can use folders and files to define routes. This page will guide you through how to create layouts and pages, and link between them. A page is UI that is rendered on a specific route. To create a page, add a page file inside the app directory and default export a React component. For example, to create an index page ( / ):"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { return < h1 >Hello Next.js!</ h1 > }"
                },
                {
                    "type": "p",
                    "text": "A layout is UI that is shared between multiple pages. On navigation, layouts preserve state, remain interactive, and do not rerender. You can define a layout by default exporting a React component from a layout file . The component should accept a children prop which can be a page or another layout . For example, to create a layout that accepts your index page as child, add a layout file inside the app directory:"
                },
                {
                    "type": "code",
                    "code": "export default function DashboardLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body > { /* Layout UI */ } { /* Place children where you want to render a page or nested layout */ } < main >{children}</ main > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "The layout above is called a root layout because it's defined at the root of the app directory. The root layout is required and must contain html and body tags. A nested route is a route composed of multiple URL segments. For example, the /blog/[slug] route is composed of three segments:"
                },
                {
                    "type": "list",
                    "items": [
                        "/ (Root Segment)",
                        "blog (Segment)",
                        "[slug] (Leaf Segment)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Folders are used to define the route segments that map to URL segments.",
                        "Files (like page and layout ) are used to create UI that is shown for a segment."
                    ]
                },
                {
                    "type": "p",
                    "text": "To create nested routes, you can nest folders inside each other. For example, to add a route for /blog , create a folder called blog in the app directory. Then, to make /blog publicly accessible, add a page file:"
                },
                {
                    "type": "code",
                    "code": "import { getPosts } from '@/lib/posts' import { Post } from '@/ui/post' export default async function Page () { const posts = await getPosts () return ( < ul > { posts .map ((post) => ( < Post key = { post .id} post = {post} /> ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "You can continue nesting folders to create nested routes. For example, to create a route for a specific blog post, create a new [slug] folder inside blog and add a page file:"
                },
                {
                    "type": "code",
                    "code": "function generateStaticParams () {} export default function Page () { return < h1 >Hello, Blog Post Page!</ h1 > }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Wrapping a folder name in square brackets (e.g. [slug] ) creates a special dynamic route segment used to generate multiple pages from data. This is useful for blog posts, product pages, etc. By default, layouts in the folder hierarchy are also nested, which means they wrap child layouts via their children prop. You can nest layouts by adding layout inside specific route segments (folders). For example, to create a layout for the /blog route, add a new layout file inside the blog folder."
                },
                {
                    "type": "code",
                    "code": "export default function BlogLayout ({ children , } : { children : React . ReactNode }) { return < section >{children}</ section > }"
                },
                {
                    "type": "p",
                    "text": "If you were to combine the two layouts above, the root layout ( app/layout.js ) would wrap the blog layout ( app/blog/layout.js ), which would wrap the blog ( app/blog/page.js ) and blog post page ( app/blog/[slug]/page.js ). You can use the <Link> component to navigate between routes. <Link> is a built-in Next.js component that extends the HTML <a> tag to provide prefetching and client-side navigation. For example, to generate a list of blog posts, import <Link> from next/link and pass a href prop to the component:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default async function Post ({ post }) { const posts = await getPosts () return ( < ul > { posts .map ((post) => ( < li key = { post .slug}> < Link href = { `/blog/ ${ post .slug } ` }>{ post .title}</ Link > </ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "<Link> is the primary and recommended way to navigate between routes in your Next.js application. However, you can also use the useRouter hook for more advanced navigation."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating",
            "title": "Routing: Linking and Navigating | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "There are four ways to navigate between routes in Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using the <Link> Component",
                        "Using the useRouter hook ( Client Components )",
                        "Using the redirect function ( Server Components )",
                        "Using the native History API"
                    ]
                },
                {
                    "type": "p",
                    "text": "This page will go through how to use each of these options, and dive deeper into how navigation works. <Link> is a built-in component that extends the HTML <a> tag to provide prefetching and client-side navigation between routes. It is the primary and recommended way to navigate between routes in Next.js. You can use it by importing it from next/link , and passing a href prop to the component:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return < Link href = \"/dashboard\" >Dashboard</ Link > }"
                },
                {
                    "type": "p",
                    "text": "There are other optional props you can pass to <Link> . See the API reference for more. The useRouter hook allows you to programmatically change routes from Client Components ."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useRouter } from 'next/navigation' export default function Page () { const router = useRouter () return ( < button type = \"button\" onClick = {() => router .push ( '/dashboard' )}> Dashboard </ button > ) }"
                },
                {
                    "type": "p",
                    "text": "For a full list of useRouter methods, see the API reference . Recommendation: Use the <Link> component to navigate between routes unless you have a specific requirement for using useRouter . For Server Components , use the redirect function instead."
                },
                {
                    "type": "code",
                    "code": "import { redirect } from 'next/navigation' async function fetchTeam (id : string ) { const res = await fetch ( 'https://...' ) if ( ! res .ok) return undefined return res .json () } export default async function Profile ({ params , } : { params : Promise <{ id : string }> }) { const id = ( await params).id if ( ! id) { redirect ( '/login' ) } const team = await fetchTeam (id) if ( ! team ) { redirect ( '/join' ) } // ... }"
                },
                {
                    "type": "list",
                    "items": [
                        "redirect returns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.",
                        "redirect internally throws an error so it should be called outside of try/catch blocks.",
                        "redirect can be called in Client Components during the rendering process but not in event handlers. You can use the useRouter hook instead.",
                        "redirect also accepts absolute URLs and can be used to redirect to external links.",
                        "If you'd like to redirect before the render process, use next.config.js or Middleware ."
                    ]
                },
                {
                    "type": "p",
                    "text": "See the redirect API reference for more information. Next.js allows you to use the native window.history.pushState and window.history.replaceState methods to update the browser's history stack without reloading the page. pushState and replaceState calls integrate into the Next.js Router, allowing you to sync with usePathname and useSearchParams . Use it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useSearchParams } from 'next/navigation' export default function SortProducts () { const searchParams = useSearchParams () function updateSorting (sortOrder : string ) { const params = new URLSearchParams ( searchParams .toString ()) params .set ( 'sort' , sortOrder) window . history .pushState ( null , '' , `? ${ params .toString () } ` ) } return ( <> < button onClick = {() => updateSorting ( 'asc' )}>Sort Ascending</ button > < button onClick = {() => updateSorting ( 'desc' )}>Sort Descending</ button > </> ) }"
                },
                {
                    "type": "p",
                    "text": "Use it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { usePathname } from 'next/navigation' export function LocaleSwitcher () { const pathname = usePathname () function switchLocale (locale : string ) { // e.g. '/en/about' or '/fr/contact' const newPath = `/ ${ locale }${ pathname } ` window . history .replaceState ( null , '' , newPath) } return ( <> < button onClick = {() => switchLocale ( 'en' )}>English</ button > < button onClick = {() => switchLocale ( 'fr' )}>French</ button > </> ) }"
                },
                {
                    "type": "p",
                    "text": "The App Router uses a hybrid approach for routing and navigation. On the server, your application code is automatically code-split by route segments. And on the client, Next.js prefetches and caches the route segments. This means, when a user navigates to a new route, the browser doesn't reload the page, and only the route segments that change re-render - improving the navigation experience and performance. Code splitting allows you to split your application code into smaller bundles to be downloaded and executed by the browser. This reduces the amount of data transferred and execution time for each request, leading to improved performance. Server Components allow your application code to be automatically code-split by route segments. This means only the code needed for the current route is loaded on navigation. Prefetching is a way to preload a route in the background before the user visits it. There are two ways routes are prefetched in Next.js:"
                },
                {
                    "type": "list",
                    "items": [
                        "<Link> component : Routes are automatically prefetched as they become visible in the user's viewport. Prefetching happens when the page first loads or when it comes into view through scrolling.",
                        "router.prefetch() : The useRouter hook can be used to prefetch routes programmatically."
                    ]
                },
                {
                    "type": "p",
                    "text": "The <Link> 's default prefetching behavior (i.e. when the prefetch prop is left unspecified or set to null ) is different depending on your usage of loading.js . Only the shared layout, down the rendered \"tree\" of components until the first loading.js file, is prefetched and cached for 30s . This reduces the cost of fetching an entire dynamic route, and it means you can show an instant loading state for better visual feedback to users. You can disable prefetching by setting the prefetch prop to false . Alternatively, you can prefetch the full page data beyond the loading boundaries by setting the prefetch prop to true . See the <Link> API reference for more information."
                },
                {
                    "type": "list",
                    "items": [
                        "Prefetching is not enabled in development, only in production."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js has an in-memory client-side cache called the Router Cache . As users navigate around the app, the React Server Component Payload of prefetched route segments and visited routes are stored in the cache. This means on navigation, the cache is reused as much as possible, instead of making a new request to the server - improving performance by reducing the number of requests and data transferred. Learn more about how the Router Cache works and how to configure it. Partial rendering means only the route segments that change on navigation re-render on the client, and any shared segments are preserved. For example, when navigating between two sibling routes, /dashboard/settings and /dashboard/analytics , the settings page will be unmounted, the analytics page will be mounted with fresh state, and the shared dashboard layout will be preserved. This behavior is also present between two routes on the same dynamic segment e.g. with /blog/[slug]/page and navigating from /blog/first to /blog/second . Without partial rendering, each navigation would cause the full page to re-render on the client. Rendering only the segment that changes reduces the amount of data transferred and execution time, leading to improved performance. Browsers perform a \"hard navigation\" when navigating between pages. The Next.js App Router enables \"soft navigation\" between pages, ensuring only the route segments that have changed are re-rendered (partial rendering). This enables client React state to be preserved during navigation. By default, Next.js will maintain the scroll position for backwards and forwards navigation, and re-use route segments in the Router Cache . When incrementally migrating from pages/ to app/ , the Next.js router will automatically handle hard navigation between the two. To detect transitions from pages/ to app/ , there is a client router filter that leverages probabilistic checking of app routes, which can occasionally result in false positives. By default, such occurrences should be very rare, as we configure the false positive likelihood to be 0.01%. This likelihood can be customized via the experimental.clientRouterFilterAllowedRate option in next.config.js . It's important to note that lowering the false positive rate will increase the size of the generated filter in the client bundle. Alternatively, if you prefer to disable this handling completely and manage the routing between pages/ and app/ manually, you can set experimental.clientRouterFilter to false in next.config.js . When this feature is disabled, any dynamic routes in pages that overlap with app routes won't be navigated to properly by default."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming",
            "title": "Routing: Loading UI and Streaming | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The special file loading.js helps you create meaningful Loading UI with React Suspense . With this convention, you can show an instant loading state from the server while the content of a route segment loads. The new content is automatically swapped in once rendering is complete. An instant loading state is fallback UI that is shown immediately upon navigation. You can pre-render loading indicators such as skeletons and spinners, or a small but meaningful part of future screens such as a cover photo, title, etc. This helps users understand the app is responding and provides a better user experience. Create a loading state by adding a loading.js file inside a folder."
                },
                {
                    "type": "code",
                    "code": "export default function Loading () { // You can add any UI inside Loading, including a Skeleton. return < LoadingSkeleton /> }"
                },
                {
                    "type": "p",
                    "text": "In the same folder, loading.js will be nested inside layout.js . It will automatically wrap the page.js file and any children below in a <Suspense> boundary."
                },
                {
                    "type": "list",
                    "items": [
                        "Navigation is immediate, even with server-centric routing .",
                        "Navigation is interruptible, meaning changing routes does not need to wait for the content of the route to fully load before navigating to another route.",
                        "Shared layouts remain interactive while new route segments load."
                    ]
                },
                {
                    "type": "p",
                    "text": "Recommendation: Use the loading.js convention for route segments (layouts and pages) as Next.js optimizes this functionality. In addition to loading.js , you can also manually create Suspense Boundaries for your own UI components. The App Router supports streaming with Suspense for both Node.js and Edge runtimes ."
                },
                {
                    "type": "list",
                    "items": [
                        "Some browsers buffer a streaming response. You may not see the streamed response until the response exceeds 1024 bytes. This typically only affects “hello world” applications, but not real applications."
                    ]
                },
                {
                    "type": "p",
                    "text": "To learn how Streaming works in React and Next.js, it's helpful to understand Server-Side Rendering (SSR) and its limitations. With SSR, there's a series of steps that need to be completed before a user can see and interact with a page:"
                },
                {
                    "type": "list",
                    "items": [
                        "First, all data for a given page is fetched on the server.",
                        "The server then renders the HTML for the page.",
                        "The HTML, CSS, and JavaScript for the page are sent to the client.",
                        "A non-interactive user interface is shown using the generated HTML, and CSS.",
                        "Finally, React hydrates the user interface to make it interactive."
                    ]
                },
                {
                    "type": "p",
                    "text": "These steps are sequential and blocking, meaning the server can only render the HTML for a page once all the data has been fetched. And, on the client, React can only hydrate the UI once the code for all components in the page has been downloaded. SSR with React and Next.js helps improve the perceived loading performance by showing a non-interactive page to the user as soon as possible. However, it can still be slow as all data fetching on server needs to be completed before the page can be shown to the user. Streaming allows you to break down the page's HTML into smaller chunks and progressively send those chunks from the server to the client. This enables parts of the page to be displayed sooner, without waiting for all the data to load before any UI can be rendered. Streaming works well with React's component model because each component can be considered a chunk. Components that have higher priority (e.g. product information) or that don't rely on data can be sent first (e.g. layout), and React can start hydration earlier. Components that have lower priority (e.g. reviews, related products) can be sent in the same server request after their data has been fetched. Streaming is particularly beneficial when you want to prevent long data requests from blocking the page from rendering as it can reduce the Time To First Byte (TTFB) and First Contentful Paint (FCP) . It also helps improve Time to Interactive (TTI) , especially on slower devices. <Suspense> works by wrapping a component that performs an asynchronous action (e.g. fetch data), showing fallback UI (e.g. skeleton, spinner) while it's happening, and then swapping in your component once the action completes."
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from 'react' import { PostFeed , Weather } from './Components' export default function Posts () { return ( < section > < Suspense fallback = {< p >Loading feed...</ p >}> < PostFeed /> </ Suspense > < Suspense fallback = {< p >Loading weather...</ p >}> < Weather /> </ Suspense > </ section > ) }"
                },
                {
                    "type": "p",
                    "text": "By using Suspense, you get the benefits of:"
                },
                {
                    "type": "list",
                    "items": [
                        "Streaming Server Rendering - Progressively rendering HTML from the server to the client.",
                        "Selective Hydration - React prioritizes what components to make interactive first based on user interaction."
                    ]
                },
                {
                    "type": "p",
                    "text": "For more Suspense examples and use cases, please see the React Documentation ."
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js will wait for data fetching inside generateMetadata to complete before streaming UI to the client. This guarantees the first part of a streamed response includes <head> tags.",
                        "Since streaming is server-rendered, it does not impact SEO. You can use the Rich Results Test tool from Google to see how your page appears to Google's web crawlers and view the serialized HTML ( source )."
                    ]
                },
                {
                    "type": "p",
                    "text": "When streaming, a 200 status code will be returned to signal that the request was successful. The server can still communicate errors or issues to the client within the streamed content itself, for example, when using redirect or notFound . Since the response headers have already been sent to the client, the status code of the response cannot be updated. This does not affect SEO."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/middleware",
            "title": "Routing: Middleware | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Middleware allows you to run code before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly. Middleware runs before cached content and routes are matched. See Matching Paths for more details. Integrating Middleware into your application can lead to significant improvements in performance, security, and user experience. Some common scenarios where Middleware is particularly effective include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Authentication and Authorization: Ensure user identity and check session cookies before granting access to specific pages or API routes.",
                        "Server-Side Redirects: Redirect users at the server level based on certain conditions (e.g., locale, user role).",
                        "Path Rewriting: Support A/B testing, feature rollouts, or legacy paths by dynamically rewriting paths to API routes or pages based on request properties.",
                        "Bot Detection: Protect your resources by detecting and blocking bot traffic.",
                        "Logging and Analytics: Capture and analyze request data for insights before processing by the page or API.",
                        "Feature Flagging: Enable or disable features dynamically for seamless feature rollouts or testing."
                    ]
                },
                {
                    "type": "p",
                    "text": "Recognizing situations where middleware may not be the optimal approach is just as crucial. Here are some scenarios to be mindful of:"
                },
                {
                    "type": "list",
                    "items": [
                        "Complex Data Fetching and Manipulation: Middleware is not designed for direct data fetching or manipulation, this should be done within Route Handlers or server-side utilities instead.",
                        "Heavy Computational Tasks: Middleware should be lightweight and respond quickly or it can cause delays in page load. Heavy computational tasks or long-running processes should be done within dedicated Route Handlers.",
                        "Extensive Session Management: While Middleware can manage basic session tasks, extensive session management should be managed by dedicated authentication services or within Route Handlers.",
                        "Direct Database Operations: Performing direct database operations within Middleware is not recommended. Database interactions should be done within Route Handlers or server-side utilities."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the file middleware.ts (or .js ) in the root of your project to define Middleware. For example, at the same level as pages or app , or inside src if applicable. Note : While only one middleware.ts file is supported per project, you can still organize your middleware logic modularly. Break out middleware functionalities into separate .ts or .js files and import them into your main middleware.ts file. This allows for cleaner management of route-specific middleware, aggregated in the middleware.ts for centralized control. By enforcing a single middleware file, it simplifies configuration, prevents potential conflicts, and optimizes performance by avoiding multiple middleware layers."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest } from 'next/server' // This function can be marked `async` if using `await` inside export function middleware (request : NextRequest ) { return NextResponse .redirect ( new URL ( '/home' , request .url)) } // See \"Matching Paths\" below to learn more export const config = { matcher : '/about/:path*' , }"
                },
                {
                    "type": "p",
                    "text": "Middleware will be invoked for every route in your project . Given this, it's crucial to use matchers to precisely target or exclude specific routes. The following is the execution order:"
                },
                {
                    "type": "list",
                    "items": [
                        "headers from next.config.js",
                        "redirects from next.config.js",
                        "Middleware ( rewrites , redirects , etc.)",
                        "beforeFiles ( rewrites ) from next.config.js",
                        "Filesystem routes ( public/ , _next/static/ , pages/ , app/ , etc.)",
                        "afterFiles ( rewrites ) from next.config.js",
                        "Dynamic Routes ( /blog/[slug] )",
                        "fallback ( rewrites ) from next.config.js"
                    ]
                },
                {
                    "type": "p",
                    "text": "There are two ways to define which paths Middleware will run on:"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom matcher config",
                        "Conditional statements"
                    ]
                },
                {
                    "type": "p",
                    "text": "matcher allows you to filter Middleware to run on specific paths."
                },
                {
                    "type": "code",
                    "code": "export const config = { matcher : '/about/:path*' , }"
                },
                {
                    "type": "p",
                    "text": "You can match a single path or multiple paths with an array syntax:"
                },
                {
                    "type": "code",
                    "code": "export const config = { matcher : [ '/about/:path*' , '/dashboard/:path*' ] , }"
                },
                {
                    "type": "p",
                    "text": "The matcher config allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:"
                },
                {
                    "type": "code",
                    "code": "export const config = { matcher : [ /* * Match all request paths except for the ones starting with: * - api (API routes) * - _next/static (static files) * - _next/image (image optimization files) * - favicon.ico, sitemap.xml, robots.txt (metadata files) */ '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)' , ] , }"
                },
                {
                    "type": "p",
                    "text": "You can also bypass Middleware for certain requests by using the missing or has arrays, or a combination of both:"
                },
                {
                    "type": "code",
                    "code": "export const config = { matcher : [ /* * Match all request paths except for the ones starting with: * - api (API routes) * - _next/static (static files) * - _next/image (image optimization files) * - favicon.ico, sitemap.xml, robots.txt (metadata files) */ { source : '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)' , missing : [ { type : 'header' , key : 'next-router-prefetch' } , { type : 'header' , key : 'purpose' , value : 'prefetch' } , ] , } , { source : '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)' , has : [ { type : 'header' , key : 'next-router-prefetch' } , { type : 'header' , key : 'purpose' , value : 'prefetch' } , ] , } , { source : '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)' , has : [{ type : 'header' , key : 'x-present' }] , missing : [{ type : 'header' , key : 'x-missing' , value : 'prefetch' }] , } , ] , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : The matcher values need to be constants so they can be statically analyzed at build-time. Dynamic values such as variables will be ignored."
                },
                {
                    "type": "list",
                    "items": [
                        "MUST start with /",
                        "Can include named parameters: /about/:path matches /about/a and /about/b but not /about/a/c",
                        "Can have modifiers on named parameters (starting with : ): /about/:path* matches /about/a/b/c because * is zero or more . ? is zero or one and + one or more",
                        "Can use regular expression enclosed in parenthesis: /about/(.*) is the same as /about/:path*"
                    ]
                },
                {
                    "type": "p",
                    "text": "Read more details on path-to-regexp documentation. Good to know : For backward compatibility, Next.js always considers /public as /public/index . Therefore, a matcher of /public/:path will match."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest } from 'next/server' export function middleware (request : NextRequest ) { if ( request . nextUrl . pathname .startsWith ( '/about' )) { return NextResponse .rewrite ( new URL ( '/about-2' , request .url)) } if ( request . nextUrl . pathname .startsWith ( '/dashboard' )) { return NextResponse .rewrite ( new URL ( '/dashboard/user' , request .url)) } }"
                },
                {
                    "type": "p",
                    "text": "The NextResponse API allows you to:"
                },
                {
                    "type": "list",
                    "items": [
                        "redirect the incoming request to a different URL",
                        "rewrite the response by displaying a given URL",
                        "Set request headers for API Routes, getServerSideProps , and rewrite destinations",
                        "Set response cookies",
                        "Set response headers"
                    ]
                },
                {
                    "type": "p",
                    "text": "To produce a response from Middleware, you can:"
                },
                {
                    "type": "list",
                    "items": [
                        "rewrite to a route ( Page or Route Handler ) that produces a response",
                        "return a NextResponse directly. See Producing a Response"
                    ]
                },
                {
                    "type": "p",
                    "text": "Cookies are regular headers. On a Request , they are stored in the Cookie header. On a Response they are in the Set-Cookie header. Next.js provides a convenient way to access and manipulate these cookies through the cookies extension on NextRequest and NextResponse ."
                },
                {
                    "type": "list",
                    "items": [
                        "For incoming requests, cookies comes with the following methods: get , getAll , set , and delete cookies. You can check for the existence of a cookie with has or remove all cookies with clear .",
                        "For outgoing responses, cookies have the following methods get , getAll , set , and delete ."
                    ]
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest } from 'next/server' export function middleware (request : NextRequest ) { // Assume a \"Cookie:nextjs=fast\" header to be present on the incoming request // Getting cookies from the request using the `RequestCookies` API let cookie = request . cookies .get ( 'nextjs' ) console .log (cookie) // => { name: 'nextjs', value: 'fast', Path: '/' } const allCookies = request . cookies .getAll () console .log (allCookies) // => [{ name: 'nextjs', value: 'fast' }] request . cookies .has ( 'nextjs' ) // => true request . cookies .delete ( 'nextjs' ) request . cookies .has ( 'nextjs' ) // => false // Setting cookies on the response using the `ResponseCookies` API const response = NextResponse .next () response . cookies .set ( 'vercel' , 'fast' ) response . cookies .set ({ name : 'vercel' , value : 'fast' , path : '/' , }) cookie = response . cookies .get ( 'vercel' ) console .log (cookie) // => { name: 'vercel', value: 'fast', Path: '/' } // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header. return response }"
                },
                {
                    "type": "p",
                    "text": "You can set request and response headers using the NextResponse API (setting request headers is available since Next.js v13.0.0)."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest } from 'next/server' export function middleware (request : NextRequest ) { // Clone the request headers and set a new header `x-hello-from-middleware1` const requestHeaders = new Headers ( request .headers) requestHeaders .set ( 'x-hello-from-middleware1' , 'hello' ) // You can also set request headers in NextResponse.next const response = NextResponse .next ({ request : { // New request headers headers : requestHeaders , } , }) // Set a new response header `x-hello-from-middleware2` response . headers .set ( 'x-hello-from-middleware2' , 'hello' ) return response }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Avoid setting large headers as it might cause 431 Request Header Fields Too Large error depending on your backend web server configuration. You can set CORS headers in Middleware to allow cross-origin requests, including simple and preflighted requests."
                },
                {
                    "type": "code",
                    "code": "import { NextRequest , NextResponse } from 'next/server' const allowedOrigins = [ 'https://acme.com' , 'https://my-app.org' ] const corsOptions = { 'Access-Control-Allow-Methods' : 'GET, POST, PUT, DELETE, OPTIONS' , 'Access-Control-Allow-Headers' : 'Content-Type, Authorization' , } export function middleware (request : NextRequest ) { // Check the origin from the request const origin = request . headers .get ( 'origin' ) ?? '' const isAllowedOrigin = allowedOrigins .includes (origin) // Handle preflighted requests const isPreflight = request .method === 'OPTIONS' if (isPreflight) { const preflightHeaders = { ... (isAllowedOrigin && { 'Access-Control-Allow-Origin' : origin }) , ... corsOptions , } return NextResponse .json ({} , { headers : preflightHeaders }) } // Handle simple requests const response = NextResponse .next () if (isAllowedOrigin) { response . headers .set ( 'Access-Control-Allow-Origin' , origin) } Object .entries (corsOptions) .forEach (([key , value]) => { response . headers .set (key , value) }) return response } export const config = { matcher : '/api/:path*' , }"
                },
                {
                    "type": "p",
                    "text": "Good to know: You can configure CORS headers for individual routes in Route Handlers . You can respond from Middleware directly by returning a Response or NextResponse instance. (This is available since Next.js v13.1.0 )"
                },
                {
                    "type": "code",
                    "code": "import type { NextRequest } from 'next/server' import { isAuthenticated } from '@lib/auth' // Limit the middleware to paths starting with `/api/` export const config = { matcher : '/api/:function*' , } export function middleware (request : NextRequest ) { // Call our authentication function to check the request if ( ! isAuthenticated (request)) { // Respond with JSON indicating an error message return Response .json ( { success : false , message : 'authentication failed' } , { status : 401 } ) } }"
                },
                {
                    "type": "p",
                    "text": "The NextFetchEvent object extends the native FetchEvent object, and includes the waitUntil() method. The waitUntil() method takes a promise as an argument, and extends the lifetime of the Middleware until the promise settles. This is useful for performing work in the background."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextFetchEvent , NextRequest } from 'next/server' export function middleware (req : NextRequest , event : NextFetchEvent ) { event .waitUntil ( fetch ( 'https://my-analytics-platform.com' , { method : 'POST' , body : JSON .stringify ({ pathname : req . nextUrl .pathname }) , }) ) return NextResponse .next () }"
                },
                {
                    "type": "p",
                    "text": "In v13.1 of Next.js two additional flags were introduced for middleware, skipMiddlewareUrlNormalize and skipTrailingSlashRedirect to handle advanced use cases. skipTrailingSlashRedirect disables Next.js redirects for adding or removing trailing slashes. This allows custom handling inside middleware to maintain the trailing slash for some paths but not others, which can make incremental migrations easier."
                },
                {
                    "type": "code",
                    "code": "module . exports = { skipTrailingSlashRedirect : true , }"
                },
                {
                    "type": "code",
                    "code": "const legacyPrefixes = [ '/docs' , '/blog' ] export default async function middleware (req) { const { pathname } = req .nextUrl if ( legacyPrefixes .some ((prefix) => pathname .startsWith (prefix))) { return NextResponse .next () } // apply trailing slash handling if ( ! pathname .endsWith ( '/' ) && ! pathname .match ( /((?!\\.well-known(?:\\/. * ) ? )(?:[ ^ /] + \\/) * [ ^ /] + \\.\\w + )/ ) ) { return NextResponse .redirect ( new URL ( ` ${ req . nextUrl .pathname } /` , req .nextUrl) ) } }"
                },
                {
                    "type": "p",
                    "text": "skipMiddlewareUrlNormalize allows for disabling the URL normalization in Next.js to make handling direct visits and client-transitions the same. In some advanced cases, this option provides full control by using the original URL."
                },
                {
                    "type": "code",
                    "code": "module . exports = { skipMiddlewareUrlNormalize : true , }"
                },
                {
                    "type": "code",
                    "code": "export default async function middleware (req) { const { pathname } = req .nextUrl // GET /_next/data/build-id/hello.json console .log (pathname) // with the flag this now /_next/data/build-id/hello.json // without the flag this would be normalized to /hello }"
                },
                {
                    "type": "p",
                    "text": "Starting in Next.js 15.1, the next/experimental/testing/server package contains utilities to help unit test middleware files. Unit testing middleware can help ensure that it's only run on desired paths and that custom routing logic works as intended before code reaches production. The unstable_doesMiddlewareMatch function can be used to assert whether middleware will run for the provided URL, headers, and cookies."
                },
                {
                    "type": "code",
                    "code": "import { unstable_doesMiddlewareMatch } from 'next/experimental/testing/server' expect ( unstable_doesMiddlewareMatch ({ config , nextConfig , url : '/test' , }) ) .toEqual ( false )"
                },
                {
                    "type": "p",
                    "text": "The entire middleware function can also be tested."
                },
                {
                    "type": "code",
                    "code": "import { isRewrite , getRewrittenUrl } from 'next/experimental/testing/server' const request = new NextRequest ( 'https://nextjs.org/docs' ) const response = await middleware (request) expect ( isRewrite (response)) .toEqual ( true ) expect ( getRewrittenUrl (response)) .toEqual ( 'https://other-domain.com/docs' ) // getRedirectUrl could also be used if the response were a redirect"
                },
                {
                    "type": "p",
                    "text": "Middleware currently only supports APIs compatible with the Edge runtime . APIs exclusive to Node.js are unsupported ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/parallel-routes",
            "title": "Routing: Parallel Routes | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Parallel Routes allows you to simultaneously or conditionally render one or more pages within the same layout. They are useful for highly dynamic sections of an app, such as dashboards and feeds on social sites. For example, considering a dashboard, you can use parallel routes to simultaneously render the team and analytics pages: Parallel routes are created using named slots . Slots are defined with the @folder convention. For example, the following file structure defines two slots: @analytics and @team : Slots are passed as props to the shared parent layout. For the example above, the component in app/layout.js now accepts the @analytics and @team slots props, and can render them in parallel alongside the children prop:"
                },
                {
                    "type": "code",
                    "code": "export default function Layout ({ children , team , analytics , } : { children : React . ReactNode analytics : React . ReactNode team : React . ReactNode }) { return ( <> {children} {team} {analytics} </> ) }"
                },
                {
                    "type": "p",
                    "text": "However, slots are not route segments and do not affect the URL structure. For example, for /@analytics/views , the URL will be /views since @analytics is a slot. Slots are combined with the regular Page component to form the final page associated with the route segment. Because of this, you cannot have separate static and dynamic slots at the same route segment level. If one slot is dynamic, all slots at that level must be dynamic."
                },
                {
                    "type": "list",
                    "items": [
                        "The children prop is an implicit slot that does not need to be mapped to a folder. This means app/page.js is equivalent to app/@children/page.js ."
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, Next.js keeps track of the active state (or subpage) for each slot. However, the content rendered within a slot will depend on the type of navigation:"
                },
                {
                    "type": "list",
                    "items": [
                        "Soft Navigation : During client-side navigation, Next.js will perform a partial render , changing the subpage within the slot, while maintaining the other slot's active subpages, even if they don't match the current URL.",
                        "Hard Navigation : After a full-page load (browser refresh), Next.js cannot determine the active state for the slots that don't match the current URL. Instead, it will render a default.js file for the unmatched slots, or 404 if default.js doesn't exist."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The 404 for unmatched routes helps ensure that you don't accidentally render a parallel route on a page that it was not intended for."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can define a default.js file to render as a fallback for unmatched slots during the initial load or full-page reload. Consider the following folder structure. The @team slot has a /settings page, but @analytics does not. When navigating to /settings , the @team slot will render the /settings page while maintaining the currently active page for the @analytics slot. On refresh, Next.js will render a default.js for @analytics . If default.js doesn't exist, a 404 is rendered instead. Additionally, since children is an implicit slot, you also need to create a default.js file to render a fallback for children when Next.js cannot recover the active state of the parent page. Both useSelectedLayoutSegment and useSelectedLayoutSegments accept a parallelRoutesKey parameter, which allows you to read the active route segment within a slot."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useSelectedLayoutSegment } from 'next/navigation' export default function Layout ({ auth } : { auth : React . ReactNode }) { const loginSegment = useSelectedLayoutSegment ( 'auth' ) // ... }"
                },
                {
                    "type": "p",
                    "text": "When a user navigates to app/@auth/login (or /login in the URL bar), loginSegment will be equal to the string \"login\" . You can use Parallel Routes to conditionally render routes based on certain conditions, such as user role. For example, to render a different dashboard page for the /admin or /user roles:"
                },
                {
                    "type": "code",
                    "code": "import { checkUserRole } from '@/lib/auth' export default function Layout ({ user , admin , } : { user : React . ReactNode admin : React . ReactNode }) { const role = checkUserRole () return role === 'admin' ? admin : user }"
                },
                {
                    "type": "p",
                    "text": "You can add a layout inside a slot to allow users to navigate the slot independently. This is useful for creating tabs. For example, the @analytics slot has two subpages: /page-views and /visitors . Within @analytics , create a layout file to share the tabs between the two pages:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Layout ({ children } : { children : React . ReactNode }) { return ( <> < nav > < Link href = \"/page-views\" >Page Views</ Link > < Link href = \"/visitors\" >Visitors</ Link > </ nav > < div >{children}</ div > </> ) }"
                },
                {
                    "type": "p",
                    "text": "Parallel Routes can be used together with Intercepting Routes to create modals that support deep linking. This allows you to solve common challenges when building modals, such as:"
                },
                {
                    "type": "list",
                    "items": [
                        "Making the modal content shareable through a URL .",
                        "Preserving context when the page is refreshed, instead of closing the modal.",
                        "Closing the modal on backwards navigation rather than going to the previous route.",
                        "Reopening the modal on forwards navigation ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Consider the following UI pattern, where a user can open a login modal from a layout using client-side navigation, or access a separate /login page: To implement this pattern, start by creating a /login route that renders your main login page."
                },
                {
                    "type": "code",
                    "code": "import { Login } from '@/app/ui/ login ' export default function Page () { return < Login /> }"
                },
                {
                    "type": "p",
                    "text": "Then, inside the @auth slot, add default.js file that returns null . This ensures that the modal is not rendered when it's not active."
                },
                {
                    "type": "code",
                    "code": "export default function Default () { return null }"
                },
                {
                    "type": "p",
                    "text": "Inside your @auth slot, intercept the /login route by updating the /(.)login folder. Import the <Modal> component and its children into the /(.)login/page.tsx file:"
                },
                {
                    "type": "code",
                    "code": "import { Modal } from '@/app/ui/modal' import { Login } from '@/app/ui/login' export default function Page () { return ( < Modal > < Login /> </ Modal > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "The convention used to intercept the route, e.g. (.) , depends on your file-system structure. See Intercepting Routes convention .",
                        "By separating the <Modal> functionality from the modal content ( <Login> ), you can ensure any content inside the modal, e.g. forms , are Server Components. See Interleaving Client and Server Components for more information."
                    ]
                },
                {
                    "type": "p",
                    "text": "Now, you can leverage the Next.js router to open and close the modal. This ensures the URL is correctly updated when the modal is open, and when navigating backwards and forwards. To open the modal, pass the @auth slot as a prop to the parent layout and render it alongside the children prop."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Layout ({ auth , children , } : { auth : React . ReactNode children : React . ReactNode }) { return ( <> < nav > < Link href = \"/login\" >Open modal</ Link > </ nav > < div >{auth}</ div > < div >{children}</ div > </> ) }"
                },
                {
                    "type": "p",
                    "text": "When the user clicks the <Link> , the modal will open instead of navigating to the /login page. However, on refresh or initial load, navigating to /login will take the user to the main login page. You can close the modal by calling router.back() or by using the Link component."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useRouter } from 'next/navigation' export function Modal ({ children } : { children : React . ReactNode }) { const router = useRouter () return ( <> < button onClick = {() => { router .back () }} > Close modal </ button > < div >{children}</ div > </> ) }"
                },
                {
                    "type": "p",
                    "text": "When using the Link component to navigate away from a page that shouldn't render the @auth slot anymore, we need to make sure the parallel route matches to a component that returns null . For example, when navigating back to the root page, we create a @auth/page.tsx component:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export function Modal ({ children } : { children : React . ReactNode }) { return ( <> < Link href = \"/\" >Close modal</ Link > < div >{children}</ div > </> ) }"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { return null }"
                },
                {
                    "type": "p",
                    "text": "Or if navigating to any other page (such as /foo , /foo/bar , etc), you can use a catch-all slot:"
                },
                {
                    "type": "code",
                    "code": "export default function CatchAll () { return null }"
                },
                {
                    "type": "list",
                    "items": [
                        "We use a catch-all route in our @auth slot to close the modal because of the behavior described in Active state and navigation . Since client-side navigations to a route that no longer match the slot will remain visible, we need to match the slot to a route that returns null to close the modal.",
                        "Other examples could include opening a photo modal in a gallery while also having a dedicated /photo/[id] page, or opening a shopping cart in a side modal.",
                        "View an example of modals with Intercepted and Parallel Routes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Parallel Routes can be streamed independently, allowing you to define independent error and loading states for each route: See the Loading UI and Error Handling documentation for more information."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/redirecting",
            "title": "Routing: Redirecting | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "There are a few ways you can handle redirects in Next.js. This page will go through each available option, use cases, and how to manage large numbers of redirects. The redirect function allows you to redirect the user to another URL. You can call redirect in Server Components , Route Handlers , and Server Actions . redirect is often used after a mutation or event. For example, creating a post:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { redirect } from 'next/navigation' import { revalidatePath } from 'next/cache' export async function createPost (id : string ) { try { // Call database } catch (error) { // Handle errors } revalidatePath ( '/posts' ) // Update cached posts redirect ( `/post/ ${ id } ` ) // Navigate to the new post page }"
                },
                {
                    "type": "list",
                    "items": [
                        "redirect returns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.",
                        "redirect internally throws an error so it should be called outside of try/catch blocks.",
                        "redirect can be called in Client Components during the rendering process but not in event handlers. You can use the useRouter hook instead.",
                        "redirect also accepts absolute URLs and can be used to redirect to external links.",
                        "If you'd like to redirect before the render process, use next.config.js or Middleware ."
                    ]
                },
                {
                    "type": "p",
                    "text": "See the redirect API reference for more information. The permanentRedirect function allows you to permanently redirect the user to another URL. You can call permanentRedirect in Server Components , Route Handlers , and Server Actions . permanentRedirect is often used after a mutation or event that changes an entity's canonical URL, such as updating a user's profile URL after they change their username:"
                },
                {
                    "type": "code",
                    "code": "'use server' import { permanentRedirect } from 'next/navigation' import { revalidateTag } from 'next/cache' export async function updateUsername (username : string , formData : FormData ) { try { // Call database } catch (error) { // Handle errors } revalidateTag ( 'username' ) // Update all references to the username permanentRedirect ( `/profile/ ${ username } ` ) // Navigate to the new user profile }"
                },
                {
                    "type": "list",
                    "items": [
                        "permanentRedirect returns a 308 (permanent redirect) status code by default.",
                        "permanentRedirect also accepts absolute URLs and can be used to redirect to external links.",
                        "If you'd like to redirect before the render process, use next.config.js or Middleware ."
                    ]
                },
                {
                    "type": "p",
                    "text": "See the permanentRedirect API reference for more information. If you need to redirect inside an event handler in a Client Component, you can use the push method from the useRouter hook. For example:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { useRouter } from 'next/navigation' export default function Page () { const router = useRouter () return ( < button type = \"button\" onClick = {() => router .push ( '/dashboard' )}> Dashboard </ button > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "If you don't need to programmatically navigate a user, you should use a <Link> component."
                    ]
                },
                {
                    "type": "p",
                    "text": "See the useRouter API reference for more information. The redirects option in the next.config.js file allows you to redirect an incoming request path to a different destination path. This is useful when you change the URL structure of pages or have a list of redirects that are known ahead of time. redirects supports path , header, cookie, and query matching , giving you the flexibility to redirect users based on an incoming request. To use redirects , add the option to your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { async redirects () { return [ // Basic redirect { source : '/about' , destination : '/' , permanent : true , } , // Wildcard path matching { source : '/blog/:slug' , destination : '/news/:slug' , permanent : true , } , ] } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "See the redirects API reference for more information."
                },
                {
                    "type": "list",
                    "items": [
                        "redirects can return a 307 (Temporary Redirect) or 308 (Permanent Redirect) status code with the permanent option.",
                        "redirects may have a limit on platforms. For example, on Vercel, there's a limit of 1,024 redirects. To manage a large number of redirects (1000+), consider creating a custom solution using Middleware . See managing redirects at scale for more.",
                        "redirects runs before Middleware."
                    ]
                },
                {
                    "type": "p",
                    "text": "Middleware allows you to run code before a request is completed. Then, based on the incoming request, redirect to a different URL using NextResponse.redirect . This is useful if you want to redirect users based on a condition (e.g. authentication, session management, etc) or have a large number of redirects . For example, to redirect the user to a /login page if they are not authenticated:"
                },
                {
                    "type": "code",
                    "code": "import { NextResponse , NextRequest } from 'next/server' import { authenticate } from 'auth-provider' export function middleware (request : NextRequest ) { const isAuthenticated = authenticate (request) // If the user is authenticated, continue as normal if (isAuthenticated) { return NextResponse .next () } // Redirect to login page if not authenticated return NextResponse .redirect ( new URL ( '/login' , request .url)) } export const config = { matcher : '/dashboard/:path*' , }"
                },
                {
                    "type": "list",
                    "items": [
                        "Middleware runs after redirects in next.config.js and before rendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "See the Middleware documentation for more information. To manage a large number of redirects (1000+), you may consider creating a custom solution using Middleware. This allows you to handle redirects programmatically without having to redeploy your application. To do this, you'll need to consider:"
                },
                {
                    "type": "list",
                    "items": [
                        "Creating and storing a redirect map.",
                        "Optimizing data lookup performance."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js Example : See our Middleware with Bloom filter example for an implementation of the recommendations below. A redirect map is a list of redirects that you can store in a database (usually a key-value store) or JSON file."
                },
                {
                    "type": "code",
                    "code": "{ \"/old\" : { \"destination\" : \"/new\" , \"permanent\" : true } , \"/blog/post-old\" : { \"destination\" : \"/blog/post-new\" , \"permanent\" : true } }"
                },
                {
                    "type": "p",
                    "text": "In Middleware , you can read from a database such as Vercel's Edge Config or Redis , and redirect the user based on the incoming request:"
                },
                {
                    "type": "code",
                    "code": "import { NextResponse , NextRequest } from 'next/server' import { get } from '@vercel/edge-config' type RedirectEntry = { destination : string permanent : boolean } export async function middleware (request : NextRequest ) { const pathname = request . nextUrl .pathname const redirectData = await get (pathname) if (redirectData && typeof redirectData === 'string' ) { const redirectEntry : RedirectEntry = JSON .parse (redirectData) const statusCode = redirectEntry .permanent ? 308 : 307 return NextResponse .redirect ( redirectEntry .destination , statusCode) } // No redirect found, continue without redirecting return NextResponse .next () }"
                },
                {
                    "type": "p",
                    "text": "Reading a large dataset for every incoming request can be slow and expensive. There are two ways you can optimize data lookup performance:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use a database that is optimized for fast reads, such as Vercel Edge Config or Redis .",
                        "Use a data lookup strategy such as a Bloom filter to efficiently check if a redirect exists before reading the larger redirects file or database."
                    ]
                },
                {
                    "type": "p",
                    "text": "Considering the previous example, you can import a generated bloom filter file into Middleware, then, check if the incoming request pathname exists in the bloom filter. If it does, forward the request to a Route Handler which will check the actual file and redirect the user to the appropriate URL. This avoids importing a large redirects file into Middleware, which can slow down every incoming request."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse , NextRequest } from 'next/server' import { ScalableBloomFilter } from 'bloom-filters' import GeneratedBloomFilter from './redirects/bloom-filter.json' type RedirectEntry = { destination : string permanent : boolean } // Initialize bloom filter from a generated JSON file const bloomFilter = ScalableBloomFilter .fromJSON (GeneratedBloomFilter as any ) export async function middleware (request : NextRequest ) { // Get the path for the incoming request const pathname = request . nextUrl .pathname // Check if the path is in the bloom filter if ( bloomFilter .has (pathname)) { // Forward the pathname to the Route Handler const api = new URL ( `/api/redirects?pathname= ${ encodeURIComponent ( request . nextUrl .pathname) } ` , request . nextUrl .origin ) try { // Fetch redirect data from the Route Handler const redirectData = await fetch (api) if ( redirectData .ok) { const redirectEntry : RedirectEntry | undefined = await redirectData .json () if (redirectEntry) { // Determine the status code const statusCode = redirectEntry .permanent ? 308 : 307 // Redirect to the destination return NextResponse .redirect ( redirectEntry .destination , statusCode) } } } catch (error) { console .error (error) } } // No redirect found, continue the request without redirecting return NextResponse .next () }"
                },
                {
                    "type": "code",
                    "code": "import { NextRequest , NextResponse } from 'next/server' import redirects from '@/app/redirects/redirects.json' type RedirectEntry = { destination : string permanent : boolean } export function GET (request : NextRequest ) { const pathname = request . nextUrl . searchParams .get ( 'pathname' ) if ( ! pathname) { return new Response ( 'Bad Request' , { status : 400 }) } // Get the redirect entry from the redirects.json file const redirect = (redirects as Record < string , RedirectEntry >)[pathname] // Account for bloom filter false positives if ( ! redirect) { return new Response ( 'No redirect' , { status : 400 }) } // Return the redirect entry return NextResponse .json (redirect) }"
                },
                {
                    "type": "list",
                    "items": [
                        "To generate a bloom filter, you can use a library like bloom-filters .",
                        "You should validate requests made to your Route Handler to prevent malicious requests."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups",
            "title": "Routing: Route Groups | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "In the app directory, nested folders are normally mapped to URL paths. However, you can mark a folder as a Route Group to prevent the folder from being included in the route's URL path. This allows you to organize your route segments and project files into logical groups without affecting the URL path structure."
                },
                {
                    "type": "list",
                    "items": [
                        "Organizing routes into groups e.g. by site section, intent, or team.",
                        "Enabling nested layouts in the same route segment level: Creating multiple nested layouts in the same segment, including multiple root layouts Adding a layout to a subset of routes in a common segment",
                        "Creating multiple nested layouts in the same segment, including multiple root layouts",
                        "Adding a layout to a subset of routes in a common segment",
                        "Adding a loading skeleton to specific route in a common segment"
                    ]
                },
                {
                    "type": "p",
                    "text": "A route group can be created by wrapping a folder's name in parenthesis: (folderName) To organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g. (marketing) or (shop) . Even though routes inside (marketing) and (shop) share the same URL hierarchy, you can create a different layout for each group by adding a layout.js file inside their folders. To opt specific routes into a layout, create a new route group (e.g. (shop) ) and move the routes that share the same layout into the group (e.g. account and cart ). The routes outside of the group will not share the layout (e.g. checkout ). To apply a loading skeleton via a loading.js file to a specific route, create a new route group (e.g., /(overview) ) and then move your loading.tsx inside that route group. Now, the loading.tsx file will only apply to your dashboard → overview page instead of all your dashboard pages without affecting the URL path structure. To create multiple root layouts , remove the top-level layout.js file, and add a layout.js file inside each route group. This is useful for partitioning an application into sections that have a completely different UI or experience. The <html> and <body> tags need to be added to each root layout. In the example above, both (marketing) and (shop) have their own root layout."
                },
                {
                    "type": "list",
                    "items": [
                        "The naming of route groups has no special significance other than for organization. They do not affect the URL path.",
                        "Routes that include a route group should not resolve to the same URL path as other routes. For example, since route groups don't affect URL structure, (marketing)/about/page.js and (shop)/about/page.js would both resolve to /about and cause an error.",
                        "If you use multiple root layouts without a top-level layout.js file, your home page.js file should be defined in one of the route groups, For example: app/(marketing)/page.js .",
                        "Navigating across multiple root layouts will cause a full page load (as opposed to a client-side navigation). For example, navigating from /cart that uses app/(shop)/layout.js to /blog that uses app/(marketing)/layout.js will cause a full page load. This only applies to multiple root layouts."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/route-handlers",
            "title": "Routing: Route Handlers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Route Handlers allow you to create custom request handlers for a given route using the Web Request and Response APIs. Good to know : Route Handlers are only available inside the app directory. They are the equivalent of API Routes inside the pages directory meaning you do not need to use API Routes and Route Handlers together. Route Handlers are defined in a route.js|ts file inside the app directory:"
                },
                {
                    "type": "code",
                    "code": "export async function GET (request : Request ) {}"
                },
                {
                    "type": "p",
                    "text": "Route Handlers can be nested anywhere inside the app directory, similar to page.js and layout.js . But there cannot be a route.js file at the same route segment level as page.js . The following HTTP methods are supported: GET , POST , PUT , PATCH , DELETE , HEAD , and OPTIONS . If an unsupported method is called, Next.js will return a 405 Method Not Allowed response. In addition to supporting the native Request and Response APIs, Next.js extends them with NextRequest and NextResponse to provide convenient helpers for advanced use cases. Route Handlers are not cached by default. You can, however, opt into caching for GET methods. Other supported HTTP methods are not cached. To cache a GET method, use a route config option such as export const dynamic = 'force-static' in your Route Handler file."
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'force-static' export async function GET () { const res = await fetch ( 'https://data.mongodb-api.com/...' , { headers : { 'Content-Type' : 'application/json' , 'API-Key' : process . env . DATA_API_KEY , } , }) const data = await res .json () return Response .json ({ data }) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Other supported HTTP methods are not cached, even if they are placed alongside a GET method that is cached, in the same file. Special Route Handlers like sitemap.ts , opengraph-image.tsx , and icon.tsx , and other metadata files remain static by default unless they use Dynamic APIs or dynamic config options. You can consider a route the lowest level routing primitive."
                },
                {
                    "type": "list",
                    "items": [
                        "They do not participate in layouts or client-side navigations like page .",
                        "There cannot be a route.js file at the same route as page.js ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each route.js or page.js file takes over all HTTP verbs for that route."
                },
                {
                    "type": "code",
                    "code": "export default function Page () { return < h1 >Hello , Next .js !</ h1 > } // ❌ Conflict // `app/route.ts` export async function POST (request : Request ) {}"
                },
                {
                    "type": "p",
                    "text": "The following examples show how to combine Route Handlers with other Next.js APIs and features. You can revalidate cached data using Incremental Static Regeneration (ISR):"
                },
                {
                    "type": "code",
                    "code": "export const revalidate = 60 export async function GET () { const data = await fetch ( 'https://api.vercel.app/blog' ) const posts = await data .json () return Response .json ( posts ) }"
                },
                {
                    "type": "p",
                    "text": "You can read or set cookies with cookies from next/headers . This server function can be called directly in a Route Handler, or nested inside of another function. Alternatively, you can return a new Response using the Set-Cookie header."
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' export async function GET (request : Request ) { const cookieStore = await cookies () const token = cookieStore .get ( 'token' ) return new Response ( 'Hello, Next.js!' , { status : 200 , headers : { 'Set-Cookie' : `token= ${ token .value } ` } , }) }"
                },
                {
                    "type": "p",
                    "text": "You can also use the underlying Web APIs to read cookies from the request ( NextRequest ):"
                },
                {
                    "type": "code",
                    "code": "import { type NextRequest } from 'next/server' export async function GET (request : NextRequest ) { const token = request . cookies .get ( 'token' ) }"
                },
                {
                    "type": "p",
                    "text": "You can read headers with headers from next/headers . This server function can be called directly in a Route Handler, or nested inside of another function. This headers instance is read-only. To set headers, you need to return a new Response with new headers ."
                },
                {
                    "type": "code",
                    "code": "import { headers } from 'next/headers' export async function GET (request : Request ) { const headersList = await headers () const referer = headersList .get ( 'referer' ) return new Response ( 'Hello, Next.js!' , { status : 200 , headers : { referer : referer } , }) }"
                },
                {
                    "type": "p",
                    "text": "You can also use the underlying Web APIs to read headers from the request ( NextRequest ):"
                },
                {
                    "type": "code",
                    "code": "import { type NextRequest } from 'next/server' export async function GET (request : NextRequest ) { const requestHeaders = new Headers ( request .headers) }"
                },
                {
                    "type": "code",
                    "code": "import { redirect } from 'next/navigation' export async function GET (request : Request ) { redirect ( 'https://nextjs.org/' ) }"
                },
                {
                    "type": "p",
                    "text": "Route Handlers can use Dynamic Segments to create request handlers from dynamic data."
                },
                {
                    "type": "code",
                    "code": "export async function GET ( request : Request , { params } : { params : Promise <{ slug : string }> } ) { const slug = ( await params).slug // 'a', 'b', or 'c' }"
                },
                {
                    "type": "p",
                    "text": "The request object passed to the Route Handler is a NextRequest instance, which has some additional convenience methods , including for more easily handling query parameters."
                },
                {
                    "type": "code",
                    "code": "import { type NextRequest } from 'next/server' export function GET (request : NextRequest ) { const searchParams = request . nextUrl .searchParams const query = searchParams .get ( 'query' ) // query is \"hello\" for / api /search?query=hello }"
                },
                {
                    "type": "p",
                    "text": "Streaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI, for AI-generated content. Learn more about the AI SDK ."
                },
                {
                    "type": "code",
                    "code": "import { openai } from '@ai-sdk/openai' import { StreamingTextResponse , streamText } from 'ai' export async function POST (req : Request ) { const { messages } = await req .json () const result = await streamText ({ model : openai ( 'gpt-4-turbo' ) , messages , }) return new StreamingTextResponse ( result .toAIStream ()) }"
                },
                {
                    "type": "p",
                    "text": "These abstractions use the Web APIs to create a stream. You can also use the underlying Web APIs directly."
                },
                {
                    "type": "code",
                    "code": "// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream function iteratorToStream (iterator : any ) { return new ReadableStream ({ async pull (controller) { const { value , done } = await iterator .next () if (done) { controller .close () } else { controller .enqueue (value) } } , }) } function sleep (time : number ) { return new Promise ((resolve) => { setTimeout (resolve , time) }) } const encoder = new TextEncoder () async function* makeIterator () { yield encoder .encode ( '<p>One</p>' ) await sleep ( 200 ) yield encoder .encode ( '<p>Two</p>' ) await sleep ( 200 ) yield encoder .encode ( '<p>Three</p>' ) } export async function GET () { const iterator = makeIterator () const stream = iteratorToStream (iterator) return new Response (stream) }"
                },
                {
                    "type": "p",
                    "text": "You can read the Request body using the standard Web API methods:"
                },
                {
                    "type": "code",
                    "code": "export async function POST (request : Request ) { const res = await request .json () return Response .json ({ res }) }"
                },
                {
                    "type": "p",
                    "text": "You can read the FormData using the request.formData() function:"
                },
                {
                    "type": "code",
                    "code": "export async function POST (request : Request ) { const formData = await request .formData () const name = formData .get ( 'name' ) const email = formData .get ( 'email' ) return Response .json ({ name , email }) }"
                },
                {
                    "type": "p",
                    "text": "Since formData data are all strings, you may want to use zod-form-data to validate the request and retrieve data in the format you prefer (e.g. number ). You can set CORS headers for a specific Route Handler using the standard Web API methods:"
                },
                {
                    "type": "code",
                    "code": "export async function GET (request : Request ) { return new Response ( 'Hello, Next.js!' , { status : 200 , headers : { 'Access-Control-Allow-Origin' : '*' , 'Access-Control-Allow-Methods' : 'GET, POST, PUT, DELETE, OPTIONS' , 'Access-Control-Allow-Headers' : 'Content-Type, Authorization' , } , }) }"
                },
                {
                    "type": "list",
                    "items": [
                        "To add CORS headers to multiple Route Handlers, you can use Middleware or the next.config.js file .",
                        "Alternatively, see our CORS example package."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can use a Route Handler to receive webhooks from third-party services:"
                },
                {
                    "type": "code",
                    "code": "export async function POST (request : Request ) { try { const text = await request .text () // Process the webhook payload } catch (error) { return new Response ( `Webhook error: ${ error .message } ` , { status : 400 , }) } return new Response ( 'Success!' , { status : 200 , }) }"
                },
                {
                    "type": "p",
                    "text": "Notably, unlike API Routes with the Pages Router, you do not need to use bodyParser to use any additional configuration. You can use Route Handlers to return non-UI content. Note that sitemap.xml , robots.txt , app icons , and open graph images all have built-in support."
                },
                {
                    "type": "code",
                    "code": "export async function GET () { return new Response ( `<?xml version=\"1.0\" encoding=\"UTF-8\" ?> <rss version=\"2.0\"> <channel> <title>Next.js Documentation</title> <link>https://nextjs.org/docs</link> <description>The React Framework for the Web</description> </channel> </rss>` , { headers : { 'Content-Type' : 'text/xml' , } , } ) }"
                },
                {
                    "type": "p",
                    "text": "Route Handlers use the same route segment configuration as pages and layouts."
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'auto' export const dynamicParams = true export const revalidate = false export const fetchCache = 'auto' export const runtime = 'nodejs' export const preferredRegion = 'auto'"
                },
                {
                    "type": "p",
                    "text": "See the API reference for more details."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/routing/router-handlers",
            "title": "Routing: Route Handlers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Route Handlers allow you to create custom request handlers for a given route using the Web Request and Response APIs. Good to know : Route Handlers are only available inside the app directory. They are the equivalent of API Routes inside the pages directory meaning you do not need to use API Routes and Route Handlers together. Route Handlers are defined in a route.js|ts file inside the app directory:"
                },
                {
                    "type": "code",
                    "code": "export async function GET (request : Request ) {}"
                },
                {
                    "type": "p",
                    "text": "Route Handlers can be nested anywhere inside the app directory, similar to page.js and layout.js . But there cannot be a route.js file at the same route segment level as page.js . The following HTTP methods are supported: GET , POST , PUT , PATCH , DELETE , HEAD , and OPTIONS . If an unsupported method is called, Next.js will return a 405 Method Not Allowed response. In addition to supporting the native Request and Response APIs, Next.js extends them with NextRequest and NextResponse to provide convenient helpers for advanced use cases. Route Handlers are not cached by default. You can, however, opt into caching for GET methods. Other supported HTTP methods are not cached. To cache a GET method, use a route config option such as export const dynamic = 'force-static' in your Route Handler file."
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'force-static' export async function GET () { const res = await fetch ( 'https://data.mongodb-api.com/...' , { headers : { 'Content-Type' : 'application/json' , 'API-Key' : process . env . DATA_API_KEY , } , }) const data = await res .json () return Response .json ({ data }) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Other supported HTTP methods are not cached, even if they are placed alongside a GET method that is cached, in the same file. Special Route Handlers like sitemap.ts , opengraph-image.tsx , and icon.tsx , and other metadata files remain static by default unless they use Dynamic APIs or dynamic config options. You can consider a route the lowest level routing primitive."
                },
                {
                    "type": "list",
                    "items": [
                        "They do not participate in layouts or client-side navigations like page .",
                        "There cannot be a route.js file at the same route as page.js ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each route.js or page.js file takes over all HTTP verbs for that route."
                },
                {
                    "type": "code",
                    "code": "export default function Page () { return < h1 >Hello , Next .js !</ h1 > } // ❌ Conflict // `app/route.ts` export async function POST (request : Request ) {}"
                },
                {
                    "type": "p",
                    "text": "The following examples show how to combine Route Handlers with other Next.js APIs and features. You can revalidate cached data using Incremental Static Regeneration (ISR):"
                },
                {
                    "type": "code",
                    "code": "export const revalidate = 60 export async function GET () { const data = await fetch ( 'https://api.vercel.app/blog' ) const posts = await data .json () return Response .json ( posts ) }"
                },
                {
                    "type": "p",
                    "text": "You can read or set cookies with cookies from next/headers . This server function can be called directly in a Route Handler, or nested inside of another function. Alternatively, you can return a new Response using the Set-Cookie header."
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' export async function GET (request : Request ) { const cookieStore = await cookies () const token = cookieStore .get ( 'token' ) return new Response ( 'Hello, Next.js!' , { status : 200 , headers : { 'Set-Cookie' : `token= ${ token .value } ` } , }) }"
                },
                {
                    "type": "p",
                    "text": "You can also use the underlying Web APIs to read cookies from the request ( NextRequest ):"
                },
                {
                    "type": "code",
                    "code": "import { type NextRequest } from 'next/server' export async function GET (request : NextRequest ) { const token = request . cookies .get ( 'token' ) }"
                },
                {
                    "type": "p",
                    "text": "You can read headers with headers from next/headers . This server function can be called directly in a Route Handler, or nested inside of another function. This headers instance is read-only. To set headers, you need to return a new Response with new headers ."
                },
                {
                    "type": "code",
                    "code": "import { headers } from 'next/headers' export async function GET (request : Request ) { const headersList = await headers () const referer = headersList .get ( 'referer' ) return new Response ( 'Hello, Next.js!' , { status : 200 , headers : { referer : referer } , }) }"
                },
                {
                    "type": "p",
                    "text": "You can also use the underlying Web APIs to read headers from the request ( NextRequest ):"
                },
                {
                    "type": "code",
                    "code": "import { type NextRequest } from 'next/server' export async function GET (request : NextRequest ) { const requestHeaders = new Headers ( request .headers) }"
                },
                {
                    "type": "code",
                    "code": "import { redirect } from 'next/navigation' export async function GET (request : Request ) { redirect ( 'https://nextjs.org/' ) }"
                },
                {
                    "type": "p",
                    "text": "Route Handlers can use Dynamic Segments to create request handlers from dynamic data."
                },
                {
                    "type": "code",
                    "code": "export async function GET ( request : Request , { params } : { params : Promise <{ slug : string }> } ) { const slug = ( await params).slug // 'a', 'b', or 'c' }"
                },
                {
                    "type": "p",
                    "text": "The request object passed to the Route Handler is a NextRequest instance, which has some additional convenience methods , including for more easily handling query parameters."
                },
                {
                    "type": "code",
                    "code": "import { type NextRequest } from 'next/server' export function GET (request : NextRequest ) { const searchParams = request . nextUrl .searchParams const query = searchParams .get ( 'query' ) // query is \"hello\" for / api /search?query=hello }"
                },
                {
                    "type": "p",
                    "text": "Streaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI, for AI-generated content. Learn more about the AI SDK ."
                },
                {
                    "type": "code",
                    "code": "import { openai } from '@ai-sdk/openai' import { StreamingTextResponse , streamText } from 'ai' export async function POST (req : Request ) { const { messages } = await req .json () const result = await streamText ({ model : openai ( 'gpt-4-turbo' ) , messages , }) return new StreamingTextResponse ( result .toAIStream ()) }"
                },
                {
                    "type": "p",
                    "text": "These abstractions use the Web APIs to create a stream. You can also use the underlying Web APIs directly."
                },
                {
                    "type": "code",
                    "code": "// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream function iteratorToStream (iterator : any ) { return new ReadableStream ({ async pull (controller) { const { value , done } = await iterator .next () if (done) { controller .close () } else { controller .enqueue (value) } } , }) } function sleep (time : number ) { return new Promise ((resolve) => { setTimeout (resolve , time) }) } const encoder = new TextEncoder () async function* makeIterator () { yield encoder .encode ( '<p>One</p>' ) await sleep ( 200 ) yield encoder .encode ( '<p>Two</p>' ) await sleep ( 200 ) yield encoder .encode ( '<p>Three</p>' ) } export async function GET () { const iterator = makeIterator () const stream = iteratorToStream (iterator) return new Response (stream) }"
                },
                {
                    "type": "p",
                    "text": "You can read the Request body using the standard Web API methods:"
                },
                {
                    "type": "code",
                    "code": "export async function POST (request : Request ) { const res = await request .json () return Response .json ({ res }) }"
                },
                {
                    "type": "p",
                    "text": "You can read the FormData using the request.formData() function:"
                },
                {
                    "type": "code",
                    "code": "export async function POST (request : Request ) { const formData = await request .formData () const name = formData .get ( 'name' ) const email = formData .get ( 'email' ) return Response .json ({ name , email }) }"
                },
                {
                    "type": "p",
                    "text": "Since formData data are all strings, you may want to use zod-form-data to validate the request and retrieve data in the format you prefer (e.g. number ). You can set CORS headers for a specific Route Handler using the standard Web API methods:"
                },
                {
                    "type": "code",
                    "code": "export async function GET (request : Request ) { return new Response ( 'Hello, Next.js!' , { status : 200 , headers : { 'Access-Control-Allow-Origin' : '*' , 'Access-Control-Allow-Methods' : 'GET, POST, PUT, DELETE, OPTIONS' , 'Access-Control-Allow-Headers' : 'Content-Type, Authorization' , } , }) }"
                },
                {
                    "type": "list",
                    "items": [
                        "To add CORS headers to multiple Route Handlers, you can use Middleware or the next.config.js file .",
                        "Alternatively, see our CORS example package."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can use a Route Handler to receive webhooks from third-party services:"
                },
                {
                    "type": "code",
                    "code": "export async function POST (request : Request ) { try { const text = await request .text () // Process the webhook payload } catch (error) { return new Response ( `Webhook error: ${ error .message } ` , { status : 400 , }) } return new Response ( 'Success!' , { status : 200 , }) }"
                },
                {
                    "type": "p",
                    "text": "Notably, unlike API Routes with the Pages Router, you do not need to use bodyParser to use any additional configuration. You can use Route Handlers to return non-UI content. Note that sitemap.xml , robots.txt , app icons , and open graph images all have built-in support."
                },
                {
                    "type": "code",
                    "code": "export async function GET () { return new Response ( `<?xml version=\"1.0\" encoding=\"UTF-8\" ?> <rss version=\"2.0\"> <channel> <title>Next.js Documentation</title> <link>https://nextjs.org/docs</link> <description>The React Framework for the Web</description> </channel> </rss>` , { headers : { 'Content-Type' : 'text/xml' , } , } ) }"
                },
                {
                    "type": "p",
                    "text": "Route Handlers use the same route segment configuration as pages and layouts."
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'auto' export const dynamicParams = true export const revalidate = false export const fetchCache = 'auto' export const runtime = 'nodejs' export const preferredRegion = 'auto'"
                },
                {
                    "type": "p",
                    "text": "See the API reference for more details."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling",
            "title": "Building Your Application: Styling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js supports different ways of styling your application, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "CSS Modules : Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.",
                        "Global CSS : Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.",
                        "Tailwind CSS : A utility-first CSS framework that allows for rapid custom designs by composing utility classes.",
                        "Sass : A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.",
                        "CSS-in-JS : Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about each approach by exploring their respective documentation:"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling/css",
            "title": "Building Your Application: Styling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js supports different ways of styling your application, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "CSS Modules : Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.",
                        "Global CSS : Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.",
                        "Tailwind CSS : A utility-first CSS framework that allows for rapid custom designs by composing utility classes.",
                        "Sass : A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.",
                        "CSS-in-JS : Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn more about each approach by exploring their respective documentation:"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling/css-in-js",
            "title": "Styling: CSS-in-JS | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Warning: CSS-in-JS libraries which require runtime JavaScript are not currently supported in Server Components. Using CSS-in-JS with newer React features like Server Components and Streaming requires library authors to support the latest version of React, including concurrent rendering . We're working with the React team on upstream APIs to handle CSS and JavaScript assets with support for React Server Components and streaming architecture. The following libraries are supported in Client Components in the app directory (alphabetical):"
                },
                {
                    "type": "list",
                    "items": [
                        "ant-design",
                        "chakra-ui",
                        "@fluentui/react-components",
                        "kuma-ui",
                        "@mui/material",
                        "@mui/joy",
                        "pandacss",
                        "styled-jsx",
                        "styled-components",
                        "stylex",
                        "tamagui",
                        "tss-react",
                        "vanilla-extract"
                    ]
                },
                {
                    "type": "p",
                    "text": "The following are currently working on support: Good to know : We're testing out different CSS-in-JS libraries and we'll be adding more examples for libraries that support React 18 features and/or the app directory. If you want to style Server Components, we recommend using CSS Modules or other solutions that output CSS files, like PostCSS or Tailwind CSS . Configuring CSS-in-JS is a three-step opt-in process that involves:"
                },
                {
                    "type": "list",
                    "items": [
                        "A style registry to collect all CSS rules in a render.",
                        "The new useServerInsertedHTML hook to inject rules before any content that might use them.",
                        "A Client Component that wraps your app with the style registry during initial server-side rendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "Using styled-jsx in Client Components requires using v5.1.0 . First, create a new registry:"
                },
                {
                    "type": "code",
                    "code": "'use client' import React , { useState } from 'react' import { useServerInsertedHTML } from 'next/navigation' import { StyleRegistry , createStyleRegistry } from 'styled-jsx' export default function StyledJsxRegistry ({ children , } : { children : React . ReactNode }) { // Only create stylesheet once with lazy initial state // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state const [ jsxStyleRegistry ] = useState (() => createStyleRegistry ()) useServerInsertedHTML (() => { const styles = jsxStyleRegistry .styles () jsxStyleRegistry .flush () return <>{styles}</> }) return < StyleRegistry registry = {jsxStyleRegistry}>{children}</ StyleRegistry > }"
                },
                {
                    "type": "p",
                    "text": "Then, wrap your root layout with the registry:"
                },
                {
                    "type": "code",
                    "code": "import StyledJsxRegistry from './registry' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html > < body > < StyledJsxRegistry >{children}</ StyledJsxRegistry > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Below is an example of how to configure styled-components@6 or newer: First, enable styled-components in next.config.js ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { styledComponents : true , } , }"
                },
                {
                    "type": "p",
                    "text": "Then, use the styled-components API to create a global registry component to collect all CSS style rules generated during a render, and a function to return those rules. Then use the useServerInsertedHTML hook to inject the styles collected in the registry into the <head> HTML tag in the root layout."
                },
                {
                    "type": "code",
                    "code": "'use client' import React , { useState } from 'react' import { useServerInsertedHTML } from 'next/navigation' import { ServerStyleSheet , StyleSheetManager } from 'styled-components' export default function StyledComponentsRegistry ({ children , } : { children : React . ReactNode }) { // Only create stylesheet once with lazy initial state // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state const [ styledComponentsStyleSheet ] = useState (() => new ServerStyleSheet ()) useServerInsertedHTML (() => { const styles = styledComponentsStyleSheet .getStyleElement () styledComponentsStyleSheet . instance .clearTag () return <>{styles}</> }) if ( typeof window !== 'undefined' ) return <>{children}</> return ( < StyleSheetManager sheet = { styledComponentsStyleSheet .instance}> {children} </ StyleSheetManager > ) }"
                },
                {
                    "type": "p",
                    "text": "Wrap the children of the root layout with the style registry component:"
                },
                {
                    "type": "code",
                    "code": "import StyledComponentsRegistry from './lib/registry' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html > < body > < StyledComponentsRegistry >{children}</ StyledComponentsRegistry > </ body > </ html > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "During server rendering, styles will be extracted to a global registry and flushed to the <head> of your HTML. This ensures the style rules are placed before any content that might use them. In the future, we may use an upcoming React feature to determine where to inject the styles.",
                        "During streaming, styles from each chunk will be collected and appended to existing styles. After client-side hydration is complete, styled-components will take over as usual and inject any further dynamic styles.",
                        "We specifically use a Client Component at the top level of the tree for the style registry because it's more efficient to extract CSS rules this way. It avoids re-generating styles on subsequent server renders, and prevents them from being sent in the Server Component payload.",
                        "For advanced use cases where you need to configure individual properties of styled-components compilation, you can read our Next.js styled-components API reference to learn more."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling/sass",
            "title": "Styling: Sass | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js has built-in support for integrating with Sass after the package is installed using both the .scss and .sass extensions. You can use component-level Sass via CSS Modules and the .module.scss or .module.sass extension."
                },
                {
                    "type": "code",
                    "code": "npm install --save-dev sass"
                },
                {
                    "type": "p",
                    "text": "Sass supports two different syntaxes , each with their own extension.\nThe .scss extension requires you use the SCSS syntax ,\nwhile the .sass extension requires you use the Indented Syntax (\"Sass\") . If you're not sure which to choose, start with the .scss extension which is a superset of CSS, and doesn't require you learn the\nIndented Syntax (\"Sass\"). If you want to configure your Sass options, use sassOptions in next.config ."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { sassOptions : { additionalData : `$var: red;` , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "You can use the implementation property to specify the Sass implementation to use. By default, Next.js uses the sass package."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { sassOptions : { implementation : 'sass-embedded' , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Next.js supports Sass variables exported from CSS Module files. For example, using the exported primaryColor Sass variable:"
                },
                {
                    "type": "code",
                    "code": "$primary-color : #64ff00; :export { primary C olor : $primary-color ; }"
                },
                {
                    "type": "code",
                    "code": "// maps to root `/` URL import variables from './variables.module.scss' export default function Page () { return < h1 style = {{ color : variables .primaryColor }}>Hello, Next.js!</ h1 > }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/styling/tailwind-css",
            "title": "Styling: Tailwind CSS | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Tailwind CSS is a utility-first CSS framework that works exceptionally well with Next.js. Install the Tailwind CSS packages and run the init command to generate both the tailwind.config.js and postcss.config.js files:"
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p"
                },
                {
                    "type": "p",
                    "text": "Inside your Tailwind configuration file, add paths to the files that will use Tailwind class names:"
                },
                {
                    "type": "code",
                    "code": "import type { Config } from 'tailwindcss' export default { content : [ './app/**/*.{js,ts,jsx,tsx,mdx}' , // Note the addition of the `app` directory. './pages/**/*.{js,ts,jsx,tsx,mdx}' , './components/**/*.{js,ts,jsx,tsx,mdx}' , // Or if using `src` directory: './src/**/*.{js,ts,jsx,tsx,mdx}' , ] , theme : { extend : {} , } , plugins : [] , } satisfies Config"
                },
                {
                    "type": "p",
                    "text": "You do not need to modify postcss.config.js . Add the Tailwind CSS directives that Tailwind will use to inject its generated styles to a Global Stylesheet in your application, for example:"
                },
                {
                    "type": "code",
                    "code": "@tailwind base; @tailwind components; @tailwind utilities;"
                },
                {
                    "type": "p",
                    "text": "Inside the root layout ( app/layout.tsx ), import the globals.css stylesheet to apply the styles to every route in your application."
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' // These styles apply to every route in the application import './globals.css' export const metadata : Metadata = { title : 'Create Next App' , description : 'Generated by create next app' , } export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "After installing Tailwind CSS and adding the global styles, you can use Tailwind's utility classes in your application."
                },
                {
                    "type": "code",
                    "code": "export default function Page () { return < h1 className = \"text-3xl font-bold underline\" >Hello, Next.js!</ h1 > }"
                },
                {
                    "type": "p",
                    "text": "As of Next.js 13.1, Tailwind CSS and PostCSS are supported with Turbopack ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing",
            "title": "Building Your Application: Testing | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "In React and Next.js, there are a few different types of tests you can write, each with its own purpose and use cases. This page provides an overview of types and commonly used tools you can use to test your application."
                },
                {
                    "type": "list",
                    "items": [
                        "Unit Testing involves testing individual units (or blocks of code) in isolation. In React, a unit can be a single function, hook, or component. Component Testing is a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events. Integration Testing involves testing how multiple units work together. This can be a combination of components, hooks, and functions.",
                        "Component Testing is a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events.",
                        "Integration Testing involves testing how multiple units work together. This can be a combination of components, hooks, and functions.",
                        "End-to-End (E2E) Testing involves testing user flows in an environment that simulates real user scenarios, like the browser. This means testing specific tasks (e.g. signup flow) in a production-like environment.",
                        "Snapshot Testing involves capturing the rendered output of a component and saving it to a snapshot file. When tests run, the current rendered output of the component is compared against the saved snapshot. Changes in the snapshot are used to indicate unexpected changes in behavior."
                    ]
                },
                {
                    "type": "p",
                    "text": "Since async Server Components are new to the React ecosystem, some tools do not fully support them. In the meantime, we recommend using End-to-End Testing over Unit Testing for async components. See the guides below to learn how to set up Next.js with these commonly used testing tools:"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing/cypress",
            "title": "Testing: Cypress | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Cypress is a test runner used for End-to-End (E2E) and Component Testing . This page will show you how to set up Cypress with Next.js and write your first tests."
                },
                {
                    "type": "list",
                    "items": [
                        "Cypress versions below 13.6.3 do not support TypeScript version 5 with moduleResolution:\"bundler\" . However, this issue has been resolved in Cypress version 13.6.3 and later. cypress v13.6.3"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can use create-next-app with the with-cypress example to quickly get started."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest --example with-cypress with-cypress-app"
                },
                {
                    "type": "p",
                    "text": "To manually set up Cypress, install cypress as a dev dependency:"
                },
                {
                    "type": "code",
                    "code": "npm install -D cypress # or yarn add -D cypress # or pnpm install -D cypress"
                },
                {
                    "type": "p",
                    "text": "Add the Cypress open command to the package.json scripts field:"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"next dev\" , \"build\" : \"next build\" , \"start\" : \"next start\" , \"lint\" : \"next lint\" , \"cypress:open\" : \"cypress open\" } }"
                },
                {
                    "type": "p",
                    "text": "Run Cypress for the first time to open the Cypress testing suite:"
                },
                {
                    "type": "code",
                    "code": "npm run cypress:open"
                },
                {
                    "type": "p",
                    "text": "You can choose to configure E2E Testing and/or Component Testing . Selecting any of these options will automatically create a cypress.config.js file and a cypress folder in your project. Ensure your cypress.config file has the following configuration:"
                },
                {
                    "type": "code",
                    "code": "import { defineConfig } from 'cypress' export default defineConfig ({ e2e : { setupNodeEvents (on , config) {} , } , })"
                },
                {
                    "type": "p",
                    "text": "Then, create two new Next.js files:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < div > < h1 >Home</ h1 > < Link href = \"/about\" >About</ Link > </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < div > < h1 >About</ h1 > < Link href = \"/\" >Home</ Link > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Add a test to check your navigation is working correctly:"
                },
                {
                    "type": "code",
                    "code": "describe ( 'Navigation' , () => { it ( 'should navigate to the about page' , () => { // Start from the index page cy .visit ( 'http://localhost:3000/' ) // Find a link with an href attribute containing \"about\" and click it cy .get ( 'a[href*=\"about\"]' ) .click () // The new url should include \"/about\" cy .url () .should ( 'include' , '/about' ) // The new page should contain an h1 with \"About\" cy .get ( 'h1' ) .contains ( 'About' ) }) })"
                },
                {
                    "type": "p",
                    "text": "Cypress will simulate a user navigating your application, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave. Run npm run build && npm run start to build your Next.js application, then run npm run cypress:open in another terminal window to start Cypress and run your E2E Testing suite."
                },
                {
                    "type": "list",
                    "items": [
                        "You can use cy.visit(\"/\") instead of cy.visit(\"http://localhost:3000/\") by adding baseUrl: 'http://localhost:3000' to the cypress.config.js configuration file.",
                        "Alternatively, you can install the start-server-and-test package to run the Next.js production server in conjunction with Cypress. After installation, add \"test\": \"start-server-and-test start http://localhost:3000 cypress\" to your package.json scripts field. Remember to rebuild your application after new changes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Component tests build and mount a specific component without having to bundle your whole application or start a server. Select Component Testing in the Cypress app, then select Next.js as your front-end framework. A cypress/component folder will be created in your project, and a cypress.config.js file will be updated to enable Component Testing. Ensure your cypress.config file has the following configuration:"
                },
                {
                    "type": "code",
                    "code": "import { defineConfig } from 'cypress' export default defineConfig ({ component : { devServer : { framework : 'next' , bundler : 'webpack' , } , } , })"
                },
                {
                    "type": "p",
                    "text": "Assuming the same components from the previous section, add a test to validate a component is rendering the expected output:"
                },
                {
                    "type": "code",
                    "code": "import Page from '../../app/page' describe ( '<Page />' , () => { it ( 'should render and display expected content' , () => { // Mount the React component for the Home page cy .mount (< Page />) // The new page should contain an h1 with \"Home\" cy .get ( 'h1' ) .contains ( 'Home' ) // Validate that a link with the expected URL is present // Following the link is better suited to an E2E test cy .get ( 'a[href=\"/about\"]' ) .should ( 'be.visible' ) }) })"
                },
                {
                    "type": "list",
                    "items": [
                        "Cypress currently doesn't support Component Testing for async Server Components. We recommend using E2E testing.",
                        "Since component tests do not require a Next.js server, features like <Image /> that rely on a server being available may not function out-of-the-box."
                    ]
                },
                {
                    "type": "p",
                    "text": "Run npm run cypress:open in your terminal to start Cypress and run your Component Testing suite. In addition to interactive testing, you can also run Cypress headlessly using the cypress run command, which is better suited for CI environments:"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { //... \"e2e\" : \"start-server-and-test dev http://localhost:3000 \\\"cypress open --e2e\\\"\" , \"e2e:headless\" : \"start-server-and-test dev http://localhost:3000 \\\"cypress run --e2e\\\"\" , \"component\" : \"cypress open --component\" , \"component:headless\" : \"cypress run --component\" } }"
                },
                {
                    "type": "p",
                    "text": "You can learn more about Cypress and Continuous Integration from these resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js with Cypress example",
                        "Cypress Continuous Integration Docs",
                        "Cypress GitHub Actions Guide",
                        "Official Cypress GitHub Action",
                        "Cypress Discord"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing/jest",
            "title": "Testing: Jest | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Jest and React Testing Library are frequently used together for Unit Testing and Snapshot Testing . This guide will show you how to set up Jest with Next.js and write your first tests. Good to know: Since async Server Components are new to the React ecosystem, Jest currently does not support them. While you can still run unit tests for synchronous Server and Client Components, we recommend using an E2E tests for async components. You can use create-next-app with the Next.js with-jest example to quickly get started:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest --example with-jest with-jest-app"
                },
                {
                    "type": "p",
                    "text": "Since the release of Next.js 12 , Next.js now has built-in configuration for Jest. To set up Jest, install jest and the following packages as dev dependencies:"
                },
                {
                    "type": "code",
                    "code": "npm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node # or yarn add -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node # or pnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node"
                },
                {
                    "type": "p",
                    "text": "Generate a basic Jest configuration file by running the following command:"
                },
                {
                    "type": "code",
                    "code": "npm init jest@latest # or yarn create jest@latest # or pnpm create jest@latest"
                },
                {
                    "type": "p",
                    "text": "This will take you through a series of prompts to setup Jest for your project, including automatically creating a jest.config.ts|js file. Update your config file to use next/jest . This transformer has all the necessary configuration options for Jest to work with Next.js:"
                },
                {
                    "type": "code",
                    "code": "import type { Config } from 'jest' import nextJest from 'next/jest.js' const createJestConfig = nextJest ({ // Provide the path to your Next.js app to load next.config.js and .env files in your test environment dir : './' , }) // Add any custom config to be passed to Jest const config : Config = { coverageProvider : 'v8' , testEnvironment : 'jsdom' , // Add more setup options before each test is run // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'], } // createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async export default createJestConfig (config)"
                },
                {
                    "type": "p",
                    "text": "Under the hood, next/jest is automatically configuring Jest for you, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Setting up transform using the Next.js Compiler .",
                        "Auto mocking stylesheets ( .css , .module.css , and their scss variants), image imports and next/font .",
                        "Loading .env (and all variants) into process.env .",
                        "Ignoring node_modules from test resolving and transforms.",
                        "Ignoring .next from test resolving.",
                        "Loading next.config.js for flags that enable SWC transforms."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know : To test environment variables directly, load them manually in a separate setup script or in your jest.config.ts file. For more information, please see Test Environment Variables . If your project is using Module Path Aliases , you will need to configure Jest to resolve the imports by matching the paths option in the jsconfig.json file with the moduleNameMapper option in the jest.config.js file. For example:"
                },
                {
                    "type": "code",
                    "code": "{ \"compilerOptions\" : { \"module\" : \"esnext\" , \"moduleResolution\" : \"bundler\" , \"baseUrl\" : \"./\" , \"paths\" : { \"@/components/*\" : [ \"components/*\" ] } } }"
                },
                {
                    "type": "code",
                    "code": "moduleNameMapper : { // ... '^@/components/(.*)$' : '<rootDir>/components/$1' , }"
                },
                {
                    "type": "p",
                    "text": "@testing-library/jest-dom includes a set of convenient custom matchers such as .toBeInTheDocument() making it easier to write tests. You can import the custom matchers for every test by adding the following option to the Jest configuration file:"
                },
                {
                    "type": "code",
                    "code": "setupFilesAfterEnv : [ '<rootDir>/jest.setup.ts' ]"
                },
                {
                    "type": "p",
                    "text": "Then, inside jest.setup , add the following import:"
                },
                {
                    "type": "code",
                    "code": "import '@testing-library/jest-dom'"
                },
                {
                    "type": "p",
                    "text": "Good to know: extend-expect was removed in v6.0 , so if you are using @testing-library/jest-dom before version 6, you will need to import @testing-library/jest-dom/extend-expect instead. If you need to add more setup options before each test, you can add them to the jest.setup file above. Finally, add a Jest test script to your package.json file:"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"next dev\" , \"build\" : \"next build\" , \"start\" : \"next start\" , \"test\" : \"jest\" , \"test:watch\" : \"jest --watch\" } }"
                },
                {
                    "type": "p",
                    "text": "jest --watch will re-run tests when a file is changed. For more Jest CLI options, please refer to the Jest Docs . Your project is now ready to run tests. Create a folder called __tests__ in your project's root directory. For example, we can add a test to check if the <Page /> component successfully renders a heading:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < div > < h1 >Home</ h1 > < Link href = \"/about\" >About</ Link > </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "import '@testing-library/jest-dom' import { render , screen } from '@testing-library/react' import Page from '../app/page' describe ( 'Page' , () => { it ( 'renders a heading' , () => { render (< Page />) const heading = screen .getByRole ( 'heading' , { level : 1 }) expect (heading) .toBeInTheDocument () }) })"
                },
                {
                    "type": "p",
                    "text": "Optionally, add a snapshot test to keep track of any unexpected changes in your component:"
                },
                {
                    "type": "code",
                    "code": "import { render } from '@testing-library/react' import Page from '../app/page' it ( 'renders homepage unchanged' , () => { const { container } = render (< Page />) expect (container) .toMatchSnapshot () })"
                },
                {
                    "type": "p",
                    "text": "Then, run the following command to run your tests:"
                },
                {
                    "type": "code",
                    "code": "npm run test # or yarn test # or pnpm test"
                },
                {
                    "type": "p",
                    "text": "For further reading, you may find these resources helpful:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js with Jest example",
                        "Jest Docs",
                        "React Testing Library Docs",
                        "Testing Playground - use good testing practices to match elements."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing/playwright",
            "title": "Testing: Playwright | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Playwright is a testing framework that lets you automate Chromium, Firefox, and WebKit with a single API. You can use it to write End-to-End (E2E) testing. This guide will show you how to set up Playwright with Next.js and write your first tests. The fastest way to get started is to use create-next-app with the with-playwright example . This will create a Next.js project complete with Playwright configured."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest --example with-playwright with-playwright-app"
                },
                {
                    "type": "p",
                    "text": "To install Playwright, run the following command:"
                },
                {
                    "type": "code",
                    "code": "npm init playwright # or yarn create playwright # or pnpm create playwright"
                },
                {
                    "type": "p",
                    "text": "This will take you through a series of prompts to setup and configure Playwright for your project, including adding a playwright.config.ts file. Please refer to the Playwright installation guide for the step-by-step guide."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < div > < h1 >Home</ h1 > < Link href = \"/about\" >About</ Link > </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < div > < h1 >About</ h1 > < Link href = \"/\" >Home</ Link > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Then, add a test to verify that your navigation is working correctly:"
                },
                {
                    "type": "code",
                    "code": "import { test , expect } from '@playwright/test' test ( 'should navigate to the about page' , async ({ page }) => { // Start from the index page (the baseURL is set via the webServer in the playwright.config.ts) await page .goto ( 'http://localhost:3000/' ) // Find an element with the text 'About' and click on it await page .click ( 'text=About' ) // The new URL should be \"/about\" (baseURL is used there) await expect (page) .toHaveURL ( 'http://localhost:3000/about' ) // The new page should contain an h1 with \"About\" await expect ( page .locator ( 'h1' )) .toContainText ( 'About' ) })"
                },
                {
                    "type": "p",
                    "text": "Good to know : You can use page.goto(\"/\") instead of page.goto(\"http://localhost:3000/\") , if you add \"baseURL\": \"http://localhost:3000\" to the playwright.config.ts configuration file . Playwright will simulate a user navigating your application using three browsers: Chromium, Firefox and Webkit, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave. Run npm run build and npm run start , then run npx playwright test in another terminal window to run the Playwright tests. Good to know : Alternatively, you can use the webServer feature to let Playwright start the development server and wait until it's fully available. Playwright will by default run your tests in the headless mode . To install all the Playwright dependencies, run npx playwright install-deps . You can learn more about Playwright and Continuous Integration from these resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js with Playwright example",
                        "Playwright on your CI provider",
                        "Playwright Discord"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/testing/vitest",
            "title": "Testing: Vitest | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Vite and React Testing Library are frequently used together for Unit Testing . This guide will show you how to setup Vitest with Next.js and write your first tests. Good to know: Since async Server Components are new to the React ecosystem, Vitest currently does not support them. While you can still run unit tests for synchronous Server and Client Components, we recommend using an E2E tests for async components. You can use create-next-app with the Next.js with-vitest example to quickly get started:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest --example with-vitest with-vitest-app"
                },
                {
                    "type": "p",
                    "text": "To manually set up Vitest, install vitest and the following packages as dev dependencies:"
                },
                {
                    "type": "code",
                    "code": "# Using TypeScript npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom vite-tsconfig-paths # Using JavaScript npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom"
                },
                {
                    "type": "p",
                    "text": "Create a vitest.config.mts|js file in the root of your project, and add the following options:"
                },
                {
                    "type": "code",
                    "code": "import { defineConfig } from 'vitest/config' import react from '@vitejs/plugin-react' import tsconfigPaths from 'vite-tsconfig-paths' export default defineConfig ({ plugins : [ tsconfigPaths () , react ()] , test : { environment : 'jsdom' , } , })"
                },
                {
                    "type": "p",
                    "text": "For more information on configuring Vitest, please refer to the Vitest Configuration docs. Then, add a test script to your package.json :"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"next dev\" , \"build\" : \"next build\" , \"start\" : \"next start\" , \"test\" : \"vitest\" } }"
                },
                {
                    "type": "p",
                    "text": "When you run npm run test , Vitest will watch for changes in your project by default. Check that everything is working by creating a test to check if the <Page /> component successfully renders a heading:"
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' export default function Page () { return ( < div > < h1 >Home</ h1 > < Link href = \"/about\" >About</ Link > </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "import { expect , test } from 'vitest' import { render , screen } from '@testing-library/react' import Page from '../app/page' test ( 'Page' , () => { render (< Page />) expect ( screen .getByRole ( 'heading' , { level : 1 , name : 'Home' })) .toBeDefined () })"
                },
                {
                    "type": "p",
                    "text": "Good to know : The example above uses the common __tests__ convention, but test files can also be colocated inside the app router. Then, run the following command to run your tests:"
                },
                {
                    "type": "code",
                    "code": "npm run test # or yarn test # or pnpm test # or bun test"
                },
                {
                    "type": "p",
                    "text": "You may find these resources helpful:"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js with Vitest example",
                        "Vitest Docs",
                        "React Testing Library Docs"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading",
            "title": "Building Your Application: Upgrading | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Upgrade your application to newer versions of Next.js or migrate from the Pages Router to the App Router."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/app-router-migration",
            "title": "Upgrading: App Router Migration | Next.js",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Update your Next.js application from version 12 to version 13",
                        "Upgrade features that work in both the pages and the app directories",
                        "Incrementally migrate your existing application from pages to app"
                    ]
                },
                {
                    "type": "p",
                    "text": "The minimum Node.js version is now v18.17 . See the Node.js documentation for more information. To update to Next.js version 13, run the following command using your preferred package manager:"
                },
                {
                    "type": "code",
                    "code": "npm install next@latest react@latest react-dom@latest"
                },
                {
                    "type": "p",
                    "text": "If you're using ESLint, you need to upgrade your ESLint version:"
                },
                {
                    "type": "code",
                    "code": "npm install -D eslint-config-next@latest"
                },
                {
                    "type": "p",
                    "text": "Good to know : You may need to restart the ESLint server in VS Code for the ESLint changes to take effect. Open the Command Palette ( cmd+shift+p on Mac; ctrl+shift+p on Windows) and search for ESLint: Restart ESLint Server . After you've updated, see the following sections for next steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Upgrade new features : A guide to help you upgrade to new features such as the improved Image and Link Components.",
                        "Migrate from the pages to app directory : A step-by-step guide to help you incrementally migrate from the pages to the app directory."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js 13 introduced the new App Router with new features and conventions. The new Router is available in the app directory and co-exists with the pages directory. Upgrading to Next.js 13 does not require using the App Router. You can continue using pages with new features that work in both directories, such as the updated Image component , Link component , Script component , and Font optimization . Next.js 12 introduced new improvements to the Image Component with a temporary import: next/future/image . These improvements included less client-side JavaScript, easier ways to extend and style images, better accessibility, and native browser lazy loading. In version 13, this new behavior is now the default for next/image . There are two codemods to help you migrate to the new Image Component:"
                },
                {
                    "type": "list",
                    "items": [
                        "next-image-to-legacy-image codemod : Safely and automatically renames next/image imports to next/legacy/image . Existing components will maintain the same behavior.",
                        "next-image-experimental codemod : Dangerously adds inline styles and removes unused props. This will change the behavior of existing components to match the new defaults. To use this codemod, you need to run the next-image-to-legacy-image codemod first."
                    ]
                },
                {
                    "type": "p",
                    "text": "The <Link> Component no longer requires manually adding an <a> tag as a child. This behavior was added as an experimental option in version 12.2 and is now the default. In Next.js 13, <Link> always renders <a> and allows you to forward props to the underlying tag."
                },
                {
                    "type": "code",
                    "code": "import Link from 'next/link' // Next.js 12: `<a>` has to be nested otherwise it's excluded < Link href = \"/about\" > < a >About</ a > </ Link > // Next.js 13: `<Link>` always renders `<a>` under the hood < Link href = \"/about\" > About </ Link >"
                },
                {
                    "type": "p",
                    "text": "To upgrade your links to Next.js 13, you can use the new-link codemod . The behavior of next/script has been updated to support both pages and app , but some changes need to be made to ensure a smooth migration:"
                },
                {
                    "type": "list",
                    "items": [
                        "Move any beforeInteractive scripts you previously included in _document.js to the root layout file ( app/layout.tsx ).",
                        "The experimental worker strategy does not yet work in app and scripts denoted with this strategy will either have to be removed or modified to use a different strategy (e.g. lazyOnload ).",
                        "onLoad , onReady , and onError handlers will not work in Server Components so make sure to move them to a Client Component or remove them altogether."
                    ]
                },
                {
                    "type": "p",
                    "text": "Previously, Next.js helped you optimize fonts by inlining font CSS . Version 13 introduces the new next/font module which gives you the ability to customize your font loading experience while still ensuring great performance and privacy. next/font is supported in both the pages and app directories. While inlining CSS still works in pages , it does not work in app . You should use next/font instead. See the Font Optimization page to learn how to use next/font . 🎥 Watch: Learn how to incrementally adopt the App Router → YouTube (16 minutes) . Moving to the App Router may be the first time using React features that Next.js builds on top of such as Server Components, Suspense, and more. When combined with new Next.js features such as special files and layouts , migration means new concepts, mental models, and behavioral changes to learn. We recommend reducing the combined complexity of these updates by breaking down your migration into smaller steps. The app directory is intentionally designed to work simultaneously with the pages directory to allow for incremental page-by-page migration."
                },
                {
                    "type": "list",
                    "items": [
                        "The app directory supports nested routes and layouts. Learn more .",
                        "Use nested folders to define routes and a special page.js file to make a route segment publicly accessible. Learn more .",
                        "Special file conventions are used to create UI for each route segment. The most common special files are page.js and layout.js . Use page.js to define UI unique to a route. Use layout.js to define UI that is shared across multiple routes. .js , .jsx , or .tsx file extensions can be used for special files.",
                        "Use page.js to define UI unique to a route.",
                        "Use layout.js to define UI that is shared across multiple routes.",
                        ".js , .jsx , or .tsx file extensions can be used for special files.",
                        "You can colocate other files inside the app directory such as components, styles, tests, and more. Learn more .",
                        "Data fetching functions like getServerSideProps and getStaticProps have been replaced with a new API inside app . getStaticPaths has been replaced with generateStaticParams .",
                        "pages/_app.js and pages/_document.js have been replaced with a single app/layout.js root layout. Learn more .",
                        "pages/_error.js has been replaced with more granular error.js special files. Learn more .",
                        "pages/404.js has been replaced with the not-found.js file.",
                        "pages/api/* API Routes have been replaced with the route.js (Route Handler) special file."
                    ]
                },
                {
                    "type": "p",
                    "text": "Update to the latest Next.js version (requires 13.4 or greater):"
                },
                {
                    "type": "code",
                    "code": "npm install next@latest"
                },
                {
                    "type": "p",
                    "text": "Then, create a new app directory at the root of your project (or src/ directory). Create a new app/layout.tsx file inside the app directory. This is a root layout that will apply to all routes inside app ."
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ // Layouts must accept a children prop. // This will be populated with nested layouts or pages children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "The app directory must include a root layout.",
                        "The root layout must define <html> , and <body> tags since Next.js does not automatically create them",
                        "The root layout replaces the pages/_app.tsx and pages/_document.tsx files.",
                        ".js , .jsx , or .tsx extensions can be used for layout files."
                    ]
                },
                {
                    "type": "p",
                    "text": "To manage <head> HTML elements, you can use the built-in SEO support :"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : 'Home' , description : 'Welcome to Next.js' , }"
                },
                {
                    "type": "p",
                    "text": "If you have an existing _app or _document file, you can copy the contents (e.g. global styles) to the root layout ( app/layout.tsx ). Styles in app/layout.tsx will not apply to pages/* . You should keep _app / _document while migrating to prevent your pages/* routes from breaking. Once fully migrated, you can then safely delete them. If you are using any React Context providers, they will need to be moved to a Client Component . Next.js recommended adding a property to Page components to achieve per-page layouts in the pages directory. This pattern can be replaced with native support for nested layouts in the app directory."
                },
                {
                    "type": "code",
                    "code": "export default function DashboardLayout ({ children }) { return ( < div > < h2 >My Dashboard</ h2 > {children} </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "import DashboardLayout from '../components/DashboardLayout' export default function Page () { return < p >My Page</ p > } Page . getLayout = function getLayout (page) { return < DashboardLayout >{page}</ DashboardLayout > }"
                },
                {
                    "type": "list",
                    "items": [
                        "Remove the Page.getLayout property from pages/dashboard/index.js and follow the steps for migrating pages to the app directory. app/dashboard/page.js export default function Page () { return < p >My Page</ p > }",
                        "Move the contents of DashboardLayout into a new Client Component to retain pages directory behavior. app/dashboard/DashboardLayout.js 'use client' // this directive should be at top of the file, before any imports. // This is a Client Component export default function DashboardLayout ({ children }) { return ( < div > < h2 >My Dashboard</ h2 > {children} </ div > ) }",
                        "Import the DashboardLayout into a new layout.js file inside the app directory. app/dashboard/layout.js import DashboardLayout from './DashboardLayout' // This is a Server Component export default function Layout ({ children }) { return < DashboardLayout >{children}</ DashboardLayout > }",
                        "You can incrementally move non-interactive parts of DashboardLayout.js (Client Component) into layout.js (Server Component) to reduce the amount of component JavaScript you send to the client."
                    ]
                },
                {
                    "type": "p",
                    "text": "In the pages directory, the next/head React component is used to manage <head> HTML elements such as title and meta . In the app directory, next/head is replaced with the new built-in SEO support ."
                },
                {
                    "type": "code",
                    "code": "import Head from 'next/head' export default function Page () { return ( <> < Head > < title >My page title</ title > </ Head > </> ) }"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : 'My Page Title' , } export default function Page () { return '...' }"
                },
                {
                    "type": "list",
                    "items": [
                        "Pages in the app directory are Server Components by default. This is different from the pages directory where pages are Client Components .",
                        "Data fetching has changed in app . getServerSideProps , getStaticProps and getInitialProps have been replaced with a simpler API.",
                        "The app directory uses nested folders to define routes and a special page.js file to make a route segment publicly accessible.",
                        "pages Directory app Directory Route index.js page.js / about.js about/page.js /about blog/[slug].js blog/[slug]/page.js /blog/post-1"
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend breaking down the migration of a page into two main steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Step 1: Move the default exported Page Component into a new Client Component.",
                        "Step 2: Import the new Client Component into a new page.js file inside the app directory."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know : This is the easiest migration path because it has the most comparable behavior to the pages directory. Step 1: Create a new Client Component"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a new separate file inside the app directory (i.e. app/home-page.tsx or similar) that exports a Client Component. To define Client Components, add the 'use client' directive to the top of the file (before any imports). Similar to the Pages Router, there is an optimization step to prerender Client Components to static HTML on the initial page load.",
                        "Similar to the Pages Router, there is an optimization step to prerender Client Components to static HTML on the initial page load.",
                        "Move the default exported page component from pages/index.js to app/home-page.tsx ."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use client' // This is a Client Component (same as components in the `pages` directory) // It receives data as props, has access to state and effects, and is // prerendered on the server during the initial page load. export default function HomePage ({ recentPosts }) { return ( < div > { recentPosts .map ((post) => ( < div key = { post .id}>{ post .title}</ div > ))} </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Step 2: Create a new page"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a new app/page.tsx file inside the app directory. This is a Server Component by default.",
                        "Import the home-page.tsx Client Component into the page.",
                        "If you were fetching data in pages/index.js , move the data fetching logic directly into the Server Component using the new data fetching APIs . See the data fetching upgrade guide for more details. app/page.tsx TypeScript JavaScript TypeScript // Import your Client Component import HomePage from './home-page' async function getPosts () { const res = await fetch ( 'https://...' ) const posts = await res .json () return posts } export default async function Page () { // Fetch data directly in a Server Component const recentPosts = await getPosts () // Forward fetched data to your Client Component return < HomePage recentPosts = {recentPosts} /> }",
                        "If your previous page used useRouter , you'll need to update to the new routing hooks. Learn more .",
                        "Start your development server and visit http://localhost:3000 . You should see your existing index route, now served through the app directory."
                    ]
                },
                {
                    "type": "p",
                    "text": "A new router has been added to support the new behavior in the app directory. In app , you should use the three new hooks imported from next/navigation : useRouter() , usePathname() , and useSearchParams() ."
                },
                {
                    "type": "list",
                    "items": [
                        "The new useRouter hook is imported from next/navigation and has different behavior to the useRouter hook in pages which is imported from next/router . The useRouter hook imported from next/router is not supported in the app directory but can continue to be used in the pages directory.",
                        "The useRouter hook imported from next/router is not supported in the app directory but can continue to be used in the pages directory.",
                        "The new useRouter does not return the pathname string. Use the separate usePathname hook instead.",
                        "The new useRouter does not return the query object. Search parameters and dynamic route parameters are now separate. Use the useSearchParams and useParams hooks instead.",
                        "You can use useSearchParams and usePathname together to listen to page changes. See the Router Events section for more details.",
                        "These new hooks are only supported in Client Components. They cannot be used in Server Components."
                    ]
                },
                {
                    "type": "code",
                    "code": "'use client' import { useRouter , usePathname , useSearchParams } from 'next/navigation' export default function ExampleClientComponent () { const router = useRouter () const pathname = usePathname () const searchParams = useSearchParams () // ... }"
                },
                {
                    "type": "p",
                    "text": "In addition, the new useRouter hook has the following changes:"
                },
                {
                    "type": "list",
                    "items": [
                        "isFallback has been removed because fallback has been replaced .",
                        "The locale , locales , defaultLocales , domainLocales values have been removed because built-in i18n Next.js features are no longer necessary in the app directory. Learn more about i18n .",
                        "basePath has been removed. The alternative will not be part of useRouter . It has not yet been implemented.",
                        "asPath has been removed because the concept of as has been removed from the new router.",
                        "isReady has been removed because it is no longer necessary. During static rendering , any component that uses the useSearchParams() hook will skip the prerendering step and instead be rendered on the client at runtime.",
                        "route has been removed. usePathname or useSelectedLayoutSegments() provide an alternative."
                    ]
                },
                {
                    "type": "p",
                    "text": "View the useRouter() API reference . To keep components compatible between the pages and app routers, refer to the useRouter hook from next/compat/router .\nThis is the useRouter hook from the pages directory, but intended to be used while sharing components between routers. Once you are ready to use it only on the app router, update to the new useRouter from next/navigation . The pages directory uses getServerSideProps and getStaticProps to fetch data for pages. Inside the app directory, these previous data fetching functions are replaced with a simpler API built on top of fetch() and async React Server Components."
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { // This request should be cached until manually invalidated. // Similar to `getStaticProps`. // `force-cache` is the default and can be omitted. const staticData = await fetch ( `https://...` , { cache : 'force-cache' }) // This request should be refetched on every request. // Similar to `getServerSideProps`. const dynamicData = await fetch ( `https://...` , { cache : 'no-store' }) // This request should be cached with a lifetime of 10 seconds. // Similar to `getStaticProps` with the `revalidate` option. const revalidatedData = await fetch ( `https://...` , { next : { revalidate : 10 } , }) return < div >...</ div > }"
                },
                {
                    "type": "p",
                    "text": "In the pages directory, getServerSideProps is used to fetch data on the server and forward props to the default exported React component in the file. The initial HTML for the page is prerendered from the server, followed by \"hydrating\" the page in the browser (making it interactive)."
                },
                {
                    "type": "code",
                    "code": "// `pages` directory export async function getServerSideProps () { const res = await fetch ( `https://...` ) const projects = await res .json () return { props : { projects } } } export default function Dashboard ({ projects }) { return ( < ul > { projects .map ((project) => ( < li key = { project .id}>{ project .name}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "In the App Router, we can colocate our data fetching inside our React components using Server Components . This allows us to send less JavaScript to the client, while maintaining the rendered HTML from the server. By setting the cache option to no-store , we can indicate that the fetched data should never be cached . This is similar to getServerSideProps in the pages directory."
                },
                {
                    "type": "code",
                    "code": "// `app` directory // This function can be named anything async function getProjects () { const res = await fetch ( `https://...` , { cache : 'no-store' }) const projects = await res .json () return projects } export default async function Dashboard () { const projects = await getProjects () return ( < ul > { projects .map ((project) => ( < li key = { project .id}>{ project .name}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "In the pages directory, you can retrieve request-based data based on the Node.js HTTP API. For example, you can retrieve the req object from getServerSideProps and use it to retrieve the request's cookies and headers."
                },
                {
                    "type": "code",
                    "code": "// `pages` directory export async function getServerSideProps ({ req , query }) { const authHeader = req .getHeaders ()[ 'authorization' ]; const theme = req .cookies[ 'theme' ]; return { props : { ... }} } export default function Page (props) { return ... }"
                },
                {
                    "type": "p",
                    "text": "The app directory exposes new read-only functions to retrieve request data:"
                },
                {
                    "type": "list",
                    "items": [
                        "headers : Based on the Web Headers API, and can be used inside Server Components to retrieve request headers.",
                        "cookies : Based on the Web Cookies API, and can be used inside Server Components to retrieve cookies."
                    ]
                },
                {
                    "type": "code",
                    "code": "// `app` directory import { cookies , headers } from 'next/headers' async function getData () { const authHeader = ( await headers ()) .get ( 'authorization' ) return '...' } export default async function Page () { // You can use `cookies` or `headers` inside Server Components // directly or in your data fetching function const theme = ( await cookies ()) .get ( 'theme' ) const data = await getData () return '...' }"
                },
                {
                    "type": "p",
                    "text": "In the pages directory, the getStaticProps function is used to pre-render a page at build time. This function can be used to fetch data from an external API or directly from a database, and pass this data down to the entire page as it's being generated during the build."
                },
                {
                    "type": "code",
                    "code": "// `pages` directory export async function getStaticProps () { const res = await fetch ( `https://...` ) const projects = await res .json () return { props : { projects } } } export default function Index ({ projects }) { return projects .map ((project) => < div >{ project .name}</ div >) }"
                },
                {
                    "type": "p",
                    "text": "In the app directory, data fetching with fetch() will default to cache: 'force-cache' , which will cache the request data until manually invalidated. This is similar to getStaticProps in the pages directory."
                },
                {
                    "type": "code",
                    "code": "// `app` directory // This function can be named anything async function getProjects () { const res = await fetch ( `https://...` ) const projects = await res .json () return projects } export default async function Index () { const projects = await getProjects () return projects .map ((project) => < div >{ project .name}</ div >) }"
                },
                {
                    "type": "p",
                    "text": "In the pages directory, the getStaticPaths function is used to define the dynamic paths that should be pre-rendered at build time."
                },
                {
                    "type": "code",
                    "code": "// `pages` directory import PostLayout from '@/components/post-layout' export async function getStaticPaths () { return { paths : [{ params : { id : '1' } } , { params : { id : '2' } }] , } } export async function getStaticProps ({ params }) { const res = await fetch ( `https://.../ posts / ${ params .id } ` ) const post = await res .json () return { props : { post } } } export default function Post ({ post }) { return < PostLayout post = {post} /> }"
                },
                {
                    "type": "p",
                    "text": "In the app directory, getStaticPaths is replaced with generateStaticParams . generateStaticParams behaves similarly to getStaticPaths , but has a simplified API for returning route parameters and can be used inside layouts . The return shape of generateStaticParams is an array of segments instead of an array of nested param objects or a string of resolved paths."
                },
                {
                    "type": "code",
                    "code": "// `app` directory import PostLayout from '@/components/post-layout' export async function generateStaticParams () { return [{ id : '1' } , { id : '2' }] } async function getPost (params) { const res = await fetch ( `https://.../ posts / ${ params .id } ` ) const post = await res .json () return post } export default async function Post ({ params }) { const post = await getPost (params) return < PostLayout post = {post} /> }"
                },
                {
                    "type": "p",
                    "text": "Using the name generateStaticParams is more appropriate than getStaticPaths for the new model in the app directory. The get prefix is replaced with a more descriptive generate , which sits better alone now that getStaticProps and getServerSideProps are no longer necessary. The Paths suffix is replaced by Params , which is more appropriate for nested routing with multiple dynamic segments. In the pages directory, the fallback property returned from getStaticPaths is used to define the behavior of a page that isn't pre-rendered at build time. This property can be set to true to show a fallback page while the page is being generated, false to show a 404 page, or blocking to generate the page at request time."
                },
                {
                    "type": "code",
                    "code": "// `pages` directory export async function getStaticPaths () { return { paths : [] , fallback : 'blocking' }; } export async function getStaticProps ({ params }) { ... } export default function Post ({ post }) { return ... }"
                },
                {
                    "type": "p",
                    "text": "In the app directory the config.dynamicParams property controls how params outside of generateStaticParams are handled:"
                },
                {
                    "type": "list",
                    "items": [
                        "true : (default) Dynamic segments not included in generateStaticParams are generated on demand.",
                        "false : Dynamic segments not included in generateStaticParams will return a 404."
                    ]
                },
                {
                    "type": "p",
                    "text": "This replaces the fallback: true | false | 'blocking' option of getStaticPaths in the pages directory. The fallback: 'blocking' option is not included in dynamicParams because the difference between 'blocking' and true is negligible with streaming."
                },
                {
                    "type": "code",
                    "code": "// `app` directory export const dynamicParams = true ; export async function generateStaticParams () { return [ ... ] } async function getPost (params) { ... } export default async function Post ({ params }) { const post = await getPost (params); return ... }"
                },
                {
                    "type": "p",
                    "text": "With dynamicParams set to true (the default), when a route segment is requested that hasn't been generated, it will be server-rendered and cached. In the pages directory, the getStaticProps function allows you to add a revalidate field to automatically regenerate a page after a certain amount of time."
                },
                {
                    "type": "code",
                    "code": "// `pages` directory export async function getStaticProps () { const res = await fetch ( `https://.../posts` ) const posts = await res .json () return { props : { posts } , revalidate : 60 , } } export default function Index ({ posts }) { return ( < Layout > < PostList posts = {posts} /> </ Layout > ) }"
                },
                {
                    "type": "p",
                    "text": "In the app directory, data fetching with fetch() can use revalidate , which will cache the request for the specified amount of seconds."
                },
                {
                    "type": "code",
                    "code": "// `app` directory async function getPosts () { const res = await fetch ( `https://.../posts` , { next : { revalidate : 60 } }) const data = await res .json () return data .posts } export default async function PostList () { const posts = await getPosts () return posts .map ((post) => < div >{ post .name}</ div >) }"
                },
                {
                    "type": "p",
                    "text": "API Routes continue to work in the pages/api directory without any changes. However, they have been replaced by Route Handlers in the app directory. Route Handlers allow you to create custom request handlers for a given route using the Web Request and Response APIs."
                },
                {
                    "type": "code",
                    "code": "export async function GET (request : Request ) {}"
                },
                {
                    "type": "p",
                    "text": "Good to know : If you previously used API routes to call an external API from the client, you can now use Server Components instead to securely fetch data. Learn more about data fetching . In the pages directory, global stylesheets are restricted to only pages/_app.js . With the app directory, this restriction has been lifted. Global styles can be added to any layout, page, or component."
                },
                {
                    "type": "list",
                    "items": [
                        "CSS Modules",
                        "Tailwind CSS",
                        "Global Styles",
                        "CSS-in-JS",
                        "External Stylesheets",
                        "Sass"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you're using Tailwind CSS, you'll need to add the app directory to your tailwind.config.js file:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { content : [ './app/**/*.{js,ts,jsx,tsx,mdx}' , // <-- Add this line './pages/**/*.{js,ts,jsx,tsx,mdx}' , './components/**/*.{js,ts,jsx,tsx,mdx}' , ] , }"
                },
                {
                    "type": "p",
                    "text": "You'll also need to import your global styles in your app/layout.js file:"
                },
                {
                    "type": "code",
                    "code": "import '../styles/globals.css' export default function RootLayout ({ children }) { return ( < html lang = \"en\" > < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Learn more about styling with Tailwind CSS Next.js provides Codemod transformations to help upgrade your codebase when a feature is deprecated. See Codemods for more information."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/codemods",
            "title": "Upgrading: Codemods | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Codemods are transformations that run on your codebase programmatically. This allows a large number of changes to be programmatically applied without having to manually go through every file. Next.js provides Codemod transformations to help upgrade your Next.js codebase when an API is updated or deprecated. In your terminal, navigate ( cd ) into your project's folder, then run:"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod < transfor m > < pat h >"
                },
                {
                    "type": "p",
                    "text": "Replacing <transform> and <path> with appropriate values."
                },
                {
                    "type": "list",
                    "items": [
                        "transform - name of transform",
                        "path - files or directory to transform",
                        "--dry Do a dry-run, no code will be edited",
                        "--print Prints the changed output for comparison"
                    ]
                },
                {
                    "type": "p",
                    "text": "Note : This codemod is App Router specific."
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@latest app-dir-runtime-config-experimental-edge ."
                },
                {
                    "type": "p",
                    "text": "This codemod transforms Route Segment Config runtime value experimental-edge to edge ."
                },
                {
                    "type": "code",
                    "code": "export const runtime = 'experimental-edge'"
                },
                {
                    "type": "code",
                    "code": "export const runtime = 'edge'"
                },
                {
                    "type": "p",
                    "text": "APIs that opted into dynamic rendering that previously supported synchronous access are now asynchronous. You can read more about this breaking change in the upgrade guide ."
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@latest next-async-request-api ."
                },
                {
                    "type": "p",
                    "text": "This codemod will transform dynamic APIs ( cookies() , headers() and draftMode() from next/headers ) that are now asynchronous to be properly awaited or wrapped with React.use() if applicable.\nWhen an automatic migration isn't possible, the codemod will either add a typecast (if a TypeScript file) or a comment to inform the user that it needs to be manually reviewed & updated."
                },
                {
                    "type": "code",
                    "code": "import { cookies , headers } from 'next/headers' const token = cookies () .get ( 'token' ) function useToken () { const token = cookies () .get ( 'token' ) return token } export default function Page () { const name = cookies () .get ( 'name' ) } function getHeader () { return headers () .get ( 'x-foo' ) }"
                },
                {
                    "type": "code",
                    "code": "import { use } from 'react' import { cookies , headers , type UnsafeUnwrappedCookies , type UnsafeUnwrappedHeaders , } from 'next/headers' const token = ( cookies () as unknown as UnsafeUnwrappedCookies ) .get ( 'token' ) function useToken () { const token = use ( cookies ()) .get ( 'token' ) return token } export default async function Page () { const name = ( await cookies ()) .get ( 'name' ) } function getHeader () { return ( headers () as unknown as UnsafeUnwrappedHeaders ) .get ( 'x-foo' ) }"
                },
                {
                    "type": "p",
                    "text": "When we detect property access on the params or searchParams props in the page / route entries ( page.js , layout.js , route.js , or default.js ) or the generateMetadata / generateViewport APIs,\nit will attempt to transform the callsite from a sync to an async function, and await the property access. If it can't be made async (such as with a client component), it will use React.use to unwrap the promise ."
                },
                {
                    "type": "code",
                    "code": "// page.tsx export default function Page ({ params , searchParams , } : { params : { slug : string } searchParams : { [key : string ] : string | string [] | undefined } }) { const { value } = searchParams if (value === 'foo' ) { // ... } } export function generateMetadata ({ params } : { params : { slug : string } }) { const { slug } = params return { title : `My Page - ${ slug } ` , } }"
                },
                {
                    "type": "code",
                    "code": "// page.tsx export default async function Page (props : { params : Promise <{ slug : string }> searchParams : Promise <{ [key : string ] : string | string [] | undefined }> }) { const searchParams = await props .searchParams const { value } = searchParams if (value === 'foo' ) { // ... } } export async function generateMetadata (props : { params : Promise <{ slug : string }> }) { const params = await props .params const { slug } = params return { title : `My Page - ${ slug } ` , } }"
                },
                {
                    "type": "p",
                    "text": "Good to know: When this codemod identifies a spot that might require manual intervention, but we aren't able to determine the exact fix, it will add a comment or typecast to the code to inform the user that it needs to be manually updated. These comments are prefixed with @next/codemod , and typecasts are prefixed with UnsafeUnwrapped .\nYour build will error until these comments are explicitly removed. Read more ."
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@latest next-request-geo-ip ."
                },
                {
                    "type": "p",
                    "text": "This codemod installs @vercel/functions and transforms geo and ip properties of NextRequest with corresponding @vercel/functions features."
                },
                {
                    "type": "code",
                    "code": "import type { NextRequest } from 'next/server' export function GET (req : NextRequest ) { const { geo , ip } = req }"
                },
                {
                    "type": "code",
                    "code": "import type { NextRequest } from 'next/server' import { geolocation , ipAddress } from '@vercel/functions' export function GET (req : NextRequest ) { const geo = geolocation (req) const ip = ipAddress (req) }"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@latest next-og-import ."
                },
                {
                    "type": "p",
                    "text": "This codemod moves transforms imports from next/server to next/og for usage of Dynamic OG Image Generation ."
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/server'"
                },
                {
                    "type": "code",
                    "code": "import { ImageResponse } from 'next/og'"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@latest metadata-to-viewport-export ."
                },
                {
                    "type": "p",
                    "text": "This codemod migrates certain viewport metadata to viewport export."
                },
                {
                    "type": "code",
                    "code": "export const metadata = { title : 'My App' , themeColor : 'dark' , viewport : { width : 1 , } , }"
                },
                {
                    "type": "code",
                    "code": "export const metadata = { title : 'My App' , } export const viewport = { width : 1 , themeColor : 'dark' , }"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@latest built-in-next-font ."
                },
                {
                    "type": "p",
                    "text": "This codemod uninstalls the @next/font package and transforms @next/font imports into the built-in next/font ."
                },
                {
                    "type": "code",
                    "code": "import { Inter } from '@next/font/google'"
                },
                {
                    "type": "code",
                    "code": "import { Inter } from 'next/font/google'"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@latest next-image-to-legacy-image ."
                },
                {
                    "type": "p",
                    "text": "Safely renames next/image imports in existing Next.js 10, 11, or 12 applications to next/legacy/image in Next.js 13. Also renames next/future/image to next/image ."
                },
                {
                    "type": "code",
                    "code": "import Image1 from 'next/image' import Image2 from 'next/future/image' export default function Home () { return ( < div > < Image1 src = \"/test.jpg\" width = \"200\" height = \"300\" /> < Image2 src = \"/test.png\" width = \"500\" height = \"400\" /> </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "// 'next/image' becomes 'next/legacy/image' import Image1 from 'next/legacy/image' // 'next/future/image' becomes 'next/image' import Image2 from 'next/image' export default function Home () { return ( < div > < Image1 src = \"/test.jpg\" width = \"200\" height = \"300\" /> < Image2 src = \"/test.png\" width = \"500\" height = \"400\" /> </ div > ) }"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@latest next-image-experimental ."
                },
                {
                    "type": "p",
                    "text": "Dangerously migrates from next/legacy/image to the new next/image by adding inline styles and removing unused props."
                },
                {
                    "type": "list",
                    "items": [
                        "Removes layout prop and adds style .",
                        "Removes objectFit prop and adds style .",
                        "Removes objectPosition prop and adds style .",
                        "Removes lazyBoundary prop.",
                        "Removes lazyRoot prop."
                    ]
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@latest new-link ."
                },
                {
                    "type": "p",
                    "text": "Remove <a> tags inside Link Components , or add a legacyBehavior prop to Links that cannot be auto-fixed."
                },
                {
                    "type": "code",
                    "code": "< Link href = \"/about\" > < a >About</ a > </ Link > // transforms into < Link href = \"/about\" > About </ Link > < Link href = \"/about\" > < a onClick = {() => console .log ( 'clicked' )}>About</ a > </ Link > // transforms into < Link href = \"/about\" onClick = {() => console .log ( 'clicked' )}> About </ Link >"
                },
                {
                    "type": "p",
                    "text": "In cases where auto-fixing can't be applied, the legacyBehavior prop is added. This allows your app to keep functioning using the old behavior for that particular link."
                },
                {
                    "type": "code",
                    "code": "const Component = () => < a >About</ a > < Link href = \"/about\" > < Component /> </ Link > // becomes < Link href = \"/about\" legacyBehavior > < Component /> </ Link >"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod cra-to-next"
                },
                {
                    "type": "p",
                    "text": "Migrates a Create React App project to Next.js; creating a Pages Router and necessary config to match behavior. Client-side only rendering is leveraged initially to prevent breaking compatibility due to window usage during SSR and can be enabled seamlessly to allow the gradual adoption of Next.js specific features. Please share any feedback related to this transform in this discussion ."
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod add-missing-react-import"
                },
                {
                    "type": "p",
                    "text": "Transforms files that do not import React to include the import in order for the new React JSX transform to work."
                },
                {
                    "type": "code",
                    "code": "export default class Home extends React . Component { render () { return < div >Hello World</ div > } }"
                },
                {
                    "type": "code",
                    "code": "import React from 'react' export default class Home extends React . Component { render () { return < div >Hello World</ div > } }"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod name-default-component"
                },
                {
                    "type": "p",
                    "text": "Transforms anonymous components into named components to make sure they work with Fast Refresh ."
                },
                {
                    "type": "code",
                    "code": "export default function () { return < div >Hello World</ div > }"
                },
                {
                    "type": "code",
                    "code": "export default function MyComponent () { return < div >Hello World</ div > }"
                },
                {
                    "type": "p",
                    "text": "The component will have a camel-cased name based on the name of the file, and it also works with arrow functions."
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod withamp-to-config"
                },
                {
                    "type": "p",
                    "text": "Transforms the withAmp HOC into Next.js 9 page configuration."
                },
                {
                    "type": "code",
                    "code": "// Before import { withAmp } from 'next/amp' function Home () { return < h1 >My AMP Page</ h1 > } export default withAmp (Home)"
                },
                {
                    "type": "code",
                    "code": "// After export default function Home () { return < h1 >My AMP Page</ h1 > } export const config = { amp : true , }"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod url-to-withrouter"
                },
                {
                    "type": "p",
                    "text": "Transforms the deprecated automatically injected url property on top level pages to using withRouter and the router property it injects. Read more here: https://nextjs.org/docs/messages/url-deprecated"
                },
                {
                    "type": "code",
                    "code": "import React from 'react' export default class extends React . Component { render () { const { pathname } = this . props .url return < div >Current pathname: {pathname}</ div > } }"
                },
                {
                    "type": "code",
                    "code": "import React from 'react' import { withRouter } from 'next/router' export default withRouter ( class extends React . Component { render () { const { pathname } = this . props .router return < div >Current pathname: {pathname}</ div > } } )"
                },
                {
                    "type": "p",
                    "text": "This is one case. All the cases that are transformed (and tested) can be found in the __testfixtures__ directory ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/from-create-react-app",
            "title": "Upgrading: Migrating from Create React App | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This guide will help you migrate an existing Create React App site to Next.js. There are several reasons why you might want to switch from Create React App to Next.js: Create React App uses purely client-side React. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "The browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load data.",
                        "Your application code grows with every new feature and dependency you add."
                    ]
                },
                {
                    "type": "p",
                    "text": "The previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router. A common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data. While fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls. With built-in support for streaming through React Suspense , you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls. This enables you to build pages that are faster to load and eliminate layout shifts . Depending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN. Next.js Middleware allows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation and internationalization . Images , fonts , and third-party scripts often have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you. Our goal with this migration is to get a working Next.js application as quickly as possible, so that you can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely client-side application (SPA) without migrating your existing router. This helps minimize the chances of encountering issues during the migration process and reduces merge conflicts. The first thing you need to do is to install next as a dependency:"
                },
                {
                    "type": "code",
                    "code": "npm install next@latest"
                },
                {
                    "type": "p",
                    "text": "Create a next.config.mjs at the root of your project. This file will hold your Next.js configuration options ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { output : 'export' , // Outputs a Single-Page Application (SPA). distDir : './build' , // Changes the build output directory to `./dist`. } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "A Next.js App Router application must include a root layout file, which is a React Server Component that will wrap all pages in your application. This file is defined at the top level of the app directory. The closest equivalent to the root layout file in a CRA application is the index.html file, which contains your <html> , <head> , and <body> tags. In this step, you'll convert your index.html file into a root layout file:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a new app directory in your src directory.",
                        "Create a new layout.tsx file inside that app directory:"
                    ]
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return '...' }"
                },
                {
                    "type": "p",
                    "text": "Good to know : .js , .jsx , or .tsx extensions can be used for Layout files. Copy the content of your index.html file into the previously created <RootLayout> component while replacing the body.div#root and body.noscript tags with <div id=\"root\">{children}</div> :"
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < head > < meta charSet = \"UTF-8\" /> < link rel = \"icon\" href = \"%PUBLIC_URL%/favicon.ico\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < title >React App</ title > < meta name = \"description\" content = \"Web site created...\" /> </ head > < body > < div id = \"root\" >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know : Next.js ignores CRA's public/manifest.json file, additional iconography (except favicon , icon , and apple-icon ), and testing configuration , but if these are requirements, Next.js also supports these options. See the Metadata API and Testing docs for more information. Next.js already includes by default the meta charset and meta viewport tags, so you can safely remove those from your <head> :"
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < head > < link rel = \"icon\" href = \"%PUBLIC_URL%/favicon.ico\" /> < title >React App</ title > < meta name = \"description\" content = \"Web site created...\" /> </ head > < body > < div id = \"root\" >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Any metadata files such as favicon.ico , icon.png , robots.txt are automatically added to the application <head> tag as long as you have them placed into the top level of the app directory. After moving all supported files into the app directory you can safely delete their <link> tags:"
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < head > < title >React App</ title > < meta name = \"description\" content = \"Web site created...\" /> </ head > < body > < div id = \"root\" >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Finally, Next.js can manage your last <head> tags with the Metadata API . Move your final metadata info into an exported metadata object :"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : 'React App' , description : 'Web site created with Next.js.' , } export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body > < div id = \"root\" >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "With the above changes, you shifted from declaring everything in your index.html to using Next.js' convention-based approach built into the framework ( Metadata API ). This approach enables you to more easily improve your SEO and web shareability of your pages. Like Create React App, Next.js has built-in support for CSS Modules . If you're using a global CSS file, import it into your app/layout.tsx file:"
                },
                {
                    "type": "code",
                    "code": "import '../index.css' // ..."
                },
                {
                    "type": "p",
                    "text": "If you're using Tailwind, you'll need to install postcss and autoprefixer :"
                },
                {
                    "type": "code",
                    "code": "npm install postcss autoprefixer"
                },
                {
                    "type": "p",
                    "text": "Then, create a postcss.config.js file at the root of your project:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { plugins : { tailwindcss : {} , autoprefixer : {} , } , }"
                },
                {
                    "type": "p",
                    "text": "On Next.js you declare an entrypoint for your application by creating a page.tsx file. The closest equivalent of this file on CRA is your src/index.tsx file. In this step, you’ll set up the entry point of your application. Create a [[...slug]] directory in your app directory. Since this guide is aiming to first set up our Next.js as an SPA (Single Page Application), you need your page entry point to catch all possible routes of your application. For that, create a new [[...slug]] directory in your app directory. This directory is what is called an optional catch-all route segment . Next.js uses a file-system based router where folders are used to define routes. This special directory will make sure that all routes of your application will be directed to its containing page.tsx file. Create a new page.tsx file inside the app/[[...slug]] directory with the following content:"
                },
                {
                    "type": "code",
                    "code": "export function generateStaticParams () { return [{ slug : [ '' ] }] } export default function Page () { return '...' // We'll update this }"
                },
                {
                    "type": "p",
                    "text": "This file is a Server Component . When you run next build , the file is prerendered into a static asset. It does not require any dynamic code. This file imports our global CSS and tells generateStaticParams we are only going to generate one route, the index route at / . Now, let's move the rest of our CRA application which will run client-only."
                },
                {
                    "type": "code",
                    "code": "'use client' import dynamic from 'next/dynamic' const App = dynamic (() => import ( '../../App' ) , { ssr : false }) export function ClientOnly () { return < App /> }"
                },
                {
                    "type": "p",
                    "text": "This file is a Client Component , defined by the 'use client' directive. Client Components are still prerendered to HTML on the server before being sent to the client. Since we want a client-only application to start, we can configure Next.js to disable prerendering from the App component down."
                },
                {
                    "type": "code",
                    "code": "const App = dynamic (() => import ( '../../App' ) , { ssr : false })"
                },
                {
                    "type": "p",
                    "text": "Now, update your entrypoint page to use the new component:"
                },
                {
                    "type": "code",
                    "code": "import { ClientOnly } from './client' export function generateStaticParams () { return [{ slug : [ '' ] }] } export default function Page () { return < ClientOnly /> }"
                },
                {
                    "type": "p",
                    "text": "Next.js handles static image imports slightly different from CRA. With CRA, importing an image file will return its public URL as a string:"
                },
                {
                    "type": "code",
                    "code": "import image from './img.png' export default function App () { return < img src = {image} /> }"
                },
                {
                    "type": "p",
                    "text": "With Next.js, static image imports return an object. The object can then be used directly with the Next.js <Image> component , or you can use the object's src property with your existing <img> tag. The <Image> component has the added benefits of automatic image optimization . The <Image> component automatically sets the width and height attributes of the resulting <img> based on the image's dimensions. This prevents layout shifts when the image loads. However, this can cause issues if your app contains images with only one of their dimensions being styled without the other styled to auto . When not styled to auto , the dimension will default to the <img> dimension attribute's value, which can cause the image to appear distorted. Keeping the <img> tag will reduce the amount of changes in your application and prevent the above issues. You can then optionally later migrate to the <Image> component to take advantage of optimizing images by configuring a loader , or moving to the default Next.js server which has automatic image optimization. Convert absolute import paths for images imported from /public into relative imports:"
                },
                {
                    "type": "code",
                    "code": "// Before import logo from '/logo.png' // After import logo from '../public/logo.png'"
                },
                {
                    "type": "p",
                    "text": "Pass the image src property instead of the whole image object to your <img> tag:"
                },
                {
                    "type": "code",
                    "code": "// Before < img src = {logo} /> // After < img src = { logo .src} />"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can reference the public URL for the image asset based on the filename. For example, public/logo.png will serve the image at /logo.png for your application, which would be the src value. Warning: If you're using TypeScript, you might encounter type errors when accessing the src property. To fix them, you need to add next-env.d.ts to the include array of your tsconfig.json file. Next.js will automatically generate this file when you run your application on step 9. Next.js has support for .env environment variables similar to CRA. The main difference is the prefix used to expose environment variables on the client-side. Change all environment variables with the REACT_APP_ prefix to NEXT_PUBLIC_ . You should now be able to run your application to test if you successfully migrated to Next.js. But before that, you need to update your scripts in your package.json with Next.js related commands, and add .next , and next-env.d.ts to your .gitignore file:"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"next dev\" , \"build\" : \"next build\" , \"start\" : \"npx serve@latest ./build\" } }"
                },
                {
                    "type": "code",
                    "code": "# ... .next next-env.d.ts"
                },
                {
                    "type": "p",
                    "text": "Now run npm run dev , and open http://localhost:3000 . You should see your application now running on Next.js. You can now clean up your codebase from Create React App related artifacts:"
                },
                {
                    "type": "list",
                    "items": [
                        "Delete public/index.html",
                        "Delete src/index.tsx",
                        "Delete src/react-app-env.d.ts",
                        "Delete reportWebVitals setup",
                        "Uninstall CRA dependencies ( react-scripts )"
                    ]
                },
                {
                    "type": "p",
                    "text": "Create React App and Next.js both default to using webpack for bundling. When migrating your CRA application to Next.js, you might have a custom webpack configuration you're looking to migrate. Next.js supports providing a custom webpack configuration . Further, Next.js has support for Turbopack through next dev --turbopack to improve your local dev performance. Turbopack supports some webpack loaders as well for compatibility and incremental adoption. If everything went according to plan, you now have a functioning Next.js application running as a single-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but you can now start making incremental changes to reap all the benefits. Here's what you might want to do next:"
                },
                {
                    "type": "list",
                    "items": [
                        "Migrate from React Router to the Next.js App Router to get: Automatic code splitting Streaming Server-Rendering React Server Components",
                        "Automatic code splitting",
                        "Streaming Server-Rendering",
                        "React Server Components",
                        "Optimize images with the <Image> component",
                        "Optimize fonts with next/font",
                        "Optimize third-party scripts with the <Script> component",
                        "Update your ESLint configuration to support Next.js rules"
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: Using a static export does not currently support using the useParams hook."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/from-vite",
            "title": "Upgrading: Migrating from Vite | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This guide will help you migrate an existing Vite application to Next.js. There are several reasons why you might want to switch from Vite to Next.js: If you have built your application with the default Vite plugin for React , your application is a purely client-side application. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "The browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load some data.",
                        "Your application code grows with every new feature and extra dependency you add."
                    ]
                },
                {
                    "type": "p",
                    "text": "The previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router. A common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data. While fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls. With built-in support for streaming through React Suspense , you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls. This enables you to build pages that are faster to load and eliminate layout shifts . Depending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN. Next.js Middleware allows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation and internationalization . Images , fonts , and third-party scripts often have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you. Our goal with this migration is to get a working Next.js application as quickly as possible, so that\nyou can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely\nclient-side application (SPA) without migrating your existing router. This helps minimize the\nchances of encountering issues during the migration process and reduces merge conflicts. The first thing you need to do is to install next as a dependency:"
                },
                {
                    "type": "code",
                    "code": "npm install next@latest"
                },
                {
                    "type": "p",
                    "text": "Create a next.config.mjs at the root of your project. This file will hold your Next.js configuration options ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { output : 'export' , // Outputs a Single-Page Application (SPA). distDir : './dist' , // Changes the build output directory to `./dist/`. } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Good to know: You can use either .js or .mjs for your Next.js configuration file. If you're using TypeScript, you need to update your tsconfig.json file with the following changes\nto make it compatible with Next.js. If you're not using TypeScript, you can skip this step."
                },
                {
                    "type": "list",
                    "items": [
                        "Remove the project reference to tsconfig.node.json",
                        "Add ./dist/types/**/*.ts and ./next-env.d.ts to the include array",
                        "Add ./node_modules to the exclude array",
                        "Add { \"name\": \"next\" } to the plugins array in compilerOptions : \"plugins\": [{ \"name\": \"next\" }]",
                        "Set esModuleInterop to true : \"esModuleInterop\": true",
                        "Set jsx to preserve : \"jsx\": \"preserve\"",
                        "Set allowJs to true : \"allowJs\": true",
                        "Set forceConsistentCasingInFileNames to true : \"forceConsistentCasingInFileNames\": true",
                        "Set incremental to true : \"incremental\": true"
                    ]
                },
                {
                    "type": "p",
                    "text": "Here's an example of a working tsconfig.json with those changes:"
                },
                {
                    "type": "code",
                    "code": "{ \"compilerOptions\" : { \"target\" : \"ES2020\" , \"useDefineForClassFields\" : true , \"lib\" : [ \"ES2020\" , \"DOM\" , \"DOM.Iterable\" ] , \"module\" : \"ESNext\" , \"esModuleInterop\" : true , \"skipLibCheck\" : true , \"moduleResolution\" : \"bundler\" , \"allowImportingTsExtensions\" : true , \"resolveJsonModule\" : true , \"isolatedModules\" : true , \"noEmit\" : true , \"jsx\" : \"preserve\" , \"strict\" : true , \"noUnusedLocals\" : true , \"noUnusedParameters\" : true , \"noFallthroughCasesInSwitch\" : true , \"allowJs\" : true , \"forceConsistentCasingInFileNames\" : true , \"incremental\" : true , \"plugins\" : [{ \"name\" : \"next\" }] } , \"include\" : [ \"./src\" , \"./dist/types/**/*.ts\" , \"./next-env.d.ts\" ] , \"exclude\" : [ \"./node_modules\" ] }"
                },
                {
                    "type": "p",
                    "text": "You can find more information about configuring TypeScript on the Next.js docs . A Next.js App Router application must include a root layout file, which is a React Server Component that will wrap all pages in your application. This file is defined at the top level of the app directory. The closest equivalent to the root layout file in a Vite application is the index.html file , which contains your <html> , <head> , and <body> tags. In this step, you'll convert your index.html file into a root layout file:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a new app directory in your src directory.",
                        "Create a new layout.tsx file inside that app directory:"
                    ]
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return '...' }"
                },
                {
                    "type": "p",
                    "text": "Good to know : .js , .jsx , or .tsx extensions can be used for Layout files."
                },
                {
                    "type": "list",
                    "items": [
                        "Copy the content of your index.html file into the previously created <RootLayout> component while\nreplacing the body.div#root and body.script tags with <div id=\"root\">{children}</div> :"
                    ]
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < link rel = \"icon\" type = \"image/svg+xml\" href = \"/icon.svg\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title >My App</ title > < meta name = \"description\" content = \"My App is a...\" /> </ head > < body > < div id = \"root\" >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Next.js already includes by default the meta charset and meta viewport tags, so you\ncan safely remove those from your <head> :"
                    ]
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < head > < link rel = \"icon\" type = \"image/svg+xml\" href = \"/icon.svg\" /> < title >My App</ title > < meta name = \"description\" content = \"My App is a...\" /> </ head > < body > < div id = \"root\" >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Any metadata files such as favicon.ico , icon.png , robots.txt are automatically added to the application <head> tag as long as you have them placed into the top level of the app directory. After\nmoving all supported files into the app directory you can safely delete their <link> tags:"
                    ]
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < head > < title >My App</ title > < meta name = \"description\" content = \"My App is a...\" /> </ head > < body > < div id = \"root\" >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Finally, Next.js can manage your last <head> tags with the Metadata API . Move your final metadata\ninfo into an exported metadata object :"
                    ]
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' export const metadata : Metadata = { title : 'My App' , description : 'My App is a...' , } export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body > < div id = \"root\" >{children}</ div > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "With the above changes, you shifted from declaring everything in your index.html to using Next.js'\nconvention-based approach built into the framework\n( Metadata API ). This approach enables you\nto more easily improve your SEO and web shareability of your pages. On Next.js you declare an entrypoint for your application by creating a page.tsx file. The\nclosest equivalent of this file on Vite is your main.tsx file. In this step, you’ll set up the\nentrypoint of your application."
                },
                {
                    "type": "list",
                    "items": [
                        "Create a [[...slug]] directory in your app directory."
                    ]
                },
                {
                    "type": "p",
                    "text": "Since in this guide we're aiming first to set up our Next.js as an SPA (Single Page Application), you need your page entrypoint to catch all possible routes of your application. For that, create a new [[...slug]] directory in your app directory. This directory is what is called an optional catch-all route segment . Next.js uses a file-system based router where folders are used to define routes. This special directory will make sure that all routes of your application will be directed to its containing page.tsx file."
                },
                {
                    "type": "list",
                    "items": [
                        "Create a new page.tsx file inside the app/[[...slug]] directory with the following content:"
                    ]
                },
                {
                    "type": "code",
                    "code": "import '../../index.css' export function generateStaticParams () { return [{ slug : [ '' ] }] } export default function Page () { return '...' // We'll update this }"
                },
                {
                    "type": "p",
                    "text": "Good to know : .js , .jsx , or .tsx extensions can be used for Page files. This file is a Server Component . When you run next build , the file is prerendered into a static asset. It does not require any dynamic code. This file imports our global CSS and tells generateStaticParams we are only going to generate one route, the index route at / . Now, let's move the rest of our Vite application which will run client-only."
                },
                {
                    "type": "code",
                    "code": "'use client' import React from 'react' import dynamic from 'next/dynamic' const App = dynamic (() => import ( '../../App' ) , { ssr : false }) export function ClientOnly () { return < App /> }"
                },
                {
                    "type": "p",
                    "text": "This file is a Client Component , defined by the 'use client' directive. Client Components are still prerendered to HTML on the server before being sent to the client. Since we want a client-only application to start, we can configure Next.js to disable prerendering from the App component down."
                },
                {
                    "type": "code",
                    "code": "const App = dynamic (() => import ( '../../App' ) , { ssr : false })"
                },
                {
                    "type": "p",
                    "text": "Now, update your entrypoint page to use the new component:"
                },
                {
                    "type": "code",
                    "code": "import '../../index.css' import { ClientOnly } from './client' export function generateStaticParams () { return [{ slug : [ '' ] }] } export default function Page () { return < ClientOnly /> }"
                },
                {
                    "type": "p",
                    "text": "Next.js handles static image imports slightly different from Vite. With Vite, importing an image\nfile will return its public URL as a string:"
                },
                {
                    "type": "code",
                    "code": "import image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production export default function App () { return < img src = {image} /> }"
                },
                {
                    "type": "p",
                    "text": "With Next.js, static image imports return an object. The object can then be used directly with the\nNext.js <Image> component , or you can use the object's src property with your existing <img> tag. The <Image> component has the added benefits of automatic image optimization . The <Image> component automatically sets the width and height attributes of the resulting <img> based on\nthe image's dimensions. This prevents layout shifts when the image loads. However, this can cause\nissues if your app contains images with only one of their dimensions being styled without the other\nstyled to auto . When not styled to auto , the dimension will default to the <img> dimension\nattribute's value, which can cause the image to appear distorted. Keeping the <img> tag will reduce the amount of changes in your application and prevent the above\nissues. You can then optionally later migrate to the <Image> component to take advantage of optimizing images by configuring a loader , or moving to the default Next.js server which has automatic image optimization."
                },
                {
                    "type": "list",
                    "items": [
                        "Convert absolute import paths for images imported from /public into relative imports:"
                    ]
                },
                {
                    "type": "code",
                    "code": "// Before import logo from '/logo.png' // After import logo from '../public/logo.png'"
                },
                {
                    "type": "list",
                    "items": [
                        "Pass the image src property instead of the whole image object to your <img> tag:"
                    ]
                },
                {
                    "type": "code",
                    "code": "// Before < img src = {logo} /> // After < img src = { logo .src} />"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can reference the public URL for the image asset based on the filename. For example, public/logo.png will serve the image at /logo.png for your application, which would be the src value. Warning: If you're using TypeScript, you might encounter type errors when accessing the src property. You can safely ignore those for now. They will be fixed by the end of this guide. Next.js has support for .env environment variables similar to Vite. The main difference is the prefix used to expose environment variables on the\nclient-side."
                },
                {
                    "type": "list",
                    "items": [
                        "Change all environment variables with the VITE_ prefix to NEXT_PUBLIC_ ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vite exposes a few built-in environment variables on the special import.meta.env object which\naren’t supported by Next.js. You need to update their usage as follows:"
                },
                {
                    "type": "list",
                    "items": [
                        "import.meta.env.MODE ⇒ process.env.NODE_ENV",
                        "import.meta.env.PROD ⇒ process.env.NODE_ENV === 'production'",
                        "import.meta.env.DEV ⇒ process.env.NODE_ENV !== 'production'",
                        "import.meta.env.SSR ⇒ typeof window !== 'undefined'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js also doesn't provide a built-in BASE_URL environment variable. However, you can still\nconfigure one, if you need it:"
                },
                {
                    "type": "list",
                    "items": [
                        "Add the following to your .env file:"
                    ]
                },
                {
                    "type": "code",
                    "code": "# ... NEXT_PUBLIC_BASE_PATH = \"/some-base-path\""
                },
                {
                    "type": "list",
                    "items": [
                        "Set basePath to process.env.NEXT_PUBLIC_BASE_PATH in your next.config.mjs file:"
                    ]
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { output : 'export' , // Outputs a Single-Page Application (SPA). distDir : './dist' , // Changes the build output directory to `./dist/`. basePath : process . env . NEXT_PUBLIC_BASE_PATH , // Sets the base path to `/some-base-path`. } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "You should now be able to run your application to test if you successfully migrated to Next.js. But\nbefore that, you need to update your scripts in your package.json with Next.js related commands,\nand add .next and next-env.d.ts to your .gitignore :"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"next dev\" , \"build\" : \"next build\" , \"start\" : \"next start\" } }"
                },
                {
                    "type": "code",
                    "code": "# ... .next next-env.d.ts dist"
                },
                {
                    "type": "p",
                    "text": "Now run npm run dev , and open http://localhost:3000 . You should see your application now running on Next.js. Example: Check out this pull request for a\nworking example of a Vite application migrated to Next.js. You can now clean up your codebase from Vite related artifacts:"
                },
                {
                    "type": "list",
                    "items": [
                        "Delete main.tsx",
                        "Delete index.html",
                        "Delete vite-env.d.ts",
                        "Delete tsconfig.node.json",
                        "Delete vite.config.ts",
                        "Uninstall Vite dependencies"
                    ]
                },
                {
                    "type": "p",
                    "text": "If everything went according to plan, you now have a functioning Next.js application running as a\nsingle-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but\nyou can now start making incremental changes to reap all the benefits. Here's what you might want to\ndo next:"
                },
                {
                    "type": "list",
                    "items": [
                        "Migrate from React Router to the Next.js App Router to get: Automatic code splitting Streaming Server-Rendering React Server Components",
                        "Automatic code splitting",
                        "Streaming Server-Rendering",
                        "React Server Components",
                        "Optimize images with the <Image> component",
                        "Optimize fonts with next/font",
                        "Optimize third-party scripts with the <Script> component",
                        "Update your ESLint configuration to support Next.js rules"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/version-14",
            "title": "Upgrading: Version 14 | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "To update to Next.js version 14, run the following command using your preferred package manager:"
                },
                {
                    "type": "code",
                    "code": "npm i next@next- 14 react@latest react-dom@latest && npm i eslint-config-next@next- 14 -D"
                },
                {
                    "type": "code",
                    "code": "yarn add next@next- 14 react@latest react-dom@latest && yarn add eslint-config-next@next- 14 -D"
                },
                {
                    "type": "code",
                    "code": "pnpm i next@next- 14 react@latest react-dom@latest && pnpm i eslint-config-next@next- 14 -D"
                },
                {
                    "type": "code",
                    "code": "bun add next@next- 14 react@latest react-dom@latest && bun add eslint-config-next@next- 14 -D"
                },
                {
                    "type": "p",
                    "text": "Good to know: If you are using TypeScript, ensure you also upgrade @types/react and @types/react-dom to their latest versions."
                },
                {
                    "type": "list",
                    "items": [
                        "The minimum Node.js version has been bumped from 16.14 to 18.17, since 16.x has reached end-of-life.",
                        "The next export command has been removed in favor of output: 'export' config. Please see the docs for more information.",
                        "The next/server import for ImageResponse was renamed to next/og . A codemod is available to safely and automatically rename your imports.",
                        "The @next/font package has been fully removed in favor of the built-in next/font . A codemod is available to safely and automatically rename your imports.",
                        "The WASM target for next-swc has been removed."
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/building-your-application/upgrading/version-15",
            "title": "Upgrading: Version 15 | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "To update to Next.js version 15, you can use the upgrade codemod:"
                },
                {
                    "type": "code",
                    "code": "npx @next/codemod@canary upgrade latest"
                },
                {
                    "type": "p",
                    "text": "If you prefer to do it manually, ensure that you're installing the latest Next & React RC, e.g.:"
                },
                {
                    "type": "code",
                    "code": "npm i next@latest react@rc react-dom@rc eslint-config-next@latest"
                },
                {
                    "type": "list",
                    "items": [
                        "If you see a peer dependencies warning, you may need to update react and react-dom to the suggested versions, or you use the --force or --legacy-peer-deps flag to ignore the warning. This won't be necessary once both Next.js 15 and React 19 are stable."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The minimum versions of react and react-dom is now 19.",
                        "useFormState has been replaced by useActionState . The useFormState hook is still available in React 19, but it is deprecated and will be removed in a future release. useActionState is recommended and includes additional properties like reading the pending state directly. Learn more .",
                        "useFormStatus now includes additional keys like data , method , and action . If you are not using React 19, only the pending key is available. Learn more .",
                        "Read more in the React 19 upgrade guide ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Good to know: If you are using TypeScript, ensure you also upgrade @types/react and @types/react-dom to their latest versions. Previously synchronous Dynamic APIs that rely on runtime information are now asynchronous :"
                },
                {
                    "type": "list",
                    "items": [
                        "cookies",
                        "headers",
                        "draftMode",
                        "params in layout.js , page.js , route.js , default.js , opengraph-image , twitter-image , icon , and apple-icon .",
                        "searchParams in page.js"
                    ]
                },
                {
                    "type": "p",
                    "text": "To ease the burden of migration, a codemod is available to automate the process and the APIs can temporarily be accessed synchronously."
                },
                {
                    "type": "code",
                    "code": "import { cookies } from 'next/headers' // Before const cookieStore = cookies () const token = cookieStore .get ( 'token' ) // After const cookieStore = await cookies () const token = cookieStore .get ( 'token' )"
                },
                {
                    "type": "code",
                    "code": "import { cookies , type UnsafeUnwrappedCookies } from 'next/headers' // Before const cookieStore = cookies () const token = cookieStore .get ( 'token' ) // After const cookieStore = cookies () as unknown as UnsafeUnwrappedCookies // will log a warning in dev const token = cookieStore .get ( 'token' )"
                },
                {
                    "type": "code",
                    "code": "import { headers } from 'next/headers' // Before const headersList = headers () const userAgent = headersList .get ( 'user-agent' ) // After const headersList = await headers () const userAgent = headersList .get ( 'user-agent' )"
                },
                {
                    "type": "code",
                    "code": "import { headers , type UnsafeUnwrappedHeaders } from 'next/headers' // Before const headersList = headers () const userAgent = headersList .get ( 'user-agent' ) // After const headersList = headers () as unknown as UnsafeUnwrappedHeaders // will log a warning in dev const userAgent = headersList .get ( 'user-agent' )"
                },
                {
                    "type": "code",
                    "code": "import { draftMode } from 'next/headers' // Before const { isEnabled } = draftMode () // After const { isEnabled } = await draftMode ()"
                },
                {
                    "type": "code",
                    "code": "import { draftMode , type UnsafeUnwrappedDraftMode } from 'next/headers' // Before const { isEnabled } = draftMode () // After // will log a warning in dev const { isEnabled } = draftMode () as unknown as UnsafeUnwrappedDraftMode"
                },
                {
                    "type": "code",
                    "code": "// Before type Params = { slug : string } export function generateMetadata ({ params } : { params : Params }) { const { slug } = params } export default async function Layout ({ children , params , } : { children : React . ReactNode params : Params }) { const { slug } = params } // After type Params = Promise <{ slug : string }> export async function generateMetadata ({ params } : { params : Params }) { const { slug } = await params } export default async function Layout ({ children , params , } : { children : React . ReactNode params : Params }) { const { slug } = await params }"
                },
                {
                    "type": "code",
                    "code": "// Before type Params = { slug : string } export default function Layout ({ children , params , } : { children : React . ReactNode params : Params }) { const { slug } = params } // After import { use } from 'react' type Params = Promise <{ slug : string }> export default function Layout (props : { children : React . ReactNode params : Params }) { const params = use ( props .params) const slug = params .slug }"
                },
                {
                    "type": "code",
                    "code": "// Before type Params = { slug : string } type SearchParams = { [key : string ] : string | string [] | undefined } export function generateMetadata ({ params , searchParams , } : { params : Params searchParams : SearchParams }) { const { slug } = params const { query } = searchParams } export default async function Page ({ params , searchParams , } : { params : Params searchParams : SearchParams }) { const { slug } = params const { query } = searchParams } // After type Params = Promise <{ slug : string }> type SearchParams = Promise <{ [key : string ] : string | string [] | undefined }> export async function generateMetadata (props : { params : Params searchParams : SearchParams }) { const params = await props .params const searchParams = await props .searchParams const slug = params .slug const query = searchParams .query } export default async function Page (props : { params : Params searchParams : SearchParams }) { const params = await props .params const searchParams = await props .searchParams const slug = params .slug const query = searchParams .query }"
                },
                {
                    "type": "code",
                    "code": "'use client' // Before type Params = { slug : string } type SearchParams = { [key : string ] : string | string [] | undefined } export default function Page ({ params , searchParams , } : { params : Params searchParams : SearchParams }) { const { slug } = params const { query } = searchParams } // After import { use } from 'react' type Params = Promise <{ slug : string }> type SearchParams = Promise <{ [key : string ] : string | string [] | undefined }> export default function Page (props : { params : Params searchParams : SearchParams }) { const params = use ( props .params) const searchParams = use ( props .searchParams) const slug = params .slug const query = searchParams .query }"
                },
                {
                    "type": "code",
                    "code": "// Before export default function Page ({ params , searchParams }) { const { slug } = params const { query } = searchParams } // After import { use } from \"react\" export default function Page (props) { const params = use ( props .params) const searchParams = use ( props .searchParams) const slug = params .slug const query = searchParams .query }"
                },
                {
                    "type": "code",
                    "code": "// Before type Params = { slug : string } export async function GET (request : Request , segmentData : { params : Params }) { const params = segmentData .params const slug = params .slug } // After type Params = Promise <{ slug : string }> export async function GET (request : Request , segmentData : { params : Params }) { const params = await segmentData .params const slug = params .slug }"
                },
                {
                    "type": "code",
                    "code": "// Before export async function GET (request , segmentData) { const params = segmentData .params const slug = params .slug } // After export async function GET (request , segmentData) { const params = await segmentData .params const slug = params .slug }"
                },
                {
                    "type": "p",
                    "text": "The runtime segment configuration previously supported a value of experimental-edge in addition to edge . Both configurations refer to the same thing, and to simplify the options, we will now error if experimental-edge is used. To fix this, update your runtime configuration to edge . A codemod is available to automatically do this. fetch requests are no longer cached by default. To opt specific fetch requests into caching, you can pass the cache: 'force-cache' option."
                },
                {
                    "type": "code",
                    "code": "export default async function RootLayout () { const a = await fetch ( 'https://...' ) // Not Cached const b = await fetch ( 'https://...' , { cache : 'force-cache' }) // Cached // ... }"
                },
                {
                    "type": "p",
                    "text": "To opt all fetch requests in a layout or page into caching, you can use the export const fetchCache = 'default-cache' segment config option . If individual fetch requests specify a cache option, that will be used instead."
                },
                {
                    "type": "code",
                    "code": "// Since this is the root layout, all fetch requests in the app // that don't set their own cache option will be cached. export const fetchCache = 'default-cache' export default async function RootLayout () { const a = await fetch ( 'https://...' ) // Cached const b = await fetch ( 'https://...' , { cache : 'no-store' }) // Not cached // ... }"
                },
                {
                    "type": "p",
                    "text": "GET functions in Route Handlers are no longer cached by default. To opt GET methods into caching, you can use a route config option such as export const dynamic = 'force-static' in your Route Handler file."
                },
                {
                    "type": "code",
                    "code": "export const dynamic = 'force-static' export async function GET () {}"
                },
                {
                    "type": "p",
                    "text": "When navigating between pages via <Link> or useRouter , page segments are no longer reused from the client-side router cache. However, they are still reused during browser backward and forward navigation and for shared layouts. To opt page segments into caching, you can use the staleTimes config option:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { experimental : { staleTimes : { dynamic : 30 , static : 180 , } , } , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "Layouts and loading states are still cached and reused on navigation. The @next/font package has been removed in favor of the built-in next/font . A codemod is available to safely and automatically rename your imports."
                },
                {
                    "type": "code",
                    "code": "// Before import { Inter } from '@next/font/google' // After import { Inter } from 'next/font/google'"
                },
                {
                    "type": "p",
                    "text": "experimental.bundlePagesExternals is now stable and renamed to bundlePagesRouterDependencies ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { // Before experimental : { bundlePagesExternals : true , } , // After bundlePagesRouterDependencies : true , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "experimental.serverComponentsExternalPackages is now stable and renamed to serverExternalPackages ."
                },
                {
                    "type": "code",
                    "code": "/** @type {import('next').NextConfig} */ const nextConfig = { // Before experimental : { serverComponentsExternalPackages : [ 'package-name' ] , } , // After serverExternalPackages : [ 'package-name' ] , } module . exports = nextConfig"
                },
                {
                    "type": "p",
                    "text": "Auto instrumentation for Speed Insights was removed in Next.js 15. To continue using Speed Insights, follow the Vercel Speed Insights Quickstart guide. The geo and ip properties on NextRequest have been removed as these values are provided by your hosting provider. A codemod is available to automate this migration. If you are using Vercel, you can alternatively use the geolocation and ipAddress functions from @vercel/functions instead:"
                },
                {
                    "type": "code",
                    "code": "import { geolocation } from '@vercel/functions' import type { NextRequest } from 'next/server' export function middleware (request : NextRequest ) { const { city } = geolocation (request) // ... }"
                },
                {
                    "type": "code",
                    "code": "import { ipAddress } from '@vercel/functions' import type { NextRequest } from 'next/server' export function middleware (request : NextRequest ) { const ip = ipAddress (request) // ... }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/examples",
            "title": "App Router: Examples | Next.js",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Using the fetch API",
                        "Using an ORM or database client",
                        "Reading search params on the server",
                        "Reading search params on the client"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Using ISR to revalidate data after a certain time",
                        "Using ISR to revalidate data on-demand"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Showing a pending state while submitting a form",
                        "Server-side form validation",
                        "Handling expected errors",
                        "Handling unexpected exceptions",
                        "Showing optimistic UI updates",
                        "Programmatic form submission"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Passing additional values",
                        "Revalidating data",
                        "Redirecting",
                        "Setting cookies",
                        "Deleting cookies"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Creating an RSS feed",
                        "Creating an Open Graph image",
                        "Creating a sitemap",
                        "Creating a robots.txt file",
                        "Creating a custom 404 page",
                        "Creating a custom 500 page"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Creating a sign-up form",
                        "Stateless, cookie-based session management",
                        "Stateful, database-backed session management",
                        "Managing authorization"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Vitest",
                        "Jest",
                        "Playwright",
                        "Cypress"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Creating a Dockerfile",
                        "Creating a static export (SPA)",
                        "Configuring caching when self-hosting",
                        "Configuring Image Optimization when self-hosting"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/getting-started",
            "title": "App Router: Getting Started | Next.js",
            "content": []
        },
        {
            "url": "https://nextjs.org/docs/app/getting-started/css-and-styling",
            "title": "Getting Started: CSS and Styling | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js provides several ways to use CSS in your application, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "CSS Modules",
                        "Global CSS",
                        "Tailwind CSS",
                        "Sass",
                        "CSS-in-JS",
                        "External Stylesheets"
                    ]
                },
                {
                    "type": "p",
                    "text": "This page will guide you through how to use each of these approaches. CSS Modules locally scope CSS by generating unique class names. This allows you to use the same class in different files without worrying about collisions. To start using CSS Modules, create a new file with the extension .module.css and import it into any component inside the app directory:"
                },
                {
                    "type": "code",
                    "code": ". blog { padding : 24 px ; }"
                },
                {
                    "type": "code",
                    "code": "import styles from './styles.module.css' export default function Page ({ children } : { children : React . ReactNode }) { return < main className = { styles . blog }>{children}</ main > }"
                },
                {
                    "type": "p",
                    "text": "You can use global CSS to apply styles across your application. To use global styles, create a new CSS file, for example app/global.css :"
                },
                {
                    "type": "code",
                    "code": "body { padding : 20 px 20 px 60 px ; max-width : 680 px ; margin : 0 auto ; }"
                },
                {
                    "type": "p",
                    "text": "Import the file in the root layout ( app/layout.js ) to apply the styles to every route in your application:"
                },
                {
                    "type": "code",
                    "code": "// These styles apply to every route in the application import './global.css' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Good to know: Global styles can be imported into any layout, page, or component inside the app directory. However, since Next.js uses React's built-in support for stylesheets to integrate with Suspense. This built-in support currently does not remove stylesheets as you navigate between routes. Therefore, we recommend using global styles for truly global CSS, and CSS Modules for scoped CSS. Tailwind CSS is a utility-first CSS framework that integrates seamlessly with Next.js. To start using Tailwind, install the Tailwind CSS packages and run the init command to generate both the tailwind.config.js and postcss.config.js files:"
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p"
                },
                {
                    "type": "p",
                    "text": "Inside your Tailwind configuration file, add paths to the files that will use the Tailwind class names:"
                },
                {
                    "type": "code",
                    "code": "import type { Config } from 'tailwindcss' export default { content : [ './app/**/*.{js,ts,jsx,tsx,mdx}' , // Or if using `src` directory: './src/**/*.{js,ts,jsx,tsx,mdx}' , ] , theme : { extend : {} , } , plugins : [] , } satisfies Config"
                },
                {
                    "type": "p",
                    "text": "Add the Tailwind directives to your Global Stylesheet :"
                },
                {
                    "type": "code",
                    "code": "@tailwind base; @tailwind components; @tailwind utilities;"
                },
                {
                    "type": "p",
                    "text": "Then, import the styles in the root layout :"
                },
                {
                    "type": "code",
                    "code": "import type { Metadata } from 'next' // These styles apply to every route in the application import './globals.css' export const metadata : Metadata = { title : 'Create Next App' , description : 'Generated by create next app' , } export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Lastly, you can start writing Tailwind's utility classes in your application."
                },
                {
                    "type": "code",
                    "code": "export default function Page () { return < h1 className = \"text-3xl font-bold underline\" >Hello, Next.js!</ h1 > }"
                },
                {
                    "type": "p",
                    "text": "Next.js integrates with Sass using both the .scss and .sass extensions and syntax. You can also use component-level Sass via CSS Modules and the .module.scss or .module.sass extension. To start using Sass, install the sass package:"
                },
                {
                    "type": "code",
                    "code": "npm install --save-dev sass"
                },
                {
                    "type": "p",
                    "text": "If you want to configure your Sass options, use the sassOptions option in next.config.js ."
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { sassOptions : { additionalData : `$var: red;` , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Warning: CSS-in-JS libraries which require runtime JavaScript are not currently supported in React Server Components. Using CSS-in-JS with newer React features like Server Components and Streaming requires library authors to support the latest version of React. The following libraries are supported in Client Components in the app directory (alphabetical):"
                },
                {
                    "type": "list",
                    "items": [
                        "ant-design",
                        "chakra-ui",
                        "@fluentui/react-components",
                        "kuma-ui",
                        "@mui/material",
                        "@mui/joy",
                        "pandacss",
                        "styled-jsx",
                        "styled-components",
                        "stylex",
                        "tamagui",
                        "tss-react",
                        "vanilla-extract"
                    ]
                },
                {
                    "type": "p",
                    "text": "The following are currently working on support: If you want to style Server Components, we recommend using CSS Modules or other solutions that output CSS files, like Tailwind CSS . To configure CSS-in-JS, you need to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Create a style registry to collect all CSS rules in a render.",
                        "Use the useServerInsertedHTML hook to inject rules before any content that might use them.",
                        "Create a Client Component that wraps your app with the style registry during initial server-side rendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "To configure styled-jsx for your application, create a new registry:"
                },
                {
                    "type": "code",
                    "code": "'use client' import React , { useState } from 'react' import { useServerInsertedHTML } from 'next/navigation' import { StyleRegistry , createStyleRegistry } from 'styled-jsx' export default function StyledJsxRegistry ({ children , } : { children : React . ReactNode }) { // Only create stylesheet once with lazy initial state // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state const [ jsxStyleRegistry ] = useState (() => createStyleRegistry ()) useServerInsertedHTML (() => { const styles = jsxStyleRegistry .styles () jsxStyleRegistry .flush () return <>{styles}</> }) return < StyleRegistry registry = {jsxStyleRegistry}>{children}</ StyleRegistry > }"
                },
                {
                    "type": "p",
                    "text": "Then, wrap your root layout with the registry:"
                },
                {
                    "type": "code",
                    "code": "import StyledJsxRegistry from './registry' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html > < body > < StyledJsxRegistry >{children}</ StyledJsxRegistry > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "To use styled-components , enable it in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "import type { NextConfig } from 'next' const nextConfig : NextConfig = { compiler : { styledComponents : true , } , } export default nextConfig"
                },
                {
                    "type": "p",
                    "text": "Then, use the styled-components API to create a global registry component to collect all CSS style rules generated during a render, and a function to return those rules. Then use the useServerInsertedHTML hook to inject the styles collected in the registry into the <head> HTML tag in the root layout."
                },
                {
                    "type": "code",
                    "code": "'use client' import React , { useState } from 'react' import { useServerInsertedHTML } from 'next/navigation' import { ServerStyleSheet , StyleSheetManager } from 'styled-components' export default function StyledComponentsRegistry ({ children , } : { children : React . ReactNode }) { // Only create stylesheet once with lazy initial state // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state const [ styledComponentsStyleSheet ] = useState (() => new ServerStyleSheet ()) useServerInsertedHTML (() => { const styles = styledComponentsStyleSheet .getStyleElement () styledComponentsStyleSheet . instance .clearTag () return <>{styles}</> }) if ( typeof window !== 'undefined' ) return <>{children}</> return ( < StyleSheetManager sheet = { styledComponentsStyleSheet .instance}> {children} </ StyleSheetManager > ) }"
                },
                {
                    "type": "p",
                    "text": "Wrap the children of the root layout with the style registry component:"
                },
                {
                    "type": "code",
                    "code": "import StyledComponentsRegistry from './lib/registry' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html > < body > < StyledComponentsRegistry >{children}</ StyledComponentsRegistry > </ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Stylesheets published by external packages can be imported anywhere in the app directory, including colocated components:"
                },
                {
                    "type": "code",
                    "code": "import 'bootstrap/dist/css/bootstrap.css' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body className = \"container\" >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "External stylesheets must be directly imported from an npm package or downloaded and colocated with your codebase. You cannot use <link rel=\"stylesheet\" /> ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/getting-started/data-fetching-and-streaming",
            "title": "Getting Started: Fetching data and streaming | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This page will walk you through how you can fetch data in Server Components and Client Components . As well as how to to stream content that depends on data. You can fetch data in Server Components using:"
                },
                {
                    "type": "list",
                    "items": [
                        "The fetch API",
                        "An ORM or database"
                    ]
                },
                {
                    "type": "p",
                    "text": "To fetch data with the fetch API, turn your component into an asynchronous function, and await the fetch call. For example:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const data = await fetch ( 'https://api.vercel.app/ blog ' ) const posts = await data .json () return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "You can fetch data with an ORM or database by turning your component into an asynchronous function, and awaiting the call:"
                },
                {
                    "type": "code",
                    "code": "import { db , posts } from '@/lib/db' export default async function Page () { const allPosts = await db .select () .from (posts) return ( < ul > { allPosts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "There are two ways to fetch data in Client Components, using:"
                },
                {
                    "type": "list",
                    "items": [
                        "React's use hook",
                        "A community library like SWR or React Query"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can use React's use hook to stream data from the server to client. Start by fetching data in your Server component, and pass the promise to your Client Component as prop:"
                },
                {
                    "type": "code",
                    "code": "import Posts from '@/app/ui/posts import { Suspense } from 'react' export default function Page () { // Don't await the data fetching function const posts = getPosts () return ( < Suspense fallback = {< div >Loading...</ div >}> < Posts posts = {posts} /> </ Suspense > ) }"
                },
                {
                    "type": "p",
                    "text": "Then, in your Client Component, use the use hook read the promise:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { use } from 'react' export default function Posts ({ posts }) { const posts = use (posts) return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "In the example above, you need to wrap the <Posts /> component in a <Suspense> boundary . This means the fallback will be shown while the promise is being resolved. Learn more about streaming . You can use a community library like SWR or React Query to fetch data in Client Components. These libraries have their own semantics for caching, streaming, and other features. For example, with SWR:"
                },
                {
                    "type": "code",
                    "code": "'use client' import useSWR from 'swr' const fetcher = (url) => fetch (url) .then ((r) => r .json ()) export default function BlogPage () { const { data , error , isLoading } = useSWR ( 'https://api.vercel.app/ blog ' , fetcher ) if (isLoading) return < div >Loading...</ div > if (error) return < div >Error: { error .message}</ div > return ( < ul > { data .map ((post : { id : string ; title : string }) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "Warning: The content below assumes the dynamicIO config option is enabled in your application. The flag was introduced in Next.js 15 canary. When using async/await in Server Components, Next.js will opt into dynamic rendering . This means the data will be fetched and rendered on the server for every user request. If there are any slow data requests, the whole route will be blocked from rendering. To improve the initial load time and user experience, you can use streaming to break up the page's HTML into smaller chunks and progressively send those chunks from the server to the client. There are two ways you can implement streaming in your application:"
                },
                {
                    "type": "list",
                    "items": [
                        "With the loading.js file",
                        "With React's <Suspense> component"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can create a loading.js file in the same folder as your page to stream the entire page while the data is being fetched. For example, to stream app/blog/page.js , add the file inside the app/blog folder."
                },
                {
                    "type": "code",
                    "code": "export default function Loading () { // Define the Loading UI here return < div >Loading...</ div > }"
                },
                {
                    "type": "p",
                    "text": "On navigation, the user will immediately see the layout and a loading state while the page is being rendered. The new content will then be automatically swapped in once rendering is complete. Behind-the-scenes, loading.js will be nested inside layout.js , and will automatically wrap the page.js file and any children below in a <Suspense> boundary. This approach works well for route segments (layouts and pages), but for more granular streaming, you can use <Suspense> . <Suspense> allows you to be more granular about what parts of the page to stream. For example, you can immediately show any page content that falls outside of the <Suspense> boundary, and stream in the list of blog posts inside the boundary."
                },
                {
                    "type": "code",
                    "code": "import { Suspense } from 'react' import BlogList from '@/components/BlogList' import BlogListSkeleton from '@/components/BlogListSkeleton' export default function BlogPage () { return ( < div > { /* This content will be sent to the client immediately */ } < header > < h1 >Welcome to the Blog</ h1 > < p >Read the latest posts below.</ p > </ header > < main > { /* Any content wrapped in a <Suspense> boundary will be streamed */ } < Suspense fallback = {< BlogListSkeleton />}> < BlogList /> </ Suspense > </ main > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "An instant loading state is fallback UI that is shown immediately to the user after navigation. For the best user experience, we recommend designing loading states that are meaningful and help users understand the app is responding. For example, you can use skeletons and spinners, or a small but meaningful part of future screens such as a cover photo, title, etc. In development, you can preview and inspect the loading state of your components using the React Devtools ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/getting-started/images-and-fonts",
            "title": "Getting Started: Images and Fonts | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js comes with automatic image and font optimization for better performance and user experience. This page will guide you through how to start using them. You can store static files, like images and fonts, under a folder called public in the root directory. Files inside public can then be referenced by your code starting from the base URL ( / ). The Next.js <Image> component extends the HTML <img> element to provide:"
                },
                {
                    "type": "list",
                    "items": [
                        "Size optimization: Automatically serving correctly sized images for each device, using modern image formats like WebP and AVIF.",
                        "Visual stability: Preventing layout shift automatically when images are loading.",
                        "Faster page loads: Only loading images when they enter the viewport using native browser lazy loading, with optional blur-up placeholders.",
                        "Asset flexibility: Resizing images on-demand, even images stored on remote servers."
                    ]
                },
                {
                    "type": "p",
                    "text": "To start using <Image> , import it from next/image and render it within your component."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export default function Page () { return < Image src = \"\" alt = \"\" /> }"
                },
                {
                    "type": "p",
                    "text": "The src property can be a local or remote image. To use a local image, import your .jpg , .png , or .webp image files from your public folder ."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' import profilePic from './me.png' export default function Page () { return ( < Image src = {profilePic} alt = \"Picture of the author\" // width={500} automatically provided // height={500} automatically provided // blurDataURL=\"data:...\" automatically provided // placeholder=\"blur\" // Optional blur-up while loading /> ) }"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically determine the intrinsic width and height of your image based on the imported file. These values are used to determine the image ratio and prevent Cumulative Layout Shift while your image is loading. To use a remote image, you can provide a URL string for the src property."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' export default function Page () { return ( < Image src = \"https://s3.amazonaws.com/my-bucket/profile.png\" alt = \"Picture of the author\" width = { 500 } height = { 500 } /> ) }"
                },
                {
                    "type": "p",
                    "text": "Since Next.js does not have access to remote files during the build process, you'll need to provide the width , height and optional blurDataURL props manually. The width and height attributes are used to infer the correct aspect ratio of image and avoid layout shift from the image loading in. Then, to safely allow images from remote servers, you need to define a list of supported URL patterns in next.config.js . Be as specific as possible to prevent malicious usage. For example, the following configuration will only allow images from a specific AWS S3 bucket:"
                },
                {
                    "type": "code",
                    "code": "import { NextConfig } from 'next' const config : NextConfig = { images : { remotePatterns : [ { protocol : 'https' , hostname : 's3.amazonaws.com' , port : '' , pathname : '/my-bucket/**' , search : '' , } , ] , } , } export default config"
                },
                {
                    "type": "p",
                    "text": "The next/font module automatically optimizes your fonts and removes external network requests for improved privacy and performance. It includes built-in automatic self-hosting for any font file. This means you can optimally load web fonts with no layout shift. To start using next/font , import it from next/font/local or next/font/google , call it as a function with the appropriate options, and set the className of the element you want to apply the font to. For example:"
                },
                {
                    "type": "code",
                    "code": "import { Geist } from 'next/font/google' const geist = Geist ({ subsets : [ 'latin' ] , }) export default function Layout ({ children } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { geist .className}> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "You can automatically self-host any Google Font. Fonts are included in the deployment and served from the same domain as your deployment, meaning no requests are sent to Google by the browser when the user visits your site. To start using a Google Font, import your chosen font from next/font/google :"
                },
                {
                    "type": "code",
                    "code": "import { Geist } from 'next/font/google' const geist = Geist ({ subsets : [ 'latin' ] , }) export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { geist .className}> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "We recommend using variable fonts for the best performance and flexibility. But if you can't use a variable font, you will need to specify a weight :"
                },
                {
                    "type": "code",
                    "code": "import { Roboto } from 'next/font/google' const roboto = Roboto ({ weight : '400' , subsets : [ 'latin' ] , }) export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { roboto .className}> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "To use a local font, import your font from next/font/local and specify the src of your local font file in the public folder ."
                },
                {
                    "type": "code",
                    "code": "import localFont from 'next/font/local' const myFont = localFont ({ src : './my-font.woff2' , }) export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" className = { myFont .className}> < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "If you want to use multiple files for a single font family, src can be an array:"
                },
                {
                    "type": "code",
                    "code": "const roboto = localFont ({ src : [ { path : './Roboto-Regular.woff2' , weight : '400' , style : 'normal' , } , { path : './Roboto-Italic.woff2' , weight : '400' , style : 'italic' , } , { path : './Roboto-Bold.woff2' , weight : '700' , style : 'normal' , } , { path : './Roboto-BoldItalic.woff2' , weight : '700' , style : 'italic' , } , ] , })"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/getting-started/installation",
            "title": "Getting Started: Installation | Next.js",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Node.js 18.18 or later.",
                        "macOS, Windows (including WSL), and Linux are supported."
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend starting a new Next.js app using create-next-app , which sets up everything automatically for you. To create a project, run:"
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest"
                },
                {
                    "type": "p",
                    "text": "On installation, you'll see the following prompts:"
                },
                {
                    "type": "code",
                    "code": "What is your project named? my-app Would you like to use TypeScript? No / Yes Would you like to use ESLint? No / Yes Would you like to use Tailwind CSS? No / Yes Would you like your code inside a `src/` directory? No / Yes Would you like to use App Router? (recommended) No / Yes Would you like to use Turbopack for `next dev`?  No / Yes Would you like to customize the import alias (`@/*` by default)? No / Yes What import alias would you like configured? @/*"
                },
                {
                    "type": "p",
                    "text": "After the prompts, create-next-app will create a folder with your project name and install the required dependencies. To manually create a new Next.js app, install the required packages:"
                },
                {
                    "type": "code",
                    "code": "npm install next@latest react@latest react-dom@latest"
                },
                {
                    "type": "p",
                    "text": "Open your package.json file and add the following scripts :"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"dev\" : \"next dev\" , \"build\" : \"next build\" , \"start\" : \"next start\" , \"lint\" : \"next lint\" } }"
                },
                {
                    "type": "p",
                    "text": "These scripts refer to the different stages of developing an application:"
                },
                {
                    "type": "list",
                    "items": [
                        "dev : runs next dev to start Next.js in development mode.",
                        "build : runs next build to build the application for production usage.",
                        "start : runs next start to start a Next.js production server.",
                        "lint : runs next lint to set up Next.js' built-in ESLint configuration."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js uses file-system routing, which means the routes in your application are determined by how you structure your files. Create an app folder, then add a layout.tsx and page.tsx file. These will be rendered when the user visits the root of your application ( / ). Create a root layout inside app/layout.tsx with the required <html> and <body> tags:"
                },
                {
                    "type": "code",
                    "code": "export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body >{children}</ body > </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "Finally, create a home page app/page.tsx with some initial content:"
                },
                {
                    "type": "code",
                    "code": "export default function Page () { return < h1 >Hello, Next.js!</ h1 > }"
                },
                {
                    "type": "list",
                    "items": [
                        "If you forget to create layout.tsx , Next.js will automatically create this file when running the development server with next dev .",
                        "You can optionally use a src directory in the root of your project to separate your application's code from configuration files."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can optionally create a public folder at the root of your project to store static assets such as images, fonts, etc. Files inside public can then be referenced by your code starting from the base URL ( / )."
                },
                {
                    "type": "list",
                    "items": [
                        "Run npm run dev to start the development server.",
                        "Visit http://localhost:3000 to view your application.",
                        "Edit the app/page.tsx file and save it to see the updated result in your browser."
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js comes with built-in TypeScript support. To add TypeScript to your project, rename a file to .ts / .tsx . Run next dev , Next.js will automatically install the necessary dependencies and add a tsconfig.json file with the recommended config options. Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion. You can enable the plugin in VS Code by:"
                },
                {
                    "type": "list",
                    "items": [
                        "Opening the command palette ( Ctrl/⌘ + Shift + P )",
                        "Searching for \"TypeScript: Select TypeScript Version\"",
                        "Selecting \"Use Workspace Version\""
                    ]
                },
                {
                    "type": "p",
                    "text": "Now, when editing files, the custom plugin will be enabled. When running next build , the custom type checker will be used. See the TypeScript configuration page for more information on how to use TypeScript in your project. Next.js comes with built-in ESLint, automatically installing the necessary packages and configuring the proper settings when you create a new project with create-next-app . To add ESLint to an existing project, add next lint as a script to package.json :"
                },
                {
                    "type": "code",
                    "code": "{ \"scripts\" : { \"lint\" : \"next lint\" } }"
                },
                {
                    "type": "p",
                    "text": "Then, run npm run lint and you will be guided through the installation and configuration process."
                },
                {
                    "type": "code",
                    "code": "pnpm lint"
                },
                {
                    "type": "p",
                    "text": "You'll see a prompt like this: ? How would you like to configure ESLint?"
                },
                {
                    "type": "list",
                    "items": [
                        "Strict : Includes Next.js' base ESLint configuration along with a stricter Core Web Vitals rule-set. This is the recommended configuration for developers setting up ESLint for the first time.",
                        "Base : Includes Next.js' base ESLint configuration.",
                        "Cancel : Does not include any ESLint configuration. Only select this option if you plan on setting up your own custom ESLint configuration."
                    ]
                },
                {
                    "type": "p",
                    "text": "If either of the two configuration options are selected, Next.js will automatically install eslint and eslint-config-next as dependencies in your application and create an .eslintrc.json file in the root of your project that includes your selected configuration. You can now run next lint every time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically run during every build ( next build ). Errors will fail the build, while warnings will not. See the ESLint Plugin page for more information on how to configure ESLint in your project. Next.js has in-built support for the \"paths\" and \"baseUrl\" options of tsconfig.json and jsconfig.json files. These options allow you to alias project directories to absolute paths, making it easier to import modules. For example:"
                },
                {
                    "type": "code",
                    "code": "// Before import { Button } from '../../../components/button' // After import { Button } from '@/components/button'"
                },
                {
                    "type": "p",
                    "text": "To configure absolute imports, add the baseUrl configuration option to your tsconfig.json or jsconfig.json file. For example:"
                },
                {
                    "type": "code",
                    "code": "{ \"compilerOptions\" : { \"baseUrl\" : \"src/\" } }"
                },
                {
                    "type": "p",
                    "text": "In addition to configuring the baseUrl path, you can use the \"paths\" option to \"alias\" module paths. For example, the following configuration maps @/components/* to components/* :"
                },
                {
                    "type": "code",
                    "code": "{ \"compilerOptions\" : { \"baseUrl\" : \"src/\" , \"paths\" : { \"@/styles/*\" : [ \"styles/*\" ] , \"@/components/*\" : [ \"components/*\" ] } } }"
                },
                {
                    "type": "p",
                    "text": "Each of the \"paths\" are relative to the baseUrl location. For example:"
                },
                {
                    "type": "code",
                    "code": "import Button from '@/components/button' import '@/styles/styles.css' export default function HomePage () { return ( < div > < h1 >Hello World</ h1 > < Button /> </ div > ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/app/getting-started/project-structure",
            "title": "Getting Started: Project Structure | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "This page provides an overview of the folder and file conventions in Next.js, as well as tips for organizing your project. Top-level folders are used to organize your application's code and static assets. Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables. The React components defined in special files of a route segment are rendered in a specific hierarchy:"
                },
                {
                    "type": "list",
                    "items": [
                        "layout.js",
                        "template.js",
                        "error.js (React error boundary)",
                        "loading.js (React suspense boundary)",
                        "not-found.js (React error boundary)",
                        "page.js or nested layout.js"
                    ]
                },
                {
                    "type": "p",
                    "text": "In a nested route, the components of a segment will be nested inside the components of its parent segment. Apart from folder and file conventions , Next.js is unopinionated about how you organize and colocate your project files. But it does provide several features to help you organize your project. In the app directory, nested folders define route structure. Each folder represents a route segment that is mapped to a corresponding segment in a URL path. However, even though route structure is defined through folders, a route is not publicly accessible until a page.js or route.js file is added to a route segment. And, even when a route is made publicly accessible, only the content returned by page.js or route.js is sent to the client. This means that project files can be safely colocated inside route segments in the app directory without accidentally being routable."
                },
                {
                    "type": "list",
                    "items": [
                        "While you can colocate your project files in app you don't have to. If you prefer, you can keep them outside the app directory ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Private folders can be created by prefixing a folder with an underscore: _folderName This indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing. Since files in the app directory can be safely colocated by default , private folders are not required for colocation. However, they can be useful for:"
                },
                {
                    "type": "list",
                    "items": [
                        "Separating UI logic from routing logic.",
                        "Consistently organizing internal files across a project and the Next.js ecosystem.",
                        "Sorting and grouping files in code editors.",
                        "Avoiding potential naming conflicts with future Next.js file conventions."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "While not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern.",
                        "You can create URL segments that start with an underscore by prefixing the folder name with %5F (the URL-encoded form of an underscore): %5FfolderName .",
                        "If you don't use private folders, it would be helpful to know Next.js special file conventions to prevent unexpected naming conflicts."
                    ]
                },
                {
                    "type": "p",
                    "text": "Route groups can be created by wrapping a folder in parenthesis: (folderName) This indicates the folder is for organizational purposes and should not be included in the route's URL path."
                },
                {
                    "type": "list",
                    "items": [
                        "Organizing routes into groups e.g. by site section, intent, or team.",
                        "Enabling nested layouts in the same route segment level: Creating multiple nested layouts in the same segment, including multiple root layouts Adding a layout to a subset of routes in a common segment",
                        "Creating multiple nested layouts in the same segment, including multiple root layouts",
                        "Adding a layout to a subset of routes in a common segment"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js supports storing application code (including app ) inside an optional src directory . This separates application code from project configuration files which mostly live in the root of a project. The following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project. Good to know : In our examples below, we're using components and lib folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like ui , utils , hooks , styles , etc. This strategy stores all application code in shared folders in the root of your project and keeps the app directory purely for routing purposes. This strategy stores all application code in shared folders in the root of the app directory . This strategy stores globally shared application code in the root app directory and splits more specific application code into the route segments that use them."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture",
            "title": "Introduction: Architecture | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Learn about the Next.js architecture and how it works under the hood."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture/accessibility",
            "title": "Architecture: Accessibility | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The Next.js team is committed to making Next.js accessible to all developers (and their end-users). By adding accessibility features to Next.js by default, we aim to make the Web more inclusive for everyone. When transitioning between pages rendered on the server (e.g. using the <a href> tag) screen readers and other assistive technology announce the page title when the page loads so that users understand that the page has changed. In addition to traditional page navigations, Next.js also supports client-side transitions for improved performance (using next/link ). To ensure that client-side transitions are also announced to assistive technology, Next.js includes a route announcer by default. The Next.js route announcer looks for the page name to announce by first inspecting document.title , then the <h1> element, and finally the URL pathname. For the most accessible user experience, ensure that each page in your application has a unique and descriptive title. Next.js provides an integrated ESLint experience out of the box, including custom rules for Next.js. By default, Next.js includes eslint-plugin-jsx-a11y to help catch accessibility issues early, including warning on:"
                },
                {
                    "type": "list",
                    "items": [
                        "aria-props",
                        "aria-proptypes",
                        "aria-unsupported-elements",
                        "role-has-required-aria-props",
                        "role-supports-aria-props"
                    ]
                },
                {
                    "type": "p",
                    "text": "For example, this plugin helps ensure you add alt text to img tags, use correct aria-* attributes, use correct role attributes, and more."
                },
                {
                    "type": "list",
                    "items": [
                        "WebAIM WCAG checklist",
                        "WCAG 2.2 Guidelines",
                        "The A11y Project",
                        "Check color contrast ratios between foreground and background elements",
                        "Use prefers-reduced-motion when working with animations"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture/fast-refresh",
            "title": "Architecture: Fast Refresh | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Fast refresh is a React feature integrated into Next.js that allows you live reload the browser page while maintaining temporary client-side state when you save changes to a file. It's enabled by default in all Next.js applications on 9.4 or newer . With Fast Refresh enabled, most edits should be visible within a second."
                },
                {
                    "type": "list",
                    "items": [
                        "If you edit a file that only exports React component(s) , Fast Refresh will\nupdate the code only for that file, and re-render your component. You can edit\nanything in that file, including styles, rendering logic, event handlers, or\neffects.",
                        "If you edit a file with exports that aren't React components, Fast Refresh\nwill re-run both that file, and the other files importing it. So if both Button.js and Modal.js import theme.js , editing theme.js will update\nboth components.",
                        "Finally, if you edit a file that's imported by files outside of the\nReact tree , Fast Refresh will fall back to doing a full reload . You\nmight have a file which renders a React component but also exports a value\nthat is imported by a non-React component . For example, maybe your\ncomponent also exports a constant, and a non-React utility file imports it. In\nthat case, consider migrating the constant to a separate file and importing it\ninto both files. This will re-enable Fast Refresh to work. Other cases can\nusually be solved in a similar way."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you make a syntax error during development, you can fix it and save the file\nagain. The error will disappear automatically, so you won't need to reload the\napp. You will not lose component state . If you make a mistake that leads to a runtime error inside your component,\nyou'll be greeted with a contextual overlay. Fixing the error will automatically\ndismiss the overlay, without reloading the app. Component state will be retained if the error did not occur during rendering. If\nthe error did occur during rendering, React will remount your application using\nthe updated code. If you have error boundaries in your app (which is a good idea for graceful failures in production), they\nwill retry rendering on the next edit after a rendering error. This means having\nan error boundary can prevent you from always getting reset to the root app\nstate. However, keep in mind that error boundaries shouldn't be too granular.\nThey are used by React in production, and should always be designed\nintentionally. Fast Refresh tries to preserve local React state in the component you're\nediting, but only if it's safe to do so. Here's a few reasons why you might see\nlocal state being reset on every edit to a file:"
                },
                {
                    "type": "list",
                    "items": [
                        "Local state is not preserved for class components (only function components\nand Hooks preserve state).",
                        "The file you're editing might have other exports in addition to a React\ncomponent.",
                        "Sometimes, a file would export the result of calling a higher-order component\nlike HOC(WrappedComponent) . If the returned component is a\nclass, its state will be reset.",
                        "Anonymous arrow functions like export default () => <div />; cause Fast Refresh to not preserve local component state. For large codebases you can use our name-default-component codemod ."
                    ]
                },
                {
                    "type": "p",
                    "text": "As more of your codebase moves to function components and Hooks, you can expect\nstate to be preserved in more cases."
                },
                {
                    "type": "list",
                    "items": [
                        "Fast Refresh preserves React local state in function components (and Hooks) by\ndefault.",
                        "Sometimes you might want to force the state to be reset, and a component to\nbe remounted. For example, this can be handy if you're tweaking an animation\nthat only happens on mount. To do this, you can add // @refresh reset anywhere in the file you're editing. This directive is local to the file, and\ninstructs Fast Refresh to remount components defined in that file on every\nedit.",
                        "You can put console.log or debugger; into the components you edit during\ndevelopment.",
                        "Remember that imports are case sensitive. Both fast and full refresh can fail,\nwhen your import doesn't match the actual filename.\nFor example, './header' vs './Header' ."
                    ]
                },
                {
                    "type": "p",
                    "text": "When possible, Fast Refresh attempts to preserve the state of your component\nbetween edits. In particular, useState and useRef preserve their previous\nvalues as long as you don't change their arguments or the order of the Hook\ncalls. Hooks with dependencies—such as useEffect , useMemo , and useCallback —will always update during Fast Refresh. Their list of dependencies will be ignored\nwhile Fast Refresh is happening. For example, when you edit useMemo(() => x * 2, [x]) to useMemo(() => x * 10, [x]) , it will re-run even though x (the dependency)\nhas not changed. If React didn't do that, your edit wouldn't reflect on the\nscreen! Sometimes, this can lead to unexpected results. For example, even a useEffect with an empty array of dependencies would still re-run once during Fast Refresh. However, writing code resilient to occasional re-running of useEffect is a good practice even\nwithout Fast Refresh. It will make it easier for you to introduce new dependencies to it later on\nand it's enforced by React Strict Mode ,\nwhich we highly recommend enabling."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture/nextjs-compiler",
            "title": "Architecture: Next.js Compiler | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "The Next.js Compiler, written in Rust using SWC , allows Next.js to transform and minify your JavaScript code for production. This replaces Babel for individual files and Terser for minifying output bundles. Compilation using the Next.js Compiler is 17x faster than Babel and enabled by default since Next.js version 12. If you have an existing Babel configuration or are using unsupported features , your application will opt-out of the Next.js Compiler and continue using Babel. SWC is an extensible Rust-based platform for the next generation of fast developer tools. SWC can be used for compilation, minification, bundling, and more – and is designed to be extended. It's something you can call to perform code transformations (either built-in or custom). Running those transformations happens through higher-level tools like Next.js. We chose to build on SWC for a few reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Extensibility: SWC can be used as a Crate inside Next.js, without having to fork the library or workaround design constraints.",
                        "Performance: We were able to achieve ~3x faster Fast Refresh and ~5x faster builds in Next.js by switching to SWC, with more room for optimization still in progress.",
                        "WebAssembly: Rust's support for WASM is essential for supporting all possible platforms and taking Next.js development everywhere.",
                        "Community: The Rust community and ecosystem are amazing and still growing."
                    ]
                },
                {
                    "type": "p",
                    "text": "We're working to port babel-plugin-styled-components to the Next.js Compiler. First, update to the latest version of Next.js: npm install next@latest . Then, update your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { styledComponents : true , } , }"
                },
                {
                    "type": "p",
                    "text": "For advanced use cases, you can configure individual properties for styled-components compilation. Note: ssr and displayName transforms are the main requirement for using styled-components in Next.js."
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { // see https://styled-components.com/docs/tooling#babel-plugin for more info on the options. styledComponents : { // Enabled by default in development, disabled in production to reduce file size, // setting this will override the default for all environments. displayName? : boolean , // Enabled by default. ssr? : boolean , // Enabled by default. fileName? : boolean , // Empty by default. topLevelImportPaths? : string[] , // Defaults to [\"index\"]. meaninglessFileNames? : string[] , // Enabled by default. minify? : boolean , // Enabled by default. transpileTemplateLiterals? : boolean , // Empty by default. namespace? : string , // Disabled by default. pure? : boolean , // Enabled by default. cssProp? : boolean , } , } , }"
                },
                {
                    "type": "p",
                    "text": "The Next.js Compiler transpiles your tests and simplifies configuring Jest together with Next.js including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Auto mocking of .css , .module.css (and their .scss variants), and image imports",
                        "Automatically sets up transform using SWC",
                        "Loading .env (and all variants) into process.env",
                        "Ignores node_modules from test resolving and transforms",
                        "Ignoring .next from test resolving",
                        "Loads next.config.js for flags that enable experimental SWC transforms"
                    ]
                },
                {
                    "type": "p",
                    "text": "First, update to the latest version of Next.js: npm install next@latest . Then, update your jest.config.js file:"
                },
                {
                    "type": "code",
                    "code": "const nextJest = require ( 'next/jest' ) // Providing the path to your Next.js app which will enable loading next.config.js and .env files const createJestConfig = nextJest ({ dir : './' }) // Any custom config you want to pass to Jest const customJestConfig = { setupFilesAfterEnv : [ '<rootDir>/jest.setup.js' ] , } // createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is async module . exports = createJestConfig (customJestConfig)"
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { relay : { // This should match relay.config.js src : './' , artifactDirectory : './__generated__' , language : 'typescript' , eagerEsModules : false , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Good to know : In Next.js, all JavaScript files in pages directory are considered routes. So, for relay-compiler you'll need to specify artifactDirectory configuration settings outside of the pages , otherwise relay-compiler will generate files next to the source file in the __generated__ directory, and this file will be considered a route, which will break production builds. Allows to remove JSX properties. This is often used for testing. Similar to babel-plugin-react-remove-properties . To remove properties matching the default regex ^data-test :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { reactRemoveProperties : true , } , }"
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { // The regexes defined here are processed in Rust so the syntax is different from // JavaScript `RegExp`s. See https://docs.rs/regex. reactRemoveProperties : { properties : [ '^data-custom$' ] } , } , }"
                },
                {
                    "type": "p",
                    "text": "This transform allows for removing all console.* calls in application code (not node_modules ). Similar to babel-plugin-transform-remove-console ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { removeConsole : true , } , }"
                },
                {
                    "type": "p",
                    "text": "Remove console.* output except console.error :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { removeConsole : { exclude : [ 'error' ] , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically detect experimentalDecorators in jsconfig.json or tsconfig.json . Legacy decorators are commonly used with older versions of libraries like mobx . This flag is only supported for compatibility with existing applications. We do not recommend using legacy decorators in new applications. First, update to the latest version of Next.js: npm install next@latest . Then, update your jsconfig.json or tsconfig.json file:"
                },
                {
                    "type": "code",
                    "code": "{ \"compilerOptions\" : { \"experimentalDecorators\" : true } }"
                },
                {
                    "type": "p",
                    "text": "Next.js will automatically detect jsxImportSource in jsconfig.json or tsconfig.json and apply that. This is commonly used with libraries like Theme UI . First, update to the latest version of Next.js: npm install next@latest . Then, update your jsconfig.json or tsconfig.json file:"
                },
                {
                    "type": "code",
                    "code": "{ \"compilerOptions\" : { \"jsxImportSource\" : \"theme-ui\" } }"
                },
                {
                    "type": "p",
                    "text": "We're working to port @emotion/babel-plugin to the Next.js Compiler. First, update to the latest version of Next.js: npm install next@latest . Then, update your next.config.js file:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { emotion : boolean | { // default is true. It will be disabled when build type is production. sourceMap? : boolean , // default is 'dev-only'. autoLabel? : 'never' | 'dev-only' | 'always' , // default is '[local]'. // Allowed values: `[local]` `[filename]` and `[dirname]` // This option only works when autoLabel is set to 'dev-only' or 'always'. // It allows you to define the format of the resulting label. // The format is defined via string where variable parts are enclosed in square brackets []. // For example labelFormat: \"my-classname--[local]\", where [local] will be replaced with the name of the variable the result is assigned to. labelFormat? : string , // default is undefined. // This option allows you to tell the compiler what imports it should // look at to determine what it should transform so if you re-export // Emotion's exports, you can still use transforms. importMap? : { [packageName: string] : { [exportName: string] : { canonicalImport? : [string , string] , styledBaseImport? : [string , string] , } } } , } , } , }"
                },
                {
                    "type": "p",
                    "text": "Next.js' swc compiler is used for minification by default since v13. This is 7x faster than Terser. Good to know: Starting with v15, minification cannot customized using next.config.js . Support for the swcMinify flag has been removed. Next.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies ( node_modules ). This replaces the next-transpile-modules package."
                },
                {
                    "type": "code",
                    "code": "module . exports = { transpilePackages : [ '@acme/ui' , 'lodash-es' ] , }"
                },
                {
                    "type": "p",
                    "text": "This option has been superseded by optimizePackageImports in Next.js 13.5. We recommend upgrading to use the new option that does not require manual configuration of import paths. The define option allows you to statically replace variables in your code at build-time.\nThe option takes an object as key-value pairs, where the keys are the variables that should be replaced with the corresponding values. Use the compiler.define field in next.config.js :"
                },
                {
                    "type": "code",
                    "code": "module . exports = { compiler : { define : { MY_STRING_VARIABLE : JSON .stringify ( 'my-string' ) , MY_NUMBER_VARIABLE : '42' , } , } , }"
                },
                {
                    "type": "p",
                    "text": "You can generate SWC's internal transform traces as chromium's trace event format ."
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { swcTraceProfiling : true , } , }"
                },
                {
                    "type": "p",
                    "text": "Once enabled, swc will generate trace named as swc-trace-profile-${timestamp}.json under .next/ . Chromium's trace viewer (chrome://tracing/, https://ui.perfetto.dev/ ), or compatible flamegraph viewer ( https://www.speedscope.app/ ) can load & visualize generated traces. You can configure swc's transform to use SWC's experimental plugin support written in wasm to customize transformation behavior."
                },
                {
                    "type": "code",
                    "code": "module . exports = { experimental : { swcPlugins : [ [ 'plugin' , { ... pluginOptions , } , ] , ] , } , }"
                },
                {
                    "type": "p",
                    "text": "swcPlugins accepts an array of tuples for configuring plugins. A tuple for the plugin contains the path to the plugin and an object for plugin configuration. The path to the plugin can be an npm module package name or an absolute path to the .wasm binary itself. When your application has a .babelrc file, Next.js will automatically fall back to using Babel for transforming individual files. This ensures backwards compatibility with existing applications that leverage custom Babel plugins. If you're using a custom Babel setup, please share your configuration . We're working to port as many commonly used Babel transformations as possible, as well as supporting plugins in the future."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/architecture/supported-browsers",
            "title": "Architecture: Supported Browsers | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js supports modern browsers with zero configuration."
                },
                {
                    "type": "list",
                    "items": [
                        "Chrome 64+",
                        "Edge 79+",
                        "Firefox 67+",
                        "Opera 51+",
                        "Safari 12+"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you would like to target specific browsers or features, Next.js supports Browserslist configuration in your package.json file. Next.js uses the following Browserslist configuration by default:"
                },
                {
                    "type": "code",
                    "code": "{ \"browserslist\" : [ \"chrome 64\" , \"edge 79\" , \"firefox 67\" , \"opera 51\" , \"safari 12\" ] }"
                },
                {
                    "type": "p",
                    "text": "We inject widely used polyfills , including:"
                },
                {
                    "type": "list",
                    "items": [
                        "fetch() — Replacing: whatwg-fetch and unfetch .",
                        "URL — Replacing: the url package (Node.js API) .",
                        "Object.assign() — Replacing: object-assign , object.assign , and core-js/object/assign ."
                    ]
                },
                {
                    "type": "p",
                    "text": "If any of your dependencies include these polyfills, they’ll be eliminated automatically from the production build to avoid duplication. In addition, to reduce bundle size, Next.js will only load these polyfills for browsers that require them. The majority of the web traffic globally will not download these polyfills. If your own code or any external npm dependencies require features not supported by your target browsers (such as IE 11), you need to add polyfills yourself. In this case, you should add a top-level import for the specific polyfill you need in your Custom <App> or the individual component. Next.js allows you to use the latest JavaScript features out of the box. In addition to ES6 features , Next.js also supports:"
                },
                {
                    "type": "list",
                    "items": [
                        "Async/await (ES2017)",
                        "Object Rest/Spread Properties (ES2018)",
                        "Dynamic import() (ES2020)",
                        "Optional Chaining (ES2020)",
                        "Nullish Coalescing (ES2020)",
                        "Class Fields and Static Properties (ES2022)",
                        "and more!"
                    ]
                },
                {
                    "type": "p",
                    "text": "Next.js has built-in TypeScript support. Learn more here . You can customize babel configuration. Learn more here ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/google-font-display",
            "title": "Google Font Display | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Enforce font-display behavior with Google Fonts. For a Google Font, the font-display descriptor was either missing or set to auto , block , or fallback , which are not recommended. For most cases, the best font display strategy for custom fonts is optional ."
                },
                {
                    "type": "code",
                    "code": "import Head from 'next/head' export default function IndexPage () { return ( < div > < Head > < link href = \"https://fonts.googleapis.com/css2?family=Krona+One&display=optional\" rel = \"stylesheet\" /> </ Head > </ div > ) }"
                },
                {
                    "type": "p",
                    "text": "Specifying display=optional minimizes the risk of invisible text or layout shift. If swapping to the custom font after it has loaded is important to you, then use display=swap instead. If you want to specifically display a font using an auto , block , or fallback strategy, then you can disable this rule."
                },
                {
                    "type": "list",
                    "items": [
                        "Controlling Font Performance with font-display",
                        "Google Fonts API Docs",
                        "CSS font-display property"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/google-font-preconnect",
            "title": "Google Font Preconnect | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Note : Next.js automatically adds <link rel=\"preconnect\" /> after version 12.0.1 . Ensure preconnect is used with Google Fonts. A preconnect resource hint was not used with a request to the Google Fonts domain. Adding preconnect is recommended to initiate an early connection to the origin. Add rel=\"preconnect\" to the Google Font domain <link> tag:"
                },
                {
                    "type": "code",
                    "code": "< link rel = \"preconnect\" href = \"https://fonts.gstatic.com\" />"
                },
                {
                    "type": "p",
                    "text": "Note : a separate link with dns-prefetch can be used as a fallback for browsers that don't support preconnect although this is not required."
                },
                {
                    "type": "list",
                    "items": [
                        "Preconnect to required origins",
                        "Preconnect and dns-prefetch",
                        "Next.js Font Optimization"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/inline-script-id",
            "title": "Inline script id | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Enforce id attribute on next/script components with inline content. next/script components with inline content require an id attribute to be defined to track and optimize the script. Add an id attribute to the next/script component."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function App ({ Component , pageProps }) { return ( <> < Script id = \"my-script\" >{ `console.log('Hello world!');` }</ Script > < Component { ... pageProps} /> </> ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide",
            "title": "Middleware Upgrade Guide | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "As we work on improving Middleware for General Availability (GA), we've made some changes to the Middleware APIs (and how you define Middleware in your application) based on your feedback. This upgrade guide will help you understand the changes, why they were made, and how to migrate your existing Middleware to the new API. The guide is for Next.js developers who:"
                },
                {
                    "type": "list",
                    "items": [
                        "Currently use the beta Next.js Middleware features",
                        "Choose to upgrade to the next stable version of Next.js ( v12.2 )"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can start upgrading your Middleware usage today with the latest release ( npm i next@latest ). Note : These changes described in this guide are included in Next.js 12.2 . You can keep your current site structure, including nested Middleware, until you move to 12.2 (or a canary build of Next.js). If you have ESLint configured, you will need to run npm i eslint-config-next@latest --save-dev to upgrade your ESLint configuration to ensure the same version is being used as the Next.js version. You might also need to restart VSCode for the changes to take effect. If you're using Next.js on Vercel, your existing deploys using Middleware will continue to work, and you can continue to deploy your site using Middleware. When you upgrade your site to the next stable version of Next.js ( v12.2 ), you will need to follow this upgrade guide to update your Middleware."
                },
                {
                    "type": "list",
                    "items": [
                        "No Nested Middleware",
                        "No Response Body",
                        "Cookies API Revamped",
                        "New User-Agent Helper",
                        "No More Page Match Data",
                        "Executing Middleware on Internal Next.js Requests"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Define a single Middleware file next to your pages folder",
                        "No need to prefix the file with an underscore",
                        "A custom matcher can be used to define matching routes using an exported config object"
                    ]
                },
                {
                    "type": "p",
                    "text": "Previously, you could create a _middleware.ts file under the pages directory at any level. Middleware execution was based on the file path where it was created. Based on customer feedback, we have replaced this API with a single root Middleware, which provides the following improvements:"
                },
                {
                    "type": "list",
                    "items": [
                        "Faster execution with lower latency : With nested Middleware, a single request could invoke multiple Middleware functions. A single Middleware means a single function execution, which is more efficient.",
                        "Less expensive : Middleware usage is billed per invocation. Using nested Middleware, a single request could invoke multiple Middleware functions, meaning multiple Middleware charges per request. A single Middleware means a single invocation per request and is more cost effective.",
                        "Middleware can conveniently filter on things besides routes : With nested Middleware, the Middleware files were located in the pages directory and Middleware was executed based on request paths. By moving to a single root Middleware, you can still execute code based on request paths, but you can now more conveniently execute Middleware based on other conditions, like cookies or the presence of a request header.",
                        "Deterministic execution ordering : With nested Middleware, a single request could match multiple Middleware functions. For example, a request to /dashboard/users/* would invoke Middleware defined in both /dashboard/users/_middleware.ts and /dashboard/_middleware.js . However, the execution order is difficult to reason about. Moving to a single, root Middleware more explicitly defines execution order.",
                        "Supports Next.js Layouts (RFC) : Moving to a single, root Middleware helps support the new Layouts (RFC) in Next.js ."
                    ]
                },
                {
                    "type": "p",
                    "text": "You should declare one single Middleware file in your application, which should be located next to the pages directory and named without an _ prefix. Your Middleware file can still have either a .ts or .js extension. Middleware will be invoked for every route in the app , and a custom matcher can be used to define matching filters. The following is an example for a Middleware that triggers for /about/* and /dashboard/:path* , the custom matcher is defined in an exported config object:"
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest } from 'next/server' export function middleware (request : NextRequest ) { return NextResponse .rewrite ( new URL ( '/about-2' , request .url)) } // Supports both a single string value or an array of matchers export const config = { matcher : [ '/about/:path*' , '/dashboard/:path*' ] , }"
                },
                {
                    "type": "p",
                    "text": "The matcher config also allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:"
                },
                {
                    "type": "code",
                    "code": "export const config = { matcher : [ /* * Match all request paths except for the ones starting with: * - api (API routes) * - _next/static (static files) * - favicon.ico (favicon file) */ '/((?!api|_next/static|favicon.ico).*)' , ] , }"
                },
                {
                    "type": "p",
                    "text": "While the config option is preferred since it doesn't get invoked on every request, you can also use conditional statements to only run the Middleware when it matches specific paths. One advantage of using conditionals is defining explicit ordering for when Middleware executes. The following example shows how you can merge two previously nested Middleware:"
                },
                {
                    "type": "code",
                    "code": "import type { NextRequest } from 'next/server' export function middleware (request : NextRequest ) { if ( request . nextUrl . pathname .startsWith ( '/about' )) { // This logic is only applied to /about } if ( request . nextUrl . pathname .startsWith ( '/dashboard' )) { // This logic is only applied to /dashboard } }"
                },
                {
                    "type": "list",
                    "items": [
                        "Middleware can no longer produce a response body",
                        "If your Middleware does respond with a body, a runtime error will be thrown",
                        "Migrate to using rewrite / redirect to pages/APIs handling a response"
                    ]
                },
                {
                    "type": "p",
                    "text": "To respect the differences in client-side and server-side navigation, and to help ensure that developers do not build insecure Middleware, we are removing the ability to send response bodies in Middleware. This ensures that Middleware is only used to rewrite , redirect , or modify the incoming request (e.g. setting cookies ). The following patterns will no longer work:"
                },
                {
                    "type": "code",
                    "code": "new Response ( 'a text value' ) new Response (streamOrBuffer) new Response ( JSON .stringify (obj) , { headers : 'application/json' }) NextResponse .json ()"
                },
                {
                    "type": "p",
                    "text": "For cases where Middleware is used to respond (such as authorization), you should migrate to use rewrite / redirect to pages that show an authorization error, login forms, or to an API Route."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest } from 'next/server' import { isAuthValid } from './lib/auth' export function middleware (request : NextRequest ) { // Example function to validate auth if ( isAuthValid (request)) { return NextResponse .next () } return NextResponse .json ({ message : 'Auth required' } , { status : 401 }) }"
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest } from 'next/server' import { isAuthValid } from './lib/auth' export function middleware (request : NextRequest ) { // Example function to validate auth if ( isAuthValid (request)) { return NextResponse .next () } const loginUrl = new URL ( '/login' , request .url) loginUrl . searchParams .set ( 'from' , request . nextUrl .pathname) return NextResponse .redirect (loginUrl) }"
                },
                {
                    "type": "p",
                    "text": "If you were previously using Middleware to forward headers to an external API, you can now use Edge API Routes :"
                },
                {
                    "type": "code",
                    "code": "import { type NextRequest } from 'next/server' export const config = { runtime : 'edge' , } export default async function handler (req : NextRequest ) { const authorization = req . cookies .get ( 'authorization' ) return fetch ( 'https://backend- api .com/ api /protected' , { method : req .method , headers : { authorization , } , redirect : 'manual' , }) }"
                },
                {
                    "type": "p",
                    "text": "Based on beta feedback, we are changing the Cookies API in NextRequest and NextResponse to align more to a get / set model. The Cookies API extends Map, including methods like entries and values . NextResponse now has a cookies instance with:"
                },
                {
                    "type": "list",
                    "items": [
                        "cookies.delete",
                        "cookies.set",
                        "cookies.getWithOptions"
                    ]
                },
                {
                    "type": "p",
                    "text": "As well as other extended methods from Map ."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest } from 'next/server' export function middleware (request : NextRequest ) { // create an instance of the class to access the public methods. This uses `next()`, // you could use `redirect()` or `rewrite()` as well let response = NextResponse .next () // get the cookies from the request let cookieFromRequest = request .cookies[ 'my-cookie' ] // set the `cookie` response .cookie ( 'hello' , 'world' ) // set the `cookie` with options const cookieWithOptions = response .cookie ( 'hello' , 'world' , { path : '/' , maxAge : 1000 * 60 * 60 * 24 * 7 , httpOnly : true , sameSite : 'strict' , domain : 'example.com' , }) // clear the `cookie` response .clearCookie ( 'hello' ) return response }"
                },
                {
                    "type": "code",
                    "code": "export function middleware () { const response = new NextResponse () // set a cookie response . cookies .set ( 'vercel' , 'fast' ) // set another cookie with options response . cookies .set ( 'nextjs' , 'awesome' , { path : '/test' }) // get all the details of a cookie const { value , ... options } = response . cookies .getWithOptions ( 'vercel' ) console .log (value) // => 'fast' console .log (options) // => { name: 'vercel', Path: '/test' } // deleting a cookie will mark it as expired response . cookies .delete ( 'vercel' ) return response }"
                },
                {
                    "type": "list",
                    "items": [
                        "Accessing the user agent is no longer available on the request object",
                        "We've added a new userAgent helper to reduce Middleware size by 17kb"
                    ]
                },
                {
                    "type": "p",
                    "text": "To help reduce the size of your Middleware, we have extracted the user agent from the request object and created a new helper userAgent . The helper is imported from next/server and allows you to opt in to using the user agent. The helper gives you access to the same properties that were available from the request object."
                },
                {
                    "type": "list",
                    "items": [
                        "Import the userAgent helper from next/server",
                        "Destructure the properties you need to work with"
                    ]
                },
                {
                    "type": "code",
                    "code": "import { NextRequest , NextResponse } from 'next/server' export function middleware (request : NextRequest ) { const url = request .nextUrl const viewport = request . ua . device .type === 'mobile' ? 'mobile' : 'desktop' url . searchParams .set ( 'viewport' , viewport) return NextResponse .rewrite (url) }"
                },
                {
                    "type": "code",
                    "code": "import { NextRequest , NextResponse , userAgent } from 'next/server' export function middleware (request : NextRequest ) { const url = request .nextUrl const { device } = userAgent (request) const viewport = device .type === 'mobile' ? 'mobile' : 'desktop' url . searchParams .set ( 'viewport' , viewport) return NextResponse .rewrite (url) }"
                },
                {
                    "type": "list",
                    "items": [
                        "Use URLPattern to check if a Middleware is being invoked for a certain page match"
                    ]
                },
                {
                    "type": "p",
                    "text": "Currently, Middleware estimates whether you are serving an asset of a Page based on the Next.js routes manifest (internal configuration). This value is surfaced through request.page . To make page and asset matching more accurate, we are now using the web standard URLPattern API. Use URLPattern to check if a Middleware is being invoked for a certain page match."
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest , NextFetchEvent } from 'next/server' export function middleware (request : NextRequest , event : NextFetchEvent ) { const { params } = event . request .page const { locale , slug } = params if (locale && slug) { const { search , protocol , host } = request .nextUrl const url = new URL ( ` ${ protocol } // ${ locale } . ${ host } / ${ slug }${ search } ` ) return NextResponse .redirect (url) } }"
                },
                {
                    "type": "code",
                    "code": "import { NextResponse } from 'next/server' import type { NextRequest } from 'next/server' const PATTERNS = [ [ new URLPattern ({ pathname : '/:locale/:slug' }) , ({ pathname }) => pathname .groups , ] , ] const params = (url) => { const input = url .split ( '?' )[ 0 ] let result = {} for ( const [ pattern , handler ] of PATTERNS ) { const patternResult = pattern .exec (input) if (patternResult !== null && 'pathname' in patternResult) { result = handler (patternResult) break } } return result } export function middleware (request : NextRequest ) { const { locale , slug } = params ( request .url) if (locale && slug) { const { search , protocol , host } = request .nextUrl const url = new URL ( ` ${ protocol } // ${ locale } . ${ host } / ${ slug }${ search } ` ) return NextResponse .redirect (url) } }"
                },
                {
                    "type": "list",
                    "items": [
                        "Middleware will be executed for all requests, including _next"
                    ]
                },
                {
                    "type": "p",
                    "text": "Prior to Next.js v12.2 , Middleware was not executed for _next requests. For cases where Middleware is used for authorization, you should migrate to use rewrite / redirect to Pages that show an authorization error, login forms, or to an API Route. See No Response Body for an example of how to migrate to use rewrite / redirect ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/next-script-for-ga",
            "title": "Using Google Analytics with Next.js (through `next/script`) | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prefer next/script component when using the inline script for Google Analytics. An inline script was used for Google Analytics which might impact your webpage's performance. Instead, we recommend using next/script through the @next/third-parties library. @next/third-parties is a library that provides a collection of components and utilities that improve the performance and developer experience of loading popular third-party libraries in your Next.js application. It is available with Next.js 14 (install next@latest ). The GoogleAnalytics component can be used to include Google Analytics\n4 to your page via the Google tag ( gtag.js ). By default, it fetches the original scripts after hydration occurs on the page. Recommendation : If Google Tag Manager is already included in your application, you can\nconfigure Google Analytics directly using it, rather than including Google Analytics as a separate component. Refer to the documentation to learn more about the differences between Tag Manager and gtag.js . To load Google Analytics for all routes, include the component directly in your root layout and pass in your measurement ID:"
                },
                {
                    "type": "code",
                    "code": "import { GoogleAnalytics } from '@next/third-parties/google' export default function RootLayout ({ children , } : { children : React . ReactNode }) { return ( < html lang = \"en\" > < body >{children}</ body > < GoogleAnalytics gaId = \"G-XYZ\" /> </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "To load Google Analytics for a single route, include the component in your page file:"
                },
                {
                    "type": "code",
                    "code": "import { GoogleAnalytics } from '@next/third-parties/google' export default function Page () { return < GoogleAnalytics gaId = \"G-XYZ\" /> }"
                },
                {
                    "type": "list",
                    "items": [
                        "If you are using the Pages Router, please refer to the pages/ documentation .",
                        "@next/third-parties also supports Google Tag Manager and other third parties.",
                        "Using @next/third-parties is not required. You can also use the next/script component directly. Refer to the next/script documentation to learn more."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "@next/third-parties Documentation",
                        "next/script Documentation"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-assign-module-variable",
            "title": "No assign module variable | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prevent assignment to the module variable. A value is being assigned to the module variable. The module variable is already used and it is highly likely that assigning to this variable will cause errors."
                },
                {
                    "type": "code",
                    "code": "let myModule = { ... }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-async-client-component",
            "title": "No async client component | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Client components cannot be async functions. The error occurs when you try to define a client component as an async function. React client components do not support async functions. For example:"
                },
                {
                    "type": "code",
                    "code": "'use client' // This will cause an error async function ClientComponent () { // ... }"
                },
                {
                    "type": "list",
                    "items": [
                        "Convert to a Server Component : If possible, convert your client component to a server component. This allows you to use async / await directly in your component.",
                        "Remove the async keyword : If you need to keep it as a client component, remove the async keyword and handle data fetching differently.",
                        "Use React hooks for data fetching : Utilize hooks like useEffect for client-side data fetching, or use third-party libraries.",
                        "Leverage the use hook with a Context Provider : Pass promises to child components using context, then resolve them with the use hook."
                    ]
                },
                {
                    "type": "p",
                    "text": "We recommend fetching data on the server. For example:"
                },
                {
                    "type": "code",
                    "code": "export default async function Page () { const data = await fetch ( 'https://api.vercel.app/blog' ) const posts = await data .json () return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                },
                {
                    "type": "p",
                    "text": "Another pattern to explore is using the React use hook with a Context Provider. This allows you to pass Promises to child components and resolve them using the use hook . Here's an example: First, let's create a separate file for the context provider:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { createContext , useContext } from 'react' export const BlogContext = createContext < Promise < any > | null >( null ) export function BlogProvider ({ children , blogPromise , } : { children : React . ReactNode blogPromise : Promise < any > }) { return ( < BlogContext.Provider value = {blogPromise}>{children}</ BlogContext.Provider > ) } export function useBlogContext () { const context = useContext (BlogContext) if ( ! context) { throw new Error ( 'useBlogContext must be used within a BlogProvider' ) } return context }"
                },
                {
                    "type": "p",
                    "text": "Now, let's create the Promise in a Server Component and stream it to the client:"
                },
                {
                    "type": "code",
                    "code": "import { BlogProvider } from './context' export default function Page () { const blogPromise = fetch ( 'https://api.vercel.app/blog' ) .then ((res) => res .json () ) return ( < BlogProvider blogPromise = {blogPromise}> < BlogPosts /> </ BlogProvider > ) }"
                },
                {
                    "type": "p",
                    "text": "Here is the blog posts component:"
                },
                {
                    "type": "code",
                    "code": "'use client' import { use } from 'react' import { useBlogContext } from './context' export function BlogPosts () { const blogPromise = useBlogContext () const posts = use (blogPromise) return < div >{ posts . length } blog posts</ div > }"
                },
                {
                    "type": "p",
                    "text": "This pattern allows you to start data fetching early and pass the Promise down to child components, which can then use the use hook to access the data when it's ready. In scenarios where client fetching is needed, you can call fetch in useEffect (not recommended), or lean on popular React libraries in the community (such as SWR or React Query ) for client fetching."
                },
                {
                    "type": "code",
                    "code": "'use client' import { useState , useEffect } from 'react' export function Posts () { const [ posts , setPosts ] = useState ( null ) useEffect (() => { async function fetchPosts () { const res = await fetch ( 'https://api.vercel.app/blog' ) const data = await res .json () setPosts (data) } fetchPosts () } , []) if ( ! posts) return < div >Loading...</ div > return ( < ul > { posts .map ((post) => ( < li key = { post .id}>{ post .title}</ li > ))} </ ul > ) }"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-before-interactive-script-outside-document",
            "title": "No Before Interactive Script Outside Document | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prevent usage of next/script 's beforeInteractive strategy outside of app/layout.jsx or pages/_document.js . You cannot use the next/script component with the beforeInteractive strategy outside app/layout.jsx or pages/_document.js . That's because beforeInteractive strategy only works inside app/layout.jsx or pages/_document.js and is designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side). If you want a global script, and you are using the App Router, move the script inside app/layout.jsx ."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' export default function RootLayout ({ children }) { return ( < html lang = \"en\" > < body >{children}</ body > < Script src = \"https://example.com/script.js\" strategy = \"beforeInteractive\" /> </ html > ) }"
                },
                {
                    "type": "p",
                    "text": "If you want a global script, and you are using the Pages Router, move the script inside pages/_document.js ."
                },
                {
                    "type": "code",
                    "code": "import { Html , Head , Main , NextScript } from 'next/document' import Script from 'next/script' export default function Document () { return ( < Html > < Head /> < body > < Main /> < NextScript /> < Script src = \"https://example.com/script.js\" strategy = \"beforeInteractive\" ></ Script > </ body > </ Html > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "App Router Script Optimization",
                        "Pages Router Script Optimization"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-css-tags",
            "title": "No CSS Tags | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "A link element was used to link to an external stylesheet. This can negatively affect CSS resource loading on your webpage. There are multiple ways to include styles using Next.js' built-in CSS support, including the option to use @import within the root stylesheet that is imported in pages/_app.js :"
                },
                {
                    "type": "code",
                    "code": "/* Root stylesheet */ @import 'extra.css' ; body { /* ... */ }"
                },
                {
                    "type": "p",
                    "text": "Another option is to use CSS Modules to import the CSS file scoped specifically to the component."
                },
                {
                    "type": "code",
                    "code": "import styles from './extra.module.css' export class Home { render () { return ( < div > < button type = \"button\" className = { styles .active}> Open </ button > </ div > ) } }"
                },
                {
                    "type": "p",
                    "text": "Refer to the Built-In CSS Support documentation to learn about all the ways to include CSS to your application."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-document-import-in-page",
            "title": "No Document Import in Page | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prevent importing next/document outside of pages/_document.js . next/document was imported in a page outside of pages/_document.js (or pages/_document.tsx if you are using TypeScript). This can cause unexpected issues in your application. Only import and use next/document within pages/_document.js (or pages/_document.tsx ) to override the default Document component:"
                },
                {
                    "type": "code",
                    "code": "import Document , { Html , Head , Main , NextScript } from 'next/document' class MyDocument extends Document { //... } export default MyDocument"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-duplicate-head",
            "title": "No Duplicate Head | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prevent duplicate usage of <Head> in pages/_document.js . More than a single instance of the <Head /> component was used in a single custom document. This can cause unexpected behavior in your application. Only use a single <Head /> component in your custom document in pages/_document.js ."
                },
                {
                    "type": "code",
                    "code": "import Document , { Html , Head , Main , NextScript } from 'next/document' class MyDocument extends Document { static async getInitialProps (ctx) { //... } render () { return ( < Html > < Head /> < body > < Main /> < NextScript /> </ body > </ Html > ) } } export default MyDocument"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-head-element",
            "title": "No Head Element | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "A <head> element was used to include page-level metadata, but this can cause unexpected behavior in a Next.js application. Use Next.js' built-in next/head component instead. Import and use the <Head /> component:"
                },
                {
                    "type": "code",
                    "code": "import Head from 'next/head' function Index () { return ( <> < Head > < title >My page title</ title > < meta name = \"viewport\" content = \"initial-scale=1.0, width=device-width\" /> </ Head > </> ) } export default Index"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-head-import-in-document",
            "title": "No Head Import in Document | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prevent usage of next/head in pages/_document.js . next/head was imported in pages/_document.js . This can cause unexpected issues in your application. Only import and use next/document within pages/_document.js to override the default Document component. If you are importing next/head to use the Head component, import it from next/document instead in order to modify <head> code across all pages:"
                },
                {
                    "type": "code",
                    "code": "import Document , { Html , Head , Main , NextScript } from 'next/document' class MyDocument extends Document { static async getInitialProps (ctx) { //... } render () { return ( < Html > < Head ></ Head > </ Html > ) } } export default MyDocument"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-img-element",
            "title": "No img element | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prevent usage of <img> element due to slower LCP and higher bandwidth. An <img> element was used to display an image instead of <Image /> from next/image ."
                },
                {
                    "type": "list",
                    "items": [
                        "Use next/image to improve performance with automatic Image Optimization ."
                    ]
                },
                {
                    "type": "p",
                    "text": "Note : If deploying to a managed hosting provider , remember to check provider pricing since optimized images might be charged differently than the original images."
                },
                {
                    "type": "list",
                    "items": [
                        "Vercel pricing",
                        "Cloudinary pricing",
                        "imgix pricing"
                    ]
                },
                {
                    "type": "p",
                    "text": "Note : If self-hosting, remember to install sharp and check if your server has enough storage to cache the optimized images."
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' function Home () { return ( < Image src = \"https://example.com/hero.jpg\" alt = \"Landscape picture\" width = { 800 } height = { 500 } /> ) } export default Home"
                },
                {
                    "type": "list",
                    "items": [
                        "If you would like to use next/image features such as blur-up placeholders but disable Image Optimization, you can do so using unoptimized :"
                    ]
                },
                {
                    "type": "code",
                    "code": "import Image from 'next/image' const UnoptimizedImage = (props) => { return < Image { ... props} unoptimized /> }"
                },
                {
                    "type": "list",
                    "items": [
                        "You can also use the <picture> element with the nested <img> element:"
                    ]
                },
                {
                    "type": "code",
                    "code": "function Home () { return ( < picture > < source srcSet = \"https://example.com/hero.avif\" type = \"image/avif\" /> < source srcSet = \"https://example.com/hero.webp\" type = \"image/webp\" /> < img src = \"https://example.com/hero.jpg\" alt = \"Landscape picture\" width = { 800 } height = { 500 } /> </ picture > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "You can use a custom image loader to optimize images. Set loaderFile to the path of your custom loader."
                    ]
                },
                {
                    "type": "code",
                    "code": "module . exports = { images : { loader : 'custom' , loaderFile : './my/image/loader.js' , } , }"
                },
                {
                    "type": "list",
                    "items": [
                        "Image Component and Image Optimization",
                        "next/image API Reference",
                        "Largest Contentful Paint (LCP)",
                        "Next.js config loaderFile option"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-page-custom-font",
            "title": "No Page Custom Font | Next.js",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "The custom font you're adding was added to a page - this only adds the font to the specific page and not the entire application.",
                        "The custom font you're adding was added to a separate component within pages/_document.js - this disables automatic font optimization."
                    ]
                },
                {
                    "type": "p",
                    "text": "Create the file ./pages/_document.js and add the font to a custom Document:"
                },
                {
                    "type": "code",
                    "code": "import Document , { Html , Head , Main , NextScript } from 'next/document' class MyDocument extends Document { render () { return ( < Html > < Head > < link href = \"https://fonts.googleapis.com/css2?family=Inter&display=optional\" rel = \"stylesheet\" /> </ Head > < body > < Main /> < NextScript /> </ body > </ Html > ) } } export default MyDocument"
                },
                {
                    "type": "code",
                    "code": "import { Html , Head , Main , NextScript } from 'next/document' export default function Document () { return ( < Html > < Head > < link href = \"https://fonts.googleapis.com/css2?family=Inter&display=optional\" rel = \"stylesheet\" /> </ Head > < body > < Main /> < NextScript /> </ body > </ Html > ) }"
                },
                {
                    "type": "p",
                    "text": "If you have a reason to only load a font for a particular page or don't care about font optimization, then you can disable this rule."
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Document",
                        "Font Optimization"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-script-component-in-head",
            "title": "No Script Component in Head | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prevent usage of next/script in next/head component. The next/script component should not be used in a next/head component. Move the <Script /> component outside of <Head> instead."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' import Head from 'next/head' export default function Index () { return ( < Head > < title >Next.js</ title > < Script src = \"/my-script.js\" /> </ Head > ) }"
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' import Head from 'next/head' export default function Index () { return ( <> < Head > < title >Next.js</ title > </ Head > < Script src = \"/my-script.js\" /> </> ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "next/head",
                        "next/script"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-styled-jsx-in-document",
            "title": "No `styled-jsx` in `_document` | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prevent usage of styled-jsx in pages/_document.js . Custom CSS like styled-jsx is not allowed in a Custom Document . If you need shared CSS for all of your pages, take a look at the Custom App file or define a custom layout. For example, consider the following stylesheet named styles.css :"
                },
                {
                    "type": "code",
                    "code": "body { font-family : 'SF Pro Text' , 'SF Pro Icons' , 'Helvetica Neue' , 'Helvetica' , 'Arial' , sans-serif ; padding : 20 px 20 px 60 px ; max-width : 680 px ; margin : 0 auto ; }"
                },
                {
                    "type": "p",
                    "text": "Create a pages/_app.{js,tsx} file if not already present. Then, import the styles.css file."
                },
                {
                    "type": "code",
                    "code": "import '../styles.css' // This default export is required in a new `pages/_app.js` file. export default function MyApp ({ Component , pageProps }) { return < Component { ... pageProps} /> }"
                },
                {
                    "type": "p",
                    "text": "These styles ( styles.css ) will apply to all pages and components in your application."
                },
                {
                    "type": "list",
                    "items": [
                        "Custom Document Caveats",
                        "Layouts",
                        "Built in CSS Support",
                        "Custom App"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-sync-scripts",
            "title": "No Sync Scripts | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "A synchronous script was used which can impact your webpage performance."
                },
                {
                    "type": "code",
                    "code": "import Script from 'next/script' function Home () { return ( < div class = \"container\" > < Script src = \"https://third-party-script.js\" ></ Script > < div >Home Page</ div > </ div > ) } export default Home"
                },
                {
                    "type": "code",
                    "code": "< script src = \"https://third-party-script.js\" async /> < script src = \"https://third-party-script.js\" defer />"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-title-in-document-head",
            "title": "No Title in Document Head | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Prevent usage of <title> with Head component from next/document . A <title> element was defined within the Head component imported from next/document , which should only be used for any <head> code that is common for all pages. Title tags should be defined at the page-level using next/head instead. Within a page or component, import and use next/head to define a page title:"
                },
                {
                    "type": "code",
                    "code": "import Head from 'next/head' export function Home () { return ( < div > < Head > < title >My page title</ title > </ Head > </ div > ) }"
                },
                {
                    "type": "list",
                    "items": [
                        "next/head",
                        "Custom Document"
                    ]
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/no-unwanted-polyfillio",
            "title": "No Unwanted Polyfill.io | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "You are using polyfills from Polyfill.io and including polyfills already shipped with Next.js. This unnecessarily increases page weight which can affect loading performance. Remove all duplicate polyfills. If you need to add polyfills but are not sure if Next.js already includes it, take a look at the list of supported browsers and features ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/sync-dynamic-apis",
            "title": "Dynamic APIs are Asynchronous | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Learn more about why accessing certain APIs synchronously now warns. Somewhere in your code you used an API that opts into dynamic rendering ."
                },
                {
                    "type": "list",
                    "items": [
                        "The params and searchParams props that get provided to pages, layouts, metadata APIs, and route handlers.",
                        "cookies() , draftMode() , and headers() from next/headers"
                    ]
                },
                {
                    "type": "p",
                    "text": "In Next 15, these APIs have been made asynchronous. You can read more about this in the Next.js 15 Upgrade Guide . For example, the following code will issue a warning:"
                },
                {
                    "type": "code",
                    "code": "function Page ({ params }) { // direct access of `params.id`. return < p >ID: { params .id}</ p > }"
                },
                {
                    "type": "p",
                    "text": "This also includes enumerating (e.g. {...params} , or Object.keys(params) ) or iterating over the return\nvalue of these APIs (e.g. [...headers()] or for (const cookie of cookies()) , or explicitly with cookies()[Symbol.iterator]() ). In the version of Next.js that issued this warning, access to these properties is still possible directly but will warn.\nIn future versions, these APIs will be async and direct access will not work as expected. The next-async-request-api codemod can fix many of these cases automatically:"
                },
                {
                    "type": "code",
                    "code": "$ npx @next/codemod@canary next-async-request-api ."
                },
                {
                    "type": "p",
                    "text": "The codemod cannot cover all cases, so you may need to manually adjust some code. If the warning occurred on the Server (e.g. a route handler, or a Server Component),\nyou must await the dynamic API to access its properties:"
                },
                {
                    "type": "code",
                    "code": "async function Page ({ params }) { // asynchronous access of `params.id`. const { id } = await params return < p >ID: {id}</ p > }"
                },
                {
                    "type": "p",
                    "text": "If the warning occurred in a synchronous component (e.g. a Client component),\nyou must use React.use() to unwrap the Promise first:"
                },
                {
                    "type": "code",
                    "code": "'use client' import * as React from 'react' function Page ({ params }) { // asynchronous access of `params.id`. const { id } = React .use (params) return < p >ID: {id}</ p > }"
                },
                {
                    "type": "p",
                    "text": "If Next.js codemod found anything that is not able to be migrated by the codemod, it will leave a comment with @next-codemod-error prefix and the suggested action, for example:\nIn this case, you need to manually await the call to cookies() , and change the function to async. Then refactor the usages of the function to be properly awaited:"
                },
                {
                    "type": "code",
                    "code": "export function MyCookiesComponent () { const c = /* @next-codemod-error Manually await this call and refactor the function to be async */ cookies () return c .get ( 'name' ) }"
                },
                {
                    "type": "p",
                    "text": "If you didn't address the comments that starting with @next-codemod-error left by the codemod, Next.js will error in both dev and build to enforce you to address the issues.\nYou can review the changes and follow the suggestion in the comments. You can either make the necessary changes and remove the comment, or replace the comment prefix @next-codemod-error with @next-codemod-ignore If there's no action to be taken, the comment prefix @next-codemod-ignore will bypass the build error."
                },
                {
                    "type": "code",
                    "code": "- /* @next-codemod-error <suggested message> */ + /* @next-codemod-ignore */"
                },
                {
                    "type": "p",
                    "text": "You can delay unwrapping the Promise (either with await or React.use ) until you actually need to consume the value.\nThis will allow Next.js to statically render more of your page."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/url-deprecated",
            "title": "`url` is deprecated | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "In versions prior to 6.x the url property got magically injected into every Page component (every page inside the pages directory). The reason this is going away is that we want to make things very predictable and explicit. Having a magical url property coming out of nowhere doesn't aid that goal. Note : ⚠️ In some cases using React Dev Tools may trigger this warning even if you do not reference url anywhere in your code. Try temporarily disabling the extension and see if the warning persists. Since Next 5 we provide a way to explicitly inject the Next.js router object into pages and all their descending components.\nThe router property that is injected will hold the same values as url , like pathname , asPath , and query . Here's an example of using withRouter :"
                },
                {
                    "type": "code",
                    "code": "import { withRouter } from 'next/router' class Page extends React . Component { render () { const { router } = this .props console .log (router) return < div >{ router .pathname}</ div > } } export default withRouter (Page)"
                },
                {
                    "type": "p",
                    "text": "We provide a codemod (a code to code transformation) to automatically change the url property usages to withRouter . You can find this codemod and instructions on how to run it here: Use withRouter"
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/messages/webpack5",
            "title": "Webpack 5 Adoption | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js has adopted webpack 5 as the default for compilation. We've spent a lot of effort into ensuring the transition from webpack 4 to 5 will be as smooth as possible. Your application currently has webpack 5 disabled using the webpack5: false flag which has been removed in Next.js 12:"
                },
                {
                    "type": "code",
                    "code": "module . exports = { // Webpack 5 is enabled by default // You can still use webpack 4 while upgrading to the latest version of Next.js by adding the \"webpack5: false\" flag webpack5 : false , }"
                },
                {
                    "type": "p",
                    "text": "Using webpack 5 in your application has many benefits, notably:"
                },
                {
                    "type": "list",
                    "items": [
                        "Improved Disk Caching: next build is significantly faster on subsequent builds",
                        "Improved Fast Refresh: Fast Refresh work is prioritized",
                        "Improved Long Term Caching of Assets: Deterministic code output that is less likely to change between builds",
                        "Improved Tree Shaking",
                        "Support for assets using new URL(\"file.png\", import.meta.url)",
                        "Support for web workers using new Worker(new URL(\"worker.js\", import.meta.url))",
                        "Support for exports / imports field in package.json"
                    ]
                },
                {
                    "type": "p",
                    "text": "In the past releases we have gradually rolled out webpack 5 to Next.js applications:"
                },
                {
                    "type": "list",
                    "items": [
                        "In Next.js 10.2 we automatically opted-in applications without custom webpack configuration in next.config.js",
                        "In Next.js 10.2 we automatically opted-in applications that do not have a next.config.js",
                        "In Next.js 11 webpack 5 was enabled by default for all applications. You could still opt-out and use webpack 4 to help with backwards compatibility using webpack5: false in next.config.js",
                        "In Next.js 12 webpack 4 support was removed."
                    ]
                },
                {
                    "type": "p",
                    "text": "In case you do have custom webpack configuration, either through custom plugins or your own modifications you'll have to take a few steps to ensure your applications works with webpack 5."
                },
                {
                    "type": "list",
                    "items": [
                        "When using next-transpile-modules make sure you use the latest version which includes this patch",
                        "When using @zeit/next-css / @zeit/next-sass make sure you use the built-in CSS/Sass support instead",
                        "When using @zeit/next-preact use this example instead",
                        "When using @zeit/next-source-maps use the built-in production Source Map support",
                        "When using webpack plugins make sure they're upgraded to the latest version, in most cases the latest version will include webpack 5 support. In some cases these upgraded webpack plugins will only support webpack 5."
                    ]
                },
                {
                    "type": "p",
                    "text": "In case you're running into issues you can connect with the community in this help discussion ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/migrating/from-create-react-app",
            "title": "Introduction | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications. Some of the main Next.js features include: On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut ( Ctrl+K or Cmd+K ). To get started, check out the Installation guide. Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router features. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs. Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out our React Foundations Course , which will introduce you to the fundamentals. Then, learn more about Next.js by building a dashboard application . For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver. If you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions , Discord , X (Twitter) , and Reddit ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/migrating/from-gatsby",
            "title": "Introduction | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications. Some of the main Next.js features include: On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut ( Ctrl+K or Cmd+K ). To get started, check out the Installation guide. Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router features. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs. Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out our React Foundations Course , which will introduce you to the fundamentals. Then, learn more about Next.js by building a dashboard application . For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver. If you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions , Discord , X (Twitter) , and Reddit ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/migrating/from-react-router",
            "title": "Introduction | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications. Some of the main Next.js features include: On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut ( Ctrl+K or Cmd+K ). To get started, check out the Installation guide. Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router features. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs. Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out our React Foundations Course , which will introduce you to the fundamentals. Then, learn more about Next.js by building a dashboard application . For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver. If you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions , Discord , X (Twitter) , and Reddit ."
                }
            ]
        },
        {
            "url": "https://nextjs.org/docs/migrating/incremental-adoption",
            "title": "Introduction | Next.js",
            "content": [
                {
                    "type": "p",
                    "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications. Some of the main Next.js features include: On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut ( Ctrl+K or Cmd+K ). To get started, check out the Installation guide. Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router features. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs. Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out our React Foundations Course , which will introduce you to the fundamentals. Then, learn more about Next.js by building a dashboard application . For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver. If you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions , Discord , X (Twitter) , and Reddit ."
                }
            ]
        }
    ]
}