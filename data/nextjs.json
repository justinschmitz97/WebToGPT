{
  "name": "https://nextjs.org",
  "url": "https://https://nextjs.org",
  "pages": [
    {
      "url": "https://nextjs.org/docs",
      "title": "Introduction | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Welcome to the Next.js documentation!"
        },
        {
          "type": "p",
          "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications."
        },
        {
          "type": "p",
          "text": "Some of the main Next.js features include:"
        },
        {
          "type": "p",
          "text": "On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut (Ctrl+KorCmd+K). To get started, check out theInstallationguide."
        },
        {
          "type": "p",
          "text": "Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between theApp Routerand thePages Routerfeatures. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs."
        },
        {
          "type": "p",
          "text": "Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out ourReact Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js bybuilding a dashboard application."
        },
        {
          "type": "p",
          "text": "For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver."
        },
        {
          "type": "p",
          "text": "If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub Discussions,Discord,X (Twitter), andReddit."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/accessibility",
      "title": "Architecture: Accessibility | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The Next.js team is committed to making Next.js accessible to all developers (and their end-users). By adding accessibility features to Next.js by default, we aim to make the Web more inclusive for everyone."
        },
        {
          "type": "p",
          "text": "When transitioning between pages rendered on the server (e.g. using the<a href>tag) screen readers and other assistive technology announce the page title when the page loads so that users understand that the page has changed. In addition to traditional page navigations, Next.js also supports client-side transitions for improved performance (usingnext/link). To ensure that client-side transitions are also announced to assistive technology, Next.js includes a route announcer by default. The Next.js route announcer looks for the page name to announce by first inspectingdocument.title, then the<h1>element, and finally the URL pathname. For the most accessible user experience, ensure that each page in your application has a unique and descriptive title."
        },
        {
          "type": "p",
          "text": "Next.js provides anintegrated ESLint experienceout of the box, including custom rules for Next.js. By default, Next.js includeseslint-plugin-jsx-a11yto help catch accessibility issues early, including warning on:"
        },
        {
          "type": "list",
          "items": [
            "aria-props",
            "aria-proptypes",
            "aria-unsupported-elements",
            "role-has-required-aria-props",
            "role-supports-aria-props"
          ]
        },
        {
          "type": "p",
          "text": "For example, this plugin helps ensure you add alt text toimgtags, use correctaria-*attributes, use correctroleattributes, and more."
        },
        {
          "type": "list",
          "items": [
            "WebAIM WCAG checklist",
            "WCAG 2.2 Guidelines",
            "The A11y Project",
            "Checkcolor contrast ratiosbetween foreground and background elements",
            "Useprefers-reduced-motionwhen working with animations"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app",
      "title": "Introduction: App Router | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The Next.js App Router introduces a new model for building applications using React's latest features such asServer Components,Streaming with Suspense, andServer Actions. Get started with the App Router bycreating your first page."
        },
        {
          "type": "p",
          "text": "You intentionally cannot access the raw request object. However, you can accessheadersandcookiesthrough server-only functions. You can alsoset cookies. Layoutsdo not rerender. They can be cached and reused to avoid unnecessary computation when navigating between pages. By restricting layouts from accessing the raw request, Next.js can prevent the execution of potentially slow or expensive user code within the layout, which could negatively impact performance. This design also enforces consistent and predictable behavior for layouts across different pages, which simplifies development and debugging. Depending on the UI pattern you're building,Parallel Routesallow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params."
        },
        {
          "type": "p",
          "text": "By default, pages are Server Components. You can access the route segments through theparamsprop and the URL search params through thesearchParamsprop for a given page. If you are using Client Components, you can useusePathname,useSelectedLayoutSegment, anduseSelectedLayoutSegmentsfor more complex routes. Further, depending on the UI pattern you're building,Parallel Routesallow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params."
        },
        {
          "type": "p",
          "text": "You can useredirectto redirect from a page to a relative or absolute URL.redirectis a temporary (307) redirect, whilepermanentRedirectis a permanent (308) redirect. When these functions are used while streaming UI, they will insert a meta tag to emit the redirect on the client side."
        },
        {
          "type": "p",
          "text": "Here are some common authentication solutions that support the App Router:"
        },
        {
          "type": "list",
          "items": [
            "NextAuth.js",
            "Clerk",
            "Stack Auth",
            "Auth0",
            "Stytch",
            "Kinde",
            "WorkOS",
            "Or manually handling sessions or JWTs"
          ]
        },
        {
          "type": "p",
          "text": "You can set cookies inServer ActionsorRoute Handlersusing thecookiesfunction. Since HTTP does not allow setting cookies after streaming starts, you cannot set cookies from a page or layout directly. You can also set cookies fromMiddleware."
        },
        {
          "type": "p",
          "text": "If you are looking to build a single Next.js application that serves multiple tenants, we havebuilt an exampleshowing our recommended architecture."
        },
        {
          "type": "p",
          "text": "There are multiple layers of caching in Next.js, and thus, multiple ways to invalidate different parts of the cache.Learn more about caching."
        },
        {
          "type": "p",
          "text": "Yes. You can viewNext.js Commerceor thePlatforms Starter Kitfor two larger examples of using the App Router that are open-source."
        },
        {
          "type": "list",
          "items": [
            "Routing Fundamentals",
            "Data Fetching and Caching",
            "Incremental Static Regeneration",
            "Forms and Mutations",
            "Caching",
            "Rendering Fundamentals",
            "Server Components",
            "Client Components"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference",
      "title": "App Router: API Reference | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The Next.js API reference is divided into the following sections:"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/cli",
      "title": "API Reference: CLI | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js comes withtwoCommand Line Interface (CLI) tools:"
        },
        {
          "type": "list",
          "items": [
            "create-next-app: Quickly create a new Next.js application using the default template or anexamplefrom a public GitHub repository.",
            "next: Run the Next.js development server, build your application, and more."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/cli/create-next-app",
      "title": "CLI: create-next-app | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Thecreate-next-appCLI allow you to create a new Next.js application using the default template or anexamplefrom a public GitHub repository. It is the easiest way to get started with Next.js. Basic usage:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest[project-name] [options]"
        },
        {
          "type": "p",
          "text": "The following options are available:"
        },
        {
          "type": "p",
          "text": "To create a new app using the default template, run the following command in your terminal:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest"
        },
        {
          "type": "p",
          "text": "You will then be asked the following prompts:"
        },
        {
          "type": "code",
          "code": "What is your project named?  my-appWould you like to use TypeScript?  No / YesWould you like to use ESLint?  No / YesWould you like to use Tailwind CSS?  No / YesWould you like your code inside a `src/` directory?  No / YesWould you like to use App Router? (recommended)  No / YesWould you like to use Turbopack for `next dev`?  No / YesWould you like to customize the import alias (`@/*` by default)?  No / Yes"
        },
        {
          "type": "p",
          "text": "Once you've answered the prompts, a new project will be created with your chosen configuration."
        },
        {
          "type": "p",
          "text": "To create a new app using an official Next.js example, use the--exampleflag. For example:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest--example[example-name] [your-project-name]"
        },
        {
          "type": "p",
          "text": "You can view a list of all available examples along with setup instructions in theNext.js repository."
        },
        {
          "type": "p",
          "text": "To create a new app using any public GitHub example, use the--exampleoption with the GitHub repo's URL. For example:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest--example\"https://github.com/.../\"[your-project-name]"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/cli/next",
      "title": "CLI: next CLI | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The Next.js CLI allows you to develop, build, start your application, and more. Basic usage:"
        },
        {
          "type": "code",
          "code": "npxnext[command] [options]"
        },
        {
          "type": "p",
          "text": "The following options are available:"
        },
        {
          "type": "p",
          "text": "The following commands are available:"
        },
        {
          "type": "p",
          "text": "Good to know: Runningnextwithout a command is an alias fornext dev."
        },
        {
          "type": "p",
          "text": "next devstarts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when runningnext dev:"
        },
        {
          "type": "p",
          "text": "next buildcreates an optimized production build of your application. The output displays information about each route. For example:"
        },
        {
          "type": "code",
          "code": "Route (app)SizeFirstLoadJS┌○/_not-found0B0kB└ƒ/products/[id]0B0kB○  (Static)prerenderedasstaticcontentƒ  (Dynamic)server-renderedondemand"
        },
        {
          "type": "list",
          "items": [
            "Size: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.",
            "First Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric."
          ]
        },
        {
          "type": "p",
          "text": "Both of these values arecompressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications. The following options are available for thenext buildcommand:"
        },
        {
          "type": "p",
          "text": "next startstarts the application in production mode. The application should be compiled withnext buildfirst. The following options are available for thenext startcommand:"
        },
        {
          "type": "p",
          "text": "next infoprints relevant details about the current system which can be used to report Next.js bugs when opening aGitHub issue. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next,react,react-dom), and more. The output should look like this:"
        },
        {
          "type": "code",
          "code": "OperatingSystem:Platform:darwinArch:arm64Version:DarwinKernelVersion23.6.0Availablememory(MB):65536AvailableCPUcores:10Binaries:Node:20.12.0npm:10.5.0Yarn:1.22.19pnpm:9.6.0RelevantPackages:next:15.0.0-canary.115//Latestavailableversionisdetected(15.0.0-canary.115).eslint-config-next:14.2.5react:19.0.0-rcreact-dom:19.0.0typescript:5.5.4Next.jsConfig:output:N/A"
        },
        {
          "type": "p",
          "text": "The following options are available for thenext infocommand:"
        },
        {
          "type": "p",
          "text": "next lintruns ESLint for all files in thepages/,app/,components/,lib/, andsrc/directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application. The following options are available for thenext lintcommand:"
        },
        {
          "type": "p",
          "text": "Next.js collectscompletely anonymoustelemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information. The following options are available for thenext telemetrycommand:"
        },
        {
          "type": "p",
          "text": "Learn more aboutTelemetry."
        },
        {
          "type": "p",
          "text": "By default, Next.js useshttp://localhost:3000during development and withnext start. The default port can be changed with the-poption, like so:"
        },
        {
          "type": "code",
          "code": "nextdev-p4000"
        },
        {
          "type": "p",
          "text": "Or using thePORTenvironment variable:"
        },
        {
          "type": "code",
          "code": "PORT=4000next dev"
        },
        {
          "type": "p",
          "text": "Good to know:PORTcannot be set in.envas booting up the HTTP server happens before any other code is initialized."
        },
        {
          "type": "p",
          "text": "For certain use cases like webhooks or authentication, you can useHTTPSto have a secure environment onlocalhost. Next.js can generate a self-signed certificate withnext devusing the--experimental-httpsflag:"
        },
        {
          "type": "code",
          "code": "nextdev--experimental-https"
        },
        {
          "type": "p",
          "text": "With the generated certificate, the Next.js development server will exist athttps://localhost:3000. The default port3000is used unless a port is specified with-p,--port, orPORT. You can also provide a custom certificate and key with--experimental-https-keyand--experimental-https-cert. Optionally, you can provide a custom CA certificate with--experimental-https-caas well."
        },
        {
          "type": "code",
          "code": "nextdev--experimental-https--experimental-https-key./certificates/localhost-key.pem--experimental-https-cert./certificates/localhost.pem"
        },
        {
          "type": "p",
          "text": "next dev --experimental-httpsis only intended for development and creates a locally trusted certificate withmkcert. In production, use properly issued certificates from trusted authorities."
        },
        {
          "type": "p",
          "text": "Good to know: When deploying to Vercel, HTTPS isautomatically configuredfor your Next.js application."
        },
        {
          "type": "p",
          "text": "When deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server withkeep-alive timeoutsthat arelargerthan the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated. To configure the timeout values for the production Next.js server, pass--keepAliveTimeout(in milliseconds) tonext start, like so:"
        },
        {
          "type": "code",
          "code": "nextstart--keepAliveTimeout70000"
        },
        {
          "type": "p",
          "text": "You can pass anynode argumentstonextcommands. For example:"
        },
        {
          "type": "code",
          "code": "NODE_OPTIONS='--throw-deprecation'nextNODE_OPTIONS='-r esm'nextNODE_OPTIONS='--inspect'next"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/components",
      "title": "API Reference: Components | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/components/font",
      "title": "Components: Font | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This API reference will help you understand how to usenext/font/googleandnext/font/local. For features and usage, please see theOptimizing Fontspage."
        },
        {
          "type": "p",
          "text": "For usage, reviewGoogle FontsandLocal Fonts."
        },
        {
          "type": "p",
          "text": "The path of the font file as a string or an array of objects (with typeArray<{path: string, weight?: string, style?: string}>) relative to the directory where the font loader function is called. Used innext/font/local"
        },
        {
          "type": "list",
          "items": ["Required"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": [
            "src:'./fonts/my-font.woff2'wheremy-font.woff2is placed in a directory namedfontsinside theappdirectory",
            "src:[{path: './inter/Inter-Thin.ttf', weight: '100',},{path: './inter/Inter-Regular.ttf',weight: '400',},{path: './inter/Inter-Bold-Italic.ttf', weight: '700',style: 'italic',},]",
            "if the font loader function is called inapp/page.tsxusingsrc:'../styles/fonts/my-font.ttf', thenmy-font.ttfis placed instyles/fontsat the root of the project"
          ]
        },
        {
          "type": "p",
          "text": "The fontweightwith the following possibilities:"
        },
        {
          "type": "list",
          "items": [
            "A string with possible values of the weights available for the specific font or a range of values if it's avariablefont",
            "An array of weight values if the font is not avariable google font. It applies tonext/font/googleonly."
          ]
        },
        {
          "type": "p",
          "text": "Used innext/font/googleandnext/font/local"
        },
        {
          "type": "list",
          "items": ["Required if the font being used isnotvariable"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": [
            "weight: '400': A string for a single weight value - for the fontInter, the possible values are'100','200','300','400','500','600','700','800','900'or'variable'where'variable'is the default)",
            "weight: '100 900': A string for the range between100and900for a variable font",
            "weight: ['100','400','900']: An array of 3 possible values for a non variable font"
          ]
        },
        {
          "type": "p",
          "text": "The fontstylewith the following possibilities:"
        },
        {
          "type": "list",
          "items": [
            "A stringvaluewith default value of'normal'",
            "An array of style values if the font is not avariable google font. It applies tonext/font/googleonly."
          ]
        },
        {
          "type": "p",
          "text": "Used innext/font/googleandnext/font/local"
        },
        {
          "type": "list",
          "items": ["Optional"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": [
            "style: 'italic': A string - it can benormaloritalicfornext/font/google",
            "style: 'oblique': A string - it can take any value fornext/font/localbut is expected to come fromstandard font styles",
            "style: ['italic','normal']: An array of 2 values fornext/font/google- the values are fromnormalanditalic"
          ]
        },
        {
          "type": "p",
          "text": "The fontsubsetsdefined by an array of string values with the names of each subset you would like to bepreloaded. Fonts specified viasubsetswill have a link preload tag injected into the head when thepreloadoption is true, which is the default. Used innext/font/google"
        },
        {
          "type": "list",
          "items": ["Optional"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": ["subsets: ['latin']: An array with the subsetlatin"]
        },
        {
          "type": "p",
          "text": "You can find a list of all subsets on the Google Fonts page for your font."
        },
        {
          "type": "p",
          "text": "Some variable fonts have extraaxesthat can be included. By default, only the font weight is included to keep the file size down. The possible values ofaxesdepend on the specific font. Used innext/font/google"
        },
        {
          "type": "list",
          "items": ["Optional"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": [
            "axes: ['slnt']: An array with valueslntfor theIntervariable font which hasslntas additionalaxesas shownhere. You can find the possibleaxesvalues for your font by using the filter on theGoogle variable fonts pageand looking for axes other thanwght"
          ]
        },
        {
          "type": "p",
          "text": "The fontdisplaywith possible stringvaluesof'auto','block','swap','fallback'or'optional'with default value of'swap'. Used innext/font/googleandnext/font/local"
        },
        {
          "type": "list",
          "items": ["Optional"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": [
            "display: 'optional': A string assigned to theoptionalvalue"
          ]
        },
        {
          "type": "p",
          "text": "A boolean value that specifies whether the font should bepreloadedor not. The default istrue. Used innext/font/googleandnext/font/local"
        },
        {
          "type": "list",
          "items": ["Optional"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": ["preload: false"]
        },
        {
          "type": "p",
          "text": "The fallback font to use if the font cannot be loaded. An array of strings of fallback fonts with no default."
        },
        {
          "type": "list",
          "items": ["Optional"]
        },
        {
          "type": "p",
          "text": "Used innext/font/googleandnext/font/local Examples:"
        },
        {
          "type": "list",
          "items": [
            "fallback: ['system-ui', 'arial']: An array setting the fallback fonts tosystem-uiorarial"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fornext/font/google: A boolean value that sets whether an automatic fallback font should be used to reduceCumulative Layout Shift. The default istrue.",
            "Fornext/font/local: A string or booleanfalsevalue that sets whether an automatic fallback font should be used to reduceCumulative Layout Shift. The possible values are'Arial','Times New Roman'orfalse. The default is'Arial'."
          ]
        },
        {
          "type": "p",
          "text": "Used innext/font/googleandnext/font/local"
        },
        {
          "type": "list",
          "items": ["Optional"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": [
            "adjustFontFallback: false: fornext/font/google",
            "adjustFontFallback: 'Times New Roman': fornext/font/local"
          ]
        },
        {
          "type": "p",
          "text": "A string value to define the CSS variable name to be used if the style is applied with theCSS variable method. Used innext/font/googleandnext/font/local"
        },
        {
          "type": "list",
          "items": ["Optional"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": [
            "variable: '--my-font': The CSS variable--my-fontis declared"
          ]
        },
        {
          "type": "p",
          "text": "An array of font facedescriptorkey-value pairs that define the generated@font-facefurther. Used innext/font/local"
        },
        {
          "type": "list",
          "items": ["Optional"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": ["declarations: [{ prop: 'ascent-override', value: '90%' }]"]
        },
        {
          "type": "p",
          "text": "You can apply the font styles in three ways:"
        },
        {
          "type": "list",
          "items": ["className", "style", "CSS Variables"]
        },
        {
          "type": "p",
          "text": "Returns a read-only CSSclassNamefor the loaded font to be passed to an HTML element."
        },
        {
          "type": "code",
          "code": "<pclassName={inter.className}>Hello, Next.js!</p>"
        },
        {
          "type": "p",
          "text": "Returns a read-only CSSstyleobject for the loaded font to be passed to an HTML element, includingstyle.fontFamilyto access the font family name and fallback fonts."
        },
        {
          "type": "code",
          "code": "<pstyle={inter.style}>Hello World</p>"
        },
        {
          "type": "p",
          "text": "If you would like to set your styles in an external style sheet and specify additional options there, use the CSS variable method. In addition to importing the font, also import the CSS file where the CSS variable is defined and set the variable option of the font loader object as follows:"
        },
        {
          "type": "code",
          "code": "import{ Inter }from'next/font/google'importstylesfrom'../styles/component.module.css'constinter=Inter({variable:'--font-inter',})"
        },
        {
          "type": "p",
          "text": "To use the font, set theclassNameof the parent container of the text you would like to style to the font loader'svariablevalue and theclassNameof the text to thestylesproperty from the external CSS file."
        },
        {
          "type": "code",
          "code": "<mainclassName={inter.variable}><pclassName={styles.text}>Hello World</p></main>"
        },
        {
          "type": "p",
          "text": "Define thetextselector class in thecomponent.module.cssCSS file as follows:"
        },
        {
          "type": "code",
          "code": ".text{font-family:var(--font-inter);font-weight:200;font-style:italic;}"
        },
        {
          "type": "p",
          "text": "In the example above, the textHello Worldis styled using theInterfont and the generated font fallback withfont-weight: 200andfont-style: italic."
        },
        {
          "type": "p",
          "text": "Every time you call thelocalFontor Google font function, that font will be hosted as one instance in your application. Therefore, if you need to use the same font in multiple places, you should load it in one place and import the related font object where you need it. This is done using a font definitions file. For example, create afonts.tsfile in astylesfolder at the root of your app directory. Then, specify your font definitions as follows:"
        },
        {
          "type": "code",
          "code": "import{ Inter,Lora,Source_Sans_3 }from'next/font/google'importlocalFontfrom'next/font/local'// define your variable fontsconstinter=Inter()constlora=Lora()// define 2 weights of a non-variable fontconstsourceCodePro400=Source_Sans_3({ weight:'400'})constsourceCodePro700=Source_Sans_3({ weight:'700'})// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folderconstgreatVibes=localFont({ src:'./GreatVibes-Regular.ttf'})export{ inter,lora,sourceCodePro400,sourceCodePro700,greatVibes }"
        },
        {
          "type": "p",
          "text": "You can now use these definitions in your code as follows:"
        },
        {
          "type": "code",
          "code": "import{ inter,lora,sourceCodePro700,greatVibes }from'../styles/fonts'exportdefaultfunctionPage() {return(<div><pclassName={inter.className}>Hello world using Inter font</p><pstyle={lora.style}>Hello world using Lora font</p><pclassName={sourceCodePro700.className}>Hello world using Source_Sans_3 font with weight 700</p><pclassName={greatVibes.className}>My title in Great Vibes font</p></div>)}"
        },
        {
          "type": "p",
          "text": "To make it easier to access the font definitions in your code, you can define a path alias in yourtsconfig.jsonorjsconfig.jsonfiles as follows:"
        },
        {
          "type": "code",
          "code": "{\"compilerOptions\":{\"paths\":{\"@/fonts\":[\"./styles/fonts\"]}}}"
        },
        {
          "type": "p",
          "text": "You can now import any font definition as follows:"
        },
        {
          "type": "code",
          "code": "import{ greatVibes,sourceCodePro400 }from'@/fonts'"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/components/form",
      "title": "Components: <Form> | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The<Form>component extends the HTML<form>element to provideprefetchingofloading UI,client-side navigationon submission, andprogressive enhancement. It's useful for forms that update URL search params as it reduces the boilerplate code needed to achieve the above. Basic usage:"
        },
        {
          "type": "code",
          "code": "importFormfrom'next/form'exportdefaultfunctionPage() {return(<Formaction=\"/search\">{/* On submission, the input value will beappended tothe URL, e.g. /search?query=abc */}<inputname=\"query\"/><buttontype=\"submit\">Submit</button></Form>)}"
        },
        {
          "type": "p",
          "text": "The behavior of the<Form>component depends on whether theactionprop is passed astringorfunction."
        },
        {
          "type": "list",
          "items": [
            "Whenactionis astring, the<Form>behaves like a native HTML form that uses aGETmethod. The form data is encoded into the URL as search params, and when the form is submitted, it navigates to the specified URL. In addition, Next.js:Prefetchesthe path when the form becomes visible, this preloads shared UI (e.g.layout.jsandloading.js), resulting in faster navigation.Performs aclient-side navigationinstead of a full page reload when the form is submitted. This retains shared UI and client-side state.",
            "Prefetchesthe path when the form becomes visible, this preloads shared UI (e.g.layout.jsandloading.js), resulting in faster navigation.",
            "Performs aclient-side navigationinstead of a full page reload when the form is submitted. This retains shared UI and client-side state.",
            "Whenactionis afunction(Server Action),<Form>behaves like aReact form, executing the action when the form is submitted."
          ]
        },
        {
          "type": "p",
          "text": "Whenactionis a string, the<Form>component supports the following props:"
        },
        {
          "type": "list",
          "items": [
            "action: The URL or path to navigate to when the form is submitted.An empty string\"\"will navigate to the same route with updated search params.",
            "An empty string\"\"will navigate to the same route with updated search params.",
            "replace: Replaces the current history state instead of pushing a new one to thebrowser's historystack. Default isfalse.",
            "scroll: Controls the scroll behavior during navigation. Defaults totrue, this means it will scroll to the top of the new route, and maintain the scroll position for backwards and forwards navigation.",
            "prefetch: Controls whether the path should be prefetched when the form becomes visible in the user's viewport. Defaults totrue."
          ]
        },
        {
          "type": "p",
          "text": "Whenactionis a function, the<Form>component supports the following prop:"
        },
        {
          "type": "list",
          "items": [
            "action: The Server Action to be called when the form is submitted. See theReact docsfor more."
          ]
        },
        {
          "type": "p",
          "text": "Good to know: Whenactionis a function, thereplaceandscrollprops are ignored."
        },
        {
          "type": "list",
          "items": [
            "formAction: Can be used in a<button>or<input type=\"submit\">fields to override theactionprop. Next.js will perform a client-side navigation, however, this approach doesn't support prefetching.When usingbasePath, you must also include it in theformActionpath. e.g.formAction=\"/base-path/search\".",
            "When usingbasePath, you must also include it in theformActionpath. e.g.formAction=\"/base-path/search\".",
            "key: Passing akeyprop to a stringactionis not supported. If you'd like to trigger a re-render or perform a mutation, consider using a functionactioninstead."
          ]
        },
        {
          "type": "list",
          "items": [
            "onSubmit: Can be used to handle form submission logic. However, callingevent.preventDefault()will override<Form>behavior such as navigating to the specified URL.",
            "method,encType,target: Are not supported as they override<Form>behavior.Similarly,formMethod,formEncType, andformTargetcan be used to override themethod,encType, andtargetprops respectively, and using them will fallback to native browser behavior.If you need to use these props, use the HTML<form>element instead.",
            "Similarly,formMethod,formEncType, andformTargetcan be used to override themethod,encType, andtargetprops respectively, and using them will fallback to native browser behavior.",
            "If you need to use these props, use the HTML<form>element instead.",
            "<input type=\"file\">: Using this input type when theactionis a string will match browser behavior by submitting the filename instead of the file object."
          ]
        },
        {
          "type": "p",
          "text": "You can create a search form that navigates to a search results page by passing the path as anaction:"
        },
        {
          "type": "code",
          "code": "importFormfrom'next/form'exportdefaultfunctionPage() {return(<Formaction=\"/search\"><inputname=\"query\"/><buttontype=\"submit\">Submit</button></Form>)}"
        },
        {
          "type": "p",
          "text": "When the user updates the query input field and submits the form, the form data will be encoded into the URL as search params, e.g./search?query=abc."
        },
        {
          "type": "p",
          "text": "Good to know: If you pass an empty string\"\"toaction, the form will navigate to the same route with updated search params."
        },
        {
          "type": "p",
          "text": "On the results page, you can access the query using thesearchParamspage.jsprop and use it to fetch data from an external source."
        },
        {
          "type": "code",
          "code": "import{ getSearchResults }from'@/lib/search'exportdefaultasyncfunctionSearchPage({searchParams,}:{searchParams:{ [key:string]:string|string[]|undefined}}) {constresults=awaitgetSearchResults(searchParams.query)return<div>...</div>}"
        },
        {
          "type": "p",
          "text": "When the<Form>becomes visible in the user's viewport, shared UI (such aslayout.jsandloading.js) on the/searchpage will be prefetched. On submission, the form will immediately navigate to the new route and show loading UI while the results are being fetched. You can design the fallback UI usingloading.js:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionLoading() {return<div>Loading...</div>}"
        },
        {
          "type": "p",
          "text": "To cover cases when shared UI hasn't yet loaded, you can show instant feedback to the user usinguseFormStatus. First, create a component that displays a loading state when the form is pending:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useFormStatus }from'react-dom'exportdefaultfunctionSearchButton() {conststatus=useFormStatus()return(<buttontype=\"submit\">{status.pending?'Searching...':'Search'}</button>)}"
        },
        {
          "type": "p",
          "text": "Then, update the search form page to use theSearchButtoncomponent:"
        },
        {
          "type": "code",
          "code": "importFormfrom'next/form'import{ SearchButton }from'@/ui/search-button'exportdefaultfunctionPage() {return(<Formaction=\"/search\"><inputname=\"query\"/><SearchButton/></Form>)}"
        },
        {
          "type": "p",
          "text": "You can perform mutations by passing a function to theactionprop."
        },
        {
          "type": "code",
          "code": "importFormfrom'next/form'import{ createPost }from'@/posts/actions'exportdefaultfunctionPage() {return(<Formaction={createPost}><inputname=\"title\"/>{/* ... */}<buttontype=\"submit\">Create Post</button></Form>)}"
        },
        {
          "type": "p",
          "text": "After a mutation, it's common to redirect to the new resource. You can use theredirectfunction fromnext/navigationto navigate to the new post page."
        },
        {
          "type": "p",
          "text": "Good to know: Since the \"destination\" of the form submission is not known until the action is executed,<Form>cannot automatically prefetch shared UI."
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'exportasyncfunctioncreatePost(formData:FormData) {// Create a new post// ...// Redirect to the new postredirect(`/posts/${data.id}`)}"
        },
        {
          "type": "p",
          "text": "Then, in the new page, you can fetch data using theparamsprop:"
        },
        {
          "type": "code",
          "code": "import{ getPost }from'@/posts/data'exportdefaultasyncfunctionPostPage({params,}:{params:Promise<{ id:string}>}) {constdata=awaitgetPost((awaitparams).id)return(<div><h1>{data.title}</h1>{/* ... */}</div>)}"
        },
        {
          "type": "p",
          "text": "See theServer Actionsdocs for more examples."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/components/image",
      "title": "Components: <Image> | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "list",
          "items": ["Image Component"]
        },
        {
          "type": "p",
          "text": "This API reference will help you understand how to usepropsandconfiguration optionsavailable for the Image Component. For features and usage, please see theImage Componentpage."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<Imagesrc=\"/profile.png\"width={500}height={500}alt=\"Picture of the author\"/>)}"
        },
        {
          "type": "p",
          "text": "Here's a summary of the props available for the Image Component:"
        },
        {
          "type": "p",
          "text": "The Image Component requires the following properties:src,alt,widthandheight(orfill)."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<div><Imagesrc=\"/profile.png\"width={500}height={500}alt=\"Picture of the author\"/></div>)}"
        },
        {
          "type": "p",
          "text": "Must be one of the following:"
        },
        {
          "type": "list",
          "items": [
            "Astatically importedimage file",
            "A path string. This can be either an absolute external URL, or an internal path depending on theloaderprop."
          ]
        },
        {
          "type": "p",
          "text": "When using the defaultloader, also consider the following for source images:"
        },
        {
          "type": "list",
          "items": [
            "When src is an external URL, you must also configureremotePatterns",
            "When src isanimatedor not a known format (JPEG, PNG, WebP, AVIF, GIF, TIFF) the image will be served as-is",
            "When src is SVG format, it will be blocked unlessunoptimizedordangerouslyAllowSVGis enabled"
          ]
        },
        {
          "type": "p",
          "text": "Thewidthproperty represents theintrinsicimage width in pixels. This property is used to infer the correct aspect ratio of the image and avoid layout shift during loading. It does not determine the rendered size of the image, which is controlled by CSS, similar to thewidthattribute in the HTML<img>tag. Required, except forstatically imported imagesor images with thefillproperty."
        },
        {
          "type": "p",
          "text": "Theheightproperty represents theintrinsicimage height in pixels. This property is used to infer the correct aspect ratio of the image and avoid layout shift during loading. It does not determine the rendered size of the image, which is controlled by CSS, similar to theheightattribute in the HTML<img>tag. Required, except forstatically imported imagesor images with thefillproperty."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Combined, bothwidthandheightproperties are used to determine the aspect ratio of the image which used by browsers to reserve space for the image before it loads.",
            "The intrinsic size does not always mean the rendered size in the browser, which will be determined by the parent container. For example, if the parent container is smaller than the intrinsic size, the image will be scaled down to fit the container.",
            "You can use thefillproperty when the width and height are unknown."
          ]
        },
        {
          "type": "p",
          "text": "Thealtproperty is used to describe the image for screen readers and search engines. It is also the fallback text if images have been disabled or an error occurs while loading the image. It should contain text that could replace the imagewithout changing the meaning of the page. It is not meant to supplement the image and should not repeat information that is already provided in the captions above or below the image. If the image ispurely decorativeornot intended for the user, thealtproperty should be an empty string (alt=\"\"). Learn more"
        },
        {
          "type": "p",
          "text": "The<Image />component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in theAdvanced Propssection."
        },
        {
          "type": "p",
          "text": "A custom function used to resolve image URLs. Aloaderis a function returning a URL string for the image, given the following parameters:"
        },
        {
          "type": "list",
          "items": ["src", "width", "quality"]
        },
        {
          "type": "p",
          "text": "Here is an example of using a custom loader:"
        },
        {
          "type": "code",
          "code": "'use client'importImagefrom'next/image'constimageLoader=({ src,width,quality })=>{return`https://example.com/${src}?w=${width}&q=${quality||75}`}exportdefaultfunctionPage() {return(<Imageloader={imageLoader}src=\"me.png\"alt=\"Picture of the author\"width={500}height={500}/>)}"
        },
        {
          "type": "p",
          "text": "Good to know: Using props likeloader, which accept a function, requires usingClient Componentsto serialize the provided function."
        },
        {
          "type": "p",
          "text": "Alternatively, you can use theloaderFileconfiguration innext.config.jsto configure every instance ofnext/imagein your application, without passing a prop."
        },
        {
          "type": "code",
          "code": "fill={true}// {true} | {false}"
        },
        {
          "type": "p",
          "text": "A boolean that causes the image to fill the parent element, which is useful when thewidthandheightare unknown. The parent elementmustassignposition: \"relative\",position: \"fixed\", orposition: \"absolute\"style. By default, the img element will automatically be assigned theposition: \"absolute\"style. If no styles are applied to the image, the image will stretch to fit the container. You may prefer to setobject-fit: \"contain\"for an image which is letterboxed to fit the container and preserve aspect ratio. Alternatively,object-fit: \"cover\"will cause the image to fill the entire container and be cropped to preserve aspect ratio. For more information, see also:"
        },
        {
          "type": "list",
          "items": ["position", "object-fit", "object-position"]
        },
        {
          "type": "p",
          "text": "A string, similar to a media query, that provides information about how wide the image will be at different breakpoints. The value ofsizeswill greatly affect performance for images usingfillor which arestyled to have a responsive size. Thesizesproperty serves two important purposes related to image performance:"
        },
        {
          "type": "list",
          "items": [
            "First, the value ofsizesis used by the browser to determine which size of the image to download, fromnext/image's automatically generatedsrcset. When the browser chooses, it does not yet know the size of the image on the page, so it selects an image that is the same size or larger than the viewport. Thesizesproperty allows you to tell the browser that the image will actually be smaller than full screen. If you don't specify asizesvalue in an image with thefillproperty, a default value of100vw(full screen width) is used.",
            "Second, thesizesproperty changes the behavior of the automatically generatedsrcsetvalue. If nosizesvalue is present, a smallsrcsetis generated, suitable for a fixed-size image (1x/2x/etc). Ifsizesis defined, a largesrcsetis generated, suitable for a responsive image (640w/750w/etc). If thesizesproperty includes sizes such as50vw, which represent a percentage of the viewport width, then thesrcsetis trimmed to not include any values which are too small to ever be necessary."
          ]
        },
        {
          "type": "p",
          "text": "For example, if you know your styling will cause an image to be full-width on mobile devices, in a 2-column layout on tablets, and a 3-column layout on desktop displays, you should include a sizes property such as the following:"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<divclassName=\"grid-element\"><Imagefillsrc=\"/example.png\"sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"/></div>)}"
        },
        {
          "type": "p",
          "text": "This examplesizescould have a dramatic effect on performance metrics. Without the33vwsizes, the image selected from the server would be 3 times as wide as it needs to be. Because file size is proportional to the square of the width, withoutsizesthe user would download an image that's 9 times larger than necessary. Learn more aboutsrcsetandsizes:"
        },
        {
          "type": "list",
          "items": ["web.dev", "mdn"]
        },
        {
          "type": "code",
          "code": "quality={75}// {number 1-100}"
        },
        {
          "type": "p",
          "text": "The quality of the optimized image, an integer between1and100, where100is the best quality and therefore largest file size. Defaults to75."
        },
        {
          "type": "code",
          "code": "priority={false}// {false} | {true}"
        },
        {
          "type": "p",
          "text": "When true, the image will be considered high priority andpreload. Lazy loading is automatically disabled for images usingpriority. If theloadingproperty is also used and set tolazy, thepriorityproperty can't be used. Theloadingproperty is only meant for advanced use cases. Removeloadingwhenpriorityis needed. You should use thepriorityproperty on any image detected as theLargest Contentful Paint (LCP)element. It may be appropriate to have multiple priority images, as different images may be the LCP element for different viewport sizes. Should only be used when the image is visible above the fold. Defaults tofalse."
        },
        {
          "type": "code",
          "code": "placeholder='empty'// \"empty\" | \"blur\" | \"data:image/...\""
        },
        {
          "type": "p",
          "text": "A placeholder to use while the image is loading. Possible values areblur,empty, ordata:image/.... Defaults toempty. Whenblur, theblurDataURLproperty will be used as the placeholder. Ifsrcis an object from astatic importand the imported image is.jpg,.png,.webp, or.avif, thenblurDataURLwill be automatically populated, except when the image is detected to be animated. For dynamic images, you must provide theblurDataURLproperty. Solutions such asPlaiceholdercan help withbase64generation. Whendata:image/..., theData URLwill be used as the placeholder while the image is loading. Whenempty, there will be no placeholder while the image is loading, only empty space. Try it out:"
        },
        {
          "type": "list",
          "items": [
            "Demo theblurplaceholder",
            "Demo the shimmer effect with data URLplaceholderprop",
            "Demo the color effect withblurDataURLprop"
          ]
        },
        {
          "type": "p",
          "text": "In some cases, you may need more advanced usage. The<Image />component optionally accepts the following advanced properties."
        },
        {
          "type": "p",
          "text": "Allows passing CSS styles to the underlying image element."
        },
        {
          "type": "code",
          "code": "constimageStyle={borderRadius:'50%',border:'1px solid #fff',}exportdefaultfunctionProfileImage() {return<Imagesrc=\"...\"style={imageStyle} />}"
        },
        {
          "type": "p",
          "text": "Remember that the required width and height props can interact with your styling. If you use styling to modify an image's width, you should also style its height toautoto preserve its intrinsic aspect ratio, or your image will be distorted."
        },
        {
          "type": "code",
          "code": "'use client'<ImageonLoadingComplete={(img)=>console.log(img.naturalWidth)} />"
        },
        {
          "type": "p",
          "text": "Warning: Deprecated since Next.js 14 in favor ofonLoad."
        },
        {
          "type": "p",
          "text": "A callback function that is invoked once the image is completely loaded and theplaceholderhas been removed. The callback function will be called with one argument, a reference to the underlying<img>element."
        },
        {
          "type": "p",
          "text": "Good to know: Using props likeonLoadingComplete, which accept a function, requires usingClient Componentsto serialize the provided function."
        },
        {
          "type": "code",
          "code": "<ImageonLoad={(e)=>console.log(e.target.naturalWidth)} />"
        },
        {
          "type": "p",
          "text": "A callback function that is invoked once the image is completely loaded and theplaceholderhas been removed. The callback function will be called with one argument, the Event which has atargetthat references the underlying<img>element."
        },
        {
          "type": "p",
          "text": "Good to know: Using props likeonLoad, which accept a function, requires usingClient Componentsto serialize the provided function."
        },
        {
          "type": "code",
          "code": "<ImageonError={(e)=>console.error(e.target.id)} />"
        },
        {
          "type": "p",
          "text": "A callback function that is invoked if the image fails to load."
        },
        {
          "type": "p",
          "text": "Good to know: Using props likeonError, which accept a function, requires usingClient Componentsto serialize the provided function."
        },
        {
          "type": "code",
          "code": "loading='lazy'// {lazy} | {eager}"
        },
        {
          "type": "p",
          "text": "The loading behavior of the image. Defaults tolazy. Whenlazy, defer loading the image until it reaches a calculated distance from\nthe viewport. Wheneager, load the image immediately. Learn more about theloadingattribute."
        },
        {
          "type": "p",
          "text": "AData URLto\nbe used as a placeholder image before thesrcimage successfully loads. Only takes effect when combined\nwithplaceholder=\"blur\". Must be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or\nless) is recommended. Including larger images as placeholders may harm your application performance. Try it out:"
        },
        {
          "type": "list",
          "items": [
            "Demo the defaultblurDataURLprop",
            "Demo the color effect withblurDataURLprop"
          ]
        },
        {
          "type": "p",
          "text": "You can alsogenerate a solid color Data URLto match the image."
        },
        {
          "type": "code",
          "code": "unoptimized={false}// {false} | {true}"
        },
        {
          "type": "p",
          "text": "When true, the source image will be served as-is from thesrcinstead of changing quality, size, or format. Defaults tofalse. This is useful for images that do not benefit from optimization such as small images (less than 1KB), vector images (SVG), or animated images (GIF)."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'constUnoptimizedImage=(props)=>{return<Image{...props}unoptimized/>}"
        },
        {
          "type": "p",
          "text": "Since Next.js 12.3.0, this prop can be assigned to all images by updatingnext.config.jswith the following configuration:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{unoptimized:true,},}"
        },
        {
          "type": "p",
          "text": "When providing thesrcprop to the<Image>component, both thesrcsetandsrcattributes are generated automatically for the resulting<img>."
        },
        {
          "type": "code",
          "code": "<Imagesrc=\"/me.jpg\"/>"
        },
        {
          "type": "code",
          "code": "<imgsrcset=\"/_next/image?url=%2Fme.jpg&w=640&q=75 1x,/_next/image?url=%2Fme.jpg&w=828&q=75 2x\"src=\"/_next/image?url=%2Fme.jpg&w=828&q=75\"/>"
        },
        {
          "type": "p",
          "text": "In some cases, it is not desirable to have thesrcattribute generated and you may wish to override it using theoverrideSrcprop. For example, when upgrading an existing website from<img>to<Image>, you may wish to maintain the samesrcattribute for SEO purposes such as image ranking or avoiding recrawl."
        },
        {
          "type": "code",
          "code": "<Imagesrc=\"/me.jpg\"overrideSrc=\"/override.jpg\"/>"
        },
        {
          "type": "code",
          "code": "<imgsrcset=\"/_next/image?url=%2Fme.jpg&w=640&q=75 1x,/_next/image?url=%2Fme.jpg&w=828&q=75 2x\"src=\"/override.jpg\"/>"
        },
        {
          "type": "p",
          "text": "A hint to the browser indicating if it should wait for the image to be decoded before presenting other content updates or not. Defaults toasync. Possible values are the following:"
        },
        {
          "type": "list",
          "items": [
            "async- Asynchronously decode the image and allow other content to be rendered before it completes.",
            "sync- Synchronously decode the image for atomic presentation with other content.",
            "auto- No preference for the decoding mode; the browser decides what's best."
          ]
        },
        {
          "type": "p",
          "text": "Learn more about thedecodingattribute."
        },
        {
          "type": "p",
          "text": "Other properties on the<Image />component will be passed to the underlyingimgelement with the exception of the following:"
        },
        {
          "type": "list",
          "items": ["srcSet. UseDevice Sizesinstead."]
        },
        {
          "type": "p",
          "text": "In addition to props, you can configure the Image Component innext.config.js. The following options are available:"
        },
        {
          "type": "p",
          "text": "You can optionally configurelocalPatternsin yournext.config.jsfile in order to allow specific paths to be optimized and block all others paths."
        },
        {
          "type": "code",
          "code": "module.exports={images:{localPatterns:[{pathname:'/assets/images/**',search:'',},],},}"
        },
        {
          "type": "p",
          "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start with/assets/images/and must not have a query string. Attempting to optimize any other path will respond with 400 Bad Request."
        },
        {
          "type": "p",
          "text": "To protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with theremotePatternsproperty in yournext.config.jsfile, as shown below:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'example.com',port:'',pathname:'/account123/**',search:'',},],},}"
        },
        {
          "type": "p",
          "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start withhttps://example.com/account123/and must not have a query string. Any other protocol, hostname, port, or unmatched path will respond with 400 Bad Request."
        },
        {
          "type": "p",
          "text": "Below is an example of theremotePatternsproperty in thenext.config.jsfile using a wildcard pattern in thehostname:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'**.example.com',port:'',search:'',},],},}"
        },
        {
          "type": "p",
          "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start withhttps://img1.example.comorhttps://me.avatar.example.comor any number of subdomains. It cannot have a port or query string. Any other protocol or unmatched hostname will respond with 400 Bad Request."
        },
        {
          "type": "p",
          "text": "Wildcard patterns can be used for bothpathnameandhostnameand have the following syntax:"
        },
        {
          "type": "list",
          "items": [
            "*match a single path segment or subdomain",
            "**match any number of path segments at the end or subdomains at the beginning"
          ]
        },
        {
          "type": "p",
          "text": "The**syntax does not work in the middle of the pattern."
        },
        {
          "type": "p",
          "text": "Good to know: When omittingprotocol,port,pathname, orsearchthen the wildcard**is implied. This is not recommended because it may allow malicious actors to optimize urls you did not intend."
        },
        {
          "type": "p",
          "text": "Below is an example of theremotePatternsproperty in thenext.config.jsfile usingsearch:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'assets.example.com',search:'?v=1727111025337',},],},}"
        },
        {
          "type": "p",
          "text": "Good to know: The example above will ensure thesrcproperty ofnext/imagemust start withhttps://assets.example.comand must have the exact query string?v=1727111025337. Any other protocol or query string will respond with 400 Bad Request."
        },
        {
          "type": "p",
          "text": "Warning: Deprecated since Next.js 14 in favor of strictremotePatternsin order to protect your application from malicious users. Only usedomainsif you own all the content served from the domain."
        },
        {
          "type": "p",
          "text": "Similar toremotePatterns, thedomainsconfiguration can be used to provide a list of allowed hostnames for external images. However, thedomainsconfiguration does not support wildcard pattern matching and it cannot restrict protocol, port, or pathname. Below is an example of thedomainsproperty in thenext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{domains:['assets.acme.com'],},}"
        },
        {
          "type": "p",
          "text": "If you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure theloaderFilein yournext.config.jslike the following:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{loader:'custom',loaderFile:'./my/image/loader.js',},}"
        },
        {
          "type": "p",
          "text": "This must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:"
        },
        {
          "type": "code",
          "code": "'use client'exportdefaultfunctionmyImageLoader({ src,width,quality }) {return`https://example.com/${src}?w=${width}&q=${quality||75}`}"
        },
        {
          "type": "p",
          "text": "Alternatively, you can use theloaderpropto configure each instance ofnext/image. Examples:"
        },
        {
          "type": "list",
          "items": ["Custom Image Loader Configuration"]
        },
        {
          "type": "p",
          "text": "Good to know: Customizing the image loader file, which accepts a function, requires usingClient Componentsto serialize the provided function."
        },
        {
          "type": "p",
          "text": "The following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates."
        },
        {
          "type": "p",
          "text": "If you know the expected device widths of your users, you can specify a list of device width breakpoints using thedeviceSizesproperty innext.config.js. These widths are used when thenext/imagecomponent usessizesprop to ensure the correct image is served for user's device. If no configuration is provided, the default below is used."
        },
        {
          "type": "code",
          "code": "module.exports={images:{deviceSizes:[640,750,828,1080,1200,1920,2048,3840],},}"
        },
        {
          "type": "p",
          "text": "You can specify a list of image widths using theimages.imageSizesproperty in yournext.config.jsfile. These widths are concatenated with the array ofdevice sizesto form the full array of sizes used to generate imagesrcsets. The reason there are two separate lists is that imageSizes is only used for images which provide asizesprop, which indicates that the image is less than the full width of the screen.Therefore, the sizes in imageSizes should all be smaller than the smallest size in deviceSizes. If no configuration is provided, the default below is used."
        },
        {
          "type": "code",
          "code": "module.exports={images:{imageSizes:[16,32,48,64,96,128,256,384],},}"
        },
        {
          "type": "p",
          "text": "The defaultImage Optimization APIwill automatically detect the browser's supported image formats via the request'sAcceptheader in order to determine the best output format. If theAcceptheader matches more than one of the configured formats, the first match in the array is used. Therefore, the array order matters. If there is no match (or the source image isanimated), the Image Optimization API will fallback to the original image's format. If no configuration is provided, the default below is used."
        },
        {
          "type": "code",
          "code": "module.exports={images:{formats:['image/webp'],},}"
        },
        {
          "type": "p",
          "text": "You can enable AVIF support and still fallback to WebP with the following configuration."
        },
        {
          "type": "code",
          "code": "module.exports={images:{formats:['image/avif','image/webp'],},}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "AVIF generally takes 50% longer to encode but it compresses 20% smaller compared to WebP. This means that the first time an image is requested, it will typically be slower and then subsequent requests that are cached will be faster.",
            "If you self-host with a Proxy/CDN in front of Next.js, you must configure the Proxy to forward theAcceptheader."
          ]
        },
        {
          "type": "p",
          "text": "The following describes the caching algorithm for the defaultloader. For all other loaders, please refer to your cloud provider's documentation. Images are optimized dynamically upon request and stored in the<distDir>/cache/imagesdirectory. The optimized image file will be served for subsequent requests until the expiration is reached. When a request is made that matches a cached but expired file, the expired image is served stale immediately. Then the image is optimized again in the background (also called revalidation) and saved to the cache with the new expiration date. The cache status of an image can be determined by reading the value of thex-nextjs-cacheresponse header. The possible values are the following:"
        },
        {
          "type": "list",
          "items": [
            "MISS- the path is not in the cache (occurs at most once, on the first visit)",
            "STALE- the path is in the cache but exceeded the revalidate time so it will be updated in the background",
            "HIT- the path is in the cache and has not exceeded the revalidate time"
          ]
        },
        {
          "type": "p",
          "text": "The expiration (or rather Max Age) is defined by either theminimumCacheTTLconfiguration or the upstream imageCache-Controlheader, whichever is larger. Specifically, themax-agevalue of theCache-Controlheader is used. If boths-maxageandmax-ageare found, thens-maxageis preferred. Themax-ageis also passed-through to any downstream clients including CDNs and browsers."
        },
        {
          "type": "list",
          "items": [
            "You can configureminimumCacheTTLto increase the cache duration when the upstream image does not includeCache-Controlheader or the value is very low.",
            "You can configuredeviceSizesandimageSizesto reduce the total number of possible generated images.",
            "You can configureformatsto disable multiple formats in favor of a single image format."
          ]
        },
        {
          "type": "p",
          "text": "You can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use aStatic Image Importwhich will automatically hash the file contents and cache the image forever with aCache-Controlheader ofimmutable."
        },
        {
          "type": "code",
          "code": "module.exports={images:{minimumCacheTTL:60,},}"
        },
        {
          "type": "p",
          "text": "The expiration (or rather Max Age) of the optimized image is defined by either theminimumCacheTTLor the upstream imageCache-Controlheader, whichever is larger. If you need to change the caching behavior per image, you can configureheadersto set theCache-Controlheader on the upstream image (e.g./some-asset.jpg, not/_next/imageitself). There is no mechanism to invalidate the cache at this time, so its best to keepminimumCacheTTLlow. Otherwise you may need to manually change thesrcprop or delete<distDir>/cache/images."
        },
        {
          "type": "p",
          "text": "The default behavior allows you to import static files such asimport icon from './icon.png'and then pass that to thesrcproperty. In some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently. You can disable static image imports inside yournext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{disableStaticImages:true,},}"
        },
        {
          "type": "p",
          "text": "The defaultloaderdoes not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without properContent Security Policy (CSP) headers. Therefore, we recommended using theunoptimizedprop when thesrcprop is known to be SVG. This happens automatically whensrcends with\".svg\". However, if you need to serve SVG images with the default Image Optimization API, you can setdangerouslyAllowSVGinside yournext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{dangerouslyAllowSVG:true,contentDispositionType:'attachment',contentSecurityPolicy:\"default-src 'self'; script-src 'none'; sandbox;\",},}"
        },
        {
          "type": "p",
          "text": "In addition, it is strongly recommended to also setcontentDispositionTypeto force the browser to download the image, as well ascontentSecurityPolicyto prevent scripts embedded in the image from executing."
        },
        {
          "type": "p",
          "text": "The defaultloadersets theContent-Dispositionheader toattachmentfor added protection since the API can serve arbitrary remote images. The default value isattachmentwhich forces the browser to download the image when visiting directly. This is particularly important whendangerouslyAllowSVGis true. You can optionally configureinlineto allow the browser to render the image when visiting directly, without downloading it."
        },
        {
          "type": "code",
          "code": "module.exports={images:{contentDispositionType:'inline',},}"
        },
        {
          "type": "p",
          "text": "The defaultloaderwill automatically bypass Image Optimization for animated images and serve the image as-is. Auto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use theunoptimizedprop."
        },
        {
          "type": "p",
          "text": "The default generatedsrcsetcontains1xand2ximages in order to support different device pixel ratios. However, you may wish to render a responsive image that stretches with the viewport. In that case, you'll need to setsizesas well asstyle(orclassName). You can render a responsive image using one of the following methods below."
        },
        {
          "type": "p",
          "text": "If the source image is not dynamic, you can statically import to create a responsive image:"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'importmefrom'../photos/me.jpg'exportdefaultfunctionAuthor() {return(<Imagesrc={me}alt=\"Picture of the author\"sizes=\"100vw\"style={{width:'100%',height:'auto',}}/>)}"
        },
        {
          "type": "p",
          "text": "Try it out:"
        },
        {
          "type": "list",
          "items": ["Demo the image responsive to viewport"]
        },
        {
          "type": "p",
          "text": "If the source image is a dynamic or a remote url, you will also need to providewidthandheightto set the correct aspect ratio of the responsive image:"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportdefaultfunctionPage({ photoUrl }) {return(<Imagesrc={photoUrl}alt=\"Picture of the author\"sizes=\"100vw\"style={{width:'100%',height:'auto',}}width={500}height={300}/>)}"
        },
        {
          "type": "p",
          "text": "Try it out:"
        },
        {
          "type": "list",
          "items": ["Demo the image responsive to viewport"]
        },
        {
          "type": "p",
          "text": "If you don't know the aspect ratio, you will need to set thefillprop and setposition: relativeon the parent. Optionally, you can setobject-fitstyle depending on the desired stretch vs crop behavior:"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportdefaultfunctionPage({ photoUrl }) {return(<divstyle={{ position:'relative',width:'300px',height:'500px'}}><Imagesrc={photoUrl}alt=\"Picture of the author\"sizes=\"300px\"fillstyle={{objectFit:'contain',}}/></div>)}"
        },
        {
          "type": "p",
          "text": "Try it out:"
        },
        {
          "type": "list",
          "items": ["Demo thefillprop"]
        },
        {
          "type": "p",
          "text": "If you want to display a different image for light and dark mode, you can create a new component that wraps two<Image>components and reveals the correct one based on a CSS media query."
        },
        {
          "type": "code",
          "code": ".imgDark{display:none;}@media(prefers-color-scheme:dark) {.imgLight{display:none;}.imgDark{display:unset;}}"
        },
        {
          "type": "code",
          "code": "importstylesfrom'./theme-image.module.css'importImage,{ ImageProps }from'next/image'typeProps=Omit<ImageProps,'src'|'priority'|'loading'>&{srcLight:stringsrcDark:string}constThemeImage=(props:Props)=>{const{srcLight,srcDark,...rest}=propsreturn(<><Image{...rest}src={srcLight}className={styles.imgLight} /><Image{...rest}src={srcDark}className={styles.imgDark} /></>)}"
        },
        {
          "type": "p",
          "text": "Good to know: The default behavior ofloading=\"lazy\"ensures that only the correct image is loaded. You cannot usepriorityorloading=\"eager\"because that would cause both images to load. Instead, you can usefetchPriority=\"high\"."
        },
        {
          "type": "p",
          "text": "Try it out:"
        },
        {
          "type": "list",
          "items": ["Demo light/dark mode theme detection"]
        },
        {
          "type": "p",
          "text": "For more advanced use cases, you can callgetImageProps()to get the props that would be passed to the underlying<img>element, and instead pass to them to another component, style, canvas, etc. This also avoid calling ReactuseState()so it can lead to better performance, but it cannot be used with theplaceholderprop because the placeholder will never be removed."
        },
        {
          "type": "p",
          "text": "If you want to display a different image for light and dark mode, you can use the<picture>element to display a different image based on the user'spreferred color scheme."
        },
        {
          "type": "code",
          "code": "import{ getImageProps }from'next/image'exportdefaultfunctionPage() {constcommon={ alt:'Theme Example',width:800,height:400}const{props: { srcSet:dark},}=getImageProps({...common,src:'/dark.png'})const{props: { srcSet:light,...rest},}=getImageProps({...common,src:'/light.png'})return(<picture><sourcemedia=\"(prefers-color-scheme: dark)\"srcSet={dark} /><sourcemedia=\"(prefers-color-scheme: light)\"srcSet={light} /><img{...rest} /></picture>)}"
        },
        {
          "type": "p",
          "text": "If you want to display a different image for mobile and desktop, sometimes calledArt Direction, you can provide differentsrc,width,height, andqualityprops togetImageProps()."
        },
        {
          "type": "code",
          "code": "import{ getImageProps }from'next/image'exportdefaultfunctionHome() {constcommon={ alt:'Art Direction Example',sizes:'100vw'}const{props: { srcSet:desktop},}=getImageProps({...common,width:1440,height:875,quality:80,src:'/desktop.jpg',})const{props: { srcSet:mobile,...rest},}=getImageProps({...common,width:750,height:1334,quality:70,src:'/mobile.jpg',})return(<picture><sourcemedia=\"(min-width: 1000px)\"srcSet={desktop} /><sourcemedia=\"(min-width: 500px)\"srcSet={mobile} /><img{...rest}style={{ width:'100%',height:'auto'}} /></picture>)}"
        },
        {
          "type": "p",
          "text": "You can even convert thesrcSetstring to theimage-set()CSS function to optimize a background image."
        },
        {
          "type": "code",
          "code": "import{ getImageProps }from'next/image'functiongetBackgroundImage(srcSet='') {constimageSet=srcSet.split(', ').map((str)=>{const[url,dpi]=str.split(' ')return`url(\"${url}\")${dpi}`}).join(', ')return`image-set(${imageSet})`}exportdefaultfunctionHome() {const{props: {srcSet},}=getImageProps({ alt:'',width:128,height:128,src:'/img.png'})constbackgroundImage=getBackgroundImage(srcSet)conststyle={ height:'100vh',width:'100vw',backgroundImage }return(<mainstyle={style}><h1>Hello World</h1></main>)}"
        },
        {
          "type": "p",
          "text": "Thisnext/imagecomponent uses browser nativelazy loading, which may fallback to eager loading for older browsers before Safari 15.4. When using the blur-up placeholder, older browsers before Safari 12 will fallback to empty placeholder. When using styles withwidth/heightofauto, it is possible to causeLayout Shifton older browsers before Safari 15 that don'tpreserve the aspect ratio. For more details, seethis MDN video."
        },
        {
          "type": "list",
          "items": [
            "Safari 15 - 16.3display a gray border while loading. Safari 16.4fixed this issue. Possible solutions:Use CSS@supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }Usepriorityif the image is above the fold",
            "Use CSS@supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }",
            "Usepriorityif the image is above the fold",
            "Firefox 67+displays a white background while loading. Possible solutions:EnableAVIFformatsUseplaceholder",
            "EnableAVIFformats",
            "Useplaceholder"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/components/link",
      "title": "Components: <Link> | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "<Link>is a React component that extends the HTML<a>element to provideprefetchingand client-side navigation between routes. It is the primary way to navigate between routes in Next.js. Basic usage:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return<Linkhref=\"/dashboard\">Dashboard</Link>}"
        },
        {
          "type": "p",
          "text": "The following props can be passed to the<Link>component:"
        },
        {
          "type": "p",
          "text": "Good to know:<a>tag attributes such asclassNameortarget=\"_blank\"can be added to<Link>as props and will be passed to the underlying<a>element."
        },
        {
          "type": "p",
          "text": "The path or URL to navigate to."
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'// Navigate to /about?name=testexportdefaultfunctionPage() {return(<Linkhref={{pathname:'/about',query:{ name:'test'},}}>About</Link>)}"
        },
        {
          "type": "p",
          "text": "Defaults tofalse.Whentrue,next/linkwill replace the current history state instead of adding a new URL into thebrowser's historystack."
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<Linkhref=\"/dashboard\"replace>Dashboard</Link>)}"
        },
        {
          "type": "p",
          "text": "Defaults totrue.The default scrolling behavior of<Link>in Next.jsis to maintain scroll position, similar to how browsers handle back and forwards navigation. When you navigate to a newPage, scroll position will stay the same as long as the Page is visible in the viewport. However, if the Page is not visible in the viewport, Next.js will scroll to the top of the first Page element. Whenscroll = {false}, Next.js will not attempt to scroll to the first Page element."
        },
        {
          "type": "p",
          "text": "Good to know: Next.js checks ifscroll: falsebefore managing scroll behavior. If scrolling is enabled, it identifies the relevant DOM node for navigation and inspects each top-level element. All non-scrollable elements and those without rendered HTML are bypassed, this includes sticky or fixed positioned elements, and non-visible elements such as those calculated withgetBoundingClientRect. Next.js then continues through siblings until it identifies a scrollable element that is visible in the viewport."
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<Linkhref=\"/dashboard\"scroll={false}>Dashboard</Link>)}"
        },
        {
          "type": "p",
          "text": "Prefetching happens when a<Link />component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by thehref) and its data in the background to improve the performance of client-side navigations. If the prefetched data has expired by the time the user hovers over a<Link />, Next.js will attempt to prefetch it again.Prefetching is only enabled in production. The following values can be passed to theprefetchprop:"
        },
        {
          "type": "list",
          "items": [
            "null(default): Prefetch behavior depends on whether the route is static or dynamic. For static routes, the full route will be prefetched (including all its data). For dynamic routes, the partial route down to the nearest segment with aloading.jsboundary will be prefetched.",
            "true: The full route will be prefetched for both static and dynamic routes.",
            "false: Prefetching will never happen both on entering the viewport and on hover."
          ]
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<Linkhref=\"/dashboard\"prefetch={false}>Dashboard</Link>)}"
        },
        {
          "type": "p",
          "text": "The following examples demonstrate how to use the<Link>component in different scenarios."
        },
        {
          "type": "p",
          "text": "When linking todynamic segments, you can usetemplate literals and interpolationto generate a list of links. For example, to generate a list of blog posts:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'interfacePost{id:numbertitle:stringslug:string}exportdefaultfunctionPostList({ posts }:{ posts:Post[] }) {return(<ul>{posts.map((post)=>(<likey={post.id}><Linkhref={`/blog/${post.slug}`}>{post.title}</Link></li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "You can useusePathname()to determine if a link is active. For example, to add a class to the active link, you can check if the currentpathnamematches thehrefof the link:"
        },
        {
          "type": "code",
          "code": "'use client'import{ usePathname }from'next/navigation'importLinkfrom'next/link'exportfunctionLinks() {constpathname=usePathname()return(<nav><LinkclassName={`link${pathname==='/'?'active':''}`}href=\"/\">Home</Link><LinkclassName={`link${pathname==='/about'?'active':''}`}href=\"/about\">About</Link></nav>)}"
        },
        {
          "type": "p",
          "text": "If you'd like to scroll to a specificidon navigation, you can append your URL with a#hash link or just pass a hash link to thehrefprop. This is possible since<Link>renders to an<a>element."
        },
        {
          "type": "code",
          "code": "<Linkhref=\"/dashboard#settings\">Settings</Link>// Output<ahref=\"/dashboard#settings\">Settings</a>"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Next.js will scroll to thePageif it is not visible in the viewport upon navigation."
          ]
        },
        {
          "type": "p",
          "text": "Fordynamic route segments, it can be handy to use template literals to create the link's path. For example, you can generate a list of links to the dynamic routeapp/blog/[slug]/page.js:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage({ posts }) {return(<ul>{posts.map((post)=>(<likey={post.id}><Linkhref={`/blog/${post.slug}`}>{post.title}</Link></li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "If the child ofLinkis a custom component that wraps an<a>tag, you must addpassHreftoLink. This is necessary if you’re using libraries likestyled-components. Without this, the<a>tag will not have thehrefattribute, which hurts your site's accessibility and might affect SEO. If you're usingESLint, there is a built-in rulenext/link-passhrefto ensure correct usage ofpassHref."
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'importstyledfrom'styled-components'// This creates a custom component that wraps an <a> tagconstRedLink=styled.a`color: red;`functionNavLink({ href,name }) {return(<Linkhref={href}passHreflegacyBehavior><RedLink>{name}</RedLink></Link>)}exportdefaultNavLink"
        },
        {
          "type": "list",
          "items": [
            "If you’re usingemotion’s JSX pragma feature (@jsx jsx), you must usepassHrefeven if you use an<a>tag directly.",
            "The component should supportonClickproperty to trigger navigation correctly."
          ]
        },
        {
          "type": "p",
          "text": "If the child ofLinkis a functional component, in addition to usingpassHrefandlegacyBehavior, you must wrap the component inReact.forwardRef:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'importReactfrom'react'// Define the props type for MyButtoninterfaceMyButtonProps{onClick?:React.MouseEventHandler<HTMLAnchorElement>href?:string}// Use React.ForwardRefRenderFunction to properly type the forwarded refconstMyButton:React.ForwardRefRenderFunction<HTMLAnchorElement,MyButtonProps>=({ onClick,href },ref)=>{return(<ahref={href}onClick={onClick}ref={ref}>Click Me</a>)}// Use React.forwardRef to wrap the componentconstForwardedMyButton=React.forwardRef(MyButton)exportdefaultfunctionPage() {return(<Linkhref=\"/about\"passHreflegacyBehavior><ForwardedMyButton/></Link>)}"
        },
        {
          "type": "p",
          "text": "The default behavior of theLinkcomponent is topusha new URL into thehistorystack. You can use thereplaceprop to prevent adding a new entry, as in the following example:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<Linkhref=\"/about\"replace>About us</Link>)}"
        },
        {
          "type": "p",
          "text": "The default scrolling behavior of<Link>in Next.jsis to maintain scroll position, similar to how browsers handle back and forwards navigation. When you navigate to a newPage, scroll position will stay the same as long as the Page is visible in the viewport. However, if the Page is not visible in the viewport, Next.js will scroll to the top of the first Page element. If you'd like to disable this behavior, you can passscroll={false}to the<Link>component, orscroll: falsetorouter.push()orrouter.replace()."
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<Linkhref=\"/#hashid\"scroll={false}>Disables scrolling to the top</Link>)}"
        },
        {
          "type": "p",
          "text": "Usingrouter.push()orrouter.replace():"
        },
        {
          "type": "code",
          "code": "// useRouterimport{ useRouter }from'next/navigation'constrouter=useRouter()router.push('/dashboard',{ scroll:false})"
        },
        {
          "type": "p",
          "text": "It's common to useMiddlewarefor authentication or other purposes that involve rewriting the user to a different page. In order for the<Link />component to properly prefetch links with rewrites via Middleware, you need to tell Next.js both the URL to display and the URL to prefetch. This is required to avoid un-necessary fetches to middleware to know the correct route to prefetch. For example, if you want to serve a/dashboardroute that has authenticated and visitor views, you can add the following in your Middleware to redirect the user to the correct page:"
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'exportfunctionmiddleware(request:Request) {constnextUrl=request.nextUrlif(nextUrl.pathname==='/dashboard') {if(request.cookies.authToken) {returnNextResponse.rewrite(newURL('/auth/dashboard',request.url))}else{returnNextResponse.rewrite(newURL('/public/dashboard',request.url))}}}"
        },
        {
          "type": "p",
          "text": "In this case, you would want to use the following code in your<Link />component:"
        },
        {
          "type": "code",
          "code": "'use client'importLinkfrom'next/link'importuseIsAuthedfrom'./hooks/useIsAuthed'// Your auth hookexportdefaultfunctionPage() {constisAuthed=useIsAuthed()constpath=isAuthed?'/auth/dashboard':'/public/dashboard'return(<Linkas=\"/dashboard\"href={path}>Dashboard</Link>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/components/script",
      "title": "Components: <Script> | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This API reference will help you understand how to usepropsavailable for the Script Component. For features and usage, please see theOptimizing Scriptspage."
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionDashboard() {return(<><Scriptsrc=\"https://example.com/script.js\"/></>)}"
        },
        {
          "type": "p",
          "text": "Here's a summary of the props available for the Script Component:"
        },
        {
          "type": "p",
          "text": "The<Script />component requires the following properties."
        },
        {
          "type": "p",
          "text": "A path string specifying the URL of an external script. This can be either an absolute external URL or an internal path. Thesrcproperty is required unless an inline script is used."
        },
        {
          "type": "p",
          "text": "The<Script />component accepts a number of additional properties beyond those which are required."
        },
        {
          "type": "p",
          "text": "The loading strategy of the script. There are four different strategies that can be used:"
        },
        {
          "type": "list",
          "items": [
            "beforeInteractive: Load before any Next.js code and before any page hydration occurs.",
            "afterInteractive: (default) Load early but after some hydration on the page occurs.",
            "lazyOnload: Load during browser idle time.",
            "worker: (experimental) Load in a web worker."
          ]
        },
        {
          "type": "p",
          "text": "Scripts that load with thebeforeInteractivestrategy are injected into the initial HTML from the server, downloaded before any Next.js module, and executed in the order they are placed beforeanyhydration occurs on the page. Scripts denoted with this strategy are preloaded and fetched before any first-party code, but their execution does not block page hydration from occurring. beforeInteractivescripts must be placed inside the root layout (app/layout.tsx) and are designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side). This strategy should only be used for critical scripts that need to be fetched before any part of the page becomes interactive."
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}<Scriptsrc=\"https://example.com/script.js\"strategy=\"beforeInteractive\"/></body></html>)}"
        },
        {
          "type": "p",
          "text": "Good to know: Scripts withbeforeInteractivewill always be injected inside theheadof the HTML document regardless of where it's placed in the component."
        },
        {
          "type": "p",
          "text": "Some examples of scripts that should be loaded as soon as possible withbeforeInteractiveinclude:"
        },
        {
          "type": "list",
          "items": ["Bot detectors", "Cookie consent managers"]
        },
        {
          "type": "p",
          "text": "Scripts that use theafterInteractivestrategy are injected into the HTML client-side and will load after some (or all) hydration occurs on the page.This is the default strategyof the Script component and should be used for any script that needs to load as soon as possible but not before any first-party Next.js code. afterInteractivescripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser."
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"strategy=\"afterInteractive\"/></>)}"
        },
        {
          "type": "p",
          "text": "Some examples of scripts that are good candidates forafterInteractiveinclude:"
        },
        {
          "type": "list",
          "items": ["Tag managers", "Analytics"]
        },
        {
          "type": "p",
          "text": "Scripts that use thelazyOnloadstrategy are injected into the HTML client-side during browser idle time and will load after all resources on the page have been fetched. This strategy should be used for any background or low priority scripts that do not need to load early. lazyOnloadscripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser."
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"strategy=\"lazyOnload\"/></>)}"
        },
        {
          "type": "p",
          "text": "Examples of scripts that do not need to load immediately and can be fetched withlazyOnloadinclude:"
        },
        {
          "type": "list",
          "items": ["Chat support plugins", "Social media widgets"]
        },
        {
          "type": "p",
          "text": "Warning:Theworkerstrategy is not yet stable and does not yet work with theappdirectory. Use with caution."
        },
        {
          "type": "p",
          "text": "Scripts that use theworkerstrategy are off-loaded to a web worker in order to free up the main thread and ensure that only critical, first-party resources are processed on it. While this strategy can be used for any script, it is an advanced use case that is not guaranteed to support all third-party scripts. To useworkeras a strategy, thenextScriptWorkersflag must be enabled innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{nextScriptWorkers:true,},}"
        },
        {
          "type": "p",
          "text": "workerscripts canonly currently be used in thepages/directory:"
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionHome() {return(<><Scriptsrc=\"https://example.com/script.js\"strategy=\"worker\"/></>)}"
        },
        {
          "type": "p",
          "text": "Warning:onLoaddoes not yet work with Server Components and can only be used in Client Components. Further,onLoadcan't be used withbeforeInteractive– consider usingonReadyinstead."
        },
        {
          "type": "p",
          "text": "Some third-party scripts require users to run JavaScript code once after the script has finished loading in order to instantiate content or call a function. If you are loading a script with eitherafterInteractiveorlazyOnloadas a loading strategy, you can execute code after it has loaded using theonLoadproperty. Here's an example of executing a lodash method only after the library has been loaded."
        },
        {
          "type": "code",
          "code": "'use client'importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"onLoad={()=>{console.log(_.sample([1,2,3,4]))}}/></>)}"
        },
        {
          "type": "p",
          "text": "Warning:onReadydoes not yet work with Server Components and can only be used in Client Components."
        },
        {
          "type": "p",
          "text": "Some third-party scripts require users to run JavaScript code after the script has finished loading and every time the component is mounted (after a route navigation for example). You can execute code after the script's load event when it first loads and then after every subsequent component re-mount using theonReadyproperty. Here's an example of how to re-instantiate a Google Maps JS embed every time the component is mounted:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useRef }from'react'importScriptfrom'next/script'exportdefaultfunctionPage() {constmapRef=useRef()return(<><divref={mapRef}></div><Scriptid=\"google-maps\"src=\"https://maps.googleapis.com/maps/api/js\"onReady={()=>{newgoogle.maps.Map(mapRef.current,{center:{ lat:-34.397,lng:150.644},zoom:8,})}}/></>)}"
        },
        {
          "type": "p",
          "text": "Warning:onErrordoes not yet work with Server Components and can only be used in Client Components.onErrorcannot be used with thebeforeInteractiveloading strategy."
        },
        {
          "type": "p",
          "text": "Sometimes it is helpful to catch when a script fails to load. These errors can be handled with theonErrorproperty:"
        },
        {
          "type": "code",
          "code": "'use client'importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"onError={(e:Error)=>{console.error('Script failed to load',e)}}/></>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config",
      "title": "API Reference: Configuration | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/eslint",
      "title": "Configuration: ESLint | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js provides an ESLint plugin,eslint-plugin-next, already bundled within the base configuration that makes it possible to catch common issues and problems in a Next.js application."
        },
        {
          "type": "p",
          "text": "Recommended rule-sets from the following ESLint plugins are all used withineslint-config-next:"
        },
        {
          "type": "list",
          "items": [
            "eslint-plugin-react",
            "eslint-plugin-react-hooks",
            "eslint-plugin-next"
          ]
        },
        {
          "type": "p",
          "text": "This will take precedence over the configuration fromnext.config.js."
        },
        {
          "type": "p",
          "text": "The full set of rules is as follows:"
        },
        {
          "type": "p",
          "text": "We recommend using an appropriateintegrationto view warnings and errors directly in your code editor during development."
        },
        {
          "type": "p",
          "text": "By default, Next.js will run ESLint for all files in thepages/,app/,components/,lib/, andsrc/directories. However, you can specify which directories using thedirsoption in theeslintconfig innext.config.jsfor production builds:"
        },
        {
          "type": "code",
          "code": "module.exports={eslint:{dirs:['pages','utils'],// Only run ESLint on the 'pages' and 'utils' directories during production builds (next build)},}"
        },
        {
          "type": "p",
          "text": "Similarly, the--dirand--fileflags can be used fornext lintto lint specific directories and files:"
        },
        {
          "type": "code",
          "code": "nextlint--dirpages--dirutils--filebar.js"
        },
        {
          "type": "p",
          "text": "If you're usingeslint-plugin-nextin a project where Next.js isn't installed in your root directory (such as a monorepo), you can telleslint-plugin-nextwhere to find your Next.js application using thesettingsproperty in your.eslintrc:"
        },
        {
          "type": "code",
          "code": "import { FlatCompat } from '@eslint/eslintrc'const compat = new FlatCompat({// import.meta.dirname is available after Node.js v20.11.0baseDirectory: import.meta.dirname,})const eslintConfig = [...compat.config({extends: ['next'],settings: {next: {rootDir: 'packages/my-app/',},},}),]export default eslintConfig"
        },
        {
          "type": "p",
          "text": "rootDircan be a path (relative or absolute), a glob (i.e.\"packages/*/\"), or an array of paths and/or globs."
        },
        {
          "type": "p",
          "text": "To improve performance, information of files processed by ESLint are cached by default. This is stored in.next/cacheor in your definedbuild directory. If you include any ESLint rules that depend on more than the contents of a single source file and need to disable the cache, use the--no-cacheflag withnext lint."
        },
        {
          "type": "code",
          "code": "nextlint--no-cache"
        },
        {
          "type": "p",
          "text": "If you would like to modify or disable any rules provided by the supported plugins (react,react-hooks,next), you can directly change them using therulesproperty in your.eslintrc:"
        },
        {
          "type": "code",
          "code": "import { FlatCompat } from '@eslint/eslintrc'const compat = new FlatCompat({// import.meta.dirname is available after Node.js v20.11.0baseDirectory: import.meta.dirname,})const eslintConfig = [...compat.config({extends: ['next'],rules: {'react/no-unescaped-entities': 'off','@next/next/no-page-custom-font': 'off',},}),]export default eslintConfig"
        },
        {
          "type": "p",
          "text": "Thenext/core-web-vitalsrule set is enabled whennext lintis run for the first time and thestrictoption is selected."
        },
        {
          "type": "code",
          "code": "import { FlatCompat } from '@eslint/eslintrc'const compat = new FlatCompat({// import.meta.dirname is available after Node.js v20.11.0baseDirectory: import.meta.dirname,})const eslintConfig = [...compat.config({extends: ['next/core-web-vitals'],}),]export default eslintConfig"
        },
        {
          "type": "p",
          "text": "next/core-web-vitalsupdateseslint-plugin-nextto error on a number of rules that are warnings by default if they affectCore Web Vitals."
        },
        {
          "type": "p",
          "text": "Thenext/core-web-vitalsentry point is automatically included for new applications built withCreate Next App."
        },
        {
          "type": "p",
          "text": "In addition to the Next.js ESLint rules,create-next-app --typescriptwill also add TypeScript-specific lint rules withnext/typescriptto your config:"
        },
        {
          "type": "code",
          "code": "import { FlatCompat } from '@eslint/eslintrc'const compat = new FlatCompat({// import.meta.dirname is available after Node.js v20.11.0baseDirectory: import.meta.dirname,})const eslintConfig = [...compat.config({extends: ['next/core-web-vitals', 'next/typescript'],}),]export default eslintConfig"
        },
        {
          "type": "p",
          "text": "Those rules are based onplugin:@typescript-eslint/recommended.\nSeetypescript-eslint > Configsfor more details."
        },
        {
          "type": "p",
          "text": "ESLint also contains code formatting rules, which can conflict with your existingPrettiersetup. We recommend includingeslint-config-prettierin your ESLint config to make ESLint and Prettier work together. First, install the dependency:"
        },
        {
          "type": "code",
          "code": "npminstall--save-deveslint-config-prettieryarnadd--deveslint-config-prettierpnpmadd--save-deveslint-config-prettierbunadd--deveslint-config-prettier"
        },
        {
          "type": "p",
          "text": "Then, addprettierto your existing ESLint config:"
        },
        {
          "type": "code",
          "code": "import { FlatCompat } from '@eslint/eslintrc'const compat = new FlatCompat({// import.meta.dirname is available after Node.js v20.11.0baseDirectory: import.meta.dirname,})const eslintConfig = [...compat.config({extends: ['next', 'prettier'],}),]export default eslintConfig"
        },
        {
          "type": "p",
          "text": "If you would like to usenext lintwithlint-stagedto run the linter on staged git files, you'll have to add the following to the.lintstagedrc.jsfile in the root of your project in order to specify usage of the--fileflag."
        },
        {
          "type": "code",
          "code": "constpath=require('path')constbuildEslintCommand=(filenames)=>`next lint --fix --file${filenames.map((f)=>path.relative(process.cwd(),f)).join(' --file ')}`module.exports={'*.{js,jsx,ts,tsx}':[buildEslintCommand],}"
        },
        {
          "type": "p",
          "text": "If you do not want ESLint to run duringnext build, you can set theeslint.ignoreDuringBuildsoption innext.config.jstotrue:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={eslint:{// Warning: This allows production builds to successfully complete even if// your project has ESLint errors.ignoreDuringBuilds:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "If you already have ESLint configured in your application, we recommend extending from this plugin directly instead of includingeslint-config-nextunless a few conditions are met."
        },
        {
          "type": "p",
          "text": "If the following conditions are true:"
        },
        {
          "type": "list",
          "items": [
            "You have one or more of the following plugins already installed (either separately or through a different config such asairbnborreact-app):reactreact-hooksjsx-a11yimport",
            "react",
            "react-hooks",
            "jsx-a11y",
            "import",
            "You've defined specificparserOptionsthat are different from how Babel is configured within Next.js (this is not recommended unless you havecustomized your Babel configuration)",
            "You haveeslint-plugin-importinstalled with Node.js and/or TypeScriptresolversdefined to handle imports"
          ]
        },
        {
          "type": "p",
          "text": "Then we recommend either removing these settings if you prefer how these properties have been configured withineslint-config-nextor extending directly from the Next.js ESLint plugin instead:"
        },
        {
          "type": "code",
          "code": "module.exports={extends:[//...'plugin:@next/next/recommended',],}"
        },
        {
          "type": "p",
          "text": "The plugin can be installed normally in your project without needing to runnext lint:"
        },
        {
          "type": "code",
          "code": "npminstall--save-dev@next/eslint-plugin-nextyarnadd--dev@next/eslint-plugin-nextpnpmadd--save-dev@next/eslint-plugin-nextbunadd--dev@next/eslint-plugin-next"
        },
        {
          "type": "p",
          "text": "This eliminates the risk of collisions or errors that can occur due to importing the same plugin or parser across multiple configurations."
        },
        {
          "type": "p",
          "text": "If you already use a separate ESLint configuration and want to includeeslint-config-next, ensure that it is extended last after other configurations. For example:"
        },
        {
          "type": "code",
          "code": "import js from '@eslint/js'import { FlatCompat } from '@eslint/eslintrc'const compat = new FlatCompat({// import.meta.dirname is available after Node.js v20.11.0baseDirectory: import.meta.dirname,recommendedConfig: js.configs.recommended,})const eslintConfig = [...compat.config({extends: ['eslint:recommended', 'next'],}),]export default eslintConfig"
        },
        {
          "type": "p",
          "text": "Thenextconfiguration already handles setting default values for theparser,pluginsandsettingsproperties. There is no need to manually re-declare any of these properties unless you need a different configuration for your use case. If you include any other shareable configurations,you will need to make sure that these properties are not overwritten or modified. Otherwise, we recommend removing any configurations that share behavior with thenextconfiguration or extending directly from the Next.js ESLint plugin as mentioned above."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js",
      "title": "Configuration: next.config.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js can be configured through anext.config.jsfile in the root of your project directory (for example, bypackage.json) with a default export."
        },
        {
          "type": "code",
          "code": "// @ts-check/**@type{import('next').NextConfig}*/constnextConfig={/* config options here */}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "next.config.jsis a regular Node.js module, not a JSON file. It gets used by the Next.js server and build phases, and it's not included in the browser build. If you needECMAScript modules, you can usenext.config.mjs:"
        },
        {
          "type": "code",
          "code": "// @ts-check/***@type{import('next').NextConfig}*/constnextConfig={/* config options here */}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Good to know:next.configwith the.cjs,.cts, or.mtsextensions are currentlynotsupported."
        },
        {
          "type": "p",
          "text": "You can also use a function:"
        },
        {
          "type": "code",
          "code": "// @ts-checkexportdefault(phase,{ defaultConfig })=>{/***@type{import('next').NextConfig}*/constnextConfig={/* config options here */}returnnextConfig}"
        },
        {
          "type": "p",
          "text": "Since Next.js 12.1.0, you can use an async function:"
        },
        {
          "type": "code",
          "code": "// @ts-checkmodule.exports=async(phase,{ defaultConfig })=>{/***@type{import('next').NextConfig}*/constnextConfig={/* config options here */}returnnextConfig}"
        },
        {
          "type": "p",
          "text": "phaseis the current context in which the configuration is loaded. You can see theavailable phases. Phases can be imported fromnext/constants:"
        },
        {
          "type": "code",
          "code": "// @ts-checkconst{PHASE_DEVELOPMENT_SERVER}=require('next/constants')module.exports=(phase,{ defaultConfig })=>{if(phase===PHASE_DEVELOPMENT_SERVER) {return{/* development only config options here */}}return{/* config options for all phases except development here */}}"
        },
        {
          "type": "p",
          "text": "If you are using TypeScript in your project, you can usenext.config.tsto use TypeScript in your configuration:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={/* config options here */}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "The commented lines are the place where you can put the configs allowed bynext.config.js, which aredefined in this file. However, none of the configs are required, and it's not necessary to understand what each config does. Instead, search for the features you need to enable or modify in this section and they will show you what to do."
        },
        {
          "type": "p",
          "text": "Avoid using new JavaScript features not available in your target Node.js version.next.config.jswill not be parsed by Webpack or Babel."
        },
        {
          "type": "p",
          "text": "This page documents all the available configuration options:"
        },
        {
          "type": "p",
          "text": "Starting in Next.js 15.1, thenext/experimental/testing/serverpackage contains utilities to help unit testnext.config.jsfiles. Theunstable_getResponseFromNextConfigfunction runs theheaders,redirects, andrewritesfunctions fromnext.config.jswith the provided request information and returnsNextResponsewith the results of the routing."
        },
        {
          "type": "p",
          "text": "The response fromunstable_getResponseFromNextConfigonly considersnext.config.jsfields and does not consider middleware or filesystem routes, so the result in production may be different than the unit test."
        },
        {
          "type": "code",
          "code": "import{getRedirectUrl,unstable_getResponseFromNextConfig,}from'next/experimental/testing/server'constresponse=awaitunstable_getResponseFromNextConfig({url:'https://nextjs.org/test',nextConfig:{asyncredirects() {return[{ source:'/test',destination:'/test2',permanent:false}]},},})expect(response.status).toEqual(307)expect(getRedirectUrl(response)).toEqual('https://nextjs.org/test2')"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/appDir",
      "title": "next.config.js: appDir | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Good to know: This option isno longerneeded as of Next.js 13.4. The App Router is now stable."
        },
        {
          "type": "p",
          "text": "The App Router (appdirectory) enables support forlayouts,Server Components,streaming, andcolocated data fetching. Using theappdirectory will automatically enableReact Strict Mode. Learn how toincrementally adoptapp."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/assetPrefix",
      "title": "next.config.js: assetPrefix | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Attention:Deploying to Vercelautomatically configures a global CDN for your Next.js project.\nYou do not need to manually setup an Asset Prefix."
        },
        {
          "type": "p",
          "text": "Good to know: Next.js 9.5+ added support for a customizableBase Path, which is better\nsuited for hosting your application on a sub-path like/docs.\nWe do not suggest you use a custom Asset Prefix for this use case."
        },
        {
          "type": "p",
          "text": "To set up aCDN, you can set up an asset prefix and configure your CDN's origin to resolve to the domain that Next.js is hosted on. Opennext.config.mjsand add theassetPrefixconfig based on thephase:"
        },
        {
          "type": "code",
          "code": "// @ts-checkimport{ PHASE_DEVELOPMENT_SERVER }from'next/constants'exportdefault(phase)=>{constisDev=phase===PHASE_DEVELOPMENT_SERVER/***@type{import('next').NextConfig}*/constnextConfig={assetPrefix:isDev?undefined:'https://cdn.mydomain.com',}returnnextConfig}"
        },
        {
          "type": "p",
          "text": "Next.js will automatically use your asset prefix for the JavaScript and CSS files it loads from the/_next/path (.next/static/folder). For example, with the above configuration, the following request for a JS chunk:"
        },
        {
          "type": "code",
          "code": "/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js"
        },
        {
          "type": "p",
          "text": "Would instead become:"
        },
        {
          "type": "code",
          "code": "https://cdn.mydomain.com/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js"
        },
        {
          "type": "p",
          "text": "The exact configuration for uploading your files to a given CDN will depend on your CDN of choice. The only folder you need to host on your CDN is the contents of.next/static/, which should be uploaded as_next/static/as the above URL request indicates.Do not upload the rest of your.next/folder, as you should not expose your server code and other configuration to the public. WhileassetPrefixcovers requests to_next/static, it does not influence the following paths:"
        },
        {
          "type": "list",
          "items": [
            "Files in thepublicfolder; if you want to serve those assets over a CDN, you'll have to introduce the prefix yourself"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/authInterrupts",
      "title": "next.config.js: authInterrupts | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "TheauthInterruptsconfiguration option allows you to useforbiddenandunauthorizedAPIs in your application. While these functions are experimental, you must enable theauthInterruptsoption in yournext.config.jsfile to use them:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{authInterrupts:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/basePath",
      "title": "next.config.js: basePath | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "To deploy a Next.js application under a sub-path of a domain you can use thebasePathconfig option. basePathallows you to set a path prefix for the application. For example, to use/docsinstead of''(an empty string, the default), opennext.config.jsand add thebasePathconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={basePath:'/docs',}"
        },
        {
          "type": "p",
          "text": "Good to know: This value must be set at build time and cannot be changed without re-building as the value is inlined in the client-side bundles."
        },
        {
          "type": "p",
          "text": "When linking to other pages usingnext/linkandnext/routerthebasePathwill be automatically applied. For example, using/aboutwill automatically become/docs/aboutwhenbasePathis set to/docs."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionHomePage() {return(<><Linkhref=\"/about\">About Page</Link></>)}"
        },
        {
          "type": "p",
          "text": "Output html:"
        },
        {
          "type": "code",
          "code": "<ahref=\"/docs/about\">About Page</a>"
        },
        {
          "type": "p",
          "text": "This makes sure that you don't have to change all links in your application when changing thebasePathvalue."
        },
        {
          "type": "p",
          "text": "When using thenext/imagecomponent, you will need to add thebasePathin front ofsrc. For example, using/docs/me.pngwill properly serve your image whenbasePathis set to/docs."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'functionHome() {return(<><h1>My Homepage</h1><Imagesrc=\"/docs/me.png\"alt=\"Picture of the author\"width={500}height={500}/><p>Welcome to my homepage!</p></>)}exportdefaultHome"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/cacheLife",
      "title": "next.config.js: cacheLife | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "ThecacheLifeoption allows you to definecustom cache profileswhen using thecacheLifefunction inside components or functions, and within the scope of theuse cachedirective."
        },
        {
          "type": "p",
          "text": "To define a profile, enable thedynamicIOflagand add the cache profile in thecacheLifeobject in thenext.config.jsfile. For example, ablogprofile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{dynamicIO:true,cacheLife:{blog:{stale:3600,// 1 hourrevalidate:900,// 15 minutesexpire:86400,// 1 day},},},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "You can now use this customblogconfiguration in your component or function as follows:"
        },
        {
          "type": "code",
          "code": "import{ unstable_cacheLifeascacheLife }from'next/cache'exportasyncfunctiongetCachedData() {'use cache'cacheLife('blog')constdata=awaitfetch('/api/data')returndata}"
        },
        {
          "type": "p",
          "text": "The configuration object has key values with the following format:"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/compress",
      "title": "next.config.js: compress | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "By default, Next.js usesgzipto compress rendered content and static files when usingnext startor a custom server. This is an optimization for applications that do not have compression configured. If compression isalreadyconfigured in your application via a custom server, Next.js will not add compression."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "When hosting your application onVercel, compression usesbrotlifirst, thengzip.",
            "You can check if compression is enabled and which algorithm is used by looking at theAccept-Encoding(browser accepted options) andContent-Encoding(currently used) headers in the response."
          ]
        },
        {
          "type": "p",
          "text": "To disablecompression, set thecompressconfig option tofalse:"
        },
        {
          "type": "code",
          "code": "module.exports={compress:false,}"
        },
        {
          "type": "p",
          "text": "We do not recommend disabling compression unless you have compression configured on your server, as compression reduces bandwidth usage and improves the performance of your application."
        },
        {
          "type": "p",
          "text": "To change your compression algorithm, you will need to configure your custom server and set thecompressoption tofalsein yournext.config.jsfile. For example, you're usingnginxand want to switch tobrotli, set thecompressoption tofalseto allow nginx to handle compression."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "For Next.js applications on Vercel, compression is handled by the Vercel's Edge Network and not Next.js. See theVercel documentationfor more information."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/crossOrigin",
      "title": "next.config.js: crossOrigin | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Use thecrossOriginoption to add acrossOriginattributein all<script>tags generated by thenext/scriptcomponent, and define how cross-origin requests should be handled."
        },
        {
          "type": "code",
          "code": "module.exports={crossOrigin:'anonymous',}"
        },
        {
          "type": "list",
          "items": [
            "'anonymous': AddscrossOrigin=\"anonymous\"attribute.",
            "'use-credentials': AddscrossOrigin=\"use-credentials\"."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/cssChunking",
      "title": "next.config.js: cssChunking | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "CSS Chunking is a strategy used to improve the performance of your web application by splitting and re-ordering CSS files into chunks. This allows you to load only the CSS that is needed for a specific route, instead of loading all the application's CSS at once. You can control how CSS files are chunked using theexperimental.cssChunkingoption in yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig={experimental:{cssChunking:true,// default},}satisfiesNextConfigexportdefaultnextConfig"
        },
        {
          "type": "list",
          "items": [
            "true(default): Next.js will try to merge CSS files whenever possible, determining explicit and implicit dependencies between files from import order to reduce the number of chunks and therefore the number of requests.",
            "false: Next.js will not attempt to merge or re-order your CSS files.",
            "'strict': Next.js will load CSS files in the correct order they are imported into your files, which can lead to more chunks and requests."
          ]
        },
        {
          "type": "p",
          "text": "You may consider using'strict'if you run into unexpected CSS behavior. For example, if you importa.cssandb.cssin different files using a differentimportorder (abeforeb, orbbeforea),truewill merge the files in any order and assume there are no dependencies between them. However, ifb.cssdepends ona.css, you may want to use'strict'to prevent the files from being merged, and instead, load them in the order they are imported - which can result in more chunks and requests. For most applications, we recommendtrueas it leads to fewer requests and better performance."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/devIndicators",
      "title": "next.config.js: devIndicators | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "devIndicatorsallows you to configure the on-screen indicators that give context about the current route you're viewing during development."
        },
        {
          "type": "code",
          "code": "devIndicators:{appIsrStatus?:boolean,// defaults to truebuildActivity?:boolean,// defaults to truebuildActivityPosition?:'bottom-right'|'bottom-left'|'top-right'|'top-left',// defaults to 'bottom-right'},"
        },
        {
          "type": "p",
          "text": "Next.js displays a static indicator in the bottom corner of the screen that signals if a route will be prerendered at build time. This makes it easier to understand whether a route is static or dynamic, and for you to identify if a routeopts out of static rendering."
        },
        {
          "type": "p",
          "text": "You can temporarily hide the indicator by clicking the close indicator which will remember your preference inlocalStoragefor 1 hour. To permanently disable it, you can use the config option innext.config.js:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={devIndicators:{appIsrStatus:false,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "When you edit your code, and Next.js is compiling the application, a compilation indicator appears in the bottom right corner of the page."
        },
        {
          "type": "p",
          "text": "Good to know: This indicator is only present in development mode and will not appear when building and running the app in production mode."
        },
        {
          "type": "p",
          "text": "In some cases this indicator can be misplaced on your page, for example, when conflicting with a chat launcher. To change its position, opennext.config.jsand set thebuildActivityPositionin thedevIndicatorsobject tobottom-right(default),bottom-left,top-rightortop-left:"
        },
        {
          "type": "code",
          "code": "module.exports={devIndicators:{buildActivityPosition:'bottom-right',},}"
        },
        {
          "type": "p",
          "text": "In some cases, this indicator might not be useful for you. To remove it, opennext.config.jsand disable thebuildActivityconfig indevIndicatorsobject:"
        },
        {
          "type": "code",
          "code": "module.exports={devIndicators:{buildActivity:false,},}"
        },
        {
          "type": "p",
          "text": "If you expect a route to be static and the indicator is enabled but not showing, it's likely the route has opted out of static rendering. You can confirm if a route isstaticordynamicby building your application usingnext build --debug, and checking the output in your terminal. Static (or prerendered) routes will display a○symbol, whereas dynamic routes will display aƒsymbol. For example:"
        },
        {
          "type": "code",
          "code": "Route (app)SizeFirstLoadJS┌○/_not-found0B0kB└ƒ/products/[id]0B0kB○  (Static)prerenderedasstaticcontentƒ  (Dynamic)server-renderedondemand"
        },
        {
          "type": "p",
          "text": "There are two reasons a route might opt out of static rendering:"
        },
        {
          "type": "list",
          "items": [
            "The presence ofDynamic APIswhich rely on runtime information.",
            "Anuncached data request, like a call to an ORM or database driver."
          ]
        },
        {
          "type": "p",
          "text": "Check your route for any of these conditions, and if you are not able to statically render the route, then consider usingloading.jsor<Suspense />to leveragestreaming."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/distDir",
      "title": "next.config.js: distDir | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "You can specify a name to use for a custom build directory to use instead of.next. Opennext.config.jsand add thedistDirconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={distDir:'build',}"
        },
        {
          "type": "p",
          "text": "Now if you runnext buildNext.js will usebuildinstead of the default.nextfolder."
        },
        {
          "type": "p",
          "text": "distDirshould notleave your project directory. For example,../buildis aninvaliddirectory."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/dynamicIO",
      "title": "next.config.js: dynamicIO | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "ThedynamicIOflag is an experimental feature in Next.js that causes data fetching operations in the App Router to be excluded from pre-renders unless they are explicitly cached. This can be useful for optimizing the performance of dynamic data fetching in server components. It is useful if your application requires fresh data fetching during runtime rather than serving from a pre-rendered cache. It is expected to be used in conjunction withuse cacheso that your data fetching happens at runtime by default unless you define specific parts of your application to be cached withuse cacheat the page, function, or component level."
        },
        {
          "type": "p",
          "text": "To enable thedynamicIOflag, set it totruein theexperimentalsection of yournext.config.tsfile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{dynamicIO:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "WhendynamicIOis enabled, you can use the following cache functions and configurations:"
        },
        {
          "type": "list",
          "items": [
            "Theuse cachedirective",
            "ThecacheLifefunctionwithuse cache",
            "ThecacheTagfunction"
          ]
        },
        {
          "type": "list",
          "items": [
            "WhiledynamicIOcan optimize performance by ensuring fresh data fetching during runtime, it may also introduce additional latency compared to serving pre-rendered content."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/env",
      "title": "next.config.js: env | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Since the release ofNext.js 9.4we now have a more intuitive and ergonomic experience foradding environment variables. Give it a try!"
        },
        {
          "type": "p",
          "text": "Good to know: environment variables specified in this way willalwaysbe included in the JavaScript bundle, prefixing the environment variable name withNEXT_PUBLIC_only has an effect when specifying themthrough the environment or .env files."
        },
        {
          "type": "p",
          "text": "To add environment variables to the JavaScript bundle, opennext.config.jsand add theenvconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={env:{customKey:'my-value',},}"
        },
        {
          "type": "p",
          "text": "Now you can accessprocess.env.customKeyin your code. For example:"
        },
        {
          "type": "code",
          "code": "functionPage() {return<h1>The value of customKey is: {process.env.customKey}</h1>}exportdefaultPage"
        },
        {
          "type": "p",
          "text": "Next.js will replaceprocess.env.customKeywith'my-value'at build time. Trying to destructureprocess.envvariables won't work due to the nature of webpackDefinePlugin. For example, the following line:"
        },
        {
          "type": "code",
          "code": "return<h1>The value of customKey is: {process.env.customKey}</h1>"
        },
        {
          "type": "p",
          "text": "Will end up being:"
        },
        {
          "type": "code",
          "code": "return<h1>The value of customKey is: {'my-value'}</h1>"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/eslint",
      "title": "next.config.js: eslint | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "When ESLint is detected in your project, Next.js fails yourproduction build(next build) when errors are present. If you'd like Next.js to produce production code even when your application has ESLint errors, you can disable the built-in linting step completely. This is not recommended unless you already have ESLint configured to run in a separate part of your workflow (for example, in CI or a pre-commit hook). Opennext.config.jsand enable theignoreDuringBuildsoption in theeslintconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={eslint:{// Warning: This allows production builds to successfully complete even if// your project has ESLint errors.ignoreDuringBuilds:true,},}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/expireTime",
      "title": "next.config.js: expireTime | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "You can specify a customstale-while-revalidateexpire time for CDNs to consume in theCache-Controlheader for ISR enabled pages. Opennext.config.jsand add theexpireTimeconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={// one hour in secondsexpireTime:3600,}"
        },
        {
          "type": "p",
          "text": "Now when sending theCache-Controlheader the expire time will be calculated depending on the specific revalidate period. For example, if you have a revalidate of 15 minutes on a path and the expire time is one hour the generatedCache-Controlheader will bes-maxage=900, stale-while-revalidate=2700so that it can stay stale for 15 minutes less than the configured expire time."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/exportPathMap",
      "title": "next.config.js: exportPathMap | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This feature is exclusive tonext exportand currentlydeprecatedin favor ofgetStaticPathswithpagesorgenerateStaticParamswithapp."
        },
        {
          "type": "p",
          "text": "exportPathMapallows you to specify a mapping of request paths to page destinations, to be used during export. Paths defined inexportPathMapwill also be available when usingnext dev. Let's start with an example, to create a customexportPathMapfor an app with the following pages:"
        },
        {
          "type": "list",
          "items": ["pages/index.js", "pages/about.js", "pages/post.js"]
        },
        {
          "type": "p",
          "text": "Opennext.config.jsand add the followingexportPathMapconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={exportPathMap:asyncfunction(defaultPathMap,{ dev,dir,outDir,distDir,buildId }) {return{'/':{ page:'/'},'/about':{ page:'/about'},'/p/hello-nextjs':{ page:'/post',query:{ title:'hello-nextjs'} },'/p/learn-nextjs':{ page:'/post',query:{ title:'learn-nextjs'} },'/p/deploy-nextjs':{ page:'/post',query:{ title:'deploy-nextjs'} },}},}"
        },
        {
          "type": "p",
          "text": "Good to know: thequeryfield inexportPathMapcannot be used withautomatically statically optimized pagesorgetStaticPropspagesas they are rendered to HTML files at build-time and additional query information cannot be provided duringnext export."
        },
        {
          "type": "p",
          "text": "The pages will then be exported as HTML files, for example,/aboutwill become/about.html. exportPathMapis anasyncfunction that receives 2 arguments: the first one isdefaultPathMap, which is the default map used by Next.js. The second argument is an object with:"
        },
        {
          "type": "list",
          "items": [
            "dev-truewhenexportPathMapis being called in development.falsewhen runningnext export. In developmentexportPathMapis used to define routes.",
            "dir- Absolute path to the project directory",
            "outDir- Absolute path to theout/directory (configurable with-o). Whendevistruethe value ofoutDirwill benull.",
            "distDir- Absolute path to the.next/directory (configurable with thedistDirconfig)",
            "buildId- The generated build id"
          ]
        },
        {
          "type": "p",
          "text": "The returned object is a map of pages where thekeyis thepathnameand thevalueis an object that accepts the following fields:"
        },
        {
          "type": "list",
          "items": [
            "page:String- the page inside thepagesdirectory to render",
            "query:Object- thequeryobject passed togetInitialPropswhen prerendering. Defaults to{}"
          ]
        },
        {
          "type": "p",
          "text": "The exportedpathnamecan also be a filename (for example,/readme.md), but you may need to set theContent-Typeheader totext/htmlwhen serving its content if it is different than.html."
        },
        {
          "type": "p",
          "text": "It is possible to configure Next.js to export pages asindex.htmlfiles and require trailing slashes,/aboutbecomes/about/index.htmland is routable via/about/. This was the default behavior prior to Next.js 9. To switch back and add a trailing slash, opennext.config.jsand enable thetrailingSlashconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={trailingSlash:true,}"
        },
        {
          "type": "p",
          "text": "next exportwill useoutas the default output directory, you can customize this using the-oargument, like so:"
        },
        {
          "type": "code",
          "code": "nextexport-ooutdir"
        },
        {
          "type": "p",
          "text": "Warning: UsingexportPathMapis deprecated and is overridden bygetStaticPathsinsidepages. We don't recommend using them together."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/generateBuildId",
      "title": "next.config.js: generateBuildId | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js generates an ID duringnext buildto identify which version of your application is being served. The same build should be used and boot up multiple containers. If you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use thegenerateBuildIdcommand innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={generateBuildId:async()=>{// This could be anything, using the latest git hashreturnprocess.env.GIT_HASH},}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/generateEtags",
      "title": "next.config.js: generateEtags | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js will generateetagsfor every page by default. You may want to disable etag generation for HTML pages depending on your cache strategy. Opennext.config.jsand disable thegenerateEtagsoption:"
        },
        {
          "type": "code",
          "code": "module.exports={generateEtags:false,}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/headers",
      "title": "next.config.js: headers | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Headers allow you to set custom HTTP headers on the response to an incoming request on a given path. To set custom HTTP headers you can use theheaderskey innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncheaders() {return[{source:'/about',headers:[{key:'x-custom-header',value:'my custom header value',},{key:'x-another-custom-header',value:'my other custom header value',},],},]},}"
        },
        {
          "type": "p",
          "text": "headersis an async function that expects an array to be returned holding objects withsourceandheadersproperties:"
        },
        {
          "type": "list",
          "items": [
            "sourceis the incoming request path pattern.",
            "headersis an array of response header objects, withkeyandvalueproperties.",
            "basePath:falseorundefined- if false the basePath won't be included when matching, can be used for external rewrites only.",
            "locale:falseorundefined- whether the locale should not be included when matching.",
            "hasis an array ofhas objectswith thetype,keyandvalueproperties.",
            "missingis an array ofmissing objectswith thetype,keyandvalueproperties."
          ]
        },
        {
          "type": "p",
          "text": "Headers are checked before the filesystem which includes pages and/publicfiles."
        },
        {
          "type": "p",
          "text": "If two headers match the same path and set the same header key, the last header key will override the first. Using the below headers, the path/hellowill result in the headerx-hellobeingworlddue to the last header value set beingworld."
        },
        {
          "type": "code",
          "code": "module.exports={asyncheaders() {return[{source:'/:path*',headers:[{key:'x-hello',value:'there',},],},{source:'/hello',headers:[{key:'x-hello',value:'world',},],},]},}"
        },
        {
          "type": "p",
          "text": "Path matches are allowed, for example/blog/:slugwill match/blog/hello-world(no nested paths):"
        },
        {
          "type": "code",
          "code": "module.exports={asyncheaders() {return[{source:'/blog/:slug',headers:[{key:'x-slug',value:':slug',// Matched parameters can be used in the value},{key:'x-slug-:slug',// Matched parameters can be used in the keyvalue:'my other custom header value',},],},]},}"
        },
        {
          "type": "p",
          "text": "To match a wildcard path you can use*after a parameter, for example/blog/:slug*will match/blog/a/b/c/d/hello-world:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncheaders() {return[{source:'/blog/:slug*',headers:[{key:'x-slug',value:':slug*',// Matched parameters can be used in the value},{key:'x-slug-:slug*',// Matched parameters can be used in the keyvalue:'my other custom header value',},],},]},}"
        },
        {
          "type": "p",
          "text": "To match a regex path you can wrap the regex in parenthesis after a parameter, for example/blog/:slug(\\\\d{1,})will match/blog/123but not/blog/abc:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncheaders() {return[{source:'/blog/:post(\\\\d{1,})',headers:[{key:'x-post',value:':post',},],},]},}"
        },
        {
          "type": "p",
          "text": "The following characters(,),{,},:,*,+,?are used for regex path matching, so when used in thesourceas non-special values they must be escaped by adding\\\\before them:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncheaders() {return[{// this will match `/english(default)/something` being requestedsource:'/english\\\\(default\\\\)/:slug',headers:[{key:'x-header',value:'value',},],},]},}"
        },
        {
          "type": "p",
          "text": "To only apply a header when header, cookie, or query values also match thehasfield or don't match themissingfield can be used. Both thesourceand allhasitems must match and allmissingitems must not match for the header to be applied. hasandmissingitems can have the following fields:"
        },
        {
          "type": "list",
          "items": [
            "type:String- must be eitherheader,cookie,host, orquery.",
            "key:String- the key from the selected type to match against.",
            "value:Stringorundefined- the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the valuefirst-(?<paramName>.*)is used forfirst-secondthensecondwill be usable in the destination with:paramName."
          ]
        },
        {
          "type": "code",
          "code": "module.exports={asyncheaders() {return[// if the header `x-add-header` is present,// the `x-another-header` header will be applied{source:'/:path*',has:[{type:'header',key:'x-add-header',},],headers:[{key:'x-another-header',value:'hello',},],},// if the header `x-no-header` is not present,// the `x-another-header` header will be applied{source:'/:path*',missing:[{type:'header',key:'x-no-header',},],headers:[{key:'x-another-header',value:'hello',},],},// if the source, query, and cookie are matched,// the `x-authorized` header will be applied{source:'/specific/:path*',has:[{type:'query',key:'page',// the page value will not be available in the// header key/values since value is provided and// doesn't use a named capture group e.g. (?<page>home)value:'home',},{type:'cookie',key:'authorized',value:'true',},],headers:[{key:'x-authorized',value:':authorized',},],},// if the header `x-authorized` is present and// contains a matching value, the `x-another-header` will be applied{source:'/:path*',has:[{type:'header',key:'x-authorized',value:'(?<authorized>yes|true)',},],headers:[{key:'x-another-header',value:':authorized',},],},// if the host is `example.com`,// this header will be applied{source:'/:path*',has:[{type:'host',value:'example.com',},],headers:[{key:'x-another-header',value:':authorized',},],},]},}"
        },
        {
          "type": "p",
          "text": "When leveragingbasePathsupportwith headers eachsourceis automatically prefixed with thebasePathunless you addbasePath: falseto the header:"
        },
        {
          "type": "code",
          "code": "module.exports={basePath:'/docs',asyncheaders() {return[{source:'/with-basePath',// becomes /docs/with-basePathheaders:[{key:'x-hello',value:'world',},],},{source:'/without-basePath',// is not modified since basePath: false is setheaders:[{key:'x-hello',value:'world',},],basePath:false,},]},}"
        },
        {
          "type": "p",
          "text": "When leveragingi18nsupportwith headers eachsourceis automatically prefixed to handle the configuredlocalesunless you addlocale: falseto the header. Iflocale: falseis used you must prefix thesourcewith a locale for it to be matched correctly."
        },
        {
          "type": "code",
          "code": "module.exports={i18n:{locales:['en','fr','de'],defaultLocale:'en',},asyncheaders() {return[{source:'/with-locale',// automatically handles all localesheaders:[{key:'x-hello',value:'world',},],},{// does not handle locales automatically since locale: false is setsource:'/nl/with-locale-manual',locale:false,headers:[{key:'x-hello',value:'world',},],},{// this matches '/' since `en` is the defaultLocalesource:'/en',locale:false,headers:[{key:'x-hello',value:'world',},],},{// this gets converted to /(en|fr|de)/(.*) so will not match the top-level// `/` or `/fr` routes like /:path* wouldsource:'/(.*)',headers:[{key:'x-hello',value:'world',},],},]},}"
        },
        {
          "type": "p",
          "text": "Next.js sets theCache-Controlheader ofpublic, max-age=31536000, immutablefor truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example,Static Image Imports. You cannot setCache-Controlheaders innext.config.jsfor these assets. However, you can setCache-Controlheaders for other responses or data. Learn more aboutcachingwith the App Router."
        },
        {
          "type": "p",
          "text": "Cross-Origin Resource Sharing (CORS)is a security feature that allows you to control which sites can access your resources. You can set theAccess-Control-Allow-Originheader to allow a specific origin to access yourRoute Handlers."
        },
        {
          "type": "code",
          "code": "asyncheaders() {return[{source:\"/api/:path*\",headers:[{key:\"Access-Control-Allow-Origin\",value:\"*\",// Set your origin},{key:\"Access-Control-Allow-Methods\",value:\"GET, POST, PUT, DELETE, OPTIONS\",},{key:\"Access-Control-Allow-Headers\",value:\"Content-Type, Authorization\",},],},];},"
        },
        {
          "type": "p",
          "text": "This headercontrols DNS prefetching, allowing browsers to proactively perform domain name resolution on external links, images, CSS, JavaScript, and more. This prefetching is performed in the background, so theDNSis more likely to be resolved by the time the referenced items are needed. This reduces latency when the user clicks a link."
        },
        {
          "type": "code",
          "code": "{key:'X-DNS-Prefetch-Control',value:'on'}"
        },
        {
          "type": "p",
          "text": "This headerinforms browsers it should only be accessed using HTTPS, instead of using HTTP. Using the configuration below, all present and future subdomains will use HTTPS for amax-ageof 2 years. This blocks access to pages or subdomains that can only be served over HTTP. If you're deploying toVercel, this header is not necessary as it's automatically added to all deployments unless you declareheadersin yournext.config.js."
        },
        {
          "type": "code",
          "code": "{key:'Strict-Transport-Security',value:'max-age=63072000; includeSubDomains; preload'}"
        },
        {
          "type": "p",
          "text": "This headerindicates whether the site should be allowed to be displayed within aniframe. This can prevent against clickjacking attacks. This header has been superseded by CSP'sframe-ancestorsoption, which has better support in modern browsers (seeContent Security Policyfor configuration details)."
        },
        {
          "type": "code",
          "code": "{key:'X-Frame-Options',value:'SAMEORIGIN'}"
        },
        {
          "type": "p",
          "text": "This headerallows you to control which features and APIs can be used in the browser. It was previously namedFeature-Policy."
        },
        {
          "type": "code",
          "code": "{key:'Permissions-Policy',value:'camera=(), microphone=(), geolocation=(), browsing-topics=()'}"
        },
        {
          "type": "p",
          "text": "This headerprevents the browser from attempting to guess the type of content if theContent-Typeheader is not explicitly set. This can prevent XSS exploits for websites that allow users to upload and share files. For example, a user trying to download an image, but having it treated as a differentContent-Typelike an executable, which could be malicious. This header also applies to downloading browser extensions. The only valid value for this header isnosniff."
        },
        {
          "type": "code",
          "code": "{key:'X-Content-Type-Options',value:'nosniff'}"
        },
        {
          "type": "p",
          "text": "This headercontrols how much information the browser includes when navigating from the current website (origin) to another."
        },
        {
          "type": "code",
          "code": "{key:'Referrer-Policy',value:'origin-when-cross-origin'}"
        },
        {
          "type": "p",
          "text": "Learn more about adding aContent Security Policyto your application."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/httpAgentOptions",
      "title": "next.config.js: httpAgentOptions | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "In Node.js versions prior to 18, Next.js automatically polyfillsfetch()withundiciand enablesHTTP Keep-Aliveby default. To disable HTTP Keep-Alive for allfetch()calls on the server-side, opennext.config.jsand add thehttpAgentOptionsconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={httpAgentOptions:{keepAlive:false,},}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/images",
      "title": "next.config.js: images | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "If you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configurenext.config.jswith the following:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{loader:'custom',loaderFile:'./my/image/loader.js',},}"
        },
        {
          "type": "p",
          "text": "ThisloaderFilemust point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:"
        },
        {
          "type": "code",
          "code": "'use client'exportdefaultfunctionmyImageLoader({ src,width,quality }) {return`https://example.com/${src}?w=${width}&q=${quality||75}`}"
        },
        {
          "type": "p",
          "text": "Alternatively, you can use theloaderpropto pass the function to each instance ofnext/image."
        },
        {
          "type": "p",
          "text": "Good to know: Customizing the image loader file, which accepts a function, requires usingClient Componentsto serialize the provided function."
        },
        {
          "type": "p",
          "text": "To learn more about configuring the behavior of the built-inImage Optimization APIand theImage Component, seeImage Configuration Optionsfor available options."
        },
        {
          "type": "list",
          "items": [
            "Akamai",
            "AWS CloudFront",
            "Cloudinary",
            "Cloudflare",
            "Contentful",
            "Fastly",
            "Gumlet",
            "ImageEngine",
            "Imgix",
            "PixelBin",
            "Sanity",
            "Sirv",
            "Supabase",
            "Thumbor",
            "Imagekit",
            "Nitrogen AIO"
          ]
        },
        {
          "type": "code",
          "code": "// Docs: https://techdocs.akamai.com/ivm/reference/test-images-on-demandexportdefaultfunctionakamaiLoader({ src,width,quality }) {return`https://example.com/${src}?imwidth=${width}`}"
        },
        {
          "type": "code",
          "code": "// Docs: https://aws.amazon.com/developer/application-security-performance/articles/image-optimizationexportdefaultfunctioncloudfrontLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('format','auto')url.searchParams.set('width',width.toString())url.searchParams.set('quality',(quality||75).toString())returnurl.href}"
        },
        {
          "type": "code",
          "code": "// Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit,q_auto/turtles.jpgexportdefaultfunctioncloudinaryLoader({ src,width,quality }) {constparams=['f_auto','c_limit',`w_${width}`,`q_${quality||'auto'}`]return`https://example.com/${params.join(',')}${src}`}"
        },
        {
          "type": "code",
          "code": "// Docs: https://developers.cloudflare.com/images/transform-imagesexportdefaultfunctioncloudflareLoader({ src,width,quality }) {constparams=[`width=${width}`,`quality=${quality||75}`,'format=auto']return`https://example.com/cdn-cgi/image/${params.join(',')}/${src}`}"
        },
        {
          "type": "code",
          "code": "// Docs: https://www.contentful.com/developers/docs/references/images-api/exportdefaultfunctioncontentfulLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('fm','webp')url.searchParams.set('w',width.toString())url.searchParams.set('q',(quality||75).toString())returnurl.href}"
        },
        {
          "type": "code",
          "code": "// Docs: https://developer.fastly.com/reference/io/exportdefaultfunctionfastlyLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('auto','webp')url.searchParams.set('width',width.toString())url.searchParams.set('quality',(quality||75).toString())returnurl.href}"
        },
        {
          "type": "code",
          "code": "// Docs: https://docs.gumlet.com/reference/image-transform-sizeexportdefaultfunctiongumletLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('format','auto')url.searchParams.set('w',width.toString())url.searchParams.set('q',(quality||75).toString())returnurl.href}"
        },
        {
          "type": "code",
          "code": "// Docs: https://support.imageengine.io/hc/en-us/articles/360058880672-DirectivesexportdefaultfunctionimageengineLoader({ src,width,quality }) {constcompression=100-(quality||50)constparams=[`w_${width}`,`cmpr_${compression}`)]return`https://example.com${src}?imgeng=/${params.join('/')`}"
        },
        {
          "type": "code",
          "code": "// Demo: https://static.imgix.net/daisy.png?format=auto&fit=max&w=300exportdefaultfunctionimgixLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)constparams=url.searchParamsparams.set('auto',params.getAll('auto').join(',')||'format')params.set('fit',params.get('fit')||'max')params.set('w',params.get('w')||width.toString())params.set('q',(quality||50).toString())returnurl.href}"
        },
        {
          "type": "code",
          "code": "// Doc (Resize): https://www.pixelbin.io/docs/transformations/basic/resize/#width-w// Doc (Optimise): https://www.pixelbin.io/docs/optimizations/quality/#image-quality-when-delivering// Doc (Auto Format Delivery): https://www.pixelbin.io/docs/optimizations/format/#automatic-format-selection-with-f_auto-url-parameterexportdefaultfunctionpixelBinLoader({ src,width,quality }) {constname='<your-cloud-name>'constopt=`t.resize(w:${width})~t.compress(q:${quality||75})`return`https://cdn.pixelbin.io/v2/${name}/${opt}/${src}?f_auto=true`}"
        },
        {
          "type": "code",
          "code": "// Docs: https://www.sanity.io/docs/image-urlsexportdefaultfunctionsanityLoader({ src,width,quality }) {constprj='zp7mbokg'constdataset='production'consturl=newURL(`https://cdn.sanity.io/images/${prj}/${dataset}${src}`)url.searchParams.set('auto','format')url.searchParams.set('fit','max')url.searchParams.set('w',width.toString())if(quality) {url.searchParams.set('q',quality.toString())}returnurl.href}"
        },
        {
          "type": "code",
          "code": "// Docs: https://sirv.com/help/articles/dynamic-imaging/exportdefaultfunctionsirvLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)constparams=url.searchParamsparams.set('format',params.getAll('format').join(',')||'optimal')params.set('w',params.get('w')||width.toString())params.set('q',(quality||85).toString())returnurl.href}"
        },
        {
          "type": "code",
          "code": "// Docs: https://supabase.com/docs/guides/storage/image-transformations#nextjs-loaderexportdefaultfunctionsupabaseLoader({ src,width,quality }) {consturl=newURL(`https://example.com${src}`)url.searchParams.set('width',width.toString())url.searchParams.set('quality',(quality||75).toString())returnurl.href}"
        },
        {
          "type": "code",
          "code": "// Docs: https://thumbor.readthedocs.io/en/latest/exportdefaultfunctionthumborLoader({ src,width,quality }) {constparams=[`${width}x0`,`filters:quality(${quality||75})`]return`https://example.com${params.join('/')}${src}`}"
        },
        {
          "type": "code",
          "code": "// Docs: https://imagekit.io/docs/image-transformationexportdefaultfunctionimageKitLoader({ src,width,quality }) {constparams=[`w-${width}`,`q-${quality||80}`]return`https://ik.imagekit.io/your_imagekit_id/${src}?tr=${params.join(',')}`}"
        },
        {
          "type": "code",
          "code": "// Docs: https://docs.n7.io/aio/intergrations/exportdefaultfunctionaioLoader({ src,width,quality }) {consturl=newURL(src,window.location.href)constparams=url.searchParamsconstaioParams=params.getAll('aio')aioParams.push(`w-${width}`)if(quality) {aioParams.push(`q-${quality.toString()}`)}params.set('aio',aioParams.join(';'))returnurl.href}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/incrementalCacheHandlerPath",
      "title": "next.config.js: cacheHandler | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Caching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. Whendeploying to Vercel, the ISR cache is automatically persisted to durable storage. When self-hosting, the ISR cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router. You can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application."
        },
        {
          "type": "code",
          "code": "module.exports={cacheHandler:require.resolve('./cache-handler.js'),cacheMaxMemorySize:0,// disable default in-memory caching}"
        },
        {
          "type": "p",
          "text": "View an example of acustom cache handlerand learn more about implementation."
        },
        {
          "type": "p",
          "text": "The cache handler can implement the following methods:get,set, andrevalidateTag."
        },
        {
          "type": "p",
          "text": "Returns the cached value ornullif not found."
        },
        {
          "type": "p",
          "text": "ReturnsPromise<void>."
        },
        {
          "type": "p",
          "text": "ReturnsPromise<void>. Learn more aboutrevalidating dataor therevalidateTag()function. Good to know:"
        },
        {
          "type": "list",
          "items": [
            "revalidatePathis a convenience layer on top of cache tags. CallingrevalidatePathwill call yourrevalidateTagfunction, which you can then choose if you want to tag cache keys based on the path."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/inlineCss",
      "title": "next.config.js: inlineCss | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Experimental support for inlining CSS in the<head>. When this flag is enabled, all places where we normally generate a<link>tag will instead have a generated<style>tag."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{inlineCss:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Inlining CSS can be beneficial in several scenarios:"
        },
        {
          "type": "list",
          "items": [
            "First-Time Visitors: Since CSS files are render-blocking resources, inlining eliminates the initial download delay that first-time visitors experience, improving page load performance.",
            "Performance Metrics: By removing the additional network requests for CSS files, inlining can significantly improve key metrics like First Contentful Paint (FCP) and Largest Contentful Paint (LCP).",
            "Slow Connections: For users on slower networks where each request adds considerable latency, inlining CSS can provide a noticeable performance boost by reducing network roundtrips.",
            "Atomic CSS Bundles (e.g., Tailwind): With utility-first frameworks like Tailwind CSS, the size of the styles required for a page is often O(1) relative to the complexity of the design. This makes inlining a compelling choice because the entire set of styles for the current page is lightweight and doesn’t grow with the page size. Inlining Tailwind styles ensures minimal payload and eliminates the need for additional network requests, which can further enhance performance."
          ]
        },
        {
          "type": "p",
          "text": "While inlining CSS offers significant benefits for performance, there are scenarios where it may not be the best choice:"
        },
        {
          "type": "list",
          "items": [
            "Large CSS Bundles: If your CSS bundle is too large, inlining it may significantly increase the size of the HTML, resulting in slower Time to First Byte (TTFB) and potentially worse performance for users with slow connections.",
            "Dynamic or Page-Specific CSS: For applications with highly dynamic styles or pages that use different sets of CSS, inlining may lead to redundancy and bloat, as the full CSS for all pages may need to be inlined repeatedly.",
            "Browser Caching: In cases where visitors frequently return to your site, external CSS files allow browsers to cache styles efficiently, reducing data transfer for subsequent visits. Inlining CSS eliminates this benefit."
          ]
        },
        {
          "type": "p",
          "text": "Evaluate these trade-offs carefully, and consider combining inlining with other strategies, such as critical CSS extraction or a hybrid approach, for the best results tailored to your site's needs."
        },
        {
          "type": "p",
          "text": "Good to know: This feature is currently experimental and has some known limitations:"
        },
        {
          "type": "list",
          "items": [
            "CSS inlining is applied globally and cannot be configured on a per-page basis",
            "Styles are duplicated during initial page load - once within<style>tags for SSR and once in the RSC payload",
            "When navigating to statically rendered pages, styles will use<link>tags instead of inline CSS to avoid duplication",
            "This feature is not available in development mode and only works in production builds"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/logging",
      "title": "next.config.js: logging | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "You can configure the logging level and whether the full URL is logged to the console when running Next.js in development mode. Currently,loggingonly applies to data fetching using thefetchAPI. It does not yet apply to other logs inside of Next.js."
        },
        {
          "type": "code",
          "code": "module.exports={logging:{fetches:{fullUrl:true,},},}"
        },
        {
          "type": "p",
          "text": "Anyfetchrequests that are restored from theServer Components HMR cacheare not logged by default. However, this can be enabled by settinglogging.fetches.hmrRefreshestotrue."
        },
        {
          "type": "code",
          "code": "module.exports={logging:{fetches:{hmrRefreshes:true,},},}"
        },
        {
          "type": "p",
          "text": "In addition, you can disable the development logging by settingloggingtofalse."
        },
        {
          "type": "code",
          "code": "module.exports={logging:false,}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/mdxRs",
      "title": "next.config.js: mdxRs | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "For experimental use with@next/mdx. Compiles MDX files using the new Rust compiler."
        },
        {
          "type": "code",
          "code": "constwithMDX=require('@next/mdx')()/**@type{import('next').NextConfig}*/constnextConfig={pageExtensions:['ts','tsx','mdx'],experimental:{mdxRs:true,},}module.exports=withMDX(nextConfig)"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/onDemandEntries",
      "title": "next.config.js: onDemandEntries | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js exposes some options that give you some control over how the server will dispose or keep in memory built pages in development. To change the defaults, opennext.config.jsand add theonDemandEntriesconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={onDemandEntries:{// period (in ms) where the server will keep pages in the buffermaxInactiveAge:25*1000,// number of pages that should be kept simultaneously without being disposedpagesBufferLength:2,},}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/optimizePackageImports",
      "title": "next.config.js: optimizePackageImports | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Some packages can export hundreds or thousands of modules, which can cause performance issues in development and production. Adding a package toexperimental.optimizePackageImportswill only load the modules you are actually using, while still giving you the convenience of writing import statements with many named exports."
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{optimizePackageImports:['package-name'],},}"
        },
        {
          "type": "p",
          "text": "The following libraries are optimized by default:"
        },
        {
          "type": "list",
          "items": [
            "lucide-react",
            "date-fns",
            "lodash-es",
            "ramda",
            "antd",
            "react-bootstrap",
            "ahooks",
            "@ant-design/icons",
            "@headlessui/react",
            "@headlessui-float/react",
            "@heroicons/react/20/solid",
            "@heroicons/react/24/solid",
            "@heroicons/react/24/outline",
            "@visx/visx",
            "@tremor/react",
            "rxjs",
            "@mui/material",
            "@mui/icons-material",
            "recharts",
            "react-use",
            "@material-ui/core",
            "@material-ui/icons",
            "@tabler/icons-react",
            "mui-core",
            "react-icons/*"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/output",
      "title": "next.config.js: output | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "During a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application. This feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package'sdependenciesinstalled to runnext start. Starting with Next.js 12, you can leverage Output File Tracing in the.next/directory to only include the necessary files. Furthermore, this removes the need for the deprecatedserverlesstarget which can cause various issues and also creates unnecessary duplication."
        },
        {
          "type": "p",
          "text": "Duringnext build, Next.js will use@vercel/nftto statically analyzeimport,require, andfsusage to determine all files that a page might load. Next.js' production server is also traced for its needed files and output at.next/next-server.js.nft.jsonwhich can be leveraged in production. To leverage the.nft.jsonfiles emitted to the.nextoutput directory, you can read the list of files in each trace that are relative to the.nft.jsonfile and then copy them to your deployment location."
        },
        {
          "type": "p",
          "text": "Next.js can automatically create astandalonefolder that copies only the necessary files for a production deployment including select files innode_modules. To leverage this automatic copying you can enable it in yournext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={output:'standalone',}"
        },
        {
          "type": "p",
          "text": "This will create a folder at.next/standalonewhich can then be deployed on its own without installingnode_modules. Additionally, a minimalserver.jsfile is also output which can be used instead ofnext start. This minimal server does not copy thepublicor.next/staticfolders by default as these should ideally be handled by a CDN instead, although these folders can be copied to thestandalone/publicandstandalone/.next/staticfolders manually, after whichserver.jsfile will serve these automatically. To copy these manually, you can use thecpcommand-line tool after younext build:"
        },
        {
          "type": "code",
          "code": "cp-rpublic.next/standalone/&&cp-r.next/static.next/standalone/.next/"
        },
        {
          "type": "p",
          "text": "To start your minimalserver.jsfile locally, run the following command:"
        },
        {
          "type": "code",
          "code": "node.next/standalone/server.js"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If your project needs to listen to a specific port or hostname, you can definePORTorHOSTNAMEenvironment variables before runningserver.js. For example, runPORT=8080 HOSTNAME=0.0.0.0 node server.jsto start the server onhttp://0.0.0.0:8080."
          ]
        },
        {
          "type": "list",
          "items": [
            "While tracing in monorepo setups, the project directory is used for tracing by default. Fornext build packages/web-app,packages/web-appwould be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can setoutputFileTracingRootin yournext.config.js."
          ]
        },
        {
          "type": "code",
          "code": "module.exports={// this includes files from the monorepo base two directories upoutputFileTracingRoot:path.join(__dirname,'../../'),}"
        },
        {
          "type": "list",
          "items": [
            "There are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can leverageoutputFileTracingExcludesandoutputFileTracingIncludesrespectively innext.config.js. Each config accepts an object withminimatch globsfor the key to match specific pages and a value of an array with globs relative to the project's root to either include or exclude in the trace."
          ]
        },
        {
          "type": "code",
          "code": "module.exports={outputFileTracingExcludes:{'/api/hello':['./un-necessary-folder/**/*'],},outputFileTracingIncludes:{'/api/another':['./necessary-folder/**/*'],'/api/login/\\\\[\\\\[\\\\.\\\\.\\\\.slug\\\\]\\\\]':['./node_modules/aws-crt/dist/bin/**/*',],},}"
        },
        {
          "type": "p",
          "text": "Note:The key ofoutputFileTracingIncludes/outputFileTracingExcludesis aglob, so special characters need to be escaped."
        },
        {
          "type": "list",
          "items": [
            "Currently, Next.js does not do anything with the emitted.nft.jsonfiles. The files must be read by your deployment platform, for exampleVercel, to create a minimal deployment. In a future release, a new command is planned to utilize these.nft.jsonfiles."
          ]
        },
        {
          "type": "p",
          "text": "Tracing dependencies can be slow because it requires very complex computations and analysis. We createdturbotracein Rust as a faster and smarter alternative to the JavaScript implementation. To enable it, you can add the following configuration to yournext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{turbotrace:{// control the log level of the turbotrace, default is `error`logLevel?:|'bug'|'fatal'|'error'|'warning'|'hint'|'note'|'suggestions'|'info',// control if the log of turbotrace should contain the details of the analysis, default is `false`logDetail?:boolean// show all log messages without limit// turbotrace only show 1 log message for each categories by defaultlogAll?:boolean// control the context directory of the turbotrace// files outside of the context directory will not be traced// set the `outputFileTracingRoot` has the same effect// if the `outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be usedcontextDirectory?:string// if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.// for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')processCwd?:string// control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.memoryLimit?:number},},}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/pageExtensions",
      "title": "next.config.js: pageExtensions | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "By default, Next.js accepts files with the following extensions:.tsx,.ts,.jsx,.js. This can be modified to allow other extensions like markdown (.md,.mdx)."
        },
        {
          "type": "code",
          "code": "constwithMDX=require('@next/mdx')()/**@type{import('next').NextConfig}*/constnextConfig={pageExtensions:['js','jsx','ts','tsx','md','mdx'],}module.exports=withMDX(nextConfig)"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/poweredByHeader",
      "title": "next.config.js: poweredByHeader | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "By default Next.js will add thex-powered-byheader. To opt-out of it, opennext.config.jsand disable thepoweredByHeaderconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={poweredByHeader:false,}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/ppr",
      "title": "next.config.js: ppr | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Partial Prerendering (PPR) enables you to combine static and dynamic components together in the same route. Learn more aboutPPR."
        },
        {
          "type": "p",
          "text": "In Next.js 15, you can incrementally adopt Partial Prerendering inlayoutsandpagesby setting thepproption innext.config.jstoincremental, and exporting theexperimental_pprroute config optionat the top of the file:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{ppr:'incremental',},}exportdefaultnextConfig"
        },
        {
          "type": "code",
          "code": "import{ Suspense }from\"react\"import{ StaticComponent,DynamicComponent,Fallback }from\"@/app/ui\"exportconstexperimental_ppr=trueexportdefaultfunctionPage() {return{<><StaticComponent /><Suspense fallback={<Fallback />}><DynamicComponent /></Suspense></>};}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Routes that don't haveexperimental_pprwill default tofalseand will not be prerendered using PPR. You need to explicitly opt-in to PPR for each route.",
            "experimental_pprwill apply to all children of the route segment, including nested layouts and pages. You don't have to add it to every file, only the top segment of a route.",
            "To disable PPR for children segments, you can setexperimental_pprtofalsein the child segment."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/productionBrowserSourceMaps",
      "title": "next.config.js: productionBrowserSourceMaps | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Source Maps are enabled by default during development. During production builds, they are disabled to prevent you leaking your source on the client, unless you specifically opt-in with the configuration flag. Next.js provides a configuration flag you can use to enable browser source map generation during the production build:"
        },
        {
          "type": "code",
          "code": "module.exports={productionBrowserSourceMaps:true,}"
        },
        {
          "type": "p",
          "text": "When theproductionBrowserSourceMapsoption is enabled, the source maps will be output in the same directory as the JavaScript files. Next.js will automatically serve these files when requested."
        },
        {
          "type": "list",
          "items": [
            "Adding source maps can increasenext buildtime",
            "Increases memory usage duringnext build"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/reactCompiler",
      "title": "next.config.js: reactCompiler | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js 15 introduced support for theReact Compiler. The compiler improves performance by automatically optimizing component rendering. This reduces the amount of manual memoization developers have to do through APIs such asuseMemoanduseCallback. To use it, upgrade to Next.js 15, install thebabel-plugin-react-compiler:"
        },
        {
          "type": "code",
          "code": "npminstallbabel-plugin-react-compiler"
        },
        {
          "type": "p",
          "text": "Then, addexperimental.reactCompileroption innext.config.js:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{reactCompiler:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Note:The React Compiler is currently only possible to use in Next.js through a Babel plugin. This will opt-out of Next.js's defaultRust-based compiler, which could result in slower build times. We are working on support for the React Compiler as our default compiler."
        },
        {
          "type": "p",
          "text": "Learn more about theReact Compiler, and theavailable Next.js config options."
        },
        {
          "type": "p",
          "text": "You can configure the compiler to run in \"opt-in\" mode as follows:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{reactCompiler:{compilationMode:'annotation',},},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Then, you can annotate specific components or hooks with the\"use memo\"directive from React to opt-in:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {'use memo'// ...}"
        },
        {
          "type": "p",
          "text": "Note:You can also use the\"use no memo\"directive from React for the opposite effect, to opt-out a component or hook."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/reactMaxHeadersLength",
      "title": "next.config.js: reactMaxHeadersLength | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "During static rendering, React can emit headers that can be added to the response. These can be used to improve performance by allowing the browser to preload resources like fonts, scripts, and stylesheets. The default value is6000, but you can override this value by configuring thereactMaxHeadersLengthoption innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={reactMaxHeadersLength:1000,}"
        },
        {
          "type": "p",
          "text": "Good to know: This option is only available in App Router."
        },
        {
          "type": "p",
          "text": "Depending on the type of proxy between the browser and the server, the headers can be truncated. For example, if you are using a reverse proxy that doesn't support long headers, you should set a lower value to ensure that the headers are not truncated."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/reactStrictMode",
      "title": "next.config.js: reactStrictMode | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Good to know: Since Next.js 13.5.1, Strict Mode istrueby default withapprouter, so the above configuration is only necessary forpages. You can still disable Strict Mode by settingreactStrictMode: false."
        },
        {
          "type": "p",
          "text": "Suggested: We strongly suggest you enable Strict Mode in your Next.js application to better prepare your application for the future of React."
        },
        {
          "type": "p",
          "text": "React'sStrict Modeis a development mode only feature for highlighting potential problems in an application. It helps to identify unsafe lifecycles, legacy API usage, and a number of other features. The Next.js runtime is Strict Mode-compliant. To opt-in to Strict Mode, configure the following option in yournext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={reactStrictMode:true,}"
        },
        {
          "type": "p",
          "text": "If you or your team are not ready to use Strict Mode in your entire application, that's OK! You can incrementally migrate on a page-by-page basis using<React.StrictMode>."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects",
      "title": "next.config.js: redirects | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Redirects allow you to redirect an incoming request path to a different destination path. To use redirects you can use theredirectskey innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncredirects() {return[{source:'/about',destination:'/',permanent:true,},]},}"
        },
        {
          "type": "p",
          "text": "redirectsis an async function that expects an array to be returned holding objects withsource,destination, andpermanentproperties:"
        },
        {
          "type": "list",
          "items": [
            "sourceis the incoming request path pattern.",
            "destinationis the path you want to route to.",
            "permanenttrueorfalse- iftruewill use the 308 status code which instructs clients/search engines to cache the redirect forever, iffalsewill use the 307 status code which is temporary and is not cached."
          ]
        },
        {
          "type": "p",
          "text": "Why does Next.js use 307 and 308?Traditionally a 302 was used for a temporary redirect, and a 301 for a permanent redirect, but many browsers changed the request method of the redirect toGET, regardless of the original method. For example, if the browser made a request toPOST /v1/userswhich returned status code302with location/v2/users, the subsequent request might beGET /v2/usersinstead of the expectedPOST /v2/users. Next.js uses the 307 temporary redirect, and 308 permanent redirect status codes to explicitly preserve the request method used."
        },
        {
          "type": "list",
          "items": [
            "basePath:falseorundefined- if false thebasePathwon't be included when matching, can be used for external redirects only.",
            "locale:falseorundefined- whether the locale should not be included when matching.",
            "hasis an array ofhas objectswith thetype,keyandvalueproperties.",
            "missingis an array ofmissing objectswith thetype,keyandvalueproperties."
          ]
        },
        {
          "type": "p",
          "text": "Redirects are checked before the filesystem which includes pages and/publicfiles. When using the Pages Router, redirects are not applied to client-side routing (Link,router.push) unlessMiddlewareis present and matches the path. When a redirect is applied, any query values provided in the request will be passed through to the redirect destination. For example, see the following redirect configuration:"
        },
        {
          "type": "code",
          "code": "{source:'/old-blog/:path*',destination:'/blog/:path*',permanent:false}"
        },
        {
          "type": "p",
          "text": "When/old-blog/post-1?hello=worldis requested, the client will be redirected to/blog/post-1?hello=world."
        },
        {
          "type": "p",
          "text": "Path matches are allowed, for example/old-blog/:slugwill match/old-blog/hello-world(no nested paths):"
        },
        {
          "type": "code",
          "code": "module.exports={asyncredirects() {return[{source:'/old-blog/:slug',destination:'/news/:slug',// Matched parameters can be used in the destinationpermanent:true,},]},}"
        },
        {
          "type": "p",
          "text": "To match a wildcard path you can use*after a parameter, for example/blog/:slug*will match/blog/a/b/c/d/hello-world:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncredirects() {return[{source:'/blog/:slug*',destination:'/news/:slug*',// Matched parameters can be used in the destinationpermanent:true,},]},}"
        },
        {
          "type": "p",
          "text": "To match a regex path you can wrap the regex in parentheses after a parameter, for example/post/:slug(\\\\d{1,})will match/post/123but not/post/abc:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncredirects() {return[{source:'/post/:slug(\\\\d{1,})',destination:'/news/:slug',// Matched parameters can be used in the destinationpermanent:false,},]},}"
        },
        {
          "type": "p",
          "text": "The following characters(,),{,},:,*,+,?are used for regex path matching, so when used in thesourceas non-special values they must be escaped by adding\\\\before them:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncredirects() {return[{// this will match `/english(default)/something` being requestedsource:'/english\\\\(default\\\\)/:slug',destination:'/en-us/:slug',permanent:false,},]},}"
        },
        {
          "type": "p",
          "text": "To only match a redirect when header, cookie, or query values also match thehasfield or don't match themissingfield can be used. Both thesourceand allhasitems must match and allmissingitems must not match for the redirect to be applied. hasandmissingitems can have the following fields:"
        },
        {
          "type": "list",
          "items": [
            "type:String- must be eitherheader,cookie,host, orquery.",
            "key:String- the key from the selected type to match against.",
            "value:Stringorundefined- the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the valuefirst-(?<paramName>.*)is used forfirst-secondthensecondwill be usable in the destination with:paramName."
          ]
        },
        {
          "type": "code",
          "code": "module.exports={asyncredirects() {return[// if the header `x-redirect-me` is present,// this redirect will be applied{source:'/:path((?!another-page$).*)',has:[{type:'header',key:'x-redirect-me',},],permanent:false,destination:'/another-page',},// if the header `x-dont-redirect` is present,// this redirect will NOT be applied{source:'/:path((?!another-page$).*)',missing:[{type:'header',key:'x-do-not-redirect',},],permanent:false,destination:'/another-page',},// if the source, query, and cookie are matched,// this redirect will be applied{source:'/specific/:path*',has:[{type:'query',key:'page',// the page value will not be available in the// destination since value is provided and doesn't// use a named capture group e.g. (?<page>home)value:'home',},{type:'cookie',key:'authorized',value:'true',},],permanent:false,destination:'/another/:path*',},// if the header `x-authorized` is present and// contains a matching value, this redirect will be applied{source:'/',has:[{type:'header',key:'x-authorized',value:'(?<authorized>yes|true)',},],permanent:false,destination:'/home?authorized=:authorized',},// if the host is `example.com`,// this redirect will be applied{source:'/:path((?!another-page$).*)',has:[{type:'host',value:'example.com',},],permanent:false,destination:'/another-page',},]},}"
        },
        {
          "type": "p",
          "text": "When leveragingbasePathsupportwith redirects eachsourceanddestinationis automatically prefixed with thebasePathunless you addbasePath: falseto the redirect:"
        },
        {
          "type": "code",
          "code": "module.exports={basePath:'/docs',asyncredirects() {return[{source:'/with-basePath',// automatically becomes /docs/with-basePathdestination:'/another',// automatically becomes /docs/anotherpermanent:false,},{// does not add /docs since basePath: false is setsource:'/without-basePath',destination:'https://example.com',basePath:false,permanent:false,},]},}"
        },
        {
          "type": "p",
          "text": "When leveragingi18nsupportwith redirects eachsourceanddestinationis automatically prefixed to handle the configuredlocalesunless you addlocale: falseto the redirect. Iflocale: falseis used you must prefix thesourceanddestinationwith a locale for it to be matched correctly."
        },
        {
          "type": "code",
          "code": "module.exports={i18n:{locales:['en','fr','de'],defaultLocale:'en',},asyncredirects() {return[{source:'/with-locale',// automatically handles all localesdestination:'/another',// automatically passes the locale onpermanent:false,},{// does not handle locales automatically since locale: false is setsource:'/nl/with-locale-manual',destination:'/nl/another',locale:false,permanent:false,},{// this matches '/' since `en` is the defaultLocalesource:'/en',destination:'/en/another',locale:false,permanent:false,},// it's possible to match all locales even when locale: false is set{source:'/:locale/page',destination:'/en/newpage',permanent:false,locale:false,},{// this gets converted to /(en|fr|de)/(.*) so will not match the top-level// `/` or `/fr` routes like /:path* wouldsource:'/(.*)',destination:'/another',permanent:false,},]},}"
        },
        {
          "type": "p",
          "text": "In some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use thestatusCodeproperty instead of thepermanentproperty, but not both. To to ensure IE11 compatibility, aRefreshheader is automatically added for the 308 status code."
        },
        {
          "type": "list",
          "items": [
            "InsideAPI RoutesandRoute Handlers, you can redirect based on the incoming request.",
            "InsidegetStaticPropsandgetServerSideProps, you can redirect specific pages at request-time."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/rewrites",
      "title": "next.config.js: rewrites | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Rewrites allow you to map an incoming request path to a different destination path. Rewrites act as a URL proxy and mask the destination path, making it appear the user hasn't changed their location on the site. In contrast,redirectswill reroute to a new page and show the URL changes. To use rewrites you can use therewriteskey innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[{source:'/about',destination:'/',},]},}"
        },
        {
          "type": "p",
          "text": "Rewrites are applied to client-side routing, a<Link href=\"/about\">will have the rewrite applied in the above example. rewritesis an async function that expects to return either an array or an object of arrays (see below) holding objects withsourceanddestinationproperties:"
        },
        {
          "type": "list",
          "items": [
            "source:String- is the incoming request path pattern.",
            "destination:Stringis the path you want to route to.",
            "basePath:falseorundefined- if false the basePath won't be included when matching, can be used for external rewrites only.",
            "locale:falseorundefined- whether the locale should not be included when matching.",
            "hasis an array ofhas objectswith thetype,keyandvalueproperties.",
            "missingis an array ofmissing objectswith thetype,keyandvalueproperties."
          ]
        },
        {
          "type": "p",
          "text": "When therewritesfunction returns an array, rewrites are applied after checking the filesystem (pages and/publicfiles) and before dynamic routes. When therewritesfunction returns an object of arrays with a specific shape, this behavior can be changed and more finely controlled, as ofv10.1of Next.js:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return{beforeFiles:[// These rewrites are checked after headers/redirects// and before all files including _next/public files which// allows overriding page files{source:'/some-page',destination:'/somewhere-else',has:[{ type:'query',key:'overrideMe'}],},],afterFiles:[// These rewrites are checked after pages/public files// are checked but before dynamic routes{source:'/non-existent',destination:'/somewhere-else',},],fallback:[// These rewrites are checked after both pages/public files// and dynamic routes are checked{source:'/:path*',destination:`https://my-old-site.com/:path*`,},],}},}"
        },
        {
          "type": "p",
          "text": "Good to know: rewrites inbeforeFilesdo not check the filesystem/dynamic routes immediately after matching a source, they continue until allbeforeFileshave been checked."
        },
        {
          "type": "p",
          "text": "The order Next.js routes are checked is:"
        },
        {
          "type": "list",
          "items": [
            "headersare checked/applied",
            "redirectsare checked/applied",
            "beforeFilesrewrites are checked/applied",
            "static files from thepublic directory,_next/staticfiles, and non-dynamic pages are checked/served",
            "afterFilesrewrites are checked/applied, if one of these rewrites is matched we check dynamic routes/static files after each match",
            "fallbackrewrites are checked/applied, these are applied before rendering the 404 page and after dynamic routes/all static assets have been checked. If you usefallback: true/'blocking'ingetStaticPaths, the fallbackrewritesdefined in yournext.config.jswillnotbe run."
          ]
        },
        {
          "type": "p",
          "text": "When using parameters in a rewrite the parameters will be passed in the query by default when none of the parameters are used in thedestination."
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[{source:'/old-about/:path*',destination:'/about',// The :path parameter isn't used here so will be automatically passed in the query},]},}"
        },
        {
          "type": "p",
          "text": "If a parameter is used in the destination none of the parameters will be automatically passed in the query."
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[{source:'/docs/:path*',destination:'/:path*',// The :path parameter is used here so will not be automatically passed in the query},]},}"
        },
        {
          "type": "p",
          "text": "You can still pass the parameters manually in the query if one is already used in the destination by specifying the query in thedestination."
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[{source:'/:first/:second',destination:'/:first?second=:second',// Since the :first parameter is used in the destination the :second parameter// will not automatically be added in the query although we can manually add it// as shown above},]},}"
        },
        {
          "type": "p",
          "text": "Good to know: Static pages fromAutomatic Static Optimizationorprerenderingparams from rewrites will be parsed on the client after hydration and provided in the query."
        },
        {
          "type": "p",
          "text": "Path matches are allowed, for example/blog/:slugwill match/blog/hello-world(no nested paths):"
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[{source:'/blog/:slug',destination:'/news/:slug',// Matched parameters can be used in the destination},]},}"
        },
        {
          "type": "p",
          "text": "To match a wildcard path you can use*after a parameter, for example/blog/:slug*will match/blog/a/b/c/d/hello-world:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[{source:'/blog/:slug*',destination:'/news/:slug*',// Matched parameters can be used in the destination},]},}"
        },
        {
          "type": "p",
          "text": "To match a regex path you can wrap the regex in parenthesis after a parameter, for example/blog/:slug(\\\\d{1,})will match/blog/123but not/blog/abc:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[{source:'/old-blog/:post(\\\\d{1,})',destination:'/blog/:post',// Matched parameters can be used in the destination},]},}"
        },
        {
          "type": "p",
          "text": "The following characters(,),{,},[,],|,\\,^,.,:,*,+,-,?,$are used for regex path matching, so when used in thesourceas non-special values they must be escaped by adding\\\\before them:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[{// this will match `/english(default)/something` being requestedsource:'/english\\\\(default\\\\)/:slug',destination:'/en-us/:slug',},]},}"
        },
        {
          "type": "p",
          "text": "To only match a rewrite when header, cookie, or query values also match thehasfield or don't match themissingfield can be used. Both thesourceand allhasitems must match and allmissingitems must not match for the rewrite to be applied. hasandmissingitems can have the following fields:"
        },
        {
          "type": "list",
          "items": [
            "type:String- must be eitherheader,cookie,host, orquery.",
            "key:String- the key from the selected type to match against.",
            "value:Stringorundefined- the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the valuefirst-(?<paramName>.*)is used forfirst-secondthensecondwill be usable in the destination with:paramName."
          ]
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[// if the header `x-rewrite-me` is present,// this rewrite will be applied{source:'/:path*',has:[{type:'header',key:'x-rewrite-me',},],destination:'/another-page',},// if the header `x-rewrite-me` is not present,// this rewrite will be applied{source:'/:path*',missing:[{type:'header',key:'x-rewrite-me',},],destination:'/another-page',},// if the source, query, and cookie are matched,// this rewrite will be applied{source:'/specific/:path*',has:[{type:'query',key:'page',// the page value will not be available in the// destination since value is provided and doesn't// use a named capture group e.g. (?<page>home)value:'home',},{type:'cookie',key:'authorized',value:'true',},],destination:'/:path*/home',},// if the header `x-authorized` is present and// contains a matching value, this rewrite will be applied{source:'/:path*',has:[{type:'header',key:'x-authorized',value:'(?<authorized>yes|true)',},],destination:'/home?authorized=:authorized',},// if the host is `example.com`,// this rewrite will be applied{source:'/:path*',has:[{type:'host',value:'example.com',},],destination:'/another-page',},]},}"
        },
        {
          "type": "list",
          "items": ["Incremental adoption of Next.js", "Using Multiple Zones"]
        },
        {
          "type": "p",
          "text": "Rewrites allow you to rewrite to an external URL. This is especially useful for incrementally adopting Next.js. The following is an example rewrite for redirecting the/blogroute of your main app to an external site."
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return[{source:'/blog',destination:'https://example.com/blog',},{source:'/blog/:slug',destination:'https://example.com/blog/:slug',// Matched parameters can be used in the destination},]},}"
        },
        {
          "type": "p",
          "text": "If you're usingtrailingSlash: true, you also need to insert a trailing slash in thesourceparameter. If the destination server is also expecting a trailing slash it should be included in thedestinationparameter as well."
        },
        {
          "type": "code",
          "code": "module.exports={trailingSlash:true,asyncrewrites() {return[{source:'/blog/',destination:'https://example.com/blog/',},{source:'/blog/:path*/',destination:'https://example.com/blog/:path*/',},]},}"
        },
        {
          "type": "p",
          "text": "You can also have Next.js fall back to proxying to an existing website after checking all Next.js routes. This way you don't have to change the rewrites configuration when migrating more pages to Next.js"
        },
        {
          "type": "code",
          "code": "module.exports={asyncrewrites() {return{fallback:[{source:'/:path*',destination:`https://custom-routes-proxying-endpoint.vercel.app/:path*`,},],}},}"
        },
        {
          "type": "p",
          "text": "When leveragingbasePathsupportwith rewrites eachsourceanddestinationis automatically prefixed with thebasePathunless you addbasePath: falseto the rewrite:"
        },
        {
          "type": "code",
          "code": "module.exports={basePath:'/docs',asyncrewrites() {return[{source:'/with-basePath',// automatically becomes /docs/with-basePathdestination:'/another',// automatically becomes /docs/another},{// does not add /docs to /without-basePath since basePath: false is set// Note: this can not be used for internal rewrites e.g. `destination: '/another'`source:'/without-basePath',destination:'https://example.com',basePath:false,},]},}"
        },
        {
          "type": "p",
          "text": "When leveragingi18nsupportwith rewrites eachsourceanddestinationis automatically prefixed to handle the configuredlocalesunless you addlocale: falseto the rewrite. Iflocale: falseis used you must prefix thesourceanddestinationwith a locale for it to be matched correctly."
        },
        {
          "type": "code",
          "code": "module.exports={i18n:{locales:['en','fr','de'],defaultLocale:'en',},asyncrewrites() {return[{source:'/with-locale',// automatically handles all localesdestination:'/another',// automatically passes the locale on},{// does not handle locales automatically since locale: false is setsource:'/nl/with-locale-manual',destination:'/nl/another',locale:false,},{// this matches '/' since `en` is the defaultLocalesource:'/en',destination:'/en/another',locale:false,},{// it's possible to match all locales even when locale: false is setsource:'/:locale/api-alias/:path*',destination:'/api/:path*',locale:false,},{// this gets converted to /(en|fr|de)/(.*) so will not match the top-level// `/` or `/fr` routes like /:path* wouldsource:'/(.*)',destination:'/another',},]},}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/sassOptions",
      "title": "next.config.js: sassOptions | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "sassOptionsallow you to configure the Sass compiler."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constsassOptions={additionalData:`$var: red;`,}constnextConfig:NextConfig={sassOptions:{...sassOptions,implementation:'sass-embedded',},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Good to know:sassOptionsare not typed outside ofimplementationbecause Next.js does not maintain the other possible properties."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/serverActions",
      "title": "next.config.js: serverActions | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Options for configuring Server Actions behavior in your Next.js application."
        },
        {
          "type": "p",
          "text": "A list of extra safe origin domains from which Server Actions can be invoked. Next.js compares the origin of a Server Action request with the host domain, ensuring they match to prevent CSRF attacks. If not provided, only the same origin is allowed."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/module.exports={experimental:{serverActions:{allowedOrigins:['my-proxy.com','*.my-proxy.com'],},},}"
        },
        {
          "type": "p",
          "text": "By default, the maximum size of the request body sent to a Server Action is 1MB, to prevent the consumption of excessive server resources in parsing large amounts of data, as well as potential DDoS attacks. However, you can configure this limit using theserverActions.bodySizeLimitoption. It can take the number of bytes or any string format supported by bytes, for example1000,'500kb'or'3mb'."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/module.exports={experimental:{serverActions:{bodySizeLimit:'2mb',},},}"
        },
        {
          "type": "p",
          "text": "Server Actions became a stable feature in Next.js 14, and are enabled by default. However, if you are using an earlier version of Next.js, you can enable them by settingexperimental.serverActionstotrue."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constconfig={experimental:{serverActions:true,},}module.exports=config"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/serverComponentsHmrCache",
      "title": "next.config.js: serverComponentsHmrCache | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The experimentalserverComponentsHmrCacheoption allows you to cachefetchresponses in Server Components across Hot Module Replacement (HMR) refreshes in local development. This results in faster responses and reduced costs for billed API calls. By default, the HMR cache applies to allfetchrequests, including those with thecache: 'no-store'option. This means uncached requests will not show fresh data between HMR refreshes. However, the cache will be cleared on navigation or full-page reloads. You can disable the HMR cache by settingserverComponentsHmrCachetofalsein yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{serverComponentsHmrCache:false,// defaults to true},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Good to know:For better observability, we recommend using thelogging.fetchesoption which logs fetch cache hits and misses in the console during development."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/serverExternalPackages",
      "title": "next.config.js: serverExternalPackages | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Dependencies used insideServer ComponentsandRoute Handlerswill automatically be bundled by Next.js. If a dependency is using Node.js specific features, you can choose to opt-out specific dependencies from the Server Components bundling and use native Node.jsrequire."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={serverExternalPackages:['@acme/ui'],}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Next.js includes ashort list of popular packagesthat currently are working on compatibility and automatically opt-ed out:"
        },
        {
          "type": "list",
          "items": [
            "@appsignal/nodejs",
            "@aws-sdk/client-s3",
            "@aws-sdk/s3-presigned-post",
            "@blockfrost/blockfrost-js",
            "@highlight-run/node",
            "@jpg-store/lucid-cardano",
            "@libsql/client",
            "@mikro-orm/core",
            "@mikro-orm/knex",
            "@node-rs/argon2",
            "@node-rs/bcrypt",
            "@prisma/client",
            "@react-pdf/renderer",
            "@sentry/profiling-node",
            "@sparticuz/chromium",
            "@swc/core",
            "argon2",
            "autoprefixer",
            "aws-crt",
            "bcrypt",
            "better-sqlite3",
            "canvas",
            "cpu-features",
            "cypress",
            "dd-trace",
            "eslint",
            "express",
            "firebase-admin",
            "import-in-the-middle",
            "isolated-vm",
            "jest",
            "jsdom",
            "keyv",
            "libsql",
            "mdx-bundler",
            "mongodb",
            "mongoose",
            "newrelic",
            "next-mdx-remote",
            "next-seo",
            "node-cron",
            "node-pty",
            "node-web-audio-api",
            "oslo",
            "pg",
            "playwright",
            "playwright-core",
            "postcss",
            "prettier",
            "prisma",
            "puppeteer-core",
            "puppeteer",
            "require-in-the-middle",
            "rimraf",
            "sharp",
            "shiki",
            "sqlite3",
            "ts-node",
            "ts-morph",
            "typescript",
            "vscode-oniguruma",
            "webpack",
            "websocket",
            "zeromq"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/staleTimes",
      "title": "next.config.js: staleTimes | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "staleTimesis an experimental feature that enables caching of page segments in theclient-side router cache. You can enable this experimental feature and provide custom revalidation times by setting the experimentalstaleTimesflag:"
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{staleTimes:{dynamic:30,static:180,},},}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Thestaticanddynamicproperties correspond with the time period (in seconds) based on different types oflink prefetching."
        },
        {
          "type": "list",
          "items": [
            "Thedynamicproperty is used when the page is neither statically generated nor fully prefetched (e.g. withprefetch={true}).Default: 0 seconds (not cached)",
            "Default: 0 seconds (not cached)",
            "Thestaticproperty is used for statically generated pages, or when theprefetchprop onLinkis set totrue, or when callingrouter.prefetch.Default: 5 minutes",
            "Default: 5 minutes"
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Loading boundariesare considered reusable for thestaticperiod defined in this configuration.",
            "This doesn't affectpartial rendering,meaning shared layouts won't automatically be refetched on every navigation, only the page segment that changes.",
            "This doesn't changeback/forward cachingbehavior to prevent layout shift and to prevent losing the browser scroll position."
          ]
        },
        {
          "type": "p",
          "text": "You can learn more about the Client Router Cachehere."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/staticGeneration",
      "title": "next.config.js: staticGeneration* | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "ThestaticGeneration*options allow you to configure the Static Generation process for advanced use cases."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{staticGenerationRetryCount:1,staticGenerationMaxConcurrency:8,staticGenerationMinPagesPerWorker:25,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "The following options are available:"
        },
        {
          "type": "list",
          "items": [
            "staticGenerationRetryCount: The number of times to retry a failed page generation before failing the build.",
            "staticGenerationMaxConcurrency: The maximum number of pages to be processed per worker.",
            "staticGenerationMinPagesPerWorker: The minimum number of pages to be processed before starting a new worker."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/trailingSlash",
      "title": "next.config.js: trailingSlash | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "By default Next.js will redirect URLs with trailing slashes to their counterpart without a trailing slash. For example/about/will redirect to/about. You can configure this behavior to act the opposite way, where URLs without trailing slashes are redirected to their counterparts with trailing slashes. Opennext.config.jsand add thetrailingSlashconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={trailingSlash:true,}"
        },
        {
          "type": "p",
          "text": "With this option set, URLs like/aboutwill redirect to/about/. When used withoutput: \"export\"configuration, the/aboutpage will output/about/index.html(instead of the default/about.html)."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/transpilePackages",
      "title": "next.config.js: transpilePackages | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (node_modules). This replaces thenext-transpile-modulespackage."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={transpilePackages:['package-name'],}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/turbo",
      "title": "next.config.js: turbo | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theturbooption lets you customizeTurbopackto transform different files and change how modules are resolved."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{turbo:{// ...},},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Turbopack for Next.js does not require loaders nor loader configuration for built-in functionality. Turbopack has built-in support for CSS and compiling modern JavaScript, so there's no need forcss-loader,postcss-loader, orbabel-loaderif you're using@babel/preset-env."
          ]
        },
        {
          "type": "p",
          "text": "The following options are available for theturboconfiguration:"
        },
        {
          "type": "p",
          "text": "The following loaders have been tested to work with Turbopack's webpack loader implementation:"
        },
        {
          "type": "list",
          "items": [
            "babel-loader",
            "@svgr/webpack",
            "svg-inline-loader",
            "yaml-loader",
            "string-replace-loader",
            "raw-loader",
            "sass-loader"
          ]
        },
        {
          "type": "p",
          "text": "If you need loader support beyond what's built in, many webpack loaders already work with Turbopack. There are currently some limitations:"
        },
        {
          "type": "list",
          "items": [
            "Only a core subset of the webpack loader API is implemented. Currently, there is enough coverage for some popular loaders, and we'll expand our API support in the future.",
            "Only loaders that return JavaScript code are supported. Loaders that transform files like stylesheets or images are not currently supported.",
            "Options passed to webpack loaders must be plain JavaScript primitives, objects, and arrays. For example, it's not possible to passrequire()plugin modules as option values."
          ]
        },
        {
          "type": "p",
          "text": "To configure loaders, add the names of the loaders you've installed and any options innext.config.js, mapping file extensions to a list of loaders:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{turbo:{rules:{'*.svg':{loaders:['@svgr/webpack'],as:'*.js',},},},},}"
        },
        {
          "type": "p",
          "text": "Good to know: Prior to Next.js version 13.4.4,turbo.ruleswas namedturbo.loadersand only accepted file extensions like.mdxinstead of*.mdx."
        },
        {
          "type": "p",
          "text": "Turbopack can be configured to modify module resolution through aliases, similar to webpack'sresolve.aliasconfiguration. To configure resolve aliases, map imported patterns to their new destination innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{turbo:{resolveAlias:{underscore:'lodash',mocha:{ browser:'mocha/browser-entry.js'},},},},}"
        },
        {
          "type": "p",
          "text": "This aliases imports of theunderscorepackage to thelodashpackage. In other words,import underscore from 'underscore'will load thelodashmodule instead ofunderscore. Turbopack also supports conditional aliasing through this field, similar to Node.js'conditional exports. At the moment only thebrowsercondition is supported. In the case above, imports of themochamodule will be aliased tomocha/browser-entry.jswhen Turbopack targets browser environments."
        },
        {
          "type": "p",
          "text": "Turbopack can be configured to resolve modules with custom extensions, similar to webpack'sresolve.extensionsconfiguration. To configure resolve extensions, use theresolveExtensionsfield innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{turbo:{resolveExtensions:['.mdx','.tsx','.ts','.jsx','.js','.mjs','.json',],},},}"
        },
        {
          "type": "p",
          "text": "This overwrites the original resolve extensions with the provided list. Make sure to include the default extensions. For more information and guidance for how to migrate your app to Turbopack from webpack, seeTurbopack's documentation on webpack compatibility."
        },
        {
          "type": "p",
          "text": "Turbopack currently supports two strategies for assigning module IDs:"
        },
        {
          "type": "list",
          "items": [
            "'named'assigns readable module IDs based on the module's path and functionality.",
            "'deterministic'assigns small hashed numeric module IDs, which are mostly consistent between builds and therefore help with long-term caching."
          ]
        },
        {
          "type": "p",
          "text": "If not set, Turbopack will use'named'for development builds and'deterministic'for production builds. To configure the module IDs strategy, use themoduleIdStrategyfield innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{turbo:{moduleIdStrategy:'deterministic',},},}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/typedRoutes",
      "title": "next.config.js: typedRoutes | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Experimental support forstatically typed links. This feature requires using the App Router as well as TypeScript in your project."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{typedRoutes:true,},}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/typescript",
      "title": "next.config.js: typescript | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js fails yourproduction build(next build) when TypeScript errors are present in your project. If you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step. If disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous. Opennext.config.jsand enable theignoreBuildErrorsoption in thetypescriptconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={typescript:{// !! WARN !!// Dangerously allow production builds to successfully complete even if// your project has type errors.// !! WARN !!ignoreBuildErrors:true,},}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/urlImports",
      "title": "next.config.js: urlImports | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "URL imports are an experimental feature that allows you to import modules directly from external servers (instead of from the local disk)."
        },
        {
          "type": "p",
          "text": "Warning: Only use domains that you trust to download and execute on your machine. Please exercise discretion, and caution until the feature is flagged as stable."
        },
        {
          "type": "p",
          "text": "To opt-in, add the allowed URL prefixes insidenext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{urlImports:['https://example.com/assets/','https://cdn.skypack.dev'],},}"
        },
        {
          "type": "p",
          "text": "Then, you can import modules directly from URLs:"
        },
        {
          "type": "code",
          "code": "import{ a,b,c }from'https://example.com/assets/some/module.js'"
        },
        {
          "type": "p",
          "text": "URL Imports can be used everywhere normal package imports can be used."
        },
        {
          "type": "p",
          "text": "This feature is being designed withsecurity as the top priority. To start, we added an experimental flag forcing you to explicitly allow the domains you accept URL imports from. We're working to take this further by limiting URL imports to execute in the browser sandbox using theEdge Runtime."
        },
        {
          "type": "p",
          "text": "When using URL imports, Next.js will create anext.lockdirectory containing a lockfile and fetched assets.\nThis directorymust be committed to Git, not ignored by.gitignore."
        },
        {
          "type": "list",
          "items": [
            "When runningnext dev, Next.js will download and add all newly discovered URL Imports to your lockfile.",
            "When runningnext build, Next.js will use only the lockfile to build the application for production."
          ]
        },
        {
          "type": "p",
          "text": "Typically, no network requests are needed and any outdated lockfile will cause the build to fail.\nOne exception is resources that respond withCache-Control: no-cache.\nThese resources will have ano-cacheentry in the lockfile and will always be fetched from the network on each build."
        },
        {
          "type": "code",
          "code": "importconfettifrom'https://cdn.skypack.dev/canvas-confetti'import{ useEffect }from'react'exportdefault()=>{useEffect(()=>{confetti()})return<p>Hello</p>}"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'importlogofrom'https://example.com/assets/logo.png'exportdefault()=>(<div><Imagesrc={logo}placeholder=\"blur\"/></div>)"
        },
        {
          "type": "code",
          "code": ".className{background:url('https://example.com/assets/hero.jpg');}"
        },
        {
          "type": "code",
          "code": "constlogo=newURL('https://example.com/assets/file.txt',import.meta.url)console.log(logo.pathname)// prints \"/_next/static/media/file.a9727b5d.txt\""
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/useLightningcss",
      "title": "next.config.js: useLightningcss | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Experimental support for usingLightning CSS, a fast CSS bundler and minifier, written in Rust."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{useLightningcss:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/webVitalsAttribution",
      "title": "next.config.js: webVitalsAttribution | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "When debugging issues related to Web Vitals, it is often helpful if we can pinpoint the source of the problem.\nFor example, in the case of Cumulative Layout Shift (CLS), we might want to know the first element that shifted when the single largest layout shift occurred.\nOr, in the case of Largest Contentful Paint (LCP), we might want to identify the element corresponding to the LCP for the page.\nIf the LCP element is an image, knowing the URL of the image resource can help us locate the asset we need to optimize. Pinpointing the biggest contributor to the Web Vitals score, akaattribution,\nallows us to obtain more in-depth information like entries forPerformanceEventTiming,PerformanceNavigationTimingandPerformanceResourceTiming. Attribution is disabled by default in Next.js but can be enabledper metricby specifying the following innext.config.js."
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{webVitalsAttribution:['CLS','LCP'],},}"
        },
        {
          "type": "p",
          "text": "Valid attribution values are allweb-vitalsmetrics specified in theNextWebVitalsMetrictype."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/webpack",
      "title": "next.config.js: webpack | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Good to know: changes to webpack config are not covered by semver so proceed at your own risk"
        },
        {
          "type": "p",
          "text": "Before continuing to add custom webpack configuration to your application make sure Next.js doesn't already support your use-case:"
        },
        {
          "type": "list",
          "items": [
            "CSS imports",
            "CSS modules",
            "Sass/SCSS imports",
            "Sass/SCSS modules"
          ]
        },
        {
          "type": "p",
          "text": "Some commonly asked for features are available as plugins:"
        },
        {
          "type": "list",
          "items": ["@next/mdx", "@next/bundle-analyzer"]
        },
        {
          "type": "p",
          "text": "In order to extend our usage ofwebpack, you can define a function that extends its config insidenext.config.js, like so:"
        },
        {
          "type": "code",
          "code": "module.exports={webpack:(config,{ buildId,dev,isServer,defaultLoaders,nextRuntime,webpack })=>{// Important: return the modified configreturnconfig},}"
        },
        {
          "type": "p",
          "text": "Thewebpackfunction is executed three times, twice for the server (nodejs / edge runtime) and once for the client. This allows you to distinguish between client and server configuration using theisServerproperty."
        },
        {
          "type": "p",
          "text": "The second argument to thewebpackfunction is an object with the following properties:"
        },
        {
          "type": "list",
          "items": [
            "buildId:String- The build id, used as a unique identifier between builds.",
            "dev:Boolean- Indicates if the compilation will be done in development.",
            "isServer:Boolean- It'struefor server-side compilation, andfalsefor client-side compilation.",
            "nextRuntime:String | undefined- The target runtime for server-side compilation; either\"edge\"or\"nodejs\", it'sundefinedfor client-side compilation.",
            "defaultLoaders:Object- Default loaders used internally by Next.js:babel:Object- Defaultbabel-loaderconfiguration.",
            "babel:Object- Defaultbabel-loaderconfiguration."
          ]
        },
        {
          "type": "p",
          "text": "Example usage ofdefaultLoaders.babel:"
        },
        {
          "type": "code",
          "code": "// Example config for adding a loader that depends on babel-loader// This source was taken from the @next/mdx plugin source:// https://github.com/vercel/next.js/tree/canary/packages/next-mdxmodule.exports={webpack:(config,options)=>{config.module.rules.push({test:/\\.mdx/,use:[options.defaultLoaders.babel,{loader:'@mdx-js/loader',options:pluginOptions.options,},],})returnconfig},}"
        },
        {
          "type": "p",
          "text": "Notice thatisServeristruewhennextRuntimeis\"edge\"or\"nodejs\",nextRuntime\"edge\"is currently for middleware and Server Components in edge runtime only."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/config/typescript",
      "title": "Configuration: TypeScript | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js comes with built-in TypeScript, automatically installing the necessary packages and configuring the proper settings when you create a new project withcreate-next-app. To add TypeScript to an existing project, rename a file to.ts/.tsx. Runnext devandnext buildto automatically install the necessary dependencies and add atsconfig.jsonfile with the recommended config options."
        },
        {
          "type": "p",
          "text": "Good to know: If you already have ajsconfig.jsonfile, copy thepathscompiler option from the oldjsconfig.jsoninto the newtsconfig.jsonfile, and delete the oldjsconfig.jsonfile."
        },
        {
          "type": "p",
          "text": "Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion. You can enable the plugin in VS Code by:"
        },
        {
          "type": "list",
          "items": [
            "Opening the command palette (Ctrl/⌘+Shift+P)",
            "Searching for \"TypeScript: Select TypeScript Version\"",
            "Selecting \"Use Workspace Version\""
          ]
        },
        {
          "type": "p",
          "text": "Now, when editing files, the custom plugin will be enabled. When runningnext build, the custom type checker will be used. The TypeScript plugin can help with:"
        },
        {
          "type": "list",
          "items": [
            "Warning if the invalid values forsegment config optionsare passed.",
            "Showing available options and in-context documentation.",
            "Ensuring theuse clientdirective is used correctly.",
            "Ensuring client hooks (likeuseState) are only used in Client Components."
          ]
        },
        {
          "type": "p",
          "text": "🎥 Watch:Learn about the built-in TypeScript plugin →YouTube (3 minutes)"
        },
        {
          "type": "p",
          "text": "The Next.js App Router hasenhanced type safety. This includes:"
        },
        {
          "type": "list",
          "items": [
            "No serialization of data between fetching function and page: You canfetchdirectly in components, layouts, and pages on the server. This datadoes notneed to be serialized (converted to a string) to be passed to the client side for consumption in React. Instead, sinceappuses Server Components by default, we can use values likeDate,Map,Set, and more without any extra steps. Previously, you needed to manually type the boundary between server and client with Next.js-specific types.",
            "Streamlined data flow between components: With the removal of_appin favor of root layouts, it is now easier to visualize the data flow between components and pages. Previously, data flowing between individualpagesand_appwere difficult to type and could introduce confusing bugs. Withcolocated data fetchingin the App Router, this is no longer an issue."
          ]
        },
        {
          "type": "p",
          "text": "Data Fetching in Next.jsnow provides as close to end-to-end type safety as possible without being prescriptive about your database or content provider selection. We're able to type the response data as you would expect with normal TypeScript. For example:"
        },
        {
          "type": "code",
          "code": "asyncfunctiongetData() {constres=awaitfetch('https://api.example.com/...')// The return value is *not* serialized// You can return Date, Map, Set, etc.returnres.json()}exportdefaultasyncfunctionPage() {constname=awaitgetData()return'...'}"
        },
        {
          "type": "p",
          "text": "Forcompleteend-to-end type safety, this also requires your database or content provider to support TypeScript. This could be through using anORMor type-safe query builder."
        },
        {
          "type": "p",
          "text": "You can use TypeScript and import types in your Next.js configuration by usingnext.config.ts."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={/* config options here */}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Good to know: Module resolution innext.config.tsis currently limited toCommonJS. This may cause incompatibilities with ESM only packages being loaded innext.config.ts."
        },
        {
          "type": "p",
          "text": "When using thenext.config.jsfile, you can add some type checking in your IDE using JSDoc as below:"
        },
        {
          "type": "code",
          "code": "// @ts-check/**@type{import('next').NextConfig}*/constnextConfig={/* config options here */}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Next.js can statically type links to prevent typos and other errors when usingnext/link, improving type safety when navigating between pages. To opt-into this feature,experimental.typedRoutesneed to be enabled and the project needs to be using TypeScript."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{typedRoutes:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Next.js will generate a link definition in.next/typesthat contains information about all existing routes in your application, which TypeScript can then use to provide feedback in your editor about invalid links. Currently, experimental support includes any string literal, including dynamic segments. For non-literal strings, you currently need to manually cast thehrefwithas Route:"
        },
        {
          "type": "code",
          "code": "importtype{ Route }from'next';importLinkfrom'next/link'// No TypeScript errors if href is a valid route<Linkhref=\"/about\"/><Linkhref=\"/blog/nextjs\"/><Linkhref={`/blog/${slug}`} /><Linkhref={('/blog'+slug)asRoute} />// TypeScript errors if href is not a valid route<Linkhref=\"/aboot\"/>"
        },
        {
          "type": "p",
          "text": "To accepthrefin a custom component wrappingnext/link, use a generic:"
        },
        {
          "type": "code",
          "code": "importtype{ Route }from'next'importLinkfrom'next/link'functionCard<Textendsstring>({ href }:{ href:Route<T>|URL}) {return(<Linkhref={href}><div>My Card</div></Link>)}"
        },
        {
          "type": "p",
          "text": "How does it work? When runningnext devornext build, Next.js generates a hidden.d.tsfile inside.nextthat contains information about all existing routes in your application (all valid routes as thehreftype ofLink). This.d.tsfile is included intsconfig.jsonand the TypeScript compiler will check that.d.tsand provide feedback in your editor about invalid links."
        },
        {
          "type": "p",
          "text": "To use anasyncServer Component with TypeScript, ensure you are using TypeScript5.1.3or higher and@types/react18.2.8or higher. If you are using an older version of TypeScript, you may see a'Promise<Element>' is not a valid JSX elementtype error. Updating to the latest version of TypeScript and@types/reactshould resolve this issue."
        },
        {
          "type": "p",
          "text": "Sincev10.2.1Next.js supportsincremental type checkingwhen enabled in yourtsconfig.json, this can help speed up type checking in larger applications."
        },
        {
          "type": "p",
          "text": "Next.js fails yourproduction build(next build) when TypeScript errors are present in your project. If you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step. If disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous. Opennext.config.tsand enable theignoreBuildErrorsoption in thetypescriptconfig:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={typescript:{// !! WARN !!// Dangerously allow production builds to successfully complete even if// your project has type errors.// !! WARN !!ignoreBuildErrors:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Good to know: You can runtsc --noEmitto check for TypeScript errors yourself before building. This is useful for CI/CD pipelines where you'd like to check for TypeScript errors before deploying."
        },
        {
          "type": "p",
          "text": "When you need to declare custom types, you might be tempted to modifynext-env.d.ts. However, this file is automatically generated, so any changes you make will be overwritten. Instead, you should create a new file, let's call itnew-types.d.ts, and reference it in yourtsconfig.json:"
        },
        {
          "type": "code",
          "code": "{\"compilerOptions\":{\"skipLibCheck\":true//...truncated...},\"include\":[\"new-types.d.ts\",\"next-env.d.ts\",\".next/types/**/*.ts\",\"**/*.ts\",\"**/*.tsx\"],\"exclude\":[\"node_modules\"]}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/create-next-app",
      "title": "CLI: create-next-app | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Thecreate-next-appCLI allow you to create a new Next.js application using the default template or anexamplefrom a public GitHub repository. It is the easiest way to get started with Next.js. Basic usage:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest[project-name] [options]"
        },
        {
          "type": "p",
          "text": "The following options are available:"
        },
        {
          "type": "p",
          "text": "To create a new app using the default template, run the following command in your terminal:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest"
        },
        {
          "type": "p",
          "text": "You will then be asked the following prompts:"
        },
        {
          "type": "code",
          "code": "What is your project named?  my-appWould you like to use TypeScript?  No / YesWould you like to use ESLint?  No / YesWould you like to use Tailwind CSS?  No / YesWould you like your code inside a `src/` directory?  No / YesWould you like to use App Router? (recommended)  No / YesWould you like to use Turbopack for `next dev`?  No / YesWould you like to customize the import alias (`@/*` by default)?  No / Yes"
        },
        {
          "type": "p",
          "text": "Once you've answered the prompts, a new project will be created with your chosen configuration."
        },
        {
          "type": "p",
          "text": "To create a new app using an official Next.js example, use the--exampleflag. For example:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest--example[example-name] [your-project-name]"
        },
        {
          "type": "p",
          "text": "You can view a list of all available examples along with setup instructions in theNext.js repository."
        },
        {
          "type": "p",
          "text": "To create a new app using any public GitHub example, use the--exampleoption with the GitHub repo's URL. For example:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest--example\"https://github.com/.../\"[your-project-name]"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/directives",
      "title": "API Reference: Directives | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The following directives are available:"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/directives/use-cache",
      "title": "Directives: use cache | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theuse cachedirective designates a component and/or a function to be cached. It can be used at the top of a file to indicate that all exports in the file are cacheable, or inline at the top of a function or component to inform Next.js the return value should be cached and reused for subsequent requests. This is an experimental Next.js feature, and not a native React feature likeuse clientoruse server."
        },
        {
          "type": "p",
          "text": "Enable support for theuse cachedirective with thedynamicIOflag in yournext.config.tsfile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{dynamicIO:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Then, you can use theuse cachedirective at the file, component, or function level:"
        },
        {
          "type": "code",
          "code": "// File level'use cache'exportdefaultasyncfunctionPage() {// ...}// Component levelexportasyncfunctionMyComponent() {'use cache'return<></>}// Function levelexportasyncfunctiongetData() {'use cache'constdata=awaitfetch('/api/data')returndata}"
        },
        {
          "type": "list",
          "items": [
            "use cacheis an experimental Next.js feature, and not a native React feature likeuse clientoruse server.",
            "Anyserializablearguments (or props) passed to the cached function, as well as any serializable values it reads from the parent scope, will be converted to a format like JSON and automatically become a part of the cache key.",
            "Any non-serializable arguments, props, or closed-over values will turn into opaque references inside the cached function, and can be only passed through and not inspected nor modified. These non-serializable values will be filled in at the request time and won't become a part of the cache key.For example, a cached function can take in JSX as achildrenprop and return<div>{children}</div>, but it won't be able to introspect the actualchildrenobject.",
            "For example, a cached function can take in JSX as achildrenprop and return<div>{children}</div>, but it won't be able to introspect the actualchildrenobject.",
            "The return value of the cacheable function must also be serializable. This ensures that the cached data can be stored and retrieved correctly.",
            "Functions that use theuse cachedirective must not have any side-effects, such as modifying state, directly manipulating the DOM, or setting timers to execute code at intervals.",
            "If used alongsidePartial Prerendering, segments that haveuse cachewill be prerendered as part of the static HTML shell.",
            "Theuse cachedirective will be available separately from thedynamicIOflag in the future.",
            "Unlikeunstable_cachewhich only supports JSON data,use cachecan cache any serializable data React can render, including the render output of components."
          ]
        },
        {
          "type": "p",
          "text": "To prerender an entire route, adduse cacheto the topboththelayoutandpagefiles. Each of these segments are treated as separate entry points in your application, and will be cached independently."
        },
        {
          "type": "code",
          "code": "'use cache'import{ unstable_cacheLifeascacheLife }from'next/cache'exportdefaultfunctionLayout({ children }:{ children:ReactNode}) {return<div>{children}</div>}"
        },
        {
          "type": "p",
          "text": "Any components imported and nested inpagefile will inherit the cache behavior ofpage."
        },
        {
          "type": "code",
          "code": "'use cache'import{ unstable_cacheLifeascacheLife }from'next/cache'asyncfunctionUsers() {constusers=awaitfetch('/api/users')// loop through users}exportdefaultfunctionPage() {return(<main><Users/></main>)}"
        },
        {
          "type": "p",
          "text": "This is recommended for applications that previously used theexport const dynamic = \"force-static\"option, and will ensure the entire route is prerendered."
        },
        {
          "type": "p",
          "text": "You can useuse cacheat the component level to cache any fetches or computations performed within that component. When you reuse the component throughout your application it can share the same cache entry as long as the props maintain the same structure. The props are serialized and form part of the cache key, and the cache entry will be reused as long as the serialized props produce the same value in each instance."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionBookings({ type='haircut'}:BookingsProps) {'use cache'asyncfunctiongetBookingsData() {constdata=awaitfetch(`/api/bookings?type=${encodeURIComponent(type)}`)returndata}return//...}interfaceBookingsProps{type:string}"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionBookings({ type='haircut'}) {'use cache'asyncfunctiongetBookingsData() {constdata=awaitfetch(`/api/bookings?type=${encodeURIComponent(type)}`)returndata}return//...}"
        },
        {
          "type": "p",
          "text": "Since you can adduse cacheto any asynchronous function, you aren't limited to caching components or routes only. You might want to cache a network request or database query or compute something that is very slow. By addinguse cacheto a function containing this type of work it becomes cacheable, and when reused, will share the same cache entry."
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongetData() {'use cache'constdata=awaitfetch('/api/data')returndata}"
        },
        {
          "type": "p",
          "text": "By default, Next.js sets arevalidation periodof 15 minuteswhen you use theuse cachedirective. Next.js sets a near-infinite expiration duration, meaning it's suitable for content that doesn't need frequent updates. While this revalidation period may be useful for content you don't expect to change often, you can use thecacheLifeandcacheTagAPIs to configure the cache behavior:"
        },
        {
          "type": "list",
          "items": [
            "cacheLife: For time-based revalidation periods.",
            "cacheTag: For on-demand revalidation."
          ]
        },
        {
          "type": "p",
          "text": "Both of these APIs integrate across the client and server caching layers, meaning you can configure your caching semantics in one place and have them apply everywhere. See thecacheLifeandcacheTagdocs for more information."
        },
        {
          "type": "p",
          "text": "If you need to pass non-serializable arguments to a cacheable function, you can pass them aschildren. This means thechildrenreference can change without affecting the cache entry."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constuncachedData=awaitgetData()return(<CacheComponent><DynamicComponentdata={uncachedData} /></CacheComponent>)}asyncfunctionCacheComponent({ children }) {'use cache'constcachedData=awaitfetch('/api/cached-data')return(<div><PrerenderedComponentdata={cachedData} />{children}</div>)}"
        },
        {
          "type": "p",
          "text": "You can also pass Server Actions through cached components to Client Components without invoking them inside the cacheable function."
        },
        {
          "type": "code",
          "code": "importClientComponentfrom'./ClientComponent';exportdefaultasyncfunctionPage() {constperformUpdate=async()=>{\"use server\"// Perform some server-side updateawaitdb.update(...);};return<CacheComponentperformUpdate={performUpdate} />;}asyncfunctionCachedComponent({ performUpdate }) {\"use cache\"// Do not call performUpdate herereturn<ClientComponentaction={performUpdate} />;}"
        },
        {
          "type": "code",
          "code": "'use client'exportdefaultfunctionClientComponent({ action }) {return<buttononClick={action}>Update</button>}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/directives/use-client",
      "title": "Directives: use client | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theuse clientdirective designates a component to be rendered on theclient sideand should be used when creating interactive user interfaces (UI) that require client-side JavaScript capabilities, such as state management, event handling, and access to browser APIs. This is a React feature."
        },
        {
          "type": "p",
          "text": "To designate a component as a Client Component, add theuse clientdirectiveat the top of the file, before any imports:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useState }from'react'exportdefaultfunctionCounter() {const[count,setCount]=useState(0)return(<div><p>Count: {count}</p><buttononClick={()=>setCount(count+1)}>Increment</button></div>)}"
        },
        {
          "type": "p",
          "text": "Combining Server and Client Components allows you to build applications that are both performant and interactive:"
        },
        {
          "type": "list",
          "items": [
            "Server Components: Use for static content, data fetching, and SEO-friendly elements.",
            "Client Components: Use for interactive elements that require state, effects, or browser APIs.",
            "Component composition: Nest Client Components within Server Components as needed for a clear separation of server and client logic."
          ]
        },
        {
          "type": "p",
          "text": "In the following example:"
        },
        {
          "type": "list",
          "items": [
            "Headeris a Server Component handling static content.",
            "Counteris a Client Component enabling interactivity within the page."
          ]
        },
        {
          "type": "code",
          "code": "importHeaderfrom'./header'importCounterfrom'./counter'// This is a Client ComponentexportdefaultfunctionPage() {return(<div><Header/><Counter/></div>)}"
        },
        {
          "type": "p",
          "text": "See theReact documentationfor more information onuse client."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/directives/use-server",
      "title": "Directives: use server | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theuse serverdirective designates a function or file to be executed on theserver side. It can be used at the top of a file to indicate that all functions in the file are server-side, or inline at the top of a function to mark the function as aServer Function. This is a React feature."
        },
        {
          "type": "p",
          "text": "The following example shows a file with ause serverdirective at the top. All functions in the file are executed on the server."
        },
        {
          "type": "code",
          "code": "'use server'import{ db }from'@/lib/db'// Your database clientexportasyncfunctioncreateUser(data:{ name:string; email:string}) {constuser=awaitdb.user.create({ data })returnuser}"
        },
        {
          "type": "p",
          "text": "To use Server Functions in Client Components you need to create your Server Functions in a dedicated file using theuse serverdirective at the top of the file. These Server Functions can then be imported into Client and Server Components and executed. Assuming you have afetchUsersServer Function inactions.ts:"
        },
        {
          "type": "code",
          "code": "'use server'import{ db }from'@/lib/db'// Your database clientexportasyncfunctionfetchUsers() {constusers=awaitdb.user.findMany()returnusers}"
        },
        {
          "type": "p",
          "text": "Then you can import thefetchUsersServer Function into a Client Component and execute it on the client-side."
        },
        {
          "type": "code",
          "code": "'use client'import{ fetchUsers }from'../actions'exportdefaultfunctionMyButton() {return<buttononClick={()=>fetchUsers()}>Fetch Users</button>}"
        },
        {
          "type": "p",
          "text": "In the following example,use serveris used inline at the top of a function to mark it as aServer Function:"
        },
        {
          "type": "code",
          "code": "import{ db }from'@/lib/db'// Your database clientexportdefaultfunctionUserList() {asyncfunctionfetchUsers() {'use server'constusers=awaitdb.user.findMany()returnusers}return<buttononClick={()=>fetchUsers()}>Fetch Users</button>}"
        },
        {
          "type": "p",
          "text": "When using theuse serverdirective, it's important to ensure that all server-side logic is secure and that sensitive data remains protected."
        },
        {
          "type": "p",
          "text": "Always authenticate and authorize users before performing sensitive server-side operations."
        },
        {
          "type": "code",
          "code": "'use server'import{ db }from'@/lib/db'// Your database clientimport{ authenticate }from'@/lib/auth'// Your authentication libraryexportasyncfunctioncreateUser(data:{ name:string; email:string},token:string) {constuser=authenticate(token)if(!user) {thrownewError('Unauthorized')}constnewUser=awaitdb.user.create({ data })returnnewUser}"
        },
        {
          "type": "p",
          "text": "See theReact documentationfor more information onuse server."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/edge",
      "title": "API Reference: Edge Runtime | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The Next.js Edge Runtime is used for Middleware and supports the following APIs:"
        },
        {
          "type": "list",
          "items": ["AsyncLocalStorage"]
        },
        {
          "type": "p",
          "text": "You can useprocess.envto accessEnvironment Variablesfor bothnext devandnext build."
        },
        {
          "type": "p",
          "text": "The Edge Runtime has some restrictions including:"
        },
        {
          "type": "list",
          "items": [
            "Native Node.js APIsare not supported. For example, you can't read or write to the filesystem.",
            "node_modulescanbe used, as long as they implement ES Modules and do not use native Node.js APIs.",
            "Callingrequiredirectly isnot allowed. Use ES Modules instead."
          ]
        },
        {
          "type": "p",
          "text": "The following JavaScript language features are disabled, andwill not work:"
        },
        {
          "type": "p",
          "text": "In rare cases, your code could contain (or import) some dynamic code evaluation statements whichcan not be reached at runtimeand which can not be removed by treeshaking.\nYou can relax the check to allow specific files with your Middleware configuration:"
        },
        {
          "type": "code",
          "code": "exportconstconfig={unstable_allowDynamic:[// allows a single file'/lib/utilities.js',// use a glob to allow anything in the function-bind 3rd party module'/node_modules/function-bind/**',],}"
        },
        {
          "type": "p",
          "text": "unstable_allowDynamicis aglob, or an array of globs, ignoring dynamic code evaluation for specific files. The globs are relative to your application root folder. Be warned that if these statements are executed on the Edge,they will throw and cause a runtime error."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions",
      "title": "API Reference: File Conventions | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/default",
      "title": "File Conventions: default.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Thedefault.jsfile is used to render a fallback withinParallel Routeswhen Next.js cannot recover aslot'sactive state after a full-page load. Duringsoft navigation, Next.js keeps track of the activestate(subpage) for each slot. However, for hard navigations (full-page load), Next.js cannot recover the active state. In this case, adefault.jsfile can be rendered for subpages that don't match the current URL. Consider the following folder structure. The@teamslot has asettingspage, but@analyticsdoes not."
        },
        {
          "type": "p",
          "text": "When navigating to/settings, the@teamslot will render thesettingspage while maintaining the currently active page for the@analyticsslot. On refresh, Next.js will render adefault.jsfor@analytics. Ifdefault.jsdoesn't exist, a404is rendered instead. Additionally, sincechildrenis an implicit slot, you also need to create adefault.jsfile to render a fallback forchildrenwhen Next.js cannot recover the active state of the parent page."
        },
        {
          "type": "p",
          "text": "A promise that resolves to an object containing thedynamic route parametersfrom the root segment down to the slot's subpages. For example:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionDefault({params,}:{params:Promise<{ artist:string}>}) {constartist=(awaitparams).artist}"
        },
        {
          "type": "list",
          "items": [
            "Since theparamsprop is a promise. You must useasync/awaitor React'susefunction to access the values.In version 14 and earlier,paramswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "In version 14 and earlier,paramswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/error",
      "title": "File Conventions: error.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Anerrorfile allows you to handle unexpected runtime errors and display fallback UI."
        },
        {
          "type": "code",
          "code": "'use client'// Error boundaries must be Client Componentsimport{ useEffect }from'react'exportdefaultfunctionError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {useEffect(()=>{// Log the error to an error reporting serviceconsole.error(error)},[error])return(<div><h2>Something went wrong!</h2><buttononClick={// Attempt to recover by trying to re-render the segment()=>reset()}>Try again</button></div>)}"
        },
        {
          "type": "p",
          "text": "error.jswraps a route segment and its nested children in aReact Error Boundary. When an error throws within the boundary, theerrorcomponent shows as the fallback UI."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "TheReact DevToolsallow you to toggle error boundaries to test error states."
          ]
        },
        {
          "type": "p",
          "text": "An instance of anErrorobject forwarded to theerror.jsClient Component."
        },
        {
          "type": "p",
          "text": "Good to know:During development, theErrorobject forwarded to the client will be serialized and include themessageof the original error for easier debugging. However,this behavior is different in productionto avoid leaking potentially sensitive details included in the error to the client."
        },
        {
          "type": "list",
          "items": [
            "Errors forwarded from Client Components show the originalErrormessage.",
            "Errors forwarded from Server Components show a generic message with an identifier. This is to prevent leaking sensitive details. You can use the identifier, undererrors.digest, to match the corresponding server-side logs."
          ]
        },
        {
          "type": "p",
          "text": "An automatically generated hash of the error thrown. It can be used to match the corresponding error in server-side logs."
        },
        {
          "type": "p",
          "text": "The cause of an error can sometimes be temporary. In these cases, trying again might resolve the issue. An error component can use thereset()function to prompt the user to attempt to recover from the error. When executed, the function will try to re-render the error boundary's contents. If successful, the fallback error component is replaced with the result of the re-render."
        },
        {
          "type": "code",
          "code": "'use client'// Error boundaries must be Client ComponentsexportdefaultfunctionError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {return(<div><h2>Something went wrong!</h2><buttononClick={()=>reset()}>Try again</button></div>)}"
        },
        {
          "type": "p",
          "text": "While less common, you can handle errors in the root layout or template usingapp/global-error.js, located in the root app directory, even when leveraginginternationalization. Global error UI must define its own<html>and<body>tags. This file replaces the root layout or template when active."
        },
        {
          "type": "code",
          "code": "'use client'// Error boundaries must be Client ComponentsexportdefaultfunctionGlobalError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {return(// global-error must include html and body tags<html><body><h2>Something went wrong!</h2><buttononClick={()=>reset()}>Try again</button></body></html>)}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "global-error.jsis only enabled in production. In development, our error overlay will show instead."
          ]
        },
        {
          "type": "p",
          "text": "Thenot-foundfile shows UI when calling thenotFound()function within a route segment."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/forbidden",
      "title": "File Conventions: forbidden.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theforbiddenfile is used to render UI when theforbiddenfunction is invoked during authentication. Along with allowing you to customize the UI, Next.js will return a403status code."
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionForbidden() {return(<div><h2>Forbidden</h2><p>You are not authorized to access this resource.</p><Linkhref=\"/\">Return Home</Link></div>)}"
        },
        {
          "type": "p",
          "text": "forbidden.jscomponents do not accept any props."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation",
      "title": "File Conventions: instrumentation.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theinstrumentation.js|tsfile is used to integrate observability tools into your application, allowing you to track the performance and behavior, and to debug issues in production. To use it, place the file in therootof your application or inside asrcfolderif using one."
        },
        {
          "type": "p",
          "text": "The file exports aregisterfunction that is calledoncewhen a new Next.js server instance is initiated.registercan be an async function."
        },
        {
          "type": "code",
          "code": "import{ registerOTel }from'@vercel/otel'exportfunctionregister() {registerOTel('next-app')}"
        },
        {
          "type": "p",
          "text": "You can optionally export anonRequestErrorfunction to trackservererrors to any custom observability provider."
        },
        {
          "type": "list",
          "items": [
            "If you're running any async tasks inonRequestError, make sure they're awaited.onRequestErrorwill be triggered when the Next.js server captures the error.",
            "Theerrorinstance might not be the original error instance thrown, as it may be processed by React if encountered during Server Components rendering. If this happens, you can usedigestproperty on an error to identify the actual error type."
          ]
        },
        {
          "type": "code",
          "code": "import{typeInstrumentation }from'next'exportconstonRequestError:Instrumentation.onRequestError=async(err,request,context)=>{awaitfetch('https://.../report-error',{method:'POST',body:JSON.stringify({message:err.message,request,context,}),headers:{'Content-Type':'application/json',},})}"
        },
        {
          "type": "p",
          "text": "The function accepts three parameters:error,request, andcontext."
        },
        {
          "type": "code",
          "code": "exportfunctiononRequestError(error:{ digest:string}&Error,request:{path:string// resource path, e.g. /blog?name=foomethod:string// request method. e.g. GET, POST, etcheaders:{ [key:string]:string}},context:{routerKind:'Pages Router'|'App Router'// the router typeroutePath:string// the route file path, e.g. /app/blog/[dynamic]routeType:'render'|'route'|'action'|'middleware'// the context in which the error occurredrenderSource:|'react-server-components'|'react-server-components-payload'|'server-rendering'revalidateReason:'on-demand'|'stale'|undefined// undefined is a normal request without revalidationrenderType:'dynamic'|'dynamic-resume'// 'dynamic-resume' for PPR}):void|Promise<void>"
        },
        {
          "type": "list",
          "items": [
            "error: The caught error itself (type is alwaysError), and adigestproperty which is the unique ID of the error.",
            "request: Read-only request information associated with the error.",
            "context: The context in which the error occurred. This can be the type of router (App or Pages Router), and/or (Server Components ('render'), Route Handlers ('route'), Server Actions ('action'), or Middleware ('middleware'))."
          ]
        },
        {
          "type": "p",
          "text": "Theinstrumentation.jsfile works in both the Node.js and Edge runtime, however, you can useprocess.env.NEXT_RUNTIMEto target a specific runtime."
        },
        {
          "type": "code",
          "code": "exportfunctionregister() {if(process.env.NEXT_RUNTIME==='edge') {returnrequire('./register.edge')}else{returnrequire('./register.node')}}exportfunctiononRequestError() {if(process.env.NEXT_RUNTIME==='edge') {returnrequire('./on-request-error.edge')}else{returnrequire('./on-request-error.node')}}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/layout",
      "title": "File Conventions: layout.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Thelayoutfile is used to define a layout in your Next.js application."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionDashboardLayout({children,}:{children:React.ReactNode}) {return<section>{children}</section>}"
        },
        {
          "type": "p",
          "text": "Aroot layoutis the top-most layout in the rootappdirectory. It is used to define the<html>and<body>tags and other globally shared UI."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "Layout components should accept and use achildrenprop. During rendering,childrenwill be populated with the route segments the layout is wrapping. These will primarily be the component of a childLayout(if it exists) orPage, but could also be other special files likeLoadingorErrorwhen applicable."
        },
        {
          "type": "p",
          "text": "A promise that resolves to an object containing thedynamic route parametersobject from the root segment down to that layout."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionLayout({params,}:{params:Promise<{ team:string}>}) {constteam=(awaitparams).team}"
        },
        {
          "type": "list",
          "items": [
            "Since theparamsprop is a promise. You must useasync/awaitor React'susefunction to access the values.In version 14 and earlier,paramswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "In version 14 and earlier,paramswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future."
          ]
        },
        {
          "type": "p",
          "text": "Theappdirectorymustinclude a rootapp/layout.js."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body>{children}</body></html>)}"
        },
        {
          "type": "list",
          "items": [
            "The root layoutmustdefine<html>and<body>tags.You shouldnotmanually add<head>tags such as<title>and<meta>to root layouts. Instead, you should use theMetadata APIwhich automatically handles advanced requirements such as streaming and de-duplicating<head>elements.",
            "You shouldnotmanually add<head>tags such as<title>and<meta>to root layouts. Instead, you should use theMetadata APIwhich automatically handles advanced requirements such as streaming and de-duplicating<head>elements.",
            "You can useroute groupsto create multiple root layouts.Navigatingacross multiple root layoutswill cause afull page load(as opposed to a client-side navigation). For example, navigating from/cartthat usesapp/(shop)/layout.jsto/blogthat usesapp/(marketing)/layout.jswill cause a full page load. Thisonlyapplies to multiple root layouts.",
            "Navigatingacross multiple root layoutswill cause afull page load(as opposed to a client-side navigation). For example, navigating from/cartthat usesapp/(shop)/layout.jsto/blogthat usesapp/(marketing)/layout.jswill cause a full page load. Thisonlyapplies to multiple root layouts."
          ]
        },
        {
          "type": "p",
          "text": "UnlikePages, Layout componentsdo notreceive thesearchParamsprop. This is because a shared layout isnot re-rendered during navigationwhich could lead to stalesearchParamsbetween navigations. When using client-side navigation, Next.js automatically only renders the part of the page below the common layout between two routes. For example, in the following directory structure,dashboard/layout.tsxis the common layout for both/dashboard/settingsand/dashboard/analytics:"
        },
        {
          "type": "p",
          "text": "When navigating from/dashboard/settingsto/dashboard/analytics,page.tsxin/dashboard/analyticswill rerender on the server, whiledashboard/layout.tsxwillnotrerender because it's a common UI shared between the two routes. This performance optimization allows navigation between pages that share a layout to be quicker as only the data fetching and rendering for the page has to run, instead of the entire route that could include shared layouts that fetch their own data. Becausedashboard/layout.tsxdoesn't re-render, thesearchParamsprop in the layout Server Component might becomestaleafter navigation. Instead, use the PagesearchParamsprop or theuseSearchParamshook in a Client Component within the layout, which is rerendered on the client with the latestsearchParams."
        },
        {
          "type": "p",
          "text": "Layouts cannot accesspathname. This is because layouts are Server Components by default, anddon't rerender during client-side navigation, which could lead topathnamebecoming stale between navigations. To prevent staleness, Next.js would need to refetch all segments of a route, losing the benefits of caching and increasing theRSC payloadsize on navigation. Instead, you can extract the logic that depends on pathname into a Client Component and import it into your layouts. Since Client Components rerender (but are not refetched) during navigation, you can use Next.js hooks such asusePathnameto access the current pathname and prevent staleness."
        },
        {
          "type": "code",
          "code": "import{ ClientComponent }from'@/app/ui/ClientComponent'exportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {return(<><ClientComponent/>{/* Other Layout UI */}<main>{children}</main></>)}"
        },
        {
          "type": "p",
          "text": "Commonpathnamepatterns can also be implemented withparamsprop. See theexamplessection for more information."
        },
        {
          "type": "p",
          "text": "Usingdynamic route segments, you can display or fetch specific content based on theparamsprop."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionDashboardLayout({children,params,}:{children:React.ReactNodeparams:Promise<{ team:string}>}) {const{team}=awaitparamsreturn(<section><header><h1>Welcome to {team}'s Dashboard</h1></header><main>{children}</main></section>)}"
        },
        {
          "type": "p",
          "text": "To useparamsin a Client Component (which cannot beasync), you can use React'susefunction to read the promise:"
        },
        {
          "type": "code",
          "code": "'use client'import{ use }from'react'exportdefaultfunctionPage({params,}:{params:Promise<{ slug:string}>}) {const{slug}=use(params)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/loading",
      "title": "File Conventions: loading.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Aloadingfile can create instant loading states built onSuspense. By default, this file is aServer Component- but can also be used as a Client Component through the\"use client\"directive."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionLoading() {// Or a custom loading skeleton componentreturn<p>Loading...</p>}"
        },
        {
          "type": "p",
          "text": "Loading UI components do not accept any parameters."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "While designing loading UI, you may find it helpful to use theReact Developer Toolsto manually toggle Suspense boundaries."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/mdx-components",
      "title": "File Conventions: mdx-components.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Themdx-components.js|tsxfile isrequiredto use@next/mdxwith App Routerand will not work without it. Additionally, you can use it tocustomize styles. Use the filemdx-components.tsx(or.js) in the root of your project to define MDX Components. For example, at the same level aspagesorapp, or insidesrcif applicable."
        },
        {
          "type": "code",
          "code": "importtype{ MDXComponents }from'mdx/types'exportfunctionuseMDXComponents(components:MDXComponents):MDXComponents{return{...components,}}"
        },
        {
          "type": "p",
          "text": "The file must export a single function, either as a default export or nameduseMDXComponents."
        },
        {
          "type": "code",
          "code": "importtype{ MDXComponents }from'mdx/types'exportfunctionuseMDXComponents(components:MDXComponents):MDXComponents{return{...components,}}"
        },
        {
          "type": "p",
          "text": "When defining MDX Components, the export function accepts a single parameter,components. This parameter is an instance ofMDXComponents."
        },
        {
          "type": "list",
          "items": [
            "The key is the name of the HTML element to override.",
            "The value is the component to render instead."
          ]
        },
        {
          "type": "p",
          "text": "Good to know: Remember to pass all other components (i.e....components) that do not have overrides."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata",
      "title": "File Conventions: Metadata Files | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This section of the docs coversMetadata file conventions. File-based metadata can be defined by adding special metadata files to route segments. Each file convention can be defined using a static file (e.g.opengraph-image.jpg), or a dynamic variant that uses code to generate the file (e.g.opengraph-image.js). Once a file is defined, Next.js will automatically serve the file (with hashes in production for caching) and update the relevant head elements with the correct metadata, such as the asset's URL, file type, and image size."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Special Route Handlers likesitemap.ts,opengraph-image.tsx, andicon.tsx, and othermetadata filesare cached by default.",
            "If using along withmiddleware.ts,configure the matcherto exclude the metadata files."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/app-icons",
      "title": "Metadata Files: favicon, icon, and apple-icon | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Thefavicon,icon, orapple-iconfile conventions allow you to set icons for your application. They are useful for adding app icons that appear in places like web browser tabs, phone home screens, and search engine results. There are two ways to set app icons:"
        },
        {
          "type": "list",
          "items": [
            "Using image files (.ico, .jpg, .png)",
            "Using code to generate an icon (.js, .ts, .tsx)"
          ]
        },
        {
          "type": "p",
          "text": "Use an image file to set an app icon by placing afavicon,icon, orapple-iconimage file within your/appdirectory.\nThefaviconimage can only be located in the top level ofapp/. Next.js will evaluate the file and automatically add the appropriate tags to your app's<head>element."
        },
        {
          "type": "p",
          "text": "Add afavicon.icoimage file to the root/approute segment."
        },
        {
          "type": "code",
          "code": "<linkrel=\"icon\"href=\"/favicon.ico\"sizes=\"any\"/>"
        },
        {
          "type": "p",
          "text": "Add anicon.(ico|jpg|jpeg|png|svg)image file."
        },
        {
          "type": "code",
          "code": "<linkrel=\"icon\"href=\"/icon?<generated>\"type=\"image/<generated>\"sizes=\"<generated>\"/>"
        },
        {
          "type": "p",
          "text": "Add anapple-icon.(jpg|jpeg|png)image file."
        },
        {
          "type": "code",
          "code": "<linkrel=\"apple-touch-icon\"href=\"/apple-icon?<generated>\"type=\"image/<generated>\"sizes=\"<generated>\"/>"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "You can set multiple icons by adding a number suffix to the file name. For example,icon1.png,icon2.png, etc. Numbered files will sort lexically.",
            "Favicons can only be set in the root/appsegment. If you need more granularity, you can useicon.",
            "The appropriate<link>tags and attributes such asrel,href,type, andsizesare determined by the icon type and metadata of the evaluated file.",
            "For example, a 32 by 32px.pngfile will havetype=\"image/png\"andsizes=\"32x32\"attributes.",
            "sizes=\"any\"is added to icons when the extension is.svgor the image size of the file is not determined. More details in thisfavicon handbook."
          ]
        },
        {
          "type": "p",
          "text": "In addition to usingliteral image files, you can programmaticallygenerateicons using code. Generate an app icon by creating aniconorapple-iconroute that default exports a function."
        },
        {
          "type": "p",
          "text": "The easiest way to generate an icon is to use theImageResponseAPI fromnext/og."
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'// Image metadataexportconstsize={width:32,height:32,}exportconstcontentType='image/png'// Image generationexportdefaultfunctionIcon() {returnnewImageResponse((// ImageResponse JSX element<divstyle={{fontSize:24,background:'black',width:'100%',height:'100%',display:'flex',alignItems:'center',justifyContent:'center',color:'white',}}>A</div>),// ImageResponse options{// For convenience, we can re-use the exported icons size metadata// config to also set the ImageResponse's width and height....size,})}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"icon\"href=\"/icon?<generated>\"type=\"image/png\"sizes=\"32x32\"/>"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "By default, generated icons arestatically optimized(generated at build time and cached) unless they useDynamic APIsor uncached data.",
            "You can generate multiple icons in the same file usinggenerateImageMetadata.",
            "You cannot generate afaviconicon. Useiconor afavicon.icofile instead.",
            "App icons are special Route Handlers that is cached by default unless it uses aDynamic APIordynamic configoption."
          ]
        },
        {
          "type": "p",
          "text": "The default export function receives the following props:"
        },
        {
          "type": "p",
          "text": "An object containing thedynamic route parametersobject from the root segment down to the segmenticonorapple-iconis colocated in."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionIcon({ params }:{ params:{ slug:string} }) {// ...}"
        },
        {
          "type": "p",
          "text": "The default export function should return aBlob|ArrayBuffer|TypedArray|DataView|ReadableStream|Response."
        },
        {
          "type": "p",
          "text": "Good to know:ImageResponsesatisfies this return type."
        },
        {
          "type": "p",
          "text": "You can optionally configure the icon's metadata by exportingsizeandcontentTypevariables from theiconorapple-iconroute."
        },
        {
          "type": "code",
          "code": "exportconstsize={ width:32,height:32}exportdefaultfunctionIcon() {}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"icon\"sizes=\"32x32\"/>"
        },
        {
          "type": "code",
          "code": "exportconstcontentType='image/png'exportdefaultfunctionIcon() {}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"icon\"type=\"image/png\"/>"
        },
        {
          "type": "p",
          "text": "iconandapple-iconare specializedRoute Handlersthat can use the sameroute segment configurationoptions as Pages and Layouts."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/manifest",
      "title": "Metadata Files: manifest.json | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Add or generate amanifest.(json|webmanifest)file that matches theWeb Manifest Specificationin therootofappdirectory to provide information about your web application for the browser."
        },
        {
          "type": "code",
          "code": "{\"name\":\"My Next.js Application\",\"short_name\":\"Next.js App\",\"description\":\"An application built with Next.js\",\"start_url\":\"/\"// ...}"
        },
        {
          "type": "p",
          "text": "Add amanifest.jsormanifest.tsfile that returns aManifestobject."
        },
        {
          "type": "p",
          "text": "Good to know:manifest.jsis special Route Handlers that is cached by default unless it uses aDynamic APIordynamic configoption."
        },
        {
          "type": "code",
          "code": "importtype{ MetadataRoute }from'next'exportdefaultfunctionmanifest():MetadataRoute.Manifest{return{name:'Next.js App',short_name:'Next.js App',description:'Next.js App',start_url:'/',display:'standalone',background_color:'#fff',theme_color:'#fff',icons:[{src:'/favicon.ico',sizes:'any',type:'image/x-icon',},],}}"
        },
        {
          "type": "p",
          "text": "The manifest object contains an extensive list of options that may be updated due to new web standards. For information on all the current options, refer to theMetadataRoute.Manifesttype in your code editor if usingTypeScriptor see theMDNdocs."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image",
      "title": "Metadata Files: opengraph-image and twitter-image | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theopengraph-imageandtwitter-imagefile conventions allow you to set Open Graph and Twitter images for a route segment. They are useful for setting the images that appear on social networks and messaging apps when a user shares a link to your site. There are two ways to set Open Graph and Twitter images:"
        },
        {
          "type": "list",
          "items": [
            "Using image files (.jpg, .png, .gif)",
            "Using code to generate images (.js, .ts, .tsx)"
          ]
        },
        {
          "type": "p",
          "text": "Use an image file to set a route segment's shared image by placing anopengraph-imageortwitter-imageimage file in the segment. Next.js will evaluate the file and automatically add the appropriate tags to your app's<head>element."
        },
        {
          "type": "p",
          "text": "Good to know: Thetwitter-imagefile size must not exceed5MB, and theopengraph-imagefile size must not exceed8MB. If the image file size exceeds these limits, the build will fail."
        },
        {
          "type": "p",
          "text": "Add anopengraph-image.(jpg|jpeg|png|gif)image file to any route segment."
        },
        {
          "type": "code",
          "code": "<metaproperty=\"og:image\"content=\"<generated>\"/><metaproperty=\"og:image:type\"content=\"<generated>\"/><metaproperty=\"og:image:width\"content=\"<generated>\"/><metaproperty=\"og:image:height\"content=\"<generated>\"/>"
        },
        {
          "type": "p",
          "text": "Add atwitter-image.(jpg|jpeg|png|gif)image file to any route segment."
        },
        {
          "type": "code",
          "code": "<metaname=\"twitter:image\"content=\"<generated>\"/><metaname=\"twitter:image:type\"content=\"<generated>\"/><metaname=\"twitter:image:width\"content=\"<generated>\"/><metaname=\"twitter:image:height\"content=\"<generated>\"/>"
        },
        {
          "type": "p",
          "text": "Add an accompanyingopengraph-image.alt.txtfile in the same route segment as theopengraph-image.(jpg|jpeg|png|gif)image it's alt text."
        },
        {
          "type": "code",
          "code": "About Acme"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"og:image:alt\"content=\"About Acme\"/>"
        },
        {
          "type": "p",
          "text": "Add an accompanyingtwitter-image.alt.txtfile in the same route segment as thetwitter-image.(jpg|jpeg|png|gif)image it's alt text."
        },
        {
          "type": "code",
          "code": "About Acme"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"twitter:image:alt\"content=\"About Acme\"/>"
        },
        {
          "type": "p",
          "text": "In addition to usingliteral image files, you can programmaticallygenerateimages using code. Generate a route segment's shared image by creating anopengraph-imageortwitter-imageroute that default exports a function."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "By default, generated images arestatically optimized(generated at build time and cached) unless they useDynamic APIsor uncached data.",
            "You can generate multiple Images in the same file usinggenerateImageMetadata.",
            "opengraph-image.jsandtwitter-image.jsare special Route Handlers that is cached by default unless it uses aDynamic APIordynamic configoption."
          ]
        },
        {
          "type": "p",
          "text": "The easiest way to generate an image is to use theImageResponseAPI fromnext/og."
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'exportconstruntime='edge'// Image metadataexportconstalt='About Acme'exportconstsize={width:1200,height:630,}exportconstcontentType='image/png'// Image generationexportdefaultasyncfunctionImage() {// FontconstinterSemiBold=fetch(newURL('./Inter-SemiBold.ttf',import.meta.url)).then((res)=>res.arrayBuffer())returnnewImageResponse((// ImageResponse JSX element<divstyle={{fontSize:128,background:'white',width:'100%',height:'100%',display:'flex',alignItems:'center',justifyContent:'center',}}>About Acme</div>),// ImageResponse options{// For convenience, we can re-use the exported opengraph-image// size config to also set the ImageResponse's width and height....size,fonts:[{name:'Inter',data:awaitinterSemiBold,style:'normal',weight:400,},],})}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"og:image\"content=\"<generated>\"/><metaproperty=\"og:image:alt\"content=\"About Acme\"/><metaproperty=\"og:image:type\"content=\"image/png\"/><metaproperty=\"og:image:width\"content=\"1200\"/><metaproperty=\"og:image:height\"content=\"630\"/>"
        },
        {
          "type": "p",
          "text": "The default export function receives the following props:"
        },
        {
          "type": "p",
          "text": "An object containing thedynamic route parametersobject from the root segment down to the segmentopengraph-imageortwitter-imageis colocated in."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionImage({ params }:{ params:{ slug:string} }) {// ...}"
        },
        {
          "type": "p",
          "text": "The default export function should return aBlob|ArrayBuffer|TypedArray|DataView|ReadableStream|Response."
        },
        {
          "type": "p",
          "text": "Good to know:ImageResponsesatisfies this return type."
        },
        {
          "type": "p",
          "text": "You can optionally configure the image's metadata by exportingalt,size, andcontentTypevariables fromopengraph-imageortwitter-imageroute."
        },
        {
          "type": "code",
          "code": "exportconstalt='My images alt text'exportdefaultfunctionImage() {}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"og:image:alt\"content=\"My images alt text\"/>"
        },
        {
          "type": "code",
          "code": "exportconstsize={ width:1200,height:630}exportdefaultfunctionImage() {}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"og:image:width\"content=\"1200\"/><metaproperty=\"og:image:height\"content=\"630\"/>"
        },
        {
          "type": "code",
          "code": "exportconstcontentType='image/png'exportdefaultfunctionImage() {}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"og:image:type\"content=\"image/png\"/>"
        },
        {
          "type": "p",
          "text": "opengraph-imageandtwitter-imageare specializedRoute Handlersthat can use the sameroute segment configurationoptions as Pages and Layouts."
        },
        {
          "type": "p",
          "text": "This example uses theparamsobject and external data to generate the image."
        },
        {
          "type": "p",
          "text": "Good to know:\nBy default, this generated image will bestatically optimized. You can configure the individualfetchoptionsor route segmentsoptionsto change this behavior."
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'exportconstalt='About Acme'exportconstsize={width:1200,height:630,}exportconstcontentType='image/png'exportdefaultasyncfunctionImage({ params }:{ params:{ slug:string} }) {constpost=awaitfetch(`https://.../posts/${params.slug}`).then((res)=>res.json())returnnewImageResponse((<divstyle={{fontSize:48,background:'white',width:'100%',height:'100%',display:'flex',alignItems:'center',justifyContent:'center',}}>{post.title}</div>),{...size,})}"
        },
        {
          "type": "p",
          "text": "This example uses the Edge runtime to fetch a local image on the file system and passes it as anArrayBufferto thesrcattribute of an<img>element. The local asset should be placed relative to the example source file location."
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'exportconstruntime='edge'exportdefaultasyncfunctionImage() {constlogoSrc=awaitfetch(newURL('./logo.png',import.meta.url)).then((res)=>res.arrayBuffer())returnnewImageResponse((<divstyle={{display:'flex',alignItems:'center',justifyContent:'center',}}><imgsrc={logoSrc}height=\"100\"/></div>))}"
        },
        {
          "type": "p",
          "text": "This example uses the Node.js runtime to fetch a local image on the file system and passes it as anArrayBufferto thesrcattribute of an<img>element. The local asset should be placed relative to the root of your project, rather than the location of the example source file."
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'import{ join }from'node:path'import{ readFile }from'node:fs/promises'exportdefaultasyncfunctionImage() {constlogoData=awaitreadFile(join(process.cwd(),'logo.png'))constlogoSrc=Uint8Array.from(logoData).bufferreturnnewImageResponse((<divstyle={{display:'flex',alignItems:'center',justifyContent:'center',}}><imgsrc={logoSrc}height=\"100\"/></div>))}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/robots",
      "title": "Metadata Files: robots.txt | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Add or generate arobots.txtfile that matches theRobots Exclusion Standardin therootofappdirectory to tell search engine crawlers which URLs they can access on your site."
        },
        {
          "type": "code",
          "code": "User-Agent: *Allow: /Disallow: /private/Sitemap: https://acme.com/sitemap.xml"
        },
        {
          "type": "p",
          "text": "Add arobots.jsorrobots.tsfile that returns aRobotsobject."
        },
        {
          "type": "p",
          "text": "Good to know:robots.jsis a special Route Handlers that is cached by default unless it uses aDynamic APIordynamic configoption."
        },
        {
          "type": "code",
          "code": "importtype{ MetadataRoute }from'next'exportdefaultfunctionrobots():MetadataRoute.Robots{return{rules:{userAgent:'*',allow:'/',disallow:'/private/',},sitemap:'https://acme.com/sitemap.xml',}}"
        },
        {
          "type": "p",
          "text": "Output:"
        },
        {
          "type": "code",
          "code": "User-Agent: *Allow: /Disallow: /private/Sitemap: https://acme.com/sitemap.xml"
        },
        {
          "type": "p",
          "text": "You can customise how individual search engine bots crawl your site by passing an array of user agents to therulesproperty. For example:"
        },
        {
          "type": "code",
          "code": "importtype{ MetadataRoute }from'next'exportdefaultfunctionrobots():MetadataRoute.Robots{return{rules:[{userAgent:'Googlebot',allow:['/'],disallow:'/private/',},{userAgent:['Applebot','Bingbot'],disallow:['/'],},],sitemap:'https://acme.com/sitemap.xml',}}"
        },
        {
          "type": "p",
          "text": "Output:"
        },
        {
          "type": "code",
          "code": "User-Agent: GooglebotAllow: /Disallow: /private/User-Agent: ApplebotDisallow: /User-Agent: BingbotDisallow: /Sitemap: https://acme.com/sitemap.xml"
        },
        {
          "type": "code",
          "code": "typeRobots={rules:|{userAgent?:string|string[]allow?:string|string[]disallow?:string|string[]crawlDelay?:number}|Array<{userAgent:string|string[]allow?:string|string[]disallow?:string|string[]crawlDelay?:number}>sitemap?:string|string[]host?:string}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/sitemap",
      "title": "Metadata Files: sitemap.xml | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "sitemap.(xml|js|ts)is a special file that matches theSitemaps XML formatto help search engine crawlers index your site more efficiently."
        },
        {
          "type": "p",
          "text": "For smaller applications, you can create asitemap.xmlfile and place it in the root of yourappdirectory."
        },
        {
          "type": "code",
          "code": "<urlsetxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"><url><loc>https://acme.com</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>yearly</changefreq><priority>1</priority></url><url><loc>https://acme.com/about</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>monthly</changefreq><priority>0.8</priority></url><url><loc>https://acme.com/blog</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>weekly</changefreq><priority>0.5</priority></url></urlset>"
        },
        {
          "type": "p",
          "text": "You can use thesitemap.(js|ts)file convention to programmaticallygeneratea sitemap by exporting a default function that returns an array of URLs. If using TypeScript, aSitemaptype is available."
        },
        {
          "type": "p",
          "text": "Good to know:sitemap.jsis a special Route Handler that is cached by default unless it uses aDynamic APIordynamic configoption."
        },
        {
          "type": "code",
          "code": "importtype{ MetadataRoute }from'next'exportdefaultfunctionsitemap():MetadataRoute.Sitemap{return[{url:'https://acme.com',lastModified:newDate(),changeFrequency:'yearly',priority:1,},{url:'https://acme.com/about',lastModified:newDate(),changeFrequency:'monthly',priority:0.8,},{url:'https://acme.com/blog',lastModified:newDate(),changeFrequency:'weekly',priority:0.5,},]}"
        },
        {
          "type": "p",
          "text": "Output:"
        },
        {
          "type": "code",
          "code": "<urlsetxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"><url><loc>https://acme.com</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>yearly</changefreq><priority>1</priority></url><url><loc>https://acme.com/about</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>monthly</changefreq><priority>0.8</priority></url><url><loc>https://acme.com/blog</loc><lastmod>2023-04-06T15:02:24.021Z</lastmod><changefreq>weekly</changefreq><priority>0.5</priority></url></urlset>"
        },
        {
          "type": "p",
          "text": "You can useimagesproperty to create image sitemaps. Learn more details in theGoogle Developer Docs."
        },
        {
          "type": "code",
          "code": "importtype{ MetadataRoute }from'next'exportdefaultfunctionsitemap():MetadataRoute.Sitemap{return[{url:'https://example.com',lastModified:'2021-01-01',changeFrequency:'weekly',priority:0.5,images:['https://example.com/image.jpg'],},]}"
        },
        {
          "type": "p",
          "text": "Output:"
        },
        {
          "type": "code",
          "code": "<?xmlversion=\"1.0\"encoding=\"UTF-8\"?><urlsetxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"><url><loc>https://example.com</loc><image:image><image:loc>https://example.com/image.jpg</image:loc></image:image><lastmod>2021-01-01</lastmod><changefreq>weekly</changefreq><priority>0.5</priority></url></urlset>"
        },
        {
          "type": "p",
          "text": "You can usevideosproperty to create video sitemaps. Learn more details in theGoogle Developer Docs."
        },
        {
          "type": "code",
          "code": "importtype{ MetadataRoute }from'next'exportdefaultfunctionsitemap():MetadataRoute.Sitemap{return[{url:'https://example.com',lastModified:'2021-01-01',changeFrequency:'weekly',priority:0.5,videos:[{title:'example',thumbnail_loc:'https://example.com/image.jpg',description:'this is the description',},],},]}"
        },
        {
          "type": "p",
          "text": "Output:"
        },
        {
          "type": "code",
          "code": "<?xmlversion=\"1.0\"encoding=\"UTF-8\"?><urlsetxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"><url><loc>https://example.com</loc><video:video><video:title>example</video:title><video:thumbnail_loc>https://example.com/image.jpg</video:thumbnail_loc><video:description>this is the description</video:description></video:video><lastmod>2021-01-01</lastmod><changefreq>weekly</changefreq><priority>0.5</priority></url></urlset>"
        },
        {
          "type": "code",
          "code": "importtype{ MetadataRoute }from'next'exportdefaultfunctionsitemap():MetadataRoute.Sitemap{return[{url:'https://acme.com',lastModified:newDate(),alternates:{languages:{es:'https://acme.com/es',de:'https://acme.com/de',},},},{url:'https://acme.com/about',lastModified:newDate(),alternates:{languages:{es:'https://acme.com/es/about',de:'https://acme.com/de/about',},},},{url:'https://acme.com/blog',lastModified:newDate(),alternates:{languages:{es:'https://acme.com/es/blog',de:'https://acme.com/de/blog',},},},]}"
        },
        {
          "type": "p",
          "text": "Output:"
        },
        {
          "type": "code",
          "code": "<urlsetxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"><url><loc>https://acme.com</loc><xhtml:linkrel=\"alternate\"hreflang=\"es\"href=\"https://acme.com/es\"/><xhtml:linkrel=\"alternate\"hreflang=\"de\"href=\"https://acme.com/de\"/><lastmod>2023-04-06T15:02:24.021Z</lastmod></url><url><loc>https://acme.com/about</loc><xhtml:linkrel=\"alternate\"hreflang=\"es\"href=\"https://acme.com/es/about\"/><xhtml:linkrel=\"alternate\"hreflang=\"de\"href=\"https://acme.com/de/about\"/><lastmod>2023-04-06T15:02:24.021Z</lastmod></url><url><loc>https://acme.com/blog</loc><xhtml:linkrel=\"alternate\"hreflang=\"es\"href=\"https://acme.com/es/blog\"/><xhtml:linkrel=\"alternate\"hreflang=\"de\"href=\"https://acme.com/de/blog\"/><lastmod>2023-04-06T15:02:24.021Z</lastmod></url></urlset>"
        },
        {
          "type": "p",
          "text": "While a single sitemap will work for most applications. For large web applications, you may need to split a sitemap into multiple files. There are two ways you can create multiple sitemaps:"
        },
        {
          "type": "list",
          "items": [
            "By nestingsitemap.(xml|js|ts)inside multiple route segments e.g.app/sitemap.xmlandapp/products/sitemap.xml.",
            "By using thegenerateSitemapsfunction."
          ]
        },
        {
          "type": "p",
          "text": "For example, to split a sitemap usinggenerateSitemaps, return an array of objects with the sitemapid. Then, use theidto generate the unique sitemaps."
        },
        {
          "type": "code",
          "code": "importtype{ MetadataRoute }from'next'import{ BASE_URL }from'@/app/lib/constants'exportasyncfunctiongenerateSitemaps() {// Fetch the total number ofproducts and calculate the number of sitemaps neededreturn[{ id:0},{ id:1},{ id:2},{ id:3}]}exportdefaultasyncfunctionsitemap({id,}:{id:number}):Promise<MetadataRoute.Sitemap> {// Google's limit is 50,000 URLs per sitemapconststart=id*50000constend=start+50000constproducts=awaitgetProducts(`SELECT id, date FROMproducts WHERE id BETWEEN${start}AND${end}`)returnproducts.map((product)=>({url:`${BASE_URL}/product/${product.id}`,lastModified:product.date,}))}"
        },
        {
          "type": "p",
          "text": "Your generated sitemaps will be available at/.../sitemap/[id]. For example,/product/sitemap/1.xml. See thegenerateSitemapsAPI referencefor more information."
        },
        {
          "type": "p",
          "text": "The default function exported fromsitemap.(xml|ts|js)should return an array of objects with the following properties:"
        },
        {
          "type": "code",
          "code": "typeSitemap=Array<{url:stringlastModified?:string|DatechangeFrequency?:|'always'|'hourly'|'daily'|'weekly'|'monthly'|'yearly'|'never'priority?:numberalternates?:{languages?:Languages<string>}}>"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/middleware",
      "title": "File Conventions: middleware.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Themiddleware.js|tsfile is used to writeMiddlewareand run code on the server before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly. Middleware executes before routes are rendered. It's particularly useful for implementing custom server-side logic like authentication, logging, or handling redirects. Use the filemiddleware.ts(or .js) in the root of your project to define Middleware. For example, at the same level asapporpages, or insidesrcif applicable."
        },
        {
          "type": "code",
          "code": "import{ NextResponse,NextRequest }from'next/server'// This function can be marked `async` if using `await` insideexportfunctionmiddleware(request:NextRequest) {returnNextResponse.redirect(newURL('/home',request.url))}exportconstconfig={matcher:'/about/:path*',}"
        },
        {
          "type": "p",
          "text": "The file must export a single function, either as a default export or namedmiddleware. Note that multiple middleware from the same file are not supported."
        },
        {
          "type": "code",
          "code": "// Example of default exportexportdefaultfunctionmiddleware(request) {// Middleware logic}"
        },
        {
          "type": "p",
          "text": "Optionally, a config object can be exported alongside the Middleware function. This object includes thematcherto specify paths where the Middleware applies."
        },
        {
          "type": "p",
          "text": "Thematcheroption allows you to target specific paths for the Middleware to run on. You can specify these paths in several ways:"
        },
        {
          "type": "list",
          "items": [
            "For a single path: Directly use a string to define the path, like'/about'.",
            "For multiple paths: Use an array to list multiple paths, such asmatcher: ['/about', '/contact'], which applies the Middleware to both/aboutand/contact."
          ]
        },
        {
          "type": "p",
          "text": "Additionally,matchersupports complex path specifications through regular expressions, such asmatcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'], enabling precise control over which paths to include or exclude. Thematcheroption also accepts an array of objects with the following keys:"
        },
        {
          "type": "list",
          "items": [
            "source: The path or pattern used to match the request paths. It can be a string for direct path matching or a pattern for more complex matching.",
            "regexp(optional): A regular expression string that fine-tunes the matching based on the source. It provides additional control over which paths are included or excluded.",
            "locale(optional): A boolean that, when set tofalse, ignores locale-based routing in path matching.",
            "has(optional): Specifies conditions based on the presence of specific request elements such as headers, query parameters, or cookies.",
            "missing(optional): Focuses on conditions where certain request elements are absent, like missing headers or cookies."
          ]
        },
        {
          "type": "code",
          "code": "exportconstconfig={matcher:[{source:'/api/*',regexp:'^/api/(.*)',locale:false,has:[{ type:'header',key:'Authorization',value:'Bearer Token'},{ type:'query',key:'userId',value:'123'},],missing:[{ type:'cookie',key:'session',value:'active'}],},],}"
        },
        {
          "type": "p",
          "text": "When defining Middleware, the default export function accepts a single parameter,request. This parameter is an instance ofNextRequest, which represents the incoming HTTP request."
        },
        {
          "type": "code",
          "code": "importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {// Middleware logic goes here}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "NextRequestis a type that represents incoming HTTP requests in Next.js Middleware, whereasNextResponseis a class used to manipulate and send back HTTP responses."
          ]
        },
        {
          "type": "p",
          "text": "Middleware can use theNextResponseobject which extends theWeb Response API. By returning aNextResponseobject, you can directly manipulate cookies, set headers, implement redirects, and rewrite paths."
        },
        {
          "type": "p",
          "text": "Good to know: For redirects, you can also useResponse.redirectinstead ofNextResponse.redirect."
        },
        {
          "type": "p",
          "text": "Middleware only supports theEdge runtime. The Node.js runtime cannot be used."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/not-found",
      "title": "File Conventions: not-found.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Thenot-foundfile is used to render UI when thenotFoundfunction is thrown within a route segment. Along with serving a custom UI, Next.js will return a200HTTP status code for streamed responses, and404for non-streamed responses."
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionNotFound() {return(<div><h2>Not Found</h2><p>Could not find requested resource</p><Linkhref=\"/\">Return Home</Link></div>)}"
        },
        {
          "type": "p",
          "text": "not-found.jscomponents do not accept any props."
        },
        {
          "type": "p",
          "text": "Good to know: In addition to catching expectednotFound()errors, the rootapp/not-found.jsfile also handles any unmatched URLs for your whole application. This means users that visit a URL that is not handled by your app will be shown the UI exported by theapp/not-found.jsfile."
        },
        {
          "type": "p",
          "text": "By default,not-foundis a Server Component. You can mark it asasyncto fetch and display data:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'import{ headers }from'next/headers'exportdefaultasyncfunctionNotFound() {constheadersList=awaitheaders()constdomain=headersList.get('host')constdata=awaitgetSiteData(domain)return(<div><h2>Not Found: {data.name}</h2><p>Could not find requested resource</p><p>View <Linkhref=\"/blog\">all posts</Link></p></div>)}"
        },
        {
          "type": "p",
          "text": "If you need to use Client Component hooks likeusePathnameto display content based on the path, you must fetch data on the client-side instead."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/page",
      "title": "File Conventions: page.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Thepagefile is used to define a page in your Next.js application."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage({params,searchParams,}:{params:Promise<{ slug:string}>searchParams:Promise<{ [key:string]:string|string[]|undefined}>}) {return<h1>My Page</h1>}"
        },
        {
          "type": "p",
          "text": "A promise that resolves to an object containing thedynamic route parametersfrom the root segment down to that page."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage({params,}:{params:Promise<{ slug:string}>}) {constslug=(awaitparams).slug}"
        },
        {
          "type": "list",
          "items": [
            "Since theparamsprop is a promise. You must useasync/awaitor React'susefunction to access the values.In version 14 and earlier,paramswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "In version 14 and earlier,paramswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future."
          ]
        },
        {
          "type": "p",
          "text": "A promise that resolves to an object containing thesearch parametersof the current URL. For example:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage({searchParams,}:{searchParams:Promise<{ [key:string]:string|string[]|undefined}>}) {constfilters=(awaitsearchParams).filters}"
        },
        {
          "type": "list",
          "items": [
            "Since thesearchParamsprop is a promise. You must useasync/awaitor React'susefunction to access the values.In version 14 and earlier,searchParamswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "In version 14 and earlier,searchParamswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "searchParamsis aDynamic APIwhose values cannot be known ahead of time. Using it will opt the page intodynamic renderingat request time.",
            "searchParamsis a plain JavaScript object, not aURLSearchParamsinstance."
          ]
        },
        {
          "type": "p",
          "text": "Usingdynamic route segments, you can display or fetch specific content for the page based on theparamsprop."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage({params,}:{params:Promise<{ slug:string}>}) {const{slug}=awaitparamsreturn<h1>Blog Post: {slug}</h1>}"
        },
        {
          "type": "p",
          "text": "You can use thesearchParamsprop to handle filtering, pagination, or sorting based on the query string of the URL."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage({searchParams,}:{searchParams:Promise<{ [key:string]:string|string[]|undefined}>}) {const{page='1',sort='asc',query=''}=awaitsearchParamsreturn(<div><h1>Product Listing</h1><p>Search query: {query}</p><p>Current page: {page}</p><p>Sort order: {sort}</p></div>)}"
        },
        {
          "type": "p",
          "text": "To usesearchParamsandparamsin a Client Component (which cannot beasync), you can use React'susefunction to read the promise:"
        },
        {
          "type": "code",
          "code": "'use client'import{ use }from'react'exportdefaultfunctionPage({params,searchParams,}:{params:Promise<{ slug:string}>searchParams:Promise<{ [key:string]:string|string[]|undefined}>}) {const{slug}=use(params)const{query}=use(searchParams)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/route",
      "title": "File Conventions: route.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Route Handlers allow you to create custom request handlers for a given route using the WebRequestandResponseAPIs."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET() {returnResponse.json({ message:'Hello World'})}"
        },
        {
          "type": "p",
          "text": "Aroutefile allows you to create custom request handlers for a given route. The followingHTTP methodsare supported:GET,POST,PUT,PATCH,DELETE,HEAD, andOPTIONS."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request) {}exportasyncfunctionHEAD(request:Request) {}exportasyncfunctionPOST(request:Request) {}exportasyncfunctionPUT(request:Request) {}exportasyncfunctionDELETE(request:Request) {}exportasyncfunctionPATCH(request:Request) {}// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.exportasyncfunctionOPTIONS(request:Request) {}"
        },
        {
          "type": "p",
          "text": "Therequestobject is aNextRequestobject, which is an extension of the WebRequestAPI.NextRequestgives you further control over the incoming request, including easily accessingcookiesand an extended, parsed, URL objectnextUrl."
        },
        {
          "type": "code",
          "code": "importtype{ NextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {consturl=request.nextUrl}"
        },
        {
          "type": "list",
          "items": [
            "params: a promise that resolves to an object containing thedynamic route parametersfor the current route."
          ]
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request,{ params }:{ params:Promise<{ team:string}> }) {constteam=(awaitparams).team}"
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'exportasyncfunctionGET(request:NextRequest) {constcookieStore=awaitcookies()consta=cookieStore.get('a')constb=cookieStore.set('b','1')constc=cookieStore.delete('c')}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config",
      "title": "File Conventions: Route Segment Config | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The options outlined on this page are disabled if thedynamicIOflag is on, and will eventually be deprecated in the future."
        },
        {
          "type": "p",
          "text": "The Route Segment options allows you to configure the behavior of aPage,Layout, orRoute Handlerby directly exporting the following variables:"
        },
        {
          "type": "p",
          "text": "EnablePartial Prerendering (PPR)for a layout or page."
        },
        {
          "type": "code",
          "code": "exportconstexperimental_ppr=true// true | false"
        },
        {
          "type": "p",
          "text": "Change the dynamic behavior of a layout or page to fully static or fully dynamic."
        },
        {
          "type": "code",
          "code": "exportconstdynamic='auto'// 'auto' | 'force-dynamic' | 'error' | 'force-static'"
        },
        {
          "type": "p",
          "text": "Good to know: The new model in theappdirectory favors granular caching control at thefetchrequest level over the binary all-or-nothing model ofgetServerSidePropsandgetStaticPropsat the page-level in thepagesdirectory. Thedynamicoption is a way to opt back in to the previous model as a convenience and provides a simpler migration path."
        },
        {
          "type": "list",
          "items": [
            "'auto'(default): The default option to cache as much as possible without preventing any components from opting into dynamic behavior.",
            "'force-dynamic': Forcedynamic rendering, which will result in routes being rendered for each user at request time. This option is equivalent to:getServerSideProps()in thepagesdirectory.Setting the option of everyfetch()request in a layout or page to{ cache: 'no-store', next: { revalidate: 0 } }.Setting the segment config toexport const fetchCache = 'force-no-store'",
            "getServerSideProps()in thepagesdirectory.",
            "Setting the option of everyfetch()request in a layout or page to{ cache: 'no-store', next: { revalidate: 0 } }.",
            "Setting the segment config toexport const fetchCache = 'force-no-store'",
            "'error': Force static rendering and cache the data of a layout or page by causing an error if any components useDynamic APIsor uncached data. This option is equivalent to:getStaticProps()in thepagesdirectory.Setting the option of everyfetch()request in a layout or page to{ cache: 'force-cache' }.Setting the segment config tofetchCache = 'only-cache', dynamicParams = false.dynamic = 'error'changes the default ofdynamicParamsfromtruetofalse. You can opt back into dynamically rendering pages for dynamic params not generated bygenerateStaticParamsby manually settingdynamicParams = true.",
            "getStaticProps()in thepagesdirectory.",
            "Setting the option of everyfetch()request in a layout or page to{ cache: 'force-cache' }.",
            "Setting the segment config tofetchCache = 'only-cache', dynamicParams = false.",
            "dynamic = 'error'changes the default ofdynamicParamsfromtruetofalse. You can opt back into dynamically rendering pages for dynamic params not generated bygenerateStaticParamsby manually settingdynamicParams = true.",
            "'force-static': Force static rendering and cache the data of a layout or page by forcingcookies,headers()anduseSearchParams()to return empty values."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Instructions onhow to migratefromgetServerSidePropsandgetStaticPropstodynamic: 'force-dynamic'anddynamic: 'error'can be found in theupgrade guide."
          ]
        },
        {
          "type": "p",
          "text": "Control what happens when a dynamic segment is visited that was not generated withgenerateStaticParams."
        },
        {
          "type": "code",
          "code": "exportconstdynamicParams=true// true | false,"
        },
        {
          "type": "list",
          "items": [
            "true(default): Dynamic segments not included ingenerateStaticParamsare generated on demand.",
            "false: Dynamic segments not included ingenerateStaticParamswill return a 404."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "This option replaces thefallback: true | false | blockingoption ofgetStaticPathsin thepagesdirectory.",
            "To statically render all paths the first time they're visited, you'll need to return an empty array ingenerateStaticParamsor utilizeexport const dynamic = 'force-static'.",
            "WhendynamicParams = true, the segment usesStreaming Server Rendering.",
            "If thedynamic = 'error'anddynamic = 'force-static'are used, it'll change the default ofdynamicParamstofalse."
          ]
        },
        {
          "type": "p",
          "text": "Set the default revalidation time for a layout or page. This option does not override therevalidatevalue set by individualfetchrequests."
        },
        {
          "type": "code",
          "code": "exportconstrevalidate=false// false | 0 | number"
        },
        {
          "type": "list",
          "items": [
            "false(default): The default heuristic to cache anyfetchrequests that set theircacheoption to'force-cache'or are discovered before aDynamic APIis used. Semantically equivalent torevalidate: Infinitywhich effectively means the resource should be cached indefinitely. It is still possible for individualfetchrequests to usecache: 'no-store'orrevalidate: 0to avoid being cached and make the route dynamically rendered. Or setrevalidateto a positive number lower than the route default to increase the revalidation frequency of a route.",
            "0: Ensure a layout or page is alwaysdynamically renderedeven if no Dynamic APIs or uncached data fetches are discovered. This option changes the default offetchrequests that do not set acacheoption to'no-store'but leavesfetchrequests that opt into'force-cache'or use a positiverevalidateas is.",
            "number: (in seconds) Set the default revalidation frequency of a layout or page tonseconds."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "The revalidate value needs to be statically analyzable. For examplerevalidate = 600is valid, butrevalidate = 60 * 10is not.",
            "The revalidate value is not available when usingruntime = 'edge'.",
            "In Development, Pages arealwaysrendered on-demand and are never cached. This allows you to see changes immediately without waiting for a revalidation period to pass."
          ]
        },
        {
          "type": "list",
          "items": [
            "The lowestrevalidateacross each layout and page of a single route will determine the revalidation frequency of theentireroute. This ensures that child pages are revalidated as frequently as their parent layouts.",
            "Individualfetchrequests can set a lowerrevalidatethan the route's defaultrevalidateto increase the revalidation frequency of the entire route. This allows you to dynamically opt-in to more frequent revalidation for certain routes based on some criteria."
          ]
        },
        {
          "type": "p",
          "text": "By default, Next.jswill cacheanyfetch()requests that are reachablebeforeanyDynamic APIsare used andwill not cachefetchrequests that are discoveredafterDynamic APIs are used. fetchCacheallows you to override the defaultcacheoption of allfetchrequests in a layout or page."
        },
        {
          "type": "code",
          "code": "exportconstfetchCache='auto'// 'auto' | 'default-cache' | 'only-cache'// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'"
        },
        {
          "type": "list",
          "items": [
            "'auto'(default): The default option to cachefetchrequests before Dynamic APIs with thecacheoption they provide and not cachefetchrequests after Dynamic APIs.",
            "'default-cache': Allow anycacheoption to be passed tofetchbut if no option is provided then set thecacheoption to'force-cache'. This means that evenfetchrequests after Dynamic APIs are considered static.",
            "'only-cache': Ensure allfetchrequests opt into caching by changing the default tocache: 'force-cache'if no option is provided and causing an error if anyfetchrequests usecache: 'no-store'.",
            "'force-cache': Ensure allfetchrequests opt into caching by setting thecacheoption of allfetchrequests to'force-cache'.",
            "'default-no-store': Allow anycacheoption to be passed tofetchbut if no option is provided then set thecacheoption to'no-store'. This means that evenfetchrequests before Dynamic APIs are considered dynamic.",
            "'only-no-store': Ensure allfetchrequests opt out of caching by changing the default tocache: 'no-store'if no option is provided and causing an error if anyfetchrequests usecache: 'force-cache'",
            "'force-no-store': Ensure allfetchrequests opt out of caching by setting thecacheoption of allfetchrequests to'no-store'. This forces allfetchrequests to be re-fetched every request even if they provide a'force-cache'option."
          ]
        },
        {
          "type": "list",
          "items": [
            "Any options set across each layout and page of a single route need to be compatible with each other.If both the'only-cache'and'force-cache'are provided, then'force-cache'wins. If both'only-no-store'and'force-no-store'are provided, then'force-no-store'wins. The force option changes the behavior across the route so a single segment with'force-*'would prevent any errors caused by'only-*'.The intention of the'only-*'and'force-*'options is to guarantee the whole route is either fully static or fully dynamic. This means:A combination of'only-cache'and'only-no-store'in a single route is not allowed.A combination of'force-cache'and'force-no-store'in a single route is not allowed.A parent cannot provide'default-no-store'if a child provides'auto'or'*-cache'since that could make the same fetch have different behavior.",
            "If both the'only-cache'and'force-cache'are provided, then'force-cache'wins. If both'only-no-store'and'force-no-store'are provided, then'force-no-store'wins. The force option changes the behavior across the route so a single segment with'force-*'would prevent any errors caused by'only-*'.",
            "The intention of the'only-*'and'force-*'options is to guarantee the whole route is either fully static or fully dynamic. This means:A combination of'only-cache'and'only-no-store'in a single route is not allowed.A combination of'force-cache'and'force-no-store'in a single route is not allowed.",
            "A combination of'only-cache'and'only-no-store'in a single route is not allowed.",
            "A combination of'force-cache'and'force-no-store'in a single route is not allowed.",
            "A parent cannot provide'default-no-store'if a child provides'auto'or'*-cache'since that could make the same fetch have different behavior.",
            "It is generally recommended to leave shared parent layouts as'auto'and customize the options where child segments diverge."
          ]
        },
        {
          "type": "p",
          "text": "We recommend using the Node.js runtime for rendering your application, and the Edge runtime for Middleware (only supported option)."
        },
        {
          "type": "code",
          "code": "exportconstruntime='nodejs'// 'nodejs' | 'edge'"
        },
        {
          "type": "list",
          "items": ["'nodejs'(default)", "'edge'"]
        },
        {
          "type": "p",
          "text": "Learn more about thedifferent runtimes."
        },
        {
          "type": "code",
          "code": "exportconstpreferredRegion='auto'// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']"
        },
        {
          "type": "p",
          "text": "Support forpreferredRegion, and regions supported, is dependent on your deployment platform."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If apreferredRegionis not specified, it will inherit the option of the nearest parent layout.",
            "The root layout defaults toallregions."
          ]
        },
        {
          "type": "p",
          "text": "By default, Next.js does not limit the execution of server-side logic (rendering a page or handling an API).\nDeployment platforms can usemaxDurationfrom the Next.js build output to add specific execution limits.\nFor example, onVercel. Note: This settings requires Next.js13.4.10or higher."
        },
        {
          "type": "code",
          "code": "exportconstmaxDuration=5"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If usingServer Actions, set themaxDurationat the page level to change the default timeout of all Server Actions used on the page."
          ]
        },
        {
          "type": "p",
          "text": "ThegenerateStaticParamsfunction can be used in combination withdynamic route segmentsto define the list of route segment parameters that will be statically generated at build time instead of on-demand at request time. See theAPI referencefor more details."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/template",
      "title": "File Conventions: template.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Atemplatefile is similar to alayoutin that it wraps a layout or page. Unlike layouts that persist across routes and maintain state, templates are given a unique key, meaning children Client Components reset their state on navigation."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionTemplate({ children }:{ children:React.ReactNode}) {return<div>{children}</div>}"
        },
        {
          "type": "p",
          "text": "While less common, you might choose to use a template over a layout if you want:"
        },
        {
          "type": "list",
          "items": [
            "Features that rely onuseEffect(e.g logging page views) anduseState(e.g a per-page feedback form).",
            "To change the default framework behavior. For example, Suspense Boundaries inside layouts only show the fallback the first time the Layout is loaded and not when switching pages. For templates, the fallback is shown on each navigation."
          ]
        },
        {
          "type": "p",
          "text": "Template accepts achildrenprop. For example:"
        },
        {
          "type": "code",
          "code": "<Layout>{/* Note that the template is automatically given a unique key. */}<Templatekey={routeParam}>{children}</Template></Layout>"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "By default,templateis aServer Component, but can also be used as aClient Componentthrough the\"use client\"directive.",
            "When a user navigates between routes that share atemplate, a new instance of the component is mounted, DOM elements are recreated, state isnotpreserved in Client Components, and effects are re-synchronized."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized",
      "title": "File Conventions: unauthorized.js | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theunauthorizedfile is used to render UI when theunauthorizedfunction is invoked during authentication. Along with allowing you to customize the UI, Next.js will return a401status code."
        },
        {
          "type": "code",
          "code": "importLoginfrom'@/app/components/Login'exportdefaultfunctionUnauthorized() {return(<main><h1>401 - Unauthorized</h1><p>Please log in to access this page.</p><Login/></main>)}"
        },
        {
          "type": "p",
          "text": "unauthorized.jscomponents do not accept any props."
        },
        {
          "type": "p",
          "text": "You can useunauthorizedfunction to render theunauthorized.jsfile with a login UI."
        },
        {
          "type": "code",
          "code": "import{ verifySession }from'@/app/lib/dal'import{ unauthorized }from'next/server'exportdefaultasyncfunctionDashboardPage() {constsession=awaitverifySession()if(!session) {unauthorized()}return<div>Dashboard</div>}"
        },
        {
          "type": "code",
          "code": "importLoginfrom'@/app/components/Login'exportdefaultfunctionUnauthorizedPage() {return(<main><h1>401 - Unauthorized</h1><p>Please log in to access this page.</p><Login/></main>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions",
      "title": "API Reference: Functions | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/after",
      "title": "Functions: after | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "afterallows you to schedule work to be executed after a response (or prerender) is finished. This is useful for tasks and other side effects that should not block the response, such as logging and analytics. It can be used inServer Components(includinggenerateMetadata),Server Actions,Route Handlers, andMiddleware. The function accepts a callback that will be executed after the response (or prerender) is finished:"
        },
        {
          "type": "code",
          "code": "import{ after }from'next/server'// Custom logging functionimport{ log }from'@/app/utils'exportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {after(()=>{// Execute after the layout is rendered and sent to the userlog()})return<>{children}</>}"
        },
        {
          "type": "p",
          "text": "Good to know:afteris not aDynamic APIand calling it does not cause a route to become dynamic. If it's used within a static page, the callback will execute at build time, or whenever a page is revalidated."
        },
        {
          "type": "list",
          "items": [
            "A callback function which will be executed after the response (or prerender) is finished."
          ]
        },
        {
          "type": "p",
          "text": "afterwill run for the platform's default or configured max duration of your route. If your platform supports it, you can configure the timeout limit using themaxDurationroute segment config."
        },
        {
          "type": "list",
          "items": [
            "afterwill be executed even if the response didn't complete successfully. Including when an error is thrown or whennotFoundorredirectis called.",
            "You can use Reactcacheto deduplicate functions called insideafter.",
            "aftercan be nested inside otheraftercalls, for example, you can create utility functions that wrapaftercalls to add additional functionality."
          ]
        },
        {
          "type": "p",
          "text": "The use case forafteris to process secondary tasks without blocking the primary response. It's similar to using the platform'swaitUntil()or removingawaitfrom a promise, but with the following differences:"
        },
        {
          "type": "list",
          "items": [
            "waitUntil(): accepts a promise and enqueues a task to be executed during the lifecycle of the request, whereasafteraccepts a callback that will be executedafterthe response is finished.",
            "Removingawait: starts executing during the response, which uses resources. It's also not reliable in serverless environments as the function stops computation immediately after the response is sent, potentially interrupting the task."
          ]
        },
        {
          "type": "p",
          "text": "We recommend usingafteras it has been designed to consider other Next.js APIs and contexts."
        },
        {
          "type": "p",
          "text": "You can use request APIs such ascookiesandheadersinsideafterinServer ActionsandRoute Handlers. This is useful for logging activity after a mutation. For example:"
        },
        {
          "type": "code",
          "code": "import{ after }from'next/server'import{ cookies,headers }from'next/headers'import{ logUserAction }from'@/app/utils'exportasyncfunctionPOST(request:Request) {// Perform mutation// ...// Log user activity for analyticsafter(async()=>{constuserAgent=(awaitheaders().get('user-agent'))||'unknown'constsessionCookie=(awaitcookies().get('session-id'))?.value||'anonymous'logUserAction({ sessionCookie,userAgent })})returnnewResponse(JSON.stringify({ status:'success'}),{status:200,headers:{'Content-Type':'application/json'},})}"
        },
        {
          "type": "p",
          "text": "However, you cannot use these request APIs insideafterinServer Components. This is because Next.js needs to know which part of the tree access the request APIs to supportPartial Prerendering, butafterruns after React's rendering lifecycle."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/cacheLife",
      "title": "Functions: cacheLife | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "ThecacheLifefunction is used to set the cache lifetime of a function or component. It should be used alongside theuse cachedirective, and within the scope of the function or component."
        },
        {
          "type": "p",
          "text": "To usecacheLife, enable thedynamicIOflagin yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{dynamicIO:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Then, import and invoke thecacheLifefunction within the scope of the function or component:"
        },
        {
          "type": "code",
          "code": "'use cache'import{ unstable_cacheLifeascacheLife }from'next/cache'exportdefaultasyncfunctionPage() {cacheLife('hours')return<div>Page</div>}"
        },
        {
          "type": "p",
          "text": "Next.js provides a set of named cache profiles modeled on various timescales. If you don't specify a cache profile in thecacheLifefunction alongside theuse cachedirective, Next.js will automatically apply the “default” cache profile. However, we recommend always adding a cache profile when using theuse cachedirective to explicitly define caching behavior."
        },
        {
          "type": "p",
          "text": "The string values used to reference cache profiles don't carry inherent meaning; instead they serve as semantic labels. This allows you to better understand and manage your cached content within your codebase."
        },
        {
          "type": "p",
          "text": "You can configure custom cache profiles by adding them to thecacheLifeoption in yournext.config.tsfile. Cache profiles are objects that contain the following properties:"
        },
        {
          "type": "p",
          "text": "The \"stale\" property differs from thestaleTimessetting in that it specifically controls client-side router caching. WhilestaleTimesis a global setting that affects all instances of both dynamic and static data, thecacheLifeconfiguration allows you to define \"stale\" times on a per-function or per-route basis."
        },
        {
          "type": "p",
          "text": "Good to know: The “stale” property does not set theCache-control: max-ageheader. It instead controls the client-side router cache."
        },
        {
          "type": "p",
          "text": "You can create a reusable cache profile by defining them in yournext.config.tsfile. Choose a name that suits your use case and set values for thestale,revalidate, andexpireproperties. You can create as many custom cache profiles as needed. Each profile can be referenced by its name as a string value passed to thecacheLifefunction."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{dynamicIO:true,cacheLife:{biweekly:{stale:60*60*24*14,// 14 daysrevalidate:60*60*24,// 1 dayexpire:60*60*24*14,// 14 days},},},}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "The example above caches for 14 days, checks for updates daily, and expires the cache after 14 days. You can then reference this profile throughout your application by its name:"
        },
        {
          "type": "code",
          "code": "'use cache'import{ unstable_cacheLifeascacheLife }from'next/cache'exportdefaultasyncfunctionPage() {cacheLife('biweekly')return<div>Page</div>}"
        },
        {
          "type": "p",
          "text": "While the default cache profiles provide a useful way to think about how fresh or stale any given part of cacheable output can be, you may prefer different named profiles to better align with your applications caching strategies. You can override the default named cache profiles by creating a new configuration with the same name as the defaults. The example below shows how to override the default “days” cache profile:"
        },
        {
          "type": "code",
          "code": "constnextConfig={experimental:{dynamicIO:true,cacheLife:{days:{stale:3600,// 1 hourrevalidate:900,// 15 minutesexpire:86400,// 1 day},},},}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "For specific use cases, you can set a custom cache profile by passing an object to thecacheLifefunction:"
        },
        {
          "type": "code",
          "code": "'use cache'import{ unstable_cacheLifeascacheLife }from'next/cache'exportdefaultasyncfunctionPage() {cacheLife({stale:3600,// 1 hourrevalidate:900,// 15 minutesexpire:86400,// 1 day})return<div>Page</div>}"
        },
        {
          "type": "p",
          "text": "This inline cache profile will only be applied to the function or file it was created in. If you want to reuse the same profile throughout your application, you canadd the configurationto thecacheLifeproperty of yournext.config.tsfile."
        },
        {
          "type": "p",
          "text": "When defining multiple caching behaviors in the same route or component tree, if the inner caches specify their owncacheLifeprofile, the outer cache will respect the shortest cache duration among them.This applies only if the outer cache does not have its own explicitcacheLifeprofile defined. For example, if you add theuse cachedirective to your page, without specifying a cache profile, the default cache profile will be applied implicitly (cacheLife(”default”)). If a component imported into the page also uses theuse cachedirective with its own cache profile, the outer and inner cache profiles are compared, and shortest duration set in the profiles will be applied."
        },
        {
          "type": "code",
          "code": "// Parent componentimport{ unstable_cacheLifeascacheLife }from'next/cache'import{ ChildComponent }from'./child'exportasyncfunctionParentComponent() {'use cache'cacheLife('days')return(<div><ChildComponent/></div>)}"
        },
        {
          "type": "p",
          "text": "And in a separate file, we defined the Child component that was imported:"
        },
        {
          "type": "code",
          "code": "// Child componentimport{ unstable_cacheLifeascacheLife }from'next/cache'exportasyncfunctionChildComponent() {'use cache'cacheLife('hours')return<div>Child Content</div>// This component's cache will respect the shorter 'hours' profile}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/cacheTag",
      "title": "Functions: cacheTag | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "ThecacheTagfunction allows you to tag cached data for on-demand invalidation. By associating tags with cache entries, you can selectively purge or revalidate specific cache entries without affecting other cached data."
        },
        {
          "type": "p",
          "text": "To usecacheTag, enable thedynamicIOflagin yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{dynamicIO:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "ThecacheTagfunction takes a single string value, or a string array."
        },
        {
          "type": "code",
          "code": "import{ unstable_cacheTagascacheTag }from'next/cache'exportasyncfunctiongetData() {'use cache'cacheTag('my-data')constdata=awaitfetch('/api/data')returndata}"
        },
        {
          "type": "p",
          "text": "You can then purge the cache on-demand usingrevalidateTagAPI in another function, for example, aroute handlerorServer Action:"
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidateTag }from'next/cache'exportdefaultasyncfunctionsubmit() {awaitaddPost()revalidateTag('my-data')}"
        },
        {
          "type": "list",
          "items": [
            "Idempotent Tags: Applying the same tag multiple times has no additional effect.",
            "Multiple Tags: You can assign multiple tags to a single cache entry by passing an array tocacheTag."
          ]
        },
        {
          "type": "code",
          "code": "cacheTag('tag-one','tag-two')"
        },
        {
          "type": "p",
          "text": "Tag your cached data by callingcacheTagwithin a cached function or component:"
        },
        {
          "type": "code",
          "code": "import{ unstable_cacheTagascacheTag }from'next/cache'interfaceBookingsProps{type:string}exportasyncfunctionBookings({ type='haircut'}:BookingsProps) {'use cache'cacheTag('bookings-data')asyncfunctiongetBookingsData() {constdata=awaitfetch(`/api/bookings?type=${encodeURIComponent(type)}`)returndata}return//...}"
        },
        {
          "type": "p",
          "text": "You can use the data returned from an async function to tag the cache entry."
        },
        {
          "type": "code",
          "code": "import{ unstable_cacheTagascacheTag }from'next/cache'interfaceBookingsProps{type:string}exportasyncfunctionBookings({ type='haircut'}:BookingsProps) {asyncfunctiongetBookingsData() {'use cache'constdata=awaitfetch(`/api/bookings?type=${encodeURIComponent(type)}`)cacheTag('bookings-data',data.id)returndata}return//...}"
        },
        {
          "type": "p",
          "text": "UsingrevalidateTag, you can invalidate the cache for a specific tag when needed:"
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidateTag }from'next/cache'exportasyncfunctionupdateBookings() {awaitupdateBookingData()revalidateTag('bookings-data')}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/connection",
      "title": "Functions: connection | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theconnection()function allows you to indicate rendering should wait for an incoming user request before continuing. It's useful when a component doesn’t useDynamic APIs, but you want it to be dynamically rendered at runtime and not statically rendered at build time. This usually occurs when you access external information that you intentionally want to change the result of a render, such asMath.random()ornew Date()."
        },
        {
          "type": "code",
          "code": "import{ connection }from'next/server'exportdefaultasyncfunctionPage() {awaitconnection()// Everything below will be excluded from prerenderingconstrand=Math.random()return<span>{rand}</span>}"
        },
        {
          "type": "code",
          "code": "functionconnection():Promise<void>"
        },
        {
          "type": "list",
          "items": ["The function does not accept any parameters."]
        },
        {
          "type": "list",
          "items": [
            "The function returns avoidPromise. It is not meant to be consumed."
          ]
        },
        {
          "type": "list",
          "items": [
            "connectionreplacesunstable_noStoreto better align with the future of Next.js.",
            "The function is only necessary when dynamic rendering is required and common Dynamic APIs are not used."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/cookies",
      "title": "Functions: cookies | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "cookiesis anasyncfunction that allows you to read the HTTP incoming request cookies inServer Component, and read/write outgoing request cookies inServer ActionsorRoute Handlers."
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'exportdefaultasyncfunctionPage() {constcookieStore=awaitcookies()consttheme=cookieStore.get('theme')return'...'}"
        },
        {
          "type": "p",
          "text": "The following methods are available:"
        },
        {
          "type": "p",
          "text": "When setting a cookie, the following properties from theoptionsobject are supported:"
        },
        {
          "type": "p",
          "text": "The only option with a default value ispath. To learn more about these options, see theMDN docs."
        },
        {
          "type": "list",
          "items": [
            "cookiesis anasynchronousfunction that returns a promise. You must useasync/awaitor React'susefunction to access cookies.In version 14 and earlier,cookieswas a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "In version 14 and earlier,cookieswas a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "cookiesis aDynamic APIwhose returned values cannot be known ahead of time. Using it in a layout or page will opt a route intodynamic rendering.",
            "The.deletemethod can only be called:In aServer ActionorRoute Handler.If it belongs to the same domain from which.setis called. Additionally, the code must be executed on the same protocol (HTTP or HTTPS) as the cookie you want to delete.",
            "In aServer ActionorRoute Handler.",
            "If it belongs to the same domain from which.setis called. Additionally, the code must be executed on the same protocol (HTTP or HTTPS) as the cookie you want to delete.",
            "HTTP does not allow setting cookies after streaming starts, so you must use.setin aServer ActionorRoute Handler."
          ]
        },
        {
          "type": "p",
          "text": "When working with cookies in Server Components, it's important to understand that cookies are fundamentally a client-side storage mechanism:"
        },
        {
          "type": "list",
          "items": [
            "Reading cookiesworks in Server Components because you're accessing the cookie data that the client's browser sends to the server in the HTTP request headers.",
            "Setting cookiescannot be done directly in a Server Component, even when using a Route Handler or Server Action. This is because cookies are actually stored by the browser, not the server."
          ]
        },
        {
          "type": "p",
          "text": "The server can only send instructions (viaSet-Cookieheaders) to tell the browser to store cookies - the actual storage happens on the client side. This is why cookie operations that modify state (.set,.delete,.clear) must be performed in a Route Handler or Server Action where the response headers can be properly set."
        },
        {
          "type": "p",
          "text": "You can use the(await cookies()).get('name')method to get a single cookie:"
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'exportdefaultasyncfunctionPage() {constcookieStore=awaitcookies()consttheme=cookieStore.get('theme')return'...'}"
        },
        {
          "type": "p",
          "text": "You can use the(await cookies()).getAll()method to get all cookies with a matching name. Ifnameis unspecified, it returns all the available cookies."
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'exportdefaultasyncfunctionPage() {constcookieStore=awaitcookies()returncookieStore.getAll().map((cookie)=>(<divkey={cookie.name}><p>Name: {cookie.name}</p><p>Value: {cookie.value}</p></div>))}"
        },
        {
          "type": "p",
          "text": "You can use the(await cookies()).set(name, value, options)method in aServer ActionorRoute Handlerto set a cookie. Theoptionsobjectis optional."
        },
        {
          "type": "code",
          "code": "'use server'import{ cookies }from'next/headers'exportasyncfunctioncreate(data) {constcookieStore=awaitcookies()cookieStore.set('name','lee')// orcookieStore.set('name','lee',{ secure:true})// orcookieStore.set({name:'name',value:'lee',httpOnly:true,path:'/',})}"
        },
        {
          "type": "p",
          "text": "You can use the(await cookies()).has(name)method to check if a cookie exists:"
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'exportdefaultasyncfunctionPage() {constcookieStore=awaitcookies()consthasCookie=cookieStore.has('theme')return'...'}"
        },
        {
          "type": "p",
          "text": "There are three ways you can delete a cookie. Using thedelete()method:"
        },
        {
          "type": "code",
          "code": "'use server'import{ cookies }from'next/headers'exportasyncfunctiondelete(data) {(awaitcookies()).delete('name')}"
        },
        {
          "type": "p",
          "text": "Setting a new cookie with the same name and an empty value:"
        },
        {
          "type": "code",
          "code": "'use server'import{ cookies }from'next/headers'exportasyncfunctiondelete(data) {(awaitcookies()).set('name','')}"
        },
        {
          "type": "p",
          "text": "Setting themaxAgeto 0 will immediately expire a cookie.maxAgeaccepts a value in seconds."
        },
        {
          "type": "code",
          "code": "'use server'import{ cookies }from'next/headers'exportasyncfunctiondelete(data) {(awaitcookies()).set('name','value',{ maxAge:0})}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/draft-mode",
      "title": "Functions: draftMode | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "draftModeis anasyncfunction allows you to enable and disableDraft Mode, as well as check if Draft Mode is enabled in aServer Component."
        },
        {
          "type": "code",
          "code": "import{ draftMode }from'next/headers'exportdefaultasyncfunctionPage() {const{isEnabled}=awaitdraftMode()}"
        },
        {
          "type": "p",
          "text": "The following methods and properties are available:"
        },
        {
          "type": "list",
          "items": [
            "draftModeis anasynchronousfunction that returns a promise. You must useasync/awaitor React'susefunction.In version 14 and earlier,draftModewas a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "In version 14 and earlier,draftModewas a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "A new bypass cookie value will be generated each time you runnext build. This ensures that the bypass cookie can’t be guessed.",
            "To test Draft Mode locally over HTTP, your browser will need to allow third-party cookies and local storage access."
          ]
        },
        {
          "type": "p",
          "text": "To enable Draft Mode, create a newRoute Handlerand call theenable()method:"
        },
        {
          "type": "code",
          "code": "import{draftMode }from'next/headers'exportasyncfunctionGET(request:Request) {constdraft=awaitdraftMode()draft().enable()returnnewResponse('Draft mode is enabled')}"
        },
        {
          "type": "p",
          "text": "By default, the Draft Mode session ends when the browser is closed. To disable Draft Mode manually, call thedisable()method in yourRoute Handler:"
        },
        {
          "type": "code",
          "code": "import{draftMode }from'next/headers'exportasyncfunctionGET(request:Request) {constdraft=awaitdraftMode()draft().disable()returnnewResponse('Draft mode is disabled')}"
        },
        {
          "type": "p",
          "text": "Then, send a request to invoke the Route Handler. If calling the route using the<Link>component, you must passprefetch={false}to prevent accidentally deleting the cookie on prefetch."
        },
        {
          "type": "p",
          "text": "You can check if Draft Mode is enabled in a Server Component with theisEnabledproperty:"
        },
        {
          "type": "code",
          "code": "import{ draftMode }from'next/headers'exportdefaultasyncfunctionPage() {const{isEnabled}=awaitdraftMode()return(<main><h1>My Blog Post</h1><p>Draft Mode is currently {isEnabled?'Enabled':'Disabled'}</p></main>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/fetch",
      "title": "Functions: fetch | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js extends theWebfetch()APIto allow each request on the server to set its own persistent caching and revalidation semantics. In the browser, thecacheoption indicates how a fetch request will interact with thebrowser'sHTTP cache. With this extension,cacheindicates how aserver-sidefetch request will interact with the framework's persistentData Cache. You can callfetchwithasyncandawaitdirectly within Server Components."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {letdata=awaitfetch('https://api.vercel.app/blog')letposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "Since Next.js extends theWebfetch()API, you can use any of thenative options available."
        },
        {
          "type": "p",
          "text": "Configure how the request should interact with Next.jsData Cache."
        },
        {
          "type": "code",
          "code": "fetch(`https://...`,{ cache:'force-cache'|'no-store'})"
        },
        {
          "type": "list",
          "items": [
            "auto no cache(default): Next.js fetches the resource from the remote server on every request in development, but will fetch once duringnext buildbecause the route will be statically prerendered. IfDynamic APIsare detected on the route, Next.js will fetch the resource on every request.",
            "no-store: Next.js fetches the resource from the remote server on every request, even if Dynamic APIs are not detected on the route.",
            "force-cache: Next.js looks for a matching request in its Data Cache.If there is a match and it is fresh, it will be returned from the cache.If there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource.",
            "If there is a match and it is fresh, it will be returned from the cache.",
            "If there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource."
          ]
        },
        {
          "type": "code",
          "code": "fetch(`https://...`,{ next:{ revalidate:false|0|number } })"
        },
        {
          "type": "p",
          "text": "Set the cache lifetime of a resource (in seconds)."
        },
        {
          "type": "list",
          "items": [
            "false- Cache the resource indefinitely. Semantically equivalent torevalidate: Infinity. The HTTP cache may evict older resources over time.",
            "0- Prevent the resource from being cached.",
            "number- (in seconds) Specify the resource should have a cache lifetime of at mostnseconds."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If an individualfetch()request sets arevalidatenumber lower than thedefaultrevalidateof a route, the whole route revalidation interval will be decreased.",
            "If two fetch requests with the same URL in the same route have differentrevalidatevalues, the lower value will be used.",
            "As a convenience, it is not necessary to set thecacheoption ifrevalidateis set to a number.",
            "Conflicting options such as{ revalidate: 3600, cache: 'no-store' }will cause an error."
          ]
        },
        {
          "type": "code",
          "code": "fetch(`https://...`,{ next:{ tags:['collection'] } })"
        },
        {
          "type": "p",
          "text": "Set the cache tags of a resource. Data can then be revalidated on-demand usingrevalidateTag. The max length for a custom tag is 256 characters and the max tag items is 128."
        },
        {
          "type": "p",
          "text": "Next.js cachesfetchresponses in Server Components across Hot Module Replacement (HMR) in local development for faster responses and to reduce costs for billed API calls. By default, theHMR cacheapplies to all fetch requests, including those with the defaultauto no cacheandcache: 'no-store'option. This means uncached requests will not show fresh data between HMR refreshes. However, the cache will be cleared on navigation or full-page reloads. See theserverComponentsHmrCachedocs for more information."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden",
      "title": "Functions: forbidden | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theforbiddenfunction throws an error that renders a Next.js 403 error page. It's useful for handling authorization errors in your application. You can customize the UI using theforbidden.jsfile. To start usingforbidden, enable the experimentalauthInterruptsconfiguration option in yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{authInterrupts:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "forbiddencan be invoked inServer Components,Server Actions, andRoute Handlers."
        },
        {
          "type": "code",
          "code": "import{ verifySession }from'@/app/lib/dal'import{ forbidden }from'next/navigation'exportdefaultasyncfunctionAdminPage() {constsession=awaitverifySession()// Check if the user has the 'admin' roleif(session.role!=='admin') {forbidden()}// Render the admin page forauthorized usersreturn<></>}"
        },
        {
          "type": "list",
          "items": ["Theforbiddenfunction cannot be called in theroot layout."]
        },
        {
          "type": "p",
          "text": "You can useforbiddento restrict access to certain routes based on user roles. This ensures that users who are authenticated but lack the required permissions cannot access the route."
        },
        {
          "type": "code",
          "code": "import{ verifySession }from'@/app/lib/dal'import{ forbidden }from'next/navigation'exportdefaultasyncfunctionAdminPage() {constsession=awaitverifySession()// Check if the user has the 'admin' roleif(session.role!=='admin') {forbidden()}// Render theadminpage for authorized usersreturn(<main><h1>Admin Dashboard</h1><p>Welcome, {session.user.name}!</p></main>)}"
        },
        {
          "type": "p",
          "text": "When implementing mutations in Server Actions, you can useforbiddento only allow users with a specific role to update sensitive data."
        },
        {
          "type": "code",
          "code": "'use server'import{ verifySession }from'@/app/lib/dal'import{ forbidden }from'next/navigation'importdbfrom'@/app/lib/db'exportasyncfunctionupdateRole(formData:FormData) {constsession=awaitverifySession()// Ensure only admins can update rolesif(session.role!=='admin') {forbidden()}// Perform the role update for authorized users// ...}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/generate-image-metadata",
      "title": "Functions: generateImageMetadata | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "You can usegenerateImageMetadatato generate different versions of one image or return multiple images for one route segment. This is useful for when you want to avoid hard-coding metadata values, such as for icons."
        },
        {
          "type": "p",
          "text": "generateImageMetadatafunction accepts the following parameters:"
        },
        {
          "type": "p",
          "text": "An object containing thedynamic route parametersobject from the root segment down to the segmentgenerateImageMetadatais called from."
        },
        {
          "type": "code",
          "code": "exportfunctiongenerateImageMetadata({params,}:{params:{ slug:string}}) {// ...}"
        },
        {
          "type": "p",
          "text": "ThegenerateImageMetadatafunction should return anarrayof objects containing the image's metadata such asaltandsize. In addition, each itemmustinclude anidvalue which will be passed to the props of the image generating function."
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'exportfunctiongenerateImageMetadata() {return[{contentType:'image/png',size:{ width:48,height:48},id:'small',},{contentType:'image/png',size:{ width:72,height:72},id:'medium',},]}exportdefaultfunctionIcon({ id }:{ id:string}) {returnnewImageResponse((<divstyle={{width:'100%',height:'100%',display:'flex',alignItems:'center',justifyContent:'center',fontSize:88,background:'#000',color:'#fafafa',}}>Icon {id}</div>))}"
        },
        {
          "type": "p",
          "text": "This example uses theparamsobject and external data to generate multipleOpen Graph imagesfor a route segment."
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'import{ getCaptionForImage,getOGImages }from'@/app/utils/images'exportasyncfunctiongenerateImageMetadata({params,}:{params:{ id:string}}) {constimages=awaitgetOGImages(params.id)returnimages.map((image,idx)=>({id:idx,size:{ width:1200,height:600},alt:image.text,contentType:'image/png',}))}exportdefaultasyncfunctionImage({params,id,}:{params:{ id:string}id:number}) {constproductId=(awaitparams).idconstimageId=idconsttext=awaitgetCaptionForImage(productId,imageId)returnnewImageResponse((<divstyle={{// ...}}>{text}</div>))}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/generate-metadata",
      "title": "Functions: generateMetadata | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This page covers allConfig-based Metadataoptions withgenerateMetadataand the static metadata object."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'// either Static metadataexportconstmetadata:Metadata={title:'...',}// or Dynamic metadataexportasyncfunctiongenerateMetadata({ params }) {return{title:'...',}}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Themetadataobject andgenerateMetadatafunction exports areonly supported in Server Components.",
            "You cannot export both themetadataobject andgenerateMetadatafunction from the same route segment.",
            "On the initial load, streaming is blocked untilgenerateMetadatahas fully resolved, including any content fromloading.js."
          ]
        },
        {
          "type": "p",
          "text": "To define static metadata, export aMetadataobjectfrom alayout.jsorpage.jsfile."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'...',description:'...',}exportdefaultfunctionPage() {}"
        },
        {
          "type": "p",
          "text": "See theMetadata Fieldsfor a complete list of supported options."
        },
        {
          "type": "p",
          "text": "Dynamic metadata depends ondynamic information, such as the current route parameters, external data, ormetadatain parent segments, can be set by exporting agenerateMetadatafunction that returns aMetadataobject."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata,ResolvingMetadata }from'next'typeProps={params:Promise<{ id:string}>searchParams:Promise<{ [key:string]:string|string[]|undefined}>}exportasyncfunctiongenerateMetadata({ params,searchParams }:Props,parent:ResolvingMetadata):Promise<Metadata> {// read route paramsconstid=(awaitparams).id// fetch dataconstproduct=awaitfetch(`https://.../${id}`).then((res)=>res.json())// optionally access and extend (rather than replace) parent metadataconstpreviousImages=(awaitparent).openGraph?.images||[]return{title:product.title,openGraph:{images:['/some-specific-page-image.jpg',...previousImages],},}}exportdefaultfunctionPage({ params,searchParams }:Props) {}"
        },
        {
          "type": "p",
          "text": "generateMetadatafunction accepts the following parameters:"
        },
        {
          "type": "list",
          "items": [
            "props- An object containing the parameters of the current route:params- An object containing thedynamic route parametersobject from the root segment down to the segmentgenerateMetadatais called from. Examples:RouteURLparamsapp/shop/[slug]/page.js/shop/1{ slug: '1' }app/shop/[tag]/[item]/page.js/shop/1/2{ tag: '1', item: '2' }app/shop/[...slug]/page.js/shop/1/2{ slug: ['1', '2'] }searchParams- An object containing the current URL'ssearch params. Examples:URLsearchParams/shop?a=1{ a: '1' }/shop?a=1&b=2{ a: '1', b: '2' }/shop?a=1&a=2{ a: ['1', '2'] }",
            "params- An object containing thedynamic route parametersobject from the root segment down to the segmentgenerateMetadatais called from. Examples:RouteURLparamsapp/shop/[slug]/page.js/shop/1{ slug: '1' }app/shop/[tag]/[item]/page.js/shop/1/2{ tag: '1', item: '2' }app/shop/[...slug]/page.js/shop/1/2{ slug: ['1', '2'] }",
            "searchParams- An object containing the current URL'ssearch params. Examples:URLsearchParams/shop?a=1{ a: '1' }/shop?a=1&b=2{ a: '1', b: '2' }/shop?a=1&a=2{ a: ['1', '2'] }",
            "parent- A promise of the resolved metadata from parent route segments."
          ]
        },
        {
          "type": "p",
          "text": "generateMetadatashould return aMetadataobjectcontaining one or more metadata fields."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If metadata doesn't depend on runtime information, it should be defined using the staticmetadataobjectrather thangenerateMetadata.",
            "fetchrequests are automaticallymemoizedfor the same data acrossgenerateMetadata,generateStaticParams, Layouts, Pages, and Server Components. Reactcachecan be usediffetchis unavailable.",
            "searchParamsare only available inpage.jssegments.",
            "Theredirect()andnotFound()Next.js methods can also be used insidegenerateMetadata."
          ]
        },
        {
          "type": "p",
          "text": "Thetitleattribute is used to set the title of the document. It can be defined as a simplestringor an optionaltemplate object."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={title:'Next.js',}"
        },
        {
          "type": "code",
          "code": "<title>Next.js</title>"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:{template:'...',default:'...',absolute:'...',},}"
        },
        {
          "type": "p",
          "text": "title.defaultcan be used to provide afallback titleto child route segments that don't define atitle."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:{default:'Acme',},}"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={}// Output: <title>Acme</title>"
        },
        {
          "type": "p",
          "text": "title.templatecan be used to add a prefix or a suffix totitlesdefined inchildroute segments."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:{template:'%s | Acme',default:'Acme',// a default is required when creating a template},}"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'About',}// Output: <title>About | Acme</title>"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "title.templateapplies tochildroute segments andnotthe segment it's defined in. This means:title.defaultisrequiredwhen you add atitle.template.title.templatedefined inlayout.jswill not apply to atitledefined in apage.jsof the same route segment.title.templatedefined inpage.jshas no effect because a page is always the terminating segment (it doesn't have any children route segments).",
            "title.defaultisrequiredwhen you add atitle.template.",
            "title.templatedefined inlayout.jswill not apply to atitledefined in apage.jsof the same route segment.",
            "title.templatedefined inpage.jshas no effect because a page is always the terminating segment (it doesn't have any children route segments).",
            "title.templatehasno effectif a route has not defined atitleortitle.default."
          ]
        },
        {
          "type": "p",
          "text": "title.absolutecan be used to provide a title thatignorestitle.templateset in parent segments."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:{template:'%s | Acme',},}"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:{absolute:'About',},}// Output: <title>About</title>"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "layout.jstitle(string) andtitle.defaultdefine the default title for child segments (that do not define their owntitle). It will augmenttitle.templatefrom the closest parent segment if it exists.title.absolutedefines the default title for child segments. It ignorestitle.templatefrom parent segments.title.templatedefines a new title template for child segments.",
            "title(string) andtitle.defaultdefine the default title for child segments (that do not define their owntitle). It will augmenttitle.templatefrom the closest parent segment if it exists.",
            "title.absolutedefines the default title for child segments. It ignorestitle.templatefrom parent segments.",
            "title.templatedefines a new title template for child segments.",
            "page.jsIf a page does not define its own title the closest parents resolved title will be used.title(string) defines the routes title. It will augmenttitle.templatefrom the closest parent segment if it exists.title.absolutedefines the route title. It ignorestitle.templatefrom parent segments.title.templatehas no effect inpage.jsbecause a page is always the terminating segment of a route.",
            "If a page does not define its own title the closest parents resolved title will be used.",
            "title(string) defines the routes title. It will augmenttitle.templatefrom the closest parent segment if it exists.",
            "title.absolutedefines the route title. It ignorestitle.templatefrom parent segments.",
            "title.templatehas no effect inpage.jsbecause a page is always the terminating segment of a route."
          ]
        },
        {
          "type": "code",
          "code": "exportconstmetadata={description:'The React Framework for the Web',}"
        },
        {
          "type": "code",
          "code": "<metaname=\"description\"content=\"The React Framework for the Web\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={generator:'Next.js',applicationName:'Next.js',referrer:'origin-when-cross-origin',keywords:['Next.js','React','JavaScript'],authors:[{ name:'Seb'},{ name:'Josh',url:'https://nextjs.org'}],creator:'Jiachi Liu',publisher:'Sebastian Markbåge',formatDetection:{email:false,address:false,telephone:false,},}"
        },
        {
          "type": "code",
          "code": "<metaname=\"application-name\"content=\"Next.js\"/><metaname=\"author\"content=\"Seb\"/><linkrel=\"author\"href=\"https://nextjs.org\"/><metaname=\"author\"content=\"Josh\"/><metaname=\"generator\"content=\"Next.js\"/><metaname=\"keywords\"content=\"Next.js,React,JavaScript\"/><metaname=\"referrer\"content=\"origin-when-cross-origin\"/><metaname=\"color-scheme\"content=\"dark\"/><metaname=\"creator\"content=\"Jiachi Liu\"/><metaname=\"publisher\"content=\"Sebastian Markbåge\"/><metaname=\"format-detection\"content=\"telephone=no, address=no, email=no\"/>"
        },
        {
          "type": "p",
          "text": "metadataBaseis a convenience option to set a base URL prefix formetadatafields that require a fully qualified URL."
        },
        {
          "type": "list",
          "items": [
            "metadataBaseallows URL-basedmetadatafields defined in thecurrent route segment and belowto use arelative pathinstead of an otherwise required absolute URL.",
            "The field's relative path will be composed withmetadataBaseto form a fully qualified URL.",
            "If not configured,metadataBaseisautomatically populatedwith adefault value."
          ]
        },
        {
          "type": "code",
          "code": "exportconstmetadata={metadataBase:newURL('https://acme.com'),alternates:{canonical:'/',languages:{'en-US':'/en-US','de-DE':'/de-DE',},},openGraph:{images:'/og-image.png',},}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"canonical\"href=\"https://acme.com\"/><linkrel=\"alternate\"hreflang=\"en-US\"href=\"https://acme.com/en-US\"/><linkrel=\"alternate\"hreflang=\"de-DE\"href=\"https://acme.com/de-DE\"/><metaproperty=\"og:image\"content=\"https://acme.com/og-image.png\"/>"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "metadataBaseis typically set in rootapp/layout.jsto apply to URL-basedmetadatafields across all routes.",
            "All URL-basedmetadatafields that require absolute URLs can be configured with ametadataBaseoption.",
            "metadataBasecan contain a subdomain e.g.https://app.acme.comor base path e.g.https://acme.com/start/from/here",
            "If ametadatafield provides an absolute URL,metadataBasewill be ignored.",
            "Using a relative path in a URL-basedmetadatafield without configuring ametadataBasewill cause a build error.",
            "Next.js will normalize duplicate slashes betweenmetadataBase(e.g.https://acme.com/) and a relative field (e.g./path) to a single slash (e.g.https://acme.com/path)"
          ]
        },
        {
          "type": "p",
          "text": "If not configured,metadataBasehas adefault value."
        },
        {
          "type": "p",
          "text": "On Vercel:"
        },
        {
          "type": "list",
          "items": [
            "For production deployments,VERCEL_PROJECT_PRODUCTION_URLwill be used.",
            "For preview deployments,VERCEL_BRANCH_URLwill take priority, and fallback toVERCEL_URLif it's not present."
          ]
        },
        {
          "type": "p",
          "text": "If these values are present they will be used as thedefault valueofmetadataBase, otherwise it falls back tohttp://localhost:${process.env.PORT || 3000}. This allows Open Graph images to work on both local build and Vercel preview and production deployments. When overriding the default, we recommend using environment variables to compute the URL. This allows configuring a URL for local development, staging, and production environments. See more details about these environment variables in theSystem Environment Variablesdocs."
        },
        {
          "type": "p",
          "text": "URL composition favors developer intent over default directory traversal semantics."
        },
        {
          "type": "list",
          "items": [
            "Trailing slashes betweenmetadataBaseandmetadatafields are normalized.",
            "An \"absolute\" path in ametadatafield (that typically would replace the whole URL path) is treated as a \"relative\" path (starting from the end ofmetadataBase)."
          ]
        },
        {
          "type": "p",
          "text": "For example, given the followingmetadataBase:"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={metadataBase:newURL('https://acme.com'),}"
        },
        {
          "type": "p",
          "text": "Anymetadatafields that inherit the abovemetadataBaseand set their own value will be resolved as follows:"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={openGraph:{title:'Next.js',description:'The React Framework for the Web',url:'https://nextjs.org',siteName:'Next.js',images:[{url:'https://nextjs.org/og.png',// Must be an absolute URLwidth:800,height:600,},{url:'https://nextjs.org/og-alt.png',// Must be an absolute URLwidth:1800,height:1600,alt:'My custom alt',},],videos:[{url:'https://nextjs.org/video.mp4',// Must be an absolute URLwidth:800,height:600,},],audio:[{url:'https://nextjs.org/audio.mp3',// Must be an absolute URL},],locale:'en_US',type:'website',},}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"og:title\"content=\"Next.js\"/><metaproperty=\"og:description\"content=\"The React Framework for the Web\"/><metaproperty=\"og:url\"content=\"https://nextjs.org/\"/><metaproperty=\"og:site_name\"content=\"Next.js\"/><metaproperty=\"og:locale\"content=\"en_US\"/><metaproperty=\"og:image\"content=\"https://nextjs.org/og.png\"/><metaproperty=\"og:image:width\"content=\"800\"/><metaproperty=\"og:image:height\"content=\"600\"/><metaproperty=\"og:image\"content=\"https://nextjs.org/og-alt.png\"/><metaproperty=\"og:image:width\"content=\"1800\"/><metaproperty=\"og:image:height\"content=\"1600\"/><metaproperty=\"og:image:alt\"content=\"My custom alt\"/><metaproperty=\"og:video\"content=\"https://nextjs.org/video.mp4\"/><metaproperty=\"og:video:width\"content=\"800\"/><metaproperty=\"og:video:height\"content=\"600\"/><metaproperty=\"og:audio\"content=\"https://nextjs.org/audio.mp3\"/><metaproperty=\"og:type\"content=\"website\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={openGraph:{title:'Next.js',description:'The React Framework for the Web',type:'article',publishedTime:'2023-01-01T00:00:00.000Z',authors:['Seb','Josh'],},}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"og:title\"content=\"Next.js\"/><metaproperty=\"og:description\"content=\"The React Framework for the Web\"/><metaproperty=\"og:type\"content=\"article\"/><metaproperty=\"article:published_time\"content=\"2023-01-01T00:00:00.000Z\"/><metaproperty=\"article:author\"content=\"Seb\"/><metaproperty=\"article:author\"content=\"Josh\"/>"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "It may be more convenient to use thefile-based Metadata APIfor Open Graph images. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you."
          ]
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={robots:{index:false,follow:true,nocache:true,googleBot:{index:true,follow:false,noimageindex:true,'max-video-preview':-1,'max-image-preview':'large','max-snippet':-1,},},}"
        },
        {
          "type": "code",
          "code": "<metaname=\"robots\"content=\"noindex, follow, nocache\"/><metaname=\"googlebot\"content=\"index, nofollow, noimageindex, max-video-preview:-1, max-image-preview:large, max-snippet:-1\"/>"
        },
        {
          "type": "p",
          "text": "Good to know: We recommend using thefile-based Metadata APIfor icons where possible. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={icons:{icon:'/icon.png',shortcut:'/shortcut-icon.png',apple:'/apple-icon.png',other:{rel:'apple-touch-icon-precomposed',url:'/apple-touch-icon-precomposed.png',},},}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"shortcut icon\"href=\"/shortcut-icon.png\"/><linkrel=\"icon\"href=\"/icon.png\"/><linkrel=\"apple-touch-icon\"href=\"/apple-icon.png\"/><linkrel=\"apple-touch-icon-precomposed\"href=\"/apple-touch-icon-precomposed.png\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={icons:{icon:[{ url:'/icon.png'},newURL('/icon.png','https://example.com'),{ url:'/icon-dark.png',media:'(prefers-color-scheme: dark)'},],shortcut:['/shortcut-icon.png'],apple:[{ url:'/apple-icon.png'},{ url:'/apple-icon-x3.png',sizes:'180x180',type:'image/png'},],other:[{rel:'apple-touch-icon-precomposed',url:'/apple-touch-icon-precomposed.png',},],},}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"shortcut icon\"href=\"/shortcut-icon.png\"/><linkrel=\"icon\"href=\"/icon.png\"/><linkrel=\"icon\"href=\"https://example.com/icon.png\"/><linkrel=\"icon\"href=\"/icon-dark.png\"media=\"(prefers-color-scheme: dark)\"/><linkrel=\"apple-touch-icon\"href=\"/apple-icon.png\"/><linkrel=\"apple-touch-icon-precomposed\"href=\"/apple-touch-icon-precomposed.png\"/><linkrel=\"apple-touch-icon\"href=\"/apple-icon-x3.png\"sizes=\"180x180\"type=\"image/png\"/>"
        },
        {
          "type": "p",
          "text": "Good to know: Themsapplication-*meta tags are no longer supported in Chromium builds of Microsoft Edge, and thus no longer needed."
        },
        {
          "type": "p",
          "text": "Deprecated: ThethemeColoroption inmetadatais deprecated as of Next.js 14. Please use theviewportconfigurationinstead."
        },
        {
          "type": "p",
          "text": "A web application manifest, as defined in theWeb Application Manifest specification."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={manifest:'https://nextjs.org/manifest.json',}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"manifest\"href=\"https://nextjs.org/manifest.json\"/>"
        },
        {
          "type": "p",
          "text": "The Twitter specification is (surprisingly) used for more than just X (formerly known as Twitter). Learn more about theTwitter Card markup reference."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={twitter:{card:'summary_large_image',title:'Next.js',description:'The React Framework for the Web',siteId:'1467726470533754880',creator:'@nextjs',creatorId:'1467726470533754880',images:['https://nextjs.org/og.png'],// Must be an absolute URL},}"
        },
        {
          "type": "code",
          "code": "<metaname=\"twitter:card\"content=\"summary_large_image\"/><metaname=\"twitter:site:id\"content=\"1467726470533754880\"/><metaname=\"twitter:creator\"content=\"@nextjs\"/><metaname=\"twitter:creator:id\"content=\"1467726470533754880\"/><metaname=\"twitter:title\"content=\"Next.js\"/><metaname=\"twitter:description\"content=\"The React Framework for the Web\"/><metaname=\"twitter:image\"content=\"https://nextjs.org/og.png\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={twitter:{card:'app',title:'Next.js',description:'The React Framework for the Web',siteId:'1467726470533754880',creator:'@nextjs',creatorId:'1467726470533754880',images:{url:'https://nextjs.org/og.png',alt:'Next.js Logo',},app:{name:'twitter_app',id:{iphone:'twitter_app://iphone',ipad:'twitter_app://ipad',googleplay:'twitter_app://googleplay',},url:{iphone:'https://iphone_url',ipad:'https://ipad_url',},},},}"
        },
        {
          "type": "code",
          "code": "<metaname=\"twitter:site:id\"content=\"1467726470533754880\"/><metaname=\"twitter:creator\"content=\"@nextjs\"/><metaname=\"twitter:creator:id\"content=\"1467726470533754880\"/><metaname=\"twitter:title\"content=\"Next.js\"/><metaname=\"twitter:description\"content=\"The React Framework for the Web\"/><metaname=\"twitter:card\"content=\"app\"/><metaname=\"twitter:image\"content=\"https://nextjs.org/og.png\"/><metaname=\"twitter:image:alt\"content=\"Next.js Logo\"/><metaname=\"twitter:app:name:iphone\"content=\"twitter_app\"/><metaname=\"twitter:app:id:iphone\"content=\"twitter_app://iphone\"/><metaname=\"twitter:app:id:ipad\"content=\"twitter_app://ipad\"/><metaname=\"twitter:app:id:googleplay\"content=\"twitter_app://googleplay\"/><metaname=\"twitter:app:url:iphone\"content=\"https://iphone_url\"/><metaname=\"twitter:app:url:ipad\"content=\"https://ipad_url\"/><metaname=\"twitter:app:name:ipad\"content=\"twitter_app\"/><metaname=\"twitter:app:name:googleplay\"content=\"twitter_app\"/>"
        },
        {
          "type": "p",
          "text": "Deprecated: Theviewportoption inmetadatais deprecated as of Next.js 14. Please use theviewportconfigurationinstead."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={verification:{google:'google',yandex:'yandex',yahoo:'yahoo',other:{me:['my-email','my-link'],},},}"
        },
        {
          "type": "code",
          "code": "<metaname=\"google-site-verification\"content=\"google\"/><metaname=\"y_key\"content=\"yahoo\"/><metaname=\"yandex-verification\"content=\"yandex\"/><metaname=\"me\"content=\"my-email\"/><metaname=\"me\"content=\"my-link\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={itunes:{appId:'myAppStoreID',appArgument:'myAppArgument',},appleWebApp:{title:'Apple Web App',statusBarStyle:'black-translucent',startupImage:['/assets/startup/apple-touch-startup-image-768x1004.png',{url:'/assets/startup/apple-touch-startup-image-1536x2008.png',media:'(device-width: 768px) and (device-height: 1024px)',},],},}"
        },
        {
          "type": "code",
          "code": "<metaname=\"apple-itunes-app\"content=\"app-id=myAppStoreID, app-argument=myAppArgument\"/><metaname=\"mobile-web-app-capable\"content=\"yes\"/><metaname=\"apple-mobile-web-app-title\"content=\"Apple Web App\"/><linkhref=\"/assets/startup/apple-touch-startup-image-768x1004.png\"rel=\"apple-touch-startup-image\"/><linkhref=\"/assets/startup/apple-touch-startup-image-1536x2008.png\"media=\"(device-width: 768px) and (device-height: 1024px)\"rel=\"apple-touch-startup-image\"/><metaname=\"apple-mobile-web-app-status-bar-style\"content=\"black-translucent\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={alternates:{canonical:'https://nextjs.org',languages:{'en-US':'https://nextjs.org/en-US','de-DE':'https://nextjs.org/de-DE',},media:{'only screen and (max-width: 600px)':'https://nextjs.org/mobile',},types:{'application/rss+xml':'https://nextjs.org/rss',},},}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"canonical\"href=\"https://nextjs.org\"/><linkrel=\"alternate\"hreflang=\"en-US\"href=\"https://nextjs.org/en-US\"/><linkrel=\"alternate\"hreflang=\"de-DE\"href=\"https://nextjs.org/de-DE\"/><linkrel=\"alternate\"media=\"only screen and (max-width: 600px)\"href=\"https://nextjs.org/mobile\"/><linkrel=\"alternate\"type=\"application/rss+xml\"href=\"https://nextjs.org/rss\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={appLinks:{ios:{url:'https://nextjs.org/ios',app_store_id:'app_store_id',},android:{package:'com.example.android/package',app_name:'app_name_android',},web:{url:'https://nextjs.org/web',should_fallback:true,},},}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"al:ios:url\"content=\"https://nextjs.org/ios\"/><metaproperty=\"al:ios:app_store_id\"content=\"app_store_id\"/><metaproperty=\"al:android:package\"content=\"com.example.android/package\"/><metaproperty=\"al:android:app_name\"content=\"app_name_android\"/><metaproperty=\"al:web:url\"content=\"https://nextjs.org/web\"/><metaproperty=\"al:web:should_fallback\"content=\"true\"/>"
        },
        {
          "type": "p",
          "text": "Describes a collection of records, documents, or other materials of historical interest (source)."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={archives:['https://nextjs.org/13'],}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"archives\"href=\"https://nextjs.org/13\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={assets:['https://nextjs.org/assets'],}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"assets\"href=\"https://nextjs.org/assets\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={bookmarks:['https://nextjs.org/13'],}"
        },
        {
          "type": "code",
          "code": "<linkrel=\"bookmarks\"href=\"https://nextjs.org/13\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={category:'technology',}"
        },
        {
          "type": "code",
          "code": "<metaname=\"category\"content=\"technology\"/>"
        },
        {
          "type": "p",
          "text": "You can connect a Facebook app or Facebook account to you webpage for certain Facebook Social PluginsFacebook Documentation"
        },
        {
          "type": "p",
          "text": "Good to know: You can specify either appId or admins, but not both."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={facebook:{appId:'12345678',},}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"fb:app_id\"content=\"12345678\"/>"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={facebook:{admins:'12345678',},}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"fb:admins\"content=\"12345678\"/>"
        },
        {
          "type": "p",
          "text": "If you want to generate multiple fb:admins meta tags you can use array value."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={facebook:{admins:['12345678','87654321'],},}"
        },
        {
          "type": "code",
          "code": "<metaproperty=\"fb:admins\"content=\"12345678\"/><metaproperty=\"fb:admins\"content=\"87654321\"/>"
        },
        {
          "type": "p",
          "text": "All metadata options should be covered using the built-in support. However, there may be custom metadata tags specific to your site, or brand new metadata tags just released. You can use theotheroption to render any custom metadata tag."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={other:{custom:'meta',},}"
        },
        {
          "type": "code",
          "code": "<metaname=\"custom\"content=\"meta\"/>"
        },
        {
          "type": "p",
          "text": "If you want to generate multiple same key meta tags you can use array value."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={other:{custom:['meta1','meta2'],},}"
        },
        {
          "type": "code",
          "code": "<metaname=\"custom\"content=\"meta1\"/> <metaname=\"custom\"content=\"meta2\"/>"
        },
        {
          "type": "p",
          "text": "The following metadata types do not currently have built-in support. However, they can still be rendered in the layout or page itself."
        },
        {
          "type": "p",
          "text": "The<link>element has a number ofrelkeywords that can be used to hint to the browser that an external resource is likely to be needed. The browser uses this information to apply preloading optimizations depending on the keyword. While the Metadata API doesn't directly support these hints, you can use newReactDOMmethodsto safely insert them into the<head>of the document."
        },
        {
          "type": "code",
          "code": "'use client'importReactDOMfrom'react-dom'exportfunctionPreloadResources() {ReactDOM.preload('...',{ as:'...'})ReactDOM.preconnect('...',{ crossOrigin:'...'})ReactDOM.prefetchDNS('...')return'...'}"
        },
        {
          "type": "p",
          "text": "Start loading a resource early in the page rendering (browser) lifecycle.MDN Docs."
        },
        {
          "type": "code",
          "code": "ReactDOM.preload(href: string,options: { as:string })"
        },
        {
          "type": "code",
          "code": "<linkrel=\"preload\"href=\"...\"as=\"...\"/>"
        },
        {
          "type": "p",
          "text": "Preemptively initiate a connection to an origin.MDN Docs."
        },
        {
          "type": "code",
          "code": "ReactDOM.preconnect(href: string,options?:{ crossOrigin?:string })"
        },
        {
          "type": "code",
          "code": "<linkrel=\"preconnect\"href=\"...\"crossorigin/>"
        },
        {
          "type": "p",
          "text": "Attempt to resolve a domain name before resources get requested.MDN Docs."
        },
        {
          "type": "code",
          "code": "ReactDOM.prefetchDNS(href: string)"
        },
        {
          "type": "code",
          "code": "<linkrel=\"dns-prefetch\"href=\"...\"/>"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "These methods are currently only supported in Client Components, which are still Server Side Rendered on initial page load.",
            "Next.js in-built features such asnext/font,next/imageandnext/scriptautomatically handle relevant resource hints."
          ]
        },
        {
          "type": "p",
          "text": "You can add type safety to your metadata by using theMetadatatype. If you are using thebuilt-in TypeScript pluginin your IDE, you do not need to manually add the type, but you can still explicitly add it if you want."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'Next.js',}"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportfunctiongenerateMetadata():Metadata{return{title:'Next.js',}}"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportasyncfunctiongenerateMetadata():Promise<Metadata> {return{title:'Next.js',}}"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'typeProps={params:Promise<{ id:string}>searchParams:Promise<{ [key:string]:string|string[]|undefined}>}exportfunctiongenerateMetadata({ params,searchParams }:Props):Metadata{return{title:'Next.js',}}exportdefaultfunctionPage({ params,searchParams }:Props) {}"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata,ResolvingMetadata }from'next'exportasyncfunctiongenerateMetadata({ params,searchParams }:Props,parent:ResolvingMetadata):Promise<Metadata> {return{title:'Next.js',}}"
        },
        {
          "type": "p",
          "text": "For JavaScript projects, you can use JSDoc to add type safety."
        },
        {
          "type": "code",
          "code": "/**@type{import(\"next\").Metadata}*/exportconstmetadata={title:'Next.js',}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/generate-sitemaps",
      "title": "Functions: generateSitemaps | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "You can use thegenerateSitemapsfunction to generate multiple sitemaps for your application."
        },
        {
          "type": "p",
          "text": "ThegenerateSitemapsreturns an array of objects with anidproperty."
        },
        {
          "type": "p",
          "text": "Your generated sitemaps will be available at/.../sitemap/[id].xml. For example,/product/sitemap/1.xml."
        },
        {
          "type": "p",
          "text": "For example, to split a sitemap usinggenerateSitemaps, return an array of objects with the sitemapid. Then, use theidto generate the unique sitemaps."
        },
        {
          "type": "code",
          "code": "import{ BASE_URL }from'@/app/lib/constants'exportasyncfunctiongenerateSitemaps() {// Fetch the total number ofproducts and calculate the number of sitemaps neededreturn[{ id:0},{ id:1},{ id:2},{ id:3}]}exportdefaultasyncfunctionsitemap({id,}:{id:number}):Promise<MetadataRoute.Sitemap> {// Google's limit is 50,000 URLs per sitemapconststart=id*50000constend=start+50000constproducts=awaitgetProducts(`SELECT id, date FROMproducts WHERE id BETWEEN${start}AND${end}`)returnproducts.map((product)=>({url:`${BASE_URL}/product/${product.id}`,lastModified:product.date,}))}"
        },
        {
          "type": "p",
          "text": "| Version   | Changes                                                                                                                                              |\n| --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- | --- |\n|v15.0.0|generateSitemapsnow generates consistent URLs between development and production                                                                  |\n|v13.3.2|generateSitemapsintroduced. In development, you can view the generated sitemap on/.../sitemap.xml/[id]. For example,/product/sitemap.xml/1. |     |"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/generate-static-params",
      "title": "Functions: generateStaticParams | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "ThegenerateStaticParamsfunction can be used in combination withdynamic route segmentstostatically generateroutes at build time instead of on-demand at request time."
        },
        {
          "type": "code",
          "code": "// Return a list of `params` to populate the [slug] dynamic segmentexportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())returnposts.map((post)=>({slug:post.slug,}))}// Multiple versions of this page will be statically generated// using the `params` returned by `generateStaticParams`exportdefaultasyncfunctionPage({ params }) {const{slug}=awaitparams// ...}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "You can use thedynamicParamssegment config option to control what happens when a dynamic segment is visited that was not generated withgenerateStaticParams.",
            "You must returnan empty array fromgenerateStaticParamsor utilizeexport const dynamic = 'force-static'in order to revalidate (ISR)paths at runtime.",
            "Duringnext dev,generateStaticParamswill be called when you navigate to a route.",
            "Duringnext build,generateStaticParamsruns before the corresponding Layouts or Pages are generated.",
            "During revalidation (ISR),generateStaticParamswill not be called again.",
            "generateStaticParamsreplaces thegetStaticPathsfunction in the Pages Router."
          ]
        },
        {
          "type": "p",
          "text": "options.params(optional) If multiple dynamic segments in a route usegenerateStaticParams, the childgenerateStaticParamsfunction is executed once for each set ofparamsthe parent generates. Theparamsobject contains the populatedparamsfrom the parentgenerateStaticParams, which can be used togenerate theparamsin a child segment."
        },
        {
          "type": "p",
          "text": "generateStaticParamsshould return an array of objects where each object represents the populated dynamic segments of a single route."
        },
        {
          "type": "list",
          "items": [
            "Each property in the object is a dynamic segment to be filled in for the route.",
            "The properties name is the segment's name, and the properties value is what that segment should be filled in with."
          ]
        },
        {
          "type": "code",
          "code": "exportfunctiongenerateStaticParams() {return[{ id:'1'},{ id:'2'},{ id:'3'}]}// Three versions of this page will be statically generated// using the `params` returned by `generateStaticParams`// - /product/1// - /product/2// - /product/3exportdefaultasyncfunctionPage({params,}:{params:Promise<{ id:string}>}) {const{id}=awaitparams// ...}"
        },
        {
          "type": "code",
          "code": "exportfunctiongenerateStaticParams() {return[{ category:'a',product:'1'},{ category:'b',product:'2'},{ category:'c',product:'3'},]}// Three versions of this page will be statically generated// using the `params` returned by `generateStaticParams`// - /products/a/1// - /products/b/2// - /products/c/3exportdefaultasyncfunctionPage({params,}:{params:Promise<{ category:string; product:string}>}) {const{category,product}=awaitparams// ...}"
        },
        {
          "type": "code",
          "code": "exportfunctiongenerateStaticParams() {return[{ slug:['a','1'] },{ slug:['b','2'] },{ slug:['c','3'] }]}// Three versions of this page will be statically generated// using the `params` returned by `generateStaticParams`// - /product/a/1// - /product/b/2// - /product/c/3exportdefaultasyncfunctionPage({params,}:{params:Promise<{ slug:string[] }>}) {const{slug}=awaitparams// ...}"
        },
        {
          "type": "p",
          "text": "To statically render all paths at build time, supply the full list of paths togenerateStaticParams:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())returnposts.map((post)=>({slug:post.slug,}))}"
        },
        {
          "type": "p",
          "text": "To statically render a subset of paths at build time, and the rest the first time they're visited at runtime, return a partial list of paths:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())// Render the first 10 posts at build timereturnposts.slice(0,10).map((post)=>({slug:post.slug,}))}"
        },
        {
          "type": "p",
          "text": "Then, by using thedynamicParamssegment config option, you can control what happens when a dynamic segment is visited that was not generated withgenerateStaticParams."
        },
        {
          "type": "code",
          "code": "// All posts besides the top 10 will be a 404exportconstdynamicParams=falseexportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())consttopPosts=posts.slice(0,10)returntopPosts.map((post)=>({slug:post.slug,}))}"
        },
        {
          "type": "p",
          "text": "To statically render all paths the first time they're visited, return an empty array (no paths will be rendered at build time) or utilizeexport const dynamic = 'force-static':"
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongenerateStaticParams() {return[]}"
        },
        {
          "type": "p",
          "text": "Good to know:You must always return an array fromgenerateStaticParams, even if it's empty. Otherwise, the route will be dynamically rendered."
        },
        {
          "type": "code",
          "code": "exportconstdynamic='force-static'"
        },
        {
          "type": "p",
          "text": "To prevent unspecified paths from being statically rendered at runtime, add theexport const dynamicParams = falseoption in a route segment. When this config option is used, only paths provided bygenerateStaticParamswill be served, and unspecified routes will 404 or match (in the case ofcatch-all routes)."
        },
        {
          "type": "p",
          "text": "You can generate params for dynamic segments above the current layout or page, butnot below. For example, given theapp/products/[category]/[product]route:"
        },
        {
          "type": "list",
          "items": [
            "app/products/[category]/[product]/page.jscan generate params forboth[category]and[product].",
            "app/products/[category]/layout.jscanonlygenerate params for[category]."
          ]
        },
        {
          "type": "p",
          "text": "There are two approaches to generating params for a route with multiple dynamic segments:"
        },
        {
          "type": "p",
          "text": "Generate multiple dynamic segments from the child route segment."
        },
        {
          "type": "code",
          "code": "// Generate segments for both [category] and [product]exportasyncfunctiongenerateStaticParams() {constproducts=awaitfetch('https://.../products').then((res)=>res.json())returnproducts.map((product)=>({category:product.category.slug,product:product.id,}))}exportdefaultfunctionPage({params,}:{params:Promise<{ category:string; product:string}>}) {// ...}"
        },
        {
          "type": "p",
          "text": "Generate the parent segments first and use the result to generate the child segments."
        },
        {
          "type": "code",
          "code": "// Generate segments for [category]exportasyncfunctiongenerateStaticParams() {constproducts=awaitfetch('https://.../products').then((res)=>res.json())returnproducts.map((product)=>({category:product.category.slug,}))}exportdefaultfunctionLayout({params,}:{params:Promise<{ category:string}>}) {// ...}"
        },
        {
          "type": "p",
          "text": "A child route segment'sgenerateStaticParamsfunction is executed once for each segment a parentgenerateStaticParamsgenerates. The childgenerateStaticParamsfunction can use theparamsreturned from the parentgenerateStaticParamsfunction to dynamically generate its own segments."
        },
        {
          "type": "code",
          "code": "// Generate segments for [product] using the `params` passed from// the parent segment's `generateStaticParams` functionexportasyncfunctiongenerateStaticParams({params: { category },}:{params:{ category:string}}) {constproducts=awaitfetch(`https://.../products?category=${category}`).then((res)=>res.json())returnproducts.map((product)=>({product:product.id,}))}exportdefaultfunctionPage({params,}:{params:Promise<{ category:string; product:string}>}) {// ...}"
        },
        {
          "type": "p",
          "text": "Good to know:fetchrequests are automaticallymemoizedfor the same data across allgenerate-prefixed functions, Layouts, Pages, and Server Components. Reactcachecan be usediffetchis unavailable."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/generate-viewport",
      "title": "Functions: generateViewport | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "You can customize the initial viewport of the page with the staticviewportobject or the dynamicgenerateViewportfunction."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Theviewportobject andgenerateViewportfunction exports areonly supported in Server Components.",
            "You cannot export both theviewportobject andgenerateViewportfunction from the same route segment.",
            "If you're coming from migratingmetadataexports, you can usemetadata-to-viewport-export codemodto update your changes."
          ]
        },
        {
          "type": "p",
          "text": "To define the viewport options, export aviewportobject from alayout.jsxorpage.jsxfile."
        },
        {
          "type": "code",
          "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={themeColor:'black',}exportdefaultfunctionPage() {}"
        },
        {
          "type": "p",
          "text": "generateViewportshould return aViewportobjectcontaining one or more viewport fields."
        },
        {
          "type": "code",
          "code": "exportfunctiongenerateViewport({ params }) {return{themeColor:'...',}}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If the viewport doesn't depend on runtime information, it should be defined using the staticviewportobjectrather thangenerateViewport."
          ]
        },
        {
          "type": "p",
          "text": "Learn more abouttheme-color. Simple theme color"
        },
        {
          "type": "code",
          "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={themeColor:'black',}"
        },
        {
          "type": "code",
          "code": "<metaname=\"theme-color\"content=\"black\"/>"
        },
        {
          "type": "p",
          "text": "With media attribute"
        },
        {
          "type": "code",
          "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={themeColor:[{ media:'(prefers-color-scheme: light)',color:'cyan'},{ media:'(prefers-color-scheme: dark)',color:'black'},],}"
        },
        {
          "type": "code",
          "code": "<metaname=\"theme-color\"media=\"(prefers-color-scheme: light)\"content=\"cyan\"/><metaname=\"theme-color\"media=\"(prefers-color-scheme: dark)\"content=\"black\"/>"
        },
        {
          "type": "p",
          "text": "Good to know: Theviewportmeta tag is automatically set, and manual configuration is usually unnecessary as the default is sufficient. However, the information is provided for completeness."
        },
        {
          "type": "code",
          "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={width:'device-width',initialScale:1,maximumScale:1,userScalable:false,// Also supported by less commonly used// interactiveWidget: 'resizes-visual',}"
        },
        {
          "type": "code",
          "code": "<metaname=\"viewport\"content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"/>"
        },
        {
          "type": "p",
          "text": "Learn more aboutcolor-scheme."
        },
        {
          "type": "code",
          "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={colorScheme:'dark',}"
        },
        {
          "type": "code",
          "code": "<metaname=\"color-scheme\"content=\"dark\"/>"
        },
        {
          "type": "p",
          "text": "You can add type safety to your viewport object by using theViewporttype. If you are using thebuilt-in TypeScript pluginin your IDE, you do not need to manually add the type, but you can still explicitly add it if you want."
        },
        {
          "type": "code",
          "code": "importtype{ Viewport }from'next'exportconstviewport:Viewport={themeColor:'black',}"
        },
        {
          "type": "code",
          "code": "importtype{ Viewport }from'next'exportfunctiongenerateViewport():Viewport{return{themeColor:'black',}}"
        },
        {
          "type": "code",
          "code": "importtype{ Viewport }from'next'typeProps={params:Promise<{ id:string}>searchParams:Promise<{ [key:string]:string|string[]|undefined}>}exportfunctiongenerateViewport({ params,searchParams }:Props):Viewport{return{themeColor:'black',}}exportdefaultfunctionPage({ params,searchParams }:Props) {}"
        },
        {
          "type": "p",
          "text": "For JavaScript projects, you can use JSDoc to add type safety."
        },
        {
          "type": "code",
          "code": "/**@type{import(\"next\").Viewport}*/exportconstviewport={themeColor:'black',}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/headers",
      "title": "Functions: headers | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "headersis anasyncfunction that allows you toreadthe HTTP incoming request headers from aServer Component."
        },
        {
          "type": "code",
          "code": "import{ headers }from'next/headers'exportdefaultasyncfunctionPage() {constheadersList=awaitheaders()constuserAgent=headersList.get('user-agent')}"
        },
        {
          "type": "p",
          "text": "headersdoes not take any parameters."
        },
        {
          "type": "p",
          "text": "headersreturns aread-onlyWeb Headersobject."
        },
        {
          "type": "list",
          "items": [
            "Headers.entries(): Returns aniteratorallowing to go through all key/value pairs contained in this object.",
            "Headers.forEach(): Executes a provided function once for each key/value pair in thisHeadersobject.",
            "Headers.get(): Returns aStringsequence of all the values of a header within aHeadersobject with a given name.",
            "Headers.has(): Returns a boolean stating whether aHeadersobject contains a certain header.",
            "Headers.keys(): Returns aniteratorallowing you to go through all keys of the key/value pairs contained in this object.",
            "Headers.values(): Returns aniteratorallowing you to go through all values of the key/value pairs contained in this object."
          ]
        },
        {
          "type": "list",
          "items": [
            "headersis anasynchronousfunction that returns a promise. You must useasync/awaitor React'susefunction.In version 14 and earlier,headerswas a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "In version 14 and earlier,headerswas a synchronous function. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "Sinceheadersis read-only, you cannotsetordeletethe outgoing request headers.",
            "headersis aDynamic APIwhose returned values cannot be known ahead of time. Using it in will opt a route intodynamic rendering."
          ]
        },
        {
          "type": "code",
          "code": "import{ headers }from'next/headers'exportdefaultasyncfunctionPage() {constauthorization=(awaitheaders()).get('authorization')constres=awaitfetch('...',{headers:{ authorization },// Forward the authorization header})constuser=awaitres.json()return<h1>{user.name}</h1>}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/image-response",
      "title": "Functions: ImageResponse | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "TheImageResponseconstructor allows you to generate dynamic images using JSX and CSS. This is useful for generating social media images such as Open Graph images, Twitter cards, and more. The following options are available forImageResponse:"
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'newImageResponse(element: ReactElement,options: {width?:number=1200height?:number=630emoji?:'twemoji'|'blobmoji'|'noto'|'openmoji'='twemoji',fonts?:{name:string,data:ArrayBuffer,weight:number,style:'normal'|'italic'}[]debug?:boolean=false// Options that will be passed to the HTTP responsestatus?:number=200statusText?:stringheaders?:Record<string,string>},)"
        },
        {
          "type": "p",
          "text": "Please refer toSatori’s documentationfor a list of supported HTML and CSS features."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/next-request",
      "title": "Functions: NextRequest | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "NextRequest extends theWeb Request APIwith additional convenience methods."
        },
        {
          "type": "p",
          "text": "Read or mutate theSet-Cookieheader of the request."
        },
        {
          "type": "p",
          "text": "Given a name, set a cookie with the given value on the request."
        },
        {
          "type": "code",
          "code": "// Given incoming request /home// Set a cookie to hide the banner// request will have a `Set-Cookie:show-banner=false;path=/home` headerrequest.cookies.set('show-banner','false')"
        },
        {
          "type": "p",
          "text": "Given a cookie name, return the value of the cookie. If the cookie is not found,undefinedis returned. If multiple cookies are found, the first one is returned."
        },
        {
          "type": "code",
          "code": "// Given incoming request /home// { name: 'show-banner', value: 'false', Path: '/home' }request.cookies.get('show-banner')"
        },
        {
          "type": "p",
          "text": "Given a cookie name, return the values of the cookie. If no name is given, return all cookies on the request."
        },
        {
          "type": "code",
          "code": "// Given incoming request /home// [//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },//   { name: 'experiments', value: 'winter-launch', Path: '/home' },// ]request.cookies.getAll('experiments')// Alternatively, get all cookies for the requestrequest.cookies.getAll()"
        },
        {
          "type": "p",
          "text": "Given a cookie name, delete the cookie from the request."
        },
        {
          "type": "code",
          "code": "// Returns true for deleted, false is nothing is deletedrequest.cookies.delete('experiments')"
        },
        {
          "type": "p",
          "text": "Given a cookie name, returntrueif the cookie exists on the request."
        },
        {
          "type": "code",
          "code": "// Returns true if cookie exists, false if it does notrequest.cookies.has('experiments')"
        },
        {
          "type": "p",
          "text": "Remove theSet-Cookieheader from the request."
        },
        {
          "type": "code",
          "code": "request.cookies.clear()"
        },
        {
          "type": "p",
          "text": "Extends the nativeURLAPI with additional convenience methods, including Next.js specific properties."
        },
        {
          "type": "code",
          "code": "// Given a request to /home, pathname is /homerequest.nextUrl.pathname// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }request.nextUrl.searchParams"
        },
        {
          "type": "p",
          "text": "The following options are available:"
        },
        {
          "type": "p",
          "text": "Note:The internationalization properties from the Pages Router are not available for usage in the App Router. Learn more aboutinternationalization with the App Router."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/next-response",
      "title": "Functions: NextResponse | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "NextResponse extends theWeb Response APIwith additional convenience methods."
        },
        {
          "type": "p",
          "text": "Read or mutate theSet-Cookieheader of the response."
        },
        {
          "type": "p",
          "text": "Given a name, set a cookie with the given value on the response."
        },
        {
          "type": "code",
          "code": "// Given incoming request /homeletresponse=NextResponse.next()// Set a cookie to hide the bannerresponse.cookies.set('show-banner','false')// Response will have a `Set-Cookie:show-banner=false;path=/home` headerreturnresponse"
        },
        {
          "type": "p",
          "text": "Given a cookie name, return the value of the cookie. If the cookie is not found,undefinedis returned. If multiple cookies are found, the first one is returned."
        },
        {
          "type": "code",
          "code": "// Given incoming request /homeletresponse=NextResponse.next()// { name: 'show-banner', value: 'false', Path: '/home' }response.cookies.get('show-banner')"
        },
        {
          "type": "p",
          "text": "Given a cookie name, return the values of the cookie. If no name is given, return all cookies on the response."
        },
        {
          "type": "code",
          "code": "// Given incoming request /homeletresponse=NextResponse.next()// [//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },//   { name: 'experiments', value: 'winter-launch', Path: '/home' },// ]response.cookies.getAll('experiments')// Alternatively, get all cookies for the responseresponse.cookies.getAll()"
        },
        {
          "type": "p",
          "text": "Given a cookie name, delete the cookie from the response."
        },
        {
          "type": "code",
          "code": "// Given incoming request /homeletresponse=NextResponse.next()// Returns true for deleted, false is nothing is deletedresponse.cookies.delete('experiments')"
        },
        {
          "type": "p",
          "text": "Produce a response with the given JSON body."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'exportasyncfunctionGET(request:Request) {returnNextResponse.json({ error:'Internal Server Error'},{ status:500})}"
        },
        {
          "type": "p",
          "text": "Produce a response that redirects to aURL."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'returnNextResponse.redirect(newURL('/new',request.url))"
        },
        {
          "type": "p",
          "text": "TheURLcan be created and modified before being used in theNextResponse.redirect()method. For example, you can use therequest.nextUrlproperty to get the current URL, and then modify it to redirect to a different URL."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'// Given an incoming request...constloginUrl=newURL('/login',request.url)// Add ?from=/incoming-url to the /login URLloginUrl.searchParams.set('from',request.nextUrl.pathname)// And redirect to the new URLreturnNextResponse.redirect(loginUrl)"
        },
        {
          "type": "p",
          "text": "Produce a response that rewrites (proxies) the givenURLwhile preserving the original URL."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'// Incoming request: /about, browser shows /about// Rewritten request: /proxy, browser shows /aboutreturnNextResponse.rewrite(newURL('/proxy',request.url))"
        },
        {
          "type": "p",
          "text": "Thenext()method is useful for Middleware, as it allows you to return early and continue routing."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'returnNextResponse.next()"
        },
        {
          "type": "p",
          "text": "You can also forwardheaderswhen producing the response:"
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'// Given an incoming request...constnewHeaders=newHeaders(request.headers)// Add a new headernewHeaders.set('x-version','123')// And produce a response with the new headersreturnNextResponse.next({request:{// New request headersheaders:newHeaders,},})"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/not-found",
      "title": "Functions: notFound | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "ThenotFoundfunction allows you to render thenot-found filewithin a route segment as well as inject a<meta name=\"robots\" content=\"noindex\" />tag."
        },
        {
          "type": "p",
          "text": "Invoking thenotFound()function throws aNEXT_NOT_FOUNDerror and terminates rendering of the route segment in which it was thrown. Specifying anot-foundfileallows you to gracefully handle such errors by rendering a Not Found UI within the segment."
        },
        {
          "type": "code",
          "code": "import{ notFound }from'next/navigation'asyncfunctionfetchUser(id) {constres=awaitfetch('https://...')if(!res.ok)returnundefinedreturnres.json()}exportdefaultasyncfunctionProfile({ params }) {constuser=awaitfetchUser(params.id)if(!user) {notFound()}// ...}"
        },
        {
          "type": "p",
          "text": "Good to know:notFound()does not require you to usereturn notFound()due to using the TypeScriptnevertype."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/permanentRedirect",
      "title": "Functions: permanentRedirect | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "ThepermanentRedirectfunction allows you to redirect the user to another URL.permanentRedirectcan be used in Server Components, Client Components,Route Handlers, andServer Actions. When used in a streaming context, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 308 (Permanent) HTTP redirect response to the caller. If a resource doesn't exist, you can use thenotFoundfunctioninstead."
        },
        {
          "type": "p",
          "text": "Good to know: If you prefer to return a 307 (Temporary) HTTP redirect instead of 308 (Permanent), you can use theredirectfunctioninstead."
        },
        {
          "type": "p",
          "text": "ThepermanentRedirectfunction accepts two arguments:"
        },
        {
          "type": "code",
          "code": "permanentRedirect(path,type)"
        },
        {
          "type": "p",
          "text": "By default,permanentRedirectwill usepush(adding a new entry to the browser history stack) inServer Actionsandreplace(replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying thetypeparameter. Thetypeparameter has no effect when used in Server Components."
        },
        {
          "type": "p",
          "text": "permanentRedirectdoes not return a value."
        },
        {
          "type": "p",
          "text": "Invoking thepermanentRedirect()function throws aNEXT_REDIRECTerror and terminates rendering of the route segment in which it was thrown."
        },
        {
          "type": "code",
          "code": "import{ permanentRedirect }from'next/navigation'asyncfunctionfetchTeam(id) {constres=awaitfetch('https://...')if(!res.ok)returnundefinedreturnres.json()}exportdefaultasyncfunctionProfile({ params }) {constteam=awaitfetchTeam(params.id)if(!team) {permanentRedirect('/login')}// ...}"
        },
        {
          "type": "p",
          "text": "Good to know:permanentRedirectdoes not require you to usereturn permanentRedirect()as it uses the TypeScriptnevertype."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/redirect",
      "title": "Functions: redirect | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theredirectfunction allows you to redirect the user to another URL.redirectcan be used inServer Components,Route Handlers, andServer Actions. When used in astreaming context, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 307 HTTP redirect response to the caller. If a resource doesn't exist, you can use thenotFoundfunctioninstead."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "In Server Actions and Route Handlers,redirectshould be called after thetry/catchblock.",
            "If you prefer to return a 308 (Permanent) HTTP redirect instead of 307 (Temporary), you can use thepermanentRedirectfunctioninstead."
          ]
        },
        {
          "type": "p",
          "text": "Theredirectfunction accepts two arguments:"
        },
        {
          "type": "code",
          "code": "redirect(path,type)"
        },
        {
          "type": "p",
          "text": "By default,redirectwill usepush(adding a new entry to the browser history stack) inServer Actionsandreplace(replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying thetypeparameter. Thetypeparameter has no effect when used in Server Components."
        },
        {
          "type": "p",
          "text": "redirectdoes not return a value."
        },
        {
          "type": "p",
          "text": "Invoking theredirect()function throws aNEXT_REDIRECTerror and terminates rendering of the route segment in which it was thrown."
        },
        {
          "type": "code",
          "code": "import{ redirect }from'next/navigation'asyncfunctionfetchTeam(id) {constres=awaitfetch('https://...')if(!res.ok)returnundefinedreturnres.json()}exportdefaultasyncfunctionProfile({ params }) {constteam=awaitfetchTeam(params.id)if(!team) {redirect('/login')}// ...}"
        },
        {
          "type": "p",
          "text": "Good to know:redirectdoes not require you to usereturn redirect()as it uses the TypeScriptnevertype."
        },
        {
          "type": "p",
          "text": "redirectcan be used in a Client Component through a Server Action. If you need to use an event handler to redirect the user, you can use theuseRouterhook."
        },
        {
          "type": "code",
          "code": "'use client'import{ navigate }from'./actions'exportfunctionClientRedirect() {return(<formaction={navigate}><inputtype=\"text\"name=\"id\"/><button>Submit</button></form>)}"
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'exportasyncfunctionnavigate(data:FormData) {redirect(`/posts/${data.get('id')}`)}"
        },
        {
          "type": "p",
          "text": "When usingredirect()you may notice that the status codes used are307for a temporary redirect, and308for a permanent redirect. While traditionally a302was used for a temporary redirect, and a301for a permanent redirect, many browsers changed the request method of the redirect, from aPOSTtoGETrequest when using a302, regardless of the origins request method. Taking the following example of a redirect from/usersto/people, if you make aPOSTrequest to/usersto create a new user, and are conforming to a302temporary redirect, the request method will be changed from aPOSTto aGETrequest. This doesn't make sense, as to create a new user, you should be making aPOSTrequest to/people, and not aGETrequest. The introduction of the307status code means that the request method is preserved asPOST."
        },
        {
          "type": "list",
          "items": [
            "302- Temporary redirect, will change the request method fromPOSTtoGET",
            "307- Temporary redirect, will preserve the request method asPOST"
          ]
        },
        {
          "type": "p",
          "text": "Theredirect()method uses a307by default, instead of a302temporary redirect, meaning your requests willalwaysbe preserved asPOSTrequests. Learn moreabout HTTP Redirects."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/revalidatePath",
      "title": "Functions: revalidatePath | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "revalidatePathallows you to purgecached dataon-demand for a specific path."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "revalidatePathis available in bothNode.js and Edge runtimes.",
            "revalidatePathonly invalidates the cache when the included path is next visited. This means callingrevalidatePathwith a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited.",
            "Currently,revalidatePathinvalidates all the routes in theclient-side Router Cachewhen used in a server action. This behavior is temporary and will be updated in the future to apply only to the specific path.",
            "UsingrevalidatePathinvalidatesonly the specific pathin theserver-side Route Cache."
          ]
        },
        {
          "type": "code",
          "code": "revalidatePath(path: string,type?:'page'|'layout'):void;"
        },
        {
          "type": "list",
          "items": [
            "path: Either a string representing the filesystem path associated with the data you want to revalidate (for example,/product/[slug]/page), or the literal route segment (for example,/product/123). Must be less than 1024 characters. This value is case-sensitive.",
            "type: (optional)'page'or'layout'string to change the type of path to revalidate. Ifpathcontains a dynamic segment (for example,/product/[slug]/page), this parameter is required. If path refers to the literal route segment, e.g.,/product/1for a dynamic page (e.g.,/product/[slug]/page), you should not providetype."
          ]
        },
        {
          "type": "p",
          "text": "revalidatePathdoes not return a value."
        },
        {
          "type": "code",
          "code": "import{ revalidatePath }from'next/cache'revalidatePath('/blog/post-1')"
        },
        {
          "type": "p",
          "text": "This will revalidate one specific URL on the next page visit."
        },
        {
          "type": "code",
          "code": "import{ revalidatePath }from'next/cache'revalidatePath('/blog/[slug]','page')// or with route groupsrevalidatePath('/(main)/blog/[slug]','page')"
        },
        {
          "type": "p",
          "text": "This will revalidate any URL that matches the providedpagefile on the next page visit. This willnotinvalidate pages beneath the specific page. For example,/blog/[slug]won't invalidate/blog/[slug]/[author]."
        },
        {
          "type": "code",
          "code": "import{ revalidatePath }from'next/cache'revalidatePath('/blog/[slug]','layout')// or with route groupsrevalidatePath('/(main)/post/[slug]','layout')"
        },
        {
          "type": "p",
          "text": "This will revalidate any URL that matches the providedlayoutfile on the next page visit. This will cause pages beneath with the same layout to revalidate on the next visit. For example, in the above case,/blog/[slug]/[another]would also revalidate on the next visit."
        },
        {
          "type": "code",
          "code": "import{ revalidatePath }from'next/cache'revalidatePath('/','layout')"
        },
        {
          "type": "p",
          "text": "This will purge the Client-side Router Cache, and revalidate the Data Cache on the next page visit."
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidatePath }from'next/cache'exportdefaultasyncfunctionsubmit() {awaitsubmitForm()revalidatePath('/')}"
        },
        {
          "type": "code",
          "code": "import{ revalidatePath }from'next/cache'importtype{ NextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {constpath=request.nextUrl.searchParams.get('path')if(path) {revalidatePath(path)returnResponse.json({ revalidated:true,now:Date.now() })}returnResponse.json({revalidated:false,now:Date.now(),message:'Missing path to revalidate',})}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/revalidateTag",
      "title": "Functions: revalidateTag | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "revalidateTagallows you to purgecached dataon-demand for a specific cache tag."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "revalidateTagis available in bothNode.js and Edge runtimes.",
            "revalidateTagonly invalidates the cache when the path is next visited. This means callingrevalidateTagwith a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited."
          ]
        },
        {
          "type": "code",
          "code": "revalidateTag(tag: string):void;"
        },
        {
          "type": "list",
          "items": [
            "tag: A string representing the cache tag associated with the data you want to revalidate. Must be less than or equal to 256 characters. This value is case-sensitive."
          ]
        },
        {
          "type": "p",
          "text": "You can add tags tofetchas follows:"
        },
        {
          "type": "code",
          "code": "fetch(url,{ next:{ tags:[...] } });"
        },
        {
          "type": "p",
          "text": "revalidateTagdoes not return a value."
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidateTag }from'next/cache'exportdefaultasyncfunctionsubmit() {awaitaddPost()revalidateTag('posts')}"
        },
        {
          "type": "code",
          "code": "importtype{ NextRequest }from'next/server'import{ revalidateTag }from'next/cache'exportasyncfunctionGET(request:NextRequest) {consttag=request.nextUrl.searchParams.get('tag')revalidateTag(tag)returnResponse.json({ revalidated:true,now:Date.now() })}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/unauthorized",
      "title": "Functions: unauthorized | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Theunauthorizedfunction throws an error that renders a Next.js 401 error page. It's useful for handling authorization errors in your application. You can customize the UI using theunauthorized.jsfile. To start usingunauthorized, enable the experimentalauthInterruptsconfiguration option in yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{authInterrupts:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "unauthorizedcan be invoked inServer Components,Server Actions, andRoute Handlers."
        },
        {
          "type": "code",
          "code": "import{ verifySession }from'@/app/lib/dal'import{ unauthorized }from'next/navigation'exportdefaultasyncfunctionDashboardPage() {constsession=awaitverifySession()if(!session) {unauthorized()}// Render thedashboardfor authenticated usersreturn(<main><h1>Welcome to the Dashboard</h1><p>Hi, {session.user.name}.</p></main>)}"
        },
        {
          "type": "list",
          "items": [
            "Theunauthorizedfunction cannot be called in theroot layout."
          ]
        },
        {
          "type": "p",
          "text": "You can useunauthorizedfunction to display theunauthorized.jsfile with a login UI."
        },
        {
          "type": "code",
          "code": "import{ verifySession }from'@/app/lib/dal'import{ unauthorized }from'next/navigation'exportdefaultasyncfunctionDashboardPage() {constsession=awaitverifySession()if(!session) {unauthorized()}return<div>Dashboard</div>}"
        },
        {
          "type": "code",
          "code": "importLoginfrom'@/app/components/Login'exportdefaultfunctionUnauthorizedPage() {return(<main><h1>401 - Unauthorized</h1><p>Please log in to access this page.</p><Login/></main>)}"
        },
        {
          "type": "p",
          "text": "You can invokeunauthorizedin Server Actions to ensure only authenticated users can perform specific mutations."
        },
        {
          "type": "code",
          "code": "'use server'import{ verifySession }from'@/app/lib/dal'import{ unauthorized }from'next/navigation'importdbfrom'@/app/lib/db'exportasyncfunctionupdateProfile(data:FormData) {constsession=awaitverifySession()// If the user is not authenticated, return a 401if(!session) {unauthorized()}// Proceed with mutation// ...}"
        },
        {
          "type": "p",
          "text": "You can useunauthorizedin Route Handlers to ensure only authenticated users can access the endpoint."
        },
        {
          "type": "code",
          "code": "import{ NextRequest,NextResponse }from'next/server'import{ verifySession }from'@/app/lib/dal'import{ unauthorized }from'next/navigation'exportasyncfunctionGET(req:NextRequest):Promise<NextResponse> {// Verify the user's sessionconstsession=awaitverifySession()// If no session exists, return a 401 and render unauthorized.tsxif(!session) {unauthorized()}// Fetch data// ...}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_after",
      "title": "Functions: after | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "afterallows you to schedule work to be executed after a response (or prerender) is finished. This is useful for tasks and other side effects that should not block the response, such as logging and analytics. It can be used inServer Components(includinggenerateMetadata),Server Actions,Route Handlers, andMiddleware. The function accepts a callback that will be executed after the response (or prerender) is finished:"
        },
        {
          "type": "code",
          "code": "import{ after }from'next/server'// Custom logging functionimport{ log }from'@/app/utils'exportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {after(()=>{// Execute after the layout is rendered and sent to the userlog()})return<>{children}</>}"
        },
        {
          "type": "p",
          "text": "Good to know:afteris not aDynamic APIand calling it does not cause a route to become dynamic. If it's used within a static page, the callback will execute at build time, or whenever a page is revalidated."
        },
        {
          "type": "list",
          "items": [
            "A callback function which will be executed after the response (or prerender) is finished."
          ]
        },
        {
          "type": "p",
          "text": "afterwill run for the platform's default or configured max duration of your route. If your platform supports it, you can configure the timeout limit using themaxDurationroute segment config."
        },
        {
          "type": "list",
          "items": [
            "afterwill be executed even if the response didn't complete successfully. Including when an error is thrown or whennotFoundorredirectis called.",
            "You can use Reactcacheto deduplicate functions called insideafter.",
            "aftercan be nested inside otheraftercalls, for example, you can create utility functions that wrapaftercalls to add additional functionality."
          ]
        },
        {
          "type": "p",
          "text": "The use case forafteris to process secondary tasks without blocking the primary response. It's similar to using the platform'swaitUntil()or removingawaitfrom a promise, but with the following differences:"
        },
        {
          "type": "list",
          "items": [
            "waitUntil(): accepts a promise and enqueues a task to be executed during the lifecycle of the request, whereasafteraccepts a callback that will be executedafterthe response is finished.",
            "Removingawait: starts executing during the response, which uses resources. It's also not reliable in serverless environments as the function stops computation immediately after the response is sent, potentially interrupting the task."
          ]
        },
        {
          "type": "p",
          "text": "We recommend usingafteras it has been designed to consider other Next.js APIs and contexts."
        },
        {
          "type": "p",
          "text": "You can use request APIs such ascookiesandheadersinsideafterinServer ActionsandRoute Handlers. This is useful for logging activity after a mutation. For example:"
        },
        {
          "type": "code",
          "code": "import{ after }from'next/server'import{ cookies,headers }from'next/headers'import{ logUserAction }from'@/app/utils'exportasyncfunctionPOST(request:Request) {// Perform mutation// ...// Log user activity for analyticsafter(async()=>{constuserAgent=(awaitheaders().get('user-agent'))||'unknown'constsessionCookie=(awaitcookies().get('session-id'))?.value||'anonymous'logUserAction({ sessionCookie,userAgent })})returnnewResponse(JSON.stringify({ status:'success'}),{status:200,headers:{'Content-Type':'application/json'},})}"
        },
        {
          "type": "p",
          "text": "However, you cannot use these request APIs insideafterinServer Components. This is because Next.js needs to know which part of the tree access the request APIs to supportPartial Prerendering, butafterruns after React's rendering lifecycle."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_cache",
      "title": "Functions: unstable_cache | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "In version 15, we recommend using theuse cachedirective instead. unstable_cacheallows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests."
        },
        {
          "type": "code",
          "code": "import{ getUser }from'./data';import{ unstable_cache }from'next/cache';constgetCachedUser=unstable_cache(async(id)=>getUser(id),['my-app-user']);exportdefaultasyncfunctionComponent({ userID }) {constuser=awaitgetCachedUser(userID);...}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Accessing dynamic data sources such asheadersorcookiesinside a cache scope is not supported. If you need this data inside a cached function useheadersoutside of the cached function and pass the required dynamic data in as an argument.",
            "This API uses Next.js' built-inData Cacheto persist the result across requests and deployments."
          ]
        },
        {
          "type": "p",
          "text": "Warning: This API is unstable and may change in the future. We will provide migration documentation and codemods, if needed, as this API stabilizes."
        },
        {
          "type": "code",
          "code": "constdata=unstable_cache(fetchData,keyParts,options)()"
        },
        {
          "type": "list",
          "items": [
            "fetchData: This is an asynchronous function that fetches the data you want to cache. It must be a function that returns aPromise.",
            "keyParts: This is an extra array of keys that further adds identification to the cache. By default,unstable_cachealready uses the arguments and the stringified version of your function as the cache key. It is optional in most cases; the only time you need to use it is when you use external variables without passing them as parameters. However, it is important to add closures used within the function if you do not pass them as parameters.",
            "options: This is an object that controls how the cache behaves. It can contain the following properties:tags: An array of tags that can be used to control cache invalidation. Next.js will not use this to uniquely identify the function.revalidate: The number of seconds after which the cache should be revalidated. Omit or passfalseto cache indefinitely or until matchingrevalidateTag()orrevalidatePath()methods are called.",
            "tags: An array of tags that can be used to control cache invalidation. Next.js will not use this to uniquely identify the function.",
            "revalidate: The number of seconds after which the cache should be revalidated. Omit or passfalseto cache indefinitely or until matchingrevalidateTag()orrevalidatePath()methods are called."
          ]
        },
        {
          "type": "p",
          "text": "unstable_cachereturns a function that when invoked, returns a Promise that resolves to the cached data. If the data is not in the cache, the provided function will be invoked, and its result will be cached and returned."
        },
        {
          "type": "code",
          "code": "import{ unstable_cache }from'next/cache'exportdefaultasyncfunctionPage({ params }:{ params:{ userId:string} }) {constgetCachedUser=unstable_cache(async()=>{return{ id:params.userId }},[params.userId],// add the user ID to the cache key{tags:['users'],revalidate:60,})//...}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath",
      "title": "Functions: unstable_expirePath | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "unstable_expirePathallows you to purgecached dataon-demand for a specific path."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "unstable_expirePathis available in bothNode.js and Edge runtimes.",
            "unstable_expirePathonly invalidates the cache when the included path is next visited. This means callingunstable_expirePathwith a dynamic route segment will not immediately trigger many expirations at once. The invalidation only happens when the path is next visited.",
            "Currently,unstable_expirePathinvalidates all the routes in theclient-side Router Cachewhen used in a server action. This behavior is temporary and will be updated in the future to apply only to the specific path.",
            "Usingunstable_expirePathinvalidatesonly the specific pathin theserver-side Route Cache."
          ]
        },
        {
          "type": "code",
          "code": "unstable_expirePath(path: string,type?:'page'|'layout'):void;"
        },
        {
          "type": "list",
          "items": [
            "path: Either a string representing the filesystem path associated with the data you want to expire (for example,/product/[slug]/page), or the literal route segment (for example,/product/123). Must be less than 1024 characters. This value is case-sensitive.",
            "type: (optional)'page'or'layout'string to change the type of path to expire. Ifpathcontains a dynamic segment (for example,/product/[slug]/page), this parameter is required. If path refers to the literal route segment, e.g.,/product/1for a dynamic page (e.g.,/product/[slug]/page), you should not providetype."
          ]
        },
        {
          "type": "p",
          "text": "unstable_expirePathdoes not return a value."
        },
        {
          "type": "code",
          "code": "import{ unstable_expirePath }from'next/cache'unstable_expirePath('/blog/post-1')"
        },
        {
          "type": "p",
          "text": "This will purge the cache for one specific URL on the next page visit."
        },
        {
          "type": "code",
          "code": "import{ unstable_expirePath }from'next/cache'unstable_expirePath('/blog/[slug]','page')// or with route groupsunstable_expirePath('/(main)/blog/[slug]','page')"
        },
        {
          "type": "p",
          "text": "This will purge the cache any URL that matches the providedpagefile on the next page visit. This willnotinvalidate pages beneath the specific page. For example,/blog/[slug]won't invalidate/blog/[slug]/[author]."
        },
        {
          "type": "code",
          "code": "import{ unstable_expirePath }from'next/cache'unstable_expirePath('/blog/[slug]','layout')// or with route groupsunstable_expirePath('/(main)/post/[slug]','layout')"
        },
        {
          "type": "p",
          "text": "This will purge the cache on any URL that matches the providedlayoutfile on the next page visit. This will cause pages beneath with the same layout to revalidate on the next visit. For example, in the above case,/blog/[slug]/[another]would also revalidate on the next visit."
        },
        {
          "type": "code",
          "code": "import{ unstable_expirePath }from'next/cache'unstable_expirePath('/','layout')"
        },
        {
          "type": "p",
          "text": "This will purge the Data Cache on the next page visit."
        },
        {
          "type": "p",
          "text": "You can callunstable_expirePathin a Server Action:"
        },
        {
          "type": "code",
          "code": "'use server'import{ unstable_expirePath }from'next/cache'exportdefaultasyncfunctionsubmit() {awaitsubmitForm()unstable_expirePath('/')}"
        },
        {
          "type": "p",
          "text": "You can callunstable_expirePathin a Route Handler:"
        },
        {
          "type": "code",
          "code": "import{ unstable_expirePath }from'next/cache'importtype{ NextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {constpath=request.nextUrl.searchParams.get('path')if(path) {unstable_expirePath(path)returnResponse.json({ revalidated:true,now:Date.now() })}returnResponse.json({expired:false,now:Date.now(),message:'Missing path to expire',})}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_expireTag",
      "title": "Functions: unstable_expireTag | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "unstable_expireTagallows you to purgecached dataon-demand for a specific cache tag."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "unstable_expireTagis available in bothNode.js and Edge runtimes.",
            "unstable_expireTagonly invalidates the cache when the path is next visited. This means callingunstable_expireTagwith a dynamic route segment will not immediately trigger many expirations at once. The invalidation only happens when the path is next visited."
          ]
        },
        {
          "type": "code",
          "code": "unstable_expireTag(...tags: string[]):void;"
        },
        {
          "type": "list",
          "items": [
            "tags: String arguments representing the cache tags associated with the data you want to revalidate. Must be less than or equal to 256 characters each. This value is case-sensitive."
          ]
        },
        {
          "type": "p",
          "text": "You can add tags tofetchas follows:"
        },
        {
          "type": "code",
          "code": "fetch(url,{ next:{ tags:[...] } });"
        },
        {
          "type": "p",
          "text": "unstable_expireTagdoes not return a value."
        },
        {
          "type": "p",
          "text": "You can invokeunstable_expireTagin a Server Action:"
        },
        {
          "type": "code",
          "code": "'use server'import{ unstable_expireTag }from'next/cache'exportdefaultasyncfunctionsubmit() {awaitaddPost()unstable_expireTag('posts','blog')}"
        },
        {
          "type": "p",
          "text": "You can invokeunstable_expireTagin a Route Handler:"
        },
        {
          "type": "code",
          "code": "importtype{ NextRequest }from'next/server'import{ unstable_expireTag }from'next/cache'exportasyncfunctionGET(request:NextRequest) {consttag=request.nextUrl.searchParams.get('tag')unstable_expireTag(tag)returnResponse.json({ revalidated:true,now:Date.now() })}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_noStore",
      "title": "Functions: unstable_noStore | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "In version 15, we recommend usingconnectioninstead ofunstable_noStore. unstable_noStorecan be used to declaratively opt out of static rendering and indicate a particular component should not be cached."
        },
        {
          "type": "code",
          "code": "import{ unstable_noStoreasnoStore }from'next/cache';exportdefaultasyncfunctionServerComponent() {noStore();constresult=awaitdb.query(...);...}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "unstable_noStoreis equivalent tocache: 'no-store'on afetch",
            "unstable_noStoreis preferred overexport const dynamic = 'force-dynamic'as it is more granular and can be used on a per-component basis"
          ]
        },
        {
          "type": "list",
          "items": [
            "Usingunstable_noStoreinsideunstable_cachewill not opt out of static generation. Instead, it will defer to the cache configuration to determine whether to cache the result or not."
          ]
        },
        {
          "type": "p",
          "text": "If you prefer not to pass additional options tofetch, likecache: 'no-store',next: { revalidate: 0 }or in cases wherefetchis not available, you can usenoStore()as a replacement for all of these use cases."
        },
        {
          "type": "code",
          "code": "import{ unstable_noStoreasnoStore }from'next/cache';exportdefaultasyncfunctionServerComponent() {noStore();constresult=awaitdb.query(...);...}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow",
      "title": "Functions: unstable_rethrow | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "unstable_rethrowcan be used to avoid catching internal errors thrown by Next.js when attempting to handle errors thrown in your application code. For example, calling thenotFoundfunction will throw an internal Next.js error and render thenot-found.jscomponent. However, if used inside atry/catchblock, the error will be caught, preventingnot-found.jsfrom rendering:"
        },
        {
          "type": "code",
          "code": "import{ notFound }from'next/navigation'exportdefaultasyncfunctionPage() {try{constpost=awaitfetch('https://.../posts/1').then((res)=>{if(res.status===404)notFound()if(!res.ok)thrownewError(res.statusText)returnres.json()})}catch(err) {console.error(err)}}"
        },
        {
          "type": "p",
          "text": "You can useunstable_rethrowAPI to re-throw the internal error and continue with the expected behavior:"
        },
        {
          "type": "code",
          "code": "import{ notFound,unstable_rethrow }from'next/navigation'exportdefaultasyncfunctionPage() {try{constpost=awaitfetch('https://.../posts/1').then((res)=>{if(res.status===404)notFound()if(!res.ok)thrownewError(res.statusText)returnres.json()})}catch(err) {unstable_rethrow(err)console.error(err)}}"
        },
        {
          "type": "p",
          "text": "The following Next.js APIs rely on throwing an error which should be rethrown and handled by Next.js itself:"
        },
        {
          "type": "list",
          "items": ["notFound()", "redirect()", "permanentRedirect()"]
        },
        {
          "type": "p",
          "text": "If a route segment is marked to throw an error unless it's static, a Dynamic API call will also throw an error that should similarly not be caught by the developer. Note that Partial Prerendering (PPR) affects this behavior as well. These APIs are:"
        },
        {
          "type": "list",
          "items": [
            "cookies",
            "headers",
            "searchParams",
            "fetch(..., { cache: 'no-store' })",
            "fetch(..., { next: { revalidate: 0 } })"
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "This method should be called at the top of the catch block, passing the error object as its only argument. It can also be used within a.catchhandler of a promise.",
            "If you ensure that your calls to APIs that throw are not wrapped in a try/catch then you don't need to useunstable_rethrow",
            "Any resource cleanup (like clearing intervals, timers, etc) would have to either happen prior to the call tounstable_rethrowor within afinallyblock."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/use-params",
      "title": "Functions: useParams | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "useParamsis aClient Componenthook that lets you read a route'sdynamic paramsfilled in by the current URL."
        },
        {
          "type": "code",
          "code": "'use client'import{ useParams }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constparams=useParams<{ tag:string; item:string}>()// Route -> /shop/[tag]/[item]// URL -> /shop/shoes/nike-air-max-97// `params` -> { tag: 'shoes', item: 'nike-air-max-97' }console.log(params)return'...'}"
        },
        {
          "type": "code",
          "code": "constparams=useParams()"
        },
        {
          "type": "p",
          "text": "useParamsdoes not take any parameters."
        },
        {
          "type": "p",
          "text": "useParamsreturns an object containing the current route's filled indynamic parameters."
        },
        {
          "type": "list",
          "items": [
            "Each property in the object is an active dynamic segment.",
            "The properties name is the segment's name, and the properties value is what the segment is filled in with.",
            "The properties value will either be astringor array ofstring's depending on thetype of dynamic segment.",
            "If the route contains no dynamic parameters,useParamsreturns an empty object.",
            "If used in Pages Router,useParamswill returnnullon the initial render and updates with properties following the rules above once the router is ready."
          ]
        },
        {
          "type": "p",
          "text": "For example:"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/use-pathname",
      "title": "Functions: usePathname | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "usePathnameis aClient Componenthook that lets you read the current URL'spathname."
        },
        {
          "type": "code",
          "code": "'use client'import{ usePathname }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constpathname=usePathname()return<p>Current pathname: {pathname}</p>}"
        },
        {
          "type": "p",
          "text": "usePathnameintentionally requires using aClient Component. It's important to note Client Components are not a de-optimization. They are an integral part of theServer Componentsarchitecture. For example, a Client Component withusePathnamewill be rendered into HTML on the initial page load. When navigating to a new route, this component does not need to be re-fetched. Instead, the component is downloaded once (in the client JavaScript bundle), and re-renders based on the current state."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Reading the current URL from aServer Componentis not supported. This design is intentional to support layout state being preserved across page navigations.",
            "Compatibility mode:usePathnamecan returnnullwhen afallback routeis being rendered or when apagesdirectory page has beenautomatically statically optimizedby Next.js and the router is not ready.When usingusePathnamewith rewrites innext.configorMiddleware,useStateanduseEffectmust also be used in order to avoid hydration mismatch errors. See therewrites examplefor more information.Next.js will automatically update your types if it detects both anappandpagesdirectory in your project.",
            "usePathnamecan returnnullwhen afallback routeis being rendered or when apagesdirectory page has beenautomatically statically optimizedby Next.js and the router is not ready.",
            "When usingusePathnamewith rewrites innext.configorMiddleware,useStateanduseEffectmust also be used in order to avoid hydration mismatch errors. See therewrites examplefor more information.",
            "Next.js will automatically update your types if it detects both anappandpagesdirectory in your project."
          ]
        },
        {
          "type": "code",
          "code": "constpathname=usePathname()"
        },
        {
          "type": "p",
          "text": "usePathnamedoes not take any parameters."
        },
        {
          "type": "p",
          "text": "usePathnamereturns a string of the current URL's pathname. For example:"
        },
        {
          "type": "code",
          "code": "'use client'import{ usePathname,useSearchParams }from'next/navigation'functionExampleClientComponent() {constpathname=usePathname()constsearchParams=useSearchParams()useEffect(()=>{// Do something here...},[pathname,searchParams])}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals",
      "title": "Functions: useReportWebVitals | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "TheuseReportWebVitalshook allows you to reportCore Web Vitals, and can be used in combination with your analytics service."
        },
        {
          "type": "code",
          "code": "'use client'import{ useReportWebVitals }from'next/web-vitals'exportfunctionWebVitals() {useReportWebVitals((metric)=>{console.log(metric)})}"
        },
        {
          "type": "code",
          "code": "import{ WebVitals }from'./_components/web-vitals'exportdefaultfunctionLayout({ children }) {return(<html><body><WebVitals/>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "Since theuseReportWebVitalshook requires the\"use client\"directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to theWebVitalscomponent."
        },
        {
          "type": "p",
          "text": "Themetricobject passed as the hook's argument consists of a number of properties:"
        },
        {
          "type": "list",
          "items": [
            "id: Unique identifier for the metric in the context of the current page load",
            "name: The name of the performance metric. Possible values include names ofWeb Vitalsmetrics (TTFB, FCP, LCP, FID, CLS) specific to a web application.",
            "delta: The difference between the current value and the previous value of the metric. The value is typically in milliseconds and represents the change in the metric's value over time.",
            "entries: An array ofPerformance Entriesassociated with the metric. These entries provide detailed information about the performance events related to the metric.",
            "navigationType: Indicates thetype of navigationthat triggered the metric collection. Possible values include\"navigate\",\"reload\",\"back_forward\", and\"prerender\".",
            "rating: A qualitative rating of the metric value, providing an assessment of the performance. Possible values are\"good\",\"needs-improvement\", and\"poor\". The rating is typically determined by comparing the metric value against predefined thresholds that indicate acceptable or suboptimal performance.",
            "value: The actual value or duration of the performance entry, typically in milliseconds. The value provides a quantitative measure of the performance aspect being tracked by the metric. The source of the value depends on the specific metric being measured and can come from variousPerformance APIs."
          ]
        },
        {
          "type": "p",
          "text": "Web Vitalsare a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:"
        },
        {
          "type": "list",
          "items": [
            "Time to First Byte(TTFB)",
            "First Contentful Paint(FCP)",
            "Largest Contentful Paint(LCP)",
            "First Input Delay(FID)",
            "Cumulative Layout Shift(CLS)",
            "Interaction to Next Paint(INP)"
          ]
        },
        {
          "type": "p",
          "text": "You can handle all the results of these metrics using thenameproperty."
        },
        {
          "type": "code",
          "code": "'use client'import{ useReportWebVitals }from'next/web-vitals'exportfunctionWebVitals() {useReportWebVitals((metric)=>{switch(metric.name) {case'FCP': {// handle FCP results}case'LCP': {// handle LCP results}// ...}})}"
        },
        {
          "type": "p",
          "text": "Vercel Speed Insightsdoes notuseReportWebVitals, but@vercel/speed-insightspackage instead.useReportWebVitalshook is useful in local development, or if you're using a different service for collecting Web Vitals."
        },
        {
          "type": "p",
          "text": "You can send results to any endpoint to measure and track\nreal user performance on your site. For example:"
        },
        {
          "type": "code",
          "code": "useReportWebVitals((metric)=>{constbody=JSON.stringify(metric)consturl='https://example.com/analytics'// Use `navigator.sendBeacon()` if available, falling back to `fetch()`.if(navigator.sendBeacon) {navigator.sendBeacon(url,body)}else{fetch(url,{ body,method:'POST',keepalive:true})}})"
        },
        {
          "type": "p",
          "text": "Good to know: If you useGoogle Analytics, using theidvalue can allow you to construct metric distributions manually (to calculate percentiles,\netc.)"
        },
        {
          "type": "code",
          "code": "useReportWebVitals(metric=>{// Use `window.gtag` if you initialized Google Analytics as this example:// https://github.com/vercel/next.js/blob/canary/examples/with-google-analyticswindow.gtag('event',metric.name,{value:Math.round(metric.name==='CLS'?metric.value*1000:metric.value),// values must be integersevent_label:metric.id,// id unique to current page loadnon_interaction:true,// avoids affecting bounce rate.});}"
        },
        {
          "type": "p",
          "text": "Read more aboutsending results to Google Analytics."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/use-router",
      "title": "Functions: useRouter | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "TheuseRouterhook allows you to programmatically change routes insideClient Components."
        },
        {
          "type": "p",
          "text": "Recommendation:Use the<Link>componentfor navigation unless you have a specific requirement for usinguseRouter."
        },
        {
          "type": "code",
          "code": "'use client'import{ useRouter }from'next/navigation'exportdefaultfunctionPage() {constrouter=useRouter()return(<buttontype=\"button\"onClick={()=>router.push('/dashboard')}>Dashboard</button>)}"
        },
        {
          "type": "list",
          "items": [
            "router.push(href: string, { scroll: boolean }): Perform a client-side navigation to the provided route. Adds a new entry into thebrowser’s historystack.",
            "router.replace(href: string, { scroll: boolean }): Perform a client-side navigation to the provided route without adding a new entry into thebrowser’s history stack.",
            "router.refresh(): Refresh the current route. Making a new request to the server, re-fetching data requests, and re-rendering Server Components. The client will merge the updated React Server Component payload without losing unaffected client-side React (e.g.useState) or browser state (e.g. scroll position).",
            "router.prefetch(href: string):Prefetchthe provided route for faster client-side transitions.",
            "router.back(): Navigate back to the previous route in the browser’s history stack.",
            "router.forward(): Navigate forwards to the next page in the browser’s history stack."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "You must not send untrusted or unsanitized URLs torouter.pushorrouter.replace, as this can open your site to cross-site scripting (XSS) vulnerabilities. For example,javascript:URLs sent torouter.pushorrouter.replacewill be executed in the context of your page.",
            "The<Link>component automatically prefetch routes as they become visible in the viewport.",
            "refresh()could re-produce the same result if fetch requests are cached. Other Dynamic APIs likecookiesandheaderscould also change the response."
          ]
        },
        {
          "type": "list",
          "items": [
            "TheuseRouterhook should be imported fromnext/navigationand notnext/routerwhen using the App Router",
            "Thepathnamestring has been removed and is replaced byusePathname()",
            "Thequeryobject has been removed and is replaced byuseSearchParams()",
            "router.eventshas been replaced.See below."
          ]
        },
        {
          "type": "p",
          "text": "View the full migration guide."
        },
        {
          "type": "p",
          "text": "You can listen for page changes by composing other Client Component hooks likeusePathnameanduseSearchParams."
        },
        {
          "type": "code",
          "code": "'use client'import{ useEffect }from'react'import{ usePathname,useSearchParams }from'next/navigation'exportfunctionNavigationEvents() {constpathname=usePathname()constsearchParams=useSearchParams()useEffect(()=>{consturl=`${pathname}?${searchParams}`console.log(url)// You can now use the current URL// ...},[pathname,searchParams])return'...'}"
        },
        {
          "type": "p",
          "text": "Which can be imported into a layout."
        },
        {
          "type": "code",
          "code": "import{ Suspense }from'react'import{ NavigationEvents }from'./components/navigation-events'exportdefaultfunctionLayout({ children }) {return(<htmllang=\"en\"><body>{children}<Suspensefallback={null}><NavigationEvents/></Suspense></body></html>)}"
        },
        {
          "type": "p",
          "text": "Good to know:<NavigationEvents>is wrapped in aSuspenseboundarybecauseuseSearchParams()causes client-side rendering up to the closestSuspenseboundary duringstatic rendering.Learn more."
        },
        {
          "type": "p",
          "text": "By default, Next.js will scroll to the top of the page when navigating to a new route. You can disable this behavior by passingscroll: falsetorouter.push()orrouter.replace()."
        },
        {
          "type": "code",
          "code": "'use client'import{ useRouter }from'next/navigation'exportdefaultfunctionPage() {constrouter=useRouter()return(<buttontype=\"button\"onClick={()=>router.push('/dashboard',{ scroll:false})}>Dashboard</button>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params",
      "title": "Functions: useSearchParams | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "useSearchParamsis aClient Componenthook that lets you read the current URL'squery string. useSearchParamsreturns aread-onlyversion of theURLSearchParamsinterface."
        },
        {
          "type": "code",
          "code": "'use client'import{ useSearchParams }from'next/navigation'exportdefaultfunctionSearchBar() {constsearchParams=useSearchParams()constsearch=searchParams.get('search')// URL -> `/dashboard?search=my-project`// `search` -> 'my-project'return<>Search: {search}</>}"
        },
        {
          "type": "code",
          "code": "constsearchParams=useSearchParams()"
        },
        {
          "type": "p",
          "text": "useSearchParamsdoes not take any parameters."
        },
        {
          "type": "p",
          "text": "useSearchParamsreturns aread-onlyversion of theURLSearchParamsinterface, which includes utility methods for reading the URL's query string:"
        },
        {
          "type": "list",
          "items": [
            "URLSearchParams.get(): Returns the first value associated with the search parameter. For example:URLsearchParams.get(\"a\")/dashboard?a=1'1'/dashboard?a=''/dashboard?b=3null/dashboard?a=1&a=2'1'- usegetAll()to get all values",
            "URLSearchParams.has(): Returns a boolean value indicating if the given parameter exists. For example:URLsearchParams.has(\"a\")/dashboard?a=1true/dashboard?b=3false",
            "Learn more about otherread-onlymethods ofURLSearchParams, including thegetAll(),keys(),values(),entries(),forEach(), andtoString()."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "useSearchParamsis aClient Componenthook and isnot supportedinServer Componentsto prevent stale values duringpartial rendering.",
            "If an application includes the/pagesdirectory,useSearchParamswill returnReadonlyURLSearchParams | null. Thenullvalue is for compatibility during migration since search params cannot be known during pre-rendering of a page that doesn't usegetServerSideProps"
          ]
        },
        {
          "type": "p",
          "text": "If a route isstatically rendered, callinguseSearchParamswill cause the Client Component tree up to the closestSuspenseboundaryto be client-side rendered. This allows a part of the route to be statically rendered while the dynamic part that usesuseSearchParamsis client-side rendered. We recommend wrapping the Client Component that usesuseSearchParamsin a<Suspense/>boundary. This will allow any Client Components above it to be statically rendered and sent as part of initial HTML.Example. For example:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useSearchParams }from'next/navigation'exportdefaultfunctionSearchBar() {constsearchParams=useSearchParams()constsearch=searchParams.get('search')// This will not be logged on the server when using static renderingconsole.log(search)return<>Search: {search}</>}"
        },
        {
          "type": "code",
          "code": "import{ Suspense }from'react'importSearchBarfrom'./search-bar'// This component passed as a fallback to the Suspense boundary// will be rendered in place of the search bar in the initial HTML.// When the value is available during React hydration the fallback// will be replaced with the `<SearchBar>` component.functionSearchBarFallback() {return<>placeholder</>}exportdefaultfunctionPage() {return(<><nav><Suspensefallback={<SearchBarFallback/>}><SearchBar/></Suspense></nav><h1>Dashboard</h1></>)}"
        },
        {
          "type": "p",
          "text": "If a route isdynamically rendered,useSearchParamswill be available on the server during the initial server render of the Client Component. For example:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useSearchParams }from'next/navigation'exportdefaultfunctionSearchBar() {constsearchParams=useSearchParams()constsearch=searchParams.get('search')// This will be logged on the server during the initial render// and on the client on subsequent navigations.console.log(search)return<>Search: {search}</>}"
        },
        {
          "type": "code",
          "code": "importSearchBarfrom'./search-bar'exportconstdynamic='force-dynamic'exportdefaultfunctionPage() {return(<><nav><SearchBar/></nav><h1>Dashboard</h1></>)}"
        },
        {
          "type": "p",
          "text": "Good to know: Setting thedynamicroute segment config optiontoforce-dynamiccan be used to force dynamic rendering."
        },
        {
          "type": "p",
          "text": "To access search params inPages(Server Components), use thesearchParamsprop."
        },
        {
          "type": "p",
          "text": "Unlike Pages,Layouts(Server Components)do notreceive thesearchParamsprop. This is because a shared layout isnot re-rendered during navigationwhich could lead to stalesearchParamsbetween navigations. Viewdetailed explanation. Instead, use the PagesearchParamsprop or theuseSearchParamshook in a Client Component, which is re-rendered on the client with the latestsearchParams."
        },
        {
          "type": "p",
          "text": "You can useuseRouterorLinkto set newsearchParams. After a navigation is performed, the currentpage.jswill receive an updatedsearchParamsprop."
        },
        {
          "type": "code",
          "code": "'use client'exportdefaultfunctionExampleClientComponent() {constrouter=useRouter()constpathname=usePathname()constsearchParams=useSearchParams()// Get a new searchParams string by merging the current// searchParams with a provided key/value pairconstcreateQueryString=useCallback((name:string,value:string)=>{constparams=newURLSearchParams(searchParams.toString())params.set(name,value)returnparams.toString()},[searchParams])return(<><p>Sort By</p>{/* using useRouter */}<buttononClick={()=>{// <pathname>?sort=ascrouter.push(pathname+'?'+createQueryString('sort','asc'))}}>ASC</button>{/* using <Link> */}<Linkhref={// <pathname>?sort=descpathname+'?'+createQueryString('sort','desc')}>DESC</Link></>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segment",
      "title": "Functions: useSelectedLayoutSegment | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "useSelectedLayoutSegmentis aClient Componenthook that lets you read the active route segmentone level belowthe Layout it is called from. It is useful for navigation UI, such as tabs inside a parent layout that change style depending on the active child segment."
        },
        {
          "type": "code",
          "code": "'use client'import{ useSelectedLayoutSegment }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constsegment=useSelectedLayoutSegment()return<p>Active segment: {segment}</p>}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "SinceuseSelectedLayoutSegmentis aClient Componenthook, and Layouts areServer Componentsby default,useSelectedLayoutSegmentis usually called via a Client Component that is imported into a Layout.",
            "useSelectedLayoutSegmentonly returns the segment one level down. To return all active segments, seeuseSelectedLayoutSegments"
          ]
        },
        {
          "type": "code",
          "code": "constsegment=useSelectedLayoutSegment(parallelRoutesKey?:string)"
        },
        {
          "type": "p",
          "text": "useSelectedLayoutSegmentoptionallyaccepts aparallelRoutesKey, which allows you to read the active route segment within that slot."
        },
        {
          "type": "p",
          "text": "useSelectedLayoutSegmentreturns a string of the active segment ornullif one doesn't exist. For example, given the Layouts and URLs below, the returned segment would be:"
        },
        {
          "type": "p",
          "text": "You can useuseSelectedLayoutSegmentto create an active link component that changes style depending on the active segment. For example, a featured posts list in the sidebar of a blog:"
        },
        {
          "type": "code",
          "code": "'use client'importLinkfrom'next/link'import{ useSelectedLayoutSegment }from'next/navigation'// This *client* component will be imported into abloglayoutexportdefaultfunctionBlogNavLink({slug,children,}:{slug:stringchildren:React.ReactNode}) {// Navigating to `/blog/hello-world` will return 'hello-world'// for the selected layout segmentconstsegment=useSelectedLayoutSegment()constisActive=slug===segmentreturn(<Linkhref={`/blog/${slug}`}// Change style depending on whether the link is activestyle={{ fontWeight:isActive?'bold':'normal'}}>{children}</Link>)}"
        },
        {
          "type": "code",
          "code": "// Import the Client Component into a parent Layout (Server Component)import{ BlogNavLink }from'./blog-nav-link'importgetFeaturedPostsfrom'./get-featured-posts'exportdefaultasyncfunctionLayout({children,}:{children:React.ReactNode}) {constfeaturedPosts=awaitgetFeaturedPosts()return(<div>{featuredPosts.map((post)=>(<divkey={post.id}><BlogNavLinkslug={post.slug}>{post.title}</BlogNavLink></div>))}<div>{children}</div></div>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segments",
      "title": "Functions: useSelectedLayoutSegments | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "useSelectedLayoutSegmentsis aClient Componenthook that lets you read the active route segmentsbelowthe Layout it is called from. It is useful for creating UI in parent Layouts that need knowledge of active child segments such as breadcrumbs."
        },
        {
          "type": "code",
          "code": "'use client'import{ useSelectedLayoutSegments }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constsegments=useSelectedLayoutSegments()return(<ul>{segments.map((segment,index)=>(<likey={index}>{segment}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "SinceuseSelectedLayoutSegmentsis aClient Componenthook, and Layouts areServer Componentsby default,useSelectedLayoutSegmentsis usually called via a Client Component that is imported into a Layout.",
            "The returned segments includeRoute Groups, which you might not want to be included in your UI. You can use thefilter()array method to remove items that start with a bracket."
          ]
        },
        {
          "type": "code",
          "code": "constsegments=useSelectedLayoutSegments(parallelRoutesKey?:string)"
        },
        {
          "type": "p",
          "text": "useSelectedLayoutSegmentsoptionallyaccepts aparallelRoutesKey, which allows you to read the active route segment within that slot."
        },
        {
          "type": "p",
          "text": "useSelectedLayoutSegmentsreturns an array of strings containing the active segments one level down from the layout the hook was called from. Or an empty array if none exist. For example, given the Layouts and URLs below, the returned segments would be:"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/functions/userAgent",
      "title": "Functions: userAgent | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "TheuserAgenthelper extends theWeb Request APIwith additional properties and methods to interact with the user agent object from the request."
        },
        {
          "type": "code",
          "code": "import{ NextRequest,NextResponse,userAgent }from'next/server'exportfunctionmiddleware(request:NextRequest) {consturl=request.nextUrlconst{device}=userAgent(request)constviewport=device.type==='mobile'?'mobile':'desktop'url.searchParams.set('viewport',viewport)returnNextResponse.rewrite(url)}"
        },
        {
          "type": "p",
          "text": "A boolean indicating whether the request comes from a known bot."
        },
        {
          "type": "p",
          "text": "An object containing information about the browser used in the request."
        },
        {
          "type": "list",
          "items": [
            "name: A string representing the browser's name, orundefinedif not identifiable.",
            "version: A string representing the browser's version, orundefined."
          ]
        },
        {
          "type": "p",
          "text": "An object containing information about the device used in the request."
        },
        {
          "type": "list",
          "items": [
            "model: A string representing the model of the device, orundefined.",
            "type: A string representing the type of the device, such asconsole,mobile,tablet,smarttv,wearable,embedded, orundefined.",
            "vendor: A string representing the vendor of the device, orundefined."
          ]
        },
        {
          "type": "p",
          "text": "An object containing information about the browser's engine."
        },
        {
          "type": "list",
          "items": [
            "name: A string representing the engine's name. Possible values include:Amaya,Blink,EdgeHTML,Flow,Gecko,Goanna,iCab,KHTML,Links,Lynx,NetFront,NetSurf,Presto,Tasman,Trident,w3m,WebKitorundefined.",
            "version: A string representing the engine's version, orundefined."
          ]
        },
        {
          "type": "p",
          "text": "An object containing information about the operating system."
        },
        {
          "type": "list",
          "items": [
            "name: A string representing the name of the OS, orundefined.",
            "version: A string representing the version of the OS, orundefined."
          ]
        },
        {
          "type": "p",
          "text": "An object containing information about the CPU architecture."
        },
        {
          "type": "list",
          "items": [
            "architecture: A string representing the architecture of the CPU. Possible values include:68k,amd64,arm,arm64,armhf,avr,ia32,ia64,irix,irix64,mips,mips64,pa-risc,ppc,sparc,sparc64orundefined"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/next-config-js/expireTime",
      "title": "next.config.js: expireTime | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "You can specify a customstale-while-revalidateexpire time for CDNs to consume in theCache-Controlheader for ISR enabled pages. Opennext.config.jsand add theexpireTimeconfig:"
        },
        {
          "type": "code",
          "code": "module.exports={// one hour in secondsexpireTime:3600,}"
        },
        {
          "type": "p",
          "text": "Now when sending theCache-Controlheader the expire time will be calculated depending on the specific revalidate period. For example, if you have a revalidate of 15 minutes on a path and the expire time is one hour the generatedCache-Controlheader will bes-maxage=900, stale-while-revalidate=2700so that it can stay stale for 15 minutes less than the configured expire time."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/next-config-js/logging",
      "title": "next.config.js: logging | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "You can configure the logging level and whether the full URL is logged to the console when running Next.js in development mode. Currently,loggingonly applies to data fetching using thefetchAPI. It does not yet apply to other logs inside of Next.js."
        },
        {
          "type": "code",
          "code": "module.exports={logging:{fetches:{fullUrl:true,},},}"
        },
        {
          "type": "p",
          "text": "Anyfetchrequests that are restored from theServer Components HMR cacheare not logged by default. However, this can be enabled by settinglogging.fetches.hmrRefreshestotrue."
        },
        {
          "type": "code",
          "code": "module.exports={logging:{fetches:{hmrRefreshes:true,},},}"
        },
        {
          "type": "p",
          "text": "In addition, you can disable the development logging by settingloggingtofalse."
        },
        {
          "type": "code",
          "code": "module.exports={logging:false,}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/next-config-js/optimizePackageImports",
      "title": "next.config.js: optimizePackageImports | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Some packages can export hundreds or thousands of modules, which can cause performance issues in development and production. Adding a package toexperimental.optimizePackageImportswill only load the modules you are actually using, while still giving you the convenience of writing import statements with many named exports."
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{optimizePackageImports:['package-name'],},}"
        },
        {
          "type": "p",
          "text": "The following libraries are optimized by default:"
        },
        {
          "type": "list",
          "items": [
            "lucide-react",
            "date-fns",
            "lodash-es",
            "ramda",
            "antd",
            "react-bootstrap",
            "ahooks",
            "@ant-design/icons",
            "@headlessui/react",
            "@headlessui-float/react",
            "@heroicons/react/20/solid",
            "@heroicons/react/24/solid",
            "@heroicons/react/24/outline",
            "@visx/visx",
            "@tremor/react",
            "rxjs",
            "@mui/material",
            "@mui/icons-material",
            "recharts",
            "react-use",
            "@material-ui/core",
            "@material-ui/icons",
            "@tabler/icons-react",
            "mui-core",
            "react-icons/*"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/next-config-js/output",
      "title": "next.config.js: output | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "During a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application. This feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package'sdependenciesinstalled to runnext start. Starting with Next.js 12, you can leverage Output File Tracing in the.next/directory to only include the necessary files. Furthermore, this removes the need for the deprecatedserverlesstarget which can cause various issues and also creates unnecessary duplication."
        },
        {
          "type": "p",
          "text": "Duringnext build, Next.js will use@vercel/nftto statically analyzeimport,require, andfsusage to determine all files that a page might load. Next.js' production server is also traced for its needed files and output at.next/next-server.js.nft.jsonwhich can be leveraged in production. To leverage the.nft.jsonfiles emitted to the.nextoutput directory, you can read the list of files in each trace that are relative to the.nft.jsonfile and then copy them to your deployment location."
        },
        {
          "type": "p",
          "text": "Next.js can automatically create astandalonefolder that copies only the necessary files for a production deployment including select files innode_modules. To leverage this automatic copying you can enable it in yournext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={output:'standalone',}"
        },
        {
          "type": "p",
          "text": "This will create a folder at.next/standalonewhich can then be deployed on its own without installingnode_modules. Additionally, a minimalserver.jsfile is also output which can be used instead ofnext start. This minimal server does not copy thepublicor.next/staticfolders by default as these should ideally be handled by a CDN instead, although these folders can be copied to thestandalone/publicandstandalone/.next/staticfolders manually, after whichserver.jsfile will serve these automatically. To copy these manually, you can use thecpcommand-line tool after younext build:"
        },
        {
          "type": "code",
          "code": "cp-rpublic.next/standalone/&&cp-r.next/static.next/standalone/.next/"
        },
        {
          "type": "p",
          "text": "To start your minimalserver.jsfile locally, run the following command:"
        },
        {
          "type": "code",
          "code": "node.next/standalone/server.js"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If your project needs to listen to a specific port or hostname, you can definePORTorHOSTNAMEenvironment variables before runningserver.js. For example, runPORT=8080 HOSTNAME=0.0.0.0 node server.jsto start the server onhttp://0.0.0.0:8080."
          ]
        },
        {
          "type": "list",
          "items": [
            "While tracing in monorepo setups, the project directory is used for tracing by default. Fornext build packages/web-app,packages/web-appwould be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can setoutputFileTracingRootin yournext.config.js."
          ]
        },
        {
          "type": "code",
          "code": "module.exports={// this includes files from the monorepo base two directories upoutputFileTracingRoot:path.join(__dirname,'../../'),}"
        },
        {
          "type": "list",
          "items": [
            "There are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can leverageoutputFileTracingExcludesandoutputFileTracingIncludesrespectively innext.config.js. Each config accepts an object withminimatch globsfor the key to match specific pages and a value of an array with globs relative to the project's root to either include or exclude in the trace."
          ]
        },
        {
          "type": "code",
          "code": "module.exports={outputFileTracingExcludes:{'/api/hello':['./un-necessary-folder/**/*'],},outputFileTracingIncludes:{'/api/another':['./necessary-folder/**/*'],'/api/login/\\\\[\\\\[\\\\.\\\\.\\\\.slug\\\\]\\\\]':['./node_modules/aws-crt/dist/bin/**/*',],},}"
        },
        {
          "type": "p",
          "text": "Note:The key ofoutputFileTracingIncludes/outputFileTracingExcludesis aglob, so special characters need to be escaped."
        },
        {
          "type": "list",
          "items": [
            "Currently, Next.js does not do anything with the emitted.nft.jsonfiles. The files must be read by your deployment platform, for exampleVercel, to create a minimal deployment. In a future release, a new command is planned to utilize these.nft.jsonfiles."
          ]
        },
        {
          "type": "p",
          "text": "Tracing dependencies can be slow because it requires very complex computations and analysis. We createdturbotracein Rust as a faster and smarter alternative to the JavaScript implementation. To enable it, you can add the following configuration to yournext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{turbotrace:{// control the log level of the turbotrace, default is `error`logLevel?:|'bug'|'fatal'|'error'|'warning'|'hint'|'note'|'suggestions'|'info',// control if the log of turbotrace should contain the details of the analysis, default is `false`logDetail?:boolean// show all log messages without limit// turbotrace only show 1 log message for each categories by defaultlogAll?:boolean// control the context directory of the turbotrace// files outside of the context directory will not be traced// set the `outputFileTracingRoot` has the same effect// if the `outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be usedcontextDirectory?:string// if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.// for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')processCwd?:string// control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.memoryLimit?:number},},}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverComponentsHmrCache",
      "title": "next.config.js: serverComponentsHmrCache | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The experimentalserverComponentsHmrCacheoption allows you to cachefetchresponses in Server Components across Hot Module Replacement (HMR) refreshes in local development. This results in faster responses and reduced costs for billed API calls. By default, the HMR cache applies to allfetchrequests, including those with thecache: 'no-store'option. This means uncached requests will not show fresh data between HMR refreshes. However, the cache will be cleared on navigation or full-page reloads. You can disable the HMR cache by settingserverComponentsHmrCachetofalsein yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{serverComponentsHmrCache:false,// defaults to true},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Good to know:For better observability, we recommend using thelogging.fetchesoption which logs fetch cache hits and misses in the console during development."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverExternalPackages",
      "title": "next.config.js: serverExternalPackages | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Dependencies used insideServer ComponentsandRoute Handlerswill automatically be bundled by Next.js. If a dependency is using Node.js specific features, you can choose to opt-out specific dependencies from the Server Components bundling and use native Node.jsrequire."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={serverExternalPackages:['@acme/ui'],}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Next.js includes ashort list of popular packagesthat currently are working on compatibility and automatically opt-ed out:"
        },
        {
          "type": "list",
          "items": [
            "@appsignal/nodejs",
            "@aws-sdk/client-s3",
            "@aws-sdk/s3-presigned-post",
            "@blockfrost/blockfrost-js",
            "@highlight-run/node",
            "@jpg-store/lucid-cardano",
            "@libsql/client",
            "@mikro-orm/core",
            "@mikro-orm/knex",
            "@node-rs/argon2",
            "@node-rs/bcrypt",
            "@prisma/client",
            "@react-pdf/renderer",
            "@sentry/profiling-node",
            "@sparticuz/chromium",
            "@swc/core",
            "argon2",
            "autoprefixer",
            "aws-crt",
            "bcrypt",
            "better-sqlite3",
            "canvas",
            "cpu-features",
            "cypress",
            "dd-trace",
            "eslint",
            "express",
            "firebase-admin",
            "import-in-the-middle",
            "isolated-vm",
            "jest",
            "jsdom",
            "keyv",
            "libsql",
            "mdx-bundler",
            "mongodb",
            "mongoose",
            "newrelic",
            "next-mdx-remote",
            "next-seo",
            "node-cron",
            "node-pty",
            "node-web-audio-api",
            "oslo",
            "pg",
            "playwright",
            "playwright-core",
            "postcss",
            "prettier",
            "prisma",
            "puppeteer-core",
            "puppeteer",
            "require-in-the-middle",
            "rimraf",
            "sharp",
            "shiki",
            "sqlite3",
            "ts-node",
            "ts-morph",
            "typescript",
            "vscode-oniguruma",
            "webpack",
            "websocket",
            "zeromq"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/next-config-js/staleTimes",
      "title": "next.config.js: staleTimes | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "staleTimesis an experimental feature that enables caching of page segments in theclient-side router cache. You can enable this experimental feature and provide custom revalidation times by setting the experimentalstaleTimesflag:"
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{staleTimes:{dynamic:30,static:180,},},}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Thestaticanddynamicproperties correspond with the time period (in seconds) based on different types oflink prefetching."
        },
        {
          "type": "list",
          "items": [
            "Thedynamicproperty is used when the page is neither statically generated nor fully prefetched (e.g. withprefetch={true}).Default: 0 seconds (not cached)",
            "Default: 0 seconds (not cached)",
            "Thestaticproperty is used for statically generated pages, or when theprefetchprop onLinkis set totrue, or when callingrouter.prefetch.Default: 5 minutes",
            "Default: 5 minutes"
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Loading boundariesare considered reusable for thestaticperiod defined in this configuration.",
            "This doesn't affectpartial rendering,meaning shared layouts won't automatically be refetched on every navigation, only the page segment that changes.",
            "This doesn't changeback/forward cachingbehavior to prevent layout shift and to prevent losing the browser scroll position."
          ]
        },
        {
          "type": "p",
          "text": "You can learn more about the Client Router Cachehere."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/next-config-js/staticGeneration",
      "title": "next.config.js: staticGeneration* | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "ThestaticGeneration*options allow you to configure the Static Generation process for advanced use cases."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{staticGenerationRetryCount:1,staticGenerationMaxConcurrency:8,staticGenerationMinPagesPerWorker:25,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "The following options are available:"
        },
        {
          "type": "list",
          "items": [
            "staticGenerationRetryCount: The number of times to retry a failed page generation before failing the build.",
            "staticGenerationMaxConcurrency: The maximum number of pages to be processed per worker.",
            "staticGenerationMinPagesPerWorker: The minimum number of pages to be processed before starting a new worker."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/api-reference/turbopack",
      "title": "API Reference: Turbopack | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Turbopackis an incremental bundler optimized for JavaScript and TypeScript, written in Rust, and built into Next.js. Turbopack can be used in Next.js in both thepagesandappdirectories for faster local development. To enable Turbopack, use the--turbopackflag when running the Next.js development server."
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"next dev --turbopack\",\"build\":\"next build\",\"start\":\"next start\",\"lint\":\"next lint\"}}"
        },
        {
          "type": "p",
          "text": "Turbopack in Next.js requires zero-configuration for most users and can be extended for more advanced use cases. To learn more about the currently supported features for Turbopack, view theAPI Reference."
        },
        {
          "type": "p",
          "text": "Turbopack currently only supportsnext devand does not supportnext build. We are currently working on support for builds as we move closer towards stability. These features are currently not supported:"
        },
        {
          "type": "list",
          "items": [
            "Turbopack leveragesLightning CSSwhich doesn't support some low usage CSS Modules features:localand:globalas standalone pseudo classes. Only the function variant is supported, for example::global(a).The @value rule which has been superseded by CSS variables.:importand:exportICSS rules.",
            ":localand:globalas standalone pseudo classes. Only the function variant is supported, for example::global(a).",
            "The @value rule which has been superseded by CSS variables.",
            ":importand:exportICSS rules.",
            "Invalid CSS comment syntaxsuch as//CSS comments should be written as/* comment */per the specification.Preprocessors such as Sass do support this alternative syntax for comments.",
            "CSS comments should be written as/* comment */per the specification.",
            "Preprocessors such as Sass do support this alternative syntax for comments.",
            "webpack()configuration innext.config.jsTurbopack replaces Webpack, this means that webpack configuration is not supported.To configure Turbopack,see the documentation.A subset ofWebpack loadersare supported in Turbopack.",
            "Turbopack replaces Webpack, this means that webpack configuration is not supported.",
            "To configure Turbopack,see the documentation.",
            "A subset ofWebpack loadersare supported in Turbopack.",
            "Babel (.babelrc)Turbopack leverages theSWCcompiler for all transpilation and optimizations. This means that Babel is not included by default.If you have a.babelrcfile, you might no longer need it because Next.js includes common Babel plugins as SWC transforms that can be enabled. You can read more about this in thecompiler documentation.If you still need to use Babel after verifying your particular use case is not covered, you can leverage Turbopack'ssupport for custom webpack loadersto includebabel-loader.",
            "Turbopack leverages theSWCcompiler for all transpilation and optimizations. This means that Babel is not included by default.",
            "If you have a.babelrcfile, you might no longer need it because Next.js includes common Babel plugins as SWC transforms that can be enabled. You can read more about this in thecompiler documentation.",
            "If you still need to use Babel after verifying your particular use case is not covered, you can leverage Turbopack'ssupport for custom webpack loadersto includebabel-loader.",
            "Creating a root layout automatically in App Router.This behavior is currently not supported since it changes input files, instead, an error will be shown for you to manually add a root layout in the desired location.",
            "This behavior is currently not supported since it changes input files, instead, an error will be shown for you to manually add a root layout in the desired location.",
            "@next/font(legacy font support).@next/fontis deprecated in favor ofnext/font.next/fontis fully supported with Turbopack.",
            "@next/fontis deprecated in favor ofnext/font.next/fontis fully supported with Turbopack.",
            "Relay transformsWe are planning to implement this in the future.",
            "We are planning to implement this in the future.",
            "Blocking.cssimports inpages/_document.tsxCurrently with webpack Next.js blocks importing.cssfiles inpages/_document.tsxWe are planning to implement this warning in the future.",
            "Currently with webpack Next.js blocks importing.cssfiles inpages/_document.tsx",
            "We are planning to implement this warning in the future.",
            "experimental.typedRoutesWe are planning to implement this in the future.",
            "We are planning to implement this in the future.",
            "experimental.nextScriptWorkersWe are planning to implement this in the future.",
            "We are planning to implement this in the future.",
            "experimental.sri.algorithmWe are planning to implement this in the future.",
            "We are planning to implement this in the future.",
            "experimental.fallbackNodePolyfillsWe are planning to implement this in the future.",
            "We are planning to implement this in the future.",
            "experimental.esmExternalsWe are currently not planning to support the legacy esmExternals configuration in Next.js with Turbopack.",
            "We are currently not planning to support the legacy esmExternals configuration in Next.js with Turbopack.",
            "AMP.We are currently not planning to support AMP in Next.js with Turbopack.",
            "We are currently not planning to support AMP in Next.js with Turbopack.",
            "Yarn PnPWe are currently not planning to support Yarn PnP in Next.js with Turbopack.",
            "We are currently not planning to support Yarn PnP in Next.js with Turbopack.",
            "experimental.urlImportsWe are currently not planning to supportexperimental.urlImportsin Next.js with Turbopack.",
            "We are currently not planning to supportexperimental.urlImportsin Next.js with Turbopack.",
            ":importand:exportICSS rulesWe are currently not planning to support:importand:exportICSS rules in Next.js with Turbopack asLightning CSSthe CSS parser Turbopack uses does not support these rules.",
            "We are currently not planning to support:importand:exportICSS rules in Next.js with Turbopack asLightning CSSthe CSS parser Turbopack uses does not support these rules.",
            "unstable_allowDynamicconfiguration in edge runtime"
          ]
        },
        {
          "type": "p",
          "text": "Trace files allow the Next.js team to investigate and improve performance metrics and memory usage. To generate a trace file, appendNEXT_TURBOPACK_TRACING=1to thenext dev --turbopackcommand, this will generate a.next/trace.logfile. When reporting issues related to Turbopack performance and memory usage, please include the trace file in yourGitHubissue."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application",
      "title": "App Router: Building Your Application | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js provides the building blocks to create flexible, full-stack web applications. The guides inBuilding Your Applicationexplain how to use these features and how to customize your application's behavior. The sections and pages are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your Next.js application. However, you can read them in any order or skip to the pages that apply to your use case. If you're new to Next.js, we recommend starting with theRouting,Rendering,Data FetchingandStylingsections, as they introduce the fundamental Next.js and web concepts to help you get started. Then, you can dive deeper into the other sections such asOptimizingandConfiguring. Finally, once you're ready, checkout theDeployingandUpgradingsections."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/authentication",
      "title": "Building Your Application: Authentication | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Understanding authentication is crucial for protecting your application's data. This page will guide you through what React and Next.js features to use to implement auth. Before starting, it helps to break down the process into three concepts:"
        },
        {
          "type": "list",
          "items": [
            "Authentication: Verifies if the user is who they say they are. It requires the user to prove their identity with something they have, such as a username and password.",
            "Session Management: Tracks the user's auth state across requests.",
            "Authorization: Decides what routes and data the user can access."
          ]
        },
        {
          "type": "p",
          "text": "This diagram shows the authentication flow using React and Next.js features:"
        },
        {
          "type": "p",
          "text": "The examples on this page walk through basic username and password auth for educational purposes. While you can implement a custom auth solution, for increased security and simplicity, we recommend using an authentication library. These offer built-in solutions for authentication, session management, and authorization, as well as additional features such as social logins, multi-factor authentication, and role-based access control. You can find a list in theAuth Librariessection."
        },
        {
          "type": "p",
          "text": "You can use the<form>element with React'sServer ActionsanduseActionStateto capture user credentials, validate form fields, and call your Authentication Provider's API or database. Since Server Actions always execute on the server, they provide a secure environment for handling authentication logic. Here are the steps to implement signup/login functionality:"
        },
        {
          "type": "p",
          "text": "To capture user credentials, create a form that invokes a Server Action on submission. For example, a signup form that accepts the user's name, email, and password:"
        },
        {
          "type": "code",
          "code": "import{ signup }from'@/app/actions/auth'exportfunctionSignupForm() {return(<formaction={signup}><div><labelhtmlFor=\"name\">Name</label><inputid=\"name\"name=\"name\"placeholder=\"Name\"/></div><div><labelhtmlFor=\"email\">Email</label><inputid=\"email\"name=\"email\"type=\"email\"placeholder=\"Email\"/></div><div><labelhtmlFor=\"password\">Password</label><inputid=\"password\"name=\"password\"type=\"password\"/></div><buttontype=\"submit\">Sign Up</button></form>)}"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionsignup(formData:FormData) {}"
        },
        {
          "type": "p",
          "text": "Use the Server Action to validate the form fields on the server. If your authentication provider doesn't provide form validation, you can use a schema validation library likeZodorYup. Using Zod as an example, you can define a form schema with appropriate error messages:"
        },
        {
          "type": "code",
          "code": "import{ z }from'zod'exportconstSignupFormSchema=z.object({name:z.string().min(2,{ message:'Name must be at least 2 characters long.'}).trim(),email:z.string().email({ message:'Please enter a valid email.'}).trim(),password:z.string().min(8,{ message:'Be at least 8 characters long'}).regex(/[a-zA-Z]/,{ message:'Contain at least one letter.'}).regex(/[0-9]/,{ message:'Contain at least one number.'}).regex(/[^a-zA-Z0-9]/,{message:'Contain at least one special character.',}).trim(),})exporttypeFormState=|{errors?:{name?:string[]email?:string[]password?:string[]}message?:string}|undefined"
        },
        {
          "type": "p",
          "text": "To prevent unnecessary calls to your authentication provider's API or database, you canreturnearly in the Server Action if any form fields do not match the defined schema."
        },
        {
          "type": "code",
          "code": "import{ SignupFormSchema,FormState }from'@/app/lib/definitions'exportasyncfunctionsignup(state:FormState,formData:FormData) {// Validate form fieldsconstvalidatedFields=SignupFormSchema.safeParse({name:formData.get('name'),email:formData.get('email'),password:formData.get('password'),})// If any form fields are invalid, return earlyif(!validatedFields.success) {return{errors:validatedFields.error.flatten().fieldErrors,}}// Call the provider or db to create a user...}"
        },
        {
          "type": "p",
          "text": "Back in your<SignupForm />, you can use React'suseActionStatehook to display validation errors while the form is submitting:"
        },
        {
          "type": "code",
          "code": "'use client'import{ signup }from'@/app/actions/auth'import{ useActionState }from'react'exportdefaultfunctionSignupForm() {const[state,action,pending]=useActionState(signup,undefined)return(<formaction={action}><div><labelhtmlFor=\"name\">Name</label><inputid=\"name\"name=\"name\"placeholder=\"Name\"/></div>{state?.errors?.name&&<p>{state.errors.name}</p>}<div><labelhtmlFor=\"email\">Email</label><inputid=\"email\"name=\"email\"placeholder=\"Email\"/></div>{state?.errors?.email&&<p>{state.errors.email}</p>}<div><labelhtmlFor=\"password\">Password</label><inputid=\"password\"name=\"password\"type=\"password\"/></div>{state?.errors?.password&&(<div><p>Password must:</p><ul>{state.errors.password.map((error)=>(<likey={error}>- {error}</li>))}</ul></div>)}<buttondisabled={pending}type=\"submit\">Sign Up</button></form>)}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "In React 19,useFormStatusincludes additional keys on the returned object, like data, method, and action. If you are not using React 19, only thependingkey is available.",
            "Before mutating data, you should always ensure a user is also authorized to perform the action. SeeAuthentication and Authorization."
          ]
        },
        {
          "type": "p",
          "text": "After validating form fields, you can create a new user account or check if the user exists by calling your authentication provider's API or database. Continuing from the previous example:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionsignup(state:FormState,formData:FormData) {// 1. Validate form fields// ...// 2. Prepare data for insertion into databaseconst{name,email,password}=validatedFields.data// e.g. Hash the user's password before storing itconsthashedPassword=awaitbcrypt.hash(password,10)// 3. Insert the user into the database or call an Auth Library's APIconstdata=awaitdb.insert(users).values({name,email,password:hashedPassword,}).returning({ id:users.id })constuser=data[0]if(!user) {return{message:'An error occurred while creating your account.',}}// TODO:// 4. Create user session// 5. Redirect user}"
        },
        {
          "type": "p",
          "text": "After successfully creating the user account or verifying the user credentials, you can create a session to manage the user's auth state. Depending on your session management strategy, the session can be stored in a cookie or database, or both. Continue to theSession Managementsection to learn more."
        },
        {
          "type": "p",
          "text": "Tips:"
        },
        {
          "type": "list",
          "items": [
            "The example above is verbose since it breaks down the authentication steps for the purpose of education. This highlights that implementing your own secure solution can quickly become complex. Consider using anAuth Libraryto simplify the process.",
            "To improve the user experience, you may want to check for duplicate emails or usernames earlier in the registration flow. For example, as the user types in a username or the input field loses focus. This can help prevent unnecessary form submissions and provide immediate feedback to the user. You can debounce requests with libraries such asuse-debounceto manage the frequency of these checks."
          ]
        },
        {
          "type": "p",
          "text": "Session management ensures that the user's authenticated state is preserved across requests. It involves creating, storing, refreshing, and deleting sessions or tokens. There are two types of sessions:"
        },
        {
          "type": "list",
          "items": [
            "Stateless: Session data (or a token) is stored in the browser's cookies. The cookie is sent with each request, allowing the session to be verified on the server. This method is simpler, but can be less secure if not implemented correctly.",
            "Database: Session data is stored in a database, with the user's browser only receiving the encrypted session ID. This method is more secure, but can be complex and use more server resources."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:While you can use either method, or both, we recommend using session management library such asiron-sessionorJose."
        },
        {
          "type": "p",
          "text": "To create and manage stateless sessions, there are a few steps you need to follow:"
        },
        {
          "type": "list",
          "items": [
            "Generate a secret key, which will be used to sign your session, and store it as anenvironment variable.",
            "Write logic to encrypt/decrypt session data using a session management library.",
            "Manage cookies using the Next.jscookiesAPI."
          ]
        },
        {
          "type": "p",
          "text": "In addition to the above, consider adding functionality toupdate (or refresh)the session when the user returns to the application, anddeletethe session when the user logs out."
        },
        {
          "type": "p",
          "text": "Good to know:Check if yourauth libraryincludes session management."
        },
        {
          "type": "p",
          "text": "There are a few ways you can generate secret key to sign your session. For example, you may choose to use theopensslcommand in your terminal:"
        },
        {
          "type": "code",
          "code": "opensslrand-base6432"
        },
        {
          "type": "p",
          "text": "This command generates a 32-character random string that you can use as your secret key and store in yourenvironment variables file:"
        },
        {
          "type": "code",
          "code": "SESSION_SECRET=your_secret_key"
        },
        {
          "type": "p",
          "text": "You can then reference this key in your session management logic:"
        },
        {
          "type": "code",
          "code": "constsecretKey=process.env.SESSION_SECRET"
        },
        {
          "type": "p",
          "text": "Next, you can use your preferredsession management libraryto encrypt and decrypt sessions. Continuing from the previous example, we'll useJose(compatible with theEdge Runtime) and React'sserver-onlypackage to ensure that your session management logic is only executed on the server."
        },
        {
          "type": "code",
          "code": "import'server-only'import{ SignJWT,jwtVerify }from'jose'import{ SessionPayload }from'@/app/lib/definitions'constsecretKey=process.env.SESSION_SECRETconstencodedKey=newTextEncoder().encode(secretKey)exportasyncfunctionencrypt(payload:SessionPayload) {returnnewSignJWT(payload).setProtectedHeader({ alg:'HS256'}).setIssuedAt().setExpirationTime('7d').sign(encodedKey)}exportasyncfunctiondecrypt(session:string|undefined='') {try{const{payload}=awaitjwtVerify(session,encodedKey,{algorithms:['HS256'],})returnpayload}catch(error) {console.log('Failed to verify session')}}"
        },
        {
          "type": "p",
          "text": "Tips:"
        },
        {
          "type": "list",
          "items": [
            "The payload should contain theminimum, unique user data that'll be used in subsequent requests, such as the user's ID, role, etc. It should not contain personally identifiable information like phone number, email address, credit card information, etc, or sensitive data like passwords."
          ]
        },
        {
          "type": "p",
          "text": "To store the session in a cookie, use the Next.jscookiesAPI. The cookie should be set on the server, and include the recommended options:"
        },
        {
          "type": "list",
          "items": [
            "HttpOnly: Prevents client-side JavaScript from accessing the cookie.",
            "Secure: Use https to send the cookie.",
            "SameSite: Specify whether the cookie can be sent with cross-site requests.",
            "Max-Age or Expires: Delete the cookie after a certain period.",
            "Path: Define the URL path for the cookie."
          ]
        },
        {
          "type": "p",
          "text": "Please refer toMDNfor more information on each of these options."
        },
        {
          "type": "code",
          "code": "import'server-only'import{ cookies }from'next/headers'exportasyncfunctioncreateSession(userId:string) {constexpiresAt=newDate(Date.now()+7*24*60*60*1000)constsession=awaitencrypt({ userId,expiresAt })constcookieStore=awaitcookies()cookieStore.set('session',session,{httpOnly:true,secure:true,expires:expiresAt,sameSite:'lax',path:'/',})}"
        },
        {
          "type": "p",
          "text": "Back in your Server Action, you can invoke thecreateSession()function, and use theredirect()API to redirect the user to the appropriate page:"
        },
        {
          "type": "code",
          "code": "import{ createSession }from'@/app/lib/session'exportasyncfunctionsignup(state:FormState,formData:FormData) {// Previous steps:// 1. Validate form fields// 2. Prepare data for insertion into database// 3. Insert the user into the database or call an Library API// Current steps:// 4. Create user sessionawaitcreateSession(user.id)// 5. Redirect userredirect('/profile')}"
        },
        {
          "type": "p",
          "text": "Tips:"
        },
        {
          "type": "list",
          "items": [
            "Cookies should be set on the serverto prevent client-side tampering.",
            "🎥 Watch: Learn more about stateless sessions and authentication with Next.js →YouTube (11 minutes)."
          ]
        },
        {
          "type": "p",
          "text": "You can also extend the session's expiration time. This is useful for keeping the user logged in after they access the application again. For example:"
        },
        {
          "type": "code",
          "code": "import'server-only'import{ cookies }from'next/headers'import{ decrypt }from'@/app/lib/session'exportasyncfunctionupdateSession() {constsession=(awaitcookies()).get('session')?.valueconstpayload=awaitdecrypt(session)if(!session||!payload) {returnnull}constexpires=newDate(Date.now()+7*24*60*60*1000)constcookieStore=awaitcookies()cookieStore.set('session',session,{httpOnly:true,secure:true,expires:expires,sameSite:'lax',path:'/',})}"
        },
        {
          "type": "p",
          "text": "Tip:Check if your auth library supports refresh tokens, which can be used to extend the user's session."
        },
        {
          "type": "p",
          "text": "To delete the session, you can delete the cookie:"
        },
        {
          "type": "code",
          "code": "import'server-only'import{ cookies }from'next/headers'exportasyncfunctiondeleteSession() {constcookieStore=awaitcookies()cookieStore.delete('session')}"
        },
        {
          "type": "p",
          "text": "Then you can reuse thedeleteSession()function in your application, for example, on logout:"
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'import{ deleteSession }from'@/app/lib/session'exportasyncfunctionlogout() {deleteSession()redirect('/login')}"
        },
        {
          "type": "p",
          "text": "To create and manage database sessions, you'll need to follow these steps:"
        },
        {
          "type": "list",
          "items": [
            "Create a table in your database to store session and data (or check if your Auth Library handles this).",
            "Implement functionality to insert, update, and delete sessions",
            "Encrypt the session ID before storing it in the user's browser, and ensure the database and cookie stay in sync (this is optional, but recommended for optimistic auth checks inMiddleware)."
          ]
        },
        {
          "type": "p",
          "text": "For example:"
        },
        {
          "type": "code",
          "code": "importcookiesfrom'next/headers'import{ db }from'@/app/lib/db'import{ encrypt }from'@/app/lib/session'exportasyncfunctioncreateSession(id:number) {constexpiresAt=newDate(Date.now()+7*24*60*60*1000)// 1. Create a session in the databaseconstdata=awaitdb.insert(sessions).values({userId:id,expiresAt,})// Return the session ID.returning({ id:sessions.id })constsessionId=data[0].id// 2. Encrypt the session IDconstsession=awaitencrypt({ sessionId,expiresAt })// 3. Store the session in cookies for optimistic auth checksconstcookieStore=awaitcookies()cookieStore.set('session',session,{httpOnly:true,secure:true,expires:expiresAt,sameSite:'lax',path:'/',})}"
        },
        {
          "type": "p",
          "text": "Tips:"
        },
        {
          "type": "list",
          "items": [
            "For faster data retrieval, consider using a database likeVercel Redis. However, you can also keep the session data in your primary database, and combine data requests to reduce the number of queries.",
            "You may opt to use database sessions for more advanced use cases, such as keeping track of the last time a user logged in, or number of active devices, or give users the ability to log out of all devices."
          ]
        },
        {
          "type": "p",
          "text": "After implementing session management, you'll need to add authorization logic to control what users can access and do within your application. Continue to theAuthorizationsection to learn more."
        },
        {
          "type": "p",
          "text": "Once a user is authenticated and a session is created, you can implement authorization to control what the user can access and do within your application. There are two main types of authorization checks:"
        },
        {
          "type": "list",
          "items": [
            "Optimistic: Checks if the user is authorized to access a route or perform an action using the session data stored in the cookie. These checks are useful for quick operations, such as showing/hiding UI elements or redirecting users based on permissions or roles.",
            "Secure: Checks if the user is authorized to access a route or perform an action using the session data stored in the database. These checks are more secure and are used for operations that require access to sensitive data or actions."
          ]
        },
        {
          "type": "p",
          "text": "For both cases, we recommend:"
        },
        {
          "type": "list",
          "items": [
            "Creating aData Access Layerto centralize your authorization logic",
            "UsingData Transfer Objects (DTO)to only return the necessary data",
            "Optionally useMiddlewareto perform optimistic checks."
          ]
        },
        {
          "type": "p",
          "text": "There are some cases where you may want to useMiddlewareand redirect users based on permissions:"
        },
        {
          "type": "list",
          "items": [
            "To perform optimistic checks. Since Middleware runs on every route, it's a good way to centralize redirect logic and pre-filter unauthorized users.",
            "To protect static routes that share data between users (e.g. content behind a paywall)."
          ]
        },
        {
          "type": "p",
          "text": "However, since Middleware runs on every route, includingprefetchedroutes, it's important to only read the session from the cookie (optimistic checks), and avoid database checks to prevent performance issues. For example:"
        },
        {
          "type": "code",
          "code": "import{ NextRequest,NextResponse }from'next/server'import{ decrypt }from'@/app/lib/session'import{ cookies }from'next/headers'// 1. Specify protected and public routesconstprotectedRoutes=['/dashboard']constpublicRoutes=['/login','/signup','/']exportdefaultasyncfunctionmiddleware(req:NextRequest) {// 2. Check if the current route is protected or publicconstpath=req.nextUrl.pathnameconstisProtectedRoute=protectedRoutes.includes(path)constisPublicRoute=publicRoutes.includes(path)// 3. Decrypt the session from the cookieconstcookie=(awaitcookies()).get('session')?.valueconstsession=awaitdecrypt(cookie)// 4. Redirect to /login if the user is not authenticatedif(isProtectedRoute&&!session?.userId) {returnNextResponse.redirect(newURL('/login',req.nextUrl))}// 5. Redirect to /dashboard if the user is authenticatedif(isPublicRoute&&session?.userId&&!req.nextUrl.pathname.startsWith('/dashboard')) {returnNextResponse.redirect(newURL('/dashboard',req.nextUrl))}returnNextResponse.next()}// Routes Middleware should not run onexportconstconfig={matcher:['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],}"
        },
        {
          "type": "p",
          "text": "While Middleware can be useful for initial checks, it should not be your only line of defense in protecting your data. The majority of security checks should be performed as close as possible to your data source, seeData Access Layerfor more information."
        },
        {
          "type": "p",
          "text": "Tips:"
        },
        {
          "type": "list",
          "items": [
            "In Middleware, you can also read cookies usingreq.cookies.get('session').value.",
            "Middleware uses theEdge Runtime, check if your Auth library and session management library are compatible.",
            "You can use thematcherproperty in the Middleware to specify which routes Middleware should run on. Although, for auth, it's recommended Middleware runs on all routes."
          ]
        },
        {
          "type": "p",
          "text": "We recommend creating a DAL to centralize your data requests and authorization logic. The DAL should include a function that verifies the user's session as they interact with your application. At the very least, the function should check if the session is valid, then redirect or return the user information needed to make further requests. For example, create a separate file for your DAL that includes averifySession()function. Then use React'scacheAPI to memoize the return value of the function during a React render pass:"
        },
        {
          "type": "code",
          "code": "import'server-only'import{ cookies }from'next/headers'import{ decrypt }from'@/app/lib/session'exportconstverifySession=cache(async()=>{constcookie=(awaitcookies()).get('session')?.valueconstsession=awaitdecrypt(cookie)if(!session?.userId) {redirect('/login')}return{ isAuth:true,userId:session.userId }})"
        },
        {
          "type": "p",
          "text": "You can then invoke theverifySession()function in your data requests, Server Actions, Route Handlers:"
        },
        {
          "type": "code",
          "code": "exportconstgetUser=cache(async()=>{constsession=awaitverifySession()if(!session)returnnulltry{constdata=awaitdb.query.users.findMany({where:eq(users.id,session.userId),// Explicitly return the columns you need rather than the whole user objectcolumns:{id:true,name:true,email:true,},})constuser=data[0]returnuser}catch(error) {console.log('Failed to fetch user')returnnull}})"
        },
        {
          "type": "p",
          "text": "Tip:"
        },
        {
          "type": "list",
          "items": [
            "A DAL can be used to protect data fetched at request time. However, for static routes that share data between users, data will be fetched at build time and not at request time. UseMiddlewareto protect static routes.",
            "For secure checks, you can check if the session is valid by comparing the session ID with your database. Use React'scachefunction to avoid unnecessary duplicate requests to the database during a render pass.",
            "You may wish to consolidate related data requests in a JavaScript class that runsverifySession()before any methods."
          ]
        },
        {
          "type": "p",
          "text": "When retrieving data, it's recommended you return only the necessary data that will be used in your application, and not entire objects. For example, if you're fetching user data, you might only return the user's ID and name, rather than the entire user object which could contain passwords, phone numbers, etc. However, if you have no control over the returned data structure, or are working in a team where you want to avoid whole objects being passed to the client, you can use strategies such as specifying what fields are safe to be exposed to the client."
        },
        {
          "type": "code",
          "code": "import'server-only'import{ getUser }from'@/app/lib/dal'functioncanSeeUsername(viewer:User) {returntrue}functioncanSeePhoneNumber(viewer:User,team:string) {returnviewer.isAdmin||team===viewer.team}exportasyncfunctiongetProfileDTO(slug:string) {constdata=awaitdb.query.users.findMany({where:eq(users.slug,slug),// Return specific columns here})constuser=data[0]constcurrentUser=awaitgetUser(user.id)// Or return only what's specific to the query herereturn{username:canSeeUsername(currentUser)?user.username:null,phonenumber:canSeePhoneNumber(currentUser,user.team)?user.phonenumber:null,}}"
        },
        {
          "type": "p",
          "text": "By centralizing your data requests and authorization logic in a DAL and using DTOs, you can ensure that all data requests are secure and consistent, making it easier to maintain, audit, and debug as your application scales."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "There are a couple of different ways you can define a DTO, from usingtoJSON(), to individual functions like the example above, or JS classes. Since these are JavaScript patterns and not a React or Next.js feature, we recommend doing some research to find the best pattern for your application.",
            "Learn more about security best practices in ourSecurity in Next.js article."
          ]
        },
        {
          "type": "p",
          "text": "Auth check inServer Componentsare useful for role-based access. For example, to conditionally render components based on the user's role:"
        },
        {
          "type": "code",
          "code": "import{ verifySession }from'@/app/lib/dal'exportdefaultfunctionDashboard() {constsession=awaitverifySession()constuserRole=session?.user?.role// Assuming 'role' is part of the session objectif(userRole==='admin') {return<AdminDashboard/>}elseif(userRole==='user') {return<UserDashboard/>}else{redirect('/login')}}"
        },
        {
          "type": "p",
          "text": "In the example, we use theverifySession()function from our DAL to check for 'admin', 'user', and unauthorized roles. This pattern ensures that each user interacts only with components appropriate to their role."
        },
        {
          "type": "p",
          "text": "Due toPartial Rendering, be cautious when doing checks inLayoutsas these don't re-render on navigation, meaning the user session won't be checked on every route change. Instead, you should do the checks close to your data source or the component that'll be conditionally rendered. For example, consider a shared layout that fetches the user data and displays the user image in a nav. Instead of doing the auth check in the layout, you should fetch the user data (getUser()) in the layout and do the auth check in your DAL. This guarantees that wherevergetUser()is called within your application, the auth check is performed, and prevents developers forgetting to check the user is authorized to access the data."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionLayout({children,}:{children:React.ReactNode;}) {constuser=awaitgetUser();return(// ...)}"
        },
        {
          "type": "code",
          "code": "exportconstgetUser=cache(async()=>{constsession=awaitverifySession()if(!session)returnnull// Get user ID from session and fetch data})"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "A common pattern in SPAs is toreturn nullin a layout or a top-level component if a user is not authorized. This pattern isnot recommendedsince Next.js applications have multiple entry points, which will not prevent nested route segments and Server Actions from being accessed."
          ]
        },
        {
          "type": "p",
          "text": "TreatServer Actionswith the same security considerations as public-facing API endpoints, and verify if the user is allowed to perform a mutation. In the example below, we check the user's role before allowing the action to proceed:"
        },
        {
          "type": "code",
          "code": "'use server'import{ verifySession }from'@/app/lib/dal'exportasyncfunctionserverAction(formData:FormData) {constsession=awaitverifySession()constuserRole=session?.user?.role// Return early if user is not authorized to perform the actionif(userRole!=='admin') {returnnull}// Proceed with the action for authorized users}"
        },
        {
          "type": "p",
          "text": "TreatRoute Handlerswith the same security considerations as public-facing API endpoints, and verify if the user is allowed to access the Route Handler. For example:"
        },
        {
          "type": "code",
          "code": "import{ verifySession }from'@/app/lib/dal'exportasyncfunctionGET() {// User authentication and role verificationconstsession=awaitverifySession()// Check if the user is authenticatedif(!session) {// User is not authenticatedreturnnewResponse(null,{ status:401})}// Check if the user has the 'admin' roleif(session.user.role!=='admin') {// User is authenticated but does not have the right permissionsreturnnewResponse(null,{ status:403})}// Continue for authorized users}"
        },
        {
          "type": "p",
          "text": "The example above demonstrates a Route Handler with a two-tier security check. It first checks for an active session, and then verifies if the logged-in user is an 'admin'."
        },
        {
          "type": "p",
          "text": "Using context providers for auth works due tointerleaving. However, Reactcontextis not supported in Server Components, making them only applicable to Client Components. This works, but any child Server Components will be rendered on the server first, and will not have access to the context provider’s session data:"
        },
        {
          "type": "code",
          "code": "import{ ContextProvider }from'auth-lib'exportdefaultfunctionRootLayout({ children }) {return(<htmllang=\"en\"><body><ContextProvider>{children}</ContextProvider></body></html>)}"
        },
        {
          "type": "code",
          "code": "\"use client\";import{ useSession }from\"auth-lib\";exportdefaultfunctionProfile() {const{userId}=useSession();const{data}=useSWR(`/api/user/${userId}`,fetcher)return(// ...);}"
        },
        {
          "type": "p",
          "text": "If session data is needed in Client Components (e.g. for client-side data fetching), use React’staintUniqueValueAPI to prevent sensitive session data from being exposed to the client."
        },
        {
          "type": "p",
          "text": "Now that you've learned about authentication in Next.js, here are Next.js-compatible libraries and resources to help you implement secure authentication and session management:"
        },
        {
          "type": "list",
          "items": [
            "Auth0",
            "Clerk",
            "Kinde",
            "NextAuth.js",
            "Ory",
            "Stack Auth",
            "Supabase",
            "Stytch",
            "WorkOS"
          ]
        },
        {
          "type": "list",
          "items": ["Iron Session", "Jose"]
        },
        {
          "type": "p",
          "text": "To continue learning about authentication and security, check out the following resources:"
        },
        {
          "type": "list",
          "items": [
            "How to think about security in Next.js",
            "Understanding XSS Attacks",
            "Understanding CSRF Attacks",
            "The Copenhagen Book"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/caching",
      "title": "Building Your Application: Caching | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js improves your application's performance and reduces costs by caching rendering work and data requests. This page provides an in-depth look at Next.js caching mechanisms, the APIs you can use to configure them, and how they interact with each other."
        },
        {
          "type": "p",
          "text": "Good to know: This page helps you understand how Next.js works under the hood but isnotessential knowledge to be productive with Next.js. Most of Next.js' caching heuristics are determined by your API usage and have defaults for the best performance with zero or minimal configuration. If you instead want to jump to examples,start here."
        },
        {
          "type": "p",
          "text": "Here's a high-level overview of the different caching mechanisms and their purpose:"
        },
        {
          "type": "p",
          "text": "By default, Next.js will cache as much as possible to improve performance and reduce cost. This means routes arestatically renderedand data requests arecachedunless you opt out. The diagram below shows the default caching behavior: when a route is statically rendered at build time and when a static route is first visited."
        },
        {
          "type": "p",
          "text": "Caching behavior changes depending on whether the route is statically or dynamically rendered, data is cached or uncached, and whether a request is part of an initial visit or a subsequent navigation. Depending on your use case, you can configure the caching behavior for individual routes and data requests."
        },
        {
          "type": "p",
          "text": "React extends thefetchAPIto automaticallymemoizerequests that have the same URL and options. This means you can call a fetch function for the same data in multiple places in a React component tree while only executing it once."
        },
        {
          "type": "p",
          "text": "For example, if you need to use the same data across a route (e.g. in a Layout, Page, and multiple components), you do not have to fetch data at the top of the tree, and forward props between components. Instead, you can fetch data in the components that need it without worrying about the performance implications of making multiple requests across the network for the same data."
        },
        {
          "type": "code",
          "code": "asyncfunctiongetItem() {// The `fetch` function is automatically memoized and the result// is cachedconstres=awaitfetch('https://.../item/1')returnres.json()}// This function is called twice, but only executed the first timeconstitem=awaitgetItem()// cache MISS// The second call could be anywhere in your routeconstitem=awaitgetItem()// cache HIT"
        },
        {
          "type": "p",
          "text": "How Request Memoization Works"
        },
        {
          "type": "list",
          "items": [
            "While rendering a route, the first time a particular request is called, its result will not be in memory and it'll be a cacheMISS.",
            "Therefore, the function will be executed, and the data will be fetched from the external source, and the result will be stored in memory.",
            "Subsequent function calls of the request in the same render pass will be a cacheHIT, and the data will be returned from memory without executing the function.",
            "Once the route has been rendered and the rendering pass is complete, memory is \"reset\" and all request memoization entries are cleared."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Request memoization is a React feature, not a Next.js feature. It's included here to show how it interacts with the other caching mechanisms.",
            "Memoization only applies to theGETmethod infetchrequests.",
            "Memoization only applies to the React Component tree, this means:It applies tofetchrequests ingenerateMetadata,generateStaticParams, Layouts, Pages, and other Server Components.It doesn't apply tofetchrequests in Route Handlers as they are not a part of the React component tree.",
            "It applies tofetchrequests ingenerateMetadata,generateStaticParams, Layouts, Pages, and other Server Components.",
            "It doesn't apply tofetchrequests in Route Handlers as they are not a part of the React component tree.",
            "For cases wherefetchis not suitable (e.g. some database clients, CMS clients, or GraphQL clients), you can use theReactcachefunctionto memoize functions."
          ]
        },
        {
          "type": "p",
          "text": "The cache lasts the lifetime of a server request until the React component tree has finished rendering."
        },
        {
          "type": "p",
          "text": "Since the memoization is not shared across server requests and only applies during rendering, there is no need to revalidate it."
        },
        {
          "type": "p",
          "text": "Memoization only applies to theGETmethod infetchrequests, other methods, such asPOSTandDELETE, are not memoized. This default behavior is a React optimization and we do not recommend opting out of it. To manage individual requests, you can use thesignalproperty fromAbortController. However, this will not opt requests out of memoization, rather, abort in-flight requests."
        },
        {
          "type": "code",
          "code": "const{signal}=newAbortController()fetch(url,{ signal })"
        },
        {
          "type": "p",
          "text": "Next.js has a built-in Data Cache thatpersiststhe result of data fetches across incomingserver requestsanddeployments. This is possible because Next.js extends the nativefetchAPI to allow each request on the server to set its own persistent caching semantics."
        },
        {
          "type": "p",
          "text": "Good to know: In the browser, thecacheoption offetchindicates how a request will interact with the browser's HTTP cache, in Next.js, thecacheoption indicates how a server-side request will interact with the server's Data Cache."
        },
        {
          "type": "p",
          "text": "You can use thecacheandnext.revalidateoptions offetchto configure the caching behavior. How the Data Cache Works"
        },
        {
          "type": "list",
          "items": [
            "The first time afetchrequest with the'force-cache'option is called during rendering, Next.js checks the Data Cache for a cached response.",
            "If a cached response is found, it's returned immediately andmemoized.",
            "If a cached response is not found, the request is made to the data source, the result is stored in the Data Cache, and memoized.",
            "For uncached data (e.g. nocacheoption defined or using{ cache: 'no-store' }), the result is always fetched from the data source, and memoized.",
            "Whether the data is cached or uncached, the requests are always memoized to avoid making duplicate requests for the same data during a React render pass."
          ]
        },
        {
          "type": "p",
          "text": "Differences between the Data Cache and Request Memoization While both caching mechanisms help improve performance by re-using cached data, the Data Cache is persistent across incoming requests and deployments, whereas memoization only lasts the lifetime of a request."
        },
        {
          "type": "p",
          "text": "The Data Cache is persistent across incoming requests and deployments unless you revalidate or opt-out."
        },
        {
          "type": "p",
          "text": "Cached data can be revalidated in two ways, with:"
        },
        {
          "type": "list",
          "items": [
            "Time-based Revalidation: Revalidate data after a certain amount of time has passed and a new request is made. This is useful for data that changes infrequently and freshness is not as critical.",
            "On-demand Revalidation:Revalidate data based on an event (e.g. form submission). On-demand revalidation can use a tag-based or path-based approach to revalidate groups of data at once. This is useful when you want to ensure the latest data is shown as soon as possible (e.g. when content from your headless CMS is updated)."
          ]
        },
        {
          "type": "p",
          "text": "To revalidate data at a timed interval, you can use thenext.revalidateoption offetchto set the cache lifetime of a resource (in seconds)."
        },
        {
          "type": "code",
          "code": "// Revalidate at most every hourfetch('https://...',{ next:{ revalidate:3600} })"
        },
        {
          "type": "p",
          "text": "Alternatively, you can useRoute Segment Config optionsto configure allfetchrequests in a segment or for cases where you're not able to usefetch. How Time-based Revalidation Works"
        },
        {
          "type": "list",
          "items": [
            "The first time a fetch request withrevalidateis called, the data will be fetched from the external data source and stored in the Data Cache.",
            "Any requests that are called within the specified timeframe (e.g. 60-seconds) will return the cached data.",
            "After the timeframe, the next request will still return the cached (now stale) data.Next.js will trigger a revalidation of the data in the background.Once the data is fetched successfully, Next.js will update the Data Cache with the fresh data.If the background revalidation fails, the previous data will be kept unaltered.",
            "Next.js will trigger a revalidation of the data in the background.",
            "Once the data is fetched successfully, Next.js will update the Data Cache with the fresh data.",
            "If the background revalidation fails, the previous data will be kept unaltered."
          ]
        },
        {
          "type": "p",
          "text": "This is similar tostale-while-revalidatebehavior."
        },
        {
          "type": "p",
          "text": "Data can be revalidated on-demand by path (revalidatePath) or by cache tag (revalidateTag). How On-Demand Revalidation Works"
        },
        {
          "type": "list",
          "items": [
            "The first time afetchrequest is called, the data will be fetched from the external data source and stored in the Data Cache.",
            "When an on-demand revalidation is triggered, the appropriate cache entries will be purged from the cache.This is different from time-based revalidation, which keeps the stale data in the cache until the fresh data is fetched.",
            "This is different from time-based revalidation, which keeps the stale data in the cache until the fresh data is fetched.",
            "The next time a request is made, it will be a cacheMISSagain, and the data will be fetched from the external data source and stored in the Data Cache."
          ]
        },
        {
          "type": "p",
          "text": "If you donotwant to cache the response fromfetch, you can do the following:"
        },
        {
          "type": "code",
          "code": "letdata=awaitfetch('https://api.vercel.app/blog',{ cache:'no-store'})"
        },
        {
          "type": "p",
          "text": "Related terms: You may see the termsAutomatic Static Optimization,Static Site Generation, orStatic Renderingbeing used interchangeably to refer to the process of rendering and caching routes of your application at build time."
        },
        {
          "type": "p",
          "text": "Next.js automatically renders and caches routes at build time. This is an optimization that allows you to serve the cached route instead of rendering on the server for every request, resulting in faster page loads. To understand how the Full Route Cache works, it's helpful to look at how React handles rendering, and how Next.js caches the result:"
        },
        {
          "type": "p",
          "text": "On the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks: by individual routes segments and Suspense boundaries. Each chunk is rendered in two steps:"
        },
        {
          "type": "list",
          "items": [
            "React renders Server Components into a special data format, optimized for streaming, called theReact Server Component Payload.",
            "Next.js uses the React Server Component Payload and Client Component JavaScript instructions to renderHTMLon the server."
          ]
        },
        {
          "type": "p",
          "text": "This means we don't have to wait for everything to render before caching the work or sending a response. Instead, we can stream a response as work is completed."
        },
        {
          "type": "p",
          "text": "What is the React Server Component Payload? The React Server Component Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The React Server Component Payload contains:"
        },
        {
          "type": "list",
          "items": [
            "The rendered result of Server Components",
            "Placeholders for where Client Components should be rendered and references to their JavaScript files",
            "Any props passed from a Server Component to a Client Component"
          ]
        },
        {
          "type": "p",
          "text": "To learn more, see theServer Componentsdocumentation."
        },
        {
          "type": "p",
          "text": "The default behavior of Next.js is to cache the rendered result (React Server Component Payload and HTML) of a route on the server. This applies to statically rendered routes at build time, or during revalidation."
        },
        {
          "type": "p",
          "text": "At request time, on the client:"
        },
        {
          "type": "list",
          "items": [
            "The HTML is used to immediately show a fast non-interactive initial preview of the Client and Server Components.",
            "The React Server Components Payload is used to reconcile the Client and rendered Server Component trees, and update the DOM.",
            "The JavaScript instructions are used tohydrateClient Components and make the application interactive."
          ]
        },
        {
          "type": "p",
          "text": "The React Server Component Payload is stored in the client-sideRouter Cache- a separate in-memory cache, split by individual route segment. This Router Cache is used to improve the navigation experience by storing previously visited routes and prefetching future routes."
        },
        {
          "type": "p",
          "text": "On subsequent navigations or during prefetching, Next.js will check if the React Server Components Payload is stored in the Router Cache. If so, it will skip sending a new request to the server. If the route segments are not in the cache, Next.js will fetch the React Server Components Payload from the server, and populate the Router Cache on the client."
        },
        {
          "type": "p",
          "text": "Whether a route is cached or not at build time depends on whether it's statically or dynamically rendered. Static routes are cached by default, whereas dynamic routes are rendered at request time, and not cached. This diagram shows the difference between statically and dynamically rendered routes, with cached and uncached data:"
        },
        {
          "type": "p",
          "text": "Learn more aboutstatic and dynamic rendering."
        },
        {
          "type": "p",
          "text": "By default, the Full Route Cache is persistent. This means that the render output is cached across user requests."
        },
        {
          "type": "p",
          "text": "There are two ways you can invalidate the Full Route Cache:"
        },
        {
          "type": "list",
          "items": [
            "Revalidating Data: Revalidating theData Cache, will in turn invalidate the Router Cache by re-rendering components on the server and caching the new render output.",
            "Redeploying: Unlike the Data Cache, which persists across deployments, the Full Route Cache is cleared on new deployments."
          ]
        },
        {
          "type": "p",
          "text": "You can opt out of the Full Route Cache, or in other words, dynamically render components for every incoming request, by:"
        },
        {
          "type": "list",
          "items": [
            "Using aDynamic API: This will opt the route out from the Full Route Cache and dynamically render it at request time. The Data Cache can still be used.",
            "Using thedynamic = 'force-dynamic'orrevalidate = 0route segment config options: This will skip the Full Route Cache and the Data Cache. Meaning components will be rendered and data fetched on every incoming request to the server. The Router Cache will still apply as it's a client-side cache.",
            "Opting out of theData Cache: If a route has afetchrequest that is not cached, this will opt the route out of the Full Route Cache. The data for the specificfetchrequest will be fetched for every incoming request. Otherfetchrequests that do not opt out of caching will still be cached in the Data Cache. This allows for a hybrid of cached and uncached data."
          ]
        },
        {
          "type": "p",
          "text": "Next.js has an in-memory client-side router cache that stores the RSC payload of route segments, split by layouts, loading states, and pages. When a user navigates between routes, Next.js caches the visited route segments andprefetchesthe routes the user is likely to navigate to. This results in instant back/forward navigation, no full-page reload between navigations, and preservation of React state and browser state. With the Router Cache:"
        },
        {
          "type": "list",
          "items": [
            "Layoutsare cached and reused on navigation (partial rendering).",
            "Loading statesare cached and reused on navigation forinstant navigation.",
            "Pagesare not cached by default, but are reused during browser backward and forward navigation. You can enable caching for page segments by using the experimentalstaleTimesconfig option."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:This cache specifically applies to Next.js and Server Components, and is different to the browser'sbfcache, though it has a similar result."
        },
        {
          "type": "p",
          "text": "The cache is stored in the browser's temporary memory. Two factors determine how long the router cache lasts:"
        },
        {
          "type": "list",
          "items": [
            "Session: The cache persists across navigation. However, it's cleared on page refresh.",
            "Automatic Invalidation Period: The cache of layouts and loading states is automatically invalidated after a specific time. The duration depends on how the resource wasprefetched, and if the resource wasstatically generated:Default Prefetching(prefetch={null}or unspecified): not cached for dynamic pages, 5 minutes for static pages.Full Prefetching(prefetch={true}orrouter.prefetch): 5 minutes for both static & dynamic pages.",
            "Default Prefetching(prefetch={null}or unspecified): not cached for dynamic pages, 5 minutes for static pages.",
            "Full Prefetching(prefetch={true}orrouter.prefetch): 5 minutes for both static & dynamic pages."
          ]
        },
        {
          "type": "p",
          "text": "While a page refresh will clearallcached segments, the automatic invalidation period only affects the individual segment from the time it was prefetched."
        },
        {
          "type": "p",
          "text": "Good to know: The experimentalstaleTimesconfig option can be used to adjust the automatic invalidation times mentioned above."
        },
        {
          "type": "p",
          "text": "There are two ways you can invalidate the Router Cache:"
        },
        {
          "type": "list",
          "items": [
            "In aServer Action:Revalidating data on-demand by path with (revalidatePath) or by cache tag with (revalidateTag)Usingcookies.setorcookies.deleteinvalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. authentication).",
            "Revalidating data on-demand by path with (revalidatePath) or by cache tag with (revalidateTag)",
            "Usingcookies.setorcookies.deleteinvalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. authentication).",
            "Callingrouter.refreshwill invalidate the Router Cache and make a new request to the server for the current route."
          ]
        },
        {
          "type": "p",
          "text": "As of Next.js 15, page segments are opted out by default."
        },
        {
          "type": "p",
          "text": "Good to know:You can also opt out ofprefetchingby setting theprefetchprop of the<Link>component tofalse."
        },
        {
          "type": "p",
          "text": "When configuring the different caching mechanisms, it's important to understand how they interact with each other:"
        },
        {
          "type": "list",
          "items": [
            "Revalidating or opting out of the Data Cachewillinvalidate the Full Route Cache, as the render output depends on data.",
            "Invalidating or opting out of the Full Route Cachedoes notaffect the Data Cache. You can dynamically render a route that has both cached and uncached data. This is useful when most of your page uses cached data, but you have a few components that rely on data that needs to be fetched at request time. You can dynamically render without worrying about the performance impact of re-fetching all the data."
          ]
        },
        {
          "type": "list",
          "items": [
            "To immediately invalidate the Data Cache and Router cache, you can userevalidatePathorrevalidateTagin aServer Action.",
            "Revalidating the Data Cache in aRoute Handlerwill notimmediately invalidate the Router Cache as the Route Handler isn't tied to a specific route. This means Router Cache will continue to serve the previous payload until a hard refresh, or the automatic invalidation period has elapsed."
          ]
        },
        {
          "type": "p",
          "text": "The following table provides an overview of how different Next.js APIs affect caching:"
        },
        {
          "type": "p",
          "text": "By default, the<Link>component automatically prefetches routes from the Full Route Cache and adds the React Server Component Payload to the Router Cache. To disable prefetching, you can set theprefetchprop tofalse. But this will not skip the cache permanently, the route segment will still be cached client-side when the user visits the route. Learn more about the<Link>component."
        },
        {
          "type": "p",
          "text": "Theprefetchoption of theuseRouterhook can be used to manually prefetch a route. This adds the React Server Component Payload to the Router Cache. See theuseRouterhookAPI reference."
        },
        {
          "type": "p",
          "text": "Therefreshoption of theuseRouterhook can be used to manually refresh a route. This completely clears the Router Cache, and makes a new request to the server for the current route.refreshdoes not affect the Data or Full Route Cache. The rendered result will be reconciled on the client while preserving React state and browser state. See theuseRouterhookAPI reference."
        },
        {
          "type": "p",
          "text": "Data returned fromfetchisnotautomatically cached in the Data Cache. The default caching behavior offetch(e.g., when thecacheoption is not specified) is equal to setting thecacheoption tono-store:"
        },
        {
          "type": "code",
          "code": "letdata=awaitfetch('https://api.vercel.app/blog',{ cache:'no-store'})"
        },
        {
          "type": "p",
          "text": "See thefetchAPI Referencefor more options."
        },
        {
          "type": "p",
          "text": "You can opt individualfetchinto caching by setting thecacheoption toforce-cache:"
        },
        {
          "type": "code",
          "code": "// Opt into cachingfetch(`https://...`,{ cache:'force-cache'})"
        },
        {
          "type": "p",
          "text": "See thefetchAPI Referencefor more options."
        },
        {
          "type": "p",
          "text": "You can use thenext.revalidateoption offetchto set the revalidation period (in seconds) of an individualfetchrequest. This will revalidate the Data Cache, which in turn will revalidate the Full Route Cache. Fresh data will be fetched, and components will be re-rendered on the server."
        },
        {
          "type": "code",
          "code": "// Revalidate at most after 1 hourfetch(`https://...`,{ next:{ revalidate:3600} })"
        },
        {
          "type": "p",
          "text": "See thefetchAPI referencefor more options."
        },
        {
          "type": "p",
          "text": "Next.js has a cache tagging system for fine-grained data caching and revalidation."
        },
        {
          "type": "list",
          "items": [
            "When usingfetchorunstable_cache, you have the option to tag cache entries with one or more tags.",
            "Then, you can callrevalidateTagto purge the cache entries associated with that tag."
          ]
        },
        {
          "type": "p",
          "text": "For example, you can set a tag when fetching data:"
        },
        {
          "type": "code",
          "code": "// Cache data with a tagfetch(`https://...`,{ next:{ tags:['a','b','c'] } })"
        },
        {
          "type": "p",
          "text": "Then, callrevalidateTagwith a tag to purge the cache entry:"
        },
        {
          "type": "code",
          "code": "// Revalidate entries with a specific tagrevalidateTag('a')"
        },
        {
          "type": "p",
          "text": "There are two places you can userevalidateTag, depending on what you're trying to achieve:"
        },
        {
          "type": "list",
          "items": [
            "Route Handlers- to revalidate data in response of a third party event (e.g. webhook). This will not invalidate the Router Cache immediately as the Router Handler isn't tied to a specific route.",
            "Server Actions- to revalidate data after a user action (e.g. form submission). This will invalidate the Router Cache for the associated route."
          ]
        },
        {
          "type": "p",
          "text": "revalidatePathallows you manually revalidate dataandre-render the route segments below a specific path in a single operation. Calling therevalidatePathmethod revalidates the Data Cache, which in turn invalidates the Full Route Cache."
        },
        {
          "type": "code",
          "code": "revalidatePath('/')"
        },
        {
          "type": "p",
          "text": "There are two places you can userevalidatePath, depending on what you're trying to achieve:"
        },
        {
          "type": "list",
          "items": [
            "Route Handlers- to revalidate data in response to a third party event (e.g. webhook).",
            "Server Actions- to revalidate data after a user interaction (e.g. form submission, clicking a button)."
          ]
        },
        {
          "type": "p",
          "text": "See therevalidatePathAPI referencefor more information."
        },
        {
          "type": "p",
          "text": "revalidatePathvs.router.refresh: Callingrouter.refreshwill clear the Router cache, and re-render route segments on the server without invalidating the Data Cache or the Full Route Cache. The difference is thatrevalidatePathpurges the Data Cache and Full Route Cache, whereasrouter.refresh()does not change the Data Cache and Full Route Cache, as it is a client-side API."
        },
        {
          "type": "p",
          "text": "Dynamic APIs likecookiesandheaders, and thesearchParamsprop in Pages depend on runtime incoming request information. Using them will opt a route out of the Full Route Cache, in other words, the route will be dynamically rendered."
        },
        {
          "type": "p",
          "text": "Usingcookies.setorcookies.deletein a Server Action invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. to reflect authentication changes). See thecookiesAPI reference."
        },
        {
          "type": "p",
          "text": "The Route Segment Config options can be used to override the route segment defaults or when you're not able to use thefetchAPI (e.g. database client or 3rd party libraries). The following Route Segment Config options will opt out of the Full Route Cache:"
        },
        {
          "type": "list",
          "items": ["const dynamic = 'force-dynamic'"]
        },
        {
          "type": "p",
          "text": "This config option will opt all fetches out of the Data Cache (i.e.no-store):"
        },
        {
          "type": "list",
          "items": ["const fetchCache = 'default-no-store'"]
        },
        {
          "type": "p",
          "text": "See thefetchCacheto see more advanced options. See theRoute Segment Configdocumentation for more options."
        },
        {
          "type": "p",
          "text": "Fordynamic segments(e.g.app/blog/[slug]/page.js), paths provided bygenerateStaticParamsare cached in the Full Route Cache at build time. At request time, Next.js will also cache paths that weren't known at build time the first time they're visited. To statically render all paths at build time, supply the full list of paths togenerateStaticParams:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())returnposts.map((post)=>({slug:post.slug,}))}"
        },
        {
          "type": "p",
          "text": "To statically render a subset of paths at build time, and the rest the first time they're visited at runtime, return a partial list of paths:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())// Render the first 10 posts at build timereturnposts.slice(0,10).map((post)=>({slug:post.slug,}))}"
        },
        {
          "type": "p",
          "text": "To statically render all paths the first time they're visited, return an empty array (no paths will be rendered at build time) or utilizeexport const dynamic = 'force-static':"
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongenerateStaticParams() {return[]}"
        },
        {
          "type": "p",
          "text": "Good to know:You must return an array fromgenerateStaticParams, even if it's empty. Otherwise, the route will be dynamically rendered."
        },
        {
          "type": "code",
          "code": "exportconstdynamic='force-static'"
        },
        {
          "type": "p",
          "text": "To disable caching at request time, add theexport const dynamicParams = falseoption in a route segment. When this config option is used, only paths provided bygenerateStaticParamswill be served, and other routes will 404 or match (in the case ofcatch-all routes)."
        },
        {
          "type": "p",
          "text": "The Reactcachefunction allows you to memoize the return value of a function, allowing you to call the same function multiple times while only executing it once. Sincefetchrequests are automatically memoized, you do not need to wrap it in Reactcache. However, you can usecacheto manually memoize data requests for use cases when thefetchAPI is not suitable. For example, some database clients, CMS clients, or GraphQL clients."
        },
        {
          "type": "code",
          "code": "import{ cache }from'react'importdbfrom'@/lib/db'exportconstgetItem=cache(async(id:string)=>{constitem=awaitdb.item.findUnique({ id })returnitem})"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/configuring",
      "title": "Building Your Application: Configuring | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js allows you to customize your project to meet specific requirements. This includes integrations with TypeScript, ESlint, and more, as well as internal configuration options such as Absolute Imports and Environment Variables."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/configuring/content-security-policy",
      "title": "Configuring: Content Security Policy | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Content Security Policy (CSP)is important to guard your Next.js application against various security threats such as cross-site scripting (XSS), clickjacking, and other code injection attacks. By using CSP, developers can specify which origins are permissible for content sources, scripts, stylesheets, images, fonts, objects, media (audio, video), iframes, and more."
        },
        {
          "type": "list",
          "items": ["Strict CSP"]
        },
        {
          "type": "p",
          "text": "Anonceis a unique, random string of characters created for a one-time use. It is used in conjunction with CSP to selectively allow certain inline scripts or styles to execute, bypassing strict CSP directives."
        },
        {
          "type": "p",
          "text": "Even though CSPs are designed to block malicious scripts, there are legitimate scenarios where inline scripts are necessary. In such cases, nonces offer a way to allow these scripts to execute if they have the correct nonce."
        },
        {
          "type": "p",
          "text": "Middlewareenables you to add headers and generate nonces before the page renders. Every time a page is viewed, a fresh nonce should be generated. This means that youmust use dynamic rendering to add nonces. For example:"
        },
        {
          "type": "code",
          "code": "import{ NextRequest,NextResponse }from'next/server'exportfunctionmiddleware(request:NextRequest) {constnonce=Buffer.from(crypto.randomUUID()).toString('base64')constcspHeader=`default-src 'self';script-src 'self' 'nonce-${nonce}' 'strict-dynamic';style-src 'self' 'nonce-${nonce}';img-src 'self' blob: data:;font-src 'self';object-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'none';upgrade-insecure-requests;`// Replace newline characters and spacesconstcontentSecurityPolicyHeaderValue=cspHeader.replace(/\\s{2,}/g,' ').trim()constrequestHeaders=newHeaders(request.headers)requestHeaders.set('x-nonce',nonce)requestHeaders.set('Content-Security-Policy',contentSecurityPolicyHeaderValue)constresponse=NextResponse.next({request:{headers:requestHeaders,},})response.headers.set('Content-Security-Policy',contentSecurityPolicyHeaderValue)returnresponse}"
        },
        {
          "type": "p",
          "text": "By default, Middleware runs on all requests. You can filter Middleware to run on specific paths using amatcher. We recommend ignoring matching prefetches (fromnext/link) and static assets that don't need the CSP header."
        },
        {
          "type": "code",
          "code": "exportconstconfig={matcher:[/** Match all request paths except for the ones starting with:* - api (API routes)* - _next/static (static files)* - _next/image (image optimization files)* - favicon.ico (favicon file)*/{source:'/((?!api|_next/static|_next/image|favicon.ico).*)',missing:[{ type:'header',key:'next-router-prefetch'},{ type:'header',key:'purpose',value:'prefetch'},],},],}"
        },
        {
          "type": "p",
          "text": "You can now read the nonce from aServer Componentusingheaders:"
        },
        {
          "type": "code",
          "code": "import{ headers }from'next/headers'importScriptfrom'next/script'exportdefaultasyncfunctionPage() {constnonce=(awaitheaders()).get('x-nonce')return(<Scriptsrc=\"https://www.googletagmanager.com/gtag/js\"strategy=\"afterInteractive\"nonce={nonce}/>)}"
        },
        {
          "type": "p",
          "text": "For applications that do not require nonces, you can set the CSP header directly in yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "constcspHeader=`default-src 'self';script-src 'self' 'unsafe-eval' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' blob: data:;font-src 'self';object-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'none';upgrade-insecure-requests;`module.exports={asyncheaders() {return[{source:'/(.*)',headers:[{key:'Content-Security-Policy',value:cspHeader.replace(/\\n/g,''),},],},]},}"
        },
        {
          "type": "p",
          "text": "We recommend usingv13.4.20+of Next.js to properly handle and apply nonces."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/configuring/custom-server",
      "title": "Configuring: Custom Server | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js includes its own server withnext startby default. If you have an existing backend, you can still use it with Next.js (this is not a custom server). A custom Next.js server allows you to programmatically start a server for custom patterns. The majority of the time, you will not need this approach. However, it's available if you need to eject."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Before deciding to use a custom server, keep in mind that it should only be used when the integrated router of Next.js can't meet your app requirements. A custom server will remove important performance optimizations, likeAutomatic Static Optimization.",
            "A custom servercannotbe deployed onVercel.",
            "When using standalone output mode, it does not trace custom server files. This mode outputs a separate minimalserver.jsfile, instead. These cannot be used together."
          ]
        },
        {
          "type": "p",
          "text": "Take a look at thefollowing exampleof a custom server:"
        },
        {
          "type": "code",
          "code": "import{ createServer }from'http'import{ parse }from'url'importnextfrom'next'constport=parseInt(process.env.PORT||'3000',10)constdev=process.env.NODE_ENV!=='production'constapp=next({ dev })consthandle=app.getRequestHandler()app.prepare().then(()=>{createServer((req,res)=>{constparsedUrl=parse(req.url!,true)handle(req,res,parsedUrl)}).listen(port)console.log(`> Server listening at http://localhost:${port}as${dev?'development':process.env.NODE_ENV}`)})"
        },
        {
          "type": "p",
          "text": "server.jsdoes not run through the Next.js Compiler or bundling process. Make sure the syntax and source code this file requires are compatible with the current Node.js version you are using.View an example."
        },
        {
          "type": "p",
          "text": "To run the custom server, you'll need to update thescriptsinpackage.jsonlike so:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"node server.js\",\"build\":\"next build\",\"start\":\"NODE_ENV=production node server.js\"}}"
        },
        {
          "type": "p",
          "text": "Alternatively, you can set upnodemon(example). The custom server uses the following import to connect the server with the Next.js application:"
        },
        {
          "type": "code",
          "code": "importnextfrom'next'constapp=next({})"
        },
        {
          "type": "p",
          "text": "The abovenextimport is a function that receives an object with the following options:"
        },
        {
          "type": "p",
          "text": "The returnedappcan then be used to let Next.js handle requests as required."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/configuring/debugging",
      "title": "Configuring: Debugging | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This documentation explains how you can debug your Next.js frontend and backend code with full source maps support using theVS Code debugger,Chrome DevTools, orFirefox DevTools. Any debugger that can attach to Node.js can also be used to debug a Next.js application. You can find more details in the Node.jsDebugging Guide."
        },
        {
          "type": "p",
          "text": "Create a file named.vscode/launch.jsonat the root of your project with the following content:"
        },
        {
          "type": "code",
          "code": "{\"version\":\"0.2.0\",\"configurations\":[{\"name\":\"Next.js: debug server-side\",\"type\":\"node-terminal\",\"request\":\"launch\",\"command\":\"npm run dev\"},{\"name\":\"Next.js: debug client-side\",\"type\":\"chrome\",\"request\":\"launch\",\"url\":\"http://localhost:3000\"},{\"name\":\"Next.js: debug client-side (Firefox)\",\"type\":\"firefox\",\"request\":\"launch\",\"url\":\"http://localhost:3000\",\"reAttach\":true,\"pathMappings\":[{\"url\":\"webpack://_N_E\",\"path\":\"${workspaceFolder}\"}]},{\"name\":\"Next.js: debug full stack\",\"type\":\"node\",\"request\":\"launch\",\"program\":\"${workspaceFolder}/node_modules/.bin/next\",\"runtimeArgs\":[\"--inspect\"],\"skipFiles\":[\"<node_internals>/**\"],\"serverReadyAction\":{\"action\":\"debugWithEdge\",\"killOnServerStop\":true,\"pattern\":\"- Local:.+(https?://.+)\",\"uriFormat\":\"%s\",\"webRoot\":\"${workspaceFolder}\"}}]}"
        },
        {
          "type": "p",
          "text": "Note: To use Firefox debugging in VS Code, you'll need to install theFirefox Debugger extension."
        },
        {
          "type": "p",
          "text": "npm run devcan be replaced withyarn devif you're using Yarn orpnpm devif you're using pnpm. In the \"Next.js: debug full stack\" configuration,serverReadyAction.actionspecifies which browser to open when the server is ready.debugWithEdgemeans to launch the Edge browser. If you are using Chrome, change this value todebugWithChrome. If you'rechanging the port numberyour application starts on, replace the3000inhttp://localhost:3000with the port you're using instead. If you're running Next.js from a directory other than root (for example, if you're using Turborepo) then you need to addcwdto the server-side and full stack debugging tasks. For example,\"cwd\": \"${workspaceFolder}/apps/web\". Now go to the Debug panel (Ctrl+Shift+Don Windows/Linux,⇧+⌘+Don macOS), select a launch configuration, then pressF5or selectDebug: Start Debuggingfrom the Command Palette to start your debugging session."
        },
        {
          "type": "p",
          "text": "Click the drop down menu listing the runtime configuration, and clickEdit Configurations.... Create aJavaScript Debugdebug configuration withhttp://localhost:3000as the URL. Customize to your liking (e.g. Browser for debugging, store as project file), and clickOK. Run this debug configuration, and the selected browser should automatically open. At this point, you should have 2 applications in debug mode: the NextJS node application, and the client/browser application."
        },
        {
          "type": "p",
          "text": "Start your development server as usual by runningnext dev,npm run dev, oryarn dev. Once the server starts, openhttp://localhost:3000(or your alternate URL) in your preferred browser. For Chrome:"
        },
        {
          "type": "list",
          "items": [
            "Open Chrome's Developer Tools (Ctrl+Shift+Jon Windows/Linux,⌥+⌘+Ion macOS)",
            "Go to theSourcestab"
          ]
        },
        {
          "type": "p",
          "text": "For Firefox:"
        },
        {
          "type": "list",
          "items": [
            "Open Firefox's Developer Tools (Ctrl+Shift+Ion Windows/Linux,⌥+⌘+Ion macOS)",
            "Go to theDebuggertab"
          ]
        },
        {
          "type": "p",
          "text": "In either browser, any time your client-side code reaches adebuggerstatement, code execution will pause and that file will appear in the debug area. You can also search for files to set breakpoints manually:"
        },
        {
          "type": "list",
          "items": [
            "In Chrome: PressCtrl+Pon Windows/Linux or⌘+Pon macOS",
            "In Firefox: PressCtrl+Pon Windows/Linux or⌘+Pon macOS, or use the file tree in the left panel"
          ]
        },
        {
          "type": "p",
          "text": "Note that when searching, your source files will have paths starting withwebpack://_N_E/./."
        },
        {
          "type": "p",
          "text": "To debug server-side Next.js code with browser DevTools, you need to pass the--inspectflag to the underlying Node.js process:"
        },
        {
          "type": "code",
          "code": "NODE_OPTIONS='--inspect'next dev"
        },
        {
          "type": "p",
          "text": "Good to know: UseNODE_OPTIONS='--inspect=0.0.0.0'to allow remote debugging access outside localhost, such as when running the app in a Docker container."
        },
        {
          "type": "p",
          "text": "If you're usingnpm run devoryarn devthen you should update thedevscript on yourpackage.json:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"NODE_OPTIONS='--inspect' next dev\"}}"
        },
        {
          "type": "p",
          "text": "Launching the Next.js dev server with the--inspectflag will look something like this:"
        },
        {
          "type": "code",
          "code": "Debuggerlisteningonws://127.0.0.1:9229/0cf90313-350d-4466-a748-cd60f4e47c95Forhelp,see:https://nodejs.org/en/docs/inspectorready-startedserveron0.0.0.0:3000,url:http://localhost:3000"
        },
        {
          "type": "p",
          "text": "For Chrome:"
        },
        {
          "type": "list",
          "items": [
            "Open a new tab and visitchrome://inspect",
            "Look for your Next.js application in theRemote Targetsection",
            "Clickinspectto open a separate DevTools window",
            "Go to theSourcestab"
          ]
        },
        {
          "type": "p",
          "text": "For Firefox:"
        },
        {
          "type": "list",
          "items": [
            "Open a new tab and visitabout:debugging",
            "ClickThis Firefoxin the left sidebar",
            "UnderRemote Targets, find your Next.js application",
            "ClickInspectto open the debugger",
            "Go to theDebuggertab"
          ]
        },
        {
          "type": "p",
          "text": "Debugging server-side code works similarly to client-side debugging. When searching for files (Ctrl+P/⌘+P), your source files will have paths starting withwebpack://{application-name}/./(where{application-name}will be replaced with the name of your application according to yourpackage.jsonfile)."
        },
        {
          "type": "p",
          "text": "When you encounter an error, inspecting the source code can help trace the root cause of errors. Next.js will display a Node.js logo like a green button on the dev overlay. By clicking that button, the DevTools URL is copied to your clipboard. You can open a new browser tab with that URL to inspect the Next.js server process."
        },
        {
          "type": "p",
          "text": "Windows users may run into an issue when usingNODE_OPTIONS='--inspect'as that syntax is not supported on Windows platforms. To get around this, install thecross-envpackage as a development dependency (-Dwithnpmandyarn) and replace thedevscript with the following."
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"cross-env NODE_OPTIONS='--inspect' next dev\"}}"
        },
        {
          "type": "p",
          "text": "cross-envwill set theNODE_OPTIONSenvironment variable regardless of which platform you are on (including Mac, Linux, and Windows) and allow you to debug consistently across devices and operating systems."
        },
        {
          "type": "p",
          "text": "Good to know: Ensure Windows Defender is disabled on your machine. This external service will checkevery file read, which has been reported to greatly increase Fast Refresh time withnext dev. This is a known issue, not related to Next.js, but it does affect Next.js development."
        },
        {
          "type": "p",
          "text": "To learn more about how to use a JavaScript debugger, take a look at the following documentation:"
        },
        {
          "type": "list",
          "items": [
            "Node.js debugging in VS Code: Breakpoints",
            "Chrome DevTools: Debug JavaScript",
            "Firefox DevTools: Debugger"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode",
      "title": "Configuring: Draft Mode | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Draft Modeallows you to preview draft content from your headless CMS in your Next.js application. This is useful for static pages that are generated at build time as it allows you to switch todynamic renderingand see the draft changes without having to rebuild your entire site. This page walks through how to enable and use Draft Mode."
        },
        {
          "type": "p",
          "text": "Create aRoute Handler. It can have any name, for example,app/api/draft/route.ts."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request) {returnnewResponse('')}"
        },
        {
          "type": "p",
          "text": "Then, import thedraftModefunction and call theenable()method."
        },
        {
          "type": "code",
          "code": "import{ draftMode }from'next/headers'exportasyncfunctionGET(request:Request) {constdraft=awaitdraftMode()draft.enable()returnnewResponse('Draft mode is enabled')}"
        },
        {
          "type": "p",
          "text": "This will set acookieto enable draft mode. Subsequent requests containing this cookie will trigger draft mode and change the behavior of statically generated pages. You can test this manually by visiting/api/draftand looking at your browser’s developer tools. Notice theSet-Cookieresponse header with a cookie named__prerender_bypass."
        },
        {
          "type": "p",
          "text": "These steps assume that the headless CMS you’re using supports settingcustom draft URLs. If it doesn’t, you can still use this method to secure your draft URLs, but you’ll need to construct and access the draft URL manually. The specific steps will vary depending on which headless CMS you’re using."
        },
        {
          "type": "p",
          "text": "To securely access the Route Handler from your headless CMS:"
        },
        {
          "type": "list",
          "items": [
            "Create asecret token stringusing a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS.",
            "If your headless CMS supports setting custom draft URLs, specify a draft URL (this assumes that your Route Handler is located atapp/api/draft/route.ts). For example:"
          ]
        },
        {
          "type": "code",
          "code": "https://<your-site>/api/draft?secret=<token>&slug=<path>"
        },
        {
          "type": "list",
          "items": [
            "<your-site>should be your deployment domain.",
            "<token>should be replaced with the secret token you generated.",
            "<path>should be the path for the page that you want to view. If you want to view/posts/one, then you should use&slug=/posts/one."
          ]
        },
        {
          "type": "p",
          "text": "Your headless CMS might allow you to include a variable in the draft URL so that<path>can be set dynamically based on the CMS’s data like so:&slug=/posts/{entry.fields.slug}"
        },
        {
          "type": "list",
          "items": [
            "In your Route Handler, check that the secret matches and that theslugparameter exists (if not, the request should fail), calldraftMode.enable()to set the cookie. Then, redirect the browser to the path specified byslug:"
          ]
        },
        {
          "type": "code",
          "code": "import{ draftMode }from'next/headers'import{ redirect }from'next/navigation'exportasyncfunctionGET(request:Request) {// Parse query string parametersconst{searchParams}=newURL(request.url)constsecret=searchParams.get('secret')constslug=searchParams.get('slug')// Check the secret and next parameters// This secret should only be known to this Route Handler and the CMSif(secret!=='MY_SECRET_TOKEN'||!slug) {returnnewResponse('Invalid token',{ status:401})}// Fetch the headless CMS to check if the provided `slug` exists// getPostBySlug would implement the required fetching logic to the headless CMSconstpost=awaitgetPostBySlug(slug)// If the slug doesn't exist prevent draft mode from being enabledif(!post) {returnnewResponse('Invalid slug',{ status:401})}// Enable Draft Mode by setting the cookieconstdraft=awaitdraftMode()draft.enable()// Redirect to the path from the fetched post// We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilitiesredirect(post.slug)}"
        },
        {
          "type": "p",
          "text": "If it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie."
        },
        {
          "type": "p",
          "text": "The next step is to update your page to check the value ofdraftMode().isEnabled. If you request a page which has the cookie set, then data will be fetched atrequest time(instead of at build time). Furthermore, the value ofisEnabledwill betrue."
        },
        {
          "type": "code",
          "code": "// page that fetches dataimport{ draftMode }from'next/headers'asyncfunctiongetData() {const{isEnabled}=awaitdraftMode()consturl=isEnabled?'https://draft.example.com':'https://production.example.com'constres=awaitfetch(url)returnres.json()}exportdefaultasyncfunctionPage() {const{title,desc}=awaitgetData()return(<main><h1>{title}</h1><p>{desc}</p></main>)}"
        },
        {
          "type": "p",
          "text": "If you access the draft Route Handler (withsecretandslug) from your headless CMS or manually using the URL, you should now be able to see the draft content. And, if you update your draft without publishing, you should be able to view the draft."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/configuring/environment-variables",
      "title": "Configuring: Environment Variables | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "list",
          "items": ["Environment Variables"]
        },
        {
          "type": "p",
          "text": "Next.js comes with built-in support for environment variables, which allows you to do the following:"
        },
        {
          "type": "list",
          "items": [
            "Use.envto load environment variables",
            "Bundle environment variables for the browser by prefixing withNEXT_PUBLIC_"
          ]
        },
        {
          "type": "p",
          "text": "Next.js has built-in support for loading environment variables from.env*files intoprocess.env."
        },
        {
          "type": "code",
          "code": "DB_HOST=localhostDB_USER=myuserDB_PASS=mypassword"
        },
        {
          "type": "p",
          "text": "Note: Next.js also supports multiline variables inside of your.env*files:"
        },
        {
          "type": "code",
          "code": "# .env# you can write with line breaksPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----...Kh9NV......-----END DSA PRIVATE KEY-----\"# or with `\\n` inside double quotesPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\\nKh9NV...\\n-----END DSA PRIVATE KEY-----\\n\""
        },
        {
          "type": "p",
          "text": "Note: If you are using a/srcfolder, please note that Next.js will load the .env filesonlyfrom the parent folder andnotfrom the/srcfolder.\nThis loadsprocess.env.DB_HOST,process.env.DB_USER, andprocess.env.DB_PASSinto the Node.js environment automatically allowing you to use them inRoute Handlers."
        },
        {
          "type": "p",
          "text": "For example:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET() {constdb=awaitmyDB.connect({host:process.env.DB_HOST,username:process.env.DB_USER,password:process.env.DB_PASS,})// ...}"
        },
        {
          "type": "p",
          "text": "If you need to load environment variables outside of the Next.js runtime, such as in a root config file for an ORM or test runner, you can use the@next/envpackage. This package is used internally by Next.js to load environment variables from.env*files. To use it, install the package and use theloadEnvConfigfunction to load the environment variables:"
        },
        {
          "type": "code",
          "code": "npminstall@next/env"
        },
        {
          "type": "code",
          "code": "import{ loadEnvConfig }from'@next/env'constprojectDir=process.cwd()loadEnvConfig(projectDir)"
        },
        {
          "type": "p",
          "text": "Then, you can import the configuration where needed. For example:"
        },
        {
          "type": "code",
          "code": "import'./envConfig.ts'exportdefaultdefineConfig({dbCredentials:{connectionString:process.env.DATABASE_URL!,},})"
        },
        {
          "type": "p",
          "text": "Next.js will automatically expand variables that use$to reference other variables e.g.$VARIABLEinside of your.env*files. This allows you to reference other secrets. For example:"
        },
        {
          "type": "code",
          "code": "TWITTER_USER=nextjsTWITTER_URL=https://x.com/$TWITTER_USER"
        },
        {
          "type": "p",
          "text": "In the above example,process.env.TWITTER_URLwould be set tohttps://x.com/nextjs."
        },
        {
          "type": "p",
          "text": "Good to know: If you need to use variable with a$in the actual value, it needs to be escaped e.g.\\$."
        },
        {
          "type": "p",
          "text": "Non-NEXT_PUBLIC_environment variables are only available in the Node.js environment, meaning they aren't accessible to the browser (the client runs in a differentenvironment). In order to make the value of an environment variable accessible in the browser, Next.js can \"inline\" a value, at build time, into the js bundle that is delivered to the client, replacing all references toprocess.env.[variable]with a hard-coded value. To tell it to do this, you just have to prefix the variable withNEXT_PUBLIC_. For example:"
        },
        {
          "type": "code",
          "code": "NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk"
        },
        {
          "type": "p",
          "text": "This will tell Next.js to replace all references toprocess.env.NEXT_PUBLIC_ANALYTICS_IDin the Node.js environment with the value from the environment in which you runnext build, allowing you to use it anywhere in your code. It will be inlined into any JavaScript sent to the browser."
        },
        {
          "type": "p",
          "text": "Note: After being built, your app will no longer respond to changes to these environment variables. For instance, if you use a Heroku pipeline to promote slugs built in one environment to another environment, or if you build and deploy a single Docker image to multiple environments, allNEXT_PUBLIC_variables will be frozen with the value evaluated at build time, so these values need to be set appropriately when the project is built. If you need access to runtime environment values, you'll have to setup your own API to provide them to the client (either on demand or during initialization)."
        },
        {
          "type": "code",
          "code": "importsetupAnalyticsServicefrom'../lib/my-analytics-service'// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.setupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)functionHomePage() {return<h1>Hello World</h1>}exportdefaultHomePage"
        },
        {
          "type": "p",
          "text": "Note that dynamic lookups willnotbe inlined, such as:"
        },
        {
          "type": "code",
          "code": "// This will NOT be inlined, because it uses a variableconstvarName='NEXT_PUBLIC_ANALYTICS_ID'setupAnalyticsService(process.env[varName])// This will NOT be inlined, because it uses a variableconstenv=process.envsetupAnalyticsService(env.NEXT_PUBLIC_ANALYTICS_ID)"
        },
        {
          "type": "p",
          "text": "Next.js can support both build time and runtime environment variables. By default, environment variables are only available on the server. To expose an environment variable to the browser, it must be prefixed withNEXT_PUBLIC_. However, these public environment variables will be inlined into the JavaScript bundle duringnext build. You can safely read environment variables on the server during dynamic rendering:"
        },
        {
          "type": "code",
          "code": "import{ connection }from'next/server'exportdefaultasyncfunctionComponent() {awaitconnection()// cookies, headers, and other Dynamic APIs// will also opt into dynamic rendering, meaning// this env variable is evaluated at runtimeconstvalue=process.env.MY_VALUE// ...}"
        },
        {
          "type": "p",
          "text": "This allows you to use a singular Docker image that can be promoted through multiple environments with different values. Good to know:"
        },
        {
          "type": "list",
          "items": [
            "You can run code on server startup using theregisterfunction.",
            "We do not recommend using theruntimeConfigoption, as this does not work with the standalone output mode. Instead, we recommendincrementally adoptingthe App Router."
          ]
        },
        {
          "type": "p",
          "text": "Typically, only.env*file is needed. However, sometimes you might want to add some defaults for thedevelopment(next dev) orproduction(next start) environment. Next.js allows you to set defaults in.env(all environments),.env.development(development environment), and.env.production(production environment)."
        },
        {
          "type": "p",
          "text": "Good to know:.env,.env.development, and.env.productionfiles should be included in your repository as they define defaults. All.envfiles are excluded in.gitignoreby default, allowing you to opt-into committing these values to your repository."
        },
        {
          "type": "p",
          "text": "When deploying your Next.js application toVercel, Environment Variables can be configuredin the Project Settings. All types of Environment Variables should be configured there. Even Environment Variables used in Development – which can bedownloaded onto your local deviceafterwards. If you've configuredDevelopment Environment Variablesyou can pull them into a.env.localfor usage on your local machine using the following command:"
        },
        {
          "type": "code",
          "code": "vercelenvpull"
        },
        {
          "type": "p",
          "text": "Good to know: When deploying your Next.js application toVercel, your environment variables in.env*files will not be made available to Edge Runtime, unless their name are prefixed withNEXT_PUBLIC_. We strongly recommend managing your environment variables inProject Settingsinstead, from where all environment variables are available."
        },
        {
          "type": "p",
          "text": "Apart fromdevelopmentandproductionenvironments, there is a 3rd option available:test. In the same way you can set defaults for development or production environments, you can do the same with a.env.testfile for thetestingenvironment (though this one is not as common as the previous two). Next.js will not load environment variables from.env.developmentor.env.productionin thetestingenvironment. This one is useful when running tests with tools likejestorcypresswhere you need to set specific environment vars only for testing purposes. Test default values will be loaded ifNODE_ENVis set totest, though you usually don't need to do this manually as testing tools will address it for you. There is a small difference betweentestenvironment, and bothdevelopmentandproductionthat you need to bear in mind:.env.localwon't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use the same env defaults across different executions by ignoring your.env.local(which is intended to override the default set)."
        },
        {
          "type": "p",
          "text": "Good to know: similar to Default Environment Variables,.env.testfile should be included in your repository, but.env.test.localshouldn't, as.env*.localare intended to be ignored through.gitignore."
        },
        {
          "type": "p",
          "text": "While running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging theloadEnvConfigfunction from the@next/envpackage."
        },
        {
          "type": "code",
          "code": "// The below can be used in a Jest global setup file or similar for your testing set-upimport{ loadEnvConfig }from'@next/env'exportdefaultasync()=>{constprojectDir=process.cwd()loadEnvConfig(projectDir)}"
        },
        {
          "type": "p",
          "text": "Environment variables are looked up in the following places, in order, stopping once the variable is found."
        },
        {
          "type": "list",
          "items": [
            "process.env",
            ".env.$(NODE_ENV).local",
            ".env.local(Not checked whenNODE_ENVistest.)",
            ".env.$(NODE_ENV)",
            ".env"
          ]
        },
        {
          "type": "p",
          "text": "For example, ifNODE_ENVisdevelopmentand you define a variable in both.env.development.localand.env, the value in.env.development.localwill be used."
        },
        {
          "type": "p",
          "text": "Good to know: The allowed values forNODE_ENVareproduction,developmentandtest."
        },
        {
          "type": "list",
          "items": [
            "If you are using a/srcdirectory,.env.*files should remain in the root of your project.",
            "If the environment variableNODE_ENVis unassigned, Next.js automatically assignsdevelopmentwhen running thenext devcommand, orproductionfor all other commands."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx",
      "title": "Configuring: MDX | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Markdownis a lightweight markup language used to format text. It allows you to write using plain text syntax and convert it to structurally valid HTML. It's commonly used for writing content on websites and blogs. You write..."
        },
        {
          "type": "code",
          "code": "I**love**using[Next.js](https://nextjs.org/)"
        },
        {
          "type": "p",
          "text": "Output:"
        },
        {
          "type": "code",
          "code": "<p>I <strong>love</strong> using <ahref=\"https://nextjs.org/\">Next.js</a></p>"
        },
        {
          "type": "p",
          "text": "MDXis a superset of markdown that lets you writeJSXdirectly in your markdown files. It is a powerful way to add dynamic interactivity and embed React components within your content. Next.js can support both local MDX content inside your application, as well as remote MDX files fetched dynamically on the server. The Next.js plugin handles transforming markdown and React components into HTML, including support for usage in Server Components (the default in App Router)."
        },
        {
          "type": "p",
          "text": "Good to know: View thePortfolio Starter Kittemplate for a complete working example."
        },
        {
          "type": "p",
          "text": "The@next/mdxpackage, and related packages, are used to configure Next.js so it can process markdown and MDX.It sources data from local files, allowing you to create pages with a.mdor.mdxextension, directly in your/pagesor/appdirectory. Install these packages to render MDX with Next.js:"
        },
        {
          "type": "code",
          "code": "npminstall@next/mdx@mdx-js/loader@mdx-js/react@types/mdx"
        },
        {
          "type": "p",
          "text": "Update thenext.config.mjsfile at your project's root to configure it to use MDX:"
        },
        {
          "type": "code",
          "code": "importcreateMDXfrom'@next/mdx'/**@type{import('next').NextConfig}*/constnextConfig={// Configure `pageExtensions` to include markdown and MDX filespageExtensions:['js','jsx','md','mdx','ts','tsx'],// Optionally, add any other Next.js config below}constwithMDX=createMDX({// Add markdown plugins here, as desired})// Merge MDX config with Next.js configexportdefaultwithMDX(nextConfig)"
        },
        {
          "type": "p",
          "text": "This allows.mdand.mdxfiles to act as pages, routes, or imports in your application."
        },
        {
          "type": "p",
          "text": "Create anmdx-components.tsx(or.js) file in the root of your project to define global MDX Components. For example, at the same level aspagesorapp, or insidesrcif applicable."
        },
        {
          "type": "code",
          "code": "importtype{ MDXComponents }from'mdx/types'exportfunctionuseMDXComponents(components:MDXComponents):MDXComponents{return{...components,}}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "mdx-components.tsxisrequiredto use@next/mdxwith App Router and will not work without it.",
            "Learn more about themdx-components.tsxfile convention.",
            "Learn how touse custom styles and components."
          ]
        },
        {
          "type": "p",
          "text": "You can render MDX using Next.js's file based routing or by importing MDX files into other pages."
        },
        {
          "type": "p",
          "text": "When using file based routing, you can use MDX pages like any other page. In App Router apps, that includes being able to usemetadata. Create a new MDX page within the/appdirectory:"
        },
        {
          "type": "code",
          "code": "my-project├── app│   └── mdx-page│       └── page.(mdx/md)|── mdx-components.(tsx/js)└── package.json"
        },
        {
          "type": "p",
          "text": "You can use MDX in these files, and even import React components, directly inside your MDX page:"
        },
        {
          "type": "code",
          "code": "import{ MyComponent }from'my-component'# Welcome to myMDXpage!This is some**bold**and _italics_ text.This is a listinmarkdown:-One-Two-ThreeCheckout my React component:<MyComponent/>"
        },
        {
          "type": "p",
          "text": "Navigating to the/mdx-pageroute should display your rendered MDX page."
        },
        {
          "type": "p",
          "text": "Create a new page within the/appdirectory and an MDX file wherever you'd like:"
        },
        {
          "type": "code",
          "code": "my-project├── app│   └── mdx-page│       └── page.(tsx/js)├── markdown│   └── welcome.(mdx/md)|── mdx-components.(tsx/js)└── package.json"
        },
        {
          "type": "p",
          "text": "You can use MDX in these files, and even import React components, directly inside your MDX page: Import the MDX file inside the page to display the content:"
        },
        {
          "type": "code",
          "code": "importWelcomefrom'@/markdown/welcome.mdx'exportdefaultfunctionPage() {return<Welcome/>}"
        },
        {
          "type": "p",
          "text": "Navigating to the/mdx-pageroute should display your rendered MDX page."
        },
        {
          "type": "p",
          "text": "Markdown, when rendered, maps to native HTML elements. For example, writing the following markdown:"
        },
        {
          "type": "code",
          "code": "## This is a headingThis is a list in markdown:- One- Two- Three"
        },
        {
          "type": "p",
          "text": "Generates the following HTML:"
        },
        {
          "type": "code",
          "code": "<h2>This is a heading</h2><p>This is a list in markdown:</p><ul><li>One</li><li>Two</li><li>Three</li></ul>"
        },
        {
          "type": "p",
          "text": "To style your markdown, you can provide custom components that map to the generated HTML elements. Styles and components can be implemented globally, locally, and with shared layouts."
        },
        {
          "type": "p",
          "text": "Adding styles and components inmdx-components.tsxwill affectallMDX files in your application."
        },
        {
          "type": "code",
          "code": "importtype{ MDXComponents }from'mdx/types'importImage,{ ImageProps }from'next/image'// This file allows you to provide custom React components// to be used in MDX files. You can import and use any// React component you want, including inline styles,// components from other libraries, and more.exportfunctionuseMDXComponents(components:MDXComponents):MDXComponents{return{// Allows customizing built-in components, e.g. to add styling.h1:({ children })=>(<h1style={{ color:'red',fontSize:'48px'}}>{children}</h1>),img:(props)=>(<Imagesizes=\"100vw\"style={{ width:'100%',height:'auto'}}{...(propsasImageProps)}/>),...components,}}"
        },
        {
          "type": "p",
          "text": "You can apply local styles and components to specific pages by passing them into imported MDX components. These will merge with and overrideglobal styles and components."
        },
        {
          "type": "code",
          "code": "importWelcomefrom'@/markdown/welcome.mdx'functionCustomH1({ children }) {return<h1style={{ color:'blue',fontSize:'100px'}}>{children}</h1>}constoverrideComponents={h1:CustomH1,}exportdefaultfunctionPage() {return<Welcomecomponents={overrideComponents} />}"
        },
        {
          "type": "p",
          "text": "To share a layout across MDX pages, you can use thebuilt-in layouts supportwith the App Router."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionMdxLayout({ children }:{ children:React.ReactNode}) {// Create any shared layout or styles herereturn<divstyle={{ color:'blue'}}>{children}</div>}"
        },
        {
          "type": "p",
          "text": "If you are usingTailwindto style your application, using the@tailwindcss/typographypluginwill allow you to reuse your Tailwind configuration and styles in your markdown files. The plugin adds a set ofproseclasses that can be used to add typographic styles to content blocks that come from sources, like markdown. Install Tailwind typographyand use withshared layoutsto add theproseyou want."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionMdxLayout({ children }:{ children:React.ReactNode}) {// Create any shared layout or styles herereturn(<divclassName=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">{children}</div>)}"
        },
        {
          "type": "p",
          "text": "Frontmatter is a YAML like key/value pairing that can be used to store data about a page.@next/mdxdoesnotsupport frontmatter by default, though there are many solutions for adding frontmatter to your MDX content, such as:"
        },
        {
          "type": "list",
          "items": [
            "remark-frontmatter",
            "remark-mdx-frontmatter",
            "gray-matter"
          ]
        },
        {
          "type": "p",
          "text": "@next/mdxdoesallow you to use exports like any other JavaScript component: Metadata can now be referenced outside of the MDX file:"
        },
        {
          "type": "code",
          "code": "importBlogPost,{ metadata }from'@/content/blog-post.mdx'exportdefaultfunctionPage() {console.log('metadata: ',metadata)//=> { author: 'John Doe' }return<BlogPost/>}"
        },
        {
          "type": "p",
          "text": "A common use case for this is when you want to iterate over a collection of MDX and extract data. For example, creating a blog index page from all blog posts. You can use packages likeNode'sfsmoduleorglobbyto read a directory of posts and extract the metadata."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Usingfs,globby, etc. can only be used server-side.",
            "View thePortfolio Starter Kittemplate for a complete working example."
          ]
        },
        {
          "type": "p",
          "text": "You can optionally provide remark and rehype plugins to transform the MDX content. For example, you can useremark-gfmto support GitHub Flavored Markdown. Since the remark and rehype ecosystem is ESM only, you'll need to usenext.config.mjsornext.config.tsas the configuration file."
        },
        {
          "type": "code",
          "code": "importremarkGfmfrom'remark-gfm'importcreateMDXfrom'@next/mdx'/**@type{import('next').NextConfig}*/constnextConfig={// Allow .mdx extensions for filespageExtensions:['js','jsx','md','mdx','ts','tsx'],// Optionally, add any other Next.js config below}constwithMDX=createMDX({// Add markdown plugins here, as desiredoptions:{remarkPlugins:[remarkGfm],rehypePlugins:[],},})// Combine MDX and Next.js configexportdefaultwithMDX(nextConfig)"
        },
        {
          "type": "p",
          "text": "To use plugins withTurbopack, upgrade to the latest@next/mdxand specify plugin names using a string:"
        },
        {
          "type": "code",
          "code": "importcreateMDXfrom'@next/mdx'/**@type{import('next').NextConfig}*/constnextConfig={pageExtensions:['js','jsx','md','mdx','ts','tsx'],}constwithMDX=createMDX({options:{remarkPlugins:[],rehypePlugins:[['rehype-katex',{ strict:true,throwOnError:true}]],},})exportdefaultwithMDX(nextConfig)"
        },
        {
          "type": "p",
          "text": "Good to know: remark and rehype plugins without serializable options cannot be used yet withTurbopack, due toinability to pass JavaScript functions to Rust"
        },
        {
          "type": "p",
          "text": "If your MDX files or content livessomewhere else, you can fetch it dynamically on the server. This is useful for content stored in a separate local folder, CMS, database, or anywhere else. A popular community package for this use isnext-mdx-remote."
        },
        {
          "type": "p",
          "text": "Good to know: Please proceed with caution. MDX compiles to JavaScript and is executed on the server. You should only fetch MDX content from a trusted source, otherwise this can lead to remote code execution (RCE)."
        },
        {
          "type": "p",
          "text": "The following example usesnext-mdx-remote:"
        },
        {
          "type": "code",
          "code": "import{ MDXRemote }from'next-mdx-remote/rsc'exportdefaultasyncfunctionRemoteMdxPage() {// MDX text - can be from a local file, database, CMS, fetch, anywhere...constres=awaitfetch('https://...')constmarkdown=awaitres.text()return<MDXRemotesource={markdown} />}"
        },
        {
          "type": "p",
          "text": "Navigating to the/mdx-page-remoteroute should display your rendered MDX."
        },
        {
          "type": "p",
          "text": "React does not natively understand markdown. The markdown plaintext needs to first be transformed into HTML. This can be accomplished withremarkandrehype. remarkis an ecosystem of tools around markdown.rehypeis the same, but for HTML. For example, the following code snippet transforms markdown into HTML:"
        },
        {
          "type": "code",
          "code": "import{ unified }from'unified'importremarkParsefrom'remark-parse'importremarkRehypefrom'remark-rehype'importrehypeSanitizefrom'rehype-sanitize'importrehypeStringifyfrom'rehype-stringify'main()asyncfunctionmain() {constfile=awaitunified().use(remarkParse)// Convert into markdown AST.use(remarkRehype)// Transform to HTML AST.use(rehypeSanitize)// Sanitize HTML input.use(rehypeStringify)// Convert AST into serialized HTML.process('Hello, Next.js!')console.log(String(file))// <p>Hello, Next.js!</p>}"
        },
        {
          "type": "p",
          "text": "Theremarkandrehypeecosystem contains plugins forsyntax highlighting,linking headings,generating a table of contents, and more. When using@next/mdxas shown above, youdo notneed to useremarkorrehypedirectly, as it is handled for you. We're describing it here for a deeper understanding of what the@next/mdxpackage is doing underneath."
        },
        {
          "type": "p",
          "text": "Next.js supports a new MDX compiler written in Rust. This compiler is still experimental and is not recommended for production use. To use the new compiler, you need to configurenext.config.jswhen you pass it towithMDX:"
        },
        {
          "type": "code",
          "code": "module.exports=withMDX({experimental:{mdxRs:true,},})"
        },
        {
          "type": "p",
          "text": "mdxRsalso accepts an object to configure how to transform mdx files."
        },
        {
          "type": "code",
          "code": "module.exports=withMDX({experimental:{mdxRs:{jsxRuntime?:string// Custom jsx runtimejsxImportSource?:string// Custom jsx import source,mdxType?:'gfm'|'commonmark'// Configure what kind of mdx syntax will be used to parse & transform},},})"
        },
        {
          "type": "list",
          "items": ["MDX", "@next/mdx", "remark", "rehype", "Markdoc"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/configuring/progressive-web-apps",
      "title": "Configuring: Progressive Web Applications (PWA) | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Progressive Web Applications (PWAs) offer the reach and accessibility of web applications combined with the features and user experience of native mobile apps. With Next.js, you can create PWAs that provide a seamless, app-like experience across all platforms without the need for multiple codebases or app store approvals. PWAs allow you to:"
        },
        {
          "type": "list",
          "items": [
            "Deploy updates instantly without waiting for app store approval",
            "Create cross-platform applications with a single codebase",
            "Provide native-like features such as home screen installation and push notifications"
          ]
        },
        {
          "type": "p",
          "text": "Next.js provides built-in support for creating aweb app manifestusing the App Router. You can create either a static or dynamic manifest file: For example, create aapp/manifest.tsorapp/manifest.jsonfile:"
        },
        {
          "type": "code",
          "code": "importtype{ MetadataRoute }from'next'exportdefaultfunctionmanifest():MetadataRoute.Manifest{return{name:'Next.js PWA',short_name:'NextPWA',description:'A Progressive Web App built with Next.js',start_url:'/',display:'standalone',background_color:'#ffffff',theme_color:'#000000',icons:[{src:'/icon-192x192.png',sizes:'192x192',type:'image/png',},{src:'/icon-512x512.png',sizes:'512x512',type:'image/png',},],}}"
        },
        {
          "type": "p",
          "text": "This file should contain information about the name, icons, and how it should be displayed as an icon on the user's device. This will allow users to install your PWA on their home screen, providing a native app-like experience. You can use tools likefavicon generatorsto create the different icon sets and place the generated files in yourpublic/folder."
        },
        {
          "type": "p",
          "text": "Web Push Notifications are supported with all modern browsers, including:"
        },
        {
          "type": "list",
          "items": [
            "iOS 16.4+ for applications installed to the home screen",
            "Safari 16 for macOS 13 or later",
            "Chromium based browsers",
            "Firefox"
          ]
        },
        {
          "type": "p",
          "text": "This makes PWAs a viable alternative to native apps. Notably, you can trigger install prompts without needing offline support. Web Push Notifications allow you to re-engage users even when they're not actively using your app. Here's how to implement them in a Next.js application: First, let's create the main page component inapp/page.tsx. We'll break it down into smaller parts for better understanding. First, we’ll add some of the imports and utilities we’ll need. It’s okay that the referenced Server Actions do not yet exist:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useState,useEffect }from'react'import{ subscribeUser,unsubscribeUser,sendNotification }from'./actions'functionurlBase64ToUint8Array(base64String:string) {constpadding='='.repeat((4-(base64String.length%4))%4)constbase64=(base64String+padding).replace(/\\\\-/g,'+').replace(/_/g,'/')constrawData=window.atob(base64)constoutputArray=newUint8Array(rawData.length)for(leti=0; i<rawData.length;++i) {outputArray[i]=rawData.charCodeAt(i)}returnoutputArray}"
        },
        {
          "type": "p",
          "text": "Let’s now add a component to manage subscribing, unsubscribing, and sending push notifications."
        },
        {
          "type": "code",
          "code": "functionPushNotificationManager() {const[isSupported,setIsSupported]=useState(false)const[subscription,setSubscription]=useState<PushSubscription|null>(null)const[message,setMessage]=useState('')useEffect(()=>{if('serviceWorker'innavigator&&'PushManager'inwindow) {setIsSupported(true)registerServiceWorker()}},[])asyncfunctionregisterServiceWorker() {constregistration=awaitnavigator.serviceWorker.register('/sw.js',{scope:'/',updateViaCache:'none',})constsub=awaitregistration.pushManager.getSubscription()setSubscription(sub)}asyncfunctionsubscribeToPush() {constregistration=awaitnavigator.serviceWorker.readyconstsub=awaitregistration.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:urlBase64ToUint8Array(process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!),})setSubscription(sub)awaitsubscribeUser(sub)}asyncfunctionunsubscribeFromPush() {awaitsubscription?.unsubscribe()setSubscription(null)awaitunsubscribeUser()}asyncfunctionsendTestNotification() {if(subscription) {awaitsendNotification(message)setMessage('')}}if(!isSupported) {return<p>Push notifications are not supported in this browser.</p>}return(<div><h3>Push Notifications</h3>{subscription?(<><p>You are subscribed to push notifications.</p><buttononClick={unsubscribeFromPush}>Unsubscribe</button><inputtype=\"text\"placeholder=\"Enter notification message\"value={message}onChange={(e)=>setMessage(e.target.value)}/><buttononClick={sendTestNotification}>Send Test</button></>):(<><p>You are not subscribed to push notifications.</p><buttononClick={subscribeToPush}>Subscribe</button></>)}</div>)}"
        },
        {
          "type": "p",
          "text": "Finally, let’s create a component to show a message for iOS devices to instruct them to install to their home screen, and only show this if the app is not already installed."
        },
        {
          "type": "code",
          "code": "functionInstallPrompt() {const[isIOS,setIsIOS]=useState(false)const[isStandalone,setIsStandalone]=useState(false)useEffect(()=>{setIsIOS(/iPad|iPhone|iPod/.test(navigator.userAgent)&&!(windowasany).MSStream)setIsStandalone(window.matchMedia('(display-mode: standalone)').matches)},[])if(isStandalone) {returnnull// Don't show install button if already installed}return(<div><h3>Install App</h3><button>Add to Home Screen</button>{isIOS&&(<p>To install this app on your iOS device, tap the share button<spanrole=\"img\"aria-label=\"share icon\">{' '}⎋{' '}</span>and then \"Add to Home Screen\"<spanrole=\"img\"aria-label=\"plus icon\">{' '}➕{' '}</span>.</p>)}</div>)}exportdefaultfunctionPage() {return(<div><PushNotificationManager/><InstallPrompt/></div>)}"
        },
        {
          "type": "p",
          "text": "Now, let’s create the Server Actions which this file calls."
        },
        {
          "type": "p",
          "text": "Create a new file to contain your actions atapp/actions.ts. This file will handle creating subscriptions, deleting subscriptions, and sending notifications."
        },
        {
          "type": "code",
          "code": "'use server'importwebpushfrom'web-push'webpush.setVapidDetails('<mailto:your-email@example.com>',process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,process.env.VAPID_PRIVATE_KEY!)letsubscription:PushSubscription|null=nullexportasyncfunctionsubscribeUser(sub:PushSubscription) {subscription=sub// In a production environment, you would want to store the subscription in a database// For example: await db.subscriptions.create({ data: sub })return{ success:true}}exportasyncfunctionunsubscribeUser() {subscription=null// In a production environment, you would want to remove the subscription from the database// For example: await db.subscriptions.delete({ where: { ... } })return{ success:true}}exportasyncfunctionsendNotification(message:string) {if(!subscription) {thrownewError('No subscription available')}try{awaitwebpush.sendNotification(subscription,JSON.stringify({title:'Test Notification',body:message,icon:'/icon.png',}))return{ success:true}}catch(error) {console.error('Error sending push notification:',error)return{ success:false,error:'Failed to send notification'}}}"
        },
        {
          "type": "p",
          "text": "Sending a notification will be handled by our service worker, created in step 5. In a production environment, you would want to store the subscription in a database for persistence across server restarts and to manage multiple users' subscriptions."
        },
        {
          "type": "p",
          "text": "To use the Web Push API, you need to generateVAPIDkeys. The simplest way is to use the web-push CLI directly: First, install web-push globally:"
        },
        {
          "type": "code",
          "code": "npminstall-gweb-push"
        },
        {
          "type": "p",
          "text": "Generate the VAPID keys by running:"
        },
        {
          "type": "code",
          "code": "web-pushgenerate-vapid-keys"
        },
        {
          "type": "p",
          "text": "Copy the output and paste the keys into your.envfile:"
        },
        {
          "type": "code",
          "code": "NEXT_PUBLIC_VAPID_PUBLIC_KEY=your_public_key_hereVAPID_PRIVATE_KEY=your_private_key_here"
        },
        {
          "type": "p",
          "text": "Create apublic/sw.jsfile for your service worker:"
        },
        {
          "type": "code",
          "code": "self.addEventListener('push',function(event) {if(event.data) {constdata=event.data.json()constoptions={body:data.body,icon:data.icon||'/icon.png',badge:'/badge.png',vibrate:[100,50,100],data:{dateOfArrival:Date.now(),primaryKey:'2',},}event.waitUntil(self.registration.showNotification(data.title,options))}})self.addEventListener('notificationclick',function(event) {console.log('Notification click received.')event.notification.close()event.waitUntil(clients.openWindow('<https://your-website.com>'))})"
        },
        {
          "type": "p",
          "text": "This service worker supports custom images and notifications. It handles incoming push events and notification clicks."
        },
        {
          "type": "list",
          "items": [
            "You can set custom icons for notifications using theiconandbadgeproperties.",
            "Thevibratepattern can be adjusted to create custom vibration alerts on supported devices.",
            "Additional data can be attached to the notification using thedataproperty."
          ]
        },
        {
          "type": "p",
          "text": "Remember to test your service worker thoroughly to ensure it behaves as expected across different devices and browsers. Also, make sure to update the'https://your-website.com'link in thenotificationclickevent listener to the appropriate URL for your application."
        },
        {
          "type": "p",
          "text": "TheInstallPromptcomponent defined in step 2 shows a message for iOS devices to instruct them to install to their home screen. To ensure your application can be installed to a mobile home screen, you must have:"
        },
        {
          "type": "list",
          "items": [
            "A valid web app manifest (created in step 1)",
            "The website served over HTTPS"
          ]
        },
        {
          "type": "p",
          "text": "Modern browsers will automatically show an installation prompt to users when these criteria are met. You can provide a custom installation button withbeforeinstallprompt, however, we do not recommend this as it is not cross browser and platform (does not work on Safari iOS)."
        },
        {
          "type": "p",
          "text": "To ensure you can view notifications locally, ensure that:"
        },
        {
          "type": "list",
          "items": [
            "You arerunning locally with HTTPSUsenext dev --experimental-httpsfor testing",
            "Usenext dev --experimental-httpsfor testing",
            "Your browser (Chrome, Safari, Firefox) has notifications enabledWhen prompted locally, accept permissions to use notificationsEnsure notifications are not disabled globally for the entire browserIf you are still not seeing notifications, try using another browser to debug",
            "When prompted locally, accept permissions to use notifications",
            "Ensure notifications are not disabled globally for the entire browser",
            "If you are still not seeing notifications, try using another browser to debug"
          ]
        },
        {
          "type": "p",
          "text": "Security is a crucial aspect of any web application, especially for PWAs. Next.js allows you to configure security headers using thenext.config.jsfile. For example:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncheaders() {return[{source:'/(.*)',headers:[{key:'X-Content-Type-Options',value:'nosniff',},{key:'X-Frame-Options',value:'DENY',},{key:'Referrer-Policy',value:'strict-origin-when-cross-origin',},],},{source:'/sw.js',headers:[{key:'Content-Type',value:'application/javascript; charset=utf-8',},{key:'Cache-Control',value:'no-cache, no-store, must-revalidate',},{key:'Content-Security-Policy',value:\"default-src 'self'; script-src 'self'\",},],},]},}"
        },
        {
          "type": "p",
          "text": "Let’s go over each of these options:"
        },
        {
          "type": "list",
          "items": [
            "Global Headers (applied to all routes):X-Content-Type-Options: nosniff: Prevents MIME type sniffing, reducing the risk of malicious file uploads.X-Frame-Options: DENY: Protects against clickjacking attacks by preventing your site from being embedded in iframes.Referrer-Policy: strict-origin-when-cross-origin: Controls how much referrer information is included with requests, balancing security and functionality.",
            "X-Content-Type-Options: nosniff: Prevents MIME type sniffing, reducing the risk of malicious file uploads.",
            "X-Frame-Options: DENY: Protects against clickjacking attacks by preventing your site from being embedded in iframes.",
            "Referrer-Policy: strict-origin-when-cross-origin: Controls how much referrer information is included with requests, balancing security and functionality.",
            "Service Worker Specific Headers:Content-Type: application/javascript; charset=utf-8: Ensures the service worker is interpreted correctly as JavaScript.Cache-Control: no-cache, no-store, must-revalidate: Prevents caching of the service worker, ensuring users always get the latest version.Content-Security-Policy: default-src 'self'; script-src 'self': Implements a strict Content Security Policy for the service worker, only allowing scripts from the same origin.",
            "Content-Type: application/javascript; charset=utf-8: Ensures the service worker is interpreted correctly as JavaScript.",
            "Cache-Control: no-cache, no-store, must-revalidate: Prevents caching of the service worker, ensuring users always get the latest version.",
            "Content-Security-Policy: default-src 'self'; script-src 'self': Implements a strict Content Security Policy for the service worker, only allowing scripts from the same origin."
          ]
        },
        {
          "type": "p",
          "text": "Learn more about definingContent Security Policieswith Next.js."
        },
        {
          "type": "list",
          "items": [
            "Exploring PWA Capabilities: PWAs can leverage various web APIs to provide advanced functionality. Consider exploring features like background sync, periodic background sync, or the File System Access API to enhance your application. For inspiration and up-to-date information on PWA capabilities, you can refer to resources likeWhat PWA Can Do Today.",
            "Static Exports:If your application requires not running a server, and instead using a static export of files, you can update the Next.js configuration to enable this change. Learn more in theNext.js Static Export documentation. However, you will need to move from Server Actions to calling an external API, as well as moving your defined headers to your proxy.",
            "Offline Support: To provide offline functionality, one option isSerwistwith Next.js. You can find an example of how to integrate Serwist with Next.js in theirdocumentation.Note:this plugin currently requires webpack configuration.",
            "Security Considerations: Ensure that your service worker is properly secured. This includes using HTTPS, validating the source of push messages, and implementing proper error handling.",
            "User Experience: Consider implementing progressive enhancement techniques to ensure your app works well even when certain PWA features are not supported by the user's browser."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/configuring/src-directory",
      "title": "Configuring: src Directory | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "As an alternative to having the special Next.jsapporpagesdirectories in the root of your project, Next.js also supports the common pattern of placing application code under thesrcdirectory. This separates application code from project configuration files which mostly live in the root of a project, which is preferred by some individuals and teams. To use thesrcdirectory, move theappRouter folder orpagesRouter folder tosrc/apporsrc/pagesrespectively."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "The/publicdirectory should remain in the root of your project.",
            "Config files likepackage.json,next.config.jsandtsconfig.jsonshould remain in the root of your project.",
            ".env.*files should remain in the root of your project.",
            "src/apporsrc/pageswill be ignored ifapporpagesare present in the root directory.",
            "If you're usingsrc, you'll probably also move other application folders such as/componentsor/lib.",
            "If you're using Middleware, ensure it is placed inside thesrcdirectory.",
            "If you're using Tailwind CSS, you'll need to add the/srcprefix to thetailwind.config.jsfile in thecontent section.",
            "If you are using TypeScript paths for imports such as@/*, you should update thepathsobject intsconfig.jsonto includesrc/."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/data-fetching",
      "title": "Building Your Application: Data Fetching | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/fetching",
      "title": "Data Fetching: Data Fetching and Caching | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "list",
          "items": ["Next.js Commerce", "On-Demand ISR", "Next.js Forms"]
        },
        {
          "type": "p",
          "text": "This guide will walk you through the basics of data fetching and caching in Next.js, providing practical examples and best practices. Here's a minimal example of data fetching in Next.js:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog')constposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "This example demonstrates a basic server-side data fetch using thefetchAPI in an asynchronous React Server Component."
        },
        {
          "type": "list",
          "items": ["fetch", "Reactcache", "Next.jsunstable_cache"]
        },
        {
          "type": "p",
          "text": "This component will fetch and display a list of blog posts. The response fromfetchis not cached by default."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog')constposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "If you are not using anyDynamic APIsanywhere else in this route, it will be prerendered duringnext buildto a static page. The data can then be updated usingIncremental Static Regeneration. To prevent the page from prerendering, you can add the following to your file:"
        },
        {
          "type": "code",
          "code": "exportconstdynamic='force-dynamic'"
        },
        {
          "type": "p",
          "text": "However, you will commonly use functions likecookies,headers, or reading the incomingsearchParamsfrom the page props, which will automatically make the page render dynamically. In this case, you donotneed to explicitly useforce-dynamic."
        },
        {
          "type": "p",
          "text": "This component will fetch and display a list of blog posts. The response from the database is not cached by default but could be withadditional configuration."
        },
        {
          "type": "code",
          "code": "import{ db,posts }from'@/lib/db'exportdefaultasyncfunctionPage() {constallPosts=awaitdb.select().from(posts)return(<ul>{allPosts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "If you are not using anyDynamic APIsanywhere else in this route, it will be prerendered duringnext buildto a static page. The data can then be updated usingIncremental Static Regeneration. To prevent the page from prerendering, you can add the following to your file:"
        },
        {
          "type": "code",
          "code": "exportconstdynamic='force-dynamic'"
        },
        {
          "type": "p",
          "text": "However, you will commonly use functions likecookies,headers, or reading the incomingsearchParamsfrom the page props, which will automatically make the page render dynamically. In this case, you donotneed to explicitly useforce-dynamic."
        },
        {
          "type": "p",
          "text": "We recommend first attempting to fetch data on the server-side. However, there are still cases where client-side data fetching makes sense. In these scenarios, you can manually callfetchin auseEffect(not recommended), or lean on popular React libraries in the community (such asSWRorReact Query) for client fetching."
        },
        {
          "type": "code",
          "code": "'use client'import{ useState,useEffect }from'react'exportfunctionPosts() {const[posts,setPosts]=useState(null)useEffect(()=>{asyncfunctionfetchPosts() {constres=awaitfetch('https://api.vercel.app/blog')constdata=awaitres.json()setPosts(data)}fetchPosts()},[])if(!posts)return<div>Loading...</div>return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "You can use theunstable_cacheAPI to cache the response to allow pages to be prerendered when runningnext build."
        },
        {
          "type": "code",
          "code": "import{ unstable_cache }from'next/cache'import{ db,posts }from'@/lib/db'constgetPosts=unstable_cache(async()=>{returnawaitdb.select().from(posts)},['posts'],{ revalidate:3600,tags:['posts'] })exportdefaultasyncfunctionPage() {constallPosts=awaitgetPosts()return(<ul>{allPosts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "This example caches the result of the database query for 1 hour (3600 seconds). It also adds the cache tagpostswhich can then be invalidated withIncremental Static Regeneration."
        },
        {
          "type": "p",
          "text": "Next.js uses APIs likegenerateMetadataandgenerateStaticParamswhere you will need to use the same data fetched in thepage. If you are usingfetch, requests can bememoizedby addingcache: 'force-cache'. This means you can safely call the same URL with the same options, and only one request will be made."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "In previous versions of Next.js, usingfetchwould have a defaultcachevalue offorce-cache. This changed in version 15, to a default ofcache: no-store."
          ]
        },
        {
          "type": "code",
          "code": "import{ notFound }from'next/navigation'interfacePost{id:stringtitle:stringcontent:string}asyncfunctiongetPost(id:string) {constres=awaitfetch(`https://api.vercel.app/blog/${id}`,{cache:'force-cache',})constpost:Post=awaitres.json()if(!post)notFound()returnpost}exportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://api.vercel.app/blog',{cache:'force-cache',}).then((res)=>res.json())returnposts.map((post:Post)=>({id:String(post.id),}))}exportasyncfunctiongenerateMetadata({params,}:{params:Promise<{ id:string}>}) {const{id}=awaitparamsconstpost=awaitgetPost(id)return{title:post.title,}}exportdefaultasyncfunctionPage({params,}:{params:Promise<{ id:string}>}) {const{id}=awaitparamsconstpost=awaitgetPost(id)return(<article><h1>{post.title}</h1><p>{post.content}</p></article>)}"
        },
        {
          "type": "p",
          "text": "If you arenotusingfetch, and instead using an ORM or database directly, you can wrap your data fetch with the Reactcachefunction. This will de-duplicate and only make one query."
        },
        {
          "type": "code",
          "code": "import{ cache }from'react'import{ db,posts,eq }from'@/lib/db'// Example with Drizzle ORMimport{ notFound }from'next/navigation'exportconstgetPost=cache(async(id)=>{constpost=awaitdb.query.posts.findFirst({where:eq(posts.id,parseInt(id)),})if(!post)notFound()returnpost})"
        },
        {
          "type": "p",
          "text": "Learn more about revalidating cached data withIncremental Static Regeneration."
        },
        {
          "type": "p",
          "text": "When fetching data inside components, you need to be aware of two data fetching patterns: Parallel and Sequential."
        },
        {
          "type": "list",
          "items": [
            "Sequential: requests in a component tree are dependent on each other. This can lead to longer loading times.",
            "Parallel: requests in a route are eagerly initiated and will load data at the same time. This reduces the total time it takes to load data."
          ]
        },
        {
          "type": "p",
          "text": "If you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are notmemoized. There may be cases where you want this pattern because one fetch depends on the result of the other. For example, thePlaylistscomponent will only start fetching data once theArtistcomponent has finished fetching data becausePlaylistsdepends on theartistIDprop:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage({params,}:{params:Promise<{ username:string}>}) {const{username}=awaitparams// Getartistinformationconstartist=awaitgetArtist(username)return(<><h1>{artist.name}</h1>{/* Show fallback UI while the Playlists component is loading */}<Suspensefallback={<div>Loading...</div>}>{/* Pass theartistID to the Playlists component */}<PlaylistsartistID={artist.id} /></Suspense></>)}asyncfunctionPlaylists({artistID }:{artistID:string}) {// Use theartistID to fetch playlistsconstplaylists=awaitgetArtistPlaylists(artistID)return(<ul>{playlists.map((playlist)=>(<likey={playlist.id}>{playlist.name}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "You can useloading.js(for route segments) orReact<Suspense>(for nested components) to show an instant loading state while React streams in the result. This will prevent the whole route from being blocked by data requests, and the user will be able to interact with the parts of the page that are ready."
        },
        {
          "type": "p",
          "text": "By default, layout and page segments are rendered in parallel. This means requests will be initiated in parallel. However, due to the nature ofasync/await, an awaited request inside the same segment or component will block any requests below it. To fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved. In the example below, thegetArtistandgetAlbumsfunctions are defined outside thePagecomponent and initiated inside the component usingPromise.all:"
        },
        {
          "type": "code",
          "code": "importAlbumsfrom'./albums'asyncfunctiongetArtist(username:string) {constres=awaitfetch(`https://api.example.com/artist/${username}`)returnres.json()}asyncfunctiongetAlbums(username:string) {constres=awaitfetch(`https://api.example.com/artist/${username}/albums`)returnres.json()}exportdefaultasyncfunctionPage({params,}:{params:Promise<{ username:string}>}) {const{username}=awaitparamsconstartistData=getArtist(username)constalbumsData=getAlbums(username)// Initiate both requests in parallelconst[artist,albums]=awaitPromise.all([artistData,albumsData])return(<><h1>{artist.name}</h1><Albumslist={albums} /></>)}"
        },
        {
          "type": "p",
          "text": "In addition, you can add aSuspense Boundaryto break up the rendering work and show part of the result as soon as possible."
        },
        {
          "type": "p",
          "text": "Another way to prevent waterfalls is to use thepreloadpattern by creating an utility function that you eagerly call above blocking requests. For example,checkIsAvailable()blocks<Item/>from rendering, so you can callpreload()before it to eagerly initiate<Item/>data dependencies. By the time<Item/>is rendered, its data has already been fetched. Note thatpreloadfunction doesn't blockcheckIsAvailable()from running."
        },
        {
          "type": "code",
          "code": "import{ getItem }from'@/utils/get-item'exportconstpreload=(id:string)=>{// void evaluates the given expression and returns undefined// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/voidvoidgetItem(id)}exportdefaultasyncfunctionItem({ id }:{ id:string}) {constresult=awaitgetItem(id)// ...}"
        },
        {
          "type": "code",
          "code": "importItem,{ preload,checkIsAvailable }from'@/components/Item'exportdefaultasyncfunctionPage({params,}:{params:Promise<{ id:string}>}) {const{id}=awaitparams// starting loadingitemdatapreload(id)// perform another asynchronous taskconstisAvailable=awaitcheckIsAvailable()returnisAvailable?<Itemid={id} />:null}"
        },
        {
          "type": "p",
          "text": "Good to know:The \"preload\" function can also have any name as it's a pattern, not an API."
        },
        {
          "type": "p",
          "text": "You can combine thecachefunction, thepreloadpattern, and theserver-onlypackage to create a data fetching utility that can be used throughout your app."
        },
        {
          "type": "code",
          "code": "import{ cache }from'react'import'server-only'exportconstpreload=(id:string)=>{voidgetItem(id)}exportconstgetItem=cache(async(id:string)=>{// ...})"
        },
        {
          "type": "p",
          "text": "With this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetchingonly happens on the server. Theutils/get-itemexports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "We recommend using theserver-onlypackageto make sure server data fetching functions are never used on the client."
          ]
        },
        {
          "type": "p",
          "text": "We recommend using React's taint APIs,taintObjectReferenceandtaintUniqueValue, to prevent whole object instances or sensitive values from being passed to the client. To enable tainting in your application, set the Next.js Configexperimental.taintoption totrue:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{taint:true,},}"
        },
        {
          "type": "p",
          "text": "Then pass the object or value you want to taint to theexperimental_taintObjectReferenceorexperimental_taintUniqueValuefunctions:"
        },
        {
          "type": "code",
          "code": "import{ queryDataFromDB }from'./api'import{experimental_taintObjectReference,experimental_taintUniqueValue,}from'react'exportasyncfunctiongetUserData() {constdata=awaitqueryDataFromDB()experimental_taintObjectReference('Do not pass the whole user object to the client',data)experimental_taintUniqueValue(\"Do not pass the user's address to the client\",data,data.address)returndata}"
        },
        {
          "type": "code",
          "code": "import{ getUserData }from'./data'exportasyncfunctionPage() {constuserData=getUserData()return(<ClientComponentuser={userData}// this will cause an error because of taintObjectReferenceaddress={userData.address}// this will cause an error because of taintUniqueValue/>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating",
      "title": "Data Fetching: Data Fetching and Caching | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "list",
          "items": ["Next.js Commerce", "On-Demand ISR", "Next.js Forms"]
        },
        {
          "type": "p",
          "text": "This guide will walk you through the basics of data fetching and caching in Next.js, providing practical examples and best practices. Here's a minimal example of data fetching in Next.js:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog')constposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "This example demonstrates a basic server-side data fetch using thefetchAPI in an asynchronous React Server Component."
        },
        {
          "type": "list",
          "items": ["fetch", "Reactcache", "Next.jsunstable_cache"]
        },
        {
          "type": "p",
          "text": "This component will fetch and display a list of blog posts. The response fromfetchis not cached by default."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog')constposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "If you are not using anyDynamic APIsanywhere else in this route, it will be prerendered duringnext buildto a static page. The data can then be updated usingIncremental Static Regeneration. To prevent the page from prerendering, you can add the following to your file:"
        },
        {
          "type": "code",
          "code": "exportconstdynamic='force-dynamic'"
        },
        {
          "type": "p",
          "text": "However, you will commonly use functions likecookies,headers, or reading the incomingsearchParamsfrom the page props, which will automatically make the page render dynamically. In this case, you donotneed to explicitly useforce-dynamic."
        },
        {
          "type": "p",
          "text": "This component will fetch and display a list of blog posts. The response from the database is not cached by default but could be withadditional configuration."
        },
        {
          "type": "code",
          "code": "import{ db,posts }from'@/lib/db'exportdefaultasyncfunctionPage() {constallPosts=awaitdb.select().from(posts)return(<ul>{allPosts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "If you are not using anyDynamic APIsanywhere else in this route, it will be prerendered duringnext buildto a static page. The data can then be updated usingIncremental Static Regeneration. To prevent the page from prerendering, you can add the following to your file:"
        },
        {
          "type": "code",
          "code": "exportconstdynamic='force-dynamic'"
        },
        {
          "type": "p",
          "text": "However, you will commonly use functions likecookies,headers, or reading the incomingsearchParamsfrom the page props, which will automatically make the page render dynamically. In this case, you donotneed to explicitly useforce-dynamic."
        },
        {
          "type": "p",
          "text": "We recommend first attempting to fetch data on the server-side. However, there are still cases where client-side data fetching makes sense. In these scenarios, you can manually callfetchin auseEffect(not recommended), or lean on popular React libraries in the community (such asSWRorReact Query) for client fetching."
        },
        {
          "type": "code",
          "code": "'use client'import{ useState,useEffect }from'react'exportfunctionPosts() {const[posts,setPosts]=useState(null)useEffect(()=>{asyncfunctionfetchPosts() {constres=awaitfetch('https://api.vercel.app/blog')constdata=awaitres.json()setPosts(data)}fetchPosts()},[])if(!posts)return<div>Loading...</div>return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "You can use theunstable_cacheAPI to cache the response to allow pages to be prerendered when runningnext build."
        },
        {
          "type": "code",
          "code": "import{ unstable_cache }from'next/cache'import{ db,posts }from'@/lib/db'constgetPosts=unstable_cache(async()=>{returnawaitdb.select().from(posts)},['posts'],{ revalidate:3600,tags:['posts'] })exportdefaultasyncfunctionPage() {constallPosts=awaitgetPosts()return(<ul>{allPosts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "This example caches the result of the database query for 1 hour (3600 seconds). It also adds the cache tagpostswhich can then be invalidated withIncremental Static Regeneration."
        },
        {
          "type": "p",
          "text": "Next.js uses APIs likegenerateMetadataandgenerateStaticParamswhere you will need to use the same data fetched in thepage. If you are usingfetch, requests can bememoizedby addingcache: 'force-cache'. This means you can safely call the same URL with the same options, and only one request will be made."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "In previous versions of Next.js, usingfetchwould have a defaultcachevalue offorce-cache. This changed in version 15, to a default ofcache: no-store."
          ]
        },
        {
          "type": "code",
          "code": "import{ notFound }from'next/navigation'interfacePost{id:stringtitle:stringcontent:string}asyncfunctiongetPost(id:string) {constres=awaitfetch(`https://api.vercel.app/blog/${id}`,{cache:'force-cache',})constpost:Post=awaitres.json()if(!post)notFound()returnpost}exportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://api.vercel.app/blog',{cache:'force-cache',}).then((res)=>res.json())returnposts.map((post:Post)=>({id:String(post.id),}))}exportasyncfunctiongenerateMetadata({params,}:{params:Promise<{ id:string}>}) {const{id}=awaitparamsconstpost=awaitgetPost(id)return{title:post.title,}}exportdefaultasyncfunctionPage({params,}:{params:Promise<{ id:string}>}) {const{id}=awaitparamsconstpost=awaitgetPost(id)return(<article><h1>{post.title}</h1><p>{post.content}</p></article>)}"
        },
        {
          "type": "p",
          "text": "If you arenotusingfetch, and instead using an ORM or database directly, you can wrap your data fetch with the Reactcachefunction. This will de-duplicate and only make one query."
        },
        {
          "type": "code",
          "code": "import{ cache }from'react'import{ db,posts,eq }from'@/lib/db'// Example with Drizzle ORMimport{ notFound }from'next/navigation'exportconstgetPost=cache(async(id)=>{constpost=awaitdb.query.posts.findFirst({where:eq(posts.id,parseInt(id)),})if(!post)notFound()returnpost})"
        },
        {
          "type": "p",
          "text": "Learn more about revalidating cached data withIncremental Static Regeneration."
        },
        {
          "type": "p",
          "text": "When fetching data inside components, you need to be aware of two data fetching patterns: Parallel and Sequential."
        },
        {
          "type": "list",
          "items": [
            "Sequential: requests in a component tree are dependent on each other. This can lead to longer loading times.",
            "Parallel: requests in a route are eagerly initiated and will load data at the same time. This reduces the total time it takes to load data."
          ]
        },
        {
          "type": "p",
          "text": "If you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are notmemoized. There may be cases where you want this pattern because one fetch depends on the result of the other. For example, thePlaylistscomponent will only start fetching data once theArtistcomponent has finished fetching data becausePlaylistsdepends on theartistIDprop:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage({params,}:{params:Promise<{ username:string}>}) {const{username}=awaitparams// Getartistinformationconstartist=awaitgetArtist(username)return(<><h1>{artist.name}</h1>{/* Show fallback UI while the Playlists component is loading */}<Suspensefallback={<div>Loading...</div>}>{/* Pass theartistID to the Playlists component */}<PlaylistsartistID={artist.id} /></Suspense></>)}asyncfunctionPlaylists({artistID }:{artistID:string}) {// Use theartistID to fetch playlistsconstplaylists=awaitgetArtistPlaylists(artistID)return(<ul>{playlists.map((playlist)=>(<likey={playlist.id}>{playlist.name}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "You can useloading.js(for route segments) orReact<Suspense>(for nested components) to show an instant loading state while React streams in the result. This will prevent the whole route from being blocked by data requests, and the user will be able to interact with the parts of the page that are ready."
        },
        {
          "type": "p",
          "text": "By default, layout and page segments are rendered in parallel. This means requests will be initiated in parallel. However, due to the nature ofasync/await, an awaited request inside the same segment or component will block any requests below it. To fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved. In the example below, thegetArtistandgetAlbumsfunctions are defined outside thePagecomponent and initiated inside the component usingPromise.all:"
        },
        {
          "type": "code",
          "code": "importAlbumsfrom'./albums'asyncfunctiongetArtist(username:string) {constres=awaitfetch(`https://api.example.com/artist/${username}`)returnres.json()}asyncfunctiongetAlbums(username:string) {constres=awaitfetch(`https://api.example.com/artist/${username}/albums`)returnres.json()}exportdefaultasyncfunctionPage({params,}:{params:Promise<{ username:string}>}) {const{username}=awaitparamsconstartistData=getArtist(username)constalbumsData=getAlbums(username)// Initiate both requests in parallelconst[artist,albums]=awaitPromise.all([artistData,albumsData])return(<><h1>{artist.name}</h1><Albumslist={albums} /></>)}"
        },
        {
          "type": "p",
          "text": "In addition, you can add aSuspense Boundaryto break up the rendering work and show part of the result as soon as possible."
        },
        {
          "type": "p",
          "text": "Another way to prevent waterfalls is to use thepreloadpattern by creating an utility function that you eagerly call above blocking requests. For example,checkIsAvailable()blocks<Item/>from rendering, so you can callpreload()before it to eagerly initiate<Item/>data dependencies. By the time<Item/>is rendered, its data has already been fetched. Note thatpreloadfunction doesn't blockcheckIsAvailable()from running."
        },
        {
          "type": "code",
          "code": "import{ getItem }from'@/utils/get-item'exportconstpreload=(id:string)=>{// void evaluates the given expression and returns undefined// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/voidvoidgetItem(id)}exportdefaultasyncfunctionItem({ id }:{ id:string}) {constresult=awaitgetItem(id)// ...}"
        },
        {
          "type": "code",
          "code": "importItem,{ preload,checkIsAvailable }from'@/components/Item'exportdefaultasyncfunctionPage({params,}:{params:Promise<{ id:string}>}) {const{id}=awaitparams// starting loadingitemdatapreload(id)// perform another asynchronous taskconstisAvailable=awaitcheckIsAvailable()returnisAvailable?<Itemid={id} />:null}"
        },
        {
          "type": "p",
          "text": "Good to know:The \"preload\" function can also have any name as it's a pattern, not an API."
        },
        {
          "type": "p",
          "text": "You can combine thecachefunction, thepreloadpattern, and theserver-onlypackage to create a data fetching utility that can be used throughout your app."
        },
        {
          "type": "code",
          "code": "import{ cache }from'react'import'server-only'exportconstpreload=(id:string)=>{voidgetItem(id)}exportconstgetItem=cache(async(id:string)=>{// ...})"
        },
        {
          "type": "p",
          "text": "With this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetchingonly happens on the server. Theutils/get-itemexports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "We recommend using theserver-onlypackageto make sure server data fetching functions are never used on the client."
          ]
        },
        {
          "type": "p",
          "text": "We recommend using React's taint APIs,taintObjectReferenceandtaintUniqueValue, to prevent whole object instances or sensitive values from being passed to the client. To enable tainting in your application, set the Next.js Configexperimental.taintoption totrue:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{taint:true,},}"
        },
        {
          "type": "p",
          "text": "Then pass the object or value you want to taint to theexperimental_taintObjectReferenceorexperimental_taintUniqueValuefunctions:"
        },
        {
          "type": "code",
          "code": "import{ queryDataFromDB }from'./api'import{experimental_taintObjectReference,experimental_taintUniqueValue,}from'react'exportasyncfunctiongetUserData() {constdata=awaitqueryDataFromDB()experimental_taintObjectReference('Do not pass the whole user object to the client',data)experimental_taintUniqueValue(\"Do not pass the user's address to the client\",data,data.address)returndata}"
        },
        {
          "type": "code",
          "code": "import{ getUserData }from'./data'exportasyncfunctionPage() {constuserData=getUserData()return(<ClientComponentuser={userData}// this will cause an error because of taintObjectReferenceaddress={userData.address}// this will cause an error because of taintUniqueValue/>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/forms-and-mutations",
      "title": "Data Fetching: Server Actions and Mutations | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Server Actionsareasynchronous functionsthat are executed on the server. They can be called in Server and Client Components to handle form submissions and data mutations in Next.js applications."
        },
        {
          "type": "p",
          "text": "🎥 Watch:Learn more about mutations with Server Actions →YouTube (10 minutes)."
        },
        {
          "type": "p",
          "text": "A Server Action can be defined with the React\"use server\"directive. You can place the directive at the top of anasyncfunction to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions."
        },
        {
          "type": "p",
          "text": "Server Components can use the inline function level or module level\"use server\"directive. To inline a Server Action, add\"use server\"to the top of the function body:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {// Server Actionasyncfunctioncreate() {'use server'// Mutate data}return'...'}"
        },
        {
          "type": "p",
          "text": "To call a Server Action in a Client Component, create a new file and add the\"use server\"directive at the top of it. All exported functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:"
        },
        {
          "type": "code",
          "code": "'use server'exportasyncfunctioncreate() {}"
        },
        {
          "type": "code",
          "code": "'use client'import{ create }from'@/app/actions'exportfunctionButton() {return<buttononClick={()=>create()}>Create</button>}"
        },
        {
          "type": "p",
          "text": "You can also pass a Server Action to a Client Component as a prop:"
        },
        {
          "type": "code",
          "code": "<ClientComponentupdateItemAction={updateItem} />"
        },
        {
          "type": "code",
          "code": "'use client'exportdefaultfunctionClientComponent({updateItemAction,}:{updateItemAction:(formData:FormData)=>void}) {return<formaction={updateItemAction}>{/* ... */}</form>}"
        },
        {
          "type": "p",
          "text": "Usually, the Next.js TypeScript plugin would flagupdateItemActioninclient-component.tsxsince it is a function which generally can't be serialized across client-server boundaries.\nHowever, props namedactionor ending withActionare assumed to receive Server Actions.\nThis is only a heuristic since the TypeScript plugin doesn't actually know if it receives a Server Action or an ordinary function.\nRuntime type-checking will still ensure you don't accidentally pass a function to a Client Component."
        },
        {
          "type": "list",
          "items": [
            "Server actions can be invoked using theactionattribute in a<form>element:Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.After hydration, the browser does not refresh on form submission.",
            "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
            "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
            "After hydration, the browser does not refresh on form submission.",
            "Server Actions are not limited to<form>and can be invoked from event handlers,useEffect, third-party libraries, and other form elements like<button>.",
            "Server Actions integrate with the Next.jscaching and revalidationarchitecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.",
            "Behind the scenes, actions use thePOSTmethod, and only this HTTP method can invoke them.",
            "The arguments and return value of Server Actions must be serializable by React. See the React docs for a list ofserializable arguments and values.",
            "Server Actions are functions. This means they can be reused anywhere in your application.",
            "Server Actions inherit theruntimefrom the page or layout they are used on.",
            "Server Actions inherit theRoute Segment Configfrom the page or layout they are used on, including fields likemaxDuration."
          ]
        },
        {
          "type": "p",
          "text": "React extends the HTML<form>element to allow Server Actions to be invoked with theactionprop. When invoked in a form, the action automatically receives theFormDataobject. You don't need to use ReactuseStateto manage fields, instead, you can extract the data using the nativeFormDatamethods:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {asyncfunctioncreateInvoice(formData:FormData) {'use server'constrawFormData={customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),}// mutate data// revalidate cache}return<formaction={createInvoice}>...</form>}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Example:Form with Loading & Error States",
            "When working with forms that have many fields, you may want to consider using theentries()method with JavaScript'sObject.fromEntries(). For example:const rawFormData = Object.fromEntries(formData). One thing to note is that theformDatawill include additional$ACTION_properties.",
            "SeeReact<form>documentationto learn more."
          ]
        },
        {
          "type": "p",
          "text": "You can pass additional arguments to a Server Action using the JavaScriptbindmethod."
        },
        {
          "type": "code",
          "code": "'use client'import{ updateUser }from'./actions'exportfunctionUserProfile({ userId }:{ userId:string}) {constupdateUserWithId=updateUser.bind(null,userId)return(<formaction={updateUserWithId}><inputtype=\"text\"name=\"name\"/><buttontype=\"submit\">Update User Name</button></form>)}"
        },
        {
          "type": "p",
          "text": "The Server Action will receive theuserIdargument, in addition to the form data:"
        },
        {
          "type": "code",
          "code": "'use server'exportasyncfunctionupdateUser(userId:string,formData:FormData) {}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "An alternative is to pass arguments as hidden input fields in the form (e.g.<input type=\"hidden\" name=\"userId\" value={userId} />). However, the value will be part of the rendered HTML and will not be encoded.",
            ".bindworks in both Server and Client Components. It also supports progressive enhancement."
          ]
        },
        {
          "type": "p",
          "text": "You can also invoke a Server Action in elements nested inside<form>such as<button>,<input type=\"submit\">, and<input type=\"image\">. These elements accept theformActionprop orevent handlers. This is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific<button>element for saving a post draft in addition to publishing it. See theReact<form>docsfor more information."
        },
        {
          "type": "p",
          "text": "You can trigger a form submission programmatically using therequestSubmit()method. For example, when the user submits a form using the⌘+Enterkeyboard shortcut, you can listen for theonKeyDownevent:"
        },
        {
          "type": "code",
          "code": "'use client'exportfunctionEntry() {consthandleKeyDown=(e:React.KeyboardEvent<HTMLTextAreaElement>)=>{if((e.ctrlKey||e.metaKey)&&(e.key==='Enter'||e.key==='NumpadEnter')) {e.preventDefault()e.currentTarget.form?.requestSubmit()}}return(<div><textareaname=\"entry\"rows={20}requiredonKeyDown={handleKeyDown} /></div>)}"
        },
        {
          "type": "p",
          "text": "This will trigger the submission of the nearest<form>ancestor, which will invoke the Server Action."
        },
        {
          "type": "p",
          "text": "You can use the HTML attributes likerequiredandtype=\"email\"for basic client-side form validation. For more advanced server-side validation, you can use a library likezodto validate the form fields before mutating the data:"
        },
        {
          "type": "code",
          "code": "'use server'import{ z }from'zod'constschema=z.object({email:z.string({invalid_type_error:'Invalid Email',}),})exportdefaultasyncfunctioncreateUser(formData:FormData) {constvalidatedFields=schema.safeParse({email:formData.get('email'),})// Return early if the form data is invalidif(!validatedFields.success) {return{errors:validatedFields.error.flatten().fieldErrors,}}// Mutate data}"
        },
        {
          "type": "p",
          "text": "Once the fields have been validated on the server, you can return a serializable object in your action and use the ReactuseActionStatehook to show a message to the user."
        },
        {
          "type": "list",
          "items": [
            "By passing the action touseActionState, the action's function signature changes to receive a newprevStateorinitialStateparameter as its first argument.",
            "useActionStateis a React hook and therefore must be used in a Client Component."
          ]
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'exportasyncfunctioncreateUser(prevState:any,formData:FormData) {constres=awaitfetch('https://...')constjson=awaitres.json()if(!res.ok) {return{ message:'Please enter a valid email'}}redirect('/dashboard')}"
        },
        {
          "type": "p",
          "text": "Then, you can pass your action to theuseActionStatehook and use the returnedstateto display an error message."
        },
        {
          "type": "code",
          "code": "'use client'import{ useActionState }from'react'import{ createUser }from'@/app/actions'constinitialState={message:'',}exportfunctionSignup() {const[state,formAction,pending]=useActionState(createUser,initialState)return(<formaction={formAction}><labelhtmlFor=\"email\">Email</label><inputtype=\"text\"id=\"email\"name=\"email\"required/>{/* ... */}<paria-live=\"polite\">{state?.message}</p><buttondisabled={pending}>Sign up</button></form>)}"
        },
        {
          "type": "p",
          "text": "TheuseActionStatehook exposes apendingboolean that can be used to show a loading indicator while the action is being executed. Alternatively, you can use theuseFormStatushook to show a loading indicator while the action is being executed. When using this hook, you'll need to create a separate component to render the loading indicator. For example, to disable the button when the action is pending:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useFormStatus }from'react-dom'exportfunctionSubmitButton() {const{pending}=useFormStatus()return(<buttondisabled={pending}type=\"submit\">Sign Up</button>)}"
        },
        {
          "type": "p",
          "text": "You can then nest theSubmitButtoncomponent inside the form:"
        },
        {
          "type": "code",
          "code": "import{ SubmitButton }from'./button'import{ createUser }from'@/app/actions'exportfunctionSignup() {return(<formaction={createUser}>{/* Other form elements */}<SubmitButton/></form>)}"
        },
        {
          "type": "p",
          "text": "Good to know:In React 19,useFormStatusincludes additional keys on the returned object, like data, method, and action. If you are not using React 19, only thependingkey is available."
        },
        {
          "type": "p",
          "text": "You can use the ReactuseOptimistichook to optimistically update the UI before the Server Action finishes executing, rather than waiting for the response:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useOptimistic }from'react'import{ send }from'./actions'typeMessage={message:string}exportfunctionThread({ messages }:{ messages:Message[] }) {const[optimisticMessages,addOptimisticMessage]=useOptimistic<Message[],string>(messages,(state,newMessage)=>[...state,{ message:newMessage }])constformAction=async(formData:FormData)=>{constmessage=formData.get('message')asstringaddOptimisticMessage(message)awaitsend(message)}return(<div>{optimisticMessages.map((m,i)=>(<divkey={i}>{m.message}</div>))}<formaction={formAction}><inputtype=\"text\"name=\"message\"/><buttontype=\"submit\">Send</button></form></div>)}"
        },
        {
          "type": "p",
          "text": "While it's common to use Server Actions within<form>elements, they can also be invoked with event handlers such asonClick. For example, to increment a like count:"
        },
        {
          "type": "code",
          "code": "'use client'import{ incrementLike }from'./actions'import{ useState }from'react'exportdefaultfunctionLikeButton({ initialLikes }:{ initialLikes:number}) {const[likes,setLikes]=useState(initialLikes)return(<><p>Total Likes: {likes}</p><buttononClick={async()=>{constupdatedLikes=awaitincrementLike()setLikes(updatedLikes)}}>Like</button></>)}"
        },
        {
          "type": "p",
          "text": "You can also add event handlers to form elements, for example, to save a form fieldonChange:"
        },
        {
          "type": "code",
          "code": "'use client'import{ publishPost,saveDraft }from'./actions'exportdefaultfunctionEditPost() {return(<formaction={publishPost}><textareaname=\"content\"onChange={async(e)=>{awaitsaveDraft(e.target.value)}}/><buttontype=\"submit\">Publish</button></form>)}"
        },
        {
          "type": "p",
          "text": "For cases like this, where multiple events might be fired in quick succession, we recommenddebouncingto prevent unnecessary Server Action invocations."
        },
        {
          "type": "p",
          "text": "You can use the ReactuseEffecthook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example,onKeyDownfor app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:"
        },
        {
          "type": "code",
          "code": "'use client'import{ incrementViews }from'./actions'import{ useState,useEffect }from'react'exportdefaultfunctionViewCount({ initialViews }:{ initialViews:number}) {const[views,setViews]=useState(initialViews)useEffect(()=>{constupdateViews=async()=>{constupdatedViews=awaitincrementViews()setViews(updatedViews)}updateViews()},[])return<p>Total Views: {views}</p>}"
        },
        {
          "type": "p",
          "text": "Remember to consider thebehavior and caveatsofuseEffect."
        },
        {
          "type": "p",
          "text": "When an error is thrown, it'll be caught by the nearesterror.jsor<Suspense>boundary on the client. SeeError Handlingfor more information."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Aside from throwing the error, you can also return an object to be handled byuseActionState. SeeServer-side validation and error handling."
          ]
        },
        {
          "type": "p",
          "text": "You can revalidate theNext.js Cacheinside your Server Actions with therevalidatePathAPI:"
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidatePath }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidatePath('/posts')}"
        },
        {
          "type": "p",
          "text": "Or invalidate a specific data fetch with a cache tag usingrevalidateTag:"
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidateTag('posts')}"
        },
        {
          "type": "p",
          "text": "If you would like to redirect the user to a different route after the completion of a Server Action, you can useredirectAPI.redirectneeds to be called outside of thetry/catchblock:"
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost(id:string) {try{// ...}catch(error) {// ...}revalidateTag('posts')// Update cached postsredirect(`/post/${id}`)// Navigate to the new post page}"
        },
        {
          "type": "p",
          "text": "You canget,set, anddeletecookies inside a Server Action using thecookiesAPI:"
        },
        {
          "type": "code",
          "code": "'use server'import{ cookies }from'next/headers'exportasyncfunctionexampleAction() {constcookieStore=awaitcookies()// Get cookiecookieStore.get('name')?.value// Set cookiecookieStore.set('name','Delba')// Delete cookiecookieStore.delete('name')}"
        },
        {
          "type": "p",
          "text": "Seeadditional examplesfor deleting cookies from Server Actions."
        },
        {
          "type": "p",
          "text": "By default, when a Server Action is created and exported, it creates a public HTTP endpoint\nand should be treated with the same security assumptions and authorization checks. This means, even if a Server Action or utility function is not imported elsewhere in your code, it’s still publicly accessible. To improve security, Next.js has the following built-in features:"
        },
        {
          "type": "list",
          "items": [
            "Secure action IDs:Next.js creates encrypted, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security.",
            "Dead code elimination:Unused Server Actions (referenced by their IDs) are removed from client bundle to avoid public access by third-party."
          ]
        },
        {
          "type": "p",
          "text": "Good to know: The IDs are created during compilation and are cached for a maximum of 14 days. They will be regenerated when a new build is initiated or when the build cache is invalidated.\nThis security improvement reduces the risk in cases where an authentication layer is missing. However, you should still treat Server Actions like public HTTP endpoints."
        },
        {
          "type": "code",
          "code": "// app/actions.js'use server'// This action **is** used in our application, so Next.js// will create a secure ID to allow the client to reference// and call the Server Action.exportasyncfunctionupdateUserAction(formData) {}// This action **is not** used in our application, so Next.js// will automatically remove this code during `next build`// and will not create a public endpoint.exportasyncfunctiondeleteUserAction(formData) {}"
        },
        {
          "type": "p",
          "text": "You should ensure that the user is authorized to perform the action. For example:"
        },
        {
          "type": "code",
          "code": "'use server'import{ auth }from'./lib'exportfunctionaddItem() {const{user}=auth()if(!user) {thrownewError('You must be signed in to perform this action')}// ...}"
        },
        {
          "type": "p",
          "text": "Defining a Server Action inside a component creates aclosurewhere the action has access to the outer function's scope. For example, thepublishaction has access to thepublishVersionvariable:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constpublishVersion=awaitgetLatestVersion();asyncfunctionpublish() {\"use server\";if(publishVersion!==awaitgetLatestVersion()) {thrownewError('The version has changed since pressing publish');}...}return(<form><buttonformAction={publish}>Publish</button></form>);}"
        },
        {
          "type": "p",
          "text": "Closures are useful when you need to capture asnapshotof data (e.g.publishVersion) at the time of rendering so that it can be used later when the action is invoked. However, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build."
        },
        {
          "type": "p",
          "text": "Good to know:We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use theReact taint APIsto proactively prevent specific data from being sent to the client."
        },
        {
          "type": "p",
          "text": "When self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies. To mitigate this, you can overwrite the encryption key using theprocess.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEYenvironment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key. This is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing."
        },
        {
          "type": "p",
          "text": "Good to know:Next.js applications deployed to Vercel automatically handle this."
        },
        {
          "type": "p",
          "text": "Since Server Actions can be invoked in a<form>element, this opens them up toCSRF attacks. Behind the scenes, Server Actions use thePOSTmethod, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly withSameSite cookiesbeing the default. As an additional protection, Server Actions in Next.js also compare theOrigin headerto theHost header(orX-Forwarded-Host). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it. For large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration optionserverActions.allowedOriginsoption to specify a list of safe origins. The option accepts an array of strings."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/module.exports={experimental:{serverActions:{allowedOrigins:['my-proxy.com','*.my-proxy.com'],},},}"
        },
        {
          "type": "p",
          "text": "Learn more aboutSecurity and Server Actions."
        },
        {
          "type": "p",
          "text": "For more information, check out the following React docs:"
        },
        {
          "type": "list",
          "items": [
            "Server Actions",
            "\"use server\"",
            "<form>",
            "useFormStatus",
            "useActionState",
            "useOptimistic"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration",
      "title": "Data Fetching: Incremental Static Regeneration (ISR) | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "list",
          "items": ["Next.js Commerce", "On-Demand ISR", "Next.js Forms"]
        },
        {
          "type": "p",
          "text": "Incremental Static Regeneration (ISR) enables you to:"
        },
        {
          "type": "list",
          "items": [
            "Update static content without rebuilding the entire site",
            "Reduce server load by serving prerendered, static pages for most requests",
            "Ensure propercache-controlheaders are automatically added to pages",
            "Handle large amounts of content pages without longnext buildtimes"
          ]
        },
        {
          "type": "p",
          "text": "Here's a minimal example:"
        },
        {
          "type": "code",
          "code": "interfacePost{id:stringtitle:stringcontent:string}// Next.js will invalidate the cache when a// request comes in, at most once every 60 seconds.exportconstrevalidate=60// We'll prerender only the params from `generateStaticParams` at build time.// If a request comes in for a path that hasn't been generated,// Next.js will server-render the page on-demand.exportconstdynamicParams=true// or false, to 404 on unknown pathsexportasyncfunctiongenerateStaticParams() {constposts:Post[]=awaitfetch('https://api.vercel.app/blog').then((res)=>res.json())returnposts.map((post)=>({id:String(post.id),}))}exportdefaultasyncfunctionPage({params,}:{params:Promise<{ id:string}>}) {constid=(awaitparams).idconstpost:Post=awaitfetch(`https://api.vercel.app/blog/${id}`).then((res)=>res.json())return(<main><h1>{post.title}</h1><p>{post.content}</p></main>)}"
        },
        {
          "type": "p",
          "text": "Here's how this example works:"
        },
        {
          "type": "list",
          "items": [
            "Duringnext build, all known blog posts are generated (there are 25 in this example)",
            "All requests made to these pages (e.g./blog/1) are cached and instantaneous",
            "After 60 seconds has passed, the next request will still show the cached (stale) page",
            "The cache is invalidated and a new version of the page begins generating in the background",
            "Once generated successfully, Next.js will display and cache the updated page",
            "If/blog/26is requested, Next.js will generate and cache this page on-demand"
          ]
        },
        {
          "type": "list",
          "items": ["revalidate", "dynamicParams"]
        },
        {
          "type": "list",
          "items": ["revalidatePath", "revalidateTag"]
        },
        {
          "type": "p",
          "text": "This fetches and displays a list of blog posts on/blog. After an hour, the cache for this page is invalidated on the next visit to the page. Then, in the background, a new version of the page is generated with the latest blog posts."
        },
        {
          "type": "code",
          "code": "interfacePost{id:stringtitle:stringcontent:string}exportconstrevalidate=3600// invalidate every hourexportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog')constposts:Post[]=awaitdata.json()return(<main><h1>Blog Posts</h1><ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul></main>)}"
        },
        {
          "type": "p",
          "text": "We recommend setting a high revalidation time. For instance, 1 hour instead of 1 second. If you need more precision, consider using on-demand revalidation. If you need real-time data, consider switching todynamic rendering."
        },
        {
          "type": "p",
          "text": "For a more precise method of revalidation, invalidate pages on-demand with therevalidatePathfunction. For example, this Server Action would get called after adding a new post. Regardless of how you retrieve your data in your Server Component, either usingfetchor connecting to a database, this will clear the cache for the entire route and allow the Server Component to fetch fresh data."
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidatePath }from'next/cache'exportasyncfunctioncreatePost() {// Invalidate the /posts route in the cacherevalidatePath('/posts')}"
        },
        {
          "type": "p",
          "text": "View a demoandexplore the source code."
        },
        {
          "type": "p",
          "text": "For most use cases, prefer revalidating entire paths. If you need more granular control, you can use therevalidateTagfunction. For example, you can tag individualfetchcalls:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog',{next:{ tags:['posts'] },})constposts=awaitdata.json()// ...}"
        },
        {
          "type": "p",
          "text": "If you are using an ORM or connecting to a database, you can useunstable_cache:"
        },
        {
          "type": "code",
          "code": "import{ unstable_cache }from'next/cache'import{ db,posts }from'@/lib/db'constgetCachedPosts=unstable_cache(async()=>{returnawaitdb.select().from(posts)},['posts'],{ revalidate:3600,tags:['posts'] })exportdefaultasyncfunctionPage() {constposts=getCachedPosts()// ...}"
        },
        {
          "type": "p",
          "text": "You can then userevalidateTagin aServer ActionsorRoute Handler:"
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost() {// Invalidate all data tagged with 'posts' in the cacherevalidateTag('posts')}"
        },
        {
          "type": "p",
          "text": "If an error is thrown while attempting to revalidate data, the last successfully generated data will continue to be served from the cache. On the next subsequent request, Next.js will retry revalidating the data.Learn more about error handling."
        },
        {
          "type": "p",
          "text": "Caching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. Whendeploying to Vercel, the ISR cache is automatically persisted to durable storage. When self-hosting, the ISR cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router. You can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application.Learn more."
        },
        {
          "type": "p",
          "text": "If you are using thefetchAPI, you can add additional logging to understand which requests are cached or uncached.Learn more about theloggingoption."
        },
        {
          "type": "code",
          "code": "module.exports={logging:{fetches:{fullUrl:true,},},}"
        },
        {
          "type": "p",
          "text": "To verify your pages are cached and revalidated correctly in production, you can test locally by runningnext buildand thennext startto run the production Next.js server. This will allow you to test ISR behavior as it would work in a production environment. For further debugging, add the following environment variable to your.envfile:"
        },
        {
          "type": "code",
          "code": "NEXT_PRIVATE_DEBUG_CACHE=1"
        },
        {
          "type": "p",
          "text": "This will make the Next.js server console log ISR cache hits and misses. You can inspect the output to see which pages are generated duringnext build, as well as how pages are updated as paths are accessed on-demand."
        },
        {
          "type": "list",
          "items": [
            "ISR is only supported when using the Node.js runtime (default).",
            "ISR is not supported when creating aStatic Export.",
            "If you have multiplefetchrequests in a statically rendered route, and each has a differentrevalidatefrequency, the lowest time will be used for ISR. However, those revalidate frequencies will still be respected by theData Cache.",
            "If any of thefetchrequests used on a route have arevalidatetime of0, or an explicitno-store, the route will bedynamically rendered.",
            "Middleware won't be executed for on-demand ISR requests, meaning any path rewrites or logic in Middleware will not be applied. Ensure you are revalidating the exact path. For example,/post/1instead of a rewritten/post-1."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions",
      "title": "Data Fetching: Server Actions and Mutations | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Server Actionsareasynchronous functionsthat are executed on the server. They can be called in Server and Client Components to handle form submissions and data mutations in Next.js applications."
        },
        {
          "type": "p",
          "text": "🎥 Watch:Learn more about mutations with Server Actions →YouTube (10 minutes)."
        },
        {
          "type": "p",
          "text": "A Server Action can be defined with the React\"use server\"directive. You can place the directive at the top of anasyncfunction to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions."
        },
        {
          "type": "p",
          "text": "Server Components can use the inline function level or module level\"use server\"directive. To inline a Server Action, add\"use server\"to the top of the function body:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {// Server Actionasyncfunctioncreate() {'use server'// Mutate data}return'...'}"
        },
        {
          "type": "p",
          "text": "To call a Server Action in a Client Component, create a new file and add the\"use server\"directive at the top of it. All exported functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:"
        },
        {
          "type": "code",
          "code": "'use server'exportasyncfunctioncreate() {}"
        },
        {
          "type": "code",
          "code": "'use client'import{ create }from'@/app/actions'exportfunctionButton() {return<buttononClick={()=>create()}>Create</button>}"
        },
        {
          "type": "p",
          "text": "You can also pass a Server Action to a Client Component as a prop:"
        },
        {
          "type": "code",
          "code": "<ClientComponentupdateItemAction={updateItem} />"
        },
        {
          "type": "code",
          "code": "'use client'exportdefaultfunctionClientComponent({updateItemAction,}:{updateItemAction:(formData:FormData)=>void}) {return<formaction={updateItemAction}>{/* ... */}</form>}"
        },
        {
          "type": "p",
          "text": "Usually, the Next.js TypeScript plugin would flagupdateItemActioninclient-component.tsxsince it is a function which generally can't be serialized across client-server boundaries.\nHowever, props namedactionor ending withActionare assumed to receive Server Actions.\nThis is only a heuristic since the TypeScript plugin doesn't actually know if it receives a Server Action or an ordinary function.\nRuntime type-checking will still ensure you don't accidentally pass a function to a Client Component."
        },
        {
          "type": "list",
          "items": [
            "Server actions can be invoked using theactionattribute in a<form>element:Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.After hydration, the browser does not refresh on form submission.",
            "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
            "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
            "After hydration, the browser does not refresh on form submission.",
            "Server Actions are not limited to<form>and can be invoked from event handlers,useEffect, third-party libraries, and other form elements like<button>.",
            "Server Actions integrate with the Next.jscaching and revalidationarchitecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.",
            "Behind the scenes, actions use thePOSTmethod, and only this HTTP method can invoke them.",
            "The arguments and return value of Server Actions must be serializable by React. See the React docs for a list ofserializable arguments and values.",
            "Server Actions are functions. This means they can be reused anywhere in your application.",
            "Server Actions inherit theruntimefrom the page or layout they are used on.",
            "Server Actions inherit theRoute Segment Configfrom the page or layout they are used on, including fields likemaxDuration."
          ]
        },
        {
          "type": "p",
          "text": "React extends the HTML<form>element to allow Server Actions to be invoked with theactionprop. When invoked in a form, the action automatically receives theFormDataobject. You don't need to use ReactuseStateto manage fields, instead, you can extract the data using the nativeFormDatamethods:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {asyncfunctioncreateInvoice(formData:FormData) {'use server'constrawFormData={customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),}// mutate data// revalidate cache}return<formaction={createInvoice}>...</form>}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Example:Form with Loading & Error States",
            "When working with forms that have many fields, you may want to consider using theentries()method with JavaScript'sObject.fromEntries(). For example:const rawFormData = Object.fromEntries(formData). One thing to note is that theformDatawill include additional$ACTION_properties.",
            "SeeReact<form>documentationto learn more."
          ]
        },
        {
          "type": "p",
          "text": "You can pass additional arguments to a Server Action using the JavaScriptbindmethod."
        },
        {
          "type": "code",
          "code": "'use client'import{ updateUser }from'./actions'exportfunctionUserProfile({ userId }:{ userId:string}) {constupdateUserWithId=updateUser.bind(null,userId)return(<formaction={updateUserWithId}><inputtype=\"text\"name=\"name\"/><buttontype=\"submit\">Update User Name</button></form>)}"
        },
        {
          "type": "p",
          "text": "The Server Action will receive theuserIdargument, in addition to the form data:"
        },
        {
          "type": "code",
          "code": "'use server'exportasyncfunctionupdateUser(userId:string,formData:FormData) {}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "An alternative is to pass arguments as hidden input fields in the form (e.g.<input type=\"hidden\" name=\"userId\" value={userId} />). However, the value will be part of the rendered HTML and will not be encoded.",
            ".bindworks in both Server and Client Components. It also supports progressive enhancement."
          ]
        },
        {
          "type": "p",
          "text": "You can also invoke a Server Action in elements nested inside<form>such as<button>,<input type=\"submit\">, and<input type=\"image\">. These elements accept theformActionprop orevent handlers. This is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific<button>element for saving a post draft in addition to publishing it. See theReact<form>docsfor more information."
        },
        {
          "type": "p",
          "text": "You can trigger a form submission programmatically using therequestSubmit()method. For example, when the user submits a form using the⌘+Enterkeyboard shortcut, you can listen for theonKeyDownevent:"
        },
        {
          "type": "code",
          "code": "'use client'exportfunctionEntry() {consthandleKeyDown=(e:React.KeyboardEvent<HTMLTextAreaElement>)=>{if((e.ctrlKey||e.metaKey)&&(e.key==='Enter'||e.key==='NumpadEnter')) {e.preventDefault()e.currentTarget.form?.requestSubmit()}}return(<div><textareaname=\"entry\"rows={20}requiredonKeyDown={handleKeyDown} /></div>)}"
        },
        {
          "type": "p",
          "text": "This will trigger the submission of the nearest<form>ancestor, which will invoke the Server Action."
        },
        {
          "type": "p",
          "text": "You can use the HTML attributes likerequiredandtype=\"email\"for basic client-side form validation. For more advanced server-side validation, you can use a library likezodto validate the form fields before mutating the data:"
        },
        {
          "type": "code",
          "code": "'use server'import{ z }from'zod'constschema=z.object({email:z.string({invalid_type_error:'Invalid Email',}),})exportdefaultasyncfunctioncreateUser(formData:FormData) {constvalidatedFields=schema.safeParse({email:formData.get('email'),})// Return early if the form data is invalidif(!validatedFields.success) {return{errors:validatedFields.error.flatten().fieldErrors,}}// Mutate data}"
        },
        {
          "type": "p",
          "text": "Once the fields have been validated on the server, you can return a serializable object in your action and use the ReactuseActionStatehook to show a message to the user."
        },
        {
          "type": "list",
          "items": [
            "By passing the action touseActionState, the action's function signature changes to receive a newprevStateorinitialStateparameter as its first argument.",
            "useActionStateis a React hook and therefore must be used in a Client Component."
          ]
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'exportasyncfunctioncreateUser(prevState:any,formData:FormData) {constres=awaitfetch('https://...')constjson=awaitres.json()if(!res.ok) {return{ message:'Please enter a valid email'}}redirect('/dashboard')}"
        },
        {
          "type": "p",
          "text": "Then, you can pass your action to theuseActionStatehook and use the returnedstateto display an error message."
        },
        {
          "type": "code",
          "code": "'use client'import{ useActionState }from'react'import{ createUser }from'@/app/actions'constinitialState={message:'',}exportfunctionSignup() {const[state,formAction,pending]=useActionState(createUser,initialState)return(<formaction={formAction}><labelhtmlFor=\"email\">Email</label><inputtype=\"text\"id=\"email\"name=\"email\"required/>{/* ... */}<paria-live=\"polite\">{state?.message}</p><buttondisabled={pending}>Sign up</button></form>)}"
        },
        {
          "type": "p",
          "text": "TheuseActionStatehook exposes apendingboolean that can be used to show a loading indicator while the action is being executed. Alternatively, you can use theuseFormStatushook to show a loading indicator while the action is being executed. When using this hook, you'll need to create a separate component to render the loading indicator. For example, to disable the button when the action is pending:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useFormStatus }from'react-dom'exportfunctionSubmitButton() {const{pending}=useFormStatus()return(<buttondisabled={pending}type=\"submit\">Sign Up</button>)}"
        },
        {
          "type": "p",
          "text": "You can then nest theSubmitButtoncomponent inside the form:"
        },
        {
          "type": "code",
          "code": "import{ SubmitButton }from'./button'import{ createUser }from'@/app/actions'exportfunctionSignup() {return(<formaction={createUser}>{/* Other form elements */}<SubmitButton/></form>)}"
        },
        {
          "type": "p",
          "text": "Good to know:In React 19,useFormStatusincludes additional keys on the returned object, like data, method, and action. If you are not using React 19, only thependingkey is available."
        },
        {
          "type": "p",
          "text": "You can use the ReactuseOptimistichook to optimistically update the UI before the Server Action finishes executing, rather than waiting for the response:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useOptimistic }from'react'import{ send }from'./actions'typeMessage={message:string}exportfunctionThread({ messages }:{ messages:Message[] }) {const[optimisticMessages,addOptimisticMessage]=useOptimistic<Message[],string>(messages,(state,newMessage)=>[...state,{ message:newMessage }])constformAction=async(formData:FormData)=>{constmessage=formData.get('message')asstringaddOptimisticMessage(message)awaitsend(message)}return(<div>{optimisticMessages.map((m,i)=>(<divkey={i}>{m.message}</div>))}<formaction={formAction}><inputtype=\"text\"name=\"message\"/><buttontype=\"submit\">Send</button></form></div>)}"
        },
        {
          "type": "p",
          "text": "While it's common to use Server Actions within<form>elements, they can also be invoked with event handlers such asonClick. For example, to increment a like count:"
        },
        {
          "type": "code",
          "code": "'use client'import{ incrementLike }from'./actions'import{ useState }from'react'exportdefaultfunctionLikeButton({ initialLikes }:{ initialLikes:number}) {const[likes,setLikes]=useState(initialLikes)return(<><p>Total Likes: {likes}</p><buttononClick={async()=>{constupdatedLikes=awaitincrementLike()setLikes(updatedLikes)}}>Like</button></>)}"
        },
        {
          "type": "p",
          "text": "You can also add event handlers to form elements, for example, to save a form fieldonChange:"
        },
        {
          "type": "code",
          "code": "'use client'import{ publishPost,saveDraft }from'./actions'exportdefaultfunctionEditPost() {return(<formaction={publishPost}><textareaname=\"content\"onChange={async(e)=>{awaitsaveDraft(e.target.value)}}/><buttontype=\"submit\">Publish</button></form>)}"
        },
        {
          "type": "p",
          "text": "For cases like this, where multiple events might be fired in quick succession, we recommenddebouncingto prevent unnecessary Server Action invocations."
        },
        {
          "type": "p",
          "text": "You can use the ReactuseEffecthook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example,onKeyDownfor app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:"
        },
        {
          "type": "code",
          "code": "'use client'import{ incrementViews }from'./actions'import{ useState,useEffect }from'react'exportdefaultfunctionViewCount({ initialViews }:{ initialViews:number}) {const[views,setViews]=useState(initialViews)useEffect(()=>{constupdateViews=async()=>{constupdatedViews=awaitincrementViews()setViews(updatedViews)}updateViews()},[])return<p>Total Views: {views}</p>}"
        },
        {
          "type": "p",
          "text": "Remember to consider thebehavior and caveatsofuseEffect."
        },
        {
          "type": "p",
          "text": "When an error is thrown, it'll be caught by the nearesterror.jsor<Suspense>boundary on the client. SeeError Handlingfor more information."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Aside from throwing the error, you can also return an object to be handled byuseActionState. SeeServer-side validation and error handling."
          ]
        },
        {
          "type": "p",
          "text": "You can revalidate theNext.js Cacheinside your Server Actions with therevalidatePathAPI:"
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidatePath }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidatePath('/posts')}"
        },
        {
          "type": "p",
          "text": "Or invalidate a specific data fetch with a cache tag usingrevalidateTag:"
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidateTag('posts')}"
        },
        {
          "type": "p",
          "text": "If you would like to redirect the user to a different route after the completion of a Server Action, you can useredirectAPI.redirectneeds to be called outside of thetry/catchblock:"
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost(id:string) {try{// ...}catch(error) {// ...}revalidateTag('posts')// Update cached postsredirect(`/post/${id}`)// Navigate to the new post page}"
        },
        {
          "type": "p",
          "text": "You canget,set, anddeletecookies inside a Server Action using thecookiesAPI:"
        },
        {
          "type": "code",
          "code": "'use server'import{ cookies }from'next/headers'exportasyncfunctionexampleAction() {constcookieStore=awaitcookies()// Get cookiecookieStore.get('name')?.value// Set cookiecookieStore.set('name','Delba')// Delete cookiecookieStore.delete('name')}"
        },
        {
          "type": "p",
          "text": "Seeadditional examplesfor deleting cookies from Server Actions."
        },
        {
          "type": "p",
          "text": "By default, when a Server Action is created and exported, it creates a public HTTP endpoint\nand should be treated with the same security assumptions and authorization checks. This means, even if a Server Action or utility function is not imported elsewhere in your code, it’s still publicly accessible. To improve security, Next.js has the following built-in features:"
        },
        {
          "type": "list",
          "items": [
            "Secure action IDs:Next.js creates encrypted, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security.",
            "Dead code elimination:Unused Server Actions (referenced by their IDs) are removed from client bundle to avoid public access by third-party."
          ]
        },
        {
          "type": "p",
          "text": "Good to know: The IDs are created during compilation and are cached for a maximum of 14 days. They will be regenerated when a new build is initiated or when the build cache is invalidated.\nThis security improvement reduces the risk in cases where an authentication layer is missing. However, you should still treat Server Actions like public HTTP endpoints."
        },
        {
          "type": "code",
          "code": "// app/actions.js'use server'// This action **is** used in our application, so Next.js// will create a secure ID to allow the client to reference// and call the Server Action.exportasyncfunctionupdateUserAction(formData) {}// This action **is not** used in our application, so Next.js// will automatically remove this code during `next build`// and will not create a public endpoint.exportasyncfunctiondeleteUserAction(formData) {}"
        },
        {
          "type": "p",
          "text": "You should ensure that the user is authorized to perform the action. For example:"
        },
        {
          "type": "code",
          "code": "'use server'import{ auth }from'./lib'exportfunctionaddItem() {const{user}=auth()if(!user) {thrownewError('You must be signed in to perform this action')}// ...}"
        },
        {
          "type": "p",
          "text": "Defining a Server Action inside a component creates aclosurewhere the action has access to the outer function's scope. For example, thepublishaction has access to thepublishVersionvariable:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constpublishVersion=awaitgetLatestVersion();asyncfunctionpublish() {\"use server\";if(publishVersion!==awaitgetLatestVersion()) {thrownewError('The version has changed since pressing publish');}...}return(<form><buttonformAction={publish}>Publish</button></form>);}"
        },
        {
          "type": "p",
          "text": "Closures are useful when you need to capture asnapshotof data (e.g.publishVersion) at the time of rendering so that it can be used later when the action is invoked. However, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build."
        },
        {
          "type": "p",
          "text": "Good to know:We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use theReact taint APIsto proactively prevent specific data from being sent to the client."
        },
        {
          "type": "p",
          "text": "When self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies. To mitigate this, you can overwrite the encryption key using theprocess.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEYenvironment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key. This is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing."
        },
        {
          "type": "p",
          "text": "Good to know:Next.js applications deployed to Vercel automatically handle this."
        },
        {
          "type": "p",
          "text": "Since Server Actions can be invoked in a<form>element, this opens them up toCSRF attacks. Behind the scenes, Server Actions use thePOSTmethod, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly withSameSite cookiesbeing the default. As an additional protection, Server Actions in Next.js also compare theOrigin headerto theHost header(orX-Forwarded-Host). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it. For large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration optionserverActions.allowedOriginsoption to specify a list of safe origins. The option accepts an array of strings."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/module.exports={experimental:{serverActions:{allowedOrigins:['my-proxy.com','*.my-proxy.com'],},},}"
        },
        {
          "type": "p",
          "text": "Learn more aboutSecurity and Server Actions."
        },
        {
          "type": "p",
          "text": "For more information, check out the following React docs:"
        },
        {
          "type": "list",
          "items": [
            "Server Actions",
            "\"use server\"",
            "<form>",
            "useFormStatus",
            "useActionState",
            "useOptimistic"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations",
      "title": "Data Fetching: Server Actions and Mutations | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Server Actionsareasynchronous functionsthat are executed on the server. They can be called in Server and Client Components to handle form submissions and data mutations in Next.js applications."
        },
        {
          "type": "p",
          "text": "🎥 Watch:Learn more about mutations with Server Actions →YouTube (10 minutes)."
        },
        {
          "type": "p",
          "text": "A Server Action can be defined with the React\"use server\"directive. You can place the directive at the top of anasyncfunction to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions."
        },
        {
          "type": "p",
          "text": "Server Components can use the inline function level or module level\"use server\"directive. To inline a Server Action, add\"use server\"to the top of the function body:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {// Server Actionasyncfunctioncreate() {'use server'// Mutate data}return'...'}"
        },
        {
          "type": "p",
          "text": "To call a Server Action in a Client Component, create a new file and add the\"use server\"directive at the top of it. All exported functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:"
        },
        {
          "type": "code",
          "code": "'use server'exportasyncfunctioncreate() {}"
        },
        {
          "type": "code",
          "code": "'use client'import{ create }from'@/app/actions'exportfunctionButton() {return<buttononClick={()=>create()}>Create</button>}"
        },
        {
          "type": "p",
          "text": "You can also pass a Server Action to a Client Component as a prop:"
        },
        {
          "type": "code",
          "code": "<ClientComponentupdateItemAction={updateItem} />"
        },
        {
          "type": "code",
          "code": "'use client'exportdefaultfunctionClientComponent({updateItemAction,}:{updateItemAction:(formData:FormData)=>void}) {return<formaction={updateItemAction}>{/* ... */}</form>}"
        },
        {
          "type": "p",
          "text": "Usually, the Next.js TypeScript plugin would flagupdateItemActioninclient-component.tsxsince it is a function which generally can't be serialized across client-server boundaries.\nHowever, props namedactionor ending withActionare assumed to receive Server Actions.\nThis is only a heuristic since the TypeScript plugin doesn't actually know if it receives a Server Action or an ordinary function.\nRuntime type-checking will still ensure you don't accidentally pass a function to a Client Component."
        },
        {
          "type": "list",
          "items": [
            "Server actions can be invoked using theactionattribute in a<form>element:Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.After hydration, the browser does not refresh on form submission.",
            "Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.",
            "In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.",
            "After hydration, the browser does not refresh on form submission.",
            "Server Actions are not limited to<form>and can be invoked from event handlers,useEffect, third-party libraries, and other form elements like<button>.",
            "Server Actions integrate with the Next.jscaching and revalidationarchitecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.",
            "Behind the scenes, actions use thePOSTmethod, and only this HTTP method can invoke them.",
            "The arguments and return value of Server Actions must be serializable by React. See the React docs for a list ofserializable arguments and values.",
            "Server Actions are functions. This means they can be reused anywhere in your application.",
            "Server Actions inherit theruntimefrom the page or layout they are used on.",
            "Server Actions inherit theRoute Segment Configfrom the page or layout they are used on, including fields likemaxDuration."
          ]
        },
        {
          "type": "p",
          "text": "React extends the HTML<form>element to allow Server Actions to be invoked with theactionprop. When invoked in a form, the action automatically receives theFormDataobject. You don't need to use ReactuseStateto manage fields, instead, you can extract the data using the nativeFormDatamethods:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {asyncfunctioncreateInvoice(formData:FormData) {'use server'constrawFormData={customerId:formData.get('customerId'),amount:formData.get('amount'),status:formData.get('status'),}// mutate data// revalidate cache}return<formaction={createInvoice}>...</form>}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Example:Form with Loading & Error States",
            "When working with forms that have many fields, you may want to consider using theentries()method with JavaScript'sObject.fromEntries(). For example:const rawFormData = Object.fromEntries(formData). One thing to note is that theformDatawill include additional$ACTION_properties.",
            "SeeReact<form>documentationto learn more."
          ]
        },
        {
          "type": "p",
          "text": "You can pass additional arguments to a Server Action using the JavaScriptbindmethod."
        },
        {
          "type": "code",
          "code": "'use client'import{ updateUser }from'./actions'exportfunctionUserProfile({ userId }:{ userId:string}) {constupdateUserWithId=updateUser.bind(null,userId)return(<formaction={updateUserWithId}><inputtype=\"text\"name=\"name\"/><buttontype=\"submit\">Update User Name</button></form>)}"
        },
        {
          "type": "p",
          "text": "The Server Action will receive theuserIdargument, in addition to the form data:"
        },
        {
          "type": "code",
          "code": "'use server'exportasyncfunctionupdateUser(userId:string,formData:FormData) {}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "An alternative is to pass arguments as hidden input fields in the form (e.g.<input type=\"hidden\" name=\"userId\" value={userId} />). However, the value will be part of the rendered HTML and will not be encoded.",
            ".bindworks in both Server and Client Components. It also supports progressive enhancement."
          ]
        },
        {
          "type": "p",
          "text": "You can also invoke a Server Action in elements nested inside<form>such as<button>,<input type=\"submit\">, and<input type=\"image\">. These elements accept theformActionprop orevent handlers. This is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific<button>element for saving a post draft in addition to publishing it. See theReact<form>docsfor more information."
        },
        {
          "type": "p",
          "text": "You can trigger a form submission programmatically using therequestSubmit()method. For example, when the user submits a form using the⌘+Enterkeyboard shortcut, you can listen for theonKeyDownevent:"
        },
        {
          "type": "code",
          "code": "'use client'exportfunctionEntry() {consthandleKeyDown=(e:React.KeyboardEvent<HTMLTextAreaElement>)=>{if((e.ctrlKey||e.metaKey)&&(e.key==='Enter'||e.key==='NumpadEnter')) {e.preventDefault()e.currentTarget.form?.requestSubmit()}}return(<div><textareaname=\"entry\"rows={20}requiredonKeyDown={handleKeyDown} /></div>)}"
        },
        {
          "type": "p",
          "text": "This will trigger the submission of the nearest<form>ancestor, which will invoke the Server Action."
        },
        {
          "type": "p",
          "text": "You can use the HTML attributes likerequiredandtype=\"email\"for basic client-side form validation. For more advanced server-side validation, you can use a library likezodto validate the form fields before mutating the data:"
        },
        {
          "type": "code",
          "code": "'use server'import{ z }from'zod'constschema=z.object({email:z.string({invalid_type_error:'Invalid Email',}),})exportdefaultasyncfunctioncreateUser(formData:FormData) {constvalidatedFields=schema.safeParse({email:formData.get('email'),})// Return early if the form data is invalidif(!validatedFields.success) {return{errors:validatedFields.error.flatten().fieldErrors,}}// Mutate data}"
        },
        {
          "type": "p",
          "text": "Once the fields have been validated on the server, you can return a serializable object in your action and use the ReactuseActionStatehook to show a message to the user."
        },
        {
          "type": "list",
          "items": [
            "By passing the action touseActionState, the action's function signature changes to receive a newprevStateorinitialStateparameter as its first argument.",
            "useActionStateis a React hook and therefore must be used in a Client Component."
          ]
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'exportasyncfunctioncreateUser(prevState:any,formData:FormData) {constres=awaitfetch('https://...')constjson=awaitres.json()if(!res.ok) {return{ message:'Please enter a valid email'}}redirect('/dashboard')}"
        },
        {
          "type": "p",
          "text": "Then, you can pass your action to theuseActionStatehook and use the returnedstateto display an error message."
        },
        {
          "type": "code",
          "code": "'use client'import{ useActionState }from'react'import{ createUser }from'@/app/actions'constinitialState={message:'',}exportfunctionSignup() {const[state,formAction,pending]=useActionState(createUser,initialState)return(<formaction={formAction}><labelhtmlFor=\"email\">Email</label><inputtype=\"text\"id=\"email\"name=\"email\"required/>{/* ... */}<paria-live=\"polite\">{state?.message}</p><buttondisabled={pending}>Sign up</button></form>)}"
        },
        {
          "type": "p",
          "text": "TheuseActionStatehook exposes apendingboolean that can be used to show a loading indicator while the action is being executed. Alternatively, you can use theuseFormStatushook to show a loading indicator while the action is being executed. When using this hook, you'll need to create a separate component to render the loading indicator. For example, to disable the button when the action is pending:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useFormStatus }from'react-dom'exportfunctionSubmitButton() {const{pending}=useFormStatus()return(<buttondisabled={pending}type=\"submit\">Sign Up</button>)}"
        },
        {
          "type": "p",
          "text": "You can then nest theSubmitButtoncomponent inside the form:"
        },
        {
          "type": "code",
          "code": "import{ SubmitButton }from'./button'import{ createUser }from'@/app/actions'exportfunctionSignup() {return(<formaction={createUser}>{/* Other form elements */}<SubmitButton/></form>)}"
        },
        {
          "type": "p",
          "text": "Good to know:In React 19,useFormStatusincludes additional keys on the returned object, like data, method, and action. If you are not using React 19, only thependingkey is available."
        },
        {
          "type": "p",
          "text": "You can use the ReactuseOptimistichook to optimistically update the UI before the Server Action finishes executing, rather than waiting for the response:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useOptimistic }from'react'import{ send }from'./actions'typeMessage={message:string}exportfunctionThread({ messages }:{ messages:Message[] }) {const[optimisticMessages,addOptimisticMessage]=useOptimistic<Message[],string>(messages,(state,newMessage)=>[...state,{ message:newMessage }])constformAction=async(formData:FormData)=>{constmessage=formData.get('message')asstringaddOptimisticMessage(message)awaitsend(message)}return(<div>{optimisticMessages.map((m,i)=>(<divkey={i}>{m.message}</div>))}<formaction={formAction}><inputtype=\"text\"name=\"message\"/><buttontype=\"submit\">Send</button></form></div>)}"
        },
        {
          "type": "p",
          "text": "While it's common to use Server Actions within<form>elements, they can also be invoked with event handlers such asonClick. For example, to increment a like count:"
        },
        {
          "type": "code",
          "code": "'use client'import{ incrementLike }from'./actions'import{ useState }from'react'exportdefaultfunctionLikeButton({ initialLikes }:{ initialLikes:number}) {const[likes,setLikes]=useState(initialLikes)return(<><p>Total Likes: {likes}</p><buttononClick={async()=>{constupdatedLikes=awaitincrementLike()setLikes(updatedLikes)}}>Like</button></>)}"
        },
        {
          "type": "p",
          "text": "You can also add event handlers to form elements, for example, to save a form fieldonChange:"
        },
        {
          "type": "code",
          "code": "'use client'import{ publishPost,saveDraft }from'./actions'exportdefaultfunctionEditPost() {return(<formaction={publishPost}><textareaname=\"content\"onChange={async(e)=>{awaitsaveDraft(e.target.value)}}/><buttontype=\"submit\">Publish</button></form>)}"
        },
        {
          "type": "p",
          "text": "For cases like this, where multiple events might be fired in quick succession, we recommenddebouncingto prevent unnecessary Server Action invocations."
        },
        {
          "type": "p",
          "text": "You can use the ReactuseEffecthook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example,onKeyDownfor app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:"
        },
        {
          "type": "code",
          "code": "'use client'import{ incrementViews }from'./actions'import{ useState,useEffect }from'react'exportdefaultfunctionViewCount({ initialViews }:{ initialViews:number}) {const[views,setViews]=useState(initialViews)useEffect(()=>{constupdateViews=async()=>{constupdatedViews=awaitincrementViews()setViews(updatedViews)}updateViews()},[])return<p>Total Views: {views}</p>}"
        },
        {
          "type": "p",
          "text": "Remember to consider thebehavior and caveatsofuseEffect."
        },
        {
          "type": "p",
          "text": "When an error is thrown, it'll be caught by the nearesterror.jsor<Suspense>boundary on the client. SeeError Handlingfor more information."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Aside from throwing the error, you can also return an object to be handled byuseActionState. SeeServer-side validation and error handling."
          ]
        },
        {
          "type": "p",
          "text": "You can revalidate theNext.js Cacheinside your Server Actions with therevalidatePathAPI:"
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidatePath }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidatePath('/posts')}"
        },
        {
          "type": "p",
          "text": "Or invalidate a specific data fetch with a cache tag usingrevalidateTag:"
        },
        {
          "type": "code",
          "code": "'use server'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost() {try{// ...}catch(error) {// ...}revalidateTag('posts')}"
        },
        {
          "type": "p",
          "text": "If you would like to redirect the user to a different route after the completion of a Server Action, you can useredirectAPI.redirectneeds to be called outside of thetry/catchblock:"
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'import{ revalidateTag }from'next/cache'exportasyncfunctioncreatePost(id:string) {try{// ...}catch(error) {// ...}revalidateTag('posts')// Update cached postsredirect(`/post/${id}`)// Navigate to the new post page}"
        },
        {
          "type": "p",
          "text": "You canget,set, anddeletecookies inside a Server Action using thecookiesAPI:"
        },
        {
          "type": "code",
          "code": "'use server'import{ cookies }from'next/headers'exportasyncfunctionexampleAction() {constcookieStore=awaitcookies()// Get cookiecookieStore.get('name')?.value// Set cookiecookieStore.set('name','Delba')// Delete cookiecookieStore.delete('name')}"
        },
        {
          "type": "p",
          "text": "Seeadditional examplesfor deleting cookies from Server Actions."
        },
        {
          "type": "p",
          "text": "By default, when a Server Action is created and exported, it creates a public HTTP endpoint\nand should be treated with the same security assumptions and authorization checks. This means, even if a Server Action or utility function is not imported elsewhere in your code, it’s still publicly accessible. To improve security, Next.js has the following built-in features:"
        },
        {
          "type": "list",
          "items": [
            "Secure action IDs:Next.js creates encrypted, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security.",
            "Dead code elimination:Unused Server Actions (referenced by their IDs) are removed from client bundle to avoid public access by third-party."
          ]
        },
        {
          "type": "p",
          "text": "Good to know: The IDs are created during compilation and are cached for a maximum of 14 days. They will be regenerated when a new build is initiated or when the build cache is invalidated.\nThis security improvement reduces the risk in cases where an authentication layer is missing. However, you should still treat Server Actions like public HTTP endpoints."
        },
        {
          "type": "code",
          "code": "// app/actions.js'use server'// This action **is** used in our application, so Next.js// will create a secure ID to allow the client to reference// and call the Server Action.exportasyncfunctionupdateUserAction(formData) {}// This action **is not** used in our application, so Next.js// will automatically remove this code during `next build`// and will not create a public endpoint.exportasyncfunctiondeleteUserAction(formData) {}"
        },
        {
          "type": "p",
          "text": "You should ensure that the user is authorized to perform the action. For example:"
        },
        {
          "type": "code",
          "code": "'use server'import{ auth }from'./lib'exportfunctionaddItem() {const{user}=auth()if(!user) {thrownewError('You must be signed in to perform this action')}// ...}"
        },
        {
          "type": "p",
          "text": "Defining a Server Action inside a component creates aclosurewhere the action has access to the outer function's scope. For example, thepublishaction has access to thepublishVersionvariable:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constpublishVersion=awaitgetLatestVersion();asyncfunctionpublish() {\"use server\";if(publishVersion!==awaitgetLatestVersion()) {thrownewError('The version has changed since pressing publish');}...}return(<form><buttonformAction={publish}>Publish</button></form>);}"
        },
        {
          "type": "p",
          "text": "Closures are useful when you need to capture asnapshotof data (e.g.publishVersion) at the time of rendering so that it can be used later when the action is invoked. However, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build."
        },
        {
          "type": "p",
          "text": "Good to know:We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use theReact taint APIsto proactively prevent specific data from being sent to the client."
        },
        {
          "type": "p",
          "text": "When self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies. To mitigate this, you can overwrite the encryption key using theprocess.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEYenvironment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key. This is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing."
        },
        {
          "type": "p",
          "text": "Good to know:Next.js applications deployed to Vercel automatically handle this."
        },
        {
          "type": "p",
          "text": "Since Server Actions can be invoked in a<form>element, this opens them up toCSRF attacks. Behind the scenes, Server Actions use thePOSTmethod, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly withSameSite cookiesbeing the default. As an additional protection, Server Actions in Next.js also compare theOrigin headerto theHost header(orX-Forwarded-Host). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it. For large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration optionserverActions.allowedOriginsoption to specify a list of safe origins. The option accepts an array of strings."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/module.exports={experimental:{serverActions:{allowedOrigins:['my-proxy.com','*.my-proxy.com'],},},}"
        },
        {
          "type": "p",
          "text": "Learn more aboutSecurity and Server Actions."
        },
        {
          "type": "p",
          "text": "For more information, check out the following React docs:"
        },
        {
          "type": "list",
          "items": [
            "Server Actions",
            "\"use server\"",
            "<form>",
            "useFormStatus",
            "useActionState",
            "useOptimistic"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/deploying",
      "title": "Building Your Application: Deploying | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Congratulations, it's time to ship to production. You can deploymanaged Next.js with Vercel, or self-host on a Node.js server, Docker image, or even static HTML files. When deploying usingnext start, all Next.js features are supported."
        },
        {
          "type": "p",
          "text": "Runningnext buildgenerates an optimized version of your application for production. HTML, CSS, and JavaScript files are created based on your pages. JavaScript iscompiledand browser bundles areminifiedusing theNext.js Compilerto help achieve the best performance and supportall modern browsers. Next.js produces a standard deployment output used by managed and self-hosted Next.js. This ensures all features are supported across both methods of deployment. In the next major version, we will be transforming this output into ourBuild Output API specification."
        },
        {
          "type": "p",
          "text": "Vercel, the creators and maintainers of Next.js, provide managed infrastructure and a developer experience platform for your Next.js applications. Deploying to Vercel is zero-configuration and provides additional enhancements for scalability, availability, and performance globally. However, all Next.js features are still supported when self-hosted. Learn more aboutNext.js on Vercelordeploy a template for freeto try it out."
        },
        {
          "type": "p",
          "text": "You can self-host Next.js in three different ways:"
        },
        {
          "type": "list",
          "items": ["A Node.js server", "A Docker container", "A static export"]
        },
        {
          "type": "p",
          "text": "🎥 Watch:Learn more about self-hosting Next.js →YouTube (45 minutes)."
        },
        {
          "type": "p",
          "text": "We have community maintained deployment examples with the following providers:"
        },
        {
          "type": "list",
          "items": [
            "Deno",
            "DigitalOcean",
            "Flightcontrol",
            "Fly.io",
            "GitHub Pages",
            "Google Cloud Run",
            "Railway",
            "Render",
            "SST"
          ]
        },
        {
          "type": "p",
          "text": "Next.js can be deployed to any hosting provider that supports Node.js. Ensure yourpackage.jsonhas the\"build\"and\"start\"scripts:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\"}}"
        },
        {
          "type": "p",
          "text": "Then, runnpm run buildto build your application. Finally, runnpm run startto start the Node.js server. This server supports all Next.js features."
        },
        {
          "type": "p",
          "text": "Next.js can be deployed to any hosting provider that supportsDockercontainers. You can use this approach when deploying to container orchestrators such asKubernetesor when running inside a container in any cloud provider."
        },
        {
          "type": "list",
          "items": [
            "Install Dockeron your machine",
            "Clone our example(or themulti-environment example)",
            "Build your container:docker build -t nextjs-docker .",
            "Run your container:docker run -p 3000:3000 nextjs-docker"
          ]
        },
        {
          "type": "p",
          "text": "Next.js through Docker supports all Next.js features."
        },
        {
          "type": "p",
          "text": "Next.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server. Since Next.js supports thisstatic export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets. This includes tools like AWS S3, Nginx, or Apache. Running as astatic exportdoes not support Next.js features that require a server.Learn more."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": ["Server Componentsare supported with static exports."]
        },
        {
          "type": "p",
          "text": "Image Optimizationthroughnext/imageworks self-hosted with zero configuration when deploying usingnext start. If you would prefer to have a separate service to optimize images, you canconfigure an image loader. Image Optimization can be used with astatic exportby defining a custom image loader innext.config.js. Note that images are optimized at runtime, not during the build."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "On glibc-based Linux systems, Image Optimization may requireadditional configurationto prevent excessive memory usage.",
            "Learn more about thecaching behavior of optimized imagesand how to configure the TTL.",
            "You can alsodisable Image Optimizationand still retain other benefits of usingnext/imageif you prefer. For example, if you are optimizing images yourself separately."
          ]
        },
        {
          "type": "p",
          "text": "Middlewareworks self-hosted with zero configuration when deploying usingnext start. Since it requires access to the incoming request, it is not supported when using astatic export. Middleware uses aruntimethat is a subset of all available Node.js APIs to help ensure low latency, since it may run in front of every route or asset in your application. This runtime does not require running “at the edge” and works in a single-region server. Additional configuration and infrastructure are required to run Middleware in multiple regions. If you are looking to add logic (or use an external package) that requires all Node.js APIs, you might be able to move this logic to alayoutas aServer Component. For example, checkingheadersandredirecting. You can also use headers, cookies, or query parameters toredirectorrewritethroughnext.config.js. If that does not work, you can also use acustom server."
        },
        {
          "type": "p",
          "text": "Next.js can support both build time and runtime environment variables. By default, environment variables are only available on the server. To expose an environment variable to the browser, it must be prefixed withNEXT_PUBLIC_. However, these public environment variables will be inlined into the JavaScript bundle duringnext build. You safely read environment variables on the server during dynamic rendering."
        },
        {
          "type": "code",
          "code": "import{ connection }from'next/server'exportdefaultasyncfunctionComponent() {awaitconnection()// cookies, headers, and other Dynamic APIs// will also opt into dynamic rendering, meaning// this env variable is evaluated at runtimeconstvalue=process.env.MY_VALUE// ...}"
        },
        {
          "type": "p",
          "text": "This allows you to use a singular Docker image that can be promoted through multiple environments with different values."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "You can run code on server startup using theregisterfunction.",
            "We do not recommend using theruntimeConfigoption, as this does not work with the standalone output mode. Instead, we recommendincrementally adoptingthe App Router."
          ]
        },
        {
          "type": "p",
          "text": "Next.js can cache responses, generated static pages, build outputs, and other static assets like images, fonts, and scripts. Caching and revalidating pages (withIncremental Static Regeneration) use thesame shared cache. By default, this cache is stored to the filesystem (on disk) on your Next.js server.This works automatically when self-hostingusing both the Pages and App Router. You can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application."
        },
        {
          "type": "list",
          "items": [
            "Next.js sets theCache-Controlheader ofpublic, max-age=31536000, immutableto truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example,Static Image Imports. You canconfigure the TTLfor images.",
            "Incremental Static Regeneration (ISR) sets theCache-Controlheader ofs-maxage: <revalidate in getStaticProps>, stale-while-revalidate. This revalidation time is defined in yourgetStaticPropsfunctionin seconds. If you setrevalidate: false, it will default to a one-year cache duration.",
            "Dynamically rendered pages set aCache-Controlheader ofprivate, no-cache, no-store, max-age=0, must-revalidateto prevent user-specific data from being cached. This applies to both the App Router and Pages Router. This also includesDraft Mode."
          ]
        },
        {
          "type": "p",
          "text": "If you want to host static assets on a different domain or CDN, you can use theassetPrefixconfigurationinnext.config.js. Next.js will use this asset prefix when retrieving JavaScript or CSS files. Separating your assets to a different domain does come with the downside of extra time spent on DNS and TLS resolution. Learn more aboutassetPrefix."
        },
        {
          "type": "p",
          "text": "By default, generated cache assets will be stored in memory (defaults to 50mb) and on disk. If you are hosting Next.js using a container orchestration platform like Kubernetes, each pod will have a copy of the cache. To prevent stale data from being shown since the cache is not shared between pods by default, you can configure the Next.js cache to provide a cache handler and disable in-memory caching. To configure the ISR/Data Cache location when self-hosting, you can configure a custom handler in yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "module.exports={cacheHandler:require.resolve('./cache-handler.js'),cacheMaxMemorySize:0,// disable default in-memory caching}"
        },
        {
          "type": "p",
          "text": "Then, createcache-handler.jsin the root of your project, for example:"
        },
        {
          "type": "code",
          "code": "constcache=newMap()module.exports=classCacheHandler{constructor(options) {this.options=options}asyncget(key) {// This could be stored anywhere, like durable storagereturncache.get(key)}asyncset(key,data,ctx) {// This could be stored anywhere, like durable storagecache.set(key,{value:data,lastModified:Date.now(),tags:ctx.tags,})}asyncrevalidateTag(tags) {// tags is either a string or an array of stringstags=[tags].flat()// Iterate over all entries in the cachefor(let[key,value]ofcache) {// If the value's tags include the specified tag, delete this entryif(value.tags.some((tag)=>tags.include(tag))) {cache.delete(key)}}}}"
        },
        {
          "type": "p",
          "text": "Using a custom cache handler will allow you to ensure consistency across all pods hosting your Next.js application. For instance, you can save the cached values anywhere, likeRedisor AWS S3."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "revalidatePathis a convenience layer on top of cache tags. CallingrevalidatePathwill call therevalidateTagfunction with a special default tag for the provided page."
          ]
        },
        {
          "type": "p",
          "text": "Next.js generates an ID duringnext buildto identify which version of your application is being served. The same build should be used and boot up multiple containers. If you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use thegenerateBuildIdcommand innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={generateBuildId:async()=>{// This could be anything, using the latest git hashreturnprocess.env.GIT_HASH},}"
        },
        {
          "type": "p",
          "text": "Next.js will automatically mitigate most instances ofversion skewand automatically reload the application to retrieve new assets when detected. For example, if there is a mismatch in thedeploymentId, transitions between pages will perform a hard navigation versus using a prefetched value. When the application is reloaded, there may be a loss of application state if it's not designed to persist between page navigations. For example, using URL state or local storage would persist state after a page refresh. However, component state likeuseStatewould be lost in such navigations. Vercel provides additionalskew protectionfor Next.js applications to ensure assets and functions from the previous version are still available to older clients, even after the new version is deployed. You can manually configure thedeploymentIdproperty in yournext.config.jsfile to ensure each request uses either?dplquery string orx-deployment-idheader."
        },
        {
          "type": "p",
          "text": "The Next.js App Router supportsstreaming responseswhen self-hosting. If you are using Nginx or a similar proxy, you will need to configure it to disable buffering to enable streaming. For example, you can disable buffering in Nginx by settingX-Accel-Bufferingtono:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncheaders() {return[{source:'/:path*{/}?',headers:[{key:'X-Accel-Buffering',value:'no',},],},]},}"
        },
        {
          "type": "p",
          "text": "Partial Prerendering (experimental)works by default with Next.js and is not a CDN feature. This includes deployment as a Node.js server (throughnext start) and when used with a Docker container."
        },
        {
          "type": "p",
          "text": "When using a CDN in front on your Next.js application, the page will includeCache-Control: privateresponse header when dynamic APIs are accessed. This ensures that the resulting HTML page is marked as non-cachable. If the page is fully prerendered to static, it will includeCache-Control: publicto allow the page to be cached on the CDN. If you don't need a mix of both static and dynamic components, you can make your entire route static and cache the output HTML on a CDN. This Automatic Static Optimization is the default behavior when runningnext buildif dynamic APIs are not used."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/deploying/multi-zones",
      "title": "Deploying: Multi-Zones | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "list",
          "items": ["With Zones"]
        },
        {
          "type": "p",
          "text": "Multi-Zones are an approach to micro-frontends that separate a large application on a domain into smaller Next.js applications that each serve a set of paths. This is useful when there are collections of pages unrelated to the other pages in the application. By moving those pages to a separate zone (i.e., a separate application), you can reduce the size of each application which improves build times and removes code that is only necessary for one of the zones. Since applications are decoupled, Multi-Zones also allows other applications on the domain to use their own choice of framework. For example, let's say you have the following set of pages that you would like to split up:"
        },
        {
          "type": "list",
          "items": [
            "/blog/*for all blog posts",
            "/dashboard/*for all pages when the user is logged-in to the dashboard",
            "/*for the rest of your website not covered by other zones"
          ]
        },
        {
          "type": "p",
          "text": "With Multi-Zones support, you can create three applications that all are served on the same domain and look the same to the user, but you can develop and deploy each of the applications independently."
        },
        {
          "type": "p",
          "text": "Navigating between pages in the same zone will perform soft navigations, a navigation that does not require reloading the page. For example, in this diagram, navigating from/to/productswill be a soft navigation. Navigating from a page in one zone to a page in another zone, such as from/to/dashboard, will perform a hard navigation, unloading the resources of the current page and loading the resources of the new page. Pages that are frequently visited together should live in the same zone to avoid hard navigations."
        },
        {
          "type": "p",
          "text": "A zone is a normal Next.js application where you also configure anassetPrefixto avoid conflicts with pages and static files in other zones."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={assetPrefix:'/blog-static',}"
        },
        {
          "type": "p",
          "text": "Next.js assets, such as JavaScript and CSS, will be prefixed withassetPrefixto make sure that they don't conflict with assets from other zones. These assets will be served under/assetPrefix/_next/...for each of the zones. The default application handling all paths not routed to another more specific zone does not need anassetPrefix. In versions older than Next.js 15, you may also need an additional rewrite to handle the static assets. This is no longer necessary in Next.js 15."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={assetPrefix:'/blog-static',asyncrewrites() {return{beforeFiles:[{source:'/blog-static/_next/:path+',destination:'/_next/:path+',},],}},}"
        },
        {
          "type": "p",
          "text": "With the Multi Zones set-up, you need to route the paths to the correct zone since they are served by different applications. You can use any HTTP proxy to do this, but one of the Next.js applications can also be used to route requests for the entire domain. To route to the correct zone using a Next.js application, you can userewrites. For each path served by a different zone, you would add a rewrite rule to send that path to the domain of the other zone. For example:"
        },
        {
          "type": "code",
          "code": "asyncrewrites() {return[{source:'/blog',destination:`${process.env.BLOG_DOMAIN}/blog`,},{source:'/blog/:path+',destination:`${process.env.BLOG_DOMAIN}/blog/:path+`,}];}"
        },
        {
          "type": "p",
          "text": "destinationshould be a URL that is served by the zone, including scheme and domain. This should point to the zone's production domain, but it can also be used to route requests tolocalhostin local development."
        },
        {
          "type": "p",
          "text": "Good to know: URL paths should be unique to a zone. For example, two zones trying to serve/blogwould create a routing conflict."
        },
        {
          "type": "p",
          "text": "Routing requests throughrewritesis recommended to minimize latency overhead for the requests, but middleware can also be used when there is a need for a dynamic decision when routing. For example, if you are using a feature flag to decide where a path should be routed such as during a migration, you can use middleware."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionmiddleware(request) {const{pathname,search}=req.nextUrl;if(pathname==='/your-path'&&myFeatureFlag.isEnabled()) {returnNextResponse.rewrite(`${rewriteDomain}${pathname}${search});}}"
        },
        {
          "type": "p",
          "text": "Links to paths in a different zone should use anatag instead of the Next.js<Link>component. This is because Next.js will try to prefetch and soft navigate to any relative path in<Link>component, which will not work across zones."
        },
        {
          "type": "p",
          "text": "The Next.js applications that make up the different zones can live in any repository. However, it is often convenient to put these zones in amonorepoto more easily share code. For zones that live in different repositories, code can also be shared using public or private NPM packages. Since the pages in different zones may be released at different times, feature flags can be useful for enabling or disabling features in unison across the different zones. ForNext.js on Vercelapplications, you can use amonorepoto deploy all affected zones with a singlegit push."
        },
        {
          "type": "p",
          "text": "When usingServer Actionswith Multi-Zones, you must explicitly allow the user-facing origin since your user facing domain may serve multiple applications. In yournext.config.jsfile, add the following lines:"
        },
        {
          "type": "code",
          "code": "constnextConfig={experimental:{serverActions:{allowedOrigins:['your-production-domain.com'],},},}"
        },
        {
          "type": "p",
          "text": "SeeserverActions.allowedOriginsfor more information."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/deploying/production-checklist",
      "title": "Deploying: Production Checklist | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Before taking your Next.js application to production, there are some optimizations and patterns you should consider implementing for the best user experience, performance, and security. This page provides best practices that you can use as a reference whenbuilding your application,before going to production, andafter deployment- as well as theautomatic Next.js optimizationsyou should be aware of."
        },
        {
          "type": "p",
          "text": "These Next.js optimizations are enabled by default and require no configuration:"
        },
        {
          "type": "list",
          "items": [
            "Server Components:Next.js uses Server Components by default. Server Components run on the server, and don't require JavaScript to render on the client. As such, they have no impact on the size of your client-side JavaScript bundles. You can then useClient Componentsas needed for interactivity.",
            "Code-splitting:Server Components enable automatic code-splitting by route segments. You may also considerlazy loadingClient Components and third-party libraries, where appropriate.",
            "Prefetching:When a link to a new route enters the user's viewport, Next.js prefetches the route in background. This makes navigation to new routes almost instant. You can opt out of prefetching, where appropriate.",
            "Static Rendering:Next.js statically renders Server and Client Components on the server at build time and caches the rendered result to improve your application's performance. You can opt intoDynamic Renderingfor specific routes, where appropriate.",
            "Caching:Next.js caches data requests, the rendered result of Server and Client Components, static assets, and more, to reduce the number of network requests to your server, database, and backend services. You may opt out of caching, where appropriate."
          ]
        },
        {
          "type": "p",
          "text": "These defaults aim to improve your application's performance, and reduce the cost and amount of data transferred on each network request."
        },
        {
          "type": "p",
          "text": "While building your application, we recommend using the following features to ensure the best performance and user experience:"
        },
        {
          "type": "list",
          "items": [
            "Layouts:Use layouts to share UI across pages and enablepartial renderingon navigation.",
            "<Link>component:Use the<Link>component forclient-side navigation and prefetching.",
            "Error Handling:Gracefully handlecatch-all errorsand404 errorsin production by creating custom error pages.",
            "Composition Patterns:Follow the recommended composition patterns for Server and Client Components, and check the placement of your\"use client\"boundariesto avoid unnecessarily increasing your client-side JavaScript bundle.",
            "Dynamic APIs:Be aware that Dynamic APIs likecookiesand thesearchParamsprop will opt the entire route intoDynamic Rendering(or your whole application if used in theRoot Layout). Ensure Dynamic API usage is intentional and wrap them in<Suspense>boundaries where appropriate."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:Partial Prerendering (experimental)will allow parts of a route to be dynamic without opting the whole route into dynamic rendering."
        },
        {
          "type": "list",
          "items": [
            "Server Components:Leverage the benefits of fetching data on the server using Server Components.",
            "Route Handlers:Use Route Handlers to access your backend resources from Client Components. But do not call Route Handlers from Server Components to avoid an additional server request.",
            "Streaming:Use Loading UI and React Suspense to progressively send UI from the server to the client, and prevent the whole route from blocking while data is being fetched.",
            "Parallel Data Fetching:Reduce network waterfalls by fetching data in parallel, where appropriate. Also, considerpreloading datawhere appropriate.",
            "Data Caching:Verify whether your data requests are being cached or not, and opt into caching, where appropriate. Ensure requests that don't usefetcharecached.",
            "Static Images:Use thepublicdirectory to automatically cache your application's static assets, e.g. images."
          ]
        },
        {
          "type": "list",
          "items": [
            "Forms and Validation:Use Server Actions to handle form submissions, server-side validation, and handle errors."
          ]
        },
        {
          "type": "list",
          "items": [
            "Font Module:Optimize fonts by using the Font Module, which automatically hosts your font files with other static assets, removes external network requests, and reduceslayout shift.",
            "<Image>Component:Optimize images by using the Image Component, which automatically optimizes images, prevents layout shift, and serves them in modern formats like WebP or AVIF.",
            "<Script>Component:Optimize third-party scripts by using the Script Component, which automatically defers scripts and prevents them from blocking the main thread.",
            "ESLint:Use the built-ineslint-plugin-jsx-a11yplugin to catch accessibility issues early."
          ]
        },
        {
          "type": "list",
          "items": [
            "Tainting:Prevent sensitive data from being exposed to the client by tainting data objects and/or specific values.",
            "Server Actions:Ensure users are authorized to call Server Actions. Review the recommendedsecurity practices."
          ]
        },
        {
          "type": "list",
          "items": [
            "Environment Variables:Ensure your.env.*files are added to.gitignoreand only public variables are prefixed withNEXT_PUBLIC_.",
            "Content Security Policy:Consider adding a Content Security Policy to protect your application against various security threats such as cross-site scripting, clickjacking, and other code injection attacks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Metadata API:Use the Metadata API to improve your application's Search Engine Optimization (SEO) by adding page titles, descriptions, and more.",
            "Open Graph (OG) images:Create OG images to prepare your application for social sharing.",
            "SitemapsandRobots:Help Search Engines crawl and index your pages by generating sitemaps and robots files."
          ]
        },
        {
          "type": "list",
          "items": [
            "TypeScript andTS Plugin:Use TypeScript and the TypeScript plugin for better type-safety, and to help you catch errors early."
          ]
        },
        {
          "type": "p",
          "text": "Before going to production, you can runnext buildto build your application locally and catch any build errors, then runnext startto measure the performance of your application in a production-like environment."
        },
        {
          "type": "list",
          "items": [
            "Lighthouse:Run lighthouse in incognito to gain a better understanding of how your users will experience your site, and to identify areas for improvement. This is a simulated test and should be paired with looking at field data (such as Core Web Vitals)."
          ]
        },
        {
          "type": "list",
          "items": [
            "useReportWebVitalshook:Use this hook to sendCore Web Vitalsdata to analytics tools."
          ]
        },
        {
          "type": "p",
          "text": "Use the@next/bundle-analyzerpluginto analyze the size of your JavaScript bundles and identify large modules and dependencies that might be impacting your application's performance. Additionally, the following tools can help you understand the impact of adding new dependencies to your application:"
        },
        {
          "type": "list",
          "items": [
            "Import Cost",
            "Package Phobia",
            "Bundle Phobia",
            "bundlejs"
          ]
        },
        {
          "type": "p",
          "text": "Depending on where you deploy your application, you might have access to additional tools and integrations to help you monitor and improve your application's performance. For Vercel deployments, we recommend the following:"
        },
        {
          "type": "list",
          "items": [
            "Analytics:A built-in analytics dashboard to help you understand your application's traffic, including the number of unique visitors, page views, and more.",
            "Speed Insights:Real-world performance insights based on visitor data, offering a practical view of how your website is performing in the field.",
            "Logging:Runtime and Activity logs to help you debug issues and monitor your application in production. Alternatively, see theintegrations pagefor a list of third-party tools and services."
          ]
        },
        {
          "type": "p",
          "text": "Good to know: To get a comprehensive understanding of the best practices for production deployments on Vercel, including detailed strategies for improving website performance, refer to theVercel Production Checklist."
        },
        {
          "type": "p",
          "text": "Following these recommendations will help you build a faster, more reliable, and secure application for your users."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/deploying/static-exports",
      "title": "Deploying: Static Exports | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server. When runningnext build, Next.js generates an HTML file per route. By breaking a strict SPA into individual HTML files, Next.js can avoid loading unnecessary JavaScript code on the client-side, reducing the bundle size and enabling faster page loads. Since Next.js supports this static export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets."
        },
        {
          "type": "p",
          "text": "To enable a static export, change the output mode insidenext.config.js:"
        },
        {
          "type": "code",
          "code": "/***@type{import('next').NextConfig}*/constnextConfig={output:'export',// Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`// trailingSlash: true,// Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`// skipTrailingSlashRedirect: true,// Optional: Change the output directory `out` -> `dist`// distDir: 'dist',}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "After runningnext build, Next.js will produce anoutfolder which contains the HTML/CSS/JS assets for your application."
        },
        {
          "type": "p",
          "text": "The core of Next.js has been designed to support static exports."
        },
        {
          "type": "p",
          "text": "When you runnext buildto generate a static export, Server Components consumed inside theappdirectory will run during the build, similar to traditional static-site generation. The resulting component will be rendered into static HTML for the initial page load and a static payload for client navigation between routes. No changes are required for your Server Components when using the static export, unless they consumedynamic server functions."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {// This fetch will run on the server during `next build`constres=awaitfetch('https://api.example.com/...')constdata=awaitres.json()return<main>...</main>}"
        },
        {
          "type": "p",
          "text": "If you want to perform data fetching on the client, you can use a Client Component withSWRto memoize requests."
        },
        {
          "type": "code",
          "code": "'use client'importuseSWRfrom'swr'constfetcher=(url:string)=>fetch(url).then((r)=>r.json())exportdefaultfunctionPage() {const{data,error}=useSWR(`https://jsonplaceholder.typicode.com/posts/1`,fetcher)if(error)return'Failed to load'if(!data)return'Loading...'returndata.title}"
        },
        {
          "type": "p",
          "text": "Since route transitions happen client-side, this behaves like a traditional SPA. For example, the following index route allows you to navigate to different posts on the client:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<><h1>Index Page</h1><hr/><ul><li><Linkhref=\"/post/1\">Post 1</Link></li><li><Linkhref=\"/post/2\">Post 2</Link></li></ul></>)}"
        },
        {
          "type": "p",
          "text": "Image Optimizationthroughnext/imagecan be used with a static export by defining a custom image loader innext.config.js. For example, you can optimize images with a service like Cloudinary:"
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={output:'export',images:{loader:'custom',loaderFile:'./my-loader.ts',},}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "This custom loader will define how to fetch images from a remote source. For example, the following loader will construct the URL for Cloudinary:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctioncloudinaryLoader({src,width,quality,}:{src:stringwidth:numberquality?:number}) {constparams=['f_auto','c_limit',`w_${width}`,`q_${quality||'auto'}`]return`https://res.cloudinary.com/demo/image/upload/${params.join(',')}${src}`}"
        },
        {
          "type": "p",
          "text": "You can then usenext/imagein your application, defining relative paths to the image in Cloudinary:"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return<Imagealt=\"turtles\"src=\"/turtles.jpg\"width={300}height={300} />}"
        },
        {
          "type": "p",
          "text": "Route Handlers will render a static response when runningnext build. Only theGETHTTP verb is supported. This can be used to generate static HTML, JSON, TXT, or other files from cached or uncached data. For example:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET() {returnResponse.json({ name:'Lee'})}"
        },
        {
          "type": "p",
          "text": "The above fileapp/data.json/route.tswill render to a static file duringnext build, producingdata.jsoncontaining{ name: 'Lee' }. If you need to read dynamic values from the incoming request, you cannot use a static export."
        },
        {
          "type": "p",
          "text": "Client Components are pre-rendered to HTML duringnext build. BecauseWeb APIslikewindow,localStorage, andnavigatorare not available on the server, you need to safely access these APIs only when running in the browser. For example:"
        },
        {
          "type": "code",
          "code": "'use client';import{ useEffect }from'react';exportdefaultfunctionClientComponent() {useEffect(()=>{// You now have access to `window`console.log(window.innerHeight);},[])return...;}"
        },
        {
          "type": "p",
          "text": "Features that require a Node.js server, or dynamic logic that cannot be computed during the build process, arenotsupported:"
        },
        {
          "type": "list",
          "items": [
            "Dynamic RouteswithdynamicParams: true",
            "Dynamic RouteswithoutgenerateStaticParams()",
            "Route Handlersthat rely on Request",
            "Cookies",
            "Rewrites",
            "Redirects",
            "Headers",
            "Middleware",
            "Incremental Static Regeneration",
            "Image Optimizationwith the defaultloader",
            "Draft Mode",
            "Server Actions"
          ]
        },
        {
          "type": "p",
          "text": "Attempting to use any of these features withnext devwill result in an error, similar to setting thedynamicoption toerrorin the root layout."
        },
        {
          "type": "code",
          "code": "exportconstdynamic='error'"
        },
        {
          "type": "p",
          "text": "With a static export, Next.js can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets. When runningnext build, Next.js generates the static export into theoutfolder. For example, let's say you have the following routes:"
        },
        {
          "type": "list",
          "items": ["/", "/blog/[id]"]
        },
        {
          "type": "p",
          "text": "After runningnext build, Next.js will generate the following files:"
        },
        {
          "type": "list",
          "items": [
            "/out/index.html",
            "/out/404.html",
            "/out/blog/post-1.html",
            "/out/blog/post-2.html"
          ]
        },
        {
          "type": "p",
          "text": "If you are using a static host like Nginx, you can configure rewrites from incoming requests to the correct files:"
        },
        {
          "type": "code",
          "code": "server{listen80;server_nameacme.com;root/var/www/out;location/ {try_files$uri $uri.html $uri/=404;}# This is necessary when `trailingSlash: false`.# You can omit this when `trailingSlash: true`.location/blog/ {rewrite^/blog/(.*)$/blog/$1.htmlbreak;}error_page404 /404.html;location=/404.html{internal;}}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/examples",
      "title": "Building Your Application: Examples | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "list",
          "items": [
            "Using thefetchAPI",
            "Using an ORM or database client",
            "Reading search params on the server",
            "Reading search params on the client"
          ]
        },
        {
          "type": "list",
          "items": [
            "Using ISR to revalidate data after a certain time",
            "Using ISR to revalidate data on-demand"
          ]
        },
        {
          "type": "list",
          "items": [
            "Showing a pending state while submitting a form",
            "Server-side form validation",
            "Handling expected errors",
            "Handling unexpected exceptions",
            "Showing optimistic UI updates",
            "Programmatic form submission"
          ]
        },
        {
          "type": "list",
          "items": [
            "Passing additional values",
            "Revalidating data",
            "Redirecting",
            "Setting cookies",
            "Deleting cookies"
          ]
        },
        {
          "type": "list",
          "items": [
            "Creating an RSS feed",
            "Creating an Open Graph image",
            "Creating a sitemap",
            "Creating a robots.txt file",
            "Creating a custom 404 page",
            "Creating a custom 500 page"
          ]
        },
        {
          "type": "list",
          "items": [
            "Creating a sign-up form",
            "Stateless, cookie-based session management",
            "Stateful, database-backed session management",
            "Managing authorization"
          ]
        },
        {
          "type": "list",
          "items": ["Vitest", "Jest", "Playwright", "Cypress"]
        },
        {
          "type": "list",
          "items": [
            "Creating a Dockerfile",
            "Creating a static export (SPA)",
            "Configuring caching when self-hosting",
            "Configuring Image Optimization when self-hosting"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing",
      "title": "Building Your Application: Optimizing | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js comes with a variety of built-in optimizations designed to improve your application's speed andCore Web Vitals. This guide will cover the optimizations you can leverage to enhance your user experience."
        },
        {
          "type": "p",
          "text": "Built-in components abstract away the complexity of implementing common UI optimizations. These components are:"
        },
        {
          "type": "list",
          "items": [
            "Images: Built on the native<img>element. The Image Component optimizes images for performance by lazy loading and automatically resizing images based on device size.",
            "Link: Built on the native<a>tags. The Link Component prefetches pages in the background, for faster and smoother page transitions.",
            "Scripts: Built on the native<script>tags. The Script Component gives you control over loading and execution of third-party scripts."
          ]
        },
        {
          "type": "p",
          "text": "Metadata helps search engines understand your content better (which can result in better SEO), and allows you to customize how your content is presented on social media, helping you create a more engaging and consistent user experience across various platforms. The Metadata API in Next.js allows you to modify the<head>element of a page. You can configure metadata in two ways:"
        },
        {
          "type": "list",
          "items": [
            "Config-based Metadata: Export astaticmetadataobjector a dynamicgenerateMetadatafunctionin alayout.jsorpage.jsfile.",
            "File-based Metadata: Add static or dynamically generated special files to route segments."
          ]
        },
        {
          "type": "p",
          "text": "Additionally, you can create dynamic Open Graph Images using JSX and CSS withimageResponseconstructor."
        },
        {
          "type": "p",
          "text": "Next.js/publicfolder can be used to serve static assets like images, fonts, and other files. Files inside/publiccan also be cached by CDN providers so that they are delivered efficiently."
        },
        {
          "type": "p",
          "text": "For large applications, Next.js integrates with popular analytics and monitoring tools to help you understand how your application is performing. Learn more in theOpenTelemetryandInstrumentationguides."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/analytics",
      "title": "Optimizing: Analytics | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js has built-in support for measuring and reporting performance metrics. You can either use theuseReportWebVitalshook to manage reporting yourself, or alternatively, Vercel provides amanaged serviceto automatically collect and visualize metrics for you."
        },
        {
          "type": "code",
          "code": "'use client'import{ useReportWebVitals }from'next/web-vitals'exportfunctionWebVitals() {useReportWebVitals((metric)=>{console.log(metric)})}"
        },
        {
          "type": "code",
          "code": "import{ WebVitals }from'./_components/web-vitals'exportdefaultfunctionLayout({ children }) {return(<html><body><WebVitals/>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "Since theuseReportWebVitalshook requires the\"use client\"directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to theWebVitalscomponent."
        },
        {
          "type": "p",
          "text": "View theAPI Referencefor more information."
        },
        {
          "type": "p",
          "text": "Web Vitalsare a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:"
        },
        {
          "type": "list",
          "items": [
            "Time to First Byte(TTFB)",
            "First Contentful Paint(FCP)",
            "Largest Contentful Paint(LCP)",
            "First Input Delay(FID)",
            "Cumulative Layout Shift(CLS)",
            "Interaction to Next Paint(INP)"
          ]
        },
        {
          "type": "p",
          "text": "You can handle all the results of these metrics using thenameproperty."
        },
        {
          "type": "code",
          "code": "'use client'import{ useReportWebVitals }from'next/web-vitals'exportfunctionWebVitals() {useReportWebVitals((metric)=>{switch(metric.name) {case'FCP': {// handle FCP results}case'LCP': {// handle LCP results}// ...}})}"
        },
        {
          "type": "p",
          "text": "You can send results to any endpoint to measure and track\nreal user performance on your site. For example:"
        },
        {
          "type": "code",
          "code": "useReportWebVitals((metric)=>{constbody=JSON.stringify(metric)consturl='https://example.com/analytics'// Use `navigator.sendBeacon()` if available, falling back to `fetch()`.if(navigator.sendBeacon) {navigator.sendBeacon(url,body)}else{fetch(url,{ body,method:'POST',keepalive:true})}})"
        },
        {
          "type": "p",
          "text": "Good to know: If you useGoogle Analytics, using theidvalue can allow you to construct metric distributions manually (to calculate percentiles,\netc.)"
        },
        {
          "type": "code",
          "code": "useReportWebVitals((metric)=>{// Use `window.gtag` if you initialized Google Analytics as this example:// https://github.com/vercel/next.js/blob/canary/examples/with-google-analyticswindow.gtag('event',metric.name,{value:Math.round(metric.name==='CLS'?metric.value*1000:metric.value),// values must be integersevent_label:metric.id,// id unique to current page loadnon_interaction:true,// avoids affecting bounce rate.})})"
        },
        {
          "type": "p",
          "text": "Read more aboutsending results to Google Analytics."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/fonts",
      "title": "Optimizing: Fonts | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "next/fontwill automatically optimize your fonts (including custom fonts) and remove external network requests for improved privacy and performance."
        },
        {
          "type": "p",
          "text": "🎥 Watch:Learn more about usingnext/font→YouTube (6 minutes)."
        },
        {
          "type": "p",
          "text": "next/fontincludesbuilt-in automatic self-hostingforanyfont file. This means you can optimally load web fonts with zero layout shift, thanks to the underlying CSSsize-adjustproperty used. This new font system also allows you to conveniently use all Google Fonts with performance and privacy in mind. CSS and font files are downloaded at build time and self-hosted with the rest of your static assets.No requests are sent to Google by the browser."
        },
        {
          "type": "p",
          "text": "Automatically self-host any Google Font. Fonts are included in the deployment and served from the same domain as your deployment.No requests are sent to Google by the browser. Get started by importing the font you would like to use fromnext/font/googleas a function. We recommend usingvariable fontsfor the best performance and flexibility."
        },
        {
          "type": "code",
          "code": "import{ Inter }from'next/font/google'// If loading a variable font, you don't need to specify the font weightconstinter=Inter({subsets:['latin'],display:'swap',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={inter.className}><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "If you can't use a variable font, you willneed to specify a weight:"
        },
        {
          "type": "code",
          "code": "import{ Roboto }from'next/font/google'constroboto=Roboto({weight:'400',subsets:['latin'],display:'swap',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={roboto.className}><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "You can specify multiple weights and/or styles by using an array:"
        },
        {
          "type": "code",
          "code": "constroboto=Roboto({weight:['400','700'],style:['normal','italic'],subsets:['latin'],display:'swap',})"
        },
        {
          "type": "p",
          "text": "Good to know: Use an underscore (_) for font names with multiple words. E.g.Roboto Monoshould be imported asRoboto_Mono."
        },
        {
          "type": "p",
          "text": "Google Fonts are automaticallysubset. This reduces the size of the font file and improves performance. You'll need to define which of these subsets you want to preload. Failing to specify any subsets whilepreloadistruewill result in a warning. This can be done by adding it to the function call:"
        },
        {
          "type": "code",
          "code": "constinter=Inter({ subsets:['latin'] })"
        },
        {
          "type": "p",
          "text": "View theFont API Referencefor more information."
        },
        {
          "type": "p",
          "text": "You can import and use multiple fonts in your application. There are two approaches you can take. The first approach is to create a utility function that exports a font, imports it, and applies itsclassNamewhere needed. This ensures the font is preloaded only when it's rendered:"
        },
        {
          "type": "code",
          "code": "import{ Inter,Roboto_Mono }from'next/font/google'exportconstinter=Inter({subsets:['latin'],display:'swap',})exportconstroboto_mono=Roboto_Mono({subsets:['latin'],display:'swap',})"
        },
        {
          "type": "code",
          "code": "import{ inter }from'./fonts'exportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {return(<htmllang=\"en\"className={inter.className}><body><div>{children}</div></body></html>)}"
        },
        {
          "type": "code",
          "code": "import{ roboto_mono }from'./fonts'exportdefaultfunctionPage() {return(<><h1className={roboto_mono.className}>My page</h1></>)}"
        },
        {
          "type": "p",
          "text": "In the example above,Interwill be applied globally, andRoboto Monocan be imported and applied as needed. Alternatively, you can create aCSS variableand use it with your preferred CSS solution:"
        },
        {
          "type": "code",
          "code": "import{ Inter,Roboto_Mono }from'next/font/google'importstylesfrom'./global.css'constinter=Inter({subsets:['latin'],variable:'--font-inter',display:'swap',})constroboto_mono=Roboto_Mono({subsets:['latin'],variable:'--font-roboto-mono',display:'swap',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={`${inter.variable}${roboto_mono.variable}`}><body><h1>My App</h1><div>{children}</div></body></html>)}"
        },
        {
          "type": "code",
          "code": "html{font-family:var(--font-inter);}h1{font-family:var(--font-roboto-mono);}"
        },
        {
          "type": "p",
          "text": "In the example above,Interwill be applied globally, and any<h1>tags will be styled withRoboto Mono."
        },
        {
          "type": "p",
          "text": "Recommendation: Use multiple fonts conservatively since each new font is an additional resource the client has to download."
        },
        {
          "type": "p",
          "text": "Importnext/font/localand specify thesrcof your local font file. We recommend usingvariable fontsfor the best performance and flexibility."
        },
        {
          "type": "code",
          "code": "importlocalFontfrom'next/font/local'// Font files can be colocated inside of `app`constmyFont=localFont({src:'./my-font.woff2',display:'swap',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={myFont.className}><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "If you want to use multiple files for a single font family,srccan be an array:"
        },
        {
          "type": "code",
          "code": "constroboto=localFont({src:[{path:'./Roboto-Regular.woff2',weight:'400',style:'normal',},{path:'./Roboto-Italic.woff2',weight:'400',style:'italic',},{path:'./Roboto-Bold.woff2',weight:'700',style:'normal',},{path:'./Roboto-BoldItalic.woff2',weight:'700',style:'italic',},],})"
        },
        {
          "type": "p",
          "text": "View theFont API Referencefor more information."
        },
        {
          "type": "p",
          "text": "next/fontcan be used withTailwind CSSthrough aCSS variable. In the example below, we use the fontInterfromnext/font/google(you can use any font from Google or Local Fonts). Load your font with thevariableoption to define your CSS variable name and assign it tointer. Then, useinter.variableto add the CSS variable to your HTML document."
        },
        {
          "type": "code",
          "code": "import{ Inter,Roboto_Mono }from'next/font/google'constinter=Inter({subsets:['latin'],display:'swap',variable:'--font-inter',})constroboto_mono=Roboto_Mono({subsets:['latin'],display:'swap',variable:'--font-roboto-mono',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={`${inter.variable}${roboto_mono.variable}`}><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "Finally, add the CSS variable to yourTailwind CSS config:"
        },
        {
          "type": "code",
          "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{js,ts,jsx,tsx}','./components/**/*.{js,ts,jsx,tsx}','./app/**/*.{js,ts,jsx,tsx}',],theme:{extend:{fontFamily:{sans:['var(--font-inter)'],mono:['var(--font-roboto-mono)'],},},},plugins:[],}"
        },
        {
          "type": "p",
          "text": "You can now use thefont-sansandfont-monoutility classes to apply the font to your elements."
        },
        {
          "type": "p",
          "text": "When a font function is called on a page of your site, it is not globally available and preloaded on all routes. Rather, the font is only preloaded on the related routes based on the type of file where it is used:"
        },
        {
          "type": "list",
          "items": [
            "If it's aunique page, it is preloaded on the unique route for that page.",
            "If it's alayout, it is preloaded on all the routes wrapped by the layout.",
            "If it's theroot layout, it is preloaded on all routes."
          ]
        },
        {
          "type": "p",
          "text": "Every time you call thelocalFontor Google font function, that font is hosted as one instance in your application. Therefore, if you load the same font function in multiple files, multiple instances of the same font are hosted. In this situation, it is recommended to do the following:"
        },
        {
          "type": "list",
          "items": [
            "Call the font loader function in one shared file",
            "Export it as a constant",
            "Import the constant in each file where you would like to use this font"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/images",
      "title": "Optimizing: Images | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "list",
          "items": ["Image Component"]
        },
        {
          "type": "p",
          "text": "According toWeb Almanac, images account for a huge portion of the typical website’spage weightand can have a sizable impact on your website'sLCP performance. The Next.js Image component extends the HTML<img>element with features for automatic image optimization:"
        },
        {
          "type": "list",
          "items": [
            "Size Optimization:Automatically serve correctly sized images for each device, using modern image formats like WebP and AVIF.",
            "Visual Stability:Preventlayout shiftautomatically when images are loading.",
            "Faster Page Loads:Images are only loaded when they enter the viewport using native browser lazy loading, with optional blur-up placeholders.",
            "Asset Flexibility:On-demand image resizing, even for images stored on remote servers"
          ]
        },
        {
          "type": "p",
          "text": "🎥 Watch:Learn more about how to usenext/image→YouTube (9 minutes)."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'"
        },
        {
          "type": "p",
          "text": "You can then define thesrcfor your image (either local or remote)."
        },
        {
          "type": "p",
          "text": "To use a local image,importyour.jpg,.png, or.webpimage files. Next.js willautomatically determinethe intrinsicwidthandheightof your image based on the imported file. These values are used to determine the image ratio and preventCumulative Layout Shiftwhile your image is loading."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'importprofilePicfrom'./me.png'exportdefaultfunctionPage() {return(<Imagesrc={profilePic}alt=\"Picture of the author\"// width={500} automatically provided// height={500} automatically provided// blurDataURL=\"data:...\" automatically provided// placeholder=\"blur\" // Optional blur-up while loading/>)}"
        },
        {
          "type": "p",
          "text": "Warning:Dynamicawait import()orrequire()arenotsupported. Theimportmust be static so it can be analyzed at build time."
        },
        {
          "type": "p",
          "text": "You can optionally configurelocalPatternsin yournext.config.jsfile in order to allow specific images and block all others."
        },
        {
          "type": "code",
          "code": "module.exports={images:{localPatterns:[{pathname:'/assets/images/**',search:'',},],},}"
        },
        {
          "type": "p",
          "text": "To use a remote image, thesrcproperty should be a URL string. Since Next.js does not have access to remote files during the build process, you'll need to provide thewidth,heightand optionalblurDataURLprops manually. Thewidthandheightattributes are used to infer the correct aspect ratio of image and avoid layout shift from the image loading in. Thewidthandheightdonotdetermine the rendered size of the image file. Learn more aboutImage Sizing."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<Imagesrc=\"https://s3.amazonaws.com/my-bucket/profile.png\"alt=\"Picture of the author\"width={500}height={500}/>)}"
        },
        {
          "type": "p",
          "text": "To safely allow optimizing images, define a list of supported URL patterns innext.config.js. Be as specific as possible to prevent malicious usage. For example, the following configuration will only allow images from a specific AWS S3 bucket:"
        },
        {
          "type": "code",
          "code": "module.exports={images:{remotePatterns:[{protocol:'https',hostname:'s3.amazonaws.com',port:'',pathname:'/my-bucket/**',},],},}"
        },
        {
          "type": "p",
          "text": "Learn more aboutremotePatternsconfiguration. If you want to use relative URLs for the imagesrc, use aloader."
        },
        {
          "type": "p",
          "text": "Sometimes you may want to optimize a remote image, but still use the built-in Next.js Image Optimization API. To do this, leave theloaderat its default setting and enter an absolute URL for the Imagesrcprop. To protect your application from malicious users, you must define a list of remote hostnames you intend to use with thenext/imagecomponent."
        },
        {
          "type": "p",
          "text": "Learn more aboutremotePatternsconfiguration."
        },
        {
          "type": "p",
          "text": "Note that in theexample earlier, a partial URL (\"/me.png\") is provided for a local image. This is possible because of the loader architecture. A loader is a function that generates the URLs for your image. It modifies the providedsrc, and generates multiple URLs to request the image at different sizes. These multiple URLs are used in the automaticsrcsetgeneration, so that visitors to your site will be served an image that is the right size for their viewport. The default loader for Next.js applications uses the built-in Image Optimization API, which optimizes images from anywhere on the web, and then serves them directly from the Next.js web server. If you would like to serve your images directly from a CDN or image server, you can write your own loader function with a few lines of JavaScript. You can define a loader per-image with theloaderprop, or at the application level with theloaderFileconfiguration."
        },
        {
          "type": "p",
          "text": "You should add thepriorityproperty to the image that will be theLargest Contentful Paint (LCP) elementfor each page. Doing so allows Next.js to specially prioritize the image for loading (e.g. through preload tags or priority hints), leading to a meaningful boost in LCP. The LCP element is typically the largest image or text block visible within the viewport of the page. When you runnext dev, you'll see a console warning if the LCP element is an<Image>without thepriorityproperty. Once you've identified the LCP image, you can add the property like this:"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'importprofilePicfrom'../public/me.png'exportdefaultfunctionPage() {return<Imagesrc={profilePic}alt=\"Picture of the author\"priority/>}"
        },
        {
          "type": "p",
          "text": "See more about priority in thenext/imagecomponent documentation."
        },
        {
          "type": "p",
          "text": "One of the ways that images most commonly hurt performance is throughlayout shift, where the image pushes other elements around on the page as it loads in. This performance problem is so annoying to users that it has its own Core Web Vital, calledCumulative Layout Shift. The way to avoid image-based layout shifts is toalways size your images. This allows the browser to reserve precisely enough space for the image before it loads. Becausenext/imageis designed to guarantee good performance results, it cannot be used in a way that will contribute to layout shift, andmustbe sized in one of three ways:"
        },
        {
          "type": "list",
          "items": [
            "Automatically, using astatic import",
            "Manually, by including awidthandheightproperty used to determine the image's aspect ratio.",
            "Implicitly, by usingfillwhich causes the image to expand to fill its parent element."
          ]
        },
        {
          "type": "p",
          "text": "What if I don't know the size of my images? If you are accessing images from a source without knowledge of the images' sizes, there are several things you can do: Usefill Thefillprop allows your image to be sized by its parent element. Consider using CSS to give the image's parent element space on the page alongsizesprop to match any media query break points. You can also useobject-fitwithfill,contain, orcover, andobject-positionto define how the image should occupy that space. Normalize your images If you're serving images from a source that you control, consider modifying your image pipeline to normalize the images to a specific size. Modify your API calls If your application is retrieving image URLs using an API call (such as to a CMS), you may be able to modify the API call to return the image dimensions along with the URL."
        },
        {
          "type": "p",
          "text": "If none of the suggested methods works for sizing your images, thenext/imagecomponent is designed to work well on a page alongside standard<img>elements."
        },
        {
          "type": "p",
          "text": "Styling the Image component is similar to styling a normal<img>element, but there are a few guidelines to keep in mind:"
        },
        {
          "type": "list",
          "items": [
            "UseclassNameorstyle, notstyled-jsx.In most cases, we recommend using theclassNameprop. This can be an importedCSS Module, aglobal stylesheet, etc.You can also use thestyleprop to assign inline styles.You cannot usestyled-jsxbecause it's scoped to the current component (unless you mark the style asglobal).",
            "In most cases, we recommend using theclassNameprop. This can be an importedCSS Module, aglobal stylesheet, etc.",
            "You can also use thestyleprop to assign inline styles.",
            "You cannot usestyled-jsxbecause it's scoped to the current component (unless you mark the style asglobal).",
            "When usingfill, the parent element must haveposition: relativeThis is necessary for the proper rendering of the image element in that layout mode.",
            "This is necessary for the proper rendering of the image element in that layout mode.",
            "When usingfill, the parent element must havedisplay: blockThis is the default for<div>elements but should be specified otherwise.",
            "This is the default for<div>elements but should be specified otherwise."
          ]
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'importmountainsfrom'../public/mountains.jpg'exportdefaultfunctionResponsive() {return(<divstyle={{ display:'flex',flexDirection:'column'}}><Imagealt=\"Mountains\"// Importing an image will// automatically set the width and heightsrc={mountains}sizes=\"100vw\"// Make the image display full widthstyle={{width:'100%',height:'auto',}}/></div>)}"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'importmountainsfrom'../public/mountains.jpg'exportdefaultfunctionFill() {return(<divstyle={{display:'grid',gridGap:'8px',gridTemplateColumns:'repeat(auto-fit, minmax(400px, auto))',}}><divstyle={{ position:'relative',height:'400px'}}><Imagealt=\"Mountains\"src={mountains}fillsizes=\"(min-width: 808px) 50vw, 100vw\"style={{objectFit:'cover',// cover, contain, none}}/></div>{/* And more images in the grid... */}</div>)}"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'importmountainsfrom'../public/mountains.jpg'exportdefaultfunctionBackground() {return(<Imagealt=\"Mountains\"src={mountains}placeholder=\"blur\"quality={100}fillsizes=\"100vw\"style={{objectFit:'cover',}}/>)}"
        },
        {
          "type": "p",
          "text": "For examples of the Image component used with the various styles, see theImage Component Demo."
        },
        {
          "type": "p",
          "text": "View all properties available to thenext/imagecomponent."
        },
        {
          "type": "p",
          "text": "Thenext/imagecomponent and Next.js Image Optimization API can be configured in thenext.config.jsfile. These configurations allow you toenable remote images,define custom image breakpoints,change caching behaviorand more. Read the full image configuration documentation for more information."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation",
      "title": "Optimizing: Instrumentation | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Instrumentation is the process of using code to integrate monitoring and logging tools into your application. This allows you to track the performance and behavior of your application, and to debug issues in production."
        },
        {
          "type": "p",
          "text": "To set up instrumentation, createinstrumentation.ts|jsfile in theroot directoryof your project (or inside thesrcfolder if using one). Then, export aregisterfunction in the file. This function will be calledoncewhen a new Next.js server instance is initiated. For example, to use Next.js withOpenTelemetryand@vercel/otel:"
        },
        {
          "type": "code",
          "code": "import{ registerOTel }from'@vercel/otel'exportfunctionregister() {registerOTel('next-app')}"
        },
        {
          "type": "p",
          "text": "See theNext.js with OpenTelemetry examplefor a complete implementation."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Theinstrumentationfile should be in the root of your project and not inside theapporpagesdirectory. If you're using thesrcfolder, then place the file insidesrcalongsidepagesandapp.",
            "If you use thepageExtensionsconfig optionto add a suffix, you will also need to update theinstrumentationfilename to match."
          ]
        },
        {
          "type": "p",
          "text": "Sometimes, it may be useful to import a file in your code because of the side effects it will cause. For example, you might import a file that defines a set of global variables, but never explicitly use the imported file in your code. You would still have access to the global variables the package has declared. We recommend importing files using JavaScriptimportsyntax within yourregisterfunction. The following example demonstrates a basic usage ofimportin aregisterfunction:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionregister() {awaitimport('package-with-side-effect')}"
        },
        {
          "type": "p",
          "text": "Good to know: We recommend importing the file from within theregisterfunction, rather than at the top of the file. By doing this, you can colocate all of your side effects in one place in your code, and avoid any unintended consequences from importing globally at the top of the file."
        },
        {
          "type": "p",
          "text": "Next.js callsregisterin all environments, so it's important to conditionally import any code that doesn't support specific runtimes (e.g.Edge or Node.js). You can use theNEXT_RUNTIMEenvironment variable to get the current environment:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionregister() {if(process.env.NEXT_RUNTIME==='nodejs') {awaitimport('./instrumentation-node')}if(process.env.NEXT_RUNTIME==='edge') {awaitimport('./instrumentation-edge')}}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading",
      "title": "Optimizing: Lazy Loading | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Lazy loadingin Next.js helps improve the initial loading performance of an application by decreasing the amount of JavaScript needed to render a route. It allows you to defer loading ofClient Componentsand imported libraries, and only include them in the client bundle when they're needed. For example, you might want to defer loading a modal until a user clicks to open it. There are two ways you can implement lazy loading in Next.js:"
        },
        {
          "type": "list",
          "items": [
            "UsingDynamic Importswithnext/dynamic",
            "UsingReact.lazy()withSuspense"
          ]
        },
        {
          "type": "p",
          "text": "By default, Server Components are automaticallycode split, and you can usestreamingto progressively send pieces of UI from the server to the client. Lazy loading applies to Client Components."
        },
        {
          "type": "p",
          "text": "next/dynamicis a composite ofReact.lazy()andSuspense. It behaves the same way in theappandpagesdirectories to allow for incremental migration."
        },
        {
          "type": "code",
          "code": "'use client'import{ useState }from'react'importdynamicfrom'next/dynamic'// Client Components:constComponentA=dynamic(()=>import('../components/A'))constComponentB=dynamic(()=>import('../components/B'))constComponentC=dynamic(()=>import('../components/C'),{ ssr:false})exportdefaultfunctionClientComponentExample() {const[showMore,setShowMore]=useState(false)return(<div>{/* Load immediately, but in a separate client bundle */}<ComponentA/>{/* Load on demand, only when/if the condition is met */}{showMore&&<ComponentB/>}<buttononClick={()=>setShowMore(!showMore)}>Toggle</button>{/* Load only on the client side */}<ComponentC/></div>)}"
        },
        {
          "type": "p",
          "text": "When usingReact.lazy()and Suspense, Client Components will be pre-rendered (SSR) by default."
        },
        {
          "type": "p",
          "text": "Note:ssr: falseoption will only work for client components, move it into client components ensure the client code-splitting working properly."
        },
        {
          "type": "p",
          "text": "If you want to disable pre-rendering for a Client Component, you can use thessroption set tofalse:"
        },
        {
          "type": "code",
          "code": "constComponentC=dynamic(()=>import('../components/C'),{ ssr:false})"
        },
        {
          "type": "p",
          "text": "If you dynamically import a Server Component, only the Client Components that are children of the Server Component will be lazy-loaded - not the Server Component itself.\nIt will also help preload the static assets such as CSS when you're using it in Server Components."
        },
        {
          "type": "code",
          "code": "importdynamicfrom'next/dynamic'// Server Component:constServerComponent=dynamic(()=>import('../components/ServerComponent'))exportdefaultfunctionServerComponentExample() {return(<div><ServerComponent/></div>)}"
        },
        {
          "type": "p",
          "text": "Note:ssr: falseoption is not supported in Server Components. You will see an error if you try to use it in Server Components.ssr: falseis not allowed withnext/dynamicin Server Components. Please move it into a client component."
        },
        {
          "type": "p",
          "text": "External libraries can be loaded on demand using theimport()function. This example uses the external libraryfuse.jsfor fuzzy search. The module is only loaded on the client after the user types in the search input."
        },
        {
          "type": "code",
          "code": "'use client'import{ useState }from'react'constnames=['Tim','Joe','Bel','Lee']exportdefaultfunctionPage() {const[results,setResults]=useState()return(<div><inputtype=\"text\"placeholder=\"Search\"onChange={async(e)=>{const{value}=e.currentTarget// Dynamically load fuse.jsconstFuse=(awaitimport('fuse.js')).defaultconstfuse=newFuse(names)setResults(fuse.search(value))}}/><pre>Results: {JSON.stringify(results,null,2)}</pre></div>)}"
        },
        {
          "type": "code",
          "code": "importdynamicfrom'next/dynamic'constWithCustomLoading=dynamic(()=>import('../components/WithCustomLoading'),{loading:()=><p>Loading...</p>,})exportdefaultfunctionPage() {return(<div>{/* The loading component will be rendered while  <WithCustomLoading/> is loading */}<WithCustomLoading/></div>)}"
        },
        {
          "type": "p",
          "text": "To dynamically import a named export, you can return it from the Promise returned byimport()function:"
        },
        {
          "type": "code",
          "code": "'use client'exportfunctionHello() {return<p>Hello!</p>}"
        },
        {
          "type": "code",
          "code": "importdynamicfrom'next/dynamic'constClientComponent=dynamic(()=>import('../components/hello').then((mod)=>mod.Hello))"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/memory-usage",
      "title": "Optimizing: Memory Usage | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "As applications grow and become more feature rich, they can demand more resources when developing locally or creating production builds. Let's explore some strategies and techniques to optimize memory and address common memory issues in Next.js."
        },
        {
          "type": "p",
          "text": "Applications with a large amount of dependencies will use more memory. TheBundle Analyzercan help you investigate large dependencies in your application that may be able to be removed to improve performance and memory usage."
        },
        {
          "type": "p",
          "text": "Starting inv15.0.0, you can addexperimental.webpackMemoryOptimizations: trueto yournext.config.jsfile to change behavior in Webpack that reduces max memory usage but may increase compilation times by a slight amount."
        },
        {
          "type": "p",
          "text": "Good to know: This feature is currently experimental to test on more projects first, but it is considered to be low-risk."
        },
        {
          "type": "p",
          "text": "Starting in14.2.0, you can runnext build --experimental-debug-memory-usageto run the build in a mode where Next.js will print out information about memory usage continuously throughout the build, such as heap usage and garbage collection statistics. Heap snapshots will also be taken automatically when memory usage gets close to the configured limit."
        },
        {
          "type": "p",
          "text": "Good to know: This feature is not compatible with the Webpack build worker option which is auto-enabled unless you have custom webpack config."
        },
        {
          "type": "p",
          "text": "To look for memory issues, you can record a heap profile from Node.js and load it in Chrome DevTools to identify potential sources of memory leaks. In your terminal, pass the--heap-profflag to Node.js when starting your Next.js build:"
        },
        {
          "type": "code",
          "code": "node--heap-profnode_modules/next/dist/bin/nextbuild"
        },
        {
          "type": "p",
          "text": "At the end of the build, a.heapprofilefile will be created by Node.js. In Chrome DevTools, you can open the Memory tab and click on the \"Load Profile\" button to visualize the file."
        },
        {
          "type": "p",
          "text": "You can use an inspector tool to analyze the memory usage of the application. When running thenext buildornext devcommand, addNODE_OPTIONS=--inspectto the beginning of the command. This will expose the inspector agent on the default port.\nIf you wish to break before any user code starts, you can pass--inspect-brkinstead. While the process is running, you can use a tool such as Chrome DevTools to connect to the debugging port to record and analyze a snapshot of the heap to see what memory is being retained. Starting in14.2.0, you can also runnext buildwith the--experimental-debug-memory-usageflag to make it easier to take heap snapshots. While running in this mode, you can send aSIGUSR2signal to the process at any point, and the process will take a heap snapshot. The heap snapshot will be saved to the project root of the Next.js application and can be loaded in any heap analyzer, such as Chrome DevTools, to see what memory is retained. This mode is not yet compatible with Webpack build workers. Seehow to record and analyze heap snapshotsfor more information."
        },
        {
          "type": "p",
          "text": "The Webpack build worker allows you to run Webpack compilations inside a separate Node.js worker which will decrease memory usage of your application during builds. This option is enabled by default if your application does not have a custom Webpack configuration starting inv14.1.0. If you are using an older version of Next.js or you have a custom Webpack configuration, you can enable this option by settingexperimental.webpackBuildWorker: trueinside yournext.config.js."
        },
        {
          "type": "p",
          "text": "Good to know: This feature may not be compatible with all custom Webpack plugins."
        },
        {
          "type": "p",
          "text": "TheWebpack cachesaves generated Webpack modules in memory and/or to disk to improve the speed of builds. This can\nhelp with performance, but it will also increase the memory usage of your application to store the cached data. You can disable this behavior by adding acustom Webpack configurationto your application:"
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={webpack:(config,{ buildId,dev,isServer,defaultLoaders,nextRuntime,webpack })=>{if(config.cache&&!dev) {config.cache=Object.freeze({type:'memory',})}// Important: return the modified configreturnconfig},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Typechecking and linting may require a lot of memory, especially in large projects.\nHowever, most projects have a dedicated CI runner that already handles these tasks.\nWhen the build produces out-of-memory issues during the \"Linting and checking validity of types\" step, you can disable these task during builds:"
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={eslint:{// Warning: This allows production builds to successfully complete even if// your project has ESLint errors.ignoreDuringBuilds:true,},typescript:{// !! WARN !!// Dangerously allow production builds to successfully complete even if// your project has type errors.// !! WARN !!ignoreBuildErrors:true,},}exportdefaultnextConfig"
        },
        {
          "type": "list",
          "items": ["Ignoring TypeScript Errors", "ESLint in Next.js config"]
        },
        {
          "type": "p",
          "text": "Keep in mind that this may produce faulty deploys due to type errors or linting issues.\nWe strongly recommend only promoting builds to production after static analysis has completed.\nIf you deploy to Vercel, you can check out theguide for staging deploymentsto learn how to promote builds to production after custom tasks have succeeded."
        },
        {
          "type": "p",
          "text": "Generating source maps consumes extra memory during the build process. You can disable source map generation by addingproductionBrowserSourceMaps: falseandexperimental.serverSourceMaps: falseto your Next.js configuration."
        },
        {
          "type": "p",
          "text": "Good to know: Some plugins may turn on source maps and may require custom configuration to disable."
        },
        {
          "type": "p",
          "text": "Next.jsv14.1.3fixed a memory issue when using the Edge runtime. Please update to this version (or later) to see if it addresses your issue."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/metadata",
      "title": "Optimizing: Metadata | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js has a Metadata API that can be used to define your application metadata (e.g.metaandlinktags inside your HTMLheadelement) for improved SEO and web shareability. There are two ways you can add metadata to your application:"
        },
        {
          "type": "list",
          "items": [
            "Config-based Metadata: Export astaticmetadataobjector a dynamicgenerateMetadatafunctionin alayout.jsorpage.jsfile.",
            "File-based Metadata: Add static or dynamically generated special files to route segments."
          ]
        },
        {
          "type": "p",
          "text": "With both these options, Next.js will automatically generate the relevant<head>elements for your pages. You can also create dynamic OG images using theImageResponseconstructor."
        },
        {
          "type": "p",
          "text": "To define static metadata, export aMetadataobjectfrom alayout.jsor staticpage.jsfile."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'...',description:'...',}exportdefaultfunctionPage() {}"
        },
        {
          "type": "p",
          "text": "For all the available options, see theAPI Reference."
        },
        {
          "type": "p",
          "text": "You can usegenerateMetadatafunction tofetchmetadata that requires dynamic values."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata,ResolvingMetadata }from'next'typeProps={params:Promise<{ id:string}>searchParams:Promise<{ [key:string]:string|string[]|undefined}>}exportasyncfunctiongenerateMetadata({ params,searchParams }:Props,parent:ResolvingMetadata):Promise<Metadata> {// read route paramsconstid=(awaitparams).id// fetch dataconstproduct=awaitfetch(`https://.../${id}`).then((res)=>res.json())// optionally access and extend (rather than replace) parent metadataconstpreviousImages=(awaitparent).openGraph?.images||[]return{title:product.title,openGraph:{images:['/some-specific-page-image.jpg',...previousImages],},}}exportdefaultfunctionPage({ params,searchParams }:Props) {}"
        },
        {
          "type": "p",
          "text": "For all the available params, see theAPI Reference."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Both static and dynamic metadata throughgenerateMetadataareonly supported in Server Components.",
            "fetchrequests are automaticallymemoizedfor the same data acrossgenerateMetadata,generateStaticParams, Layouts, Pages, and Server Components. Reactcachecan be usediffetchis unavailable.",
            "Next.js will wait for data fetching insidegenerateMetadatato complete before streaming UI to the client. This guarantees the first part of astreamed responseincludes<head>tags."
          ]
        },
        {
          "type": "p",
          "text": "These special files are available for metadata:"
        },
        {
          "type": "list",
          "items": [
            "favicon.ico, apple-icon.jpg, and icon.jpg",
            "opengraph-image.jpg and twitter-image.jpg",
            "robots.txt",
            "sitemap.xml"
          ]
        },
        {
          "type": "p",
          "text": "You can use these for static metadata, or you can programmatically generate these files with code. For implementation and examples, see theMetadata FilesAPI Reference andDynamic Image Generation."
        },
        {
          "type": "p",
          "text": "File-based metadata has the higher priority and will override any config-based metadata."
        },
        {
          "type": "p",
          "text": "There are two defaultmetatags that are always added even if a route doesn't define metadata:"
        },
        {
          "type": "list",
          "items": [
            "Themeta charset tagsets the character encoding for the website.",
            "Themeta viewport tagsets the viewport width and scale for the website to adjust for different devices."
          ]
        },
        {
          "type": "code",
          "code": "<metacharset=\"utf-8\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/>"
        },
        {
          "type": "p",
          "text": "Good to know: You can overwrite the defaultviewportmeta tag."
        },
        {
          "type": "p",
          "text": "Metadata is evaluated in order, starting from the root segment down to the segment closest to the finalpage.jssegment. For example:"
        },
        {
          "type": "list",
          "items": [
            "app/layout.tsx(Root Layout)",
            "app/blog/layout.tsx(Nested Blog Layout)",
            "app/blog/[slug]/page.tsx(Blog Page)"
          ]
        },
        {
          "type": "p",
          "text": "Following theevaluation order, Metadata objects exported from multiple segments in the same route areshallowlymerged together to form the final metadata output of a route. Duplicate keys arereplacedbased on their ordering. This means metadata with nested fields such asopenGraphandrobotsthat are defined in an earlier segment areoverwrittenby the last segment to define them."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={title:'Acme',openGraph:{title:'Acme',description:'Acme is a...',},}"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={title:'Blog',openGraph:{title:'Blog',},}// Output:// <title>Blog</title>// <meta property=\"og:title\" content=\"Blog\" />"
        },
        {
          "type": "p",
          "text": "In the example above:"
        },
        {
          "type": "list",
          "items": [
            "titlefromapp/layout.jsisreplacedbytitleinapp/blog/page.js.",
            "AllopenGraphfields fromapp/layout.jsarereplacedinapp/blog/page.jsbecauseapp/blog/page.jssetsopenGraphmetadata. Note the absence ofopenGraph.description."
          ]
        },
        {
          "type": "p",
          "text": "If you'd like to share some nested fields between segments while overwriting others, you can pull them out into a separate variable:"
        },
        {
          "type": "code",
          "code": "exportconstopenGraphImage={ images:['http://...'] }"
        },
        {
          "type": "code",
          "code": "import{ openGraphImage }from'./shared-metadata'exportconstmetadata={openGraph:{...openGraphImage,title:'Home',},}"
        },
        {
          "type": "code",
          "code": "import{ openGraphImage }from'../shared-metadata'exportconstmetadata={openGraph:{...openGraphImage,title:'About',},}"
        },
        {
          "type": "p",
          "text": "In the example above, the OG image is shared betweenapp/layout.jsandapp/about/page.jswhile the titles are different."
        },
        {
          "type": "code",
          "code": "exportconstmetadata={title:'Acme',openGraph:{title:'Acme',description:'Acme is a...',},}"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={title:'About',}// Output:// <title>About</title>// <meta property=\"og:title\" content=\"Acme\" />// <meta property=\"og:description\" content=\"Acme is a...\" />"
        },
        {
          "type": "p",
          "text": "Notes"
        },
        {
          "type": "list",
          "items": [
            "titlefromapp/layout.jsisreplacedbytitleinapp/about/page.js.",
            "AllopenGraphfields fromapp/layout.jsareinheritedinapp/about/page.jsbecauseapp/about/page.jsdoesn't setopenGraphmetadata."
          ]
        },
        {
          "type": "p",
          "text": "TheImageResponseconstructor allows you to generate dynamic images using JSX and CSS. This is useful for creating social media images such as Open Graph images, Twitter cards, and more. To use it, you can importImageResponsefromnext/og:"
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'exportasyncfunctionGET() {returnnewImageResponse((<divstyle={{fontSize:128,background:'white',width:'100%',height:'100%',display:'flex',textAlign:'center',alignItems:'center',justifyContent:'center',}}>Hello world!</div>),{width:1200,height:600,})}"
        },
        {
          "type": "p",
          "text": "ImageResponseintegrates well with other Next.js APIs, includingRoute Handlersand file-based Metadata. For example, you can useImageResponsein aopengraph-image.tsxfile to generate Open Graph images at build time or dynamically at request time. ImageResponsesupports common CSS properties including flexbox and absolute positioning, custom fonts, text wrapping, centering, and nested images.See the full list of supported CSS properties."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Examples are available in theVercel OG Playground.",
            "ImageResponseuses@vercel/og,Satori, and Resvg to convert HTML and CSS into PNG.",
            "Only the Edge Runtime is supported. The default Node.js runtime will not work.",
            "Only flexbox and a subset of CSS properties are supported. Advanced layouts (e.g.display: grid) will not work.",
            "Maximum bundle size of500KB. The bundle size includes your JSX, CSS, fonts, images, and any other assets. If you exceed the limit, consider reducing the size of any assets or fetching at runtime.",
            "Onlyttf,otf, andwofffont formats are supported. To maximize the font parsing speed,ttforotfare preferred overwoff."
          ]
        },
        {
          "type": "p",
          "text": "JSON-LDis a format for structured data that can be used by search engines to understand your content. For example, you can use it to describe a person, an event, an organization, a movie, a book, a recipe, and many other types of entities. Our current recommendation for JSON-LD is to render structured data as a<script>tag in yourlayout.jsorpage.jscomponents. For example:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage({ params }) {constproduct=awaitgetProduct(params.id)constjsonLd={'@context':'https://schema.org','@type':'Product',name:product.name,image:product.image,description:product.description,}return(<section>{/* Add JSON-LD to your page */}<scripttype=\"application/ld+json\"dangerouslySetInnerHTML={{ __html:JSON.stringify(jsonLd) }}/>{/* ... */}</section>)}"
        },
        {
          "type": "p",
          "text": "You can validate and test your structured data with theRich Results Testfor Google or the genericSchema Markup Validator. You can type your JSON-LD with TypeScript using community packages likeschema-dts:"
        },
        {
          "type": "code",
          "code": "import{ Product,WithContext }from'schema-dts'constjsonLd:WithContext<Product>={'@context':'https://schema.org','@type':'Product',name:'Next.js Sticker',image:'https://nextjs.org/imgs/sticker.png',description:'Dynamic at the speed of static.',}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/open-telemetry",
      "title": "Optimizing: OpenTelemetry | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Observability is crucial for understanding and optimizing the behavior and performance of your Next.js app. As applications become more complex, it becomes increasingly difficult to identify and diagnose issues that may arise. By leveraging observability tools, such as logging and metrics, developers can gain insights into their application's behavior and identify areas for optimization. With observability, developers can proactively address issues before they become major problems and provide a better user experience. Therefore, it is highly recommended to use observability in your Next.js applications to improve performance, optimize resources, and enhance user experience. We recommend using OpenTelemetry for instrumenting your apps.\nIt's a platform-agnostic way to instrument apps that allows you to change your observability provider without changing your code.\nReadOfficial OpenTelemetry docsfor more information about OpenTelemetry and how it works. This documentation uses terms likeSpan,TraceorExporterthroughout this doc, all of which can be found inthe OpenTelemetry Observability Primer. Next.js supports OpenTelemetry instrumentation out of the box, which means that we already instrumented Next.js itself.\nWhen you enable OpenTelemetry we will automatically wrap all your code likegetStaticPropsinspanswith helpful attributes."
        },
        {
          "type": "p",
          "text": "OpenTelemetry is extensible but setting it up properly can be quite verbose.\nThat's why we prepared a package@vercel/otelthat helps you get started quickly."
        },
        {
          "type": "p",
          "text": "To get started, install the following packages:"
        },
        {
          "type": "code",
          "code": "npminstall@vercel/otel@opentelemetry/sdk-logs@opentelemetry/api-logs@opentelemetry/instrumentation"
        },
        {
          "type": "p",
          "text": "Next, create a custominstrumentation.ts(or.js) file in theroot directoryof the project (or insidesrcfolder if using one):"
        },
        {
          "type": "code",
          "code": "import{ registerOTel }from'@vercel/otel'exportfunctionregister() {registerOTel({ serviceName:'next-app'})}"
        },
        {
          "type": "p",
          "text": "See the@vercel/oteldocumentationfor additional configuration options."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Theinstrumentationfile should be in the root of your project and not inside theapporpagesdirectory. If you're using thesrcfolder, then place the file insidesrcalongsidepagesandapp.",
            "If you use thepageExtensionsconfig optionto add a suffix, you will also need to update theinstrumentationfilename to match.",
            "We have created a basicwith-opentelemetryexample that you can use."
          ]
        },
        {
          "type": "p",
          "text": "The@vercel/otelpackage provides many configuration options and should serve most of common use cases. But if it doesn't suit your needs, you can configure OpenTelemetry manually. Firstly you need to install OpenTelemetry packages:"
        },
        {
          "type": "code",
          "code": "npminstall@opentelemetry/sdk-node@opentelemetry/resources@opentelemetry/semantic-conventions@opentelemetry/sdk-trace-node@opentelemetry/exporter-trace-otlp-http"
        },
        {
          "type": "p",
          "text": "Now you can initializeNodeSDKin yourinstrumentation.ts.\nUnlike@vercel/otel,NodeSDKis not compatible with edge runtime, so you need to make sure that you are importing them only whenprocess.env.NEXT_RUNTIME === 'nodejs'. We recommend creating a new fileinstrumentation.node.tswhich you conditionally import only when using node:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionregister() {if(process.env.NEXT_RUNTIME==='nodejs') {awaitimport('./instrumentation.node.ts')}}"
        },
        {
          "type": "code",
          "code": "import{ OTLPTraceExporter }from'@opentelemetry/exporter-trace-otlp-http'import{ Resource }from'@opentelemetry/resources'import{ NodeSDK }from'@opentelemetry/sdk-node'import{ SimpleSpanProcessor }from'@opentelemetry/sdk-trace-node'import{ ATTR_SERVICE_NAME }from'@opentelemetry/semantic-conventions'constsdk=newNodeSDK({resource:newResource({[ATTR_SERVICE_NAME]:'next-app',}),spanProcessor:newSimpleSpanProcessor(newOTLPTraceExporter()),})sdk.start()"
        },
        {
          "type": "p",
          "text": "Doing this is equivalent to using@vercel/otel, but it's possible to modify and extend some features that are not exposed by the@vercel/otel. If edge runtime support is necessary, you will have to use@vercel/otel."
        },
        {
          "type": "p",
          "text": "You need an OpenTelemetry collector with a compatible backend to test OpenTelemetry traces locally.\nWe recommend using ourOpenTelemetry dev environment. If everything works well you should be able to see the root server span labeled asGET /requested/pathname.\nAll other spans from that particular trace will be nested under it. Next.js traces more spans than are emitted by default.\nTo see more spans, you must setNEXT_OTEL_VERBOSE=1."
        },
        {
          "type": "p",
          "text": "When you are deploying with OpenTelemetry Collector, you can use@vercel/otel.\nIt will work both on Vercel and when self-hosted."
        },
        {
          "type": "p",
          "text": "We made sure that OpenTelemetry works out of the box on Vercel. FollowVercel documentationto connect your project to an observability provider."
        },
        {
          "type": "p",
          "text": "Deploying to other platforms is also straightforward. You will need to spin up your own OpenTelemetry Collector to receive and process the telemetry data from your Next.js app. To do this, follow theOpenTelemetry Collector Getting Started guide, which will walk you through setting up the collector and configuring it to receive data from your Next.js app. Once you have your collector up and running, you can deploy your Next.js app to your chosen platform following their respective deployment guides."
        },
        {
          "type": "p",
          "text": "OpenTelemetry Collector is not necessary. You can use a custom OpenTelemetry exporter with@vercel/otelormanual OpenTelemetry configuration."
        },
        {
          "type": "p",
          "text": "You can add a custom span withOpenTelemetry APIs."
        },
        {
          "type": "code",
          "code": "npminstall@opentelemetry/api"
        },
        {
          "type": "p",
          "text": "The following example demonstrates a function that fetches GitHub stars and adds a customfetchGithubStarsspan to track the fetch request's result:"
        },
        {
          "type": "code",
          "code": "import{ trace }from'@opentelemetry/api'exportasyncfunctionfetchGithubStars() {returnawaittrace.getTracer('nextjs-example').startActiveSpan('fetchGithubStars',async(span)=>{try{returnawaitgetValue()}finally{span.end()}})}"
        },
        {
          "type": "p",
          "text": "Theregisterfunction will execute before your code runs in a new environment.\nYou can start creating new spans, and they should be correctly added to the exported trace."
        },
        {
          "type": "p",
          "text": "Next.js automatically instruments several spans for you to provide useful insights into your application's performance. Attributes on spans followOpenTelemetry semantic conventions. We also add some custom attributes under thenextnamespace:"
        },
        {
          "type": "list",
          "items": [
            "next.span_name- duplicates span name",
            "next.span_type- each span type has a unique identifier",
            "next.route- The route pattern of the request (e.g.,/[param]/user).",
            "next.rsc(true/false) - Whether the request is an RSC request, such as prefetch.",
            "next.pageThis is an internal value used by an app router.You can think about it as a route to a special file (likepage.ts,layout.ts,loading.tsand others)It can be used as a unique identifier only when paired withnext.routebecause/layoutcan be used to identify both/(groupA)/layout.tsand/(groupB)/layout.ts",
            "This is an internal value used by an app router.",
            "You can think about it as a route to a special file (likepage.ts,layout.ts,loading.tsand others)",
            "It can be used as a unique identifier only when paired withnext.routebecause/layoutcan be used to identify both/(groupA)/layout.tsand/(groupB)/layout.ts"
          ]
        },
        {
          "type": "list",
          "items": ["next.span_type:BaseServer.handleRequest"]
        },
        {
          "type": "p",
          "text": "This span represents the root span for each incoming request to your Next.js application. It tracks the HTTP method, route, target, and status code of the request. Attributes:"
        },
        {
          "type": "list",
          "items": [
            "Common HTTP attributeshttp.methodhttp.status_code",
            "http.method",
            "http.status_code",
            "Server HTTP attributeshttp.routehttp.target",
            "http.route",
            "http.target",
            "next.span_name",
            "next.span_type",
            "next.route"
          ]
        },
        {
          "type": "list",
          "items": ["next.span_type:AppRender.getBodyResult."]
        },
        {
          "type": "p",
          "text": "This span represents the process of rendering a route in the app router. Attributes:"
        },
        {
          "type": "list",
          "items": ["next.span_name", "next.span_type", "next.route"]
        },
        {
          "type": "list",
          "items": ["next.span_type:AppRender.fetch"]
        },
        {
          "type": "p",
          "text": "This span represents the fetch request executed in your code. Attributes:"
        },
        {
          "type": "list",
          "items": [
            "Common HTTP attributeshttp.method",
            "http.method",
            "Client HTTP attributeshttp.urlnet.peer.namenet.peer.port(only if specified)",
            "http.url",
            "net.peer.name",
            "net.peer.port(only if specified)",
            "next.span_name",
            "next.span_type"
          ]
        },
        {
          "type": "p",
          "text": "This span can be turned off by settingNEXT_OTEL_FETCH_DISABLED=1in your environment. This is useful when you want to use a custom fetch instrumentation library."
        },
        {
          "type": "list",
          "items": ["next.span_type:AppRouteRouteHandlers.runHandler."]
        },
        {
          "type": "p",
          "text": "This span represents the execution of an API Route Handler in the app router. Attributes:"
        },
        {
          "type": "list",
          "items": ["next.span_name", "next.span_type", "next.route"]
        },
        {
          "type": "list",
          "items": ["next.span_type:Render.getServerSideProps."]
        },
        {
          "type": "p",
          "text": "This span represents the execution ofgetServerSidePropsfor a specific route. Attributes:"
        },
        {
          "type": "list",
          "items": ["next.span_name", "next.span_type", "next.route"]
        },
        {
          "type": "list",
          "items": ["next.span_type:Render.getStaticProps."]
        },
        {
          "type": "p",
          "text": "This span represents the execution ofgetStaticPropsfor a specific route. Attributes:"
        },
        {
          "type": "list",
          "items": ["next.span_name", "next.span_type", "next.route"]
        },
        {
          "type": "list",
          "items": ["next.span_type:Render.renderDocument."]
        },
        {
          "type": "p",
          "text": "This span represents the process of rendering the document for a specific route. Attributes:"
        },
        {
          "type": "list",
          "items": ["next.span_name", "next.span_type", "next.route"]
        },
        {
          "type": "list",
          "items": ["next.span_type:ResolveMetadata.generateMetadata."]
        },
        {
          "type": "p",
          "text": "This span represents the process of generating metadata for a specific page (a single route can have multiple of these spans). Attributes:"
        },
        {
          "type": "list",
          "items": ["next.span_name", "next.span_type", "next.page"]
        },
        {
          "type": "list",
          "items": ["next.span_type:NextNodeServer.findPageComponents."]
        },
        {
          "type": "p",
          "text": "This span represents the process of resolving page components for a specific page. Attributes:"
        },
        {
          "type": "list",
          "items": ["next.span_name", "next.span_type", "next.route"]
        },
        {
          "type": "list",
          "items": ["next.span_type:NextNodeServer.getLayoutOrPageModule."]
        },
        {
          "type": "p",
          "text": "This span represents loading of code modules for a layout or a page. Attributes:"
        },
        {
          "type": "list",
          "items": ["next.span_name", "next.span_type", "next.segment"]
        },
        {
          "type": "list",
          "items": ["next.span_type:NextNodeServer.startResponse."]
        },
        {
          "type": "p",
          "text": "This zero-length span represents the time when the first byte has been sent in the response."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/package-bundling",
      "title": "Optimizing: Package Bundling | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Bundling external packages can significantly improve the performance of your application.By default, packages imported inside Server Components and Route Handlers are automatically bundled by Next.js. This page will guide you through how to analyze and further optimize package bundling."
        },
        {
          "type": "p",
          "text": "@next/bundle-analyzeris a plugin for Next.js that helps you manage the size of your application bundles. It generates a visual report of the size of each package and their dependencies. You can use the information to remove large dependencies, split, orlazy-loadyour code."
        },
        {
          "type": "p",
          "text": "Install the plugin by running the following command:"
        },
        {
          "type": "code",
          "code": "npmi@next/bundle-analyzer# oryarnadd@next/bundle-analyzer# orpnpmadd@next/bundle-analyzer"
        },
        {
          "type": "p",
          "text": "Then, add the bundle analyzer's settings to yournext.config.js."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={}constwithBundleAnalyzer=require('@next/bundle-analyzer')({enabled:process.env.ANALYZE==='true',})module.exports=withBundleAnalyzer(nextConfig)"
        },
        {
          "type": "p",
          "text": "Run the following command to analyze your bundles:"
        },
        {
          "type": "code",
          "code": "ANALYZE=truenpm run build# orANALYZE=trueyarn build# orANALYZE=truepnpm build"
        },
        {
          "type": "p",
          "text": "The report will open three new tabs in your browser, which you can inspect. Periodically evaluating your application's bundles can help you maintain application performance over time."
        },
        {
          "type": "p",
          "text": "Some packages, such as icon libraries, can export hundreds of modules, which can cause performance issues in development and production. You can optimize how these packages are imported by adding theoptimizePackageImportsoption to yournext.config.js. This option will only load the modules youactuallyuse, while still giving you the convenience of writing import statements with many named exports."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{optimizePackageImports:['icon-library'],},}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Next.js also optimizes some libraries automatically, thus they do not need to be included in the optimizePackageImports list. See thefull list."
        },
        {
          "type": "p",
          "text": "Since packages imported inside Server Components and Route Handlers are automatically bundled by Next.js, you can opt specific packages out of bundling using theserverExternalPackagesoption in yournext.config.js."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={serverExternalPackages:['package-name'],}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Next.js includes a list of popular packages that currently are working on compatibility and automatically opt-ed out. See thefull list."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/scripts",
      "title": "Optimizing: Scripts | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "To load a third-party script for multiple routes, importnext/scriptand include the script directly in your layout component:"
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionDashboardLayout({children,}:{children:React.ReactNode}) {return(<><section>{children}</section><Scriptsrc=\"https://example.com/script.js\"/></>)}"
        },
        {
          "type": "p",
          "text": "The third-party script is fetched when the folder route (e.g.dashboard/page.js) or any nested route (e.g.dashboard/settings/page.js) is accessed by the user. Next.js will ensure the script willonly load once, even if a user navigates between multiple routes in the same layout."
        },
        {
          "type": "p",
          "text": "To load a third-party script for all routes, importnext/scriptand include the script directly in your root layout:"
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body><Scriptsrc=\"https://example.com/script.js\"/></html>)}"
        },
        {
          "type": "p",
          "text": "This script will load and execute whenanyroute in your application is accessed. Next.js will ensure the script willonly load once, even if a user navigates between multiple pages."
        },
        {
          "type": "p",
          "text": "Recommendation: We recommend only including third-party scripts in specific pages or layouts in order to minimize any unnecessary impact to performance."
        },
        {
          "type": "p",
          "text": "Although the default behavior ofnext/scriptallows you to load third-party scripts in any page or layout, you can fine-tune its loading behavior by using thestrategyproperty:"
        },
        {
          "type": "list",
          "items": [
            "beforeInteractive: Load the script before any Next.js code and before any page hydration occurs.",
            "afterInteractive: (default) Load the script early but after some hydration on the page occurs.",
            "lazyOnload: Load the script later during browser idle time.",
            "worker: (experimental) Load the script in a web worker."
          ]
        },
        {
          "type": "p",
          "text": "Refer to thenext/scriptAPI reference documentation to learn more about each strategy and their use cases."
        },
        {
          "type": "p",
          "text": "Warning:Theworkerstrategy is not yet stable and does not yet work with theappdirectory. Use with caution."
        },
        {
          "type": "p",
          "text": "Scripts that use theworkerstrategy are offloaded and executed in a web worker withPartytown. This can improve the performance of your site by dedicating the main thread to the rest of your application code. This strategy is still experimental and can only be used if thenextScriptWorkersflag is enabled innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{nextScriptWorkers:true,},}"
        },
        {
          "type": "p",
          "text": "Then, runnext(normallynpm run devoryarn dev) and Next.js will guide you through the installation of the required packages to finish the setup:"
        },
        {
          "type": "code",
          "code": "npmrundev"
        },
        {
          "type": "p",
          "text": "You'll see instructions like these: Please install Partytown by runningnpm install @builder.io/partytown Once setup is complete, definingstrategy=\"worker\"will automatically instantiate Partytown in your application and offload the script to a web worker."
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionHome() {return(<><Scriptsrc=\"https://example.com/script.js\"strategy=\"worker\"/></>)}"
        },
        {
          "type": "p",
          "text": "There are a number of trade-offs that need to be considered when loading a third-party script in a web worker. Please see Partytown'stradeoffsdocumentation for more information."
        },
        {
          "type": "p",
          "text": "Inline scripts, or scripts not loaded from an external file, are also supported by the Script component. They can be written by placing the JavaScript within curly braces:"
        },
        {
          "type": "code",
          "code": "<Scriptid=\"show-banner\">{`document.getElementById('banner').classList.remove('hidden')`}</Script>"
        },
        {
          "type": "p",
          "text": "Or by using thedangerouslySetInnerHTMLproperty:"
        },
        {
          "type": "code",
          "code": "<Scriptid=\"show-banner\"dangerouslySetInnerHTML={{__html:`document.getElementById('banner').classList.remove('hidden')`,}}/>"
        },
        {
          "type": "p",
          "text": "Warning: Anidproperty must be assigned for inline scripts in order for Next.js to track and optimize the script."
        },
        {
          "type": "p",
          "text": "Event handlers can be used with the Script component to execute additional code after a certain event occurs:"
        },
        {
          "type": "list",
          "items": [
            "onLoad: Execute code after the script has finished loading.",
            "onReady: Execute code after the script has finished loading and every time the component is mounted.",
            "onError: Execute code if the script fails to load."
          ]
        },
        {
          "type": "p",
          "text": "These handlers will only work whennext/scriptis imported and used inside of aClient Componentwhere\"use client\"is defined as the first line of code:"
        },
        {
          "type": "code",
          "code": "'use client'importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"onLoad={()=>{console.log('Script has loaded')}}/></>)}"
        },
        {
          "type": "p",
          "text": "Refer to thenext/scriptAPI reference to learn more about each event handler and view examples."
        },
        {
          "type": "p",
          "text": "There are many DOM attributes that can be assigned to a<script>element that are not used by the Script component, likenonceorcustom data attributes. Including any additional attributes will automatically forward it to the final, optimized<script>element that is included in the HTML."
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionPage() {return(<><Scriptsrc=\"https://example.com/script.js\"id=\"example-script\"nonce=\"XUENAJFW\"data-test=\"script\"/></>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/static-assets",
      "title": "Optimizing: Static Assets | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js can serve static files, like images, under a folder calledpublicin the root directory. Files insidepubliccan then be referenced by your code starting from the base URL (/). For example, the filepublic/avatars/me.pngcan be viewed by visiting the/avatars/me.pngpath. The code to display that image might look like:"
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportfunctionAvatar({ id,alt }) {return<Imagesrc={`/avatars/${id}.png`}alt={alt}width=\"64\"height=\"64\"/>}exportfunctionAvatarOfMe() {return<Avatarid=\"me\"alt=\"A portrait of me\"/>}"
        },
        {
          "type": "p",
          "text": "Next.js cannot safely cache assets in thepublicfolder because they may change. The default caching headers applied are:"
        },
        {
          "type": "code",
          "code": "Cache-Control:public,max-age=0"
        },
        {
          "type": "p",
          "text": "For static metadata files, such asrobots.txt,favicon.ico, etc, you should usespecial metadata filesinside theappfolder."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "The directory must be namedpublic. The name cannot be changed and it's the only directory used to serve static assets.",
            "Only assets that are in thepublicdirectory atbuild timewill be served by Next.js. Files added at request time won't be available. We recommend using a third-party service likeVercel Blobfor persistent file storage."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/third-party-libraries",
      "title": "Optimizing: Third Party Libraries | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "@next/third-partiesis a library that provides a collection of components and utilities that improve the performance and developer experience of loading popular third-party libraries in your Next.js application. All third-party integrations provided by@next/third-partieshave been optimized for performance and ease of use."
        },
        {
          "type": "p",
          "text": "To get started, install the@next/third-partieslibrary:"
        },
        {
          "type": "code",
          "code": "npminstall@next/third-parties@latestnext@latest"
        },
        {
          "type": "p",
          "text": "@next/third-partiesis currently anexperimentallibrary under active development. We recommend installing it with thelatestorcanaryflags while we work on adding more third-party integrations."
        },
        {
          "type": "p",
          "text": "All supported third-party libraries from Google can be imported from@next/third-parties/google."
        },
        {
          "type": "p",
          "text": "TheGoogleTagManagercomponent can be used to instantiate aGoogle Tag Managercontainer to your page. By default, it fetches the original inline script after hydration occurs on the page. To load Google Tag Manager for all routes, include the component directly in your root layout and pass in your GTM container ID:"
        },
        {
          "type": "code",
          "code": "import{ GoogleTagManager }from'@next/third-parties/google'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><GoogleTagManagergtmId=\"GTM-XYZ\"/><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "To load Google Tag Manager for a single route, include the component in your page file:"
        },
        {
          "type": "code",
          "code": "import{ GoogleTagManager }from'@next/third-parties/google'exportdefaultfunctionPage() {return<GoogleTagManagergtmId=\"GTM-XYZ\"/>}"
        },
        {
          "type": "p",
          "text": "ThesendGTMEventfunction can be used to track user interactions on your page by sending events\nusing thedataLayerobject. For this function to work, the<GoogleTagManager />component must be\nincluded in either a parent layout, page, or component, or directly in the same file."
        },
        {
          "type": "code",
          "code": "'use client'import{ sendGTMEvent }from'@next/third-parties/google'exportfunctionEventButton() {return(<div><buttononClick={()=>sendGTMEvent({ event:'buttonClicked',value:'xyz'})}>Send Event</button></div>)}"
        },
        {
          "type": "p",
          "text": "Refer to the Tag Managerdeveloper\ndocumentationto learn about the\ndifferent variables and events that can be passed into the function."
        },
        {
          "type": "p",
          "text": "If you're using a server-side tag manager and servinggtm.jsscripts from your tagging server you can\nusegtmScriptUrloption to specify the URL of the script."
        },
        {
          "type": "p",
          "text": "Options to pass to the Google Tag Manager. For a full list of options, read theGoogle Tag Manager\ndocs."
        },
        {
          "type": "p",
          "text": "TheGoogleAnalyticscomponent can be used to includeGoogle Analytics\n4to your page via the Google tag\n(gtag.js). By default, it fetches the original scripts after hydration occurs on the page."
        },
        {
          "type": "p",
          "text": "Recommendation: If Google Tag Manager is already included in your application, you can\nconfigure Google Analytics directly using it, rather than including Google Analytics as a separate\ncomponent. Refer to thedocumentationto learn more about the differences between Tag Manager andgtag.js."
        },
        {
          "type": "p",
          "text": "To load Google Analytics for all routes, include the component directly in your root layout and pass\nin your measurement ID:"
        },
        {
          "type": "code",
          "code": "import{ GoogleAnalytics }from'@next/third-parties/google'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body><GoogleAnalyticsgaId=\"G-XYZ\"/></html>)}"
        },
        {
          "type": "p",
          "text": "To load Google Analytics for a single route, include the component in your page file:"
        },
        {
          "type": "code",
          "code": "import{ GoogleAnalytics }from'@next/third-parties/google'exportdefaultfunctionPage() {return<GoogleAnalyticsgaId=\"G-XYZ\"/>}"
        },
        {
          "type": "p",
          "text": "ThesendGAEventfunction can be used to measure user interactions on your page by sending events\nusing thedataLayerobject. For this function to work, the<GoogleAnalytics />component must be\nincluded in either a parent layout, page, or component, or directly in the same file."
        },
        {
          "type": "code",
          "code": "'use client'import{ sendGAEvent }from'@next/third-parties/google'exportfunctionEventButton() {return(<div><buttononClick={()=>sendGAEvent('event','buttonClicked',{ value:'xyz'})}>Send Event</button></div>)}"
        },
        {
          "type": "p",
          "text": "Refer to the Google Analyticsdeveloper\ndocumentationto learn\nmore about event parameters."
        },
        {
          "type": "p",
          "text": "Google Analytics automatically tracks pageviews when the browser history state changes. This means\nthat client-side navigations between Next.js routes will send pageview data without any configuration. To ensure that client-side navigations are being measured correctly, verify that the“Enhanced\nMeasurement”property is\nenabled in your Admin panel and the“Page changes based on browser history events”checkbox is\nselected."
        },
        {
          "type": "p",
          "text": "Note: If you decide to manually send pageview events, make sure to disable the default\npageview measurement to avoid having duplicate data. Refer to the Google Analyticsdeveloper\ndocumentationto learn more."
        },
        {
          "type": "p",
          "text": "Options to pass to the<GoogleAnalytics>component."
        },
        {
          "type": "p",
          "text": "TheGoogleMapsEmbedcomponent can be used to add aGoogle Maps\nEmbedto your page. By\ndefault, it uses theloadingattribute to lazy-load the embed below the fold."
        },
        {
          "type": "code",
          "code": "import{ GoogleMapsEmbed }from'@next/third-parties/google'exportdefaultfunctionPage() {return(<GoogleMapsEmbedapiKey=\"XYZ\"height={200}width=\"100%\"mode=\"place\"q=\"Brooklyn+Bridge,New+York,NY\"/>)}"
        },
        {
          "type": "p",
          "text": "Options to pass to the Google Maps Embed. For a full list of options, read theGoogle Map Embed\ndocs."
        },
        {
          "type": "p",
          "text": "TheYouTubeEmbedcomponent can be used to load and display a YouTube embed. This component loads\nfaster by usinglite-youtube-embedunder the\nhood."
        },
        {
          "type": "code",
          "code": "import{ YouTubeEmbed }from'@next/third-parties/google'exportdefaultfunctionPage() {return<YouTubeEmbedvideoid=\"ogfYd705cRs\"height={400}params=\"controls=0\"/>}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing/videos",
      "title": "Optimizing: Videos | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This page outlines how to use videos with Next.js applications, showing how to store and display video files without affecting performance."
        },
        {
          "type": "p",
          "text": "Videos can be embedded on the page using the HTML<video>tag for direct video files and<iframe>for external platform-hosted videos."
        },
        {
          "type": "p",
          "text": "The HTML<video>tag can embed self-hosted or directly served video content, allowing full control over the playback and appearance."
        },
        {
          "type": "code",
          "code": "exportfunctionVideo() {return(<videowidth=\"320\"height=\"240\"controlspreload=\"none\"><sourcesrc=\"/path/to/video.mp4\"type=\"video/mp4\"/><tracksrc=\"/path/to/captions.vtt\"kind=\"subtitles\"srcLang=\"en\"label=\"English\"/>Your browser does not support the video tag.</video>)}"
        },
        {
          "type": "p",
          "text": "Good to know: When using theautoPlayattribute, it is important to also include themutedattribute to ensure the video plays automatically in most browsers and theplaysInlineattribute for compatibility with iOS devices."
        },
        {
          "type": "p",
          "text": "For a comprehensive list of video attributes, refer to theMDN documentation."
        },
        {
          "type": "list",
          "items": [
            "Fallback Content:When using the<video>tag, include fallback content inside the tag for browsers that do not support video playback.",
            "Subtitles or Captions:Include subtitles or captions for users who are deaf or hard of hearing. Utilize the<track>tag with your<video>elements to specify caption file sources.",
            "Accessible Controls:Standard HTML5 video controls are recommended for keyboard navigation and screen reader compatibility. For advanced needs, consider third-party players likereact-playerorvideo.js, which offer accessible controls and consistent browser experience."
          ]
        },
        {
          "type": "p",
          "text": "The HTML<iframe>tag allows you to embed videos from external platforms like YouTube or Vimeo."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {return(<iframesrc=\"https://www.youtube.com/embed/19g66ezsKAg\"allowFullScreen/>)}"
        },
        {
          "type": "p",
          "text": "For a comprehensive list of iframe attributes, refer to theMDN documentation."
        },
        {
          "type": "p",
          "text": "There are two ways you can embed videos in your Next.js application:"
        },
        {
          "type": "list",
          "items": [
            "Self-hosted or direct video files:Embed self-hosted videos using the<video>tag for scenarios requiring detailed control over the player's functionality and appearance. This integration method within Next.js allows for customization and control of your video content.",
            "Using video hosting services (YouTube, Vimeo, etc.):For video hosting services like YouTube or Vimeo, you'll embed their iframe-based players using the<iframe>tag. While this method limits some control over the player, it offers ease of use and features provided by these platforms."
          ]
        },
        {
          "type": "p",
          "text": "Choose the embedding method that aligns with your application's requirements and the user experience you aim to deliver."
        },
        {
          "type": "p",
          "text": "To embed videos from external platforms, you can use Next.js to fetch the video information and React Suspense to handle the fallback state while loading. 1. Create a Server Component for video embedding The first step is to create aServer Componentthat generates the appropriate iframe for embedding the video. This component will fetch the source URL for the video and render the iframe."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionVideoComponent() {constsrc=awaitgetVideoSrc()return<iframesrc={src}allowFullScreen/>}"
        },
        {
          "type": "p",
          "text": "2. Stream the video component using React Suspense After creating the Server Component to embed the video, the next step is tostreamthe component usingReact Suspense."
        },
        {
          "type": "code",
          "code": "import{ Suspense }from'react'importVideoComponentfrom'../ui/VideoComponent.jsx'exportdefaultfunctionPage() {return(<section><Suspensefallback={<p>Loading video...</p>}><VideoComponent/></Suspense>{/* Other content of the page */}</section>)}"
        },
        {
          "type": "p",
          "text": "Good to know: When embedding videos from external platforms, consider the following best practices:"
        },
        {
          "type": "list",
          "items": [
            "Ensure the video embeds are responsive. Use CSS to make the iframe or video player adapt to different screen sizes.",
            "Implementstrategies for loading videosbased on network conditions, especially for users with limited data plans."
          ]
        },
        {
          "type": "p",
          "text": "This approach results in a better user experience as it prevents the page from blocking, meaning the user can interact with the page while the video component streams in. For a more engaging and informative loading experience, consider using a loading skeleton as the fallback UI. So instead of showing a simple loading message, you can show a skeleton that resembles the video player like this:"
        },
        {
          "type": "code",
          "code": "import{ Suspense }from'react'importVideoComponentfrom'../ui/VideoComponent.jsx'importVideoSkeletonfrom'../ui/VideoSkeleton.jsx'exportdefaultfunctionPage() {return(<section><Suspensefallback={<VideoSkeleton/>}><VideoComponent/></Suspense>{/* Other content of the page */}</section>)}"
        },
        {
          "type": "p",
          "text": "Self-hosting videos may be preferable for several reasons:"
        },
        {
          "type": "list",
          "items": [
            "Complete control and independence: Self-hosting gives you direct management over your video content, from playback to appearance, ensuring full ownership and control, free from external platform constraints.",
            "Customization for specific needs: Ideal for unique requirements, like dynamic background videos, it allows for tailored customization to align with design and functional needs.",
            "Performance and scalability considerations: Choose storage solutions that are both high-performing and scalable, to support increasing traffic and content size effectively.",
            "Cost and integration: Balance the costs of storage and bandwidth with the need for easy integration into your Next.js framework and broader tech ecosystem."
          ]
        },
        {
          "type": "p",
          "text": "Vercel Bloboffers an efficient way to host videos, providing a scalable cloud storage solution that works well with Next.js. Here's how you can host a video using Vercel Blob: 1. Uploading a video to Vercel Blob In your Vercel dashboard, navigate to the \"Storage\" tab and select yourVercel Blobstore. In the Blob table's upper-right corner, find and click the \"Upload\" button. Then, choose the video file you wish to upload. After the upload completes, the video file will appear in the Blob table. Alternatively, you can upload your video using a server action. For detailed instructions, refer to the Vercel documentation onserver-side uploads. Vercel also supportsclient-side uploads. This method may be preferable for certain use cases. 2. Displaying the video in Next.js Once the video is uploaded and stored, you can display it in your Next.js application. Here's an example of how to do this using the<video>tag and React Suspense:"
        },
        {
          "type": "code",
          "code": "import{ Suspense }from'react'import{ list }from'@vercel/blob'exportdefaultfunctionPage() {return(<Suspensefallback={<p>Loading video...</p>}><VideoComponentfileName=\"my-video.mp4\"/></Suspense>)}asyncfunctionVideoComponent({ fileName }) {const{blobs}=awaitlist({prefix:fileName,limit:1,})const{url}=blobs[0]return(<videocontrolspreload=\"none\"aria-label=\"Video player\"><sourcesrc={url}type=\"video/mp4\"/>Your browser does not support the video tag.</video>)}"
        },
        {
          "type": "p",
          "text": "In this approach, the page uses the video's@vercel/blobURL to display the video using theVideoComponent. React Suspense is used to show a fallback until the video URL is fetched and the video is ready to be displayed."
        },
        {
          "type": "p",
          "text": "If you have subtitles for your video, you can easily add them using the<track>element inside your<video>tag. You can fetch the subtitle file fromVercel Blobin a similar way as the video file. Here's how you can update the<VideoComponent>to include subtitles."
        },
        {
          "type": "code",
          "code": "asyncfunctionVideoComponent({ fileName }) {const{blobs}=awaitlist({prefix:fileName,limit:2,})const{url}=blobs[0]const{ url:captionsUrl}=blobs[1]return(<videocontrolspreload=\"none\"aria-label=\"Video player\"><sourcesrc={url}type=\"video/mp4\"/><tracksrc={captionsUrl}kind=\"subtitles\"srcLang=\"en\"label=\"English\"/>Your browser does not support the video tag.</video>)}"
        },
        {
          "type": "p",
          "text": "By following this approach, you can effectively self-host and integrate videos into your Next.js applications."
        },
        {
          "type": "p",
          "text": "To continue learning more about video optimization and best practices, please refer to the following resources:"
        },
        {
          "type": "list",
          "items": [
            "Understanding video formats and codecs: Choose the right format and codec, like MP4 for compatibility or WebM for web optimization, for your video needs. For more details, seeMozilla's guide on video codecs.",
            "Video compression: Use tools like FFmpeg to effectively compress videos, balancing quality with file size. Learn about compression techniques atFFmpeg's official website.",
            "Resolution and bitrate adjustment: Adjustresolution and bitratebased on the viewing platform, with lower settings for mobile devices.",
            "Content Delivery Networks (CDNs): Utilize a CDN to enhance video delivery speed and manage high traffic. When using some storage solutions, such as Vercel Blob, CDN functionality is automatically handled for you.Learn moreabout CDNs and their benefits."
          ]
        },
        {
          "type": "p",
          "text": "Explore these video streaming platforms for integrating video into your Next.js projects:"
        },
        {
          "type": "list",
          "items": [
            "Provides a<Video>component for Next.js, compatible with various hosting services includingVercel Blob, S3, Backblaze, and Mux.",
            "Detailed documentationfor usingnext-video.devwith different hosting services."
          ]
        },
        {
          "type": "list",
          "items": [
            "Officialdocumentation and integration guidefor using Cloudinary with Next.js.",
            "Includes a<CldVideoPlayer>component fordrop-in video support.",
            "Findexamplesof integrating Cloudinary with Next.js includingAdaptive Bitrate Streaming.",
            "OtherCloudinary librariesincluding a Node.js SDK are also available."
          ]
        },
        {
          "type": "list",
          "items": [
            "Mux provides astarter templatefor creating a video course with Mux and Next.js.",
            "Learn about Mux's recommendations for embeddinghigh-performance video for your Next.js application.",
            "Explore anexample projectdemonstrating Mux with Next.js."
          ]
        },
        {
          "type": "list",
          "items": [
            "Learn more about integrating Fastly's solutions forvideo on demandand streaming media into Next.js."
          ]
        },
        {
          "type": "list",
          "items": [
            "Check out theofficial quick start guidefor integrating ImageKit with Next.js.",
            "The integration provides an<IKVideo>component, offeringseamless video support.",
            "You can also explore otherImageKit libraries, such as the Node.js SDK, which is also available."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/rendering",
      "title": "Building Your Application: Rendering | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Rendering converts the code you write into user interfaces. React and Next.js allow you to create hybrid web applications where parts of your code can be rendered on the server or the client. This section will help you understand the differences between these rendering environments, strategies, and runtimes."
        },
        {
          "type": "p",
          "text": "To start, it's helpful to be familiar with three foundational web concepts:"
        },
        {
          "type": "list",
          "items": [
            "TheEnvironmentsyour application code can be executed in: the server and the client.",
            "TheRequest-Response Lifecyclethat's initiated when a user visits or interacts with your application.",
            "TheNetwork Boundarythat separates server and client code."
          ]
        },
        {
          "type": "p",
          "text": "There are two environments where web applications can be rendered: the client and the server."
        },
        {
          "type": "list",
          "items": [
            "Theclientrefers to the browser on a user's device that sends a request to a server for your application code. It then turns the response from the server into a user interface.",
            "Theserverrefers to the computer in a data center that stores your application code, receives requests from a client, and sends back an appropriate response."
          ]
        },
        {
          "type": "p",
          "text": "Historically, developers had to use different languages (e.g. JavaScript, PHP) and frameworks when writing code for the server and the client. With React, developers can use thesame language(JavaScript), and thesame framework(e.g. Next.js or your framework of choice). This flexibility allows you to seamlessly write code for both environments without context switching. However, each environment has its own set of capabilities and constraints. Therefore, the code you write for the server and the client is not always the same. There are certain operations (e.g. data fetching or managing user state) that are better suited for one environment over the other. Understanding these differences is key to effectively using React and Next.js. We'll cover the differences and use cases in more detail on theServerandClientComponents pages, for now, let's continue building on our foundation."
        },
        {
          "type": "p",
          "text": "Broadly speaking, all websites follow the sameRequest-Response Lifecycle:"
        },
        {
          "type": "list",
          "items": [
            "User Action:The user interacts with a web application. This could be clicking a link, submitting a form, or typing a URL directly into the browser's address bar.",
            "HTTP Request:The client sends anHTTPrequest to the server that contains necessary information about what resources are being requested, what method is being used (e.g.GET,POST), and additional data if necessary.",
            "Server:The server processes the request and responds with the appropriate resources. This process may take a couple of steps like routing, fetching data, etc.",
            "HTTP Response:After processing the request, the server sends an HTTP response back to the client. This response contains a status code (which tells the client whether the request was successful or not) and requested resources (e.g. HTML, CSS, JavaScript, static assets, etc).",
            "Client:The client parses the resources to render the user interface.",
            "User Action:Once the user interface is rendered, the user can interact with it, and the whole process starts again."
          ]
        },
        {
          "type": "p",
          "text": "A major part of building a hybrid web application is deciding how to split the work in the lifecycle, and where to place the Network Boundary."
        },
        {
          "type": "p",
          "text": "In web development, theNetwork Boundaryis a conceptual line that separates the different environments. For example, the client and the server, or the server and the data store. In React, you choose where to place the client-server network boundary wherever it makes the most sense. Behind the scenes, the work is split into two parts: theclient module graphand theserver module graph. The server module graph contains all the components that are rendered on the server, and the client module graph contains all components that are rendered on the client. It may be helpful to think about module graphs as a visual representation of how files in your application depend on each other. You can use the React\"use client\"convention to define the boundary. There's also a\"use server\"convention, which tells React to do some computational work on the server."
        },
        {
          "type": "p",
          "text": "When working in these environments, it's helpful to think of the flow of the code in your application asunidirectional. In other words, during a response, your application code flows in one direction: from the server to the client. If you need to access the server from the client, you send anewrequest to the server rather than re-use the same request. This makes it easier to understand where to render your components and where to place the Network Boundary. In practice, this model encourages developers to think about what they want to execute on the server first, before sending the result to the client and making the application interactive. This concept will become clearer when we look at how you caninterleave client and server componentsin the same component tree."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/rendering/client-components",
      "title": "Rendering: Client Components | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Client Components allow you to write interactive UI that isprerendered on the serverand can use client JavaScript to run in the browser. This page will go through how Client Components work, how they're rendered, and when you might use them."
        },
        {
          "type": "p",
          "text": "There are a couple of benefits to doing the rendering work on the client, including:"
        },
        {
          "type": "list",
          "items": [
            "Interactivity: Client Components can use state, effects, and event listeners, meaning they can provide immediate feedback to the user and update the UI.",
            "Browser APIs: Client Components have access to browser APIs, likegeolocationorlocalStorage."
          ]
        },
        {
          "type": "p",
          "text": "To use Client Components, you can add the React\"use client\"directiveat the top of a file, above your imports. \"use client\"is used to declare aboundarybetween a Server and Client Component modules. This means that by defining a\"use client\"in a file, all other modules imported into it, including child components, are considered part of the client bundle."
        },
        {
          "type": "code",
          "code": "'use client'import{ useState }from'react'exportdefaultfunctionCounter() {const[count,setCount]=useState(0)return(<div><p>You clicked {count} times</p><buttononClick={()=>setCount(count+1)}>Click me</button></div>)}"
        },
        {
          "type": "p",
          "text": "The diagram below shows that usingonClickanduseStatein a nested component (toggle.js) will cause an error if the\"use client\"directive is not defined. This is because, by default, all components in the App Router are Server Components where these APIs are not available. By defining the\"use client\"directive intoggle.js, you can tell React to enter the client boundary where these APIs are available."
        },
        {
          "type": "p",
          "text": "Defining multipleuse cliententry points: You can define multiple \"use client\" entry points in your React Component tree. This allows you to split your application into multiple client bundles. However,\"use client\"doesn't need to be defined in every component that needs to be rendered on the client. Once you define the boundary, all child components and modules imported into it are considered part of the client bundle."
        },
        {
          "type": "p",
          "text": "In Next.js, Client Components are rendered differently depending on whether the request is part of a full page load (an initial visit to your application or a page reload triggered by a browser refresh) or a subsequent navigation."
        },
        {
          "type": "p",
          "text": "To optimize the initial page load, Next.js will use React's APIs to render a static HTML preview on the server for both Client and Server Components. This means, when the user first visits your application, they will see the content of the page immediately, without having to wait for the client to download, parse, and execute the Client Component JavaScript bundle. On the server:"
        },
        {
          "type": "list",
          "items": [
            "React renders Server Components into a special data format called theReact Server Component Payload (RSC Payload), which includes references to Client Components.",
            "Next.js uses the RSC Payload and Client Component JavaScript instructions to renderHTMLfor the route on the server."
          ]
        },
        {
          "type": "p",
          "text": "Then, on the client:"
        },
        {
          "type": "list",
          "items": [
            "The HTML is used to immediately show a fast non-interactive initial preview of the route.",
            "The React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.",
            "The JavaScript instructions are used tohydrateClient Components and make their UI interactive."
          ]
        },
        {
          "type": "p",
          "text": "What is hydration? Hydration is the process of attaching event listeners to the DOM, to make the static HTML interactive. Behind the scenes, hydration is done with thehydrateRootReact API."
        },
        {
          "type": "p",
          "text": "On subsequent navigations, Client Components are rendered entirely on the client, without the server-rendered HTML. This means the Client Component JavaScript bundle is downloaded and parsed. Once the bundle is ready, React will use theRSC Payloadto reconcile the Client and Server Component trees, and update the DOM."
        },
        {
          "type": "p",
          "text": "Sometimes, after you've declared the\"use client\"boundary, you may want to go back to the server environment. For example, you may want to reduce the client bundle size, fetch data on the server, or use an API that is only available on the server. You can keep code on the server even though it's theoretically nested inside Client Components by interleaving Client and Server Components andServer Actions. See theComposition Patternspage for more information."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns",
      "title": "Rendering: Composition Patterns | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "When building React applications, you will need to consider what parts of your application should be rendered on the server or the client. This page covers some recommended composition patterns when using Server and Client Components."
        },
        {
          "type": "p",
          "text": "Here's a quick summary of the different use cases for Server and Client Components:"
        },
        {
          "type": "p",
          "text": "Before opting into client-side rendering, you may wish to do some work on the server like fetching data, or accessing your database or backend services. Here are some common patterns when working with Server Components:"
        },
        {
          "type": "p",
          "text": "When fetching data on the server, there may be cases where you need to share data across different components. For example, you may have a layout and a page that depend on the same data. Instead of usingReact Context(which is not available on the server) or passing data as props, you can usefetchor React'scachefunction to fetch the same data in the components that need it, without worrying about making duplicate requests for the same data. This is because React extendsfetchto automatically memoize data requests, and thecachefunction can be used whenfetchis not available. View an exampleof this pattern."
        },
        {
          "type": "p",
          "text": "Since JavaScript modules can be shared between both Server and Client Components modules, it's possible for code that was only ever intended to be run on the server to sneak its way into the client. For example, take the following data-fetching function:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongetData() {constres=awaitfetch('https://external-service.com/data',{headers:{authorization:process.env.API_KEY,},})returnres.json()}"
        },
        {
          "type": "p",
          "text": "At first glance, it appears thatgetDataworks on both the server and the client. However, this function contains anAPI_KEY, written with the intention that it would only ever be executed on the server. Since the environment variableAPI_KEYis not prefixed withNEXT_PUBLIC, it's a private variable that can only be accessed on the server. To prevent your environment variables from being leaked to the client, Next.js replaces private environment variables with an empty string. As a result, even thoughgetData()can be imported and executed on the client, it won't work as expected. And while making the variable public would make the function work on the client, you may not want to expose sensitive information to the client. To prevent this sort of unintended client usage of server code, we can use theserver-onlypackage to give other developers a build-time error if they ever accidentally import one of these modules into a Client Component. To useserver-only, first install the package:"
        },
        {
          "type": "code",
          "code": "npminstallserver-only"
        },
        {
          "type": "p",
          "text": "Then import the package into any module that contains server-only code:"
        },
        {
          "type": "code",
          "code": "import'server-only'exportasyncfunctiongetData() {constres=awaitfetch('https://external-service.com/data',{headers:{authorization:process.env.API_KEY,},})returnres.json()}"
        },
        {
          "type": "p",
          "text": "Now, any Client Component that importsgetData()will receive a build-time error explaining that this module can only be used on the server. The corresponding packageclient-onlycan be used to mark modules that contain client-only code – for example, code that accesses thewindowobject."
        },
        {
          "type": "p",
          "text": "Since Server Components are a new React feature, third-party packages and providers in the ecosystem are just beginning to add the\"use client\"directive to components that use client-only features likeuseState,useEffect, andcreateContext. Today, many components fromnpmpackages that use client-only features do not yet have the directive. These third-party components will work as expected within Client Components since they have the\"use client\"directive, but they won't work within Server Components. For example, let's say you've installed the hypotheticalacme-carouselpackage which has a<Carousel />component. This component usesuseState, but it doesn't yet have the\"use client\"directive. If you use<Carousel />within a Client Component, it will work as expected:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useState }from'react'import{ Carousel }from'acme-carousel'exportdefaultfunctionGallery() {const[isOpen,setIsOpen]=useState(false)return(<div><buttononClick={()=>setIsOpen(true)}>View pictures</button>{/* Works, since Carousel is used within a Client Component */}{isOpen&&<Carousel/>}</div>)}"
        },
        {
          "type": "p",
          "text": "However, if you try to use it directly within a Server Component, you'll see an error:"
        },
        {
          "type": "code",
          "code": "import{ Carousel }from'acme-carousel'exportdefaultfunctionPage() {return(<div><p>View pictures</p>{/* Error: `useState` can not be used within Server Components */}<Carousel/></div>)}"
        },
        {
          "type": "p",
          "text": "This is because Next.js doesn't know<Carousel />is using client-only features. To fix this, you can wrap third-party components that rely on client-only features in your own Client Components:"
        },
        {
          "type": "code",
          "code": "'use client'import{ Carousel }from'acme-carousel'exportdefaultCarousel"
        },
        {
          "type": "p",
          "text": "Now, you can use<Carousel />directly within a Server Component:"
        },
        {
          "type": "code",
          "code": "importCarouselfrom'./carousel'exportdefaultfunctionPage() {return(<div><p>View pictures</p>{/*  Works, since Carousel is a Client Component */}<Carousel/></div>)}"
        },
        {
          "type": "p",
          "text": "We don't expect you to need to wrap most third-party components since it's likely you'll be using them within Client Components. However, one exception is providers, since they rely on React state and context, and are typically needed at the root of an application.Learn more about third-party context providers below."
        },
        {
          "type": "p",
          "text": "Context providers are typically rendered near the root of an application to share global concerns, like the current theme. SinceReact contextis not supported in Server Components, trying to create a context at the root of your application will cause an error:"
        },
        {
          "type": "code",
          "code": "import{ createContext }from'react'//  createContext is not supported in Server ComponentsexportconstThemeContext=createContext({})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body><ThemeContext.Providervalue=\"dark\">{children}</ThemeContext.Provider></body></html>)}"
        },
        {
          "type": "p",
          "text": "To fix this, create your context and render its provider inside of a Client Component:"
        },
        {
          "type": "code",
          "code": "'use client'import{ createContext }from'react'exportconstThemeContext=createContext({})exportdefaultfunctionThemeProvider({children,}:{children:React.ReactNode}) {return<ThemeContext.Providervalue=\"dark\">{children}</ThemeContext.Provider>}"
        },
        {
          "type": "p",
          "text": "Your Server Component will now be able to directly render your provider since it's been marked as a Client Component:"
        },
        {
          "type": "code",
          "code": "importThemeProviderfrom'./theme-provider'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body><ThemeProvider>{children}</ThemeProvider></body></html>)}"
        },
        {
          "type": "p",
          "text": "With the provider rendered at the root, all other Client Components throughout your app will be able to consume this context."
        },
        {
          "type": "p",
          "text": "Good to know: You should render providers as deep as possible in the tree – notice howThemeProvideronly wraps{children}instead of the entire<html>document. This makes it easier for Next.js to optimize the static parts of your Server Components."
        },
        {
          "type": "p",
          "text": "In a similar fashion, library authors creating packages to be consumed by other developers can use the\"use client\"directive to mark client entry points of their package. This allows users of the package to import package components directly into their Server Components without having to create a wrapping boundary. You can optimize your package by using'use client' deeper in the tree, allowing the imported modules to be part of the Server Component module graph. It's worth noting some bundlers might strip out\"use client\"directives. You can find an example of how to configure esbuild to include the\"use client\"directive in theReact Wrap BalancerandVercel Analyticsrepositories."
        },
        {
          "type": "p",
          "text": "To reduce the Client JavaScript bundle size, we recommend moving Client Components down your component tree. For example, you may have a Layout that has static elements (e.g. logo, links, etc) and an interactive search bar that uses state. Instead of making the whole layout a Client Component, move the interactive logic to a Client Component (e.g.<SearchBar />) and keep your layout as a Server Component. This means you don't have to send all the component JavaScript of the layout to the client."
        },
        {
          "type": "code",
          "code": "// SearchBar is a Client ComponentimportSearchBarfrom'./searchbar'// Logo is a Server ComponentimportLogofrom'./logo'// Layout is a Server Component by defaultexportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {return(<><nav><Logo/><SearchBar/></nav><main>{children}</main></>)}"
        },
        {
          "type": "p",
          "text": "If you fetch data in a Server Component, you may want to pass data down as props to Client Components. Props passed from the Server to Client Components need to beserializableby React. If your Client Components depend on data that isnotserializable, you canfetch data on the client with a third party libraryor on the server with aRoute Handler."
        },
        {
          "type": "p",
          "text": "When interleaving Client and Server Components, it may be helpful to visualize your UI as a tree of components. Starting with theroot layout, which is a Server Component, you can then render certain subtrees of components on the client by adding the\"use client\"directive. Within those client subtrees, you can still nest Server Components or call Server Actions, however there are some things to keep in mind:"
        },
        {
          "type": "list",
          "items": [
            "During a request-response lifecycle, your code moves from the server to the client. If you need to access data or resources on the server while on the client, you'll be making anewrequest to the server - not switching back and forth.",
            "When a new request is made to the server, all Server Components are rendered first, including those nested inside Client Components. The rendered result (RSC Payload) will contain references to the locations of Client Components. Then, on the client, React uses the RSC Payload to reconcile Server and Client Components into a single tree."
          ]
        },
        {
          "type": "list",
          "items": [
            "Since Client Components are rendered after Server Components, you cannot import a Server Component into a Client Component module (since it would require a new request back to the server). Instead, you can pass a Server Component aspropsto a Client Component. See theunsupported patternandsupported patternsections below."
          ]
        },
        {
          "type": "p",
          "text": "The following pattern is not supported. You cannot import a Server Component into a Client Component:"
        },
        {
          "type": "code",
          "code": "'use client'// You cannot import a Server Component into a Client Component.importServerComponentfrom'./Server-Component'exportdefaultfunctionClientComponent({children,}:{children:React.ReactNode}) {const[count,setCount]=useState(0)return(<><buttononClick={()=>setCount(count+1)}>{count}</button><ServerComponent/></>)}"
        },
        {
          "type": "p",
          "text": "The following pattern is supported. You can pass Server Components as a prop to a Client Component. A common pattern is to use the Reactchildrenprop to create a\"slot\"in your Client Component. In the example below,<ClientComponent>accepts achildrenprop:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useState }from'react'exportdefaultfunctionClientComponent({children,}:{children:React.ReactNode}) {const[count,setCount]=useState(0)return(<><buttononClick={()=>setCount(count+1)}>{count}</button>{children}</>)}"
        },
        {
          "type": "p",
          "text": "<ClientComponent>doesn't know thatchildrenwill eventually be filled in by the result of a Server Component. The only responsibility<ClientComponent>has is to decidewherechildrenwill eventually be placed. In a parent Server Component, you can import both the<ClientComponent>and<ServerComponent>and pass<ServerComponent>as a child of<ClientComponent>:"
        },
        {
          "type": "code",
          "code": "// This pattern works:// You can pass a Server Component as a child or prop of a// Client Component.importClientComponentfrom'./client-component'importServerComponentfrom'./server-component'// Pages in Next.js are Server Components by defaultexportdefaultfunctionPage() {return(<ClientComponent><ServerComponent/></ClientComponent>)}"
        },
        {
          "type": "p",
          "text": "With this approach,<ClientComponent>and<ServerComponent>are decoupled and can be rendered independently. In this case, the child<ServerComponent>can be rendered on the server, well before<ClientComponent>is rendered on the client."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "The pattern of \"lifting content up\" has been used to avoid re-rendering a nested child component when a parent component re-renders.",
            "You're not limited to thechildrenprop. You can use any prop to pass JSX."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes",
      "title": "Rendering: Runtimes | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js has two server runtimes you can use in your application:"
        },
        {
          "type": "list",
          "items": [
            "TheNode.js Runtime(default), which has access to all Node.js APIs and compatible packages from the ecosystem.",
            "TheEdge Runtimewhich contains a more limitedset of APIs."
          ]
        },
        {
          "type": "list",
          "items": [
            "The Node.js Runtime is used for rendering your application.",
            "The Edge Runtime is used for Middleware (routing rules like redirects, rewrites, and setting headers)."
          ]
        },
        {
          "type": "list",
          "items": [
            "The Edge Runtime does not support all Node.js APIs. Some packages may not work as expected. Learn more about the unsupported APIs in theEdge Runtime.",
            "The Edge Runtime does not support Incremental Static Regeneration (ISR).",
            "Both runtimes can supportstreamingdepending on your deployment infrastructure."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/rendering/partial-prerendering",
      "title": "Rendering: Partial Prerendering | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Note:Partial Prerendering is anexperimentalfeature only available on canary and is subject to change. It is not ready for production use."
        },
        {
          "type": "p",
          "text": "Partial Prerendering (PPR) enables you to combine static and dynamic components together in the same route. During the build, Next.js prerenders as much of the route as possible. Ifdynamiccode is detected, like reading from the incoming request, you can wrap the relevant component with aReact Suspenseboundary. The Suspense boundary fallback will then be included in the prerendered HTML."
        },
        {
          "type": "p",
          "text": "🎥 Watch:Why PPR and how it works →YouTube (10 minutes)."
        },
        {
          "type": "p",
          "text": "PPR enables your Next.js server to immediately send prerendered content. To prevent client to server waterfalls, dynamic components begin streaming from the server in parallel while serving the initial prerender. This ensures dynamic components can begin rendering before client JavaScript has been loaded in the browser. To prevent creating many HTTP requests for each dynamic component, PPR is able to combine the static prerender and dynamic components together into a single HTTP request. This ensures there are not multiple network roundtrips needed for each dynamic component."
        },
        {
          "type": "p",
          "text": "In Next.js 15, you can incrementally adopt Partial Prerendering inlayoutsandpagesby setting thepproption innext.config.jstoincremental, and exporting theexperimental_pprroute config optionat the top of the file:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={experimental:{ppr:'incremental',},}exportdefaultnextConfig"
        },
        {
          "type": "code",
          "code": "import{ Suspense }from\"react\"import{ StaticComponent,DynamicComponent,Fallback }from\"@/app/ui\"exportconstexperimental_ppr=trueexportdefaultfunctionPage() {return{<><StaticComponent /><Suspense fallback={<Fallback />}><DynamicComponent /></Suspense></>};}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Routes that don't haveexperimental_pprwill default tofalseand will not be prerendered using PPR. You need to explicitly opt-in to PPR for each route.",
            "experimental_pprwill apply to all children of the route segment, including nested layouts and pages. You don't have to add it to every file, only the top segment of a route.",
            "To disable PPR for children segments, you can setexperimental_pprtofalsein the child segment."
          ]
        },
        {
          "type": "p",
          "text": "When creating the prerender for your route duringnext build, Next.js requires that Dynamic APIs are wrapped with React Suspense. Thefallbackis then included in the prerender. For example, using functions likecookiesorheaders:"
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'exportasyncfunctionUser() {constsession=(awaitcookies()).get('session')?.valuereturn'...'}"
        },
        {
          "type": "p",
          "text": "This component requires looking at the incoming request to read cookies. To use this with PPR, you should wrap the component with Suspense:"
        },
        {
          "type": "code",
          "code": "import{ Suspense }from'react'import{ User,AvatarSkeleton }from'./user'exportconstexperimental_ppr=trueexportdefaultfunctionPage() {return(<section><h1>This will be prerendered</h1><Suspensefallback={<AvatarSkeleton/>}><User/></Suspense></section>)}"
        },
        {
          "type": "p",
          "text": "Components only opt into dynamic rendering when the value is accessed. For example, if you are readingsearchParamsfrom apage, you can forward this value to another component as a prop:"
        },
        {
          "type": "code",
          "code": "import{ Table }from'./table'exportdefaultfunctionPage({searchParams,}:{searchParams:Promise<{ sort:string}>}) {return(<section><h1>This will be prerendered</h1><TablesearchParams={searchParams} /></section>)}"
        },
        {
          "type": "p",
          "text": "Inside of the table component, accessing the value fromsearchParamswill make the component run dynamically:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionTable({searchParams,}:{searchParams:Promise<{ sort:string}>}) {constsort=(awaitsearchParams).sort==='true'return'...'}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/rendering/server-components",
      "title": "Rendering: Server Components | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "React Server Components allow you to write UI that can be rendered and optionally cached on the server. In Next.js, the rendering work is further split by route segments to enable streaming and partial rendering, and there are three different server rendering strategies:"
        },
        {
          "type": "list",
          "items": ["Static Rendering", "Dynamic Rendering", "Streaming"]
        },
        {
          "type": "p",
          "text": "This page will go through how Server Components work, when you might use them, and the different server rendering strategies."
        },
        {
          "type": "p",
          "text": "There are a couple of benefits to doing the rendering work on the server, including:"
        },
        {
          "type": "list",
          "items": [
            "Data Fetching: Server Components allow you to move data fetching to the server, closer to your data source. This can improve performance by reducing time it takes to fetch data needed for rendering, and the number of requests the client needs to make.",
            "Security: Server Components allow you to keep sensitive data and logic on the server, such as tokens and API keys, without the risk of exposing them to the client.",
            "Caching: By rendering on the server, the result can be cached and reused on subsequent requests and across users. This can improve performance and reduce cost by reducing the amount of rendering and data fetching done on each request.",
            "Performance: Server Components give you additional tools to optimize performance from the baseline. For example, if you start with an app composed of entirely Client Components, moving non-interactive pieces of your UI to Server Components can reduce the amount of client-side JavaScript needed. This is beneficial for users with slower internet or less powerful devices, as the browser has less client-side JavaScript to download, parse, and execute.",
            "Initial Page Load andFirst Contentful Paint (FCP): On the server, we can generate HTML to allow users to view the page immediately, without waiting for the client to download, parse and execute the JavaScript needed to render the page.",
            "Search Engine Optimization and Social Network Shareability: The rendered HTML can be used by search engine bots to index your pages and social network bots to generate social card previews for your pages.",
            "Streaming: Server Components allow you to split the rendering work into chunks and stream them to the client as they become ready. This allows the user to see parts of the page earlier without having to wait for the entire page to be rendered on the server."
          ]
        },
        {
          "type": "p",
          "text": "By default, Next.js uses Server Components. This allows you to automatically implement server rendering with no additional configuration, and you can opt into using Client Components when needed, seeClient Components."
        },
        {
          "type": "p",
          "text": "On the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks: by individual route segments andSuspense Boundaries. Each chunk is rendered in two steps:"
        },
        {
          "type": "list",
          "items": [
            "React renders Server Components into a special data format called theReact Server Component Payload (RSC Payload).",
            "Next.js uses the RSC Payload and Client Component JavaScript instructions to renderHTMLon the server."
          ]
        },
        {
          "type": "p",
          "text": "Then, on the client:"
        },
        {
          "type": "list",
          "items": [
            "The HTML is used to immediately show a fast non-interactive preview of the route - this is for the initial page load only.",
            "The React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.",
            "The JavaScript instructions are used tohydrateClient Components and make the application interactive."
          ]
        },
        {
          "type": "p",
          "text": "The RSC Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The RSC Payload contains:"
        },
        {
          "type": "list",
          "items": [
            "The rendered result of Server Components",
            "Placeholders for where Client Components should be rendered and references to their JavaScript files",
            "Any props passed from a Server Component to a Client Component"
          ]
        },
        {
          "type": "p",
          "text": "There are three subsets of server rendering: Static, Dynamic, and Streaming."
        },
        {
          "type": "p",
          "text": "With Static Rendering, routes are rendered atbuild time, or in the background afterdata revalidation. The result is cached and can be pushed to aContent Delivery Network (CDN). This optimization allows you to share the result of the rendering work between users and server requests. Static rendering is useful when a route has data that is not personalized to the user and can be known at build time, such as a static blog post or a product page."
        },
        {
          "type": "p",
          "text": "With Dynamic Rendering, routes are rendered for each user atrequest time. Dynamic rendering is useful when a route has data that is personalized to the user or has information that can only be known at request time, such as cookies or the URL's search params."
        },
        {
          "type": "p",
          "text": "Dynamic Routes with Cached Data In most websites, routes are not fully static or fully dynamic - it's a spectrum. For example, you can have an e-commerce page that uses cached product data that's revalidated at an interval, but also has uncached, personalized customer data. In Next.js, you can have dynamically rendered routes that have both cached and uncached data. This is because the RSC Payload and data are cached separately. This allows you to opt into dynamic rendering without worrying about the performance impact of fetching all the data at request time. Learn more about thefull-route cacheandData Cache."
        },
        {
          "type": "p",
          "text": "During rendering, if aDynamic APIor afetchoption of{ cache: 'no-store' }is discovered, Next.js will switch to dynamically rendering the whole route. This table summarizes how Dynamic APIs and data caching affect whether a route is statically or dynamically rendered:"
        },
        {
          "type": "p",
          "text": "In the table above, for a route to be fully static, all data must be cached. However, you can have a dynamically rendered route that uses both cached and uncached data fetches. As a developer, you do not need to choose between static and dynamic rendering as Next.js will automatically choose the best rendering strategy for each route based on the features and APIs used. Instead, you choose when tocacheorrevalidate specific data, and you may choose tostreamparts of your UI."
        },
        {
          "type": "p",
          "text": "Dynamic APIs rely on information that can only be known at request time (and not ahead of time during prerendering). Using any of these APIs signals the developer's intention and will opt the whole route into dynamic rendering at the request time. These APIs include:"
        },
        {
          "type": "list",
          "items": [
            "cookies",
            "headers",
            "connection",
            "draftMode",
            "searchParamsprop",
            "unstable_noStore"
          ]
        },
        {
          "type": "p",
          "text": "Streaming enables you to progressively render UI from the server. Work is split into chunks and streamed to the client as it becomes ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering."
        },
        {
          "type": "p",
          "text": "Streaming is built into the Next.js App Router by default. This helps improve both the initial page loading performance, as well as UI that depends on slower data fetches that would block rendering the whole route. For example, reviews on a product page. You can start streaming route segments usingloading.jsand UI components withReact Suspense. See theLoading UI and Streamingsection for more information."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing",
      "title": "Building Your Application: Routing | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The skeleton of every application is routing. This page will introduce you to thefundamental conceptsof routing for the web and how to handle routing in Next.js."
        },
        {
          "type": "p",
          "text": "First, you will see these terms being used throughout the documentation. Here's a quick reference:"
        },
        {
          "type": "list",
          "items": [
            "Tree:A convention for visualizing a hierarchical structure. For example, a component tree with parent and children components, a folder structure, etc.",
            "Subtree:Part of a tree, starting at a new root (first) and ending at the leaves (last).",
            "Root: The first node in a tree or subtree, such as a root layout.",
            "Leaf:Nodes in a subtree that have no children, such as the last segment in a URL path."
          ]
        },
        {
          "type": "list",
          "items": [
            "URL Segment:Part of the URL path delimited by slashes.",
            "URL Path:Part of the URL that comes after the domain (composed of segments)."
          ]
        },
        {
          "type": "p",
          "text": "In version 13, Next.js introduced a newApp Routerbuilt onReact Server Components, which supports shared layouts, nested routing, loading states, error handling, and more. The App Router works in a new directory namedapp. Theappdirectory works alongside thepagesdirectory to allow for incremental adoption. This allows you to opt some routes of your application into the new behavior while keeping other routes in thepagesdirectory for previous behavior. If your application uses thepagesdirectory, please also see thePages Routerdocumentation."
        },
        {
          "type": "p",
          "text": "Good to know: The App Router takes priority over the Pages Router. Routes across directories should not resolve to the same URL path and will cause a build-time error to prevent a conflict."
        },
        {
          "type": "p",
          "text": "By default, components insideappareReact Server Components. This is a performance optimization and allows you to easily adopt them, and you can also useClient Components."
        },
        {
          "type": "p",
          "text": "Recommendation:Check out theServerpage if you're new to Server Components."
        },
        {
          "type": "p",
          "text": "Next.js uses a file-system based router where:"
        },
        {
          "type": "list",
          "items": [
            "Foldersare used to define routes. A route is a single path of nested folders, following the file-system hierarchy from theroot folderdown to a finalleaf folderthat includes apage.jsfile. SeeDefining Routes.",
            "Filesare used to create UI that is shown for a route segment. Seespecial files."
          ]
        },
        {
          "type": "p",
          "text": "Each folder in a route represents aroute segment. Each route segment is mapped to a correspondingsegmentin aURL path."
        },
        {
          "type": "p",
          "text": "To create a nested route, you can nest folders inside each other. For example, you can add a new/dashboard/settingsroute by nesting two new folders in theappdirectory. The/dashboard/settingsroute is composed of three segments:"
        },
        {
          "type": "list",
          "items": [
            "/(Root segment)",
            "dashboard(Segment)",
            "settings(Leaf segment)"
          ]
        },
        {
          "type": "p",
          "text": "Next.js provides a set of special files to create UI with specific behavior in nested routes:"
        },
        {
          "type": "p",
          "text": "Good to know:.js,.jsx, or.tsxfile extensions can be used for special files."
        },
        {
          "type": "p",
          "text": "The React components defined in special files of a route segment are rendered in a specific hierarchy:"
        },
        {
          "type": "list",
          "items": [
            "layout.js",
            "template.js",
            "error.js(React error boundary)",
            "loading.js(React suspense boundary)",
            "not-found.js(React error boundary)",
            "page.jsor nestedlayout.js"
          ]
        },
        {
          "type": "p",
          "text": "In a nested route, the components of a segment will be nestedinsidethe components of its parent segment."
        },
        {
          "type": "p",
          "text": "In addition to special files, you have the option to colocate your own files (e.g. components, styles, tests, etc) inside folders in theappdirectory. This is because while folders define routes, only the contents returned bypage.jsorroute.jsare publicly addressable."
        },
        {
          "type": "p",
          "text": "Learn more aboutProject Organization and Colocation."
        },
        {
          "type": "p",
          "text": "The App Router also provides a set of conventions to help you implement more advanced routing patterns. These include:"
        },
        {
          "type": "list",
          "items": [
            "Parallel Routes: Allow you to simultaneously show two or more pages in the same view that can be navigated independently. You can use them for split views that have their own sub-navigation. E.g. Dashboards.",
            "Intercepting Routes: Allow you to intercept a route and show it in the context of another route. You can use these when keeping the context for the current page is important. E.g. Seeing all tasks while editing one task or expanding a photo in a feed."
          ]
        },
        {
          "type": "p",
          "text": "These patterns allow you to build richer and more complex UIs, democratizing features that were historically complex for small teams and individual developers to implement."
        },
        {
          "type": "p",
          "text": "Now that you understand the fundamentals of routing in Next.js, follow the links below to create your first routes:"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/defining-routes",
      "title": "Getting Started: Layouts and Pages | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js usesfile-system based routing, meaning you can use folders and files to define routes. This page will guide you through how to create layouts and pages, and link between them."
        },
        {
          "type": "p",
          "text": "Apageis UI that is rendered on a specific route. To create a page, add apagefileinside theappdirectory and default export a React component. For example, to create an index page (/):"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {return<h1>Hello Next.js!</h1>}"
        },
        {
          "type": "p",
          "text": "A layout is UI that issharedbetween multiple pages. On navigation, layouts preserve state, remain interactive, and do not rerender. You can define a layout by default exporting a React component from alayoutfile. The component should accept achildrenprop which can be a page or anotherlayout. For example, to create a layout that accepts your index page as child, add alayoutfile inside theappdirectory:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionDashboardLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{/* Layout UI */}{/* Place children where you want to render a page or nested layout */}<main>{children}</main></body></html>)}"
        },
        {
          "type": "p",
          "text": "The layout above is called aroot layoutbecause it's defined at the root of theappdirectory. The root layout isrequiredand must containhtmlandbodytags."
        },
        {
          "type": "p",
          "text": "A nested route is a route composed of multiple URL segments. For example, the/blog/[slug]route is composed of three segments:"
        },
        {
          "type": "list",
          "items": ["/(Root Segment)", "blog(Segment)", "[slug](Leaf Segment)"]
        },
        {
          "type": "p",
          "text": "In Next.js:"
        },
        {
          "type": "list",
          "items": [
            "Foldersare used to define the route segments that map to URL segments.",
            "Files(likepageandlayout) are used to create UI that is shown for a segment."
          ]
        },
        {
          "type": "p",
          "text": "To create nested routes, you can nest folders inside each other. For example, to add a route for/blog, create a folder calledblogin theappdirectory. Then, to make/blogpublicly accessible, add apagefile:"
        },
        {
          "type": "code",
          "code": "import{ getPosts }from'@/lib/posts'import{ Post }from'@/ui/post'exportdefaultasyncfunctionPage() {constposts=awaitgetPosts()return(<ul>{posts.map((post)=>(<Postkey={post.id}post={post} />))}</ul>)}"
        },
        {
          "type": "p",
          "text": "You can continue nesting folders to create nested routes. For example, to create a route for a specific blog post, create a new[slug]folder insideblogand add apagefile:"
        },
        {
          "type": "code",
          "code": "functiongenerateStaticParams() {}exportdefaultfunctionPage() {return<h1>Hello, Blog Post Page!</h1>}"
        },
        {
          "type": "p",
          "text": "Good to know: Wrapping a folder name in square brackets (e.g.[slug]) creates a specialdynamic route segmentused to generate multiple pages from data. This is useful for blog posts, product pages, etc."
        },
        {
          "type": "p",
          "text": "By default, layouts in the folder hierarchy are also nested, which means they wrap child layouts via theirchildrenprop. You can nest layouts by addinglayoutinside specific route segments (folders). For example, to create a layout for the/blogroute, add a newlayoutfile inside theblogfolder."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionBlogLayout({children,}:{children:React.ReactNode}) {return<section>{children}</section>}"
        },
        {
          "type": "p",
          "text": "If you were to combine the two layouts above, the root layout (app/layout.js) would wrap the blog layout (app/blog/layout.js), which would wrap the blog (app/blog/page.js) and blog post page (app/blog/[slug]/page.js)."
        },
        {
          "type": "p",
          "text": "You can use the<Link>componentto navigate between routes.<Link>is a built-in Next.js component that extends the HTML<a>tag to provide prefetching and client-side navigation. For example, to generate a list of blog posts, import<Link>fromnext/linkand pass ahrefprop to the component:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultasyncfunctionPost({ post }) {constposts=awaitgetPosts()return(<ul>{posts.map((post)=>(<likey={post.slug}><Linkhref={`/blog/${post.slug}`}>{post.title}</Link></li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "<Link>is the primary and recommended way to navigate between routes in your Next.js application. However, you can also use theuseRouterhookfor more advanced navigation."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes",
      "title": "Routing: Dynamic Routes | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "When you don't know the exact segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time orprerenderedat build time."
        },
        {
          "type": "p",
          "text": "A Dynamic Segment can be created by wrapping a folder's name in square brackets:[folderName]. For example,[id]or[slug]. Dynamic Segments are passed as theparamsprop tolayout,page,route, andgenerateMetadatafunctions."
        },
        {
          "type": "p",
          "text": "For example, a blog could include the following routeapp/blog/[slug]/page.jswhere[slug]is the Dynamic Segment for blog posts."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage({params,}:{params:Promise<{ slug:string}>}) {constslug=(awaitparams).slugreturn<div>My Post: {slug}</div>}"
        },
        {
          "type": "p",
          "text": "See thegenerateStaticParams()page to learn how to generate the params for the segment."
        },
        {
          "type": "list",
          "items": [
            "Since theparamsprop is a promise. You must use async/await or React's use function to access the values.In version 14 and earlier,paramswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "In version 14 and earlier,paramswas a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.",
            "Dynamic Segments are equivalent toDynamic Routesin thepagesdirectory."
          ]
        },
        {
          "type": "p",
          "text": "ThegenerateStaticParamsfunction can be used in combination withdynamic route segmentstostatically generateroutes at build time instead of on-demand at request time."
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongenerateStaticParams() {constposts=awaitfetch('https://.../posts').then((res)=>res.json())returnposts.map((post)=>({slug:post.slug,}))}"
        },
        {
          "type": "p",
          "text": "The primary benefit of thegenerateStaticParamsfunction is its smart retrieval of data. If content is fetched within thegenerateStaticParamsfunction using afetchrequest, the requests areautomatically memoized. This means afetchrequest with the same arguments across multiplegenerateStaticParams, Layouts, and Pages will only be made once, which decreases build times. Use themigration guideif you are migrating from thepagesdirectory. SeegenerateStaticParamsserver function documentationfor more information and advanced use cases."
        },
        {
          "type": "p",
          "text": "Dynamic Segments can be extended tocatch-allsubsequent segments by adding an ellipsis inside the brackets[...folderName]. For example,app/shop/[...slug]/page.jswill match/shop/clothes, but also/shop/clothes/tops,/shop/clothes/tops/t-shirts, and so on."
        },
        {
          "type": "p",
          "text": "Catch-all Segments can be madeoptionalby including the parameter in double square brackets:[[...folderName]]. For example,app/shop/[[...slug]]/page.jswillalsomatch/shop, in addition to/shop/clothes,/shop/clothes/tops,/shop/clothes/tops/t-shirts. The difference betweencatch-allandoptional catch-allsegments is that with optional, the route without the parameter is also matched (/shopin the example above)."
        },
        {
          "type": "p",
          "text": "When using TypeScript, you can add types forparamsdepending on your configured route segment."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage({params,}:{params:Promise<{ slug:string}>}) {return<h1>My Page</h1>}"
        },
        {
          "type": "p",
          "text": "Good to know: This may be done automatically by theTypeScript pluginin the future."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/error-handling",
      "title": "Routing: Error Handling | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Errors can be divided into two categories:expected errorsanduncaught exceptions:"
        },
        {
          "type": "list",
          "items": [
            "Model expected errors as return values: Avoid usingtry/catchfor expected errors in Server Actions. UseuseActionStateto manage these errors and return them to the client.",
            "Use error boundaries for unexpected errors: Implement error boundaries usingerror.tsxandglobal-error.tsxfiles to handle unexpected errors and provide a fallback UI."
          ]
        },
        {
          "type": "p",
          "text": "Expected errors are those that can occur during the normal operation of the application, such as those fromserver-side form validationor failed requests. These errors should be handled explicitly and returned to the client."
        },
        {
          "type": "p",
          "text": "Use theuseActionStatehook to manage the state of Server Actions, including handling errors. This approach avoidstry/catchblocks for expected errors, which should be modeled as return values rather than thrown exceptions."
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'exportasyncfunctioncreateUser(prevState:any,formData:FormData) {constres=awaitfetch('https://...')constjson=awaitres.json()if(!res.ok) {return{ message:'Please enter a valid email'}}redirect('/dashboard')}"
        },
        {
          "type": "p",
          "text": "Then, you can pass your action to theuseActionStatehook and use the returnedstateto display an error message."
        },
        {
          "type": "code",
          "code": "'use client'import{ useActionState }from'react'import{ createUser }from'@/app/actions'constinitialState={message:'',}exportfunctionSignup() {const[state,formAction,pending]=useActionState(createUser,initialState)return(<formaction={formAction}><labelhtmlFor=\"email\">Email</label><inputtype=\"text\"id=\"email\"name=\"email\"required/>{/* ... */}<paria-live=\"polite\">{state?.message}</p><buttondisabled={pending}>Sign up</button></form>)}"
        },
        {
          "type": "p",
          "text": "You could also use the returned state to display a toast message from the client component."
        },
        {
          "type": "p",
          "text": "When fetching data inside of a Server Component, you can use the response to conditionally render an error message orredirect."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constres=awaitfetch(`https://...`)constdata=awaitres.json()if(!res.ok) {return'There was an error.'}return'...'}"
        },
        {
          "type": "p",
          "text": "Uncaught exceptions are unexpected errors that indicate bugs or issues that should not occur during the normal flow of your application. These should be handled by throwing errors, which will then be caught by error boundaries."
        },
        {
          "type": "list",
          "items": [
            "Common:Handle uncaught errors below the root layout witherror.js.",
            "Optional:Handle granular uncaught errors with nestederror.jsfiles (e.g.app/dashboard/error.js)",
            "Uncommon:Handle uncaught errors in the root layout withglobal-error.js."
          ]
        },
        {
          "type": "p",
          "text": "Next.js uses error boundaries to handle uncaught exceptions. Error boundaries catch errors in their child components and display a fallback UI instead of the component tree that crashed. Create an error boundary by adding anerror.tsxfile inside a route segment and exporting a React component:"
        },
        {
          "type": "code",
          "code": "'use client'// Error boundaries must be Client Componentsimport{ useEffect }from'react'exportdefaultfunctionError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {useEffect(()=>{// Log the error to an error reporting serviceconsole.error(error)},[error])return(<div><h2>Something went wrong!</h2><buttononClick={// Attempt to recover by trying to re-render the segment()=>reset()}>Try again</button></div>)}"
        },
        {
          "type": "p",
          "text": "If you want errors to bubble up to the parent error boundary, you canthrowwhen rendering theerrorcomponent."
        },
        {
          "type": "p",
          "text": "Errors will bubble up to the nearest parent error boundary. This allows for granular error handling by placingerror.tsxfiles at different levels in theroute hierarchy."
        },
        {
          "type": "p",
          "text": "While less common, you can handle errors in the root layout usingapp/global-error.js, located in the root app directory, even when leveraginginternationalization. Global error UI must define its own<html>and<body>tags, since it is replacing the root layout or template when active."
        },
        {
          "type": "code",
          "code": "'use client'// Error boundaries must be Client ComponentsexportdefaultfunctionGlobalError({error,reset,}:{error:Error&{ digest?:string}reset:()=>void}) {return(// global-error must include html and body tags<html><body><h2>Something went wrong!</h2><buttononClick={()=>reset()}>Try again</button></body></html>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/intercepting-routes",
      "title": "Routing: Intercepting Routes | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Intercepting routes allows you to load a route from another part of your application within the current layout. This routing paradigm can be useful when you want to display the content of a route without the user switching to a different context. For example, when clicking on a photo in a feed, you can display the photo in a modal, overlaying the feed. In this case, Next.js intercepts the/photo/123route, masks the URL, and overlays it over/feed."
        },
        {
          "type": "p",
          "text": "However, when navigating to the photo by clicking a shareable URL or by refreshing the page, the entire photo page should render instead of the modal. No route interception should occur."
        },
        {
          "type": "p",
          "text": "Intercepting routes can be defined with the(..)convention, which is similar to relative path convention../but for segments. You can use:"
        },
        {
          "type": "list",
          "items": [
            "(.)to match segments on thesame level",
            "(..)to match segmentsone level above",
            "(..)(..)to match segmentstwo levels above",
            "(...)to match segments from therootappdirectory"
          ]
        },
        {
          "type": "p",
          "text": "For example, you can intercept thephotosegment from within thefeedsegment by creating a(..)photodirectory."
        },
        {
          "type": "p",
          "text": "Note that the(..)convention is based onroute segments, not the file-system."
        },
        {
          "type": "p",
          "text": "Intercepting Routes can be used together withParallel Routesto create modals. This allows you to solve common challenges when building modals, such as:"
        },
        {
          "type": "list",
          "items": [
            "Making the modal contentshareable through a URL.",
            "Preserving contextwhen the page is refreshed, instead of closing the modal.",
            "Closing the modal on backwards navigationrather than going to the previous route.",
            "Reopening the modal on forwards navigation."
          ]
        },
        {
          "type": "p",
          "text": "Consider the following UI pattern, where a user can open a photo modal from a gallery using client-side navigation, or navigate to the photo page directly from a shareable URL:"
        },
        {
          "type": "p",
          "text": "In the above example, the path to thephotosegment can use the(..)matcher since@modalis a slot andnota segment. This means that thephotoroute is only one segment level higher, despite being two file-system levels higher. See theParallel Routesdocumentation for a step-by-step example, or see ourimage gallery example."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Other examples could include opening a login modal in a top navbar while also having a dedicated/loginpage, or opening a shopping cart in a side modal."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/internationalization",
      "title": "Routing: Internationalization | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js enables you to configure the routing and rendering of content to support multiple languages. Making your site adaptive to different locales includes translated content (localization) and internationalized routes."
        },
        {
          "type": "list",
          "items": [
            "Locale:An identifier for a set of language and formatting preferences. This usually includes the preferred language of the user and possibly their geographic region.en-US: English as spoken in the United Statesnl-NL: Dutch as spoken in the Netherlandsnl: Dutch, no specific region",
            "en-US: English as spoken in the United States",
            "nl-NL: Dutch as spoken in the Netherlands",
            "nl: Dutch, no specific region"
          ]
        },
        {
          "type": "p",
          "text": "It’s recommended to use the user’s language preferences in the browser to select which locale to use. Changing your preferred language will modify the incomingAccept-Languageheader to your application. For example, using the following libraries, you can look at an incomingRequestto determine which locale to select, based on theHeaders, locales you plan to support, and the default locale."
        },
        {
          "type": "code",
          "code": "import{ match }from'@formatjs/intl-localematcher'importNegotiatorfrom'negotiator'letheaders={'accept-language':'en-US,en;q=0.5'}letlanguages=newNegotiator({ headers }).languages()letlocales=['en-US','nl-NL','nl']letdefaultLocale='en-US'match(languages,locales,defaultLocale)// -> 'en-US'"
        },
        {
          "type": "p",
          "text": "Routing can be internationalized by either the sub-path (/fr/products) or domain (my-site.fr/products). With this information, you can now redirect the user based on the locale insideMiddleware."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from\"next/server\";letlocales=['en-US','nl-NL','nl']// Get the preferred locale, similar to the above or using a libraryfunctiongetLocale(request) {...}exportfunctionmiddleware(request) {// Check if there is any supported locale in the pathnameconst{pathname}=request.nextUrlconstpathnameHasLocale=locales.some((locale)=>pathname.startsWith(`/${locale}/`)||pathname===`/${locale}`)if(pathnameHasLocale)return// Redirect if there is no localeconstlocale=getLocale(request)request.nextUrl.pathname=`/${locale}${pathname}`// e.g. incoming request is /products// The new URL is now /en-US/productsreturnNextResponse.redirect(request.nextUrl)}exportconstconfig={matcher:[// Skip all internal paths (_next)'/((?!_next).*)',// Optional: only run on root (/) URL// '/'],}"
        },
        {
          "type": "p",
          "text": "Finally, ensure all special files insideapp/are nested underapp/[lang]. This enables the Next.js router to dynamically handle different locales in the route, and forward thelangparameter to every layout and page. For example:"
        },
        {
          "type": "code",
          "code": "// You now have access to the current locale// e.g. /en-US/products -> `lang` is \"en-US\"exportdefaultasyncfunctionPage({ params: { lang } }) {return...}"
        },
        {
          "type": "p",
          "text": "The root layout can also be nested in the new folder (e.g.app/[lang]/layout.js)."
        },
        {
          "type": "p",
          "text": "Changing displayed content based on the user’s preferred locale, or localization, is not something specific to Next.js. The patterns described below would work the same with any web application. Let’s assume we want to support both English and Dutch content inside our application. We might maintain two different “dictionaries”, which are objects that give us a mapping from some key to a localized string. For example:"
        },
        {
          "type": "code",
          "code": "{\"products\":{\"cart\":\"Add to Cart\"}}"
        },
        {
          "type": "code",
          "code": "{\"products\":{\"cart\":\"Toevoegen aan Winkelwagen\"}}"
        },
        {
          "type": "p",
          "text": "We can then create agetDictionaryfunction to load the translations for the requested locale:"
        },
        {
          "type": "code",
          "code": "import'server-only'constdictionaries={en:()=>import('./dictionaries/en.json').then((module)=>module.default),nl:()=>import('./dictionaries/nl.json').then((module)=>module.default),}exportconstgetDictionary=async(locale)=>dictionaries[locale]()"
        },
        {
          "type": "p",
          "text": "Given the currently selected language, we can fetch the dictionary inside of a layout or page."
        },
        {
          "type": "code",
          "code": "import{ getDictionary }from'./dictionaries'exportdefaultasyncfunctionPage({ params: { lang } }) {constdict=awaitgetDictionary(lang)// enreturn<button>{dict.products.cart}</button>// Add to Cart}"
        },
        {
          "type": "p",
          "text": "Because all layouts and pages in theapp/directory default toServer Components, we do not need to worry about the size of the translation files affecting our client-side JavaScript bundle size. This code willonly run on the server, and only the resulting HTML will be sent to the browser."
        },
        {
          "type": "p",
          "text": "To generate static routes for a given set of locales, we can usegenerateStaticParamswith any page or layout. This can be global, for example, in the root layout:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctiongenerateStaticParams() {return[{ lang:'en-US'},{ lang:'de'}]}exportdefaultfunctionRoot({ children,params }) {return(<htmllang={params.lang}><body>{children}</body></html>)}"
        },
        {
          "type": "list",
          "items": [
            "Minimal i18n routing and translations",
            "next-intl",
            "next-international",
            "next-i18n-router",
            "paraglide-next",
            "lingui"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/layouts-and-templates",
      "title": "Getting Started: Layouts and Pages | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js usesfile-system based routing, meaning you can use folders and files to define routes. This page will guide you through how to create layouts and pages, and link between them."
        },
        {
          "type": "p",
          "text": "Apageis UI that is rendered on a specific route. To create a page, add apagefileinside theappdirectory and default export a React component. For example, to create an index page (/):"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {return<h1>Hello Next.js!</h1>}"
        },
        {
          "type": "p",
          "text": "A layout is UI that issharedbetween multiple pages. On navigation, layouts preserve state, remain interactive, and do not rerender. You can define a layout by default exporting a React component from alayoutfile. The component should accept achildrenprop which can be a page or anotherlayout. For example, to create a layout that accepts your index page as child, add alayoutfile inside theappdirectory:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionDashboardLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{/* Layout UI */}{/* Place children where you want to render a page or nested layout */}<main>{children}</main></body></html>)}"
        },
        {
          "type": "p",
          "text": "The layout above is called aroot layoutbecause it's defined at the root of theappdirectory. The root layout isrequiredand must containhtmlandbodytags."
        },
        {
          "type": "p",
          "text": "A nested route is a route composed of multiple URL segments. For example, the/blog/[slug]route is composed of three segments:"
        },
        {
          "type": "list",
          "items": ["/(Root Segment)", "blog(Segment)", "[slug](Leaf Segment)"]
        },
        {
          "type": "p",
          "text": "In Next.js:"
        },
        {
          "type": "list",
          "items": [
            "Foldersare used to define the route segments that map to URL segments.",
            "Files(likepageandlayout) are used to create UI that is shown for a segment."
          ]
        },
        {
          "type": "p",
          "text": "To create nested routes, you can nest folders inside each other. For example, to add a route for/blog, create a folder calledblogin theappdirectory. Then, to make/blogpublicly accessible, add apagefile:"
        },
        {
          "type": "code",
          "code": "import{ getPosts }from'@/lib/posts'import{ Post }from'@/ui/post'exportdefaultasyncfunctionPage() {constposts=awaitgetPosts()return(<ul>{posts.map((post)=>(<Postkey={post.id}post={post} />))}</ul>)}"
        },
        {
          "type": "p",
          "text": "You can continue nesting folders to create nested routes. For example, to create a route for a specific blog post, create a new[slug]folder insideblogand add apagefile:"
        },
        {
          "type": "code",
          "code": "functiongenerateStaticParams() {}exportdefaultfunctionPage() {return<h1>Hello, Blog Post Page!</h1>}"
        },
        {
          "type": "p",
          "text": "Good to know: Wrapping a folder name in square brackets (e.g.[slug]) creates a specialdynamic route segmentused to generate multiple pages from data. This is useful for blog posts, product pages, etc."
        },
        {
          "type": "p",
          "text": "By default, layouts in the folder hierarchy are also nested, which means they wrap child layouts via theirchildrenprop. You can nest layouts by addinglayoutinside specific route segments (folders). For example, to create a layout for the/blogroute, add a newlayoutfile inside theblogfolder."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionBlogLayout({children,}:{children:React.ReactNode}) {return<section>{children}</section>}"
        },
        {
          "type": "p",
          "text": "If you were to combine the two layouts above, the root layout (app/layout.js) would wrap the blog layout (app/blog/layout.js), which would wrap the blog (app/blog/page.js) and blog post page (app/blog/[slug]/page.js)."
        },
        {
          "type": "p",
          "text": "You can use the<Link>componentto navigate between routes.<Link>is a built-in Next.js component that extends the HTML<a>tag to provide prefetching and client-side navigation. For example, to generate a list of blog posts, import<Link>fromnext/linkand pass ahrefprop to the component:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultasyncfunctionPost({ post }) {constposts=awaitgetPosts()return(<ul>{posts.map((post)=>(<likey={post.slug}><Linkhref={`/blog/${post.slug}`}>{post.title}</Link></li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "<Link>is the primary and recommended way to navigate between routes in your Next.js application. However, you can also use theuseRouterhookfor more advanced navigation."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating",
      "title": "Routing: Linking and Navigating | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "There are four ways to navigate between routes in Next.js:"
        },
        {
          "type": "list",
          "items": [
            "Using the<Link>Component",
            "Using theuseRouterhook(Client Components)",
            "Using theredirectfunction(Server Components)",
            "Using the nativeHistory API"
          ]
        },
        {
          "type": "p",
          "text": "This page will go through how to use each of these options, and dive deeper into how navigation works."
        },
        {
          "type": "p",
          "text": "<Link>is a built-in component that extends the HTML<a>tag to provideprefetchingand client-side navigation between routes. It is the primary and recommended way to navigate between routes in Next.js. You can use it by importing it fromnext/link, and passing ahrefprop to the component:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return<Linkhref=\"/dashboard\">Dashboard</Link>}"
        },
        {
          "type": "p",
          "text": "There are other optional props you can pass to<Link>. See theAPI referencefor more."
        },
        {
          "type": "p",
          "text": "TheuseRouterhook allows you to programmatically change routes fromClient Components."
        },
        {
          "type": "code",
          "code": "'use client'import{ useRouter }from'next/navigation'exportdefaultfunctionPage() {constrouter=useRouter()return(<buttontype=\"button\"onClick={()=>router.push('/dashboard')}>Dashboard</button>)}"
        },
        {
          "type": "p",
          "text": "For a full list ofuseRoutermethods, see theAPI reference."
        },
        {
          "type": "p",
          "text": "Recommendation:Use the<Link>component to navigate between routes unless you have a specific requirement for usinguseRouter."
        },
        {
          "type": "p",
          "text": "ForServer Components, use theredirectfunction instead."
        },
        {
          "type": "code",
          "code": "import{ redirect }from'next/navigation'asyncfunctionfetchTeam(id:string) {constres=awaitfetch('https://...')if(!res.ok)returnundefinedreturnres.json()}exportdefaultasyncfunctionProfile({params,}:{params:Promise<{ id:string}>}) {constid=(awaitparams).idif(!id) {redirect('/login')}constteam=awaitfetchTeam(id)if(!team) {redirect('/join')}// ...}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "redirectreturns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.",
            "redirectinternally throws an error so it should be called outside oftry/catchblocks.",
            "redirectcan be called in Client Components during the rendering process but not in event handlers. You can use theuseRouterhookinstead.",
            "redirectalso accepts absolute URLs and can be used to redirect to external links.",
            "If you'd like to redirect before the render process, usenext.config.jsorMiddleware."
          ]
        },
        {
          "type": "p",
          "text": "See theredirectAPI referencefor more information."
        },
        {
          "type": "p",
          "text": "Next.js allows you to use the nativewindow.history.pushStateandwindow.history.replaceStatemethods to update the browser's history stack without reloading the page. pushStateandreplaceStatecalls integrate into the Next.js Router, allowing you to sync withusePathnameanduseSearchParams."
        },
        {
          "type": "p",
          "text": "Use it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useSearchParams }from'next/navigation'exportdefaultfunctionSortProducts() {constsearchParams=useSearchParams()functionupdateSorting(sortOrder:string) {constparams=newURLSearchParams(searchParams.toString())params.set('sort',sortOrder)window.history.pushState(null,'',`?${params.toString()}`)}return(<><buttononClick={()=>updateSorting('asc')}>Sort Ascending</button><buttononClick={()=>updateSorting('desc')}>Sort Descending</button></>)}"
        },
        {
          "type": "p",
          "text": "Use it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale:"
        },
        {
          "type": "code",
          "code": "'use client'import{ usePathname }from'next/navigation'exportfunctionLocaleSwitcher() {constpathname=usePathname()functionswitchLocale(locale:string) {// e.g. '/en/about' or '/fr/contact'constnewPath=`/${locale}${pathname}`window.history.replaceState(null,'',newPath)}return(<><buttononClick={()=>switchLocale('en')}>English</button><buttononClick={()=>switchLocale('fr')}>French</button></>)}"
        },
        {
          "type": "p",
          "text": "The App Router uses a hybrid approach for routing and navigation. On the server, your application code is automaticallycode-splitby route segments. And on the client, Next.jsprefetchesandcachesthe route segments. This means, when a user navigates to a new route, the browser doesn't reload the page, and only the route segments that change re-render - improving the navigation experience and performance."
        },
        {
          "type": "p",
          "text": "Code splitting allows you to split your application code into smaller bundles to be downloaded and executed by the browser. This reduces the amount of data transferred and execution time for each request, leading to improved performance. Server Componentsallow your application code to be automatically code-split by route segments. This means only the code needed for the current route is loaded on navigation."
        },
        {
          "type": "p",
          "text": "Prefetching is a way to preload a route in the background before the user visits it. There are two ways routes are prefetched in Next.js:"
        },
        {
          "type": "list",
          "items": [
            "<Link>component: Routes are automatically prefetched as they become visible in the user's viewport. Prefetching happens when the page first loads or when it comes into view through scrolling.",
            "router.prefetch(): TheuseRouterhook can be used to prefetch routes programmatically."
          ]
        },
        {
          "type": "p",
          "text": "The<Link>'s default prefetching behavior (i.e. when theprefetchprop is left unspecified or set tonull) is different depending on your usage ofloading.js. Only the shared layout, down the rendered \"tree\" of components until the firstloading.jsfile, is prefetched and cached for30s. This reduces the cost of fetching an entire dynamic route, and it means you can show aninstant loading statefor better visual feedback to users. You can disable prefetching by setting theprefetchprop tofalse. Alternatively, you can prefetch the full page data beyond the loading boundaries by setting theprefetchprop totrue. See the<Link>API referencefor more information."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Prefetching is not enabled in development, only in production."
          ]
        },
        {
          "type": "p",
          "text": "Next.js has anin-memory client-side cachecalled theRouter Cache. As users navigate around the app, the React Server Component Payload ofprefetchedroute segments and visited routes are stored in the cache. This means on navigation, the cache is reused as much as possible, instead of making a new request to the server - improving performance by reducing the number of requests and data transferred. Learn more about how theRouter Cacheworks and how to configure it."
        },
        {
          "type": "p",
          "text": "Partial rendering means only the route segments that change on navigation re-render on the client, and any shared segments are preserved. For example, when navigating between two sibling routes,/dashboard/settingsand/dashboard/analytics, thesettingspage will be unmounted, theanalyticspage will be mounted with fresh state, and the shareddashboardlayout will be preserved. This behavior is also present between two routes on the same dynamic segment e.g. with/blog/[slug]/pageand navigating from/blog/firstto/blog/second."
        },
        {
          "type": "p",
          "text": "Without partial rendering, each navigation would cause the full page to re-render on the client. Rendering only the segment that changes reduces the amount of data transferred and execution time, leading to improved performance."
        },
        {
          "type": "p",
          "text": "Browsers perform a \"hard navigation\" when navigating between pages. The Next.js App Router enables \"soft navigation\" between pages, ensuring only the route segments that have changed are re-rendered (partial rendering). This enables client React state to be preserved during navigation."
        },
        {
          "type": "p",
          "text": "By default, Next.js will maintain the scroll position for backwards and forwards navigation, and re-use route segments in theRouter Cache."
        },
        {
          "type": "p",
          "text": "When incrementally migrating frompages/toapp/, the Next.js router will automatically handle hard navigation between the two. To detect transitions frompages/toapp/, there is a client router filter that leverages probabilistic checking of app routes, which can occasionally result in false positives. By default, such occurrences should be very rare, as we configure the false positive likelihood to be 0.01%. This likelihood can be customized via theexperimental.clientRouterFilterAllowedRateoption innext.config.js. It's important to note that lowering the false positive rate will increase the size of the generated filter in the client bundle. Alternatively, if you prefer to disable this handling completely and manage the routing betweenpages/andapp/manually, you can setexperimental.clientRouterFilterto false innext.config.js. When this feature is disabled, any dynamic routes in pages that overlap with app routes won't be navigated to properly by default."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming",
      "title": "Routing: Loading UI and Streaming | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The special fileloading.jshelps you create meaningful Loading UI withReact Suspense. With this convention, you can show aninstant loading statefrom the server while the content of a route segment loads. The new content is automatically swapped in once rendering is complete."
        },
        {
          "type": "p",
          "text": "An instant loading state is fallback UI that is shown immediately upon navigation. You can pre-render loading indicators such as skeletons and spinners, or a small but meaningful part of future screens such as a cover photo, title, etc. This helps users understand the app is responding and provides a better user experience. Create a loading state by adding aloading.jsfile inside a folder."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionLoading() {// You can add any UI inside Loading, including a Skeleton.return<LoadingSkeleton/>}"
        },
        {
          "type": "p",
          "text": "In the same folder,loading.jswill be nested insidelayout.js. It will automatically wrap thepage.jsfile and any children below in a<Suspense>boundary."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Navigation is immediate, even withserver-centric routing.",
            "Navigation is interruptible, meaning changing routes does not need to wait for the content of the route to fully load before navigating to another route.",
            "Shared layouts remain interactive while new route segments load."
          ]
        },
        {
          "type": "p",
          "text": "Recommendation:Use theloading.jsconvention for route segments (layouts and pages) as Next.js optimizes this functionality."
        },
        {
          "type": "p",
          "text": "In addition toloading.js, you can also manually create Suspense Boundaries for your own UI components. The App Router supports streaming withSuspensefor bothNode.js and Edge runtimes."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Some browsersbuffer a streaming response. You may not see the streamed response until the response exceeds 1024 bytes. This typically only affects “hello world” applications, but not real applications."
          ]
        },
        {
          "type": "p",
          "text": "To learn how Streaming works in React and Next.js, it's helpful to understandServer-Side Rendering (SSR)and its limitations. With SSR, there's a series of steps that need to be completed before a user can see and interact with a page:"
        },
        {
          "type": "list",
          "items": [
            "First, all data for a given page is fetched on the server.",
            "The server then renders the HTML for the page.",
            "The HTML, CSS, and JavaScript for the page are sent to the client.",
            "A non-interactive user interface is shown using the generated HTML, and CSS.",
            "Finally, Reacthydratesthe user interface to make it interactive."
          ]
        },
        {
          "type": "p",
          "text": "These steps are sequential and blocking, meaning the server can only render the HTML for a page once all the data has been fetched. And, on the client, React can only hydrate the UI once the code for all components in the page has been downloaded. SSR with React and Next.js helps improve the perceived loading performance by showing a non-interactive page to the user as soon as possible."
        },
        {
          "type": "p",
          "text": "However, it can still be slow as all data fetching on server needs to be completed before the page can be shown to the user. Streamingallows you to break down the page's HTML into smaller chunks and progressively send those chunks from the server to the client."
        },
        {
          "type": "p",
          "text": "This enables parts of the page to be displayed sooner, without waiting for all the data to load before any UI can be rendered. Streaming works well with React's component model because each component can be considered a chunk. Components that have higher priority (e.g. product information) or that don't rely on data can be sent first (e.g. layout), and React can start hydration earlier. Components that have lower priority (e.g. reviews, related products) can be sent in the same server request after their data has been fetched."
        },
        {
          "type": "p",
          "text": "Streaming is particularly beneficial when you want to prevent long data requests from blocking the page from rendering as it can reduce theTime To First Byte (TTFB)andFirst Contentful Paint (FCP). It also helps improveTime to Interactive (TTI), especially on slower devices."
        },
        {
          "type": "p",
          "text": "<Suspense>works by wrapping a component that performs an asynchronous action (e.g. fetch data), showing fallback UI (e.g. skeleton, spinner) while it's happening, and then swapping in your component once the action completes."
        },
        {
          "type": "code",
          "code": "import{ Suspense }from'react'import{ PostFeed,Weather }from'./Components'exportdefaultfunctionPosts() {return(<section><Suspensefallback={<p>Loading feed...</p>}><PostFeed/></Suspense><Suspensefallback={<p>Loading weather...</p>}><Weather/></Suspense></section>)}"
        },
        {
          "type": "p",
          "text": "By using Suspense, you get the benefits of:"
        },
        {
          "type": "list",
          "items": [
            "Streaming Server Rendering- Progressively rendering HTML from the server to the client.",
            "Selective Hydration- React prioritizes what components to make interactive first based on user interaction."
          ]
        },
        {
          "type": "p",
          "text": "For more Suspense examples and use cases, please see theReact Documentation."
        },
        {
          "type": "list",
          "items": [
            "Next.js will wait for data fetching insidegenerateMetadatato complete before streaming UI to the client. This guarantees the first part of a streamed response includes<head>tags.",
            "Since streaming is server-rendered, it does not impact SEO. You can use theRich Results Testtool from Google to see how your page appears to Google's web crawlers and view the serialized HTML (source)."
          ]
        },
        {
          "type": "p",
          "text": "When streaming, a200status code will be returned to signal that the request was successful. The server can still communicate errors or issues to the client within the streamed content itself, for example, when usingredirectornotFound. Since the response headers have already been sent to the client, the status code of the response cannot be updated. This does not affect SEO."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/middleware",
      "title": "Routing: Middleware | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Middleware allows you to run code before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly. Middleware runs before cached content and routes are matched. SeeMatching Pathsfor more details."
        },
        {
          "type": "p",
          "text": "Integrating Middleware into your application can lead to significant improvements in performance, security, and user experience. Some common scenarios where Middleware is particularly effective include:"
        },
        {
          "type": "list",
          "items": [
            "Authentication and Authorization: Ensure user identity and check session cookies before granting access to specific pages or API routes.",
            "Server-Side Redirects: Redirect users at the server level based on certain conditions (e.g., locale, user role).",
            "Path Rewriting: Support A/B testing, feature rollouts, or legacy paths by dynamically rewriting paths to API routes or pages based on request properties.",
            "Bot Detection: Protect your resources by detecting and blocking bot traffic.",
            "Logging and Analytics: Capture and analyze request data for insights before processing by the page or API.",
            "Feature Flagging: Enable or disable features dynamically for seamless feature rollouts or testing."
          ]
        },
        {
          "type": "p",
          "text": "Recognizing situations where middleware may not be the optimal approach is just as crucial. Here are some scenarios to be mindful of:"
        },
        {
          "type": "list",
          "items": [
            "Complex Data Fetching and Manipulation: Middleware is not designed for direct data fetching or manipulation, this should be done within Route Handlers or server-side utilities instead.",
            "Heavy Computational Tasks: Middleware should be lightweight and respond quickly or it can cause delays in page load. Heavy computational tasks or long-running processes should be done within dedicated Route Handlers.",
            "Extensive Session Management: While Middleware can manage basic session tasks, extensive session management should be managed by dedicated authentication services or within Route Handlers.",
            "Direct Database Operations: Performing direct database operations within Middleware is not recommended. Database interactions should be done within Route Handlers or server-side utilities."
          ]
        },
        {
          "type": "p",
          "text": "Use the filemiddleware.ts(or.js) in the root of your project to define Middleware. For example, at the same level aspagesorapp, or insidesrcif applicable."
        },
        {
          "type": "p",
          "text": "Note: While only onemiddleware.tsfile is supported per project, you can still organize your middleware logic modularly. Break out middleware functionalities into separate.tsor.jsfiles and import them into your mainmiddleware.tsfile. This allows for cleaner management of route-specific middleware, aggregated in themiddleware.tsfor centralized control. By enforcing a single middleware file, it simplifies configuration, prevents potential conflicts, and optimizes performance by avoiding multiple middleware layers."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'// This function can be marked `async` if using `await` insideexportfunctionmiddleware(request:NextRequest) {returnNextResponse.redirect(newURL('/home',request.url))}// See \"Matching Paths\" below to learn moreexportconstconfig={matcher:'/about/:path*',}"
        },
        {
          "type": "p",
          "text": "Middleware will be invoked forevery route in your project. Given this, it's crucial to use matchers to precisely target or exclude specific routes. The following is the execution order:"
        },
        {
          "type": "list",
          "items": [
            "headersfromnext.config.js",
            "redirectsfromnext.config.js",
            "Middleware (rewrites,redirects, etc.)",
            "beforeFiles(rewrites) fromnext.config.js",
            "Filesystem routes (public/,_next/static/,pages/,app/, etc.)",
            "afterFiles(rewrites) fromnext.config.js",
            "Dynamic Routes (/blog/[slug])",
            "fallback(rewrites) fromnext.config.js"
          ]
        },
        {
          "type": "p",
          "text": "There are two ways to define which paths Middleware will run on:"
        },
        {
          "type": "list",
          "items": ["Custom matcher config", "Conditional statements"]
        },
        {
          "type": "p",
          "text": "matcherallows you to filter Middleware to run on specific paths."
        },
        {
          "type": "code",
          "code": "exportconstconfig={matcher:'/about/:path*',}"
        },
        {
          "type": "p",
          "text": "You can match a single path or multiple paths with an array syntax:"
        },
        {
          "type": "code",
          "code": "exportconstconfig={matcher:['/about/:path*','/dashboard/:path*'],}"
        },
        {
          "type": "p",
          "text": "Thematcherconfig allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:"
        },
        {
          "type": "code",
          "code": "exportconstconfig={matcher:[/** Match all request paths except for the ones starting with:* - api (API routes)* - _next/static (static files)* - _next/image (image optimization files)* - favicon.ico, sitemap.xml, robots.txt (metadata files)*/'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',],}"
        },
        {
          "type": "p",
          "text": "You can also bypass Middleware for certain requests by using themissingorhasarrays, or a combination of both:"
        },
        {
          "type": "code",
          "code": "exportconstconfig={matcher:[/** Match all request paths except for the ones starting with:* - api (API routes)* - _next/static (static files)* - _next/image (image optimization files)* - favicon.ico, sitemap.xml, robots.txt (metadata files)*/{source:'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',missing:[{ type:'header',key:'next-router-prefetch'},{ type:'header',key:'purpose',value:'prefetch'},],},{source:'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',has:[{ type:'header',key:'next-router-prefetch'},{ type:'header',key:'purpose',value:'prefetch'},],},{source:'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',has:[{ type:'header',key:'x-present'}],missing:[{ type:'header',key:'x-missing',value:'prefetch'}],},],}"
        },
        {
          "type": "p",
          "text": "Good to know: Thematchervalues need to be constants so they can be statically analyzed at build-time. Dynamic values such as variables will be ignored."
        },
        {
          "type": "p",
          "text": "Configured matchers:"
        },
        {
          "type": "list",
          "items": [
            "MUST start with/",
            "Can include named parameters:/about/:pathmatches/about/aand/about/bbut not/about/a/c",
            "Can have modifiers on named parameters (starting with:):/about/:path*matches/about/a/b/cbecause*iszero or more.?iszero or oneand+one or more",
            "Can use regular expression enclosed in parenthesis:/about/(.*)is the same as/about/:path*"
          ]
        },
        {
          "type": "p",
          "text": "Read more details onpath-to-regexpdocumentation."
        },
        {
          "type": "p",
          "text": "Good to know: For backward compatibility, Next.js always considers/publicas/public/index. Therefore, a matcher of/public/:pathwill match."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {if(request.nextUrl.pathname.startsWith('/about')) {returnNextResponse.rewrite(newURL('/about-2',request.url))}if(request.nextUrl.pathname.startsWith('/dashboard')) {returnNextResponse.rewrite(newURL('/dashboard/user',request.url))}}"
        },
        {
          "type": "p",
          "text": "TheNextResponseAPI allows you to:"
        },
        {
          "type": "list",
          "items": [
            "redirectthe incoming request to a different URL",
            "rewritethe response by displaying a given URL",
            "Set request headers for API Routes,getServerSideProps, andrewritedestinations",
            "Set response cookies",
            "Set response headers"
          ]
        },
        {
          "type": "p",
          "text": "To produce a response from Middleware, you can:"
        },
        {
          "type": "list",
          "items": [
            "rewriteto a route (PageorRoute Handler) that produces a response",
            "return aNextResponsedirectly. SeeProducing a Response"
          ]
        },
        {
          "type": "p",
          "text": "Cookies are regular headers. On aRequest, they are stored in theCookieheader. On aResponsethey are in theSet-Cookieheader. Next.js provides a convenient way to access and manipulate these cookies through thecookiesextension onNextRequestandNextResponse."
        },
        {
          "type": "list",
          "items": [
            "For incoming requests,cookiescomes with the following methods:get,getAll,set, anddeletecookies. You can check for the existence of a cookie withhasor remove all cookies withclear.",
            "For outgoing responses,cookieshave the following methodsget,getAll,set, anddelete."
          ]
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {// Assume a \"Cookie:nextjs=fast\" header to be present on the incoming request// Getting cookies from the request using the `RequestCookies` APIletcookie=request.cookies.get('nextjs')console.log(cookie)// => { name: 'nextjs', value: 'fast', Path: '/' }constallCookies=request.cookies.getAll()console.log(allCookies)// => [{ name: 'nextjs', value: 'fast' }]request.cookies.has('nextjs')// => truerequest.cookies.delete('nextjs')request.cookies.has('nextjs')// => false// Setting cookies on the response using the `ResponseCookies` APIconstresponse=NextResponse.next()response.cookies.set('vercel','fast')response.cookies.set({name:'vercel',value:'fast',path:'/',})cookie=response.cookies.get('vercel')console.log(cookie)// => { name: 'vercel', value: 'fast', Path: '/' }// The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.returnresponse}"
        },
        {
          "type": "p",
          "text": "You can set request and response headers using theNextResponseAPI (settingrequestheaders is available since Next.js v13.0.0)."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {// Clone the request headers and set a new header `x-hello-from-middleware1`constrequestHeaders=newHeaders(request.headers)requestHeaders.set('x-hello-from-middleware1','hello')// You can also set request headers in NextResponse.nextconstresponse=NextResponse.next({request:{// New request headersheaders:requestHeaders,},})// Set a new response header `x-hello-from-middleware2`response.headers.set('x-hello-from-middleware2','hello')returnresponse}"
        },
        {
          "type": "p",
          "text": "Good to know: Avoid setting large headers as it might cause431 Request Header Fields Too Largeerror depending on your backend web server configuration."
        },
        {
          "type": "p",
          "text": "You can set CORS headers in Middleware to allow cross-origin requests, includingsimpleandpreflightedrequests."
        },
        {
          "type": "code",
          "code": "import{ NextRequest,NextResponse }from'next/server'constallowedOrigins=['https://acme.com','https://my-app.org']constcorsOptions={'Access-Control-Allow-Methods':'GET, POST, PUT, DELETE, OPTIONS','Access-Control-Allow-Headers':'Content-Type, Authorization',}exportfunctionmiddleware(request:NextRequest) {// Check the origin from the requestconstorigin=request.headers.get('origin')??''constisAllowedOrigin=allowedOrigins.includes(origin)// Handle preflighted requestsconstisPreflight=request.method==='OPTIONS'if(isPreflight) {constpreflightHeaders={...(isAllowedOrigin&&{'Access-Control-Allow-Origin':origin }),...corsOptions,}returnNextResponse.json({},{ headers:preflightHeaders })}// Handle simple requestsconstresponse=NextResponse.next()if(isAllowedOrigin) {response.headers.set('Access-Control-Allow-Origin',origin)}Object.entries(corsOptions).forEach(([key,value])=>{response.headers.set(key,value)})returnresponse}exportconstconfig={matcher:'/api/:path*',}"
        },
        {
          "type": "p",
          "text": "Good to know:You can configure CORS headers for individual routes inRoute Handlers."
        },
        {
          "type": "p",
          "text": "You can respond from Middleware directly by returning aResponseorNextResponseinstance. (This is available sinceNext.js v13.1.0)"
        },
        {
          "type": "code",
          "code": "importtype{ NextRequest }from'next/server'import{ isAuthenticated }from'@lib/auth'// Limit the middleware to paths starting with `/api/`exportconstconfig={matcher:'/api/:function*',}exportfunctionmiddleware(request:NextRequest) {// Call our authentication function to check the requestif(!isAuthenticated(request)) {// Respond with JSON indicating an error messagereturnResponse.json({ success:false,message:'authentication failed'},{ status:401})}}"
        },
        {
          "type": "p",
          "text": "TheNextFetchEventobject extends the nativeFetchEventobject, and includes thewaitUntil()method. ThewaitUntil()method takes a promise as an argument, and extends the lifetime of the Middleware until the promise settles. This is useful for performing work in the background."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextFetchEvent,NextRequest }from'next/server'exportfunctionmiddleware(req:NextRequest,event:NextFetchEvent) {event.waitUntil(fetch('https://my-analytics-platform.com',{method:'POST',body:JSON.stringify({ pathname:req.nextUrl.pathname }),}))returnNextResponse.next()}"
        },
        {
          "type": "p",
          "text": "Inv13.1of Next.js two additional flags were introduced for middleware,skipMiddlewareUrlNormalizeandskipTrailingSlashRedirectto handle advanced use cases. skipTrailingSlashRedirectdisables Next.js redirects for adding or removing trailing slashes. This allows custom handling inside middleware to maintain the trailing slash for some paths but not others, which can make incremental migrations easier."
        },
        {
          "type": "code",
          "code": "module.exports={skipTrailingSlashRedirect:true,}"
        },
        {
          "type": "code",
          "code": "constlegacyPrefixes=['/docs','/blog']exportdefaultasyncfunctionmiddleware(req) {const{pathname}=req.nextUrlif(legacyPrefixes.some((prefix)=>pathname.startsWith(prefix))) {returnNextResponse.next()}// apply trailing slash handlingif(!pathname.endsWith('/')&&!pathname.match(/((?!\\.well-known(?:\\/.*)?)(?:[^/]+\\/)*[^/]+\\.\\w+)/)) {returnNextResponse.redirect(newURL(`${req.nextUrl.pathname}/`,req.nextUrl))}}"
        },
        {
          "type": "p",
          "text": "skipMiddlewareUrlNormalizeallows for disabling the URL normalization in Next.js to make handling direct visits and client-transitions the same. In some advanced cases, this option provides full control by using the original URL."
        },
        {
          "type": "code",
          "code": "module.exports={skipMiddlewareUrlNormalize:true,}"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionmiddleware(req) {const{pathname}=req.nextUrl// GET /_next/data/build-id/hello.jsonconsole.log(pathname)// with the flag this now /_next/data/build-id/hello.json// without the flag this would be normalized to /hello}"
        },
        {
          "type": "p",
          "text": "Starting in Next.js 15.1, thenext/experimental/testing/serverpackage contains utilities to help unit test middleware files. Unit testing middleware can help ensure that it's only run on desired paths and that custom routing logic works as intended before code reaches production. Theunstable_doesMiddlewareMatchfunction can be used to assert whether middleware will run for the provided URL, headers, and cookies."
        },
        {
          "type": "code",
          "code": "import{ unstable_doesMiddlewareMatch }from'next/experimental/testing/server'expect(unstable_doesMiddlewareMatch({config,nextConfig,url:'/test',})).toEqual(false)"
        },
        {
          "type": "p",
          "text": "The entire middleware function can also be tested."
        },
        {
          "type": "code",
          "code": "import{ isRewrite,getRewrittenUrl }from'next/experimental/testing/server'constrequest=newNextRequest('https://nextjs.org/docs')constresponse=awaitmiddleware(request)expect(isRewrite(response)).toEqual(true)expect(getRewrittenUrl(response)).toEqual('https://other-domain.com/docs')// getRedirectUrl could also be used if the response were a redirect"
        },
        {
          "type": "p",
          "text": "Middleware currently only supports APIs compatible with theEdge runtime. APIs exclusive to Node.js areunsupported."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/parallel-routes",
      "title": "Routing: Parallel Routes | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Parallel Routes allows you to simultaneously or conditionally render one or more pages within the same layout. They are useful for highly dynamic sections of an app, such as dashboards and feeds on social sites. For example, considering a dashboard, you can use parallel routes to simultaneously render theteamandanalyticspages:"
        },
        {
          "type": "p",
          "text": "Parallel routes are created using namedslots. Slots are defined with the@folderconvention. For example, the following file structure defines two slots:@analyticsand@team:"
        },
        {
          "type": "p",
          "text": "Slots are passed as props to the shared parent layout. For the example above, the component inapp/layout.jsnow accepts the@analyticsand@teamslots props, and can render them in parallel alongside thechildrenprop:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionLayout({children,team,analytics,}:{children:React.ReactNodeanalytics:React.ReactNodeteam:React.ReactNode}) {return(<>{children}{team}{analytics}</>)}"
        },
        {
          "type": "p",
          "text": "However, slots arenotroute segmentsand do not affect the URL structure. For example, for/@analytics/views, the URL will be/viewssince@analyticsis a slot. Slots are combined with the regularPagecomponent to form the final page associated with the route segment. Because of this, you cannot have separatestaticanddynamicslots at the same route segment level. If one slot is dynamic, all slots at that level must be dynamic."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Thechildrenprop is an implicit slot that does not need to be mapped to a folder. This meansapp/page.jsis equivalent toapp/@children/page.js."
          ]
        },
        {
          "type": "p",
          "text": "By default, Next.js keeps track of the activestate(or subpage) for each slot. However, the content rendered within a slot will depend on the type of navigation:"
        },
        {
          "type": "list",
          "items": [
            "Soft Navigation: During client-side navigation, Next.js will perform apartial render, changing the subpage within the slot, while maintaining the other slot's active subpages, even if they don't match the current URL.",
            "Hard Navigation: After a full-page load (browser refresh), Next.js cannot determine the active state for the slots that don't match the current URL. Instead, it will render adefault.jsfile for the unmatched slots, or404ifdefault.jsdoesn't exist."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "The404for unmatched routes helps ensure that you don't accidentally render a parallel route on a page that it was not intended for."
          ]
        },
        {
          "type": "p",
          "text": "You can define adefault.jsfile to render as a fallback for unmatched slots during the initial load or full-page reload. Consider the following folder structure. The@teamslot has a/settingspage, but@analyticsdoes not."
        },
        {
          "type": "p",
          "text": "When navigating to/settings, the@teamslot will render the/settingspage while maintaining the currently active page for the@analyticsslot. On refresh, Next.js will render adefault.jsfor@analytics. Ifdefault.jsdoesn't exist, a404is rendered instead. Additionally, sincechildrenis an implicit slot, you also need to create adefault.jsfile to render a fallback forchildrenwhen Next.js cannot recover the active state of the parent page."
        },
        {
          "type": "p",
          "text": "BothuseSelectedLayoutSegmentanduseSelectedLayoutSegmentsaccept aparallelRoutesKeyparameter, which allows you to read the active route segment within a slot."
        },
        {
          "type": "code",
          "code": "'use client'import{ useSelectedLayoutSegment }from'next/navigation'exportdefaultfunctionLayout({ auth }:{ auth:React.ReactNode}) {constloginSegment=useSelectedLayoutSegment('auth')// ...}"
        },
        {
          "type": "p",
          "text": "When a user navigates toapp/@auth/login(or/loginin the URL bar),loginSegmentwill be equal to the string\"login\"."
        },
        {
          "type": "p",
          "text": "You can use Parallel Routes to conditionally render routes based on certain conditions, such as user role. For example, to render a different dashboard page for the/adminor/userroles:"
        },
        {
          "type": "code",
          "code": "import{ checkUserRole }from'@/lib/auth'exportdefaultfunctionLayout({user,admin,}:{user:React.ReactNodeadmin:React.ReactNode}) {constrole=checkUserRole()returnrole==='admin'?admin:user}"
        },
        {
          "type": "p",
          "text": "You can add alayoutinside a slot to allow users to navigate the slot independently. This is useful for creating tabs. For example, the@analyticsslot has two subpages:/page-viewsand/visitors."
        },
        {
          "type": "p",
          "text": "Within@analytics, create alayoutfile to share the tabs between the two pages:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {return(<><nav><Linkhref=\"/page-views\">Page Views</Link><Linkhref=\"/visitors\">Visitors</Link></nav><div>{children}</div></>)}"
        },
        {
          "type": "p",
          "text": "Parallel Routes can be used together withIntercepting Routesto create modals that support deep linking. This allows you to solve common challenges when building modals, such as:"
        },
        {
          "type": "list",
          "items": [
            "Making the modal contentshareable through a URL.",
            "Preserving contextwhen the page is refreshed, instead of closing the modal.",
            "Closing the modal on backwards navigationrather than going to the previous route.",
            "Reopening the modal on forwards navigation."
          ]
        },
        {
          "type": "p",
          "text": "Consider the following UI pattern, where a user can open a login modal from a layout using client-side navigation, or access a separate/loginpage:"
        },
        {
          "type": "p",
          "text": "To implement this pattern, start by creating a/loginroute that renders yourmainlogin page."
        },
        {
          "type": "code",
          "code": "import{ Login }from'@/app/ui/login'exportdefaultfunctionPage() {return<Login/>}"
        },
        {
          "type": "p",
          "text": "Then, inside the@authslot, adddefault.jsfile that returnsnull. This ensures that the modal is not rendered when it's not active."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionDefault() {returnnull}"
        },
        {
          "type": "p",
          "text": "Inside your@authslot, intercept the/loginroute by updating the/(.)loginfolder. Import the<Modal>component and its children into the/(.)login/page.tsxfile:"
        },
        {
          "type": "code",
          "code": "import{ Modal }from'@/app/ui/modal'import{ Login }from'@/app/ui/login'exportdefaultfunctionPage() {return(<Modal><Login/></Modal>)}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "The convention used to intercept the route, e.g.(.), depends on your file-system structure. SeeIntercepting Routes convention.",
            "By separating the<Modal>functionality from the modal content (<Login>), you can ensure any content inside the modal, e.g.forms, are Server Components. SeeInterleaving Client and Server Componentsfor more information."
          ]
        },
        {
          "type": "p",
          "text": "Now, you can leverage the Next.js router to open and close the modal. This ensures the URL is correctly updated when the modal is open, and when navigating backwards and forwards. To open the modal, pass the@authslot as a prop to the parent layout and render it alongside thechildrenprop."
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionLayout({auth,children,}:{auth:React.ReactNodechildren:React.ReactNode}) {return(<><nav><Linkhref=\"/login\">Open modal</Link></nav><div>{auth}</div><div>{children}</div></>)}"
        },
        {
          "type": "p",
          "text": "When the user clicks the<Link>, the modal will open instead of navigating to the/loginpage. However, on refresh or initial load, navigating to/loginwill take the user to the main login page."
        },
        {
          "type": "p",
          "text": "You can close the modal by callingrouter.back()or by using theLinkcomponent."
        },
        {
          "type": "code",
          "code": "'use client'import{ useRouter }from'next/navigation'exportfunctionModal({ children }:{ children:React.ReactNode}) {constrouter=useRouter()return(<><buttononClick={()=>{router.back()}}>Close modal</button><div>{children}</div></>)}"
        },
        {
          "type": "p",
          "text": "When using theLinkcomponent to navigate away from a page that shouldn't render the@authslot anymore, we need to make sure the parallel route matches to a component that returnsnull. For example, when navigating back to the root page, we create a@auth/page.tsxcomponent:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportfunctionModal({ children }:{ children:React.ReactNode}) {return(<><Linkhref=\"/\">Close modal</Link><div>{children}</div></>)}"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {returnnull}"
        },
        {
          "type": "p",
          "text": "Or if navigating to any other page (such as/foo,/foo/bar, etc), you can use a catch-all slot:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionCatchAll() {returnnull}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "We use a catch-all route in our@authslot to close the modal because of the behavior described inActive state and navigation. Since client-side navigations to a route that no longer match the slot will remain visible, we need to match the slot to a route that returnsnullto close the modal.",
            "Other examples could include opening a photo modal in a gallery while also having a dedicated/photo/[id]page, or opening a shopping cart in a side modal.",
            "View an exampleof modals with Intercepted and Parallel Routes."
          ]
        },
        {
          "type": "p",
          "text": "Parallel Routes can be streamed independently, allowing you to define independent error and loading states for each route:"
        },
        {
          "type": "p",
          "text": "See theLoading UIandError Handlingdocumentation for more information."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/redirecting",
      "title": "Routing: Redirecting | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "There are a few ways you can handle redirects in Next.js. This page will go through each available option, use cases, and how to manage large numbers of redirects."
        },
        {
          "type": "p",
          "text": "Theredirectfunction allows you to redirect the user to another URL. You can callredirectinServer Components,Route Handlers, andServer Actions. redirectis often used after a mutation or event. For example, creating a post:"
        },
        {
          "type": "code",
          "code": "'use server'import{ redirect }from'next/navigation'import{ revalidatePath }from'next/cache'exportasyncfunctioncreatePost(id:string) {try{// Call database}catch(error) {// Handle errors}revalidatePath('/posts')// Update cached postsredirect(`/post/${id}`)// Navigate to the new post page}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "redirectreturns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.",
            "redirectinternally throws an error so it should be called outside oftry/catchblocks.",
            "redirectcan be called in Client Components during the rendering process but not in event handlers. You can use theuseRouterhookinstead.",
            "redirectalso accepts absolute URLs and can be used to redirect to external links.",
            "If you'd like to redirect before the render process, usenext.config.jsorMiddleware."
          ]
        },
        {
          "type": "p",
          "text": "See theredirectAPI referencefor more information."
        },
        {
          "type": "p",
          "text": "ThepermanentRedirectfunction allows you topermanentlyredirect the user to another URL. You can callpermanentRedirectinServer Components,Route Handlers, andServer Actions. permanentRedirectis often used after a mutation or event that changes an entity's canonical URL, such as updating a user's profile URL after they change their username:"
        },
        {
          "type": "code",
          "code": "'use server'import{ permanentRedirect }from'next/navigation'import{ revalidateTag }from'next/cache'exportasyncfunctionupdateUsername(username:string,formData:FormData) {try{// Call database}catch(error) {// Handle errors}revalidateTag('username')// Update all references to the usernamepermanentRedirect(`/profile/${username}`)// Navigate to the new user profile}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "permanentRedirectreturns a 308 (permanent redirect) status code by default.",
            "permanentRedirectalso accepts absolute URLs and can be used to redirect to external links.",
            "If you'd like to redirect before the render process, usenext.config.jsorMiddleware."
          ]
        },
        {
          "type": "p",
          "text": "See thepermanentRedirectAPI referencefor more information."
        },
        {
          "type": "p",
          "text": "If you need to redirect inside an event handler in a Client Component, you can use thepushmethod from theuseRouterhook. For example:"
        },
        {
          "type": "code",
          "code": "'use client'import{ useRouter }from'next/navigation'exportdefaultfunctionPage() {constrouter=useRouter()return(<buttontype=\"button\"onClick={()=>router.push('/dashboard')}>Dashboard</button>)}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If you don't need to programmatically navigate a user, you should use a<Link>component."
          ]
        },
        {
          "type": "p",
          "text": "See theuseRouterAPI referencefor more information."
        },
        {
          "type": "p",
          "text": "Theredirectsoption in thenext.config.jsfile allows you to redirect an incoming request path to a different destination path. This is useful when you change the URL structure of pages or have a list of redirects that are known ahead of time. redirectssupportspath,header, cookie, and query matching, giving you the flexibility to redirect users based on an incoming request. To useredirects, add the option to yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "module.exports={asyncredirects() {return[// Basic redirect{source:'/about',destination:'/',permanent:true,},// Wildcard path matching{source:'/blog/:slug',destination:'/news/:slug',permanent:true,},]},}"
        },
        {
          "type": "p",
          "text": "See theredirectsAPI referencefor more information."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "redirectscan return a 307 (Temporary Redirect) or 308 (Permanent Redirect) status code with thepermanentoption.",
            "redirectsmay have a limit on platforms. For example, on Vercel, there's a limit of 1,024 redirects. To manage a large number of redirects (1000+), consider creating a custom solution usingMiddleware. Seemanaging redirects at scalefor more.",
            "redirectsrunsbeforeMiddleware."
          ]
        },
        {
          "type": "p",
          "text": "Middleware allows you to run code before a request is completed. Then, based on the incoming request, redirect to a different URL usingNextResponse.redirect. This is useful if you want to redirect users based on a condition (e.g. authentication, session management, etc) or havea large number of redirects. For example, to redirect the user to a/loginpage if they are not authenticated:"
        },
        {
          "type": "code",
          "code": "import{ NextResponse,NextRequest }from'next/server'import{ authenticate }from'auth-provider'exportfunctionmiddleware(request:NextRequest) {constisAuthenticated=authenticate(request)// If the user is authenticated, continue as normalif(isAuthenticated) {returnNextResponse.next()}// Redirect to login page if not authenticatedreturnNextResponse.redirect(newURL('/login',request.url))}exportconstconfig={matcher:'/dashboard/:path*',}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Middleware runsafterredirectsinnext.config.jsandbeforerendering."
          ]
        },
        {
          "type": "p",
          "text": "See theMiddlewaredocumentation for more information."
        },
        {
          "type": "p",
          "text": "To manage a large number of redirects (1000+), you may consider creating a custom solution using Middleware. This allows you to handle redirects programmatically without having to redeploy your application. To do this, you'll need to consider:"
        },
        {
          "type": "list",
          "items": [
            "Creating and storing a redirect map.",
            "Optimizing data lookup performance."
          ]
        },
        {
          "type": "p",
          "text": "Next.js Example: See ourMiddleware with Bloom filterexample for an implementation of the recommendations below."
        },
        {
          "type": "p",
          "text": "A redirect map is a list of redirects that you can store in a database (usually a key-value store) or JSON file. Consider the following data structure:"
        },
        {
          "type": "code",
          "code": "{\"/old\":{\"destination\":\"/new\",\"permanent\":true},\"/blog/post-old\":{\"destination\":\"/blog/post-new\",\"permanent\":true}}"
        },
        {
          "type": "p",
          "text": "InMiddleware, you can read from a database such as Vercel'sEdge ConfigorRedis, and redirect the user based on the incoming request:"
        },
        {
          "type": "code",
          "code": "import{ NextResponse,NextRequest }from'next/server'import{ get }from'@vercel/edge-config'typeRedirectEntry={destination:stringpermanent:boolean}exportasyncfunctionmiddleware(request:NextRequest) {constpathname=request.nextUrl.pathnameconstredirectData=awaitget(pathname)if(redirectData&&typeofredirectData==='string') {constredirectEntry:RedirectEntry=JSON.parse(redirectData)conststatusCode=redirectEntry.permanent?308:307returnNextResponse.redirect(redirectEntry.destination,statusCode)}// No redirect found, continue without redirectingreturnNextResponse.next()}"
        },
        {
          "type": "p",
          "text": "Reading a large dataset for every incoming request can be slow and expensive. There are two ways you can optimize data lookup performance:"
        },
        {
          "type": "list",
          "items": [
            "Use a database that is optimized for fast reads, such asVercel Edge ConfigorRedis.",
            "Use a data lookup strategy such as aBloom filterto efficiently check if a redirect existsbeforereading the larger redirects file or database."
          ]
        },
        {
          "type": "p",
          "text": "Considering the previous example, you can import a generated bloom filter file into Middleware, then, check if the incoming request pathname exists in the bloom filter. If it does, forward the request to aRoute Handlerwhich will check the actual file and redirect the user to the appropriate URL. This avoids importing a large redirects file into Middleware, which can slow down every incoming request."
        },
        {
          "type": "code",
          "code": "import{ NextResponse,NextRequest }from'next/server'import{ ScalableBloomFilter }from'bloom-filters'importGeneratedBloomFilterfrom'./redirects/bloom-filter.json'typeRedirectEntry={destination:stringpermanent:boolean}// Initialize bloom filter from a generated JSON fileconstbloomFilter=ScalableBloomFilter.fromJSON(GeneratedBloomFilterasany)exportasyncfunctionmiddleware(request:NextRequest) {// Get the path for the incoming requestconstpathname=request.nextUrl.pathname// Check if the path is in the bloom filterif(bloomFilter.has(pathname)) {// Forward the pathname to the Route Handlerconstapi=newURL(`/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,request.nextUrl.origin)try{// Fetch redirect data from the Route HandlerconstredirectData=awaitfetch(api)if(redirectData.ok) {constredirectEntry:RedirectEntry|undefined=awaitredirectData.json()if(redirectEntry) {// Determine the status codeconststatusCode=redirectEntry.permanent?308:307// Redirect to the destinationreturnNextResponse.redirect(redirectEntry.destination,statusCode)}}}catch(error) {console.error(error)}}// No redirect found, continue the request without redirectingreturnNextResponse.next()}"
        },
        {
          "type": "p",
          "text": "Then, in the Route Handler:"
        },
        {
          "type": "code",
          "code": "import{ NextRequest,NextResponse }from'next/server'importredirectsfrom'@/app/redirects/redirects.json'typeRedirectEntry={destination:stringpermanent:boolean}exportfunctionGET(request:NextRequest) {constpathname=request.nextUrl.searchParams.get('pathname')if(!pathname) {returnnewResponse('Bad Request',{ status:400})}// Get the redirect entry from the redirects.json fileconstredirect=(redirectsasRecord<string,RedirectEntry>)[pathname]// Account for bloom filter false positivesif(!redirect) {returnnewResponse('No redirect',{ status:400})}// Return the redirect entryreturnNextResponse.json(redirect)}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "To generate a bloom filter, you can use a library likebloom-filters.",
            "You should validate requests made to your Route Handler to prevent malicious requests."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups",
      "title": "Routing: Route Groups | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "In theappdirectory, nested folders are normally mapped to URL paths. However, you can mark a folder as aRoute Groupto prevent the folder from being included in the route's URL path. This allows you to organize your route segments and project files into logical groups without affecting the URL path structure. Route groups are useful for:"
        },
        {
          "type": "list",
          "items": [
            "Organizing routes into groupse.g. by site section, intent, or team.",
            "Enablingnested layoutsin the same route segment level:Creating multiple nested layouts in the same segment, including multiple root layoutsAdding a layout to a subset of routes in a common segment",
            "Creating multiple nested layouts in the same segment, including multiple root layouts",
            "Adding a layout to a subset of routes in a common segment",
            "Adding a loading skeleton to specific route in a common segment"
          ]
        },
        {
          "type": "p",
          "text": "A route group can be created by wrapping a folder's name in parenthesis:(folderName)"
        },
        {
          "type": "p",
          "text": "To organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g.(marketing)or(shop)."
        },
        {
          "type": "p",
          "text": "Even though routes inside(marketing)and(shop)share the same URL hierarchy, you can create a different layout for each group by adding alayout.jsfile inside their folders."
        },
        {
          "type": "p",
          "text": "To opt specific routes into a layout, create a new route group (e.g.(shop)) and move the routes that share the same layout into the group (e.g.accountandcart). The routes outside of the group will not share the layout (e.g.checkout)."
        },
        {
          "type": "p",
          "text": "To apply aloading skeletonvia aloading.jsfile to a specific route, create a new route group (e.g.,/(overview)) and then move yourloading.tsxinside that route group."
        },
        {
          "type": "p",
          "text": "Now, theloading.tsxfile will only apply to your dashboard → overview page instead of all your dashboard pages without affecting the URL path structure."
        },
        {
          "type": "p",
          "text": "To create multipleroot layouts, remove the top-levellayout.jsfile, and add alayout.jsfile inside each route group. This is useful for partitioning an application into sections that have a completely different UI or experience. The<html>and<body>tags need to be added to each root layout."
        },
        {
          "type": "p",
          "text": "In the example above, both(marketing)and(shop)have their own root layout."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "The naming of route groups has no special significance other than for organization. They do not affect the URL path.",
            "Routes that include a route groupshould notresolve to the same URL path as other routes. For example, since route groups don't affect URL structure,(marketing)/about/page.jsand(shop)/about/page.jswould both resolve to/aboutand cause an error.",
            "If you use multiple root layouts without a top-levellayout.jsfile, your homepage.jsfile should be defined in one of the route groups, For example:app/(marketing)/page.js.",
            "Navigatingacross multiple root layoutswill cause afull page load(as opposed to a client-side navigation). For example, navigating from/cartthat usesapp/(shop)/layout.jsto/blogthat usesapp/(marketing)/layout.jswill cause a full page load. Thisonlyapplies to multiple root layouts."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/route-handlers",
      "title": "Routing: Route Handlers | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Route Handlers allow you to create custom request handlers for a given route using the WebRequestandResponseAPIs."
        },
        {
          "type": "p",
          "text": "Good to know: Route Handlers are only available inside theappdirectory. They are the equivalent ofAPI Routesinside thepagesdirectory meaning youdo notneed to use API Routes and Route Handlers together."
        },
        {
          "type": "p",
          "text": "Route Handlers are defined in aroute.js|tsfileinside theappdirectory:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request) {}"
        },
        {
          "type": "p",
          "text": "Route Handlers can be nested anywhere inside theappdirectory, similar topage.jsandlayout.js. But therecannotbe aroute.jsfile at the same route segment level aspage.js."
        },
        {
          "type": "p",
          "text": "The followingHTTP methodsare supported:GET,POST,PUT,PATCH,DELETE,HEAD, andOPTIONS. If an unsupported method is called, Next.js will return a405 Method Not Allowedresponse."
        },
        {
          "type": "p",
          "text": "In addition to supporting the nativeRequestandResponseAPIs, Next.js extends them withNextRequestandNextResponseto provide convenient helpers for advanced use cases."
        },
        {
          "type": "p",
          "text": "Route Handlers are not cached by default. You can, however, opt into caching forGETmethods. Other supported HTTP methods arenotcached. To cache aGETmethod, use aroute config optionsuch asexport const dynamic = 'force-static'in your Route Handler file."
        },
        {
          "type": "code",
          "code": "exportconstdynamic='force-static'exportasyncfunctionGET() {constres=awaitfetch('https://data.mongodb-api.com/...',{headers:{'Content-Type':'application/json','API-Key':process.env.DATA_API_KEY,},})constdata=awaitres.json()returnResponse.json({ data })}"
        },
        {
          "type": "p",
          "text": "Good to know: Other supported HTTP methods arenotcached, even if they are placed alongside aGETmethod that is cached, in the same file."
        },
        {
          "type": "p",
          "text": "Special Route Handlers likesitemap.ts,opengraph-image.tsx, andicon.tsx, and othermetadata filesremain static by default unless they use Dynamic APIs or dynamic config options."
        },
        {
          "type": "p",
          "text": "You can consider aroutethe lowest level routing primitive."
        },
        {
          "type": "list",
          "items": [
            "Theydo notparticipate in layouts or client-side navigations likepage.",
            "Therecannotbe aroute.jsfile at the same route aspage.js."
          ]
        },
        {
          "type": "p",
          "text": "Eachroute.jsorpage.jsfile takes over all HTTP verbs for that route."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {return<h1>Hello,Next.js!</h1>}// ❌ Conflict// `app/route.ts`exportasyncfunctionPOST(request:Request) {}"
        },
        {
          "type": "p",
          "text": "The following examples show how to combine Route Handlers with other Next.js APIs and features."
        },
        {
          "type": "p",
          "text": "You canrevalidate cached datausing Incremental Static Regeneration (ISR):"
        },
        {
          "type": "code",
          "code": "exportconstrevalidate=60exportasyncfunctionGET() {constdata=awaitfetch('https://api.vercel.app/blog')constposts=awaitdata.json()returnResponse.json(posts)}"
        },
        {
          "type": "p",
          "text": "You can read or set cookies withcookiesfromnext/headers. This server function can be called directly in a Route Handler, or nested inside of another function. Alternatively, you can return a newResponseusing theSet-Cookieheader."
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'exportasyncfunctionGET(request:Request) {constcookieStore=awaitcookies()consttoken=cookieStore.get('token')returnnewResponse('Hello, Next.js!',{status:200,headers:{'Set-Cookie':`token=${token.value}`},})}"
        },
        {
          "type": "p",
          "text": "You can also use the underlying Web APIs to read cookies from the request (NextRequest):"
        },
        {
          "type": "code",
          "code": "import{typeNextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {consttoken=request.cookies.get('token')}"
        },
        {
          "type": "p",
          "text": "You can read headers withheadersfromnext/headers. This server function can be called directly in a Route Handler, or nested inside of another function. Thisheadersinstance is read-only. To set headers, you need to return a newResponsewith newheaders."
        },
        {
          "type": "code",
          "code": "import{ headers }from'next/headers'exportasyncfunctionGET(request:Request) {constheadersList=awaitheaders()constreferer=headersList.get('referer')returnnewResponse('Hello, Next.js!',{status:200,headers:{ referer:referer },})}"
        },
        {
          "type": "p",
          "text": "You can also use the underlying Web APIs to read headers from the request (NextRequest):"
        },
        {
          "type": "code",
          "code": "import{typeNextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {constrequestHeaders=newHeaders(request.headers)}"
        },
        {
          "type": "code",
          "code": "import{ redirect }from'next/navigation'exportasyncfunctionGET(request:Request) {redirect('https://nextjs.org/')}"
        },
        {
          "type": "p",
          "text": "We recommend reading theDefining Routespage before continuing."
        },
        {
          "type": "p",
          "text": "Route Handlers can useDynamic Segmentsto create request handlers from dynamic data."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request,{ params }:{ params:Promise<{ slug:string}> }) {constslug=(awaitparams).slug// 'a', 'b', or 'c'}"
        },
        {
          "type": "p",
          "text": "The request object passed to the Route Handler is aNextRequestinstance, which hassome additional convenience methods, including for more easily handling query parameters."
        },
        {
          "type": "code",
          "code": "import{typeNextRequest }from'next/server'exportfunctionGET(request:NextRequest) {constsearchParams=request.nextUrl.searchParamsconstquery=searchParams.get('query')// query is \"hello\" for /api/search?query=hello}"
        },
        {
          "type": "p",
          "text": "Streaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI, for AI-generated content. Learn more about theAI SDK."
        },
        {
          "type": "code",
          "code": "import{ openai }from'@ai-sdk/openai'import{ StreamingTextResponse,streamText }from'ai'exportasyncfunctionPOST(req:Request) {const{messages}=awaitreq.json()constresult=awaitstreamText({model:openai('gpt-4-turbo'),messages,})returnnewStreamingTextResponse(result.toAIStream())}"
        },
        {
          "type": "p",
          "text": "These abstractions use the Web APIs to create a stream. You can also use the underlying Web APIs directly."
        },
        {
          "type": "code",
          "code": "// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_streamfunctioniteratorToStream(iterator:any) {returnnewReadableStream({asyncpull(controller) {const{value,done}=awaititerator.next()if(done) {controller.close()}else{controller.enqueue(value)}},})}functionsleep(time:number) {returnnewPromise((resolve)=>{setTimeout(resolve,time)})}constencoder=newTextEncoder()asyncfunction*makeIterator() {yieldencoder.encode('<p>One</p>')awaitsleep(200)yieldencoder.encode('<p>Two</p>')awaitsleep(200)yieldencoder.encode('<p>Three</p>')}exportasyncfunctionGET() {constiterator=makeIterator()conststream=iteratorToStream(iterator)returnnewResponse(stream)}"
        },
        {
          "type": "p",
          "text": "You can read theRequestbody using the standard Web API methods:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionPOST(request:Request) {constres=awaitrequest.json()returnResponse.json({ res })}"
        },
        {
          "type": "p",
          "text": "You can read theFormDatausing therequest.formData()function:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionPOST(request:Request) {constformData=awaitrequest.formData()constname=formData.get('name')constemail=formData.get('email')returnResponse.json({ name,email })}"
        },
        {
          "type": "p",
          "text": "SinceformDatadata are all strings, you may want to usezod-form-datato validate the request and retrieve data in the format you prefer (e.g.number)."
        },
        {
          "type": "p",
          "text": "You can set CORS headers for a specific Route Handler using the standard Web API methods:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request) {returnnewResponse('Hello, Next.js!',{status:200,headers:{'Access-Control-Allow-Origin':'*','Access-Control-Allow-Methods':'GET, POST, PUT, DELETE, OPTIONS','Access-Control-Allow-Headers':'Content-Type, Authorization',},})}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "To add CORS headers to multiple Route Handlers, you can useMiddlewareor thenext.config.jsfile.",
            "Alternatively, see ourCORS examplepackage."
          ]
        },
        {
          "type": "p",
          "text": "You can use a Route Handler to receive webhooks from third-party services:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionPOST(request:Request) {try{consttext=awaitrequest.text()// Process the webhook payload}catch(error) {returnnewResponse(`Webhook error:${error.message}`,{status:400,})}returnnewResponse('Success!',{status:200,})}"
        },
        {
          "type": "p",
          "text": "Notably, unlike API Routes with the Pages Router, you do not need to usebodyParserto use any additional configuration."
        },
        {
          "type": "p",
          "text": "You can use Route Handlers to return non-UI content. Note thatsitemap.xml,robots.txt,app icons, andopen graph imagesall have built-in support."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET() {returnnewResponse(`<?xml version=\"1.0\" encoding=\"UTF-8\" ?><rss version=\"2.0\"><channel><title>Next.js Documentation</title><link>https://nextjs.org/docs</link><description>The React Framework for the Web</description></channel></rss>`,{headers:{'Content-Type':'text/xml',},})}"
        },
        {
          "type": "p",
          "text": "Route Handlers use the sameroute segment configurationas pages and layouts."
        },
        {
          "type": "code",
          "code": "exportconstdynamic='auto'exportconstdynamicParams=trueexportconstrevalidate=falseexportconstfetchCache='auto'exportconstruntime='nodejs'exportconstpreferredRegion='auto'"
        },
        {
          "type": "p",
          "text": "See theAPI referencefor more details."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/routing/router-handlers",
      "title": "Routing: Route Handlers | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Route Handlers allow you to create custom request handlers for a given route using the WebRequestandResponseAPIs."
        },
        {
          "type": "p",
          "text": "Good to know: Route Handlers are only available inside theappdirectory. They are the equivalent ofAPI Routesinside thepagesdirectory meaning youdo notneed to use API Routes and Route Handlers together."
        },
        {
          "type": "p",
          "text": "Route Handlers are defined in aroute.js|tsfileinside theappdirectory:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request) {}"
        },
        {
          "type": "p",
          "text": "Route Handlers can be nested anywhere inside theappdirectory, similar topage.jsandlayout.js. But therecannotbe aroute.jsfile at the same route segment level aspage.js."
        },
        {
          "type": "p",
          "text": "The followingHTTP methodsare supported:GET,POST,PUT,PATCH,DELETE,HEAD, andOPTIONS. If an unsupported method is called, Next.js will return a405 Method Not Allowedresponse."
        },
        {
          "type": "p",
          "text": "In addition to supporting the nativeRequestandResponseAPIs, Next.js extends them withNextRequestandNextResponseto provide convenient helpers for advanced use cases."
        },
        {
          "type": "p",
          "text": "Route Handlers are not cached by default. You can, however, opt into caching forGETmethods. Other supported HTTP methods arenotcached. To cache aGETmethod, use aroute config optionsuch asexport const dynamic = 'force-static'in your Route Handler file."
        },
        {
          "type": "code",
          "code": "exportconstdynamic='force-static'exportasyncfunctionGET() {constres=awaitfetch('https://data.mongodb-api.com/...',{headers:{'Content-Type':'application/json','API-Key':process.env.DATA_API_KEY,},})constdata=awaitres.json()returnResponse.json({ data })}"
        },
        {
          "type": "p",
          "text": "Good to know: Other supported HTTP methods arenotcached, even if they are placed alongside aGETmethod that is cached, in the same file."
        },
        {
          "type": "p",
          "text": "Special Route Handlers likesitemap.ts,opengraph-image.tsx, andicon.tsx, and othermetadata filesremain static by default unless they use Dynamic APIs or dynamic config options."
        },
        {
          "type": "p",
          "text": "You can consider aroutethe lowest level routing primitive."
        },
        {
          "type": "list",
          "items": [
            "Theydo notparticipate in layouts or client-side navigations likepage.",
            "Therecannotbe aroute.jsfile at the same route aspage.js."
          ]
        },
        {
          "type": "p",
          "text": "Eachroute.jsorpage.jsfile takes over all HTTP verbs for that route."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {return<h1>Hello,Next.js!</h1>}// ❌ Conflict// `app/route.ts`exportasyncfunctionPOST(request:Request) {}"
        },
        {
          "type": "p",
          "text": "The following examples show how to combine Route Handlers with other Next.js APIs and features."
        },
        {
          "type": "p",
          "text": "You canrevalidate cached datausing Incremental Static Regeneration (ISR):"
        },
        {
          "type": "code",
          "code": "exportconstrevalidate=60exportasyncfunctionGET() {constdata=awaitfetch('https://api.vercel.app/blog')constposts=awaitdata.json()returnResponse.json(posts)}"
        },
        {
          "type": "p",
          "text": "You can read or set cookies withcookiesfromnext/headers. This server function can be called directly in a Route Handler, or nested inside of another function. Alternatively, you can return a newResponseusing theSet-Cookieheader."
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'exportasyncfunctionGET(request:Request) {constcookieStore=awaitcookies()consttoken=cookieStore.get('token')returnnewResponse('Hello, Next.js!',{status:200,headers:{'Set-Cookie':`token=${token.value}`},})}"
        },
        {
          "type": "p",
          "text": "You can also use the underlying Web APIs to read cookies from the request (NextRequest):"
        },
        {
          "type": "code",
          "code": "import{typeNextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {consttoken=request.cookies.get('token')}"
        },
        {
          "type": "p",
          "text": "You can read headers withheadersfromnext/headers. This server function can be called directly in a Route Handler, or nested inside of another function. Thisheadersinstance is read-only. To set headers, you need to return a newResponsewith newheaders."
        },
        {
          "type": "code",
          "code": "import{ headers }from'next/headers'exportasyncfunctionGET(request:Request) {constheadersList=awaitheaders()constreferer=headersList.get('referer')returnnewResponse('Hello, Next.js!',{status:200,headers:{ referer:referer },})}"
        },
        {
          "type": "p",
          "text": "You can also use the underlying Web APIs to read headers from the request (NextRequest):"
        },
        {
          "type": "code",
          "code": "import{typeNextRequest }from'next/server'exportasyncfunctionGET(request:NextRequest) {constrequestHeaders=newHeaders(request.headers)}"
        },
        {
          "type": "code",
          "code": "import{ redirect }from'next/navigation'exportasyncfunctionGET(request:Request) {redirect('https://nextjs.org/')}"
        },
        {
          "type": "p",
          "text": "We recommend reading theDefining Routespage before continuing."
        },
        {
          "type": "p",
          "text": "Route Handlers can useDynamic Segmentsto create request handlers from dynamic data."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request,{ params }:{ params:Promise<{ slug:string}> }) {constslug=(awaitparams).slug// 'a', 'b', or 'c'}"
        },
        {
          "type": "p",
          "text": "The request object passed to the Route Handler is aNextRequestinstance, which hassome additional convenience methods, including for more easily handling query parameters."
        },
        {
          "type": "code",
          "code": "import{typeNextRequest }from'next/server'exportfunctionGET(request:NextRequest) {constsearchParams=request.nextUrl.searchParamsconstquery=searchParams.get('query')// query is \"hello\" for /api/search?query=hello}"
        },
        {
          "type": "p",
          "text": "Streaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI, for AI-generated content. Learn more about theAI SDK."
        },
        {
          "type": "code",
          "code": "import{ openai }from'@ai-sdk/openai'import{ StreamingTextResponse,streamText }from'ai'exportasyncfunctionPOST(req:Request) {const{messages}=awaitreq.json()constresult=awaitstreamText({model:openai('gpt-4-turbo'),messages,})returnnewStreamingTextResponse(result.toAIStream())}"
        },
        {
          "type": "p",
          "text": "These abstractions use the Web APIs to create a stream. You can also use the underlying Web APIs directly."
        },
        {
          "type": "code",
          "code": "// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_streamfunctioniteratorToStream(iterator:any) {returnnewReadableStream({asyncpull(controller) {const{value,done}=awaititerator.next()if(done) {controller.close()}else{controller.enqueue(value)}},})}functionsleep(time:number) {returnnewPromise((resolve)=>{setTimeout(resolve,time)})}constencoder=newTextEncoder()asyncfunction*makeIterator() {yieldencoder.encode('<p>One</p>')awaitsleep(200)yieldencoder.encode('<p>Two</p>')awaitsleep(200)yieldencoder.encode('<p>Three</p>')}exportasyncfunctionGET() {constiterator=makeIterator()conststream=iteratorToStream(iterator)returnnewResponse(stream)}"
        },
        {
          "type": "p",
          "text": "You can read theRequestbody using the standard Web API methods:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionPOST(request:Request) {constres=awaitrequest.json()returnResponse.json({ res })}"
        },
        {
          "type": "p",
          "text": "You can read theFormDatausing therequest.formData()function:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionPOST(request:Request) {constformData=awaitrequest.formData()constname=formData.get('name')constemail=formData.get('email')returnResponse.json({ name,email })}"
        },
        {
          "type": "p",
          "text": "SinceformDatadata are all strings, you may want to usezod-form-datato validate the request and retrieve data in the format you prefer (e.g.number)."
        },
        {
          "type": "p",
          "text": "You can set CORS headers for a specific Route Handler using the standard Web API methods:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request) {returnnewResponse('Hello, Next.js!',{status:200,headers:{'Access-Control-Allow-Origin':'*','Access-Control-Allow-Methods':'GET, POST, PUT, DELETE, OPTIONS','Access-Control-Allow-Headers':'Content-Type, Authorization',},})}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "To add CORS headers to multiple Route Handlers, you can useMiddlewareor thenext.config.jsfile.",
            "Alternatively, see ourCORS examplepackage."
          ]
        },
        {
          "type": "p",
          "text": "You can use a Route Handler to receive webhooks from third-party services:"
        },
        {
          "type": "code",
          "code": "exportasyncfunctionPOST(request:Request) {try{consttext=awaitrequest.text()// Process the webhook payload}catch(error) {returnnewResponse(`Webhook error:${error.message}`,{status:400,})}returnnewResponse('Success!',{status:200,})}"
        },
        {
          "type": "p",
          "text": "Notably, unlike API Routes with the Pages Router, you do not need to usebodyParserto use any additional configuration."
        },
        {
          "type": "p",
          "text": "You can use Route Handlers to return non-UI content. Note thatsitemap.xml,robots.txt,app icons, andopen graph imagesall have built-in support."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET() {returnnewResponse(`<?xml version=\"1.0\" encoding=\"UTF-8\" ?><rss version=\"2.0\"><channel><title>Next.js Documentation</title><link>https://nextjs.org/docs</link><description>The React Framework for the Web</description></channel></rss>`,{headers:{'Content-Type':'text/xml',},})}"
        },
        {
          "type": "p",
          "text": "Route Handlers use the sameroute segment configurationas pages and layouts."
        },
        {
          "type": "code",
          "code": "exportconstdynamic='auto'exportconstdynamicParams=trueexportconstrevalidate=falseexportconstfetchCache='auto'exportconstruntime='nodejs'exportconstpreferredRegion='auto'"
        },
        {
          "type": "p",
          "text": "See theAPI referencefor more details."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/styling",
      "title": "Building Your Application: Styling | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js supports different ways of styling your application, including:"
        },
        {
          "type": "list",
          "items": [
            "CSS Modules: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.",
            "Global CSS: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.",
            "Tailwind CSS: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.",
            "Sass: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.",
            "CSS-in-JS: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling."
          ]
        },
        {
          "type": "p",
          "text": "Learn more about each approach by exploring their respective documentation:"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/styling/css",
      "title": "Building Your Application: Styling | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js supports different ways of styling your application, including:"
        },
        {
          "type": "list",
          "items": [
            "CSS Modules: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.",
            "Global CSS: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.",
            "Tailwind CSS: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.",
            "Sass: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.",
            "CSS-in-JS: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling."
          ]
        },
        {
          "type": "p",
          "text": "Learn more about each approach by exploring their respective documentation:"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/styling/css-in-js",
      "title": "Styling: CSS-in-JS | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Warning:CSS-in-JS libraries which require runtime JavaScript are not currently supported in Server Components. Using CSS-in-JS with newer React features like Server Components and Streaming requires library authors to support the latest version of React, includingconcurrent rendering. We're working with the React team on upstream APIs to handle CSS and JavaScript assets with support for React Server Components and streaming architecture."
        },
        {
          "type": "p",
          "text": "The following libraries are supported in Client Components in theappdirectory (alphabetical):"
        },
        {
          "type": "list",
          "items": [
            "ant-design",
            "chakra-ui",
            "@fluentui/react-components",
            "kuma-ui",
            "@mui/material",
            "@mui/joy",
            "pandacss",
            "styled-jsx",
            "styled-components",
            "stylex",
            "tamagui",
            "tss-react",
            "vanilla-extract"
          ]
        },
        {
          "type": "p",
          "text": "The following are currently working on support:"
        },
        {
          "type": "list",
          "items": ["emotion"]
        },
        {
          "type": "p",
          "text": "Good to know: We're testing out different CSS-in-JS libraries and we'll be adding more examples for libraries that support React 18 features and/or theappdirectory."
        },
        {
          "type": "p",
          "text": "If you want to style Server Components, we recommend usingCSS Modulesor other solutions that output CSS files, like PostCSS orTailwind CSS."
        },
        {
          "type": "p",
          "text": "Configuring CSS-in-JS is a three-step opt-in process that involves:"
        },
        {
          "type": "list",
          "items": [
            "Astyle registryto collect all CSS rules in a render.",
            "The newuseServerInsertedHTMLhook to inject rules before any content that might use them.",
            "A Client Component that wraps your app with the style registry during initial server-side rendering."
          ]
        },
        {
          "type": "p",
          "text": "Usingstyled-jsxin Client Components requires usingv5.1.0. First, create a new registry:"
        },
        {
          "type": "code",
          "code": "'use client'importReact,{ useState }from'react'import{ useServerInsertedHTML }from'next/navigation'import{ StyleRegistry,createStyleRegistry }from'styled-jsx'exportdefaultfunctionStyledJsxRegistry({children,}:{children:React.ReactNode}) {// Only create stylesheet once with lazy initial state// x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-stateconst[jsxStyleRegistry]=useState(()=>createStyleRegistry())useServerInsertedHTML(()=>{conststyles=jsxStyleRegistry.styles()jsxStyleRegistry.flush()return<>{styles}</>})return<StyleRegistryregistry={jsxStyleRegistry}>{children}</StyleRegistry>}"
        },
        {
          "type": "p",
          "text": "Then, wrap yourroot layoutwith the registry:"
        },
        {
          "type": "code",
          "code": "importStyledJsxRegistryfrom'./registry'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body><StyledJsxRegistry>{children}</StyledJsxRegistry></body></html>)}"
        },
        {
          "type": "p",
          "text": "View an example here."
        },
        {
          "type": "p",
          "text": "Below is an example of how to configurestyled-components@6or newer: First, enable styled-components innext.config.js."
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{styledComponents:true,},}"
        },
        {
          "type": "p",
          "text": "Then, use thestyled-componentsAPI to create a global registry component to collect all CSS style rules generated during a render, and a function to return those rules. Then use theuseServerInsertedHTMLhook to inject the styles collected in the registry into the<head>HTML tag in the root layout."
        },
        {
          "type": "code",
          "code": "'use client'importReact,{ useState }from'react'import{ useServerInsertedHTML }from'next/navigation'import{ ServerStyleSheet,StyleSheetManager }from'styled-components'exportdefaultfunctionStyledComponentsRegistry({children,}:{children:React.ReactNode}) {// Only create stylesheet once with lazy initial state// x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-stateconst[styledComponentsStyleSheet]=useState(()=>newServerStyleSheet())useServerInsertedHTML(()=>{conststyles=styledComponentsStyleSheet.getStyleElement()styledComponentsStyleSheet.instance.clearTag()return<>{styles}</>})if(typeofwindow!=='undefined')return<>{children}</>return(<StyleSheetManagersheet={styledComponentsStyleSheet.instance}>{children}</StyleSheetManager>)}"
        },
        {
          "type": "p",
          "text": "Wrap thechildrenof the root layout with the style registry component:"
        },
        {
          "type": "code",
          "code": "importStyledComponentsRegistryfrom'./lib/registry'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body><StyledComponentsRegistry>{children}</StyledComponentsRegistry></body></html>)}"
        },
        {
          "type": "p",
          "text": "View an example here."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "During server rendering, styles will be extracted to a global registry and flushed to the<head>of your HTML. This ensures the style rules are placed before any content that might use them. In the future, we may use an upcoming React feature to determine where to inject the styles.",
            "During streaming, styles from each chunk will be collected and appended to existing styles. After client-side hydration is complete,styled-componentswill take over as usual and inject any further dynamic styles.",
            "We specifically use a Client Component at the top level of the tree for the style registry because it's more efficient to extract CSS rules this way. It avoids re-generating styles on subsequent server renders, and prevents them from being sent in the Server Component payload.",
            "For advanced use cases where you need to configure individual properties of styled-components compilation, you can read ourNext.js styled-components API referenceto learn more."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/styling/sass",
      "title": "Styling: Sass | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js has built-in support for integrating with Sass after the package is installed using both the.scssand.sassextensions. You can use component-level Sass via CSS Modules and the.module.scssor.module.sassextension. First, installsass:"
        },
        {
          "type": "code",
          "code": "npminstall--save-devsass"
        },
        {
          "type": "p",
          "text": "Good to know: Sass supportstwo different syntaxes, each with their own extension.\nThe.scssextension requires you use theSCSS syntax,\nwhile the.sassextension requires you use theIndented Syntax (\"Sass\"). If you're not sure which to choose, start with the.scssextension which is a superset of CSS, and doesn't require you learn the\nIndented Syntax (\"Sass\")."
        },
        {
          "type": "p",
          "text": "If you want to configure your Sass options, usesassOptionsinnext.config."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={sassOptions:{additionalData:`$var: red;`,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "You can use theimplementationproperty to specify the Sass implementation to use. By default, Next.js uses thesasspackage."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={sassOptions:{implementation:'sass-embedded',},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Next.js supports Sass variables exported from CSS Module files. For example, using the exportedprimaryColorSass variable:"
        },
        {
          "type": "code",
          "code": "$primary-color:#64ff00;:export {primaryColor:$primary-color;}"
        },
        {
          "type": "code",
          "code": "// maps to root `/` URLimportvariablesfrom'./variables.module.scss'exportdefaultfunctionPage() {return<h1style={{ color:variables.primaryColor }}>Hello, Next.js!</h1>}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/styling/tailwind-css",
      "title": "Styling: Tailwind CSS | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Tailwind CSSis a utility-first CSS framework that works exceptionally well with Next.js."
        },
        {
          "type": "p",
          "text": "Install the Tailwind CSS packages and run theinitcommand to generate both thetailwind.config.jsandpostcss.config.jsfiles:"
        },
        {
          "type": "code",
          "code": "npminstall-Dtailwindcsspostcssautoprefixernpxtailwindcssinit-p"
        },
        {
          "type": "p",
          "text": "Inside your Tailwind configuration file, add paths to the files that will use Tailwind class names:"
        },
        {
          "type": "code",
          "code": "importtype{ Config }from'tailwindcss'constconfig:Config={content:['./app/**/*.{js,ts,jsx,tsx,mdx}',// Note the addition of the `app` directory.'./pages/**/*.{js,ts,jsx,tsx,mdx}','./components/**/*.{js,ts,jsx,tsx,mdx}',// Or if using `src` directory:'./src/**/*.{js,ts,jsx,tsx,mdx}',],theme:{extend:{},},plugins:[],}exportdefaultconfig"
        },
        {
          "type": "p",
          "text": "You do not need to modifypostcss.config.js."
        },
        {
          "type": "p",
          "text": "Add theTailwind CSS directivesthat Tailwind will use to inject its generated styles to aGlobal Stylesheetin your application, for example:"
        },
        {
          "type": "code",
          "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
        },
        {
          "type": "p",
          "text": "Inside theroot layout(app/layout.tsx), import theglobals.cssstylesheet to apply the styles to every route in your application."
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'// These styles apply to every route in the applicationimport'./globals.css'exportconstmetadata:Metadata={title:'Create Next App',description:'Generated by create next app',}exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "After installing Tailwind CSS and adding the global styles, you can use Tailwind's utility classes in your application."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {return<h1className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>}"
        },
        {
          "type": "p",
          "text": "As of Next.js 13.1, Tailwind CSS and PostCSS are supported withTurbopack."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/testing",
      "title": "Building Your Application: Testing | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "In React and Next.js, there are a few different types of tests you can write, each with its own purpose and use cases. This page provides an overview of types and commonly used tools you can use to test your application."
        },
        {
          "type": "list",
          "items": [
            "Unit Testinginvolves testing individual units (or blocks of code) in isolation. In React, a unit can be a single function, hook, or component.Component Testingis a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events.Integration Testinginvolves testing how multiple units work together. This can be a combination of components, hooks, and functions.",
            "Component Testingis a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events.",
            "Integration Testinginvolves testing how multiple units work together. This can be a combination of components, hooks, and functions.",
            "End-to-End (E2E) Testinginvolves testing user flows in an environment that simulates real user scenarios, like the browser. This means testing specific tasks (e.g. signup flow) in a production-like environment.",
            "Snapshot Testinginvolves capturing the rendered output of a component and saving it to a snapshot file. When tests run, the current rendered output of the component is compared against the saved snapshot. Changes in the snapshot are used to indicate unexpected changes in behavior."
          ]
        },
        {
          "type": "p",
          "text": "SinceasyncServer Components are new to the React ecosystem, some tools do not fully support them. In the meantime, we recommend usingEnd-to-End TestingoverUnit Testingforasynccomponents."
        },
        {
          "type": "p",
          "text": "See the guides below to learn how to set up Next.js with these commonly used testing tools:"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/testing/cypress",
      "title": "Testing: Cypress | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Cypressis a test runner used forEnd-to-End (E2E)andComponent Testing. This page will show you how to set up Cypress with Next.js and write your first tests."
        },
        {
          "type": "p",
          "text": "Warning:"
        },
        {
          "type": "list",
          "items": [
            "Cypress versions below 13.6.3 do not supportTypeScript version 5withmoduleResolution:\"bundler\". However, this issue has been resolved in Cypress version 13.6.3 and later.cypress v13.6.3"
          ]
        },
        {
          "type": "p",
          "text": "You can usecreate-next-appwith thewith-cypress exampleto quickly get started."
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest--examplewith-cypresswith-cypress-app"
        },
        {
          "type": "p",
          "text": "To manually set up Cypress, installcypressas a dev dependency:"
        },
        {
          "type": "code",
          "code": "npminstall-Dcypress# oryarnadd-Dcypress# orpnpminstall-Dcypress"
        },
        {
          "type": "p",
          "text": "Add the Cypressopencommand to thepackage.jsonscripts field:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\",\"lint\":\"next lint\",\"cypress:open\":\"cypress open\"}}"
        },
        {
          "type": "p",
          "text": "Run Cypress for the first time to open the Cypress testing suite:"
        },
        {
          "type": "code",
          "code": "npmruncypress:open"
        },
        {
          "type": "p",
          "text": "You can choose to configureE2E Testingand/orComponent Testing. Selecting any of these options will automatically create acypress.config.jsfile and acypressfolder in your project."
        },
        {
          "type": "p",
          "text": "Ensure yourcypress.configfile has the following configuration:"
        },
        {
          "type": "code",
          "code": "import{ defineConfig }from'cypress'exportdefaultdefineConfig({e2e:{setupNodeEvents(on,config) {},},})"
        },
        {
          "type": "p",
          "text": "Then, create two new Next.js files:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>Home</h1><Linkhref=\"/about\">About</Link></div>)}"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>About</h1><Linkhref=\"/\">Home</Link></div>)}"
        },
        {
          "type": "p",
          "text": "Add a test to check your navigation is working correctly:"
        },
        {
          "type": "code",
          "code": "describe('Navigation',()=>{it('should navigate to the about page',()=>{// Start from the index pagecy.visit('http://localhost:3000/')// Find a link with an href attribute containing \"about\" and click itcy.get('a[href*=\"about\"]').click()// The new url should include \"/about\"cy.url().should('include','/about')// The new page should contain an h1 with \"About\"cy.get('h1').contains('About')})})"
        },
        {
          "type": "p",
          "text": "Cypress will simulate a user navigating your application, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave. Runnpm run build && npm run startto build your Next.js application, then runnpm run cypress:openin another terminal window to start Cypress and run your E2E Testing suite."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "You can usecy.visit(\"/\")instead ofcy.visit(\"http://localhost:3000/\")by addingbaseUrl: 'http://localhost:3000'to thecypress.config.jsconfiguration file.",
            "Alternatively, you can install thestart-server-and-testpackage to run the Next.js production server in conjunction with Cypress. After installation, add\"test\": \"start-server-and-test start http://localhost:3000 cypress\"to yourpackage.jsonscripts field. Remember to rebuild your application after new changes."
          ]
        },
        {
          "type": "p",
          "text": "Component tests build and mount a specific component without having to bundle your whole application or start a server. SelectComponent Testingin the Cypress app, then selectNext.jsas your front-end framework. Acypress/componentfolder will be created in your project, and acypress.config.jsfile will be updated to enable Component Testing. Ensure yourcypress.configfile has the following configuration:"
        },
        {
          "type": "code",
          "code": "import{ defineConfig }from'cypress'exportdefaultdefineConfig({component:{devServer:{framework:'next',bundler:'webpack',},},})"
        },
        {
          "type": "p",
          "text": "Assuming the same components from the previous section, add a test to validate a component is rendering the expected output:"
        },
        {
          "type": "code",
          "code": "importPagefrom'../../app/page'describe('<Page />',()=>{it('should render and display expected content',()=>{// Mount the Reactcomponentfor the Home pagecy.mount(<Page/>)// The new page should contain an h1 with \"Home\"cy.get('h1').contains('Home')// Validate that a link with the expected URL is present// Following the link is better suited to an E2E testcy.get('a[href=\"/about\"]').should('be.visible')})})"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "Cypress currently doesn't support Component Testing forasyncServer Components. We recommend using E2E testing.",
            "Since component tests do not require a Next.js server, features like<Image />that rely on a server being available may not function out-of-the-box."
          ]
        },
        {
          "type": "p",
          "text": "Runnpm run cypress:openin your terminal to start Cypress and run your Component Testing suite."
        },
        {
          "type": "p",
          "text": "In addition to interactive testing, you can also run Cypress headlessly using thecypress runcommand, which is better suited for CI environments:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{//...\"e2e\":\"start-server-and-test dev http://localhost:3000 \\\"cypress open --e2e\\\"\",\"e2e:headless\":\"start-server-and-test dev http://localhost:3000 \\\"cypress run --e2e\\\"\",\"component\":\"cypress open --component\",\"component:headless\":\"cypress run --component\"}}"
        },
        {
          "type": "p",
          "text": "You can learn more about Cypress and Continuous Integration from these resources:"
        },
        {
          "type": "list",
          "items": [
            "Next.js with Cypress example",
            "Cypress Continuous Integration Docs",
            "Cypress GitHub Actions Guide",
            "Official Cypress GitHub Action",
            "Cypress Discord"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/testing/jest",
      "title": "Testing: Jest | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Jest and React Testing Library are frequently used together forUnit TestingandSnapshot Testing. This guide will show you how to set up Jest with Next.js and write your first tests."
        },
        {
          "type": "p",
          "text": "Good to know:SinceasyncServer Components are new to the React ecosystem, Jest currently does not support them. While you can still rununit testsfor synchronous Server and Client Components, we recommend using anE2E testsforasynccomponents."
        },
        {
          "type": "p",
          "text": "You can usecreate-next-appwith the Next.jswith-jestexample to quickly get started:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest--examplewith-jestwith-jest-app"
        },
        {
          "type": "p",
          "text": "Since the release ofNext.js 12, Next.js now has built-in configuration for Jest. To set up Jest, installjestand the following packages as dev dependencies:"
        },
        {
          "type": "code",
          "code": "npminstall-Djestjest-environment-jsdom@testing-library/react@testing-library/dom@testing-library/jest-domts-node# oryarnadd-Djestjest-environment-jsdom@testing-library/react@testing-library/dom@testing-library/jest-domts-node# orpnpminstall-Djestjest-environment-jsdom@testing-library/react@testing-library/dom@testing-library/jest-domts-node"
        },
        {
          "type": "p",
          "text": "Generate a basic Jest configuration file by running the following command:"
        },
        {
          "type": "code",
          "code": "npminitjest@latest# oryarncreatejest@latest# orpnpmcreatejest@latest"
        },
        {
          "type": "p",
          "text": "This will take you through a series of prompts to setup Jest for your project, including automatically creating ajest.config.ts|jsfile. Update your config file to usenext/jest. This transformer has all the necessary configuration options for Jest to work with Next.js:"
        },
        {
          "type": "code",
          "code": "importtype{ Config }from'jest'importnextJestfrom'next/jest.js'constcreateJestConfig=nextJest({// Provide the path to your Next.js app to load next.config.js and .env files in your test environmentdir:'./',})// Add any custom config to be passed to Jestconstconfig:Config={coverageProvider:'v8',testEnvironment:'jsdom',// Add more setup options before each test is run// setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],}// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is asyncexportdefaultcreateJestConfig(config)"
        },
        {
          "type": "p",
          "text": "Under the hood,next/jestis automatically configuring Jest for you, including:"
        },
        {
          "type": "list",
          "items": [
            "Setting uptransformusing theNext.js Compiler.",
            "Auto mocking stylesheets (.css,.module.css, and their scss variants), image imports andnext/font.",
            "Loading.env(and all variants) intoprocess.env.",
            "Ignoringnode_modulesfrom test resolving and transforms.",
            "Ignoring.nextfrom test resolving.",
            "Loadingnext.config.jsfor flags that enable SWC transforms."
          ]
        },
        {
          "type": "p",
          "text": "Good to know: To test environment variables directly, load them manually in a separate setup script or in yourjest.config.tsfile. For more information, please seeTest Environment Variables."
        },
        {
          "type": "p",
          "text": "If your project is usingModule Path Aliases, you will need to configure Jest to resolve the imports by matching the paths option in thejsconfig.jsonfile with themoduleNameMapperoption in thejest.config.jsfile. For example:"
        },
        {
          "type": "code",
          "code": "{\"compilerOptions\":{\"module\":\"esnext\",\"moduleResolution\":\"bundler\",\"baseUrl\":\"./\",\"paths\":{\"@/components/*\":[\"components/*\"]}}}"
        },
        {
          "type": "code",
          "code": "moduleNameMapper:{// ...'^@/components/(.*)$':'<rootDir>/components/$1',}"
        },
        {
          "type": "p",
          "text": "@testing-library/jest-domincludes a set of convenientcustom matcherssuch as.toBeInTheDocument()making it easier to write tests. You can import the custom matchers for every test by adding the following option to the Jest configuration file:"
        },
        {
          "type": "code",
          "code": "setupFilesAfterEnv:['<rootDir>/jest.setup.ts']"
        },
        {
          "type": "p",
          "text": "Then, insidejest.setup, add the following import:"
        },
        {
          "type": "code",
          "code": "import'@testing-library/jest-dom'"
        },
        {
          "type": "p",
          "text": "Good to know:extend-expectwas removed inv6.0, so if you are using@testing-library/jest-dombefore version 6, you will need to import@testing-library/jest-dom/extend-expectinstead."
        },
        {
          "type": "p",
          "text": "If you need to add more setup options before each test, you can add them to thejest.setupfile above."
        },
        {
          "type": "p",
          "text": "Finally, add a Jesttestscript to yourpackage.jsonfile:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\",\"test\":\"jest\",\"test:watch\":\"jest --watch\"}}"
        },
        {
          "type": "p",
          "text": "jest --watchwill re-run tests when a file is changed. For more Jest CLI options, please refer to theJest Docs."
        },
        {
          "type": "p",
          "text": "Your project is now ready to run tests. Create a folder called__tests__in your project's root directory. For example, we can add a test to check if the<Page />component successfully renders a heading:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>Home</h1><Linkhref=\"/about\">About</Link></div>)}"
        },
        {
          "type": "code",
          "code": "import'@testing-library/jest-dom'import{ render,screen }from'@testing-library/react'importPagefrom'../app/page'describe('Page',()=>{it('renders a heading',()=>{render(<Page/>)constheading=screen.getByRole('heading',{ level:1})expect(heading).toBeInTheDocument()})})"
        },
        {
          "type": "p",
          "text": "Optionally, add asnapshot testto keep track of any unexpected changes in your component:"
        },
        {
          "type": "code",
          "code": "import{ render }from'@testing-library/react'importPagefrom'../app/page'it('renders homepage unchanged',()=>{const{container}=render(<Page/>)expect(container).toMatchSnapshot()})"
        },
        {
          "type": "p",
          "text": "Then, run the following command to run your tests:"
        },
        {
          "type": "code",
          "code": "npmruntest# oryarntest# orpnpmtest"
        },
        {
          "type": "p",
          "text": "For further reading, you may find these resources helpful:"
        },
        {
          "type": "list",
          "items": [
            "Next.js with Jest example",
            "Jest Docs",
            "React Testing Library Docs",
            "Testing Playground- use good testing practices to match elements."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/testing/playwright",
      "title": "Testing: Playwright | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Playwright is a testing framework that lets you automate Chromium, Firefox, and WebKit with a single API. You can use it to writeEnd-to-End (E2E)testing. This guide will show you how to set up Playwright with Next.js and write your first tests."
        },
        {
          "type": "p",
          "text": "The fastest way to get started is to usecreate-next-appwith thewith-playwright example. This will create a Next.js project complete with Playwright configured."
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest--examplewith-playwrightwith-playwright-app"
        },
        {
          "type": "p",
          "text": "To install Playwright, run the following command:"
        },
        {
          "type": "code",
          "code": "npminitplaywright# oryarncreateplaywright# orpnpmcreateplaywright"
        },
        {
          "type": "p",
          "text": "This will take you through a series of prompts to setup and configure Playwright for your project, including adding aplaywright.config.tsfile. Please refer to thePlaywright installation guidefor the step-by-step guide."
        },
        {
          "type": "p",
          "text": "Create two new Next.js pages:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>Home</h1><Linkhref=\"/about\">About</Link></div>)}"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>About</h1><Linkhref=\"/\">Home</Link></div>)}"
        },
        {
          "type": "p",
          "text": "Then, add a test to verify that your navigation is working correctly:"
        },
        {
          "type": "code",
          "code": "import{ test,expect }from'@playwright/test'test('should navigate to the about page',async({ page })=>{// Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)awaitpage.goto('http://localhost:3000/')// Find an element with the text 'About' and click on itawaitpage.click('text=About')// The new URL should be \"/about\" (baseURL is used there)awaitexpect(page).toHaveURL('http://localhost:3000/about')// The new page should contain an h1 with \"About\"awaitexpect(page.locator('h1')).toContainText('About')})"
        },
        {
          "type": "p",
          "text": "Good to know: You can usepage.goto(\"/\")instead ofpage.goto(\"http://localhost:3000/\"), if you add\"baseURL\": \"http://localhost:3000\"to theplaywright.config.tsconfiguration file."
        },
        {
          "type": "p",
          "text": "Playwright will simulate a user navigating your application using three browsers: Chromium, Firefox and Webkit, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave. Runnpm run buildandnpm run start, then runnpx playwright testin another terminal window to run the Playwright tests."
        },
        {
          "type": "p",
          "text": "Good to know: Alternatively, you can use thewebServerfeature to let Playwright start the development server and wait until it's fully available."
        },
        {
          "type": "p",
          "text": "Playwright will by default run your tests in theheadless mode. To install all the Playwright dependencies, runnpx playwright install-deps. You can learn more about Playwright and Continuous Integration from these resources:"
        },
        {
          "type": "list",
          "items": [
            "Next.js with Playwright example",
            "Playwright on your CI provider",
            "Playwright Discord"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/testing/vitest",
      "title": "Testing: Vitest | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Vite and React Testing Library are frequently used together forUnit Testing. This guide will show you how to setup Vitest with Next.js and write your first tests."
        },
        {
          "type": "p",
          "text": "Good to know:SinceasyncServer Components are new to the React ecosystem, Vitest currently does not support them. While you can still rununit testsfor synchronous Server and Client Components, we recommend using anE2E testsforasynccomponents."
        },
        {
          "type": "p",
          "text": "You can usecreate-next-appwith the Next.jswith-vitestexample to quickly get started:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest--examplewith-vitestwith-vitest-app"
        },
        {
          "type": "p",
          "text": "To manually set up Vitest, installvitestand the following packages as dev dependencies: Create avitest.config.mts|jsfile in the root of your project, and add the following options:"
        },
        {
          "type": "code",
          "code": "import{ defineConfig }from'vitest/config'importreactfrom'@vitejs/plugin-react'importtsconfigPathsfrom'vite-tsconfig-paths'exportdefaultdefineConfig({plugins:[tsconfigPaths(),react()],test:{environment:'jsdom',},})"
        },
        {
          "type": "p",
          "text": "For more information on configuring Vitest, please refer to theVitest Configurationdocs. Then, add atestscript to yourpackage.json:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\",\"test\":\"vitest\"}}"
        },
        {
          "type": "p",
          "text": "When you runnpm run test, Vitest willwatchfor changes in your project by default."
        },
        {
          "type": "p",
          "text": "Check that everything is working by creating a test to check if the<Page />component successfully renders a heading:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'exportdefaultfunctionPage() {return(<div><h1>Home</h1><Linkhref=\"/about\">About</Link></div>)}"
        },
        {
          "type": "code",
          "code": "import{ expect,test }from'vitest'import{ render,screen }from'@testing-library/react'importPagefrom'../app/page'test('Page',()=>{render(<Page/>)expect(screen.getByRole('heading',{ level:1,name:'Home'})).toBeDefined()})"
        },
        {
          "type": "p",
          "text": "Good to know: The example above uses the common__tests__convention, but test files can also be colocated inside theapprouter."
        },
        {
          "type": "p",
          "text": "Then, run the following command to run your tests:"
        },
        {
          "type": "code",
          "code": "npmruntest# oryarntest# orpnpmtest# orbuntest"
        },
        {
          "type": "p",
          "text": "You may find these resources helpful:"
        },
        {
          "type": "list",
          "items": [
            "Next.js with Vitest example",
            "Vitest Docs",
            "React Testing Library Docs"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/upgrading",
      "title": "Building Your Application: Upgrading | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Upgrade your application to newer versions of Next.js or migrate from the Pages Router to the App Router."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/upgrading/app-router-migration",
      "title": "Upgrading: App Router Migration | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This guide will help you:"
        },
        {
          "type": "list",
          "items": [
            "Update your Next.js application from version 12 to version 13",
            "Upgrade features that work in both thepagesand theappdirectories",
            "Incrementally migrate your existing application frompagestoapp"
          ]
        },
        {
          "type": "p",
          "text": "The minimum Node.js version is nowv18.17. See theNode.js documentationfor more information."
        },
        {
          "type": "p",
          "text": "To update to Next.js version 13, run the following command using your preferred package manager:"
        },
        {
          "type": "code",
          "code": "npminstallnext@latestreact@latestreact-dom@latest"
        },
        {
          "type": "p",
          "text": "If you're using ESLint, you need to upgrade your ESLint version:"
        },
        {
          "type": "code",
          "code": "npminstall-Deslint-config-next@latest"
        },
        {
          "type": "p",
          "text": "Good to know: You may need to restart the ESLint server in VS Code for the ESLint changes to take effect. Open the Command Palette (cmd+shift+pon Mac;ctrl+shift+pon Windows) and search forESLint: Restart ESLint Server."
        },
        {
          "type": "p",
          "text": "After you've updated, see the following sections for next steps:"
        },
        {
          "type": "list",
          "items": [
            "Upgrade new features: A guide to help you upgrade to new features such as the improved Image and Link Components.",
            "Migrate from thepagestoappdirectory: A step-by-step guide to help you incrementally migrate from thepagesto theappdirectory."
          ]
        },
        {
          "type": "p",
          "text": "Next.js 13 introduced the newApp Routerwith new features and conventions. The new Router is available in theappdirectory and co-exists with thepagesdirectory. Upgrading to Next.js 13 doesnotrequire using the newApp Router. You can continue usingpageswith new features that work in both directories, such as the updatedImage component,Link component,Script component, andFont optimization."
        },
        {
          "type": "p",
          "text": "Next.js 12 introduced new improvements to the Image Component with a temporary import:next/future/image. These improvements included less client-side JavaScript, easier ways to extend and style images, better accessibility, and native browser lazy loading. In version 13, this new behavior is now the default fornext/image. There are two codemods to help you migrate to the new Image Component:"
        },
        {
          "type": "list",
          "items": [
            "next-image-to-legacy-imagecodemod: Safely and automatically renamesnext/imageimports tonext/legacy/image. Existing components will maintain the same behavior.",
            "next-image-experimentalcodemod: Dangerously adds inline styles and removes unused props. This will change the behavior of existing components to match the new defaults. To use this codemod, you need to run thenext-image-to-legacy-imagecodemod first."
          ]
        },
        {
          "type": "p",
          "text": "The<Link>Componentno longer requires manually adding an<a>tag as a child. This behavior was added as an experimental option inversion 12.2and is now the default. In Next.js 13,<Link>always renders<a>and allows you to forward props to the underlying tag. For example:"
        },
        {
          "type": "code",
          "code": "importLinkfrom'next/link'// Next.js 12: `<a>` has to be nested otherwise it's excluded<Linkhref=\"/about\"><a>About</a></Link>// Next.js 13: `<Link>` always renders `<a>` under the hood<Linkhref=\"/about\">About</Link>"
        },
        {
          "type": "p",
          "text": "To upgrade your links to Next.js 13, you can use thenew-linkcodemod."
        },
        {
          "type": "p",
          "text": "The behavior ofnext/scripthas been updated to support bothpagesandapp, but some changes need to be made to ensure a smooth migration:"
        },
        {
          "type": "list",
          "items": [
            "Move anybeforeInteractivescripts you previously included in_document.jsto the root layout file (app/layout.tsx).",
            "The experimentalworkerstrategy does not yet work inappand scripts denoted with this strategy will either have to be removed or modified to use a different strategy (e.g.lazyOnload).",
            "onLoad,onReady, andonErrorhandlers will not work in Server Components so make sure to move them to aClient Componentor remove them altogether."
          ]
        },
        {
          "type": "p",
          "text": "Previously, Next.js helped you optimize fonts byinlining font CSS. Version 13 introduces the newnext/fontmodule which gives you the ability to customize your font loading experience while still ensuring great performance and privacy.next/fontis supported in both thepagesandappdirectories. Whileinlining CSSstill works inpages, it does not work inapp. You should usenext/fontinstead. See theFont Optimizationpage to learn how to usenext/font."
        },
        {
          "type": "p",
          "text": "🎥 Watch:Learn how to incrementally adopt the App Router →YouTube (16 minutes)."
        },
        {
          "type": "p",
          "text": "Moving to the App Router may be the first time using React features that Next.js builds on top of such as Server Components, Suspense, and more. When combined with new Next.js features such asspecial filesandlayouts, migration means new concepts, mental models, and behavioral changes to learn. We recommend reducing the combined complexity of these updates by breaking down your migration into smaller steps. Theappdirectory is intentionally designed to work simultaneously with thepagesdirectory to allow for incremental page-by-page migration."
        },
        {
          "type": "list",
          "items": [
            "Theappdirectory supports nested routesandlayouts.Learn more.",
            "Use nested folders todefine routesand a specialpage.jsfile to make a route segment publicly accessible.Learn more.",
            "Special file conventionsare used to create UI for each route segment. The most common special files arepage.jsandlayout.js.Usepage.jsto define UI unique to a route.Uselayout.jsto define UI that is shared across multiple routes..js,.jsx, or.tsxfile extensions can be used for special files.",
            "Usepage.jsto define UI unique to a route.",
            "Uselayout.jsto define UI that is shared across multiple routes.",
            ".js,.jsx, or.tsxfile extensions can be used for special files.",
            "You can colocate other files inside theappdirectory such as components, styles, tests, and more.Learn more.",
            "Data fetching functions likegetServerSidePropsandgetStaticPropshave been replaced witha new APIinsideapp.getStaticPathshas been replaced withgenerateStaticParams.",
            "pages/_app.jsandpages/_document.jshave been replaced with a singleapp/layout.jsroot layout.Learn more.",
            "pages/_error.jshas been replaced with more granularerror.jsspecial files.Learn more.",
            "pages/404.jshas been replaced with thenot-found.jsfile.",
            "pages/api/*API Routes have been replaced with theroute.js(Route Handler) special file."
          ]
        },
        {
          "type": "p",
          "text": "Update to the latest Next.js version (requires 13.4 or greater):"
        },
        {
          "type": "code",
          "code": "npminstallnext@latest"
        },
        {
          "type": "p",
          "text": "Then, create a newappdirectory at the root of your project (orsrc/directory)."
        },
        {
          "type": "p",
          "text": "Create a newapp/layout.tsxfile inside theappdirectory. This is aroot layoutthat will apply to all routes insideapp."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({// Layouts must accept a children prop.// This will be populated with nested layouts or pageschildren,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
        },
        {
          "type": "list",
          "items": [
            "Theappdirectorymustinclude a root layout.",
            "The root layout must define<html>, and<body>tags since Next.js does not automatically create them",
            "The root layout replaces thepages/_app.tsxandpages/_document.tsxfiles.",
            ".js,.jsx, or.tsxextensions can be used for layout files."
          ]
        },
        {
          "type": "p",
          "text": "To manage<head>HTML elements, you can use thebuilt-in SEO support:"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'Home',description:'Welcome to Next.js',}"
        },
        {
          "type": "p",
          "text": "If you have an existing_appor_documentfile, you can copy the contents (e.g. global styles) to the root layout (app/layout.tsx). Styles inapp/layout.tsxwillnotapply topages/*. You should keep_app/_documentwhile migrating to prevent yourpages/*routes from breaking. Once fully migrated, you can then safely delete them. If you are using any React Context providers, they will need to be moved to aClient Component."
        },
        {
          "type": "p",
          "text": "Next.js recommended adding aproperty to Page componentsto achieve per-page layouts in thepagesdirectory. This pattern can be replaced with native support fornested layoutsin theappdirectory."
        },
        {
          "type": "p",
          "text": "Before"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionDashboardLayout({ children }) {return(<div><h2>My Dashboard</h2>{children}</div>)}"
        },
        {
          "type": "code",
          "code": "importDashboardLayoutfrom'../components/DashboardLayout'exportdefaultfunctionPage() {return<p>My Page</p>}Page.getLayout=functiongetLayout(page) {return<DashboardLayout>{page}</DashboardLayout>}"
        },
        {
          "type": "p",
          "text": "After"
        },
        {
          "type": "list",
          "items": [
            "Remove thePage.getLayoutproperty frompages/dashboard/index.jsand follow thesteps for migrating pagesto theappdirectory.app/dashboard/page.jsexportdefaultfunctionPage() {return<p>My Page</p>}",
            "Move the contents ofDashboardLayoutinto a newClient Componentto retainpagesdirectory behavior.app/dashboard/DashboardLayout.js'use client'// this directive should be at top of the file, before any imports.// This is a Client ComponentexportdefaultfunctionDashboardLayout({ children }) {return(<div><h2>My Dashboard</h2>{children}</div>)}",
            "Import theDashboardLayoutinto a newlayout.jsfile inside theappdirectory.app/dashboard/layout.jsimportDashboardLayoutfrom'./DashboardLayout'// This is a Server ComponentexportdefaultfunctionLayout({ children }) {return<DashboardLayout>{children}</DashboardLayout>}",
            "You can incrementally move non-interactive parts ofDashboardLayout.js(Client Component) intolayout.js(Server Component) to reduce the amount of component JavaScript you send to the client."
          ]
        },
        {
          "type": "p",
          "text": "In thepagesdirectory, thenext/headReact component is used to manage<head>HTML elements such astitleandmeta. In theappdirectory,next/headis replaced with the newbuilt-in SEO support. Before:"
        },
        {
          "type": "code",
          "code": "importHeadfrom'next/head'exportdefaultfunctionPage() {return(<><Head><title>My page title</title></Head></>)}"
        },
        {
          "type": "p",
          "text": "After:"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'My Page Title',}exportdefaultfunctionPage() {return'...'}"
        },
        {
          "type": "p",
          "text": "See all metadata options."
        },
        {
          "type": "list",
          "items": [
            "Pages in theappdirectoryareServer Componentsby default. This is different from thepagesdirectory where pages areClient Components.",
            "Data fetchinghas changed inapp.getServerSideProps,getStaticPropsandgetInitialPropshave been replaced with a simpler API.",
            "Theappdirectory uses nested folders todefine routesand a specialpage.jsfile to make a route segment publicly accessible.",
            "pagesDirectoryappDirectoryRouteindex.jspage.js/about.jsabout/page.js/aboutblog/[slug].jsblog/[slug]/page.js/blog/post-1"
          ]
        },
        {
          "type": "p",
          "text": "We recommend breaking down the migration of a page into two main steps:"
        },
        {
          "type": "list",
          "items": [
            "Step 1: Move the default exported Page Component into a new Client Component.",
            "Step 2: Import the new Client Component into a newpage.jsfile inside theappdirectory."
          ]
        },
        {
          "type": "p",
          "text": "Good to know: This is the easiest migration path because it has the most comparable behavior to thepagesdirectory."
        },
        {
          "type": "p",
          "text": "Step 1: Create a new Client Component"
        },
        {
          "type": "list",
          "items": [
            "Create a new separate file inside theappdirectory (i.e.app/home-page.tsxor similar) that exports a Client Component. To define Client Components, add the'use client'directive to the top of the file (before any imports).Similar to the Pages Router, there is anoptimization stepto prerender Client Components to static HTML on the initial page load.",
            "Similar to the Pages Router, there is anoptimization stepto prerender Client Components to static HTML on the initial page load.",
            "Move the default exported page component frompages/index.jstoapp/home-page.tsx."
          ]
        },
        {
          "type": "code",
          "code": "'use client'// This is a Client Component (same as components in the `pages` directory)// It receives data as props, has access to state and effects, and is// prerendered on the server during the initial page load.exportdefaultfunctionHomePage({ recentPosts }) {return(<div>{recentPosts.map((post)=>(<divkey={post.id}>{post.title}</div>))}</div>)}"
        },
        {
          "type": "p",
          "text": "Step 2: Create a new page"
        },
        {
          "type": "list",
          "items": [
            "Create a newapp/page.tsxfile inside theappdirectory. This is a Server Component by default.",
            "Import thehome-page.tsxClient Component into the page.",
            "If you were fetching data inpages/index.js, move the data fetching logic directly into the Server Component using the newdata fetching APIs. See thedata fetching upgrade guidefor more details.app/page.tsxTypeScriptJavaScriptTypeScript// Import your Client ComponentimportHomePagefrom'./home-page'asyncfunctiongetPosts() {constres=awaitfetch('https://...')constposts=awaitres.json()returnposts}exportdefaultasyncfunctionPage() {// Fetch data directly in a Server ComponentconstrecentPosts=awaitgetPosts()// Forward fetched data to your Client Componentreturn<HomePagerecentPosts={recentPosts} />}",
            "If your previous page useduseRouter, you'll need to update to the new routing hooks.Learn more.",
            "Start your development server and visithttp://localhost:3000. You should see your existing index route, now served through the app directory."
          ]
        },
        {
          "type": "p",
          "text": "A new router has been added to support the new behavior in theappdirectory. Inapp, you should use the three new hooks imported fromnext/navigation:useRouter(),usePathname(), anduseSearchParams()."
        },
        {
          "type": "list",
          "items": [
            "The newuseRouterhook is imported fromnext/navigationand has different behavior to theuseRouterhook inpageswhich is imported fromnext/router.TheuseRouterhook imported fromnext/routeris not supported in theappdirectory but can continue to be used in thepagesdirectory.",
            "TheuseRouterhook imported fromnext/routeris not supported in theappdirectory but can continue to be used in thepagesdirectory.",
            "The newuseRouterdoes not return thepathnamestring. Use the separateusePathnamehook instead.",
            "The newuseRouterdoes not return thequeryobject. Search parameters and dynamic route parameters are now separate. Use theuseSearchParamsanduseParamshooks instead.",
            "You can useuseSearchParamsandusePathnametogether to listen to page changes. See theRouter Eventssection for more details.",
            "These new hooks are only supported in Client Components. They cannot be used in Server Components."
          ]
        },
        {
          "type": "code",
          "code": "'use client'import{ useRouter,usePathname,useSearchParams }from'next/navigation'exportdefaultfunctionExampleClientComponent() {constrouter=useRouter()constpathname=usePathname()constsearchParams=useSearchParams()// ...}"
        },
        {
          "type": "p",
          "text": "In addition, the newuseRouterhook has the following changes:"
        },
        {
          "type": "list",
          "items": [
            "isFallbackhas been removed becausefallbackhasbeen replaced.",
            "Thelocale,locales,defaultLocales,domainLocalesvalues have been removed because built-in i18n Next.js features are no longer necessary in theappdirectory.Learn more about i18n.",
            "basePathhas been removed. The alternative will not be part ofuseRouter. It has not yet been implemented.",
            "asPathhas been removed because the concept ofashas been removed from the new router.",
            "isReadyhas been removed because it is no longer necessary. Duringstatic rendering, any component that uses theuseSearchParams()hook will skip the prerendering step and instead be rendered on the client at runtime.",
            "routehas been removed.usePathnameoruseSelectedLayoutSegments()provide an alternative."
          ]
        },
        {
          "type": "p",
          "text": "View theuseRouter()API reference."
        },
        {
          "type": "p",
          "text": "To keep components compatible between thepagesandapprouters, refer to theuseRouterhook fromnext/compat/router.\nThis is theuseRouterhook from thepagesdirectory, but intended to be used while sharing components between routers. Once you are ready to use it only on theapprouter, update to the newuseRouterfromnext/navigation."
        },
        {
          "type": "p",
          "text": "Thepagesdirectory usesgetServerSidePropsandgetStaticPropsto fetch data for pages. Inside theappdirectory, these previous data fetching functions are replaced with asimpler APIbuilt on top offetch()andasyncReact Server Components."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {// This request should be cached until manually invalidated.// Similar to `getStaticProps`.// `force-cache` is the default and can be omitted.conststaticData=awaitfetch(`https://...`,{ cache:'force-cache'})// This request should be refetched on every request.// Similar to `getServerSideProps`.constdynamicData=awaitfetch(`https://...`,{ cache:'no-store'})// This request should be cached with a lifetime of 10 seconds.// Similar to `getStaticProps` with the `revalidate` option.constrevalidatedData=awaitfetch(`https://...`,{next:{ revalidate:10},})return<div>...</div>}"
        },
        {
          "type": "p",
          "text": "In thepagesdirectory,getServerSidePropsis used to fetch data on the server and forward props to the default exported React component in the file. The initial HTML for the page is prerendered from the server, followed by \"hydrating\" the page in the browser (making it interactive)."
        },
        {
          "type": "code",
          "code": "// `pages` directoryexportasyncfunctiongetServerSideProps() {constres=awaitfetch(`https://...`)constprojects=awaitres.json()return{ props:{ projects } }}exportdefaultfunctionDashboard({ projects }) {return(<ul>{projects.map((project)=>(<likey={project.id}>{project.name}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "In the App Router, we can colocate our data fetching inside our React components usingServer Components. This allows us to send less JavaScript to the client, while maintaining the rendered HTML from the server. By setting thecacheoption tono-store, we can indicate that the fetched data shouldnever be cached. This is similar togetServerSidePropsin thepagesdirectory."
        },
        {
          "type": "code",
          "code": "// `app` directory// This function can be named anythingasyncfunctiongetProjects() {constres=awaitfetch(`https://...`,{ cache:'no-store'})constprojects=awaitres.json()returnprojects}exportdefaultasyncfunctionDashboard() {constprojects=awaitgetProjects()return(<ul>{projects.map((project)=>(<likey={project.id}>{project.name}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "In thepagesdirectory, you can retrieve request-based data based on the Node.js HTTP API. For example, you can retrieve thereqobject fromgetServerSidePropsand use it to retrieve the request's cookies and headers."
        },
        {
          "type": "code",
          "code": "// `pages` directoryexportasyncfunctiongetServerSideProps({ req,query }) {constauthHeader=req.getHeaders()['authorization'];consttheme=req.cookies['theme'];return{ props:{...}}}exportdefaultfunctionPage(props) {return...}"
        },
        {
          "type": "p",
          "text": "Theappdirectory exposes new read-only functions to retrieve request data:"
        },
        {
          "type": "list",
          "items": [
            "headers: Based on the Web Headers API, and can be used insideServer Componentsto retrieve request headers.",
            "cookies: Based on the Web Cookies API, and can be used insideServer Componentsto retrieve cookies."
          ]
        },
        {
          "type": "code",
          "code": "// `app` directoryimport{ cookies,headers }from'next/headers'asyncfunctiongetData() {constauthHeader=(awaitheaders()).get('authorization')return'...'}exportdefaultasyncfunctionPage() {// You can use `cookies` or `headers` inside Server Components// directly or in your data fetching functionconsttheme=(awaitcookies()).get('theme')constdata=awaitgetData()return'...'}"
        },
        {
          "type": "p",
          "text": "In thepagesdirectory, thegetStaticPropsfunction is used to pre-render a page at build time. This function can be used to fetch data from an external API or directly from a database, and pass this data down to the entire page as it's being generated during the build."
        },
        {
          "type": "code",
          "code": "// `pages` directoryexportasyncfunctiongetStaticProps() {constres=awaitfetch(`https://...`)constprojects=awaitres.json()return{ props:{ projects } }}exportdefaultfunctionIndex({ projects }) {returnprojects.map((project)=><div>{project.name}</div>)}"
        },
        {
          "type": "p",
          "text": "In theappdirectory, data fetching withfetch()will default tocache: 'force-cache', which will cache the request data until manually invalidated. This is similar togetStaticPropsin thepagesdirectory."
        },
        {
          "type": "code",
          "code": "// `app` directory// This function can be named anythingasyncfunctiongetProjects() {constres=awaitfetch(`https://...`)constprojects=awaitres.json()returnprojects}exportdefaultasyncfunctionIndex() {constprojects=awaitgetProjects()returnprojects.map((project)=><div>{project.name}</div>)}"
        },
        {
          "type": "p",
          "text": "In thepagesdirectory, thegetStaticPathsfunction is used to define the dynamic paths that should be pre-rendered at build time."
        },
        {
          "type": "code",
          "code": "// `pages` directoryimportPostLayoutfrom'@/components/post-layout'exportasyncfunctiongetStaticPaths() {return{paths:[{ params:{ id:'1'} },{ params:{ id:'2'} }],}}exportasyncfunctiongetStaticProps({ params }) {constres=awaitfetch(`https://.../posts/${params.id}`)constpost=awaitres.json()return{ props:{ post } }}exportdefaultfunctionPost({ post }) {return<PostLayoutpost={post} />}"
        },
        {
          "type": "p",
          "text": "In theappdirectory,getStaticPathsis replaced withgenerateStaticParams. generateStaticParamsbehaves similarly togetStaticPaths, but has a simplified API for returning route parameters and can be used insidelayouts. The return shape ofgenerateStaticParamsis an array of segments instead of an array of nestedparamobjects or a string of resolved paths."
        },
        {
          "type": "code",
          "code": "// `app` directoryimportPostLayoutfrom'@/components/post-layout'exportasyncfunctiongenerateStaticParams() {return[{ id:'1'},{ id:'2'}]}asyncfunctiongetPost(params) {constres=awaitfetch(`https://.../posts/${params.id}`)constpost=awaitres.json()returnpost}exportdefaultasyncfunctionPost({ params }) {constpost=awaitgetPost(params)return<PostLayoutpost={post} />}"
        },
        {
          "type": "p",
          "text": "Using the namegenerateStaticParamsis more appropriate thangetStaticPathsfor the new model in theappdirectory. Thegetprefix is replaced with a more descriptivegenerate, which sits better alone now thatgetStaticPropsandgetServerSidePropsare no longer necessary. ThePathssuffix is replaced byParams, which is more appropriate for nested routing with multiple dynamic segments."
        },
        {
          "type": "p",
          "text": "In thepagesdirectory, thefallbackproperty returned fromgetStaticPathsis used to define the behavior of a page that isn't pre-rendered at build time. This property can be set totrueto show a fallback page while the page is being generated,falseto show a 404 page, orblockingto generate the page at request time."
        },
        {
          "type": "code",
          "code": "// `pages` directoryexportasyncfunctiongetStaticPaths() {return{paths:[],fallback:'blocking'};}exportasyncfunctiongetStaticProps({ params }) {...}exportdefaultfunctionPost({ post }) {return...}"
        },
        {
          "type": "p",
          "text": "In theappdirectory theconfig.dynamicParamspropertycontrols how params outside ofgenerateStaticParamsare handled:"
        },
        {
          "type": "list",
          "items": [
            "true: (default) Dynamic segments not included ingenerateStaticParamsare generated on demand.",
            "false: Dynamic segments not included ingenerateStaticParamswill return a 404."
          ]
        },
        {
          "type": "p",
          "text": "This replaces thefallback: true | false | 'blocking'option ofgetStaticPathsin thepagesdirectory. Thefallback: 'blocking'option is not included indynamicParamsbecause the difference between'blocking'andtrueis negligible with streaming."
        },
        {
          "type": "code",
          "code": "// `app` directoryexportconstdynamicParams=true;exportasyncfunctiongenerateStaticParams() {return[...]}asyncfunctiongetPost(params) {...}exportdefaultasyncfunctionPost({ params }) {constpost=awaitgetPost(params);return...}"
        },
        {
          "type": "p",
          "text": "WithdynamicParamsset totrue(the default), when a route segment is requested that hasn't been generated, it will be server-rendered and cached."
        },
        {
          "type": "p",
          "text": "In thepagesdirectory, thegetStaticPropsfunction allows you to add arevalidatefield to automatically regenerate a page after a certain amount of time."
        },
        {
          "type": "code",
          "code": "// `pages` directoryexportasyncfunctiongetStaticProps() {constres=awaitfetch(`https://.../posts`)constposts=awaitres.json()return{props:{ posts },revalidate:60,}}exportdefaultfunctionIndex({ posts }) {return(<Layout><PostListposts={posts} /></Layout>)}"
        },
        {
          "type": "p",
          "text": "In theappdirectory, data fetching withfetch()can userevalidate, which will cache the request for the specified amount of seconds."
        },
        {
          "type": "code",
          "code": "// `app` directoryasyncfunctiongetPosts() {constres=awaitfetch(`https://.../posts`,{ next:{ revalidate:60} })constdata=awaitres.json()returndata.posts}exportdefaultasyncfunctionPostList() {constposts=awaitgetPosts()returnposts.map((post)=><div>{post.name}</div>)}"
        },
        {
          "type": "p",
          "text": "API Routes continue to work in thepages/apidirectory without any changes. However, they have been replaced byRoute Handlersin theappdirectory. Route Handlers allow you to create custom request handlers for a given route using the WebRequestandResponseAPIs."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionGET(request:Request) {}"
        },
        {
          "type": "p",
          "text": "Good to know: If you previously used API routes to call an external API from the client, you can now useServer Componentsinstead to securely fetch data. Learn more aboutdata fetching."
        },
        {
          "type": "p",
          "text": "In thepagesdirectory, global stylesheets are restricted to onlypages/_app.js. With theappdirectory, this restriction has been lifted. Global styles can be added to any layout, page, or component."
        },
        {
          "type": "list",
          "items": [
            "CSS Modules",
            "Tailwind CSS",
            "Global Styles",
            "CSS-in-JS",
            "External Stylesheets",
            "Sass"
          ]
        },
        {
          "type": "p",
          "text": "If you're using Tailwind CSS, you'll need to add theappdirectory to yourtailwind.config.jsfile:"
        },
        {
          "type": "code",
          "code": "module.exports={content:['./app/**/*.{js,ts,jsx,tsx,mdx}',// <-- Add this line'./pages/**/*.{js,ts,jsx,tsx,mdx}','./components/**/*.{js,ts,jsx,tsx,mdx}',],}"
        },
        {
          "type": "p",
          "text": "You'll also need to import your global styles in yourapp/layout.jsfile:"
        },
        {
          "type": "code",
          "code": "import'../styles/globals.css'exportdefaultfunctionRootLayout({ children }) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "Learn more aboutstyling with Tailwind CSS"
        },
        {
          "type": "p",
          "text": "Next.js provides Codemod transformations to help upgrade your codebase when a feature is deprecated. SeeCodemodsfor more information."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/upgrading/codemods",
      "title": "Upgrading: Codemods | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Codemods are transformations that run on your codebase programmatically. This allows a large number of changes to be programmatically applied without having to manually go through every file. Next.js provides Codemod transformations to help upgrade your Next.js codebase when an API is updated or deprecated."
        },
        {
          "type": "p",
          "text": "In your terminal, navigate (cd) into your project's folder, then run:"
        },
        {
          "type": "code",
          "code": "npx@next/codemod<transform><path>"
        },
        {
          "type": "p",
          "text": "Replacing<transform>and<path>with appropriate values."
        },
        {
          "type": "list",
          "items": [
            "transform- name of transform",
            "path- files or directory to transform",
            "--dryDo a dry-run, no code will be edited",
            "--printPrints the changed output for comparison"
          ]
        },
        {
          "type": "p",
          "text": "Note: This codemod is App Router specific."
        },
        {
          "type": "code",
          "code": "npx@next/codemod@latestapp-dir-runtime-config-experimental-edge."
        },
        {
          "type": "p",
          "text": "This codemod transformsRoute Segment Configruntimevalueexperimental-edgetoedge. For example:"
        },
        {
          "type": "code",
          "code": "exportconstruntime='experimental-edge'"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "exportconstruntime='edge'"
        },
        {
          "type": "p",
          "text": "APIs that opted into dynamic rendering that previously supported synchronous access are now asynchronous. You can read more about this breaking change in theupgrade guide."
        },
        {
          "type": "code",
          "code": "npx@next/codemod@latestnext-async-request-api."
        },
        {
          "type": "p",
          "text": "This codemod will transform dynamic APIs (cookies(),headers()anddraftMode()fromnext/headers) that are now asynchronous to be properly awaited or wrapped withReact.use()if applicable.\nWhen an automatic migration isn't possible, the codemod will either add a typecast (if a TypeScript file) or a comment to inform the user that it needs to be manually reviewed & updated. For example:"
        },
        {
          "type": "code",
          "code": "import{ cookies,headers }from'next/headers'consttoken=cookies().get('token')functionuseToken() {consttoken=cookies().get('token')returntoken}exportdefaultfunctionPage() {constname=cookies().get('name')}functiongetHeader() {returnheaders().get('x-foo')}"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "import{ use }from'react'import{cookies,headers,typeUnsafeUnwrappedCookies,typeUnsafeUnwrappedHeaders,}from'next/headers'consttoken=(cookies()asunknownasUnsafeUnwrappedCookies).get('token')functionuseToken() {consttoken=use(cookies()).get('token')returntoken}exportdefaultasyncfunctionPage() {constname=(awaitcookies()).get('name')}functiongetHeader() {return(headers()asunknownasUnsafeUnwrappedHeaders).get('x-foo')}"
        },
        {
          "type": "p",
          "text": "When we detect property access on theparamsorsearchParamsprops in the page / route entries (page.js,layout.js,route.js, ordefault.js) or thegenerateMetadata/generateViewportAPIs,\nit will attempt to transform the callsite from a sync to an async function, and await the property access. If it can't be made async (such as with a client component), it will useReact.useto unwrap the promise . For example:"
        },
        {
          "type": "code",
          "code": "// page.tsxexportdefaultfunctionPage({params,searchParams,}:{params:{ slug:string}searchParams:{ [key:string]:string|string[]|undefined}}) {const{value}=searchParamsif(value==='foo') {// ...}}exportfunctiongenerateMetadata({ params }:{ params:{ slug:string} }) {const{slug}=paramsreturn{title:`My Page -${slug}`,}}"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "// page.tsxexportdefaultasyncfunctionPage(props:{params:Promise<{ slug:string}>searchParams:Promise<{ [key:string]:string|string[]|undefined}>}) {constsearchParams=awaitprops.searchParamsconst{value}=searchParamsif(value==='foo') {// ...}}exportasyncfunctiongenerateMetadata(props:{params:Promise<{ slug:string}>}) {constparams=awaitprops.paramsconst{slug}=paramsreturn{title:`My Page -${slug}`,}}"
        },
        {
          "type": "p",
          "text": "Good to know:When this codemod identifies a spot that might require manual intervention, but we aren't able to determine the exact fix, it will add a comment or typecast to the code to inform the user that it needs to be manually updated. These comments are prefixed with@next/codemod, and typecasts are prefixed withUnsafeUnwrapped.\nYour build will error until these comments are explicitly removed.Read more."
        },
        {
          "type": "code",
          "code": "npx@next/codemod@latestnext-request-geo-ip."
        },
        {
          "type": "p",
          "text": "This codemod installs@vercel/functionsand transformsgeoandipproperties ofNextRequestwith corresponding@vercel/functionsfeatures. For example:"
        },
        {
          "type": "code",
          "code": "importtype{ NextRequest }from'next/server'exportfunctionGET(req:NextRequest) {const{geo,ip}=req}"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "importtype{ NextRequest }from'next/server'import{ geolocation,ipAddress }from'@vercel/functions'exportfunctionGET(req:NextRequest) {constgeo=geolocation(req)constip=ipAddress(req)}"
        },
        {
          "type": "code",
          "code": "npx@next/codemod@latestnext-og-import."
        },
        {
          "type": "p",
          "text": "This codemod moves transforms imports fromnext/servertonext/ogfor usage ofDynamic OG Image Generation. For example:"
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/server'"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "import{ ImageResponse }from'next/og'"
        },
        {
          "type": "code",
          "code": "npx@next/codemod@latestmetadata-to-viewport-export."
        },
        {
          "type": "p",
          "text": "This codemod migrates certain viewport metadata toviewportexport. For example:"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={title:'My App',themeColor:'dark',viewport:{width:1,},}"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "exportconstmetadata={title:'My App',}exportconstviewport={width:1,themeColor:'dark',}"
        },
        {
          "type": "code",
          "code": "npx@next/codemod@latestbuilt-in-next-font."
        },
        {
          "type": "p",
          "text": "This codemod uninstalls the@next/fontpackage and transforms@next/fontimports into the built-innext/font. For example:"
        },
        {
          "type": "code",
          "code": "import{ Inter }from'@next/font/google'"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "import{ Inter }from'next/font/google'"
        },
        {
          "type": "code",
          "code": "npx@next/codemod@latestnext-image-to-legacy-image."
        },
        {
          "type": "p",
          "text": "Safely renamesnext/imageimports in existing Next.js 10, 11, or 12 applications tonext/legacy/imagein Next.js 13. Also renamesnext/future/imagetonext/image. For example:"
        },
        {
          "type": "code",
          "code": "importImage1from'next/image'importImage2from'next/future/image'exportdefaultfunctionHome() {return(<div><Image1src=\"/test.jpg\"width=\"200\"height=\"300\"/><Image2src=\"/test.png\"width=\"500\"height=\"400\"/></div>)}"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "// 'next/image' becomes 'next/legacy/image'importImage1from'next/legacy/image'// 'next/future/image' becomes 'next/image'importImage2from'next/image'exportdefaultfunctionHome() {return(<div><Image1src=\"/test.jpg\"width=\"200\"height=\"300\"/><Image2src=\"/test.png\"width=\"500\"height=\"400\"/></div>)}"
        },
        {
          "type": "code",
          "code": "npx@next/codemod@latestnext-image-experimental."
        },
        {
          "type": "p",
          "text": "Dangerously migrates fromnext/legacy/imageto the newnext/imageby adding inline styles and removing unused props."
        },
        {
          "type": "list",
          "items": [
            "Removeslayoutprop and addsstyle.",
            "RemovesobjectFitprop and addsstyle.",
            "RemovesobjectPositionprop and addsstyle.",
            "RemoveslazyBoundaryprop.",
            "RemoveslazyRootprop."
          ]
        },
        {
          "type": "code",
          "code": "npx@next/codemod@latestnew-link."
        },
        {
          "type": "p",
          "text": "Remove<a>tags insideLink Components, or add alegacyBehaviorprop to Links that cannot be auto-fixed. For example:"
        },
        {
          "type": "code",
          "code": "<Linkhref=\"/about\"><a>About</a></Link>// transforms into<Linkhref=\"/about\">About</Link><Linkhref=\"/about\"><aonClick={()=>console.log('clicked')}>About</a></Link>// transforms into<Linkhref=\"/about\"onClick={()=>console.log('clicked')}>About</Link>"
        },
        {
          "type": "p",
          "text": "In cases where auto-fixing can't be applied, thelegacyBehaviorprop is added. This allows your app to keep functioning using the old behavior for that particular link."
        },
        {
          "type": "code",
          "code": "constComponent=()=><a>About</a><Linkhref=\"/about\"><Component/></Link>// becomes<Linkhref=\"/about\"legacyBehavior><Component/></Link>"
        },
        {
          "type": "code",
          "code": "npx@next/codemodcra-to-next"
        },
        {
          "type": "p",
          "text": "Migrates a Create React App project to Next.js; creating a Pages Router and necessary config to match behavior. Client-side only rendering is leveraged initially to prevent breaking compatibility due towindowusage during SSR and can be enabled seamlessly to allow the gradual adoption of Next.js specific features. Please share any feedback related to this transformin this discussion."
        },
        {
          "type": "code",
          "code": "npx@next/codemodadd-missing-react-import"
        },
        {
          "type": "p",
          "text": "Transforms files that do not importReactto include the import in order for the newReact JSX transformto work. For example:"
        },
        {
          "type": "code",
          "code": "exportdefaultclassHomeextendsReact.Component{render() {return<div>Hello World</div>}}"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "importReactfrom'react'exportdefaultclassHomeextendsReact.Component{render() {return<div>Hello World</div>}}"
        },
        {
          "type": "code",
          "code": "npx@next/codemodname-default-component"
        },
        {
          "type": "p",
          "text": "Versions 9 and above. Transforms anonymous components into named components to make sure they work withFast Refresh. For example:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunction() {return<div>Hello World</div>}"
        },
        {
          "type": "p",
          "text": "Transforms into:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionMyComponent() {return<div>Hello World</div>}"
        },
        {
          "type": "p",
          "text": "The component will have a camel-cased name based on the name of the file, and it also works with arrow functions."
        },
        {
          "type": "code",
          "code": "npx@next/codemodwithamp-to-config"
        },
        {
          "type": "p",
          "text": "Transforms thewithAmpHOC into Next.js 9 page configuration. For example:"
        },
        {
          "type": "code",
          "code": "// Beforeimport{ withAmp }from'next/amp'functionHome() {return<h1>My AMP Page</h1>}exportdefaultwithAmp(Home)"
        },
        {
          "type": "code",
          "code": "// AfterexportdefaultfunctionHome() {return<h1>My AMP Page</h1>}exportconstconfig={amp:true,}"
        },
        {
          "type": "code",
          "code": "npx@next/codemodurl-to-withrouter"
        },
        {
          "type": "p",
          "text": "Transforms the deprecated automatically injectedurlproperty on top level pages to usingwithRouterand therouterproperty it injects. Read more here:https://nextjs.org/docs/messages/url-deprecated For example:"
        },
        {
          "type": "code",
          "code": "importReactfrom'react'exportdefaultclassextendsReact.Component{render() {const{pathname}=this.props.urlreturn<div>Current pathname: {pathname}</div>}}"
        },
        {
          "type": "code",
          "code": "importReactfrom'react'import{ withRouter }from'next/router'exportdefaultwithRouter(classextendsReact.Component{render() {const{pathname}=this.props.routerreturn<div>Current pathname: {pathname}</div>}})"
        },
        {
          "type": "p",
          "text": "This is one case. All the cases that are transformed (and tested) can be found in the__testfixtures__directory."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/upgrading/from-create-react-app",
      "title": "Upgrading: Migrating from Create React App | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This guide will help you migrate an existing Create React App site to Next.js."
        },
        {
          "type": "p",
          "text": "There are several reasons why you might want to switch from Create React App to Next.js:"
        },
        {
          "type": "p",
          "text": "Create React App uses purely client-side React. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:"
        },
        {
          "type": "list",
          "items": [
            "The browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load data.",
            "Your application code grows with every new feature and dependency you add."
          ]
        },
        {
          "type": "p",
          "text": "The previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router."
        },
        {
          "type": "p",
          "text": "A common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data. While fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls."
        },
        {
          "type": "p",
          "text": "With built-in support forstreaming through React Suspense, you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls. This enables you to build pages that are faster to load and eliminatelayout shifts."
        },
        {
          "type": "p",
          "text": "Depending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN."
        },
        {
          "type": "p",
          "text": "Next.js Middlewareallows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation andinternationalization."
        },
        {
          "type": "p",
          "text": "Images,fonts, andthird-party scriptsoften have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you."
        },
        {
          "type": "p",
          "text": "Our goal with this migration is to get a working Next.js application as quickly as possible, so that you can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely client-side application (SPA) without migrating your existing router. This helps minimize the chances of encountering issues during the migration process and reduces merge conflicts."
        },
        {
          "type": "p",
          "text": "The first thing you need to do is to installnextas a dependency:"
        },
        {
          "type": "code",
          "code": "npminstallnext@latest"
        },
        {
          "type": "p",
          "text": "Create anext.config.mjsat the root of your project. This file will hold yourNext.js configuration options."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={output:'export',// Outputs a Single-Page Application (SPA).distDir:'./build',// Changes the build output directory to `./dist`.}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "A Next.jsApp Routerapplication must include aroot layoutfile, which is aReact Server Componentthat will wrap all pages in your application. This file is defined at the top level of theappdirectory. The closest equivalent to the root layout file in a CRA application is theindex.htmlfile, which contains your<html>,<head>, and<body>tags. In this step, you'll convert yourindex.htmlfile into a root layout file:"
        },
        {
          "type": "list",
          "items": [
            "Create a newappdirectory in yoursrcdirectory.",
            "Create a newlayout.tsxfile inside thatappdirectory:"
          ]
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return'...'}"
        },
        {
          "type": "p",
          "text": "Good to know:.js,.jsx, or.tsxextensions can be used for Layout files."
        },
        {
          "type": "p",
          "text": "Copy the content of yourindex.htmlfile into the previously created<RootLayout>component while replacing thebody.div#rootandbody.noscripttags with<div id=\"root\">{children}</div>:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><metacharSet=\"UTF-8\"/><linkrel=\"icon\"href=\"%PUBLIC_URL%/favicon.ico\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><title>React App</title><metaname=\"description\"content=\"Web site created...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
        },
        {
          "type": "p",
          "text": "Good to know: Next.js ignores CRA'spublic/manifest.jsonfile, additional iconography (exceptfavicon,icon, andapple-icon), andtesting configuration, but if these are requirements, Next.js also supports these options. See theMetadata APIandTestingdocs for more information."
        },
        {
          "type": "p",
          "text": "Next.js already includes by default themeta charsetandmeta viewporttags, so you can safely remove those from your<head>:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><linkrel=\"icon\"href=\"%PUBLIC_URL%/favicon.ico\"/><title>React App</title><metaname=\"description\"content=\"Web site created...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
        },
        {
          "type": "p",
          "text": "Anymetadata filessuch asfavicon.ico,icon.png,robots.txtare automatically added to the application<head>tag as long as you have them placed into the top level of theappdirectory. After movingall supported filesinto theappdirectory you can safely delete their<link>tags:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><title>React App</title><metaname=\"description\"content=\"Web site created...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
        },
        {
          "type": "p",
          "text": "Finally, Next.js can manage your last<head>tags with theMetadata API. Move your final metadata info into an exportedmetadataobject:"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'React App',description:'Web site created with Next.js.',}exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body><divid=\"root\">{children}</div></body></html>)}"
        },
        {
          "type": "p",
          "text": "With the above changes, you shifted from declaring everything in yourindex.htmlto using Next.js' convention-based approach built into the framework (Metadata API). This approach enables you to more easily improve your SEO and web shareability of your pages."
        },
        {
          "type": "p",
          "text": "Like Create React App, Next.js has built-in support forCSS Modules. If you're using a global CSS file, import it into yourapp/layout.tsxfile:"
        },
        {
          "type": "code",
          "code": "import'../index.css'// ..."
        },
        {
          "type": "p",
          "text": "If you're using Tailwind, you'll need to installpostcssandautoprefixer:"
        },
        {
          "type": "code",
          "code": "npminstallpostcssautoprefixer"
        },
        {
          "type": "p",
          "text": "Then, create apostcss.config.jsfile at the root of your project:"
        },
        {
          "type": "code",
          "code": "module.exports={plugins:{tailwindcss:{},autoprefixer:{},},}"
        },
        {
          "type": "p",
          "text": "On Next.js you declare an entrypoint for your application by creating apage.tsxfile. The closest equivalent of this file on CRA is yoursrc/index.tsxfile. In this step, you’ll set up the entry point of your application. Create a[[...slug]]directory in yourappdirectory. Since this guide is aiming to first set up our Next.js as an SPA (Single Page Application), you need your page entry point to catch all possible routes of your application. For that, create a new[[...slug]]directory in yourappdirectory. This directory is what is called anoptional catch-all route segment. Next.js uses a file-system based router wheredirectories are used to define routes. This special directory will make sure that all routes of your application will be directed to its containingpage.tsxfile. Create a newpage.tsxfile inside theapp/[[...slug]]directory with the following content:"
        },
        {
          "type": "code",
          "code": "exportfunctiongenerateStaticParams() {return[{ slug:[''] }]}exportdefaultfunctionPage() {return'...'// We'll update this}"
        },
        {
          "type": "p",
          "text": "This file is aServer Component. When you runnext build, the file is prerendered into a static asset. It doesnotrequire any dynamic code. This file imports our global CSS and tellsgenerateStaticParamswe are only going to generate one route, the index route at/. Now, let's move the rest of our CRA application which will run client-only."
        },
        {
          "type": "code",
          "code": "'use client'importdynamicfrom'next/dynamic'constApp=dynamic(()=>import('../../App'),{ ssr:false})exportfunctionClientOnly() {return<App/>}"
        },
        {
          "type": "p",
          "text": "This file is aClient Component, defined by the'use client'directive. Client Components are stillprerendered to HTMLon the server before being sent to the client. Since we want a client-only application to start, we can configure Next.js to disable prerendering from theAppcomponent down."
        },
        {
          "type": "code",
          "code": "constApp=dynamic(()=>import('../../App'),{ ssr:false})"
        },
        {
          "type": "p",
          "text": "Now, update your entrypoint page to use the new component:"
        },
        {
          "type": "code",
          "code": "import{ ClientOnly }from'./client'exportfunctiongenerateStaticParams() {return[{ slug:[''] }]}exportdefaultfunctionPage() {return<ClientOnly/>}"
        },
        {
          "type": "p",
          "text": "Next.js handles static image imports slightly different from CRA. With CRA, importing an image file will return its public URL as a string:"
        },
        {
          "type": "code",
          "code": "importimagefrom'./img.png'exportdefaultfunctionApp() {return<imgsrc={image} />}"
        },
        {
          "type": "p",
          "text": "With Next.js, static image imports return an object. The object can then be used directly with the Next.js<Image>component, or you can use the object'ssrcproperty with your existing<img>tag. The<Image>component has the added benefits ofautomatic image optimization. The<Image>component automatically sets thewidthandheightattributes of the resulting<img>based on the image's dimensions. This prevents layout shifts when the image loads. However, this can cause issues if your app contains images with only one of their dimensions being styled without the other styled toauto. When not styled toauto, the dimension will default to the<img>dimension attribute's value, which can cause the image to appear distorted. Keeping the<img>tag will reduce the amount of changes in your application and prevent the above issues. You can then optionally later migrate to the<Image>component to take advantage of optimizing images byconfiguring a loader, or moving to the default Next.js server which has automatic image optimization. Convert absolute import paths for images imported from/publicinto relative imports:"
        },
        {
          "type": "code",
          "code": "// Beforeimportlogofrom'/logo.png'// Afterimportlogofrom'../public/logo.png'"
        },
        {
          "type": "p",
          "text": "Pass the imagesrcproperty instead of the whole image object to your<img>tag:"
        },
        {
          "type": "code",
          "code": "// Before<imgsrc={logo} />// After<imgsrc={logo.src} />"
        },
        {
          "type": "p",
          "text": "Alternatively, you can reference the public URL for the image asset based on the filename. For example,public/logo.pngwill serve the image at/logo.pngfor your application, which would be thesrcvalue."
        },
        {
          "type": "p",
          "text": "Warning:If you're using TypeScript, you might encounter type errors when accessing thesrcproperty. To fix them, you need to addnext-env.d.tsto theincludearrayof yourtsconfig.jsonfile. Next.js will automatically generate this file when you run your application on step 9."
        },
        {
          "type": "p",
          "text": "Next.js has support for.envenvironment variablessimilar to CRA. The main difference is the prefix used to expose environment variables on the client-side. Change all environment variables with theREACT_APP_prefix toNEXT_PUBLIC_."
        },
        {
          "type": "p",
          "text": "You should now be able to run your application to test if you successfully migrated to Next.js. But before that, you need to update yourscriptsin yourpackage.jsonwith Next.js related commands, and add.next, andnext-env.d.tsto your.gitignorefile:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"npx serve@latest ./build\"}}"
        },
        {
          "type": "code",
          "code": "# ....nextnext-env.d.ts"
        },
        {
          "type": "p",
          "text": "Now runnpm run dev, and openhttp://localhost:3000. You should see your application now running on Next.js."
        },
        {
          "type": "p",
          "text": "You can now clean up your codebase from Create React App related artifacts:"
        },
        {
          "type": "list",
          "items": [
            "Deletepublic/index.html",
            "Deletesrc/index.tsx",
            "Deletesrc/react-app-env.d.ts",
            "DeletereportWebVitalssetup",
            "Uninstall CRA dependencies (react-scripts)"
          ]
        },
        {
          "type": "p",
          "text": "Create React App and Next.js both default to using webpack for bundling. When migrating your CRA application to Next.js, you might have a custom webpack configuration you're looking to migrate. Next.js supports providing acustom webpack configuration. Further, Next.js has support forTurbopackthroughnext dev --turbopackto improve your local dev performance. Turbopack supports somewebpack loadersas well for compatibility and incremental adoption."
        },
        {
          "type": "p",
          "text": "If everything went according to plan, you now have a functioning Next.js application running as a single-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but you can now start making incremental changes to reap all the benefits. Here's what you might want to do next:"
        },
        {
          "type": "list",
          "items": [
            "Migrate from React Router to theNext.js App Routerto get:Automatic code splittingStreaming Server-RenderingReact Server Components",
            "Automatic code splitting",
            "Streaming Server-Rendering",
            "React Server Components",
            "Optimize images with the<Image>component",
            "Optimize fonts withnext/font",
            "Optimize third-party scripts with the<Script>component",
            "Update your ESLint configuration to support Next.js rules"
          ]
        },
        {
          "type": "p",
          "text": "Good to know:Using a static exportdoes not currently supportusing theuseParamshook."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/upgrading/from-vite",
      "title": "Upgrading: Migrating from Vite | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This guide will help you migrate an existing Vite application to Next.js."
        },
        {
          "type": "p",
          "text": "There are several reasons why you might want to switch from Vite to Next.js:"
        },
        {
          "type": "p",
          "text": "If you have built your application with thedefault Vite plugin for React, your application is a purely client-side application. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:"
        },
        {
          "type": "list",
          "items": [
            "The browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load some data.",
            "Your application code grows with every new feature and extra dependency you add."
          ]
        },
        {
          "type": "p",
          "text": "The previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router."
        },
        {
          "type": "p",
          "text": "A common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data. While fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls."
        },
        {
          "type": "p",
          "text": "With built-in support forstreaming through React Suspense, you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls. This enables you to build pages that are faster to load and eliminatelayout shifts."
        },
        {
          "type": "p",
          "text": "Depending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN."
        },
        {
          "type": "p",
          "text": "Next.js Middlewareallows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation andinternationalization."
        },
        {
          "type": "p",
          "text": "Images,fonts, andthird-party scriptsoften have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you."
        },
        {
          "type": "p",
          "text": "Our goal with this migration is to get a working Next.js application as quickly as possible, so that\nyou can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely\nclient-side application (SPA) without migrating your existing router. This helps minimize the\nchances of encountering issues during the migration process and reduces merge conflicts."
        },
        {
          "type": "p",
          "text": "The first thing you need to do is to installnextas a dependency:"
        },
        {
          "type": "code",
          "code": "npminstallnext@latest"
        },
        {
          "type": "p",
          "text": "Create anext.config.mjsat the root of your project. This file will hold yourNext.js configuration options."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={output:'export',// Outputs a Single-Page Application (SPA).distDir:'./dist',// Changes the build output directory to `./dist/`.}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Good to know:You can use either.jsor.mjsfor your Next.js configuration file."
        },
        {
          "type": "p",
          "text": "If you're using TypeScript, you need to update yourtsconfig.jsonfile with the following changes\nto make it compatible with Next.js. If you're not using TypeScript, you can skip this step."
        },
        {
          "type": "list",
          "items": [
            "Remove theproject referencetotsconfig.node.json",
            "Add./dist/types/**/*.tsand./next-env.d.tsto theincludearray",
            "Add./node_modulesto theexcludearray",
            "Add{ \"name\": \"next\" }to thepluginsarray incompilerOptions:\"plugins\": [{ \"name\": \"next\" }]",
            "SetesModuleInteroptotrue:\"esModuleInterop\": true",
            "Setjsxtopreserve:\"jsx\": \"preserve\"",
            "SetallowJstotrue:\"allowJs\": true",
            "SetforceConsistentCasingInFileNamestotrue:\"forceConsistentCasingInFileNames\": true",
            "Setincrementaltotrue:\"incremental\": true"
          ]
        },
        {
          "type": "p",
          "text": "Here's an example of a workingtsconfig.jsonwith those changes:"
        },
        {
          "type": "code",
          "code": "{\"compilerOptions\":{\"target\":\"ES2020\",\"useDefineForClassFields\":true,\"lib\":[\"ES2020\",\"DOM\",\"DOM.Iterable\"],\"module\":\"ESNext\",\"esModuleInterop\":true,\"skipLibCheck\":true,\"moduleResolution\":\"bundler\",\"allowImportingTsExtensions\":true,\"resolveJsonModule\":true,\"isolatedModules\":true,\"noEmit\":true,\"jsx\":\"preserve\",\"strict\":true,\"noUnusedLocals\":true,\"noUnusedParameters\":true,\"noFallthroughCasesInSwitch\":true,\"allowJs\":true,\"forceConsistentCasingInFileNames\":true,\"incremental\":true,\"plugins\":[{\"name\":\"next\"}]},\"include\":[\"./src\",\"./dist/types/**/*.ts\",\"./next-env.d.ts\"],\"exclude\":[\"./node_modules\"]}"
        },
        {
          "type": "p",
          "text": "You can find more information about configuring TypeScript on theNext.js docs."
        },
        {
          "type": "p",
          "text": "A Next.jsApp Routerapplication must include aroot layoutfile, which is aReact Server Componentthat will wrap all pages in your application. This file is defined at the top level of theappdirectory. The closest equivalent to the root layout file in a Vite application is theindex.htmlfile, which contains your<html>,<head>, and<body>tags. In this step, you'll convert yourindex.htmlfile into a root layout file:"
        },
        {
          "type": "list",
          "items": [
            "Create a newappdirectory in yoursrcdirectory.",
            "Create a newlayout.tsxfile inside thatappdirectory:"
          ]
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return'...'}"
        },
        {
          "type": "p",
          "text": "Good to know:.js,.jsx, or.tsxextensions can be used for Layout files."
        },
        {
          "type": "list",
          "items": [
            "Copy the content of yourindex.htmlfile into the previously created<RootLayout>component while\nreplacing thebody.div#rootandbody.scripttags with<div id=\"root\">{children}</div>:"
          ]
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><metacharset=\"UTF-8\"/><linkrel=\"icon\"type=\"image/svg+xml\"href=\"/icon.svg\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"/><title>My App</title><metaname=\"description\"content=\"My App is a...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
        },
        {
          "type": "list",
          "items": [
            "Next.js already includes by default themeta charsetandmeta viewporttags, so you\ncan safely remove those from your<head>:"
          ]
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><linkrel=\"icon\"type=\"image/svg+xml\"href=\"/icon.svg\"/><title>My App</title><metaname=\"description\"content=\"My App is a...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
        },
        {
          "type": "list",
          "items": [
            "Anymetadata filessuch asfavicon.ico,icon.png,robots.txtare automatically added to the application<head>tag as long as you have them placed into the top level of theappdirectory. After\nmovingall supported filesinto theappdirectory you can safely delete their<link>tags:"
          ]
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><head><title>My App</title><metaname=\"description\"content=\"My App is a...\"/></head><body><divid=\"root\">{children}</div></body></html>)}"
        },
        {
          "type": "list",
          "items": [
            "Finally, Next.js can manage your last<head>tags with theMetadata API. Move your final metadata\ninfo into an exportedmetadataobject:"
          ]
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'exportconstmetadata:Metadata={title:'My App',description:'My App is a...',}exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body><divid=\"root\">{children}</div></body></html>)}"
        },
        {
          "type": "p",
          "text": "With the above changes, you shifted from declaring everything in yourindex.htmlto using Next.js'\nconvention-based approach built into the framework\n(Metadata API). This approach enables you\nto more easily improve your SEO and web shareability of your pages."
        },
        {
          "type": "p",
          "text": "On Next.js you declare an entrypoint for your application by creating apage.tsxfile. The\nclosest equivalent of this file on Vite is yourmain.tsxfile. In this step, you’ll set up the\nentrypoint of your application."
        },
        {
          "type": "list",
          "items": ["Create a[[...slug]]directory in yourappdirectory."]
        },
        {
          "type": "p",
          "text": "Since in this guide we're aiming first to set up our Next.js as an SPA (Single Page Application),\nyou need your page entrypoint to catch all possible routes of your application. For that, create a\nnew[[...slug]]directory in yourappdirectory. This directory is what is called anoptional catch-all route segment.\nNext.js uses a file-system based router wheredirectories are used to define routes.\nThis special directory will make sure that all routes of your application will be directed to its\ncontainingpage.tsxfile."
        },
        {
          "type": "list",
          "items": [
            "Create a newpage.tsxfile inside theapp/[[...slug]]directory with the following content:"
          ]
        },
        {
          "type": "code",
          "code": "import'../../index.css'exportfunctiongenerateStaticParams() {return[{ slug:[''] }]}exportdefaultfunctionPage() {return'...'// We'll update this}"
        },
        {
          "type": "p",
          "text": "Good to know:.js,.jsx, or.tsxextensions can be used for Page files."
        },
        {
          "type": "p",
          "text": "This file is aServer Component. When you runnext build, the file is prerendered into a static asset. It doesnotrequire any dynamic code. This file imports our global CSS and tellsgenerateStaticParamswe are only going to generate one route, the index route at/. Now, let's move the rest of our Vite application which will run client-only."
        },
        {
          "type": "code",
          "code": "'use client'importReactfrom'react'importdynamicfrom'next/dynamic'constApp=dynamic(()=>import('../../App'),{ ssr:false})exportfunctionClientOnly() {return<App/>}"
        },
        {
          "type": "p",
          "text": "This file is aClient Component, defined by the'use client'directive. Client Components are stillprerendered to HTMLon the server before being sent to the client. Since we want a client-only application to start, we can configure Next.js to disable prerendering from theAppcomponent down."
        },
        {
          "type": "code",
          "code": "constApp=dynamic(()=>import('../../App'),{ ssr:false})"
        },
        {
          "type": "p",
          "text": "Now, update your entrypoint page to use the new component:"
        },
        {
          "type": "code",
          "code": "import'../../index.css'import{ ClientOnly }from'./client'exportfunctiongenerateStaticParams() {return[{ slug:[''] }]}exportdefaultfunctionPage() {return<ClientOnly/>}"
        },
        {
          "type": "p",
          "text": "Next.js handles static image imports slightly different from Vite. With Vite, importing an image\nfile will return its public URL as a string:"
        },
        {
          "type": "code",
          "code": "importimagefrom'./img.png'// `image` will be '/assets/img.2d8efhg.png' in productionexportdefaultfunctionApp() {return<imgsrc={image} />}"
        },
        {
          "type": "p",
          "text": "With Next.js, static image imports return an object. The object can then be used directly with the\nNext.js<Image>component, or you can use the object'ssrcproperty with your existing<img>tag. The<Image>component has the added benefits ofautomatic image optimization. The<Image>component automatically sets thewidthandheightattributes of the resulting<img>based on\nthe image's dimensions. This prevents layout shifts when the image loads. However, this can cause\nissues if your app contains images with only one of their dimensions being styled without the other\nstyled toauto. When not styled toauto, the dimension will default to the<img>dimension\nattribute's value, which can cause the image to appear distorted. Keeping the<img>tag will reduce the amount of changes in your application and prevent the above\nissues. You can then optionally later migrate to the<Image>component to take advantage of optimizing images byconfiguring a loader, or moving to the default Next.js server which has automatic image optimization."
        },
        {
          "type": "list",
          "items": [
            "Convert absolute import paths for images imported from/publicinto relative imports:"
          ]
        },
        {
          "type": "code",
          "code": "// Beforeimportlogofrom'/logo.png'// Afterimportlogofrom'../public/logo.png'"
        },
        {
          "type": "list",
          "items": [
            "Pass the imagesrcproperty instead of the whole image object to your<img>tag:"
          ]
        },
        {
          "type": "code",
          "code": "// Before<imgsrc={logo} />// After<imgsrc={logo.src} />"
        },
        {
          "type": "p",
          "text": "Alternatively, you can reference the public URL for the image asset based on the filename. For example,public/logo.pngwill serve the image at/logo.pngfor your application, which would be thesrcvalue."
        },
        {
          "type": "p",
          "text": "Warning:If you're using TypeScript, you might encounter type errors when accessing thesrcproperty. You can safely ignore those for now. They will be fixed by the end of this guide."
        },
        {
          "type": "p",
          "text": "Next.js has support for.envenvironment variablessimilar to Vite. The main difference is the prefix used to expose environment variables on the\nclient-side."
        },
        {
          "type": "list",
          "items": [
            "Change all environment variables with theVITE_prefix toNEXT_PUBLIC_."
          ]
        },
        {
          "type": "p",
          "text": "Vite exposes a few built-in environment variables on the specialimport.meta.envobject which\naren’t supported by Next.js. You need to update their usage as follows:"
        },
        {
          "type": "list",
          "items": [
            "import.meta.env.MODE⇒process.env.NODE_ENV",
            "import.meta.env.PROD⇒process.env.NODE_ENV === 'production'",
            "import.meta.env.DEV⇒process.env.NODE_ENV !== 'production'",
            "import.meta.env.SSR⇒typeof window !== 'undefined'"
          ]
        },
        {
          "type": "p",
          "text": "Next.js also doesn't provide a built-inBASE_URLenvironment variable. However, you can still\nconfigure one, if you need it:"
        },
        {
          "type": "list",
          "items": ["Add the following to your.envfile:"]
        },
        {
          "type": "code",
          "code": "# ...NEXT_PUBLIC_BASE_PATH=\"/some-base-path\""
        },
        {
          "type": "list",
          "items": [
            "SetbasePathtoprocess.env.NEXT_PUBLIC_BASE_PATHin yournext.config.mjsfile:"
          ]
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={output:'export',// Outputs a Single-Page Application (SPA).distDir:'./dist',// Changes the build output directory to `./dist/`.basePath:process.env.NEXT_PUBLIC_BASE_PATH,// Sets the base path to `/some-base-path`.}exportdefaultnextConfig"
        },
        {
          "type": "list",
          "items": [
            "Updateimport.meta.env.BASE_URLusages toprocess.env.NEXT_PUBLIC_BASE_PATH"
          ]
        },
        {
          "type": "p",
          "text": "You should now be able to run your application to test if you successfully migrated to Next.js. But\nbefore that, you need to update yourscriptsin yourpackage.jsonwith Next.js related commands,\nand add.nextandnext-env.d.tsto your.gitignore:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\"}}"
        },
        {
          "type": "code",
          "code": "# ....nextnext-env.d.tsdist"
        },
        {
          "type": "p",
          "text": "Now runnpm run dev, and openhttp://localhost:3000. You should see your application now running on Next.js."
        },
        {
          "type": "p",
          "text": "Example:Check outthis pull requestfor a\nworking example of a Vite application migrated to Next.js."
        },
        {
          "type": "p",
          "text": "You can now clean up your codebase from Vite related artifacts:"
        },
        {
          "type": "list",
          "items": [
            "Deletemain.tsx",
            "Deleteindex.html",
            "Deletevite-env.d.ts",
            "Deletetsconfig.node.json",
            "Deletevite.config.ts",
            "Uninstall Vite dependencies"
          ]
        },
        {
          "type": "p",
          "text": "If everything went according to plan, you now have a functioning Next.js application running as a\nsingle-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but\nyou can now start making incremental changes to reap all the benefits. Here's what you might want to\ndo next:"
        },
        {
          "type": "list",
          "items": [
            "Migrate from React Router to theNext.js App Routerto get:Automatic code splittingStreaming Server-RenderingReact Server Components",
            "Automatic code splitting",
            "Streaming Server-Rendering",
            "React Server Components",
            "Optimize images with the<Image>component",
            "Optimize fonts withnext/font",
            "Optimize third-party scripts with the<Script>component",
            "Update your ESLint configuration to support Next.js rules"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/upgrading/version-14",
      "title": "Upgrading: Version 14 | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "To update to Next.js version 14, run the following command using your preferred package manager:"
        },
        {
          "type": "code",
          "code": "npminext@next-14react@latestreact-dom@latest&&npmieslint-config-next@next-14-D"
        },
        {
          "type": "code",
          "code": "yarnaddnext@next-14react@latestreact-dom@latest&&yarnaddeslint-config-next@next-14-D"
        },
        {
          "type": "code",
          "code": "pnpminext@next-14react@latestreact-dom@latest&&pnpmieslint-config-next@next-14-D"
        },
        {
          "type": "code",
          "code": "bunaddnext@next-14react@latestreact-dom@latest&&bunaddeslint-config-next@next-14-D"
        },
        {
          "type": "p",
          "text": "Good to know:If you are using TypeScript, ensure you also upgrade@types/reactand@types/react-domto their latest versions."
        },
        {
          "type": "list",
          "items": [
            "The minimum Node.js version has been bumped from 16.14 to 18.17, since 16.x has reached end-of-life.",
            "Thenext exportcommand has been removed in favor ofoutput: 'export'config. Please see thedocsfor more information.",
            "Thenext/serverimport forImageResponsewas renamed tonext/og. Acodemod is availableto safely and automatically rename your imports.",
            "The@next/fontpackage has been fully removed in favor of the built-innext/font. Acodemod is availableto safely and automatically rename your imports.",
            "The WASM target fornext-swchas been removed."
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/building-your-application/upgrading/version-15",
      "title": "Upgrading: Version 15 | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "To update to Next.js version 15, you can use theupgradecodemod:"
        },
        {
          "type": "code",
          "code": "npx@next/codemod@canaryupgradelatest"
        },
        {
          "type": "p",
          "text": "If you prefer to do it manually, ensure that you're installing the latest Next & React RC, e.g.:"
        },
        {
          "type": "code",
          "code": "npminext@latestreact@rcreact-dom@rceslint-config-next@latest"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If you see a peer dependencies warning, you may need to updatereactandreact-domto the suggested versions, or you use the--forceor--legacy-peer-depsflag to ignore the warning. This won't be necessary once both Next.js 15 and React 19 are stable."
          ]
        },
        {
          "type": "list",
          "items": [
            "The minimum versions ofreactandreact-domis now 19.",
            "useFormStatehas been replaced byuseActionState. TheuseFormStatehook is still available in React 19, but it is deprecated and will be removed in a future release.useActionStateis recommended and includes additional properties like reading thependingstate directly.Learn more.",
            "useFormStatusnow includes additional keys likedata,method, andaction. If you are not using React 19, only thependingkey is available.Learn more.",
            "Read more in theReact 19 upgrade guide."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:If you are using TypeScript, ensure you also upgrade@types/reactand@types/react-domto their latest versions."
        },
        {
          "type": "p",
          "text": "Previously synchronous Dynamic APIs that rely on runtime information are nowasynchronous:"
        },
        {
          "type": "list",
          "items": [
            "cookies",
            "headers",
            "draftMode",
            "paramsinlayout.js,page.js,route.js,default.js,opengraph-image,twitter-image,icon, andapple-icon.",
            "searchParamsinpage.js"
          ]
        },
        {
          "type": "p",
          "text": "To ease the burden of migration, acodemod is availableto automate the process and the APIs can temporarily be accessed synchronously."
        },
        {
          "type": "code",
          "code": "import{ cookies }from'next/headers'// BeforeconstcookieStore=cookies()consttoken=cookieStore.get('token')// AfterconstcookieStore=awaitcookies()consttoken=cookieStore.get('token')"
        },
        {
          "type": "code",
          "code": "import{ cookies,typeUnsafeUnwrappedCookies }from'next/headers'// BeforeconstcookieStore=cookies()consttoken=cookieStore.get('token')// AfterconstcookieStore=cookies()asunknownasUnsafeUnwrappedCookies// will log a warning in devconsttoken=cookieStore.get('token')"
        },
        {
          "type": "code",
          "code": "import{ headers }from'next/headers'// BeforeconstheadersList=headers()constuserAgent=headersList.get('user-agent')// AfterconstheadersList=awaitheaders()constuserAgent=headersList.get('user-agent')"
        },
        {
          "type": "code",
          "code": "import{ headers,typeUnsafeUnwrappedHeaders }from'next/headers'// BeforeconstheadersList=headers()constuserAgent=headersList.get('user-agent')// AfterconstheadersList=headers()asunknownasUnsafeUnwrappedHeaders// will log a warning in devconstuserAgent=headersList.get('user-agent')"
        },
        {
          "type": "code",
          "code": "import{ draftMode }from'next/headers'// Beforeconst{isEnabled}=draftMode()// Afterconst{isEnabled}=awaitdraftMode()"
        },
        {
          "type": "code",
          "code": "import{ draftMode,typeUnsafeUnwrappedDraftMode }from'next/headers'// Beforeconst{isEnabled}=draftMode()// After// will log a warning in devconst{isEnabled}=draftMode()asunknownasUnsafeUnwrappedDraftMode"
        },
        {
          "type": "code",
          "code": "// BeforetypeParams={ slug:string}exportfunctiongenerateMetadata({ params }:{ params:Params}) {const{slug}=params}exportdefaultasyncfunctionLayout({children,params,}:{children:React.ReactNodeparams:Params}) {const{slug}=params}// AftertypeParams=Promise<{ slug:string}>exportasyncfunctiongenerateMetadata({ params }:{ params:Params}) {const{slug}=awaitparams}exportdefaultasyncfunctionLayout({children,params,}:{children:React.ReactNodeparams:Params}) {const{slug}=awaitparams}"
        },
        {
          "type": "code",
          "code": "// BeforetypeParams={ slug:string}exportdefaultfunctionLayout({children,params,}:{children:React.ReactNodeparams:Params}) {const{slug}=params}// Afterimport{ use }from'react'typeParams=Promise<{ slug:string}>exportdefaultfunctionLayout(props:{children:React.ReactNodeparams:Params}) {constparams=use(props.params)constslug=params.slug}"
        },
        {
          "type": "code",
          "code": "// BeforetypeParams={ slug:string}typeSearchParams={ [key:string]:string|string[]|undefined}exportfunctiongenerateMetadata({params,searchParams,}:{params:ParamssearchParams:SearchParams}) {const{slug}=paramsconst{query}=searchParams}exportdefaultasyncfunctionPage({params,searchParams,}:{params:ParamssearchParams:SearchParams}) {const{slug}=paramsconst{query}=searchParams}// AftertypeParams=Promise<{ slug:string}>typeSearchParams=Promise<{ [key:string]:string|string[]|undefined}>exportasyncfunctiongenerateMetadata(props:{params:ParamssearchParams:SearchParams}) {constparams=awaitprops.paramsconstsearchParams=awaitprops.searchParamsconstslug=params.slugconstquery=searchParams.query}exportdefaultasyncfunctionPage(props:{params:ParamssearchParams:SearchParams}) {constparams=awaitprops.paramsconstsearchParams=awaitprops.searchParamsconstslug=params.slugconstquery=searchParams.query}"
        },
        {
          "type": "code",
          "code": "'use client'// BeforetypeParams={ slug:string}typeSearchParams={ [key:string]:string|string[]|undefined}exportdefaultfunctionPage({params,searchParams,}:{params:ParamssearchParams:SearchParams}) {const{slug}=paramsconst{query}=searchParams}// Afterimport{ use }from'react'typeParams=Promise<{ slug:string}>typeSearchParams=Promise<{ [key:string]:string|string[]|undefined}>exportdefaultfunctionPage(props:{params:ParamssearchParams:SearchParams}) {constparams=use(props.params)constsearchParams=use(props.searchParams)constslug=params.slugconstquery=searchParams.query}"
        },
        {
          "type": "code",
          "code": "// BeforeexportdefaultfunctionPage({ params,searchParams }) {const{slug}=paramsconst{query}=searchParams}// Afterimport{ use }from\"react\"exportdefaultfunctionPage(props) {constparams=use(props.params)constsearchParams=use(props.searchParams)constslug=params.slugconstquery=searchParams.query}"
        },
        {
          "type": "code",
          "code": "// BeforetypeParams={ slug:string}exportasyncfunctionGET(request:Request,segmentData:{ params:Params}) {constparams=segmentData.paramsconstslug=params.slug}// AftertypeParams=Promise<{ slug:string}>exportasyncfunctionGET(request:Request,segmentData:{ params:Params}) {constparams=awaitsegmentData.paramsconstslug=params.slug}"
        },
        {
          "type": "code",
          "code": "// BeforeexportasyncfunctionGET(request,segmentData) {constparams=segmentData.paramsconstslug=params.slug}// AfterexportasyncfunctionGET(request,segmentData) {constparams=awaitsegmentData.paramsconstslug=params.slug}"
        },
        {
          "type": "p",
          "text": "Theruntimesegment configurationpreviously supported a value ofexperimental-edgein addition toedge. Both configurations refer to the same thing, and to simplify the options, we will now error ifexperimental-edgeis used. To fix this, update yourruntimeconfiguration toedge. Acodemodis available to automatically do this."
        },
        {
          "type": "p",
          "text": "fetchrequestsare no longer cached by default. To opt specificfetchrequests into caching, you can pass thecache: 'force-cache'option."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionRootLayout() {consta=awaitfetch('https://...')// Not Cachedconstb=awaitfetch('https://...',{ cache:'force-cache'})// Cached// ...}"
        },
        {
          "type": "p",
          "text": "To opt allfetchrequests in a layout or page into caching, you can use theexport const fetchCache = 'default-cache'segment config option. If individualfetchrequests specify acacheoption, that will be used instead."
        },
        {
          "type": "code",
          "code": "// Since this is the root layout, all fetch requests in the app// that don't set their own cache option will be cached.exportconstfetchCache='default-cache'exportdefaultasyncfunctionRootLayout() {consta=awaitfetch('https://...')// Cachedconstb=awaitfetch('https://...',{ cache:'no-store'})// Not cached// ...}"
        },
        {
          "type": "p",
          "text": "GETfunctions inRoute Handlersare no longer cached by default. To optGETmethods into caching, you can use aroute config optionsuch asexport const dynamic = 'force-static'in your Route Handler file."
        },
        {
          "type": "code",
          "code": "exportconstdynamic='force-static'exportasyncfunctionGET() {}"
        },
        {
          "type": "p",
          "text": "When navigating between pages via<Link>oruseRouter,pagesegments are no longer reused from the client-side router cache. However, they are still reused during browser backward and forward navigation and for shared layouts. To opt page segments into caching, you can use thestaleTimesconfig option:"
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={experimental:{staleTimes:{dynamic:30,static:180,},},}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Layoutsandloading statesare still cached and reused on navigation."
        },
        {
          "type": "p",
          "text": "The@next/fontpackage has been removed in favor of the built-innext/font. Acodemod is availableto safely and automatically rename your imports."
        },
        {
          "type": "code",
          "code": "// Beforeimport{ Inter }from'@next/font/google'// Afterimport{ Inter }from'next/font/google'"
        },
        {
          "type": "p",
          "text": "experimental.bundlePagesExternalsis now stable and renamed tobundlePagesRouterDependencies."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={// Beforeexperimental:{bundlePagesExternals:true,},// AfterbundlePagesRouterDependencies:true,}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "experimental.serverComponentsExternalPackagesis now stable and renamed toserverExternalPackages."
        },
        {
          "type": "code",
          "code": "/**@type{import('next').NextConfig}*/constnextConfig={// Beforeexperimental:{serverComponentsExternalPackages:['package-name'],},// AfterserverExternalPackages:['package-name'],}module.exports=nextConfig"
        },
        {
          "type": "p",
          "text": "Auto instrumentation for Speed Insights was removed in Next.js 15. To continue using Speed Insights, follow theVercel Speed Insights Quickstartguide."
        },
        {
          "type": "p",
          "text": "Thegeoandipproperties onNextRequesthave been removed as these values are provided by your hosting provider. Acodemodis available to automate this migration. If you are using Vercel, you can alternatively use thegeolocationandipAddressfunctions from`@vercel/functionsinstead:"
        },
        {
          "type": "code",
          "code": "import{ geolocation }from'@vercel/functions'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {const{city}=geolocation(request)// ...}"
        },
        {
          "type": "code",
          "code": "import{ ipAddress }from'@vercel/functions'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {constip=ipAddress(request)// ...}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started",
      "title": "App Router: Getting Started | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/css-and-styling",
      "title": "Getting Started: CSS and Styling | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js provides several ways to use CSS in your application, including:"
        },
        {
          "type": "list",
          "items": [
            "CSS Modules",
            "Global CSS",
            "Tailwind CSS",
            "Sass",
            "CSS-in-JS",
            "External Stylesheets"
          ]
        },
        {
          "type": "p",
          "text": "This page will guide you through how to use each of these approaches."
        },
        {
          "type": "p",
          "text": "CSS Modules locally scope CSS by generating unique class names. This allows you to use the same class in different files without worrying about collisions. To start using CSS Modules, create a new file with the extension.module.cssand import it into any component inside theappdirectory:"
        },
        {
          "type": "code",
          "code": ".blog{padding:24px;}"
        },
        {
          "type": "code",
          "code": "importstylesfrom'./styles.module.css'exportdefaultfunctionPage({ children }:{ children:React.ReactNode}) {return<mainclassName={styles.blog}>{children}</main>}"
        },
        {
          "type": "p",
          "text": "You can use global CSS to apply styles across your application. To use global styles, create a new CSS file, for exampleapp/global.css:"
        },
        {
          "type": "code",
          "code": "body{padding:20px20px60px;max-width:680px;margin:0 auto;}"
        },
        {
          "type": "p",
          "text": "Import the file in the root layout (app/layout.js) to apply the styles toevery routein your application:"
        },
        {
          "type": "code",
          "code": "// These styles apply to every route in the applicationimport'./global.css'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "Good to know:Global styles can be imported into any layout, page, or component inside theappdirectory. However, since Next.js uses React's built-in support for stylesheets to integrate with Suspense. This built-in support currently does not remove stylesheets as you navigate between routes. Therefore, we recommend using global styles fortrulyglobal CSS, andCSS Modulesfor scoped CSS."
        },
        {
          "type": "p",
          "text": "Tailwind CSSis a utility-first CSS framework that integrates seamlessly with Next.js."
        },
        {
          "type": "p",
          "text": "To start using Tailwind, install the Tailwind CSS packages and run theinitcommand to generate both thetailwind.config.jsandpostcss.config.jsfiles:"
        },
        {
          "type": "code",
          "code": "npminstall-Dtailwindcsspostcssautoprefixernpxtailwindcssinit-p"
        },
        {
          "type": "p",
          "text": "Inside your Tailwind configuration file, add paths to the files that will use the Tailwind class names:"
        },
        {
          "type": "code",
          "code": "importtype{ Config }from'tailwindcss'constconfig:Config={content:['./app/**/*.{js,ts,jsx,tsx,mdx}',// Or if using `src` directory:'./src/**/*.{js,ts,jsx,tsx,mdx}',],theme:{extend:{},},plugins:[],}exportdefaultconfig"
        },
        {
          "type": "p",
          "text": "Add theTailwind directivesto yourGlobal Stylesheet:"
        },
        {
          "type": "code",
          "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
        },
        {
          "type": "p",
          "text": "Then, import the styles in theroot layout:"
        },
        {
          "type": "code",
          "code": "importtype{ Metadata }from'next'// These styles apply to every route in the applicationimport'./globals.css'exportconstmetadata:Metadata={title:'Create Next App',description:'Generated by create next app',}exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "Lastly, you can start writing Tailwind's utility classes in your application."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {return<h1className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>}"
        },
        {
          "type": "p",
          "text": "Next.js integrates withSassusing both the.scssand.sassextensions and syntax. You can also use component-level Sass viaCSS Modulesand the.module.scssor.module.sassextension."
        },
        {
          "type": "p",
          "text": "To start using Sass, install thesasspackage:"
        },
        {
          "type": "code",
          "code": "npminstall--save-devsass"
        },
        {
          "type": "p",
          "text": "If you want to configure your Sass options, use thesassOptionsoption innext.config.js."
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={sassOptions:{additionalData:`$var: red;`,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Warning:CSS-in-JS libraries which require runtime JavaScript are not currently supported in React Server Components. Using CSS-in-JS with newer React features like Server Components and Streaming requires library authors to support the latest version of React."
        },
        {
          "type": "p",
          "text": "The following libraries are supported inClient Componentsin theappdirectory (alphabetical):"
        },
        {
          "type": "list",
          "items": [
            "ant-design",
            "chakra-ui",
            "@fluentui/react-components",
            "kuma-ui",
            "@mui/material",
            "@mui/joy",
            "pandacss",
            "styled-jsx",
            "styled-components",
            "stylex",
            "tamagui",
            "tss-react",
            "vanilla-extract"
          ]
        },
        {
          "type": "p",
          "text": "The following are currently working on support:"
        },
        {
          "type": "list",
          "items": ["emotion"]
        },
        {
          "type": "p",
          "text": "If you want to style Server Components, we recommend usingCSS Modulesor other solutions that output CSS files, likeTailwind CSS."
        },
        {
          "type": "p",
          "text": "To configure CSS-in-JS, you need to:"
        },
        {
          "type": "list",
          "items": [
            "Create astyle registryto collect all CSS rules in a render.",
            "Use theuseServerInsertedHTMLhook to inject rules before any content that might use them.",
            "Create a Client Component that wraps your app with the style registry during initial server-side rendering."
          ]
        },
        {
          "type": "p",
          "text": "To configurestyled-jsxfor your application, create a new registry:"
        },
        {
          "type": "code",
          "code": "'use client'importReact,{ useState }from'react'import{ useServerInsertedHTML }from'next/navigation'import{ StyleRegistry,createStyleRegistry }from'styled-jsx'exportdefaultfunctionStyledJsxRegistry({children,}:{children:React.ReactNode}) {// Only create stylesheet once with lazy initial state// x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-stateconst[jsxStyleRegistry]=useState(()=>createStyleRegistry())useServerInsertedHTML(()=>{conststyles=jsxStyleRegistry.styles()jsxStyleRegistry.flush()return<>{styles}</>})return<StyleRegistryregistry={jsxStyleRegistry}>{children}</StyleRegistry>}"
        },
        {
          "type": "p",
          "text": "Then, wrap yourroot layoutwith the registry:"
        },
        {
          "type": "code",
          "code": "importStyledJsxRegistryfrom'./registry'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body><StyledJsxRegistry>{children}</StyledJsxRegistry></body></html>)}"
        },
        {
          "type": "p",
          "text": "To usestyled-components, enable it innext.config.js:"
        },
        {
          "type": "code",
          "code": "importtype{ NextConfig }from'next'constnextConfig:NextConfig={compiler:{styledComponents:true,},}exportdefaultnextConfig"
        },
        {
          "type": "p",
          "text": "Then, use thestyled-componentsAPI to create a global registry component to collect all CSS style rules generated during a render, and a function to return those rules. Then use theuseServerInsertedHTMLhook to inject the styles collected in the registry into the<head>HTML tag in the root layout."
        },
        {
          "type": "code",
          "code": "'use client'importReact,{ useState }from'react'import{ useServerInsertedHTML }from'next/navigation'import{ ServerStyleSheet,StyleSheetManager }from'styled-components'exportdefaultfunctionStyledComponentsRegistry({children,}:{children:React.ReactNode}) {// Only create stylesheet once with lazy initial state// x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-stateconst[styledComponentsStyleSheet]=useState(()=>newServerStyleSheet())useServerInsertedHTML(()=>{conststyles=styledComponentsStyleSheet.getStyleElement()styledComponentsStyleSheet.instance.clearTag()return<>{styles}</>})if(typeofwindow!=='undefined')return<>{children}</>return(<StyleSheetManagersheet={styledComponentsStyleSheet.instance}>{children}</StyleSheetManager>)}"
        },
        {
          "type": "p",
          "text": "Wrap thechildrenof the root layout with the style registry component:"
        },
        {
          "type": "code",
          "code": "importStyledComponentsRegistryfrom'./lib/registry'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<html><body><StyledComponentsRegistry>{children}</StyledComponentsRegistry></body></html>)}"
        },
        {
          "type": "p",
          "text": "Stylesheets published by external packages can be imported anywhere in theappdirectory, including colocated components:"
        },
        {
          "type": "code",
          "code": "import'bootstrap/dist/css/bootstrap.css'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><bodyclassName=\"container\">{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "External stylesheets must be directly imported from an npm package or downloaded and colocated with your codebase. You cannot use<link rel=\"stylesheet\" />."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/data-fetching-and-streaming",
      "title": "Getting Started: Fetching data and streaming | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This page will walk you through how you can fetch data inServer ComponentsandClient Components. As well as how to tostreamcontent that depends on data."
        },
        {
          "type": "p",
          "text": "You can fetch data in Server Components using:"
        },
        {
          "type": "list",
          "items": ["ThefetchAPI", "AnORM or database"]
        },
        {
          "type": "p",
          "text": "To fetch data with thefetchAPI, turn your component into an asynchronous function, and await thefetchcall. For example:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog')constposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "You can fetch data with an ORM or database by turning your component into an asynchronous function, and awaiting the call:"
        },
        {
          "type": "code",
          "code": "import{ db,posts }from'@/lib/db'exportdefaultasyncfunctionPage() {constallPosts=awaitdb.select().from(posts)return(<ul>{allPosts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "There are two ways to fetch data in Client Components, using:"
        },
        {
          "type": "list",
          "items": [
            "React'susehook",
            "A community library likeSWRorReact Query"
          ]
        },
        {
          "type": "p",
          "text": "You can use React'susehooktostreamdata from the server to client. Start by fetching data in your Server component, and pass the promise to your Client Component as prop:"
        },
        {
          "type": "code",
          "code": "importPostsfrom'@/app/ui/postsimport{ Suspense }from'react'exportdefaultfunctionPage() {// Don't await the data fetching functionconstposts=getPosts()return(<Suspensefallback={<div>Loading...</div>}><Postsposts={posts} /></Suspense>)}"
        },
        {
          "type": "p",
          "text": "Then, in your Client Component, use theusehook read the promise:"
        },
        {
          "type": "code",
          "code": "'use client'import{ use }from'react'exportdefaultfunctionPosts({ posts }) {constposts=use(posts)return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "In the example above, you need to wrap the<Posts />component in a<Suspense>boundary. This means the fallback will be shown while the promise is being resolved. Learn more aboutstreaming."
        },
        {
          "type": "p",
          "text": "You can use a community library likeSWRorReact Queryto fetch data in Client Components. These libraries have their own semantics for caching, streaming, and other features. For example, with SWR:"
        },
        {
          "type": "code",
          "code": "'use client'importuseSWRfrom'swr'constfetcher=(url)=>fetch(url).then((r)=>r.json())exportdefaultfunctionBlogPage() {const{data,error,isLoading}=useSWR('https://api.vercel.app/blog',fetcher)if(isLoading)return<div>Loading...</div>if(error)return<div>Error: {error.message}</div>return(<ul>{data.map((post:{ id:string; title:string})=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "Warning:The content below assumes thedynamicIOconfig optionis enabled in your application. The flag was introduced in Next.js 15 canary."
        },
        {
          "type": "p",
          "text": "When usingasync/awaitin Server Components, Next.js will opt intodynamic rendering. This means the data will be fetched and rendered on the server for every user request. If there are any slow data requests, the whole route will be blocked from rendering. To improve the initial load time and user experience, you can use streaming to break up the page's HTML into smaller chunks and progressively send those chunks from the server to the client."
        },
        {
          "type": "p",
          "text": "There are two ways you can implement streaming in your application:"
        },
        {
          "type": "list",
          "items": ["With theloading.jsfile", "With React's<Suspense>component"]
        },
        {
          "type": "p",
          "text": "You can create aloading.jsfile in the same folder as your page to stream theentire pagewhile the data is being fetched. For example, to streamapp/blog/page.js, add the file inside theapp/blogfolder."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionLoading() {// Define the Loading UI herereturn<div>Loading...</div>}"
        },
        {
          "type": "p",
          "text": "On navigation, the user will immediately see the layout and aloading statewhile the page is being rendered. The new content will then be automatically swapped in once rendering is complete."
        },
        {
          "type": "p",
          "text": "Behind-the-scenes,loading.jswill be nested insidelayout.js, and will automatically wrap thepage.jsfile and any children below in a<Suspense>boundary."
        },
        {
          "type": "p",
          "text": "This approach works well for route segments (layouts and pages), but for more granular streaming, you can use<Suspense>."
        },
        {
          "type": "p",
          "text": "<Suspense>allows you to be more granular about what parts of the page to stream. For example, you can immediately show any page content that falls outside of the<Suspense>boundary, and stream in the list of blog posts inside the boundary."
        },
        {
          "type": "code",
          "code": "import{ Suspense }from'react'importBlogListfrom'@/components/BlogList'importBlogListSkeletonfrom'@/components/BlogListSkeleton'exportdefaultfunctionBlogPage() {return(<div>{/* This content will be sent to the client immediately */}<header><h1>Welcome to the Blog</h1><p>Read the latest posts below.</p></header><main>{/* Any content wrapped in a <Suspense> boundary will be streamed */}<Suspensefallback={<BlogListSkeleton/>}><BlogList/></Suspense></main></div>)}"
        },
        {
          "type": "p",
          "text": "An instant loading state is fallback UI that is shown immediately to the user after navigation. For the best user experience, we recommend designing loading states that are meaningful and help users understand the app is responding. For example, you can use skeletons and spinners, or a small but meaningful part of future screens such as a cover photo, title, etc. In development, you can preview and inspect the loading state of your components using theReact Devtools."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/images-and-fonts",
      "title": "Getting Started: Images and Fonts | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js comes with automatic image and font optimization for better performance and user experience. This page will guide you through how to start using them."
        },
        {
          "type": "p",
          "text": "You can store static files, like images and fonts, under a folder calledpublicin the root directory. Files insidepubliccan then be referenced by your code starting from the base URL (/)."
        },
        {
          "type": "p",
          "text": "The Next.js<Image>component extends the HTML<img>element to provide:"
        },
        {
          "type": "list",
          "items": [
            "Size optimization:Automatically serving correctly sized images for each device, using modern image formats like WebP and AVIF.",
            "Visual stability:Preventinglayout shiftautomatically when images are loading.",
            "Faster page loads:Only loading images when they enter the viewport using native browser lazy loading, with optional blur-up placeholders.",
            "Asset flexibility:Resizing images on-demand, even images stored on remote servers."
          ]
        },
        {
          "type": "p",
          "text": "To start using<Image>, import it fromnext/imageand render it within your component."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return<Imagesrc=\"\"alt=\"\"/>}"
        },
        {
          "type": "p",
          "text": "Thesrcproperty can be alocalorremoteimage."
        },
        {
          "type": "p",
          "text": "To use a local image,importyour.jpg,.png, or.webpimage files from yourpublicfolder."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'importprofilePicfrom'./me.png'exportdefaultfunctionPage() {return(<Imagesrc={profilePic}alt=\"Picture of the author\"// width={500} automatically provided// height={500} automatically provided// blurDataURL=\"data:...\" automatically provided// placeholder=\"blur\" // Optional blur-up while loading/>)}"
        },
        {
          "type": "p",
          "text": "Next.js will automatically determine the intrinsicwidthandheightof your image based on the imported file. These values are used to determine the image ratio and preventCumulative Layout Shiftwhile your image is loading."
        },
        {
          "type": "p",
          "text": "To use a remote image, you can provide a URL string for thesrcproperty."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'exportdefaultfunctionPage() {return(<Imagesrc=\"https://s3.amazonaws.com/my-bucket/profile.png\"alt=\"Picture of the author\"width={500}height={500}/>)}"
        },
        {
          "type": "p",
          "text": "Since Next.js does not have access to remote files during the build process, you'll need to provide thewidth,heightand optionalblurDataURLprops manually. Thewidthandheightattributes are used to infer the correct aspect ratio of image and avoid layout shift from the image loading in. Then, to safely allow images from remote servers, you need to define a list of supported URL patterns innext.config.js. Be as specific as possible to prevent malicious usage. For example, the following configuration will only allow images from a specific AWS S3 bucket:"
        },
        {
          "type": "code",
          "code": "import{ NextConfig }from'next'constconfig:NextConfig={images:{remotePatterns:[{protocol:'https',hostname:'s3.amazonaws.com',port:'',pathname:'/my-bucket/**',search:'',},],},}exportdefaultconfig"
        },
        {
          "type": "p",
          "text": "Thenext/fontmodule automatically optimizes your fonts and removes external network requests for improved privacy and performance. It includesbuilt-in automatic self-hostingforanyfont file. This means you can optimally load web fonts with no layout shift. To start usingnext/font, import it fromnext/font/localornext/font/google, call it as a function with the appropriate options, and set theclassNameof the element you want to apply the font to. For example:"
        },
        {
          "type": "code",
          "code": "import{ Geist }from'next/font/google'constgeist=Geist({subsets:['latin'],})exportdefaultfunctionLayout({ children }:{ children:React.ReactNode}) {return(<htmllang=\"en\"className={geist.className}><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "You can automatically self-host any Google Font. Fonts are included in the deployment and served from the same domain as your deployment, meaning no requests are sent to Google by the browser when the user visits your site. To start using a Google Font, import your chosen font fromnext/font/google:"
        },
        {
          "type": "code",
          "code": "import{ Geist }from'next/font/google'constgeist=Geist({subsets:['latin'],})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={geist.className}><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "We recommend usingvariable fontsfor the best performance and flexibility. But if you can't use a variable font, you willneed to specify a weight:"
        },
        {
          "type": "code",
          "code": "import{ Roboto }from'next/font/google'constroboto=Roboto({weight:'400',subsets:['latin'],})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={roboto.className}><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "To use a local font, import your font fromnext/font/localand specify thesrcof your local font file in thepublicfolder."
        },
        {
          "type": "code",
          "code": "importlocalFontfrom'next/font/local'constmyFont=localFont({src:'./my-font.woff2',})exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"className={myFont.className}><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "If you want to use multiple files for a single font family,srccan be an array:"
        },
        {
          "type": "code",
          "code": "constroboto=localFont({src:[{path:'./Roboto-Regular.woff2',weight:'400',style:'normal',},{path:'./Roboto-Italic.woff2',weight:'400',style:'italic',},{path:'./Roboto-Bold.woff2',weight:'700',style:'normal',},{path:'./Roboto-BoldItalic.woff2',weight:'700',style:'italic',},],})"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/installation",
      "title": "Getting Started: Installation | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "list",
          "items": [
            "Node.js 18.18or later.",
            "macOS, Windows (including WSL), and Linux are supported."
          ]
        },
        {
          "type": "p",
          "text": "We recommend starting a new Next.js app usingcreate-next-app, which sets up everything automatically for you. To create a project, run:"
        },
        {
          "type": "code",
          "code": "npxcreate-next-app@latest"
        },
        {
          "type": "p",
          "text": "On installation, you'll see the following prompts:"
        },
        {
          "type": "code",
          "code": "What is your project named? my-appWould you like to use TypeScript? No / YesWould you like to use ESLint? No / YesWould you like to use Tailwind CSS? No / YesWould you like your code inside a `src/` directory? No / YesWould you like to use App Router? (recommended) No / YesWould you like to use Turbopack for `next dev`?  No / YesWould you like to customize the import alias (`@/*` by default)? No / YesWhat import alias would you like configured? @/*"
        },
        {
          "type": "p",
          "text": "After the prompts,create-next-appwill create a folder with your project name and install the required dependencies."
        },
        {
          "type": "p",
          "text": "To manually create a new Next.js app, install the required packages:"
        },
        {
          "type": "code",
          "code": "npminstallnext@latestreact@latestreact-dom@latest"
        },
        {
          "type": "p",
          "text": "Open yourpackage.jsonfile and add the followingscripts:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"dev\":\"next dev\",\"build\":\"next build\",\"start\":\"next start\",\"lint\":\"next lint\"}}"
        },
        {
          "type": "p",
          "text": "These scripts refer to the different stages of developing an application:"
        },
        {
          "type": "list",
          "items": [
            "dev: runsnext devto start Next.js in development mode.",
            "build: runsnext buildto build the application for production usage.",
            "start: runsnext startto start a Next.js production server.",
            "lint: runsnext lintto set up Next.js' built-in ESLint configuration."
          ]
        },
        {
          "type": "p",
          "text": "Next.js uses file-system routing, which means the routes in your application are determined by how you structure your files. Create anappfolder, then add alayout.tsxandpage.tsxfile. These will be rendered when the user visits the root of your application (/)."
        },
        {
          "type": "p",
          "text": "Create aroot layoutinsideapp/layout.tsxwith the required<html>and<body>tags:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body></html>)}"
        },
        {
          "type": "p",
          "text": "Finally, create a home pageapp/page.tsxwith some initial content:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage() {return<h1>Hello, Next.js!</h1>}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If you forget to createlayout.tsx, Next.js will automatically create this file when running the development server withnext dev.",
            "You can optionally use asrcdirectoryin the root of your project to separate your application's code from configuration files."
          ]
        },
        {
          "type": "p",
          "text": "You can optionally create apublicfolderat the root of your project to store static assets such as images, fonts, etc. Files insidepubliccan then be referenced by your code starting from the base URL (/)."
        },
        {
          "type": "list",
          "items": [
            "Runnpm run devto start the development server.",
            "Visithttp://localhost:3000to view your application.",
            "Edit theapp/page.tsxfile and save it to see the updated result in your browser."
          ]
        },
        {
          "type": "p",
          "text": "Minimum TypeScript version:v4.5.2"
        },
        {
          "type": "p",
          "text": "Next.js comes with built-in TypeScript support. To add TypeScript to your project, rename a file to.ts/.tsx. Runnext dev, Next.js will automatically install the necessary dependencies and add atsconfig.jsonfile with the recommended config options."
        },
        {
          "type": "p",
          "text": "Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion. You can enable the plugin in VS Code by:"
        },
        {
          "type": "list",
          "items": [
            "Opening the command palette (Ctrl/⌘+Shift+P)",
            "Searching for \"TypeScript: Select TypeScript Version\"",
            "Selecting \"Use Workspace Version\""
          ]
        },
        {
          "type": "p",
          "text": "Now, when editing files, the custom plugin will be enabled. When runningnext build, the custom type checker will be used. See theTypeScript configurationpage for more information on how to use TypeScript in your project."
        },
        {
          "type": "p",
          "text": "Next.js comes with built-in ESLint, automatically installing the necessary packages and configuring the proper settings when you create a new project withcreate-next-app. To add ESLint to an existing project, addnext lintas a script topackage.json:"
        },
        {
          "type": "code",
          "code": "{\"scripts\":{\"lint\":\"next lint\"}}"
        },
        {
          "type": "p",
          "text": "Then, runnpm run lintand you will be guided through the installation and configuration process."
        },
        {
          "type": "code",
          "code": "pnpmlint"
        },
        {
          "type": "p",
          "text": "You'll see a prompt like this:"
        },
        {
          "type": "p",
          "text": "? How would you like to configure ESLint? ❯ Strict (recommended)BaseCancel"
        },
        {
          "type": "list",
          "items": [
            "Strict: Includes Next.js' base ESLint configuration along with a stricter Core Web Vitals rule-set. This is the recommended configuration for developers setting up ESLint for the first time.",
            "Base: Includes Next.js' base ESLint configuration.",
            "Cancel: Does not include any ESLint configuration. Only select this option if you plan on setting up your own custom ESLint configuration."
          ]
        },
        {
          "type": "p",
          "text": "If either of the two configuration options are selected, Next.js will automatically installeslintandeslint-config-nextas dependencies in your application and create an.eslintrc.jsonfile in the root of your project that includes your selected configuration. You can now runnext lintevery time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically run during every build (next build). Errors will fail the build, while warnings will not. See theESLint Pluginpage for more information on how to configure ESLint in your project."
        },
        {
          "type": "p",
          "text": "Next.js has in-built support for the\"paths\"and\"baseUrl\"options oftsconfig.jsonandjsconfig.jsonfiles. These options allow you to alias project directories to absolute paths, making it easier to import modules. For example:"
        },
        {
          "type": "code",
          "code": "// Beforeimport{ Button }from'../../../components/button'// Afterimport{ Button }from'@/components/button'"
        },
        {
          "type": "p",
          "text": "To configure absolute imports, add thebaseUrlconfiguration option to yourtsconfig.jsonorjsconfig.jsonfile. For example:"
        },
        {
          "type": "code",
          "code": "{\"compilerOptions\":{\"baseUrl\":\"src/\"}}"
        },
        {
          "type": "p",
          "text": "In addition to configuring thebaseUrlpath, you can use the\"paths\"option to\"alias\"module paths. For example, the following configuration maps@/components/*tocomponents/*:"
        },
        {
          "type": "code",
          "code": "{\"compilerOptions\":{\"baseUrl\":\"src/\",\"paths\":{\"@/styles/*\":[\"styles/*\"],\"@/components/*\":[\"components/*\"]}}}"
        },
        {
          "type": "p",
          "text": "Each of the\"paths\"are relative to thebaseUrllocation. For example:"
        },
        {
          "type": "code",
          "code": "importButtonfrom'@/components/button'import'@/styles/styles.css'exportdefaultfunctionHomePage() {return(<div><h1>Hello World</h1><Button/></div>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/app/getting-started/project-structure",
      "title": "Getting Started: Project Structure | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "This page provides an overview of the folder and file conventions in Next.js, as well as tips for organizing your project."
        },
        {
          "type": "p",
          "text": "Top-level folders are used to organize your application's code and static assets."
        },
        {
          "type": "p",
          "text": "Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables."
        },
        {
          "type": "p",
          "text": "Apart fromfolder and file conventions, Next.js isunopinionatedabout how you organize and colocate your project files. But it does provide several features to help you organize your project."
        },
        {
          "type": "p",
          "text": "In theappdirectory,nested folder hierarchydefines route structure. Each folder represents a route segment that is mapped to a corresponding segment in a URL path. However, even though route structure is defined through folders, a route isnot publicly accessibleuntil apage.jsorroute.jsfile is added to a route segment."
        },
        {
          "type": "p",
          "text": "And, even when a route is made publicly accessible, only thecontent returnedbypage.jsorroute.jsis sent to the client."
        },
        {
          "type": "p",
          "text": "This means thatproject filescan besafely colocatedinside route segments in theappdirectory without accidentally being routable."
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "While youcancolocate your project files inappyou don'thaveto. If you prefer, you cankeep them outside theappdirectory."
          ]
        },
        {
          "type": "p",
          "text": "Private folders can be created by prefixing a folder with an underscore:_folderName This indicates the folder is a private implementation detail and should not be considered by the routing system, therebyopting the folder and all its subfoldersout of routing."
        },
        {
          "type": "p",
          "text": "Since files in theappdirectory can besafely colocated by default, private folders are not required for colocation. However, they can be useful for:"
        },
        {
          "type": "list",
          "items": [
            "Separating UI logic from routing logic.",
            "Consistently organizing internal files across a project and the Next.js ecosystem.",
            "Sorting and grouping files in code editors.",
            "Avoiding potential naming conflicts with future Next.js file conventions."
          ]
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "While not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern.",
            "You can create URL segments that start with an underscore by prefixing the folder name with%5F(the URL-encoded form of an underscore):%5FfolderName.",
            "If you don't use private folders, it would be helpful to know Next.jsspecial file conventionsto prevent unexpected naming conflicts."
          ]
        },
        {
          "type": "p",
          "text": "Route groups can be created by wrapping a folder in parenthesis:(folderName) This indicates the folder is for organizational purposes and shouldnot be includedin the route's URL path."
        },
        {
          "type": "p",
          "text": "Route groups are useful for:"
        },
        {
          "type": "list",
          "items": [
            "Organizing routes into groupse.g. by site section, intent, or team.",
            "Enabling nested layouts in the same route segment level:Creating multiple nested layouts in the same segment, including multiple root layoutsAdding a layout to a subset of routes in a common segment",
            "Creating multiple nested layouts in the same segment, including multiple root layouts",
            "Adding a layout to a subset of routes in a common segment"
          ]
        },
        {
          "type": "p",
          "text": "Next.js supports storing application code (includingapp) inside an optionalsrcdirectory. This separates application code from project configuration files which mostly live in the root of a project."
        },
        {
          "type": "p",
          "text": "The following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project."
        },
        {
          "type": "p",
          "text": "Good to know: In our examples below, we're usingcomponentsandlibfolders as generalized placeholders, their naming has no special framework significance and your projects might use other folders likeui,utils,hooks,styles, etc."
        },
        {
          "type": "p",
          "text": "This strategy stores all application code in shared folders in theroot of your projectand keeps theappdirectory purely for routing purposes."
        },
        {
          "type": "p",
          "text": "This strategy stores all application code in shared folders in theroot of theappdirectory."
        },
        {
          "type": "p",
          "text": "This strategy stores globally shared application code in the rootappdirectory andsplitsmore specific application code into the route segments that use them."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/architecture",
      "title": "Introduction: Architecture | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Learn about the Next.js architecture and how it works under the hood."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/architecture/accessibility",
      "title": "Architecture: Accessibility | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The Next.js team is committed to making Next.js accessible to all developers (and their end-users). By adding accessibility features to Next.js by default, we aim to make the Web more inclusive for everyone."
        },
        {
          "type": "p",
          "text": "When transitioning between pages rendered on the server (e.g. using the<a href>tag) screen readers and other assistive technology announce the page title when the page loads so that users understand that the page has changed. In addition to traditional page navigations, Next.js also supports client-side transitions for improved performance (usingnext/link). To ensure that client-side transitions are also announced to assistive technology, Next.js includes a route announcer by default. The Next.js route announcer looks for the page name to announce by first inspectingdocument.title, then the<h1>element, and finally the URL pathname. For the most accessible user experience, ensure that each page in your application has a unique and descriptive title."
        },
        {
          "type": "p",
          "text": "Next.js provides anintegrated ESLint experienceout of the box, including custom rules for Next.js. By default, Next.js includeseslint-plugin-jsx-a11yto help catch accessibility issues early, including warning on:"
        },
        {
          "type": "list",
          "items": [
            "aria-props",
            "aria-proptypes",
            "aria-unsupported-elements",
            "role-has-required-aria-props",
            "role-supports-aria-props"
          ]
        },
        {
          "type": "p",
          "text": "For example, this plugin helps ensure you add alt text toimgtags, use correctaria-*attributes, use correctroleattributes, and more."
        },
        {
          "type": "list",
          "items": [
            "WebAIM WCAG checklist",
            "WCAG 2.2 Guidelines",
            "The A11y Project",
            "Checkcolor contrast ratiosbetween foreground and background elements",
            "Useprefers-reduced-motionwhen working with animations"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/architecture/fast-refresh",
      "title": "Architecture: Fast Refresh | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Fast refresh is a React feature integrated into Next.js that allows you live reload the browser page while maintaining temporary client-side state when you save changes to a file. It's enabled by default in all Next.js applications on9.4 or newer. With Fast Refresh enabled, most edits should be visible within a second."
        },
        {
          "type": "list",
          "items": [
            "If you edit a file thatonly exports React component(s), Fast Refresh will\nupdate the code only for that file, and re-render your component. You can edit\nanything in that file, including styles, rendering logic, event handlers, or\neffects.",
            "If you edit a file with exports thataren'tReact components, Fast Refresh\nwill re-run both that file, and the other files importing it. So if bothButton.jsandModal.jsimporttheme.js, editingtheme.jswill update\nboth components.",
            "Finally, if youedit a filethat'simported by files outside of the\nReact tree, Fast Refreshwill fall back to doing a full reload. You\nmight have a file which renders a React component but also exports a value\nthat is imported by anon-React component. For example, maybe your\ncomponent also exports a constant, and a non-React utility file imports it. In\nthat case, consider migrating the constant to a separate file and importing it\ninto both files. This will re-enable Fast Refresh to work. Other cases can\nusually be solved in a similar way."
          ]
        },
        {
          "type": "p",
          "text": "If you make a syntax error during development, you can fix it and save the file\nagain. The error will disappear automatically, so you won't need to reload the\napp.You will not lose component state."
        },
        {
          "type": "p",
          "text": "If you make a mistake that leads to a runtime error inside your component,\nyou'll be greeted with a contextual overlay. Fixing the error will automatically\ndismiss the overlay, without reloading the app. Component state will be retained if the error did not occur during rendering. If\nthe error did occur during rendering, React will remount your application using\nthe updated code. If you haveerror boundariesin your app (which is a good idea for graceful failures in production), they\nwill retry rendering on the next edit after a rendering error. This means having\nan error boundary can prevent you from always getting reset to the root app\nstate. However, keep in mind that error boundaries shouldn't betoogranular.\nThey are used by React in production, and should always be designed\nintentionally."
        },
        {
          "type": "p",
          "text": "Fast Refresh tries to preserve local React state in the component you're\nediting, but only if it's safe to do so. Here's a few reasons why you might see\nlocal state being reset on every edit to a file:"
        },
        {
          "type": "list",
          "items": [
            "Local state is not preserved for class components (only function components\nand Hooks preserve state).",
            "The file you're editing might haveotherexports in addition to a React\ncomponent.",
            "Sometimes, a file would export the result of calling a higher-order component\nlikeHOC(WrappedComponent). If the returned component is a\nclass, its state will be reset.",
            "Anonymous arrow functions likeexport default () => <div />;cause Fast Refresh to not preserve local component state. For large codebases you can use ourname-default-componentcodemod."
          ]
        },
        {
          "type": "p",
          "text": "As more of your codebase moves to function components and Hooks, you can expect\nstate to be preserved in more cases."
        },
        {
          "type": "list",
          "items": [
            "Fast Refresh preserves React local state in function components (and Hooks) by\ndefault.",
            "Sometimes you might want toforcethe state to be reset, and a component to\nbe remounted. For example, this can be handy if you're tweaking an animation\nthat only happens on mount. To do this, you can add// @refresh resetanywhere in the file you're editing. This directive is local to the file, and\ninstructs Fast Refresh to remount components defined in that file on every\nedit.",
            "You can putconsole.logordebugger;into the components you edit during\ndevelopment.",
            "Remember that imports are case sensitive. Both fast and full refresh can fail,\nwhen your import doesn't match the actual filename.\nFor example,'./header'vs'./Header'."
          ]
        },
        {
          "type": "p",
          "text": "When possible, Fast Refresh attempts to preserve the state of your component\nbetween edits. In particular,useStateanduseRefpreserve their previous\nvalues as long as you don't change their arguments or the order of the Hook\ncalls. Hooks with dependencies—such asuseEffect,useMemo, anduseCallback—willalwaysupdate during Fast Refresh. Their list of dependencies will be ignored\nwhile Fast Refresh is happening. For example, when you edituseMemo(() => x * 2, [x])touseMemo(() => x * 10, [x]), it will re-run even thoughx(the dependency)\nhas not changed. If React didn't do that, your edit wouldn't reflect on the\nscreen! Sometimes, this can lead to unexpected results. For example, even auseEffectwith an empty array of dependencies would still re-run once during Fast Refresh. However, writing code resilient to occasional re-running ofuseEffectis a good practice even\nwithout Fast Refresh. It will make it easier for you to introduce new dependencies to it later on\nand it's enforced byReact Strict Mode,\nwhich we highly recommend enabling."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/architecture/nextjs-compiler",
      "title": "Architecture: Next.js Compiler | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "The Next.js Compiler, written in Rust usingSWC, allows Next.js to transform and minify your JavaScript code for production. This replaces Babel for individual files and Terser for minifying output bundles. Compilation using the Next.js Compiler is 17x faster than Babel and enabled by default since Next.js version 12. If you have an existing Babel configuration or are usingunsupported features, your application will opt-out of the Next.js Compiler and continue using Babel."
        },
        {
          "type": "p",
          "text": "SWCis an extensible Rust-based platform for the next generation of fast developer tools. SWC can be used for compilation, minification, bundling, and more – and is designed to be extended. It's something you can call to perform code transformations (either built-in or custom). Running those transformations happens through higher-level tools like Next.js. We chose to build on SWC for a few reasons:"
        },
        {
          "type": "list",
          "items": [
            "Extensibility:SWC can be used as a Crate inside Next.js, without having to fork the library or workaround design constraints.",
            "Performance:We were able to achieve ~3x faster Fast Refresh and ~5x faster builds in Next.js by switching to SWC, with more room for optimization still in progress.",
            "WebAssembly:Rust's support for WASM is essential for supporting all possible platforms and taking Next.js development everywhere.",
            "Community:The Rust community and ecosystem are amazing and still growing."
          ]
        },
        {
          "type": "p",
          "text": "We're working to portbabel-plugin-styled-componentsto the Next.js Compiler. First, update to the latest version of Next.js:npm install next@latest. Then, update yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{styledComponents:true,},}"
        },
        {
          "type": "p",
          "text": "For advanced use cases, you can configure individual properties for styled-components compilation."
        },
        {
          "type": "p",
          "text": "Note:ssranddisplayNametransforms are the main requirement for usingstyled-componentsin Next.js."
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{// see https://styled-components.com/docs/tooling#babel-plugin for more info on the options.styledComponents:{// Enabled by default in development, disabled in production to reduce file size,// setting this will override the default for all environments.displayName?:boolean,// Enabled by default.ssr?:boolean,// Enabled by default.fileName?:boolean,// Empty by default.topLevelImportPaths?:string[],// Defaults to [\"index\"].meaninglessFileNames?:string[],// Enabled by default.minify?:boolean,// Enabled by default.transpileTemplateLiterals?:boolean,// Empty by default.namespace?:string,// Disabled by default.pure?:boolean,// Enabled by default.cssProp?:boolean,},},}"
        },
        {
          "type": "p",
          "text": "The Next.js Compiler transpiles your tests and simplifies configuring Jest together with Next.js including:"
        },
        {
          "type": "list",
          "items": [
            "Auto mocking of.css,.module.css(and their.scssvariants), and image imports",
            "Automatically sets uptransformusing SWC",
            "Loading.env(and all variants) intoprocess.env",
            "Ignoresnode_modulesfrom test resolving and transforms",
            "Ignoring.nextfrom test resolving",
            "Loadsnext.config.jsfor flags that enable experimental SWC transforms"
          ]
        },
        {
          "type": "p",
          "text": "First, update to the latest version of Next.js:npm install next@latest. Then, update yourjest.config.jsfile:"
        },
        {
          "type": "code",
          "code": "constnextJest=require('next/jest')// Providing the path to your Next.js app which will enable loading next.config.js and .env filesconstcreateJestConfig=nextJest({ dir:'./'})// Any custom config you want to pass to JestconstcustomJestConfig={setupFilesAfterEnv:['<rootDir>/jest.setup.js'],}// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is asyncmodule.exports=createJestConfig(customJestConfig)"
        },
        {
          "type": "p",
          "text": "To enableRelaysupport:"
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{relay:{// This should match relay.config.jssrc:'./',artifactDirectory:'./__generated__',language:'typescript',eagerEsModules:false,},},}"
        },
        {
          "type": "p",
          "text": "Good to know: In Next.js, all JavaScript files inpagesdirectory are considered routes. So, forrelay-compileryou'll need to specifyartifactDirectoryconfiguration settings outside of thepages, otherwiserelay-compilerwill generate files next to the source file in the__generated__directory, and this file will be considered a route, which will break production builds."
        },
        {
          "type": "p",
          "text": "Allows to remove JSX properties. This is often used for testing. Similar tobabel-plugin-react-remove-properties. To remove properties matching the default regex^data-test:"
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{reactRemoveProperties:true,},}"
        },
        {
          "type": "p",
          "text": "To remove custom properties:"
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{// The regexes defined here are processed in Rust so the syntax is different from// JavaScript `RegExp`s. See https://docs.rs/regex.reactRemoveProperties:{ properties:['^data-custom$'] },},}"
        },
        {
          "type": "p",
          "text": "This transform allows for removing allconsole.*calls in application code (notnode_modules). Similar tobabel-plugin-transform-remove-console. Remove allconsole.*calls:"
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{removeConsole:true,},}"
        },
        {
          "type": "p",
          "text": "Removeconsole.*output exceptconsole.error:"
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{removeConsole:{exclude:['error'],},},}"
        },
        {
          "type": "p",
          "text": "Next.js will automatically detectexperimentalDecoratorsinjsconfig.jsonortsconfig.json. Legacy decorators are commonly used with older versions of libraries likemobx. This flag is only supported for compatibility with existing applications. We do not recommend using legacy decorators in new applications. First, update to the latest version of Next.js:npm install next@latest. Then, update yourjsconfig.jsonortsconfig.jsonfile:"
        },
        {
          "type": "code",
          "code": "{\"compilerOptions\": {\"experimentalDecorators\":true}}"
        },
        {
          "type": "p",
          "text": "Next.js will automatically detectjsxImportSourceinjsconfig.jsonortsconfig.jsonand apply that. This is commonly used with libraries likeTheme UI. First, update to the latest version of Next.js:npm install next@latest. Then, update yourjsconfig.jsonortsconfig.jsonfile:"
        },
        {
          "type": "code",
          "code": "{\"compilerOptions\": {\"jsxImportSource\":\"theme-ui\"}}"
        },
        {
          "type": "p",
          "text": "We're working to port@emotion/babel-pluginto the Next.js Compiler. First, update to the latest version of Next.js:npm install next@latest. Then, update yournext.config.jsfile:"
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{emotion:boolean|{// default is true. It will be disabled when build type is production.sourceMap?:boolean,// default is 'dev-only'.autoLabel?:'never'|'dev-only'|'always',// default is '[local]'.// Allowed values: `[local]` `[filename]` and `[dirname]`// This option only works when autoLabel is set to 'dev-only' or 'always'.// It allows you to define the format of the resulting label.// The format is defined via string where variable parts are enclosed in square brackets [].// For example labelFormat: \"my-classname--[local]\", where [local] will be replaced with the name of the variable the result is assigned to.labelFormat?:string,// default is undefined.// This option allows you to tell the compiler what imports it should// look at to determine what it should transform so if you re-export// Emotion's exports, you can still use transforms.importMap?:{[packageName: string]:{[exportName: string]:{canonicalImport?:[string,string],styledBaseImport?:[string,string],}}},},},}"
        },
        {
          "type": "p",
          "text": "Next.js' swc compiler is used for minification by default since v13. This is 7x faster than Terser."
        },
        {
          "type": "p",
          "text": "Good to know:Starting with v15, minification cannot customized usingnext.config.js. Support for theswcMinifyflag has been removed."
        },
        {
          "type": "p",
          "text": "Next.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (node_modules). This replaces thenext-transpile-modulespackage."
        },
        {
          "type": "code",
          "code": "module.exports={transpilePackages:['@acme/ui','lodash-es'],}"
        },
        {
          "type": "p",
          "text": "This option has been superseded byoptimizePackageImportsin Next.js 13.5. We recommend upgrading to use the new option that does not require manual configuration of import paths."
        },
        {
          "type": "p",
          "text": "Thedefineoption allows you to statically replace variables in your code at build-time.\nThe option takes an object as key-value pairs, where the keys are the variables that should be replaced with the corresponding values. Use thecompiler.definefield innext.config.js:"
        },
        {
          "type": "code",
          "code": "module.exports={compiler:{define:{MY_STRING_VARIABLE:JSON.stringify('my-string'),MY_NUMBER_VARIABLE:'42',},},}"
        },
        {
          "type": "p",
          "text": "You can generate SWC's internal transform traces as chromium'strace event format."
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{swcTraceProfiling:true,},}"
        },
        {
          "type": "p",
          "text": "Once enabled, swc will generate trace named asswc-trace-profile-${timestamp}.jsonunder.next/. Chromium's trace viewer (chrome://tracing/,https://ui.perfetto.dev/), or compatible flamegraph viewer (https://www.speedscope.app/) can load & visualize generated traces."
        },
        {
          "type": "p",
          "text": "You can configure swc's transform to use SWC's experimental plugin support written in wasm to customize transformation behavior."
        },
        {
          "type": "code",
          "code": "module.exports={experimental:{swcPlugins:[['plugin',{...pluginOptions,},],],},}"
        },
        {
          "type": "p",
          "text": "swcPluginsaccepts an array of tuples for configuring plugins. A tuple for the plugin contains the path to the plugin and an object for plugin configuration. The path to the plugin can be an npm module package name or an absolute path to the.wasmbinary itself."
        },
        {
          "type": "p",
          "text": "When your application has a.babelrcfile, Next.js will automatically fall back to using Babel for transforming individual files. This ensures backwards compatibility with existing applications that leverage custom Babel plugins. If you're using a custom Babel setup,please share your configuration. We're working to port as many commonly used Babel transformations as possible, as well as supporting plugins in the future."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/architecture/supported-browsers",
      "title": "Architecture: Supported Browsers | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js supportsmodern browserswith zero configuration."
        },
        {
          "type": "list",
          "items": [
            "Chrome 64+",
            "Edge 79+",
            "Firefox 67+",
            "Opera 51+",
            "Safari 12+"
          ]
        },
        {
          "type": "p",
          "text": "If you would like to target specific browsers or features, Next.js supportsBrowserslistconfiguration in yourpackage.jsonfile. Next.js uses the following Browserslist configuration by default:"
        },
        {
          "type": "code",
          "code": "{\"browserslist\":[\"chrome 64\",\"edge 79\",\"firefox 67\",\"opera 51\",\"safari 12\"]}"
        },
        {
          "type": "p",
          "text": "We injectwidely used polyfills, including:"
        },
        {
          "type": "list",
          "items": [
            "fetch()— Replacing:whatwg-fetchandunfetch.",
            "URL— Replacing: theurlpackage (Node.js API).",
            "Object.assign()— Replacing:object-assign,object.assign, andcore-js/object/assign."
          ]
        },
        {
          "type": "p",
          "text": "If any of your dependencies include these polyfills, they’ll be eliminated automatically from the production build to avoid duplication. In addition, to reduce bundle size, Next.js will only load these polyfills for browsers that require them. The majority of the web traffic globally will not download these polyfills."
        },
        {
          "type": "p",
          "text": "If your own code or any external npm dependencies require features not supported by your target browsers (such as IE 11), you need to add polyfills yourself. In this case, you should add a top-level import for thespecific polyfillyou need in yourCustom<App>or the individual component."
        },
        {
          "type": "p",
          "text": "Next.js allows you to use the latest JavaScript features out of the box. In addition toES6 features, Next.js also supports:"
        },
        {
          "type": "list",
          "items": [
            "Async/await(ES2017)",
            "Object Rest/Spread Properties(ES2018)",
            "Dynamicimport()(ES2020)",
            "Optional Chaining(ES2020)",
            "Nullish Coalescing(ES2020)",
            "Class FieldsandStatic Properties(ES2022)",
            "and more!"
          ]
        },
        {
          "type": "p",
          "text": "Next.js has built-in TypeScript support.Learn more here."
        },
        {
          "type": "p",
          "text": "You can customize babel configuration.Learn more here."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/google-font-display",
      "title": "Google Font Display | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Enforce font-display behavior with Google Fonts."
        },
        {
          "type": "p",
          "text": "For a Google Font, the font-display descriptor was either missing or set toauto,block, orfallback, which are not recommended."
        },
        {
          "type": "p",
          "text": "For most cases, the best font display strategy for custom fonts isoptional."
        },
        {
          "type": "code",
          "code": "importHeadfrom'next/head'exportdefaultfunctionIndexPage() {return(<div><Head><linkhref=\"https://fonts.googleapis.com/css2?family=Krona+One&display=optional\"rel=\"stylesheet\"/></Head></div>)}"
        },
        {
          "type": "p",
          "text": "Specifyingdisplay=optionalminimizes the risk of invisible text or layout shift. If swapping to the custom font after it has loaded is important to you, then usedisplay=swapinstead."
        },
        {
          "type": "p",
          "text": "If you want to specifically display a font using anauto,block, orfallbackstrategy, then you can disable this rule."
        },
        {
          "type": "list",
          "items": [
            "Controlling Font Performance with font-display",
            "Google Fonts API Docs",
            "CSSfont-displayproperty"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/google-font-preconnect",
      "title": "Google Font Preconnect | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Note: Next.js automatically adds<link rel=\"preconnect\" />after version12.0.1."
        },
        {
          "type": "p",
          "text": "Ensurepreconnectis used with Google Fonts."
        },
        {
          "type": "p",
          "text": "A preconnect resource hint was not used with a request to the Google Fonts domain. Addingpreconnectis recommended to initiate an early connection to the origin."
        },
        {
          "type": "p",
          "text": "Addrel=\"preconnect\"to the Google Font domain<link>tag:"
        },
        {
          "type": "code",
          "code": "<linkrel=\"preconnect\"href=\"https://fonts.gstatic.com\"/>"
        },
        {
          "type": "p",
          "text": "Note: aseparatelink withdns-prefetchcan be used as a fallback for browsers that don't supportpreconnectalthough this is not required."
        },
        {
          "type": "list",
          "items": [
            "Preconnect to required origins",
            "Preconnect and dns-prefetch",
            "Next.js Font Optimization"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/inline-script-id",
      "title": "Inline script id | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Enforceidattribute onnext/scriptcomponents with inline content."
        },
        {
          "type": "p",
          "text": "next/scriptcomponents with inline content require anidattribute to be defined to track and optimize the script."
        },
        {
          "type": "p",
          "text": "Add anidattribute to thenext/scriptcomponent."
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionApp({ Component,pageProps }) {return(<><Scriptid=\"my-script\">{`console.log('Hello world!');`}</Script><Component{...pageProps} /></>)}"
        },
        {
          "type": "list",
          "items": ["Docs for Next.js Script component"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide",
      "title": "Middleware Upgrade Guide | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "As we work on improving Middleware for General Availability (GA), we've made some changes to the Middleware APIs (and how you define Middleware in your application) based on your feedback. This upgrade guide will help you understand the changes, why they were made, and how to migrate your existing Middleware to the new API. The guide is for Next.js developers who:"
        },
        {
          "type": "list",
          "items": [
            "Currently use the beta Next.js Middleware features",
            "Choose to upgrade to the next stable version of Next.js (v12.2)"
          ]
        },
        {
          "type": "p",
          "text": "You can start upgrading your Middleware usage today with the latest release (npm i next@latest)."
        },
        {
          "type": "p",
          "text": "Note: These changes described in this guide are included in Next.js12.2. You can keep your current site structure, including nested Middleware, until you move to12.2(or acanarybuild of Next.js)."
        },
        {
          "type": "p",
          "text": "If you have ESLint configured, you will need to runnpm i eslint-config-next@latest --save-devto upgrade your ESLint configuration to ensure the same version is being used as the Next.js version. You might also need to restart VSCode for the changes to take effect."
        },
        {
          "type": "p",
          "text": "If you're using Next.js on Vercel, your existing deploys using Middleware will continue to work, and you can continue to deploy your site using Middleware. When you upgrade your site to the next stable version of Next.js (v12.2), you will need to follow this upgrade guide to update your Middleware."
        },
        {
          "type": "list",
          "items": [
            "No Nested Middleware",
            "No Response Body",
            "Cookies API Revamped",
            "New User-Agent Helper",
            "No More Page Match Data",
            "Executing Middleware on Internal Next.js Requests"
          ]
        },
        {
          "type": "list",
          "items": [
            "Define a single Middleware file next to yourpagesfolder",
            "No need to prefix the file with an underscore",
            "A custom matcher can be used to define matching routes using an exported config object"
          ]
        },
        {
          "type": "p",
          "text": "Previously, you could create a_middleware.tsfile under thepagesdirectory at any level. Middleware execution was based on the file path where it was created. Based on customer feedback, we have replaced this API with a single root Middleware, which provides the following improvements:"
        },
        {
          "type": "list",
          "items": [
            "Faster execution with lower latency: With nested Middleware, a single request could invoke multiple Middleware functions. A single Middleware means a single function execution, which is more efficient.",
            "Less expensive: Middleware usage is billed per invocation. Using nested Middleware, a single request could invoke multiple Middleware functions, meaning multiple Middleware charges per request. A single Middleware means a single invocation per request and is more cost effective.",
            "Middleware can conveniently filter on things besides routes: With nested Middleware, the Middleware files were located in thepagesdirectory and Middleware was executed based on request paths. By moving to a single root Middleware, you can still execute code based on request paths, but you can now more conveniently execute Middleware based on other conditions, likecookiesor the presence of a request header.",
            "Deterministic execution ordering: With nested Middleware, a single request could match multiple Middleware functions. For example, a request to/dashboard/users/*would invoke Middleware defined in both/dashboard/users/_middleware.tsand/dashboard/_middleware.js. However, the execution order is difficult to reason about. Moving to a single, root Middleware more explicitly defines execution order.",
            "Supports Next.js Layouts (RFC): Moving to a single, root Middleware helps support the newLayouts (RFC) in Next.js."
          ]
        },
        {
          "type": "p",
          "text": "You should declareone single Middleware filein your application, which should be located next to thepagesdirectory and namedwithoutan_prefix. Your Middleware file can still have either a.tsor.jsextension. Middleware will be invoked forevery route in the app, and a custom matcher can be used to define matching filters. The following is an example for a Middleware that triggers for/about/*and/dashboard/:path*, the custom matcher is defined in an exported config object:"
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {returnNextResponse.rewrite(newURL('/about-2',request.url))}// Supports both a single string value or an array of matchersexportconstconfig={matcher:['/about/:path*','/dashboard/:path*'],}"
        },
        {
          "type": "p",
          "text": "The matcher config also allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:"
        },
        {
          "type": "code",
          "code": "exportconstconfig={matcher:[/** Match all request paths except for the ones starting with:* - api (API routes)* - _next/static (static files)* - favicon.ico (favicon file)*/'/((?!api|_next/static|favicon.ico).*)',],}"
        },
        {
          "type": "p",
          "text": "While the config option is preferred since it doesn't get invoked on every request, you can also use conditional statements to only run the Middleware when it matches specific paths. One advantage of using conditionals is defining explicit ordering for when Middleware executes. The following example shows how you can merge two previously nested Middleware:"
        },
        {
          "type": "code",
          "code": "importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {if(request.nextUrl.pathname.startsWith('/about')) {// This logic is only applied to /about}if(request.nextUrl.pathname.startsWith('/dashboard')) {// This logic is only applied to /dashboard}}"
        },
        {
          "type": "list",
          "items": [
            "Middleware can no longer produce a response body",
            "If your Middlewaredoesrespond with a body, a runtime error will be thrown",
            "Migrate to usingrewrite/redirectto pages/APIs handling a response"
          ]
        },
        {
          "type": "p",
          "text": "To respect the differences in client-side and server-side navigation, and to help ensure that developers do not build insecure Middleware, we are removing the ability to send response bodies in Middleware. This ensures that Middleware is only used torewrite,redirect, or modify the incoming request (e.g.setting cookies). The following patterns will no longer work:"
        },
        {
          "type": "code",
          "code": "newResponse('a text value')newResponse(streamOrBuffer)newResponse(JSON.stringify(obj),{ headers:'application/json'})NextResponse.json()"
        },
        {
          "type": "p",
          "text": "For cases where Middleware is used to respond (such as authorization), you should migrate to userewrite/redirectto pages that show an authorization error, login forms, or to an API Route."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'import{ isAuthValid }from'./lib/auth'exportfunctionmiddleware(request:NextRequest) {// Example function to validate authif(isAuthValid(request)) {returnNextResponse.next()}returnNextResponse.json({ message:'Auth required'},{ status:401})}"
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'import{ isAuthValid }from'./lib/auth'exportfunctionmiddleware(request:NextRequest) {// Example function to validate authif(isAuthValid(request)) {returnNextResponse.next()}constloginUrl=newURL('/login',request.url)loginUrl.searchParams.set('from',request.nextUrl.pathname)returnNextResponse.redirect(loginUrl)}"
        },
        {
          "type": "p",
          "text": "If you were previously using Middleware to forward headers to an external API, you can now useEdge API Routes:"
        },
        {
          "type": "code",
          "code": "import{typeNextRequest }from'next/server'exportconstconfig={runtime:'edge',}exportdefaultasyncfunctionhandler(req:NextRequest) {constauthorization=req.cookies.get('authorization')returnfetch('https://backend-api.com/api/protected',{method:req.method,headers:{authorization,},redirect:'manual',})}"
        },
        {
          "type": "p",
          "text": "Based on beta feedback, we are changing the Cookies API inNextRequestandNextResponseto align more to aget/setmodel. TheCookiesAPI extends Map, including methods likeentriesandvalues."
        },
        {
          "type": "p",
          "text": "NextResponsenow has acookiesinstance with:"
        },
        {
          "type": "list",
          "items": ["cookies.delete", "cookies.set", "cookies.getWithOptions"]
        },
        {
          "type": "p",
          "text": "As well as other extended methods fromMap."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'exportfunctionmiddleware(request:NextRequest) {// create an instance of the class to access the public methods. This uses `next()`,// you could use `redirect()` or `rewrite()` as wellletresponse=NextResponse.next()// get the cookies from the requestletcookieFromRequest=request.cookies['my-cookie']// set the `cookie`response.cookie('hello','world')// set the `cookie` with optionsconstcookieWithOptions=response.cookie('hello','world',{path:'/',maxAge:1000*60*60*24*7,httpOnly:true,sameSite:'strict',domain:'example.com',})// clear the `cookie`response.clearCookie('hello')returnresponse}"
        },
        {
          "type": "code",
          "code": "exportfunctionmiddleware() {constresponse=newNextResponse()// set a cookieresponse.cookies.set('vercel','fast')// set another cookie with optionsresponse.cookies.set('nextjs','awesome',{ path:'/test'})// get all the details of a cookieconst{value,...options}=response.cookies.getWithOptions('vercel')console.log(value)// => 'fast'console.log(options)// => { name: 'vercel', Path: '/test' }// deleting a cookie will mark it as expiredresponse.cookies.delete('vercel')returnresponse}"
        },
        {
          "type": "list",
          "items": [
            "Accessing the user agent is no longer available on the request object",
            "We've added a newuserAgenthelper to reduce Middleware size by17kb"
          ]
        },
        {
          "type": "p",
          "text": "To help reduce the size of your Middleware, we have extracted the user agent from the request object and created a new helperuserAgent. The helper is imported fromnext/serverand allows you to opt in to using the user agent. The helper gives you access to the same properties that were available from the request object."
        },
        {
          "type": "list",
          "items": [
            "Import theuserAgenthelper fromnext/server",
            "Destructure the properties you need to work with"
          ]
        },
        {
          "type": "code",
          "code": "import{ NextRequest,NextResponse }from'next/server'exportfunctionmiddleware(request:NextRequest) {consturl=request.nextUrlconstviewport=request.ua.device.type==='mobile'?'mobile':'desktop'url.searchParams.set('viewport',viewport)returnNextResponse.rewrite(url)}"
        },
        {
          "type": "code",
          "code": "import{ NextRequest,NextResponse,userAgent }from'next/server'exportfunctionmiddleware(request:NextRequest) {consturl=request.nextUrlconst{device}=userAgent(request)constviewport=device.type==='mobile'?'mobile':'desktop'url.searchParams.set('viewport',viewport)returnNextResponse.rewrite(url)}"
        },
        {
          "type": "list",
          "items": [
            "UseURLPatternto check if a Middleware is being invoked for a certain page match"
          ]
        },
        {
          "type": "p",
          "text": "Currently, Middleware estimates whether you are serving an asset of a Page based on the Next.js routes manifest (internal configuration). This value is surfaced throughrequest.page. To make page and asset matching more accurate, we are now using the web standardURLPatternAPI."
        },
        {
          "type": "p",
          "text": "UseURLPatternto check if a Middleware is being invoked for a certain page match."
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest,NextFetchEvent }from'next/server'exportfunctionmiddleware(request:NextRequest,event:NextFetchEvent) {const{params}=event.request.pageconst{locale,slug}=paramsif(locale&&slug) {const{search,protocol,host}=request.nextUrlconsturl=newURL(`${protocol}//${locale}.${host}/${slug}${search}`)returnNextResponse.redirect(url)}}"
        },
        {
          "type": "code",
          "code": "import{ NextResponse }from'next/server'importtype{ NextRequest }from'next/server'constPATTERNS=[[newURLPattern({ pathname:'/:locale/:slug'}),({ pathname })=>pathname.groups,],]constparams=(url)=>{constinput=url.split('?')[0]letresult={}for(const[pattern,handler]ofPATTERNS) {constpatternResult=pattern.exec(input)if(patternResult!==null&&'pathname'inpatternResult) {result=handler(patternResult)break}}returnresult}exportfunctionmiddleware(request:NextRequest) {const{locale,slug}=params(request.url)if(locale&&slug) {const{search,protocol,host}=request.nextUrlconsturl=newURL(`${protocol}//${locale}.${host}/${slug}${search}`)returnNextResponse.redirect(url)}}"
        },
        {
          "type": "list",
          "items": [
            "Middleware will be executed forallrequests, including_next"
          ]
        },
        {
          "type": "p",
          "text": "Prior to Next.jsv12.2, Middleware was not executed for_nextrequests. For cases where Middleware is used for authorization, you should migrate to userewrite/redirectto Pages that show an authorization error, login forms, or to an API Route. SeeNo Response Bodyfor an example of how to migrate to userewrite/redirect."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/next-script-for-ga",
      "title": "Using Google Analytics with Next.js (through `next/script`) | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prefernext/scriptcomponent when using the inline script for Google Analytics."
        },
        {
          "type": "p",
          "text": "An inline script was used for Google Analytics which might impact your webpage's performance. Instead, we recommend usingnext/scriptthrough the@next/third-partieslibrary."
        },
        {
          "type": "p",
          "text": "@next/third-partiesis a library that provides a collection of components and utilities that improve the performance and developer experience of loading popular third-party libraries in your Next.js application. It is available with Next.js 14 (installnext@latest). TheGoogleAnalyticscomponent can be used to includeGoogle Analytics\n4to your page via the Google tag (gtag.js). By default, it fetches the original scripts after hydration occurs on the page."
        },
        {
          "type": "p",
          "text": "Recommendation: If Google Tag Manager is already included in your application, you can\nconfigure Google Analytics directly using it, rather than including Google Analytics as a separate component. Refer to thedocumentationto learn more about the differences between Tag Manager andgtag.js."
        },
        {
          "type": "p",
          "text": "To load Google Analytics for all routes, include the component directly in your root layout and pass in your measurement ID:"
        },
        {
          "type": "code",
          "code": "import{ GoogleAnalytics }from'@next/third-parties/google'exportdefaultfunctionRootLayout({children,}:{children:React.ReactNode}) {return(<htmllang=\"en\"><body>{children}</body><GoogleAnalyticsgaId=\"G-XYZ\"/></html>)}"
        },
        {
          "type": "p",
          "text": "To load Google Analytics for a single route, include the component in your page file:"
        },
        {
          "type": "code",
          "code": "import{ GoogleAnalytics }from'@next/third-parties/google'exportdefaultfunctionPage() {return<GoogleAnalyticsgaId=\"G-XYZ\"/>}"
        },
        {
          "type": "p",
          "text": "Good to know:"
        },
        {
          "type": "list",
          "items": [
            "If you are using the Pages Router, please refer to thepages/documentation.",
            "@next/third-partiesalso supportsGoogle Tag Managerand other third parties.",
            "Using@next/third-partiesis not required. You can also use thenext/scriptcomponent directly. Refer to thenext/scriptdocumentationto learn more."
          ]
        },
        {
          "type": "list",
          "items": [
            "@next/third-partiesDocumentation",
            "next/scriptDocumentation"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-assign-module-variable",
      "title": "No assign module variable | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent assignment to themodulevariable."
        },
        {
          "type": "p",
          "text": "A value is being assigned to themodulevariable. Themodulevariable is already used and it is highly likely that assigning to this variable will cause errors."
        },
        {
          "type": "p",
          "text": "Use a different variable name:"
        },
        {
          "type": "code",
          "code": "letmyModule={...}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-async-client-component",
      "title": "No async client component | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Client components cannot be async functions."
        },
        {
          "type": "p",
          "text": "The error occurs when you try to define a client component as an async function. React client componentsdo not supportasync functions. For example:"
        },
        {
          "type": "code",
          "code": "'use client'// This will cause an errorasyncfunctionClientComponent() {// ...}"
        },
        {
          "type": "list",
          "items": [
            "Convert to a Server Component: If possible, convert your client component to a server component. This allows you to useasync/awaitdirectly in your component.",
            "Remove theasynckeyword: If you need to keep it as a client component, remove theasynckeyword and handle data fetching differently.",
            "Use React hooks for data fetching: Utilize hooks likeuseEffectfor client-side data fetching, or use third-party libraries.",
            "Leverage theusehook with a Context Provider: Pass promises to child components using context, then resolve them with theusehook."
          ]
        },
        {
          "type": "p",
          "text": "We recommend fetching data on the server. For example:"
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionPage() {constdata=awaitfetch('https://api.vercel.app/blog')constposts=awaitdata.json()return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "Another pattern to explore is using the Reactusehook with a Context Provider. This allows you to pass Promises to child components and resolve them using theusehook . Here's an example: First, let's create a separate file for the context provider:"
        },
        {
          "type": "code",
          "code": "'use client'import{ createContext,useContext }from'react'exportconstBlogContext=createContext<Promise<any>|null>(null)exportfunctionBlogProvider({children,blogPromise,}:{children:React.ReactNodeblogPromise:Promise<any>}) {return(<BlogContext.Providervalue={blogPromise}>{children}</BlogContext.Provider>)}exportfunctionuseBlogContext() {constcontext=useContext(BlogContext)if(!context) {thrownewError('useBlogContext must be used within a BlogProvider')}returncontext}"
        },
        {
          "type": "p",
          "text": "Now, let's create the Promise in a Server Component and stream it to the client:"
        },
        {
          "type": "code",
          "code": "import{ BlogProvider }from'./context'exportdefaultfunctionPage() {constblogPromise=fetch('https://api.vercel.app/blog').then((res)=>res.json())return(<BlogProviderblogPromise={blogPromise}><BlogPosts/></BlogProvider>)}"
        },
        {
          "type": "p",
          "text": "Here is the blog posts component:"
        },
        {
          "type": "code",
          "code": "'use client'import{ use }from'react'import{ useBlogContext }from'./context'exportfunctionBlogPosts() {constblogPromise=useBlogContext()constposts=use(blogPromise)return<div>{posts.length} blog posts</div>}"
        },
        {
          "type": "p",
          "text": "This pattern allows you to start data fetching early and pass the Promise down to child components, which can then use theusehook to access the data when it's ready."
        },
        {
          "type": "p",
          "text": "In scenarios where client fetching is needed, you can callfetchinuseEffect(not recommended), or lean on popular React libraries in the community (such asSWRorReact Query) for client fetching."
        },
        {
          "type": "code",
          "code": "'use client'import{ useState,useEffect }from'react'exportfunctionPosts() {const[posts,setPosts]=useState(null)useEffect(()=>{asyncfunctionfetchPosts() {constres=awaitfetch('https://api.vercel.app/blog')constdata=awaitres.json()setPosts(data)}fetchPosts()},[])if(!posts)return<div>Loading...</div>return(<ul>{posts.map((post)=>(<likey={post.id}>{post.title}</li>))}</ul>)}"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-before-interactive-script-outside-document",
      "title": "No Before Interactive Script Outside Document | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent usage ofnext/script'sbeforeInteractivestrategy outside ofapp/layout.jsxorpages/_document.js."
        },
        {
          "type": "p",
          "text": "You cannot use thenext/scriptcomponent with thebeforeInteractivestrategy outsideapp/layout.jsxorpages/_document.js. That's becausebeforeInteractivestrategy only works insideapp/layout.jsxorpages/_document.jsand is designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side)."
        },
        {
          "type": "p",
          "text": "If you want a global script, and you are using the App Router, move the script insideapp/layout.jsx."
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'exportdefaultfunctionRootLayout({ children }) {return(<htmllang=\"en\"><body>{children}</body><Scriptsrc=\"https://example.com/script.js\"strategy=\"beforeInteractive\"/></html>)}"
        },
        {
          "type": "p",
          "text": "If you want a global script, and you are using the Pages Router, move the script insidepages/_document.js."
        },
        {
          "type": "code",
          "code": "import{ Html,Head,Main,NextScript }from'next/document'importScriptfrom'next/script'exportdefaultfunctionDocument() {return(<Html><Head/><body><Main/><NextScript/><Scriptsrc=\"https://example.com/script.js\"strategy=\"beforeInteractive\"></Script></body></Html>)}"
        },
        {
          "type": "list",
          "items": [
            "App Router Script Optimization",
            "Pages Router Script Optimization"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-css-tags",
      "title": "No CSS Tags | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent manual stylesheet tags."
        },
        {
          "type": "p",
          "text": "Alinkelement was used to link to an external stylesheet. This can negatively affect CSS resource loading on your webpage."
        },
        {
          "type": "p",
          "text": "There are multiple ways to include styles using Next.js' built-in CSS support, including the option to use@importwithin the root stylesheet that is imported inpages/_app.js:"
        },
        {
          "type": "code",
          "code": "/* Root stylesheet */@import'extra.css';body{/* ... */}"
        },
        {
          "type": "p",
          "text": "Another option is to use CSS Modules to import the CSS file scoped specifically to the component."
        },
        {
          "type": "code",
          "code": "importstylesfrom'./extra.module.css'exportclassHome{render() {return(<div><buttontype=\"button\"className={styles.active}>Open</button></div>)}}"
        },
        {
          "type": "p",
          "text": "Refer to theBuilt-In CSS Supportdocumentation to learn about all the ways to include CSS to your application."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-document-import-in-page",
      "title": "No Document Import in Page | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent importingnext/documentoutside ofpages/_document.js."
        },
        {
          "type": "p",
          "text": "next/documentwas imported in a page outside ofpages/_document.js(orpages/_document.tsxif you are using TypeScript). This can cause unexpected issues in your application."
        },
        {
          "type": "p",
          "text": "Only import and usenext/documentwithinpages/_document.js(orpages/_document.tsx) to override the defaultDocumentcomponent:"
        },
        {
          "type": "code",
          "code": "importDocument,{ Html,Head,Main,NextScript }from'next/document'classMyDocumentextendsDocument{//...}exportdefaultMyDocument"
        },
        {
          "type": "list",
          "items": ["Custom Document"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-duplicate-head",
      "title": "No Duplicate Head | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent duplicate usage of<Head>inpages/_document.js."
        },
        {
          "type": "p",
          "text": "More than a single instance of the<Head />component was used in a single custom document. This can cause unexpected behavior in your application."
        },
        {
          "type": "p",
          "text": "Only use a single<Head />component in your custom document inpages/_document.js."
        },
        {
          "type": "code",
          "code": "importDocument,{ Html,Head,Main,NextScript }from'next/document'classMyDocumentextendsDocument{staticasyncgetInitialProps(ctx) {//...}render() {return(<Html><Head/><body><Main/><NextScript/></body></Html>)}}exportdefaultMyDocument"
        },
        {
          "type": "list",
          "items": ["Custom Document"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-head-element",
      "title": "No Head Element | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent usage of<head>element."
        },
        {
          "type": "p",
          "text": "A<head>element was used to include page-level metadata, but this can cause unexpected behavior in a Next.js application. Use Next.js' built-innext/headcomponent instead."
        },
        {
          "type": "p",
          "text": "Import and use the<Head />component:"
        },
        {
          "type": "code",
          "code": "importHeadfrom'next/head'functionIndex() {return(<><Head><title>My page title</title><metaname=\"viewport\"content=\"initial-scale=1.0, width=device-width\"/></Head></>)}exportdefaultIndex"
        },
        {
          "type": "list",
          "items": ["next/head"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-head-import-in-document",
      "title": "No Head Import in Document | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent usage ofnext/headinpages/_document.js."
        },
        {
          "type": "p",
          "text": "next/headwas imported inpages/_document.js. This can cause unexpected issues in your application."
        },
        {
          "type": "p",
          "text": "Only import and usenext/documentwithinpages/_document.jsto override the defaultDocumentcomponent. If you are importingnext/headto use theHeadcomponent, import it fromnext/documentinstead in order to modify<head>code across all pages:"
        },
        {
          "type": "code",
          "code": "importDocument,{ Html,Head,Main,NextScript }from'next/document'classMyDocumentextendsDocument{staticasyncgetInitialProps(ctx) {//...}render() {return(<Html><Head></Head></Html>)}}exportdefaultMyDocument"
        },
        {
          "type": "list",
          "items": ["Custom Document"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-img-element",
      "title": "No img element | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent usage of<img>element due to slower LCP and higher bandwidth."
        },
        {
          "type": "p",
          "text": "An<img>element was used to display an image instead of<Image />fromnext/image."
        },
        {
          "type": "list",
          "items": [
            "Usenext/imageto improve performance with automaticImage Optimization."
          ]
        },
        {
          "type": "p",
          "text": "Note: If deploying to amanaged hosting provider, remember to check provider pricing since optimized images might be charged differently than the original images. Common image optimization platform pricing:"
        },
        {
          "type": "list",
          "items": ["Vercel pricing", "Cloudinary pricing", "imgix pricing"]
        },
        {
          "type": "p",
          "text": "Note: If self-hosting, remember to installsharpand check if your server has enough storage to cache the optimized images."
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'functionHome() {return(<Imagesrc=\"https://example.com/hero.jpg\"alt=\"Landscape picture\"width={800}height={500}/>)}exportdefaultHome"
        },
        {
          "type": "list",
          "items": [
            "If you would like to usenext/imagefeatures such as blur-up placeholders but disable Image Optimization, you can do so usingunoptimized:"
          ]
        },
        {
          "type": "code",
          "code": "importImagefrom'next/image'constUnoptimizedImage=(props)=>{return<Image{...props}unoptimized/>}"
        },
        {
          "type": "list",
          "items": [
            "You can also use the<picture>element with the nested<img>element:"
          ]
        },
        {
          "type": "code",
          "code": "functionHome() {return(<picture><sourcesrcSet=\"https://example.com/hero.avif\"type=\"image/avif\"/><sourcesrcSet=\"https://example.com/hero.webp\"type=\"image/webp\"/><imgsrc=\"https://example.com/hero.jpg\"alt=\"Landscape picture\"width={800}height={500}/></picture>)}"
        },
        {
          "type": "list",
          "items": [
            "You can use acustom image loaderto optimize images. SetloaderFileto the path of your custom loader."
          ]
        },
        {
          "type": "code",
          "code": "module.exports={images:{loader:'custom',loaderFile:'./my/image/loader.js',},}"
        },
        {
          "type": "list",
          "items": [
            "Image Component and Image Optimization",
            "next/image API Reference",
            "Largest Contentful Paint (LCP)",
            "Next.js config loaderFile option"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-page-custom-font",
      "title": "No Page Custom Font | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent page-only custom fonts."
        },
        {
          "type": "list",
          "items": [
            "The custom font you're adding was added to a page - this only adds the font to the specific page and not the entire application.",
            "The custom font you're adding was added to a separate component withinpages/_document.js- this disables automatic font optimization."
          ]
        },
        {
          "type": "p",
          "text": "Create the file./pages/_document.jsand add the font to a custom Document:"
        },
        {
          "type": "code",
          "code": "importDocument,{ Html,Head,Main,NextScript }from'next/document'classMyDocumentextendsDocument{render() {return(<Html><Head><linkhref=\"https://fonts.googleapis.com/css2?family=Inter&display=optional\"rel=\"stylesheet\"/></Head><body><Main/><NextScript/></body></Html>)}}exportdefaultMyDocument"
        },
        {
          "type": "p",
          "text": "Or as a function component:"
        },
        {
          "type": "code",
          "code": "import{ Html,Head,Main,NextScript }from'next/document'exportdefaultfunctionDocument() {return(<Html><Head><linkhref=\"https://fonts.googleapis.com/css2?family=Inter&display=optional\"rel=\"stylesheet\"/></Head><body><Main/><NextScript/></body></Html>)}"
        },
        {
          "type": "p",
          "text": "If you have a reason to only load a font for a particular page or don't care about font optimization, then you can disable this rule."
        },
        {
          "type": "list",
          "items": ["Custom Document", "Font Optimization"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-script-component-in-head",
      "title": "No Script Component in Head | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent usage ofnext/scriptinnext/headcomponent."
        },
        {
          "type": "p",
          "text": "Thenext/scriptcomponent should not be used in anext/headcomponent."
        },
        {
          "type": "p",
          "text": "Move the<Script />component outside of<Head>instead. Before"
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'importHeadfrom'next/head'exportdefaultfunctionIndex() {return(<Head><title>Next.js</title><Scriptsrc=\"/my-script.js\"/></Head>)}"
        },
        {
          "type": "p",
          "text": "After"
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'importHeadfrom'next/head'exportdefaultfunctionIndex() {return(<><Head><title>Next.js</title></Head><Scriptsrc=\"/my-script.js\"/></>)}"
        },
        {
          "type": "list",
          "items": ["next/head", "next/script"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-styled-jsx-in-document",
      "title": "No `styled-jsx` in `_document` | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent usage ofstyled-jsxinpages/_document.js."
        },
        {
          "type": "p",
          "text": "Custom CSS likestyled-jsxis not allowed in aCustom Document."
        },
        {
          "type": "p",
          "text": "If you need shared CSS for all of your pages, take a look at theCustomAppfile or define a custom layout. For example, consider the following stylesheet namedstyles.css:"
        },
        {
          "type": "code",
          "code": "body{font-family:'SF Pro Text','SF Pro Icons','Helvetica Neue','Helvetica','Arial',sans-serif;padding:20px20px60px;max-width:680px;margin:0 auto;}"
        },
        {
          "type": "p",
          "text": "Create apages/_app.{js,tsx}file if not already present. Then, import thestyles.cssfile."
        },
        {
          "type": "code",
          "code": "import'../styles.css'// This default export is required in a new `pages/_app.js` file.exportdefaultfunctionMyApp({ Component,pageProps }) {return<Component{...pageProps} />}"
        },
        {
          "type": "p",
          "text": "These styles (styles.css) will apply to all pages and components in your application."
        },
        {
          "type": "list",
          "items": [
            "Custom Document Caveats",
            "Layouts",
            "Built in CSS Support",
            "CustomApp"
          ]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-sync-scripts",
      "title": "No Sync Scripts | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent synchronous scripts."
        },
        {
          "type": "p",
          "text": "A synchronous script was used which can impact your webpage performance."
        },
        {
          "type": "code",
          "code": "importScriptfrom'next/script'functionHome() {return(<divclass=\"container\"><Scriptsrc=\"https://third-party-script.js\"></Script><div>Home Page</div></div>)}exportdefaultHome"
        },
        {
          "type": "code",
          "code": "<scriptsrc=\"https://third-party-script.js\"async/><scriptsrc=\"https://third-party-script.js\"defer/>"
        },
        {
          "type": "list",
          "items": ["Efficiently load third-party JavaScript"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-title-in-document-head",
      "title": "No Title in Document Head | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent usage of<title>withHeadcomponent fromnext/document."
        },
        {
          "type": "p",
          "text": "A<title>element was defined within theHeadcomponent imported fromnext/document, which should only be used for any<head>code that is common for all pages. Title tags should be defined at the page-level usingnext/headinstead."
        },
        {
          "type": "p",
          "text": "Within a page or component, import and usenext/headto define a page title:"
        },
        {
          "type": "code",
          "code": "importHeadfrom'next/head'exportfunctionHome() {return(<div><Head><title>My page title</title></Head></div>)}"
        },
        {
          "type": "list",
          "items": ["next/head", "Custom Document"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/no-unwanted-polyfillio",
      "title": "No Unwanted Polyfill.io | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Prevent duplicate polyfills from Polyfill.io."
        },
        {
          "type": "p",
          "text": "You are using polyfills from Polyfill.io and including polyfills already shipped with Next.js. This unnecessarily increases page weight which can affect loading performance."
        },
        {
          "type": "p",
          "text": "Remove all duplicate polyfills. If you need to add polyfills but are not sure if Next.js already includes it, take a look at the list ofsupported browsers and features."
        },
        {
          "type": "list",
          "items": ["Supported Browsers and Features"]
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/sync-dynamic-apis",
      "title": "Dynamic APIs are Asynchronous | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Learn more about why accessing certain APIs synchronously now warns."
        },
        {
          "type": "p",
          "text": "Somewhere in your code you used an API that opts intodynamic rendering. Dynamic APIs are:"
        },
        {
          "type": "list",
          "items": [
            "TheparamsandsearchParamsprops that get provided to pages, layouts, metadata APIs, and route handlers.",
            "cookies(),draftMode(), andheaders()fromnext/headers"
          ]
        },
        {
          "type": "p",
          "text": "In Next 15, these APIs have been made asynchronous. You can read more about this in the Next.js 15Upgrade Guide. For example, the following code will issue a warning:"
        },
        {
          "type": "code",
          "code": "functionPage({ params }) {// direct access of `params.id`.return<p>ID: {params.id}</p>}"
        },
        {
          "type": "p",
          "text": "This also includes enumerating (e.g.{...params}, orObject.keys(params)) or iterating over the return\nvalue of these APIs (e.g.[...headers()]orfor (const cookie of cookies()), or explicitly withcookies()[Symbol.iterator]()). In the version of Next.js that issued this warning, access to these properties is still possible directly but will warn.\nIn future versions, these APIs will be async and direct access will not work as expected."
        },
        {
          "type": "p",
          "text": "Thenext-async-request-apicodemodcan fix many of these cases automatically:"
        },
        {
          "type": "code",
          "code": "$npx@next/codemod@canarynext-async-request-api."
        },
        {
          "type": "p",
          "text": "The codemod cannot cover all cases, so you may need to manually adjust some code. If the warning occurred on the Server (e.g. a route handler, or a Server Component),\nyou mustawaitthe dynamic API to access its properties:"
        },
        {
          "type": "code",
          "code": "asyncfunctionPage({ params }) {// asynchronous access of `params.id`.const{id}=awaitparamsreturn<p>ID: {id}</p>}"
        },
        {
          "type": "p",
          "text": "If the warning occurred in a synchronous component (e.g. a Client component),\nyou must useReact.use()to unwrap the Promise first:"
        },
        {
          "type": "code",
          "code": "'use client'import*asReactfrom'react'functionPage({ params }) {// asynchronous access of `params.id`.const{id}=React.use(params)return<p>ID: {id}</p>}"
        },
        {
          "type": "p",
          "text": "If Next.js codemod found anything that is not able to be migrated by the codemod, it will leave a comment with@next-codemod-errorprefix and the suggested action, for example:\nIn this case, you need to manually await the call tocookies(), and change the function to async. Then refactor the usages of the function to be properly awaited:"
        },
        {
          "type": "code",
          "code": "exportfunctionMyCookiesComponent() {constc=/* @next-codemod-error Manually await this call and refactor the function to be async */cookies()returnc.get('name')}"
        },
        {
          "type": "p",
          "text": "If you didn't address the comments that starting with@next-codemod-errorleft by the codemod, Next.js will error in both dev and build to enforce you to address the issues.\nYou can review the changes and follow the suggestion in the comments. You can either make the necessary changes and remove the comment, or replace the comment prefix@next-codemod-errorwith@next-codemod-ignoreIf there's no action to be taken, the comment prefix@next-codemod-ignorewill bypass the build error."
        },
        {
          "type": "code",
          "code": "- /* @next-codemod-error <suggested message> */+ /* @next-codemod-ignore */"
        },
        {
          "type": "p",
          "text": "Good to know: You can delay unwrapping the Promise (either withawaitorReact.use) until you actually need to consume the value.\nThis will allow Next.js to statically render more of your page."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/url-deprecated",
      "title": "`url` is deprecated | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "In versions prior to 6.x theurlproperty got magically injected into everyPagecomponent (every page inside thepagesdirectory). The reason this is going away is that we want to make things very predictable and explicit. Having a magical url property coming out of nowhere doesn't aid that goal."
        },
        {
          "type": "p",
          "text": "Note: ⚠️ In some cases using React Dev Tools may trigger this warning even if you do not referenceurlanywhere in your code. Try temporarily disabling the extension and see if the warning persists."
        },
        {
          "type": "p",
          "text": "Since Next 5 we provide a way to explicitly inject the Next.js router object into pages and all their descending components.\nTherouterproperty that is injected will hold the same values asurl, likepathname,asPath, andquery. Here's an example of usingwithRouter:"
        },
        {
          "type": "code",
          "code": "import{ withRouter }from'next/router'classPageextendsReact.Component{render() {const{router}=this.propsconsole.log(router)return<div>{router.pathname}</div>}}exportdefaultwithRouter(Page)"
        },
        {
          "type": "p",
          "text": "We provide a codemod (a code to code transformation) to automatically change theurlproperty usages towithRouter. You can find this codemod and instructions on how to run it here:UsewithRouter"
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/messages/webpack5",
      "title": "Webpack 5 Adoption | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Next.js has adopted webpack 5 as the default for compilation. We've spent a lot of effort into ensuring the transition from webpack 4 to 5 will be as smooth as possible. Your application currently has webpack 5 disabled using thewebpack5: falseflag which has been removed in Next.js 12:"
        },
        {
          "type": "code",
          "code": "module.exports={// Webpack 5 is enabled by default// You can still use webpack 4 while upgrading to the latest version of Next.js by adding the \"webpack5: false\" flagwebpack5:false,}"
        },
        {
          "type": "p",
          "text": "Using webpack 5 in your application has many benefits, notably:"
        },
        {
          "type": "list",
          "items": [
            "Improved Disk Caching:next buildis significantly faster on subsequent builds",
            "Improved Fast Refresh: Fast Refresh work is prioritized",
            "Improved Long Term Caching of Assets: Deterministic code output that is less likely to change between builds",
            "Improved Tree Shaking",
            "Support for assets usingnew URL(\"file.png\", import.meta.url)",
            "Support for web workers usingnew Worker(new URL(\"worker.js\", import.meta.url))",
            "Support forexports/importsfield inpackage.json"
          ]
        },
        {
          "type": "p",
          "text": "In the past releases we have gradually rolled out webpack 5 to Next.js applications:"
        },
        {
          "type": "list",
          "items": [
            "In Next.js 10.2 we automatically opted-in applications without custom webpack configuration innext.config.js",
            "In Next.js 10.2 we automatically opted-in applications that do not have anext.config.js",
            "In Next.js 11 webpack 5 was enabled by default for all applications. You could still opt-out and use webpack 4 to help with backwards compatibility usingwebpack5: falseinnext.config.js",
            "In Next.js 12 webpack 4 support was removed."
          ]
        },
        {
          "type": "p",
          "text": "In case you do have custom webpack configuration, either through custom plugins or your own modifications you'll have to take a few steps to ensure your applications works with webpack 5."
        },
        {
          "type": "list",
          "items": [
            "When usingnext-transpile-modulesmake sure you use the latest version which includesthis patch",
            "When using@zeit/next-css/@zeit/next-sassmake sure you use thebuilt-in CSS/Sass supportinstead",
            "When using@zeit/next-preactusethis exampleinstead",
            "When using@zeit/next-source-mapsuse thebuilt-in production Source Map support",
            "When using webpack plugins make sure they're upgraded to the latest version, in most cases the latest version will include webpack 5 support. In some cases these upgraded webpack plugins will only support webpack 5."
          ]
        },
        {
          "type": "p",
          "text": "In case you're running into issues you can connect with the community inthis help discussion."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/migrating/from-create-react-app",
      "title": "Introduction | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Welcome to the Next.js documentation!"
        },
        {
          "type": "p",
          "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications."
        },
        {
          "type": "p",
          "text": "Some of the main Next.js features include:"
        },
        {
          "type": "p",
          "text": "On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut (Ctrl+KorCmd+K). To get started, check out theInstallationguide."
        },
        {
          "type": "p",
          "text": "Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between theApp Routerand thePages Routerfeatures. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs."
        },
        {
          "type": "p",
          "text": "Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out ourReact Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js bybuilding a dashboard application."
        },
        {
          "type": "p",
          "text": "For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver."
        },
        {
          "type": "p",
          "text": "If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub Discussions,Discord,X (Twitter), andReddit."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/migrating/from-gatsby",
      "title": "Introduction | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Welcome to the Next.js documentation!"
        },
        {
          "type": "p",
          "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications."
        },
        {
          "type": "p",
          "text": "Some of the main Next.js features include:"
        },
        {
          "type": "p",
          "text": "On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut (Ctrl+KorCmd+K). To get started, check out theInstallationguide."
        },
        {
          "type": "p",
          "text": "Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between theApp Routerand thePages Routerfeatures. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs."
        },
        {
          "type": "p",
          "text": "Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out ourReact Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js bybuilding a dashboard application."
        },
        {
          "type": "p",
          "text": "For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver."
        },
        {
          "type": "p",
          "text": "If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub Discussions,Discord,X (Twitter), andReddit."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/migrating/from-react-router",
      "title": "Introduction | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Welcome to the Next.js documentation!"
        },
        {
          "type": "p",
          "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications."
        },
        {
          "type": "p",
          "text": "Some of the main Next.js features include:"
        },
        {
          "type": "p",
          "text": "On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut (Ctrl+KorCmd+K). To get started, check out theInstallationguide."
        },
        {
          "type": "p",
          "text": "Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between theApp Routerand thePages Routerfeatures. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs."
        },
        {
          "type": "p",
          "text": "Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out ourReact Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js bybuilding a dashboard application."
        },
        {
          "type": "p",
          "text": "For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver."
        },
        {
          "type": "p",
          "text": "If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub Discussions,Discord,X (Twitter), andReddit."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    },
    {
      "url": "https://nextjs.org/docs/migrating/incremental-adoption",
      "title": "Introduction | Next.js",
      "content": [
        {
          "type": "p",
          "text": "Using App Router Features available in /app"
        },
        {
          "type": "p",
          "text": "Using Latest Version 15.0.4"
        },
        {
          "type": "p",
          "text": "Welcome to the Next.js documentation!"
        },
        {
          "type": "p",
          "text": "Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration. Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications."
        },
        {
          "type": "p",
          "text": "Some of the main Next.js features include:"
        },
        {
          "type": "p",
          "text": "On the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case. On the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut (Ctrl+KorCmd+K). To get started, check out theInstallationguide."
        },
        {
          "type": "p",
          "text": "Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you'll notice a dropdown menu that allows you to switch between theApp Routerand thePages Routerfeatures. Since there are features that are unique to each directory, it's important to keep track of which tab is selected. The breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs."
        },
        {
          "type": "p",
          "text": "Although our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept. To get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out ourReact Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js bybuilding a dashboard application."
        },
        {
          "type": "p",
          "text": "For optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver."
        },
        {
          "type": "p",
          "text": "If you have questions about anything related to Next.js, you're always welcome to ask our community onGitHub Discussions,Discord,X (Twitter), andReddit."
        },
        {
          "type": "p",
          "text": "Was this helpful?"
        }
      ]
    }
  ]
}
