[{"summary": "React v19 introduces several new features and improvements aimed at simplifying state management, enhancing server-side rendering, and improving performance. Key additions include new hooks like useActionState, useOptimistic, and useFormStatus, support for async functions in transitions, and enhanced support for server components and custom elements.", "changes": [{"type": "Feature", "title": "Actions and useActionState", "description": "React 19 introduces Actions to handle async operations like data mutations with automatic state management for pending states, errors, and optimistic updates. The new hook useActionState simplifies common cases for Actions by wrapping async functions and managing their state."}, {"type": "Feature", "title": "useOptimistic Hook", "description": "The useOptimistic hook allows developers to render optimistic UI updates while async requests are in progress, automatically reverting to the actual state once the request completes."}, {"type": "Feature", "title": "use API for Resource Management", "description": "The new use API allows reading resources in render, such as promises and context, enabling conditional resource consumption and improving data fetching strategies."}, {"type": "Feature", "title": "React DOM Static APIs", "description": "New APIs in react-dom/static, like prerender, enhance static site generation by waiting for data to load before generating static HTML, supporting streaming environments like Node.js Streams."}, {"type": "Feature", "title": "Server Components and Server Actions", "description": "React 19 includes support for Server Components, allowing pre-rendering of components in a server environment, and Server Actions, enabling Client Components to execute async functions on the server."}, {"type": "Feature", "title": "Support for Document Metadata and Stylesheets", "description": "React 19 adds native support for rendering document metadata tags and stylesheets within components, ensuring proper handling during client-only apps, streaming SSR, and Server Components."}, {"type": "Feature", "title": "Support for Async Scripts", "description": "Async scripts can now be rendered anywhere in the component tree, with React managing deduplication and ensuring scripts are loaded only once, even if rendered by multiple components."}, {"type": "Feature", "title": "Resource Preloading APIs", "description": "New APIs like prefetchDNS, preconnect, preload, and preinit optimize resource loading by informing the browser early about resources it will likely need, improving page performance."}, {"type": "Feature", "title": "Custom Elements Support", "description": "React 19 fully supports custom elements, handling props as attributes or properties based on their types, improving integration with web components."}, {"type": "Improvement", "title": "ref as a Prop", "description": "Function components can now access ref as a prop, eliminating the need for forwardRef and simplifying component code."}, {"type": "Improvement", "title": "Hydration Error Reporting", "description": "Error reporting for hydration errors in react-dom has been improved, providing more informative messages with diffs of mismatches."}, {"type": "Improvement", "title": "Better Error Handling", "description": "React 19 improves error handling by logging a single error message with comprehensive information and introduces new root options for handling errors."}], "source": "https://react.dev/blog/2024/04/25/react-19"},
{"summary": "React 19 introduces several breaking changes and deprecations aimed at simplifying the library and improving performance. Key changes include the removal of deprecated APIs such as propTypes, defaultProps for functions, legacy context, string refs, and several React DOM methods. New error handling methods have been added, and TypeScript types have been updated to reflect these changes. The update also includes improvements to Strict Mode and Suspense, and removes UMD builds in favor of modern module loading techniques.", "changes": [{"type": "Breaking Change", "title": "Errors in render are not re-thrown", "description": "In React 19, errors thrown during render are no longer re-thrown, reducing duplicate error logs. Uncaught errors are reported to window.reportError, while caught errors are reported to console.error. New methods for custom error handling have been added to createRoot and hydrateRoot."}, {"type": "Breaking Change", "title": "Removed deprecated React APIs", "description": "React 19 removes several deprecated APIs including propTypes and defaultProps for functions, legacy context using contextTypes and getChildContext, string refs, module pattern factories, and React.createFactory. These changes require migration to newer patterns such as ES6 default parameters, contextType API, ref callbacks, and JSX."}, {"type": "Breaking Change", "title": "Removed deprecated React DOM APIs", "description": "React 19 removes several deprecated React DOM methods including ReactDOM.render, ReactDOM.hydrate, unmountComponentAtNode, and ReactDOM.findDOMNode. These methods have been replaced with createRoot, hydrateRoot, root.unmount, and DOM refs respectively."}, {"type": "Deprecation", "title": "Deprecated: element.ref and react-test-renderer", "description": "React 19 deprecates element.ref in favor of element.props.ref and the react-test-renderer package due to its reliance on React internals and promotion of testing implementation details. Users are encouraged to migrate to modern testing libraries like React Testing Library."}, {"type": "Feature", "title": "StrictMode improvements", "description": "React 19 includes improvements to Strict Mode, such as reusing memoized results from useMemo and useCallback during double rendering in development. These changes aim to surface bugs during development."}, {"type": "Feature", "title": "Improvements to Suspense", "description": "React 19 improves Suspense by committing the fallback of the nearest Suspense boundary immediately when a component suspends, without waiting for the entire sibling tree to render. This change speeds up the display of Suspense fallbacks."}, {"type": "Breaking Change", "title": "UMD builds removed", "description": "React 19 no longer produces UMD builds, encouraging the use of modern module loading techniques such as ESM-based CDNs for loading React."}, {"type": "Breaking Change", "title": "TypeScript changes", "description": "React 19 updates TypeScript types, removing deprecated types and requiring arguments for useRef. The props of React elements now default to unknown instead of any, and the JSX namespace is scoped to React.JSX."}], "source": "https://react.dev/blog/2024/04/25/react-19-upgrade-guide"},
{"summary": "React v19 introduces several new features and improvements aimed at simplifying state management, enhancing server-side capabilities, and improving performance. Key updates include new hooks for handling async operations, enhanced support for server components, and improved error handling. The release also includes support for custom elements and better integration with third-party scripts.", "changes": [{"type": "Feature", "title": "Actions and useActionState", "description": "React 19 introduces Actions to simplify handling of async operations like form submissions. The new useActionState hook helps manage pending states and errors automatically, reducing boilerplate code."}, {"type": "Feature", "title": "useOptimistic Hook", "description": "The useOptimistic hook allows for optimistic UI updates by rendering the expected final state while an async request is in progress, improving user experience during data mutations."}, {"type": "Feature", "title": "use API", "description": "A new use API allows reading resources in render, supporting conditional resource consumption and improving the handling of promises and context in React components."}, {"type": "Feature", "title": "React DOM Static APIs", "description": "New APIs in react-dom/static enhance static site generation by waiting for data to load before generating static HTML, supporting environments like Node.js Streams."}, {"type": "Feature", "title": "Server Components and Server Actions", "description": "React 19 includes support for Server Components and Server Actions, enabling rendering components on the server and allowing client components to execute server-side async functions."}, {"type": "Feature", "title": "ref as a Prop", "description": "Function components can now access ref as a prop, eliminating the need for forwardRef and simplifying component code."}, {"type": "Feature", "title": "Support for Document Metadata", "description": "React 19 supports rendering document metadata tags like <title>, <link>, and <meta> directly in components, automatically hoisting them to the <head> section."}, {"type": "Feature", "title": "Support for Stylesheets and Async Scripts", "description": "React 19 provides built-in support for stylesheets and async scripts, managing their insertion order and deduplication to optimize loading and rendering."}, {"type": "Feature", "title": "Support for Custom Elements", "description": "Full support for custom elements is added, allowing React to handle properties and attributes correctly during both client-side and server-side rendering."}, {"type": "Performance", "title": "Resource Preloading APIs", "description": "New APIs for preloading resources improve page performance by optimizing the loading of scripts, stylesheets, and fonts during initial document load and client updates."}, {"type": "Performance", "title": "Improved Error Reporting", "description": "Error handling is enhanced to reduce duplication and provide comprehensive error information, with new root options for handling caught and uncaught errors."}, {"type": "Other", "title": "Diffs for Hydration Errors", "description": "Error reporting for hydration errors is improved with detailed diffs, helping developers identify and resolve mismatches between server-rendered and client-rendered content."}], "source": "https://react.dev/blog/2024/12/05/react-19"}]