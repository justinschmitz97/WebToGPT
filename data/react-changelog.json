[{"source": "https://react.dev/blog/2024/12/05/react-19", "title": "React v19 \u2013 React", "text": "React v19 December 05, 2024 React Team React v19 available npm! React 19 Upgrade Guide, shared step-by-step instructions upgrading app React 19. post, we\u2019ll give overview new features React 19, adopt them. list breaking changes, see Upgrade Guide. What\u2019s new React 19 Actions common use case React apps perform data mutation update state response. example, user submits form change name, make API request, handle response. past, would need handle pending states, errors, optimistic updates, sequential requests manually. example, could handle pending error state useState : // Actions function UpdateName({}) { const [name, setName] = useState(\"\"); const [error, setError] = useState(null); const [isPending, setIsPending] = useState(false); const handleSubmit = async () => { setIsPending(true); const error = await updateName(name); setIsPending(false); (error) { setError(error); return; } redirect(\"/path\"); }; return ( <div> <input value={name} onChange={(event) => setName(event.target.value)} /> <button onClick={handleSubmit} disabled={isPending}> Update </button> {error && <p>{error}</p>} </div> ); } React 19, we\u2019re adding support using async functions transitions handle pending states, errors, forms, optimistic updates automatically. example, use useTransition handle pending state you: // Using pending state Actions function UpdateName({}) { const [name, setName] = useState(\"\"); const [error, setError] = useState(null); const [isPending, startTransition] = useTransition(); const handleSubmit = () => { startTransition(async () => { const error = await updateName(name); (error) { setError(error); return; } redirect(\"/path\"); }) }; return ( <div> <input value={name} onChange={(event) => setName(event.target.value)} /> <button onClick={handleSubmit} disabled={isPending}> Update </button> {error && <p>{error}</p>} </div> ); } async transition immediately set isPending state true, make async request(s), switch isPending false transitions. allows keep current UI responsive interactive data changing. Building top Actions, React 19 introduces useOptimistic manage optimistic updates, new hook React.useActionState handle common cases Actions. react-dom we\u2019re adding <form> Actions manage forms automatically useFormStatus support common cases Actions forms. React 19, example simplified to: // Using <form> Actions useActionState function ChangeName({ name, setName }) { const [error, submitAction, isPending] = useActionState( async (previousState, formData) => { const error = await updateName(formData.get(\"name\")); (error) { return error; } redirect(\"/path\"); return null; }, null, ); return ( <form action={submitAction}> <input type=\"text\" name=\"name\" /> <button type=\"submit\" disabled={isPending}>Update</button> {error && <p>{error}</p>} </form> ); } next section, we\u2019ll break new Action features React 19. New hook: useActionState make common cases easier Actions, we\u2019ve added new hook called useActionState : const [error, submitAction, isPending] = useActionState( async (previousState, newName) => { const error = await updateName(newName); (error) { // return result action. // Here, return error. return error; } // handle success return null; }, null, ); useActionState accepts function (the \u201cAction\u201d), returns wrapped Action call. works Actions compose. wrapped Action called, useActionState return last result Action data , pending state Action pending . information, see docs useActionState . React DOM: <form> Actions Actions also integrated React 19\u2019s new <form> features react-dom . We\u2019ve added support passing functions action formAction props <form> , <input> , <button> elements automatically submit forms Actions: <form action={actionFunction}> <form> Action succeeds, React automatically reset form uncontrolled components. need reset <form> manually, call new requestFormReset React DOM API. information, see react-dom docs <form> , <input> , <button> . React DOM: New hook: useFormStatus design systems, it\u2019s common write design components need access information <form> they\u2019re in, without drilling props component. done via Context, make common case easier, we\u2019ve added new hook useFormStatus : import {useFormStatus} 'react-dom'; function DesignButton() { const {pending} = useFormStatus(); return <button type=\"submit\" disabled={pending} /> } useFormStatus reads status parent <form> form Context provider. information, see react-dom docs useFormStatus . New hook: useOptimistic Another common UI pattern performing data mutation show final state optimistically async request underway. React 19, we\u2019re adding new hook called useOptimistic make easier: function ChangeName({currentName, onUpdateName}) { const [optimisticName, setOptimisticName] = useOptimistic(currentName); const submitAction = async formData => { const newName = formData.get(\"name\"); setOptimisticName(newName); const updatedName = await updateName(newName); onUpdateName(updatedName); }; return ( <form action={submitAction}> <p>Your name is: {optimisticName}</p> <p> <label>Change Name:</label> <input type=\"text\" name=\"name\" disabled={currentName !== optimisticName} /> </p> </form> ); } useOptimistic hook immediately render optimisticName updateName request progress. update finishes errors, React automatically switch back currentName value. information, see docs useOptimistic . New API: use React 19 we\u2019re introducing new API read resources render: use . example, read promise use , React Suspend promise resolves: import {use} 'react'; function Comments({commentsPromise}) { // `use` suspend promise resolves. const comments = use(commentsPromise); return comments.map(comment => <p key={comment.id}>{comment}</p>); } function Page({commentsPromise}) { // `use` suspends Comments, // Suspense boundary shown. return ( <Suspense fallback={<div>Loading...</div>}> <Comments commentsPromise={commentsPromise} /> </Suspense> ) } also read context use , allowing read Context conditionally early returns: import {use} 'react'; import ThemeContext './ThemeContext' function Heading({children}) { (children == null) { return null; } // would work useContext // early return. const theme = use(ThemeContext); return ( <h1 style={{color: theme.color}}> {children} </h1> ); } use API called render, similar hooks. Unlike hooks, use called conditionally. future plan support ways consume resources render use . information, see docs use . New React DOM Static APIs We\u2019ve added two new APIs react-dom/static static site generation: new APIs improve renderToString waiting data load static HTML generation. designed work streaming environments like Node.js Streams Web Streams. example, Web Stream environment, prerender React tree static HTML prerender : import { prerender } 'react-dom/static'; async function handler(request) { const {prelude} = await prerender(<App />, { bootstrapScripts: ['/main.js'] }); return new Response(prelude, { headers: { 'content-type': 'text/html' }, }); } Prerender APIs wait data load returning static HTML stream. Streams converted strings, sent streaming response. support streaming content loads, supported existing React DOM server rendering APIs. information, see React DOM Static APIs. React Server Components Server Components Server Components new option allows rendering components ahead time, bundling, environment separate client application SSR server. separate environment \u201cserver\u201d React Server Components. Server Components run build time CI server, run request using web server. React 19 includes React Server Components features included Canary channel. means libraries ship Server Components target React 19 peer dependency react-server export condition use frameworks support Full-stack React Architecture. more, see docs React Server Components. Server Actions Server Actions allow Client Components call async functions executed server. Server Action defined \"use server\" directive, framework automatically create reference server function, pass reference Client Component. function called client, React send request server execute function, return result. Server Actions created Server Components passed props Client Components, imported used Client Components. more, see docs React Server Actions. Improvements React 19 ref prop Starting React 19, access ref prop function components: function MyInput({placeholder, ref}) { return <input placeholder={placeholder} ref={ref} /> } //... <MyInput ref={ref} /> New function components longer need forwardRef , publishing codemod automatically update components use new ref prop. future versions deprecate remove forwardRef . Diffs hydration errors also improved error reporting hydration errors react-dom . example, instead logging multiple errors DEV without information mismatch: log single message diff mismatch: (typeof window !== 'undefined') . - Variable input Date.now() Math.random() changes time it\u2019s called. - Date formatting user\u2019s locale doesn\u2019t match server. - External changing data without sending snapshot along HTML. - Invalid HTML tag nesting. also happen client browser extension installed messes HTML React loaded. https://react.dev/link/hydration-mismatch <App> <span> + Client - Server throwOnHydrationMismatch \u2026<Context> provider React 19, render <Context> provider instead <Context.Provider> : const ThemeContext = createContext(''); function App({children}) { return ( <ThemeContext value=\"dark\"> {children} </ThemeContext> ); } New Context providers use <Context> publishing codemod convert existing providers. future versions deprecate <Context.Provider> . Cleanup functions refs support returning cleanup function ref callbacks: <input ref={(ref) => { // ref created // NEW: return cleanup function reset // ref element removed DOM. return () => { // ref cleanup }; }} /> component unmounts, React call cleanup function returned ref callback. works DOM refs, refs class components, useImperativeHandle . Due introduction ref cleanup functions, returning anything else ref callback rejected TypeScript. fix usually stop using implicit returns, example: - <div ref={current => (instance = current)} /> + <div ref={current => {instance = current}} /> original code returned instance HTMLDivElement TypeScript wouldn\u2019t know supposed cleanup function didn\u2019t want return cleanup function. codemod pattern no-implicit-ref-callback-return . useDeferredValue initial value We\u2019ve added initialValue option useDeferredValue : function Search({deferredValue}) { // initial render value ''. // re-render scheduled deferredValue. const value = useDeferredValue(deferredValue, ''); return ( <Results query={value} /> ); } initialValue provided, useDeferredValue return value initial render component, schedules re-render background deferredValue returned. more, see useDeferredValue . Support Document Metadata HTML, document metadata tags like <title> , <link> , <meta> reserved placement <head> section document. React, component decides metadata appropriate app may far place render <head> React render <head> all. past, elements would need inserted manually effect, libraries like react-helmet , required careful handling server rendering React application. React 19, we\u2019re adding support rendering document metadata tags components natively: function BlogPost({post}) { return ( <article> <h1>{post.title}</h1> <title>{post.title}</title> <meta name=\"author\" content=\"Josh\" /> <link rel=\"author\" href=\"https://twitter.com/joshcstory/\" /> <meta name=\"keywords\" content={post.keywords} /> <p> Eee equals em-see-squared... </p> </article> ); } React renders component, see <title> <link> <meta> tags, automatically hoist <head> section document. supporting metadata tags natively, we\u2019re able ensure work client-only apps, streaming SSR, Server Components. info, see docs <title> , <link> , <meta> . Support stylesheets Stylesheets, externally linked (<link rel=\"stylesheet\" href=\"...\"> ) inline (<style>...</style> ), require careful positioning DOM due style precedence rules. Building stylesheet capability allows composability within components hard, users often end either loading styles far components may depend them, use style library encapsulates complexity. React 19, we\u2019re addressing complexity providing even deeper integration Concurrent Rendering Client Streaming Rendering Server built support stylesheets. tell React precedence stylesheet manage insertion order stylesheet DOM ensure stylesheet (if external) loaded revealing content depends style rules. function ComponentOne() { return ( <Suspense fallback=\"loading...\"> <link rel=\"stylesheet\" href=\"foo\" precedence=\"default\" /> <link rel=\"stylesheet\" href=\"bar\" precedence=\"high\" /> <article class=\"foo-class bar-class\"> {...} </article> </Suspense> ) } function ComponentTwo() { return ( <div> <p>{...}</p> <link rel=\"stylesheet\" href=\"baz\" precedence=\"default\" /> <-- inserted foo & bar </div> ) } Server Side Rendering React include stylesheet <head> , ensures browser paint loaded. stylesheet discovered late we\u2019ve already started streaming, React ensure stylesheet inserted <head> client revealing content Suspense boundary depends stylesheet. Client Side Rendering React wait newly rendered stylesheets load committing render. render component multiple places within application React include stylesheet document: function App() { return <> <ComponentOne /> ... <ComponentOne /> // lead duplicate stylesheet link DOM </> } users accustomed loading stylesheets manually opportunity locate stylesheets alongside components depend allowing better local reasoning easier time ensuring load stylesheets actually depend on. Style libraries style integrations bundlers also adopt new capability even don\u2019t directly render stylesheets, still benefit tools upgraded use feature. details, read docs <link> <style> . Support async scripts HTML normal scripts (<script src=\"...\"> ) deferred scripts (<script defer=\"\" src=\"...\"> ) load document order makes rendering kinds scripts deep within component tree challenging. Async scripts (<script async=\"\" src=\"...\"> ) however load arbitrary order. React 19 we\u2019ve included better support async scripts allowing render anywhere component tree, inside components actually depend script, without manage relocating deduplicating script instances. function MyComponent() { return ( <div> <script async={true} src=\"...\" /> Hello World </div> ) } function App() { <html> <body> <MyComponent> ... <MyComponent> // lead duplicate script DOM </body> </html> } rendering environments, async scripts deduplicated React load execute script even rendered multiple different components. Server Side Rendering, async scripts included <head> prioritized behind critical resources block paint stylesheets, fonts, image preloads. details, read docs <script> . Support preloading resources initial document load client side updates, telling Browser resources likely need load early possible dramatic effect page performance. React 19 includes number new APIs loading preloading Browser resources make easy possible build great experiences aren\u2019t held back inefficient resource loading. import { prefetchDNS, preconnect, preload, preinit } 'react-dom' function MyComponent() { preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads executes script eagerly preload('https://.../path/to/font.woff', { as: 'font' }) // preloads font preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads stylesheet prefetchDNS('https://...') // may actually request anything host preconnect('https://...') // request something sure } <!-- would result following DOM/HTML --> <html> <head> <!-- links/scripts prioritized utility early loading, call order --> <link rel=\"prefetch-dns\" href=\"https://...\"> <link rel=\"preconnect\" href=\"https://...\"> <link rel=\"preload\" as=\"font\" href=\"https://.../path/to/font.woff\"> <link rel=\"preload\" as=\"style\" href=\"https://.../path/to/stylesheet.css\"> <script async=\"\" src=\"https://.../path/to/some/script.js\"></script> </head> <body> ... </body> </html> APIs used optimize initial page loads moving discovery additional resources like fonts stylesheet loading. also make client updates faster prefetching list resources used anticipated navigation eagerly preloading resources click even hover. details see Resource Preloading APIs. Compatibility third-party scripts extensions We\u2019ve improved hydration account third-party scripts browser extensions. hydrating, element renders client doesn\u2019t match element found HTML server, React force client re-render fix content. Previously, element inserted third-party scripts browser extensions, would trigger mismatch error client render. React 19, unexpected tags <head> <body> skipped over, avoiding mismatch errors. React needs re-render entire document due unrelated hydration mismatch, leave place stylesheets inserted third-party scripts browser extensions. Better error reporting improved error handling React 19 remove duplication provide options handling caught uncaught errors. example, there\u2019s error render caught Error Boundary, previously React would throw error twice (once original error, failing automatically recover), call console.error info error occurred. resulted three errors every caught error: React 19, log single error error information included: Additionally, we\u2019ve added two new root options complement onRecoverableError : onCaughtError : called React catches error Error Boundary.onUncaughtError : called error thrown caught Error Boundary.onRecoverableError : called error thrown automatically recovered. info examples, see docs createRoot hydrateRoot . Support Custom Elements React 19 adds full support custom elements passes tests Custom Elements Everywhere. past versions, using Custom Elements React difficult React treated unrecognized props attributes rather properties. React 19, we\u2019ve added support properties works client SSR following strategy: - Server Side Rendering: props passed custom element render attributes type primitive value like string ,number , value istrue . Props non-primitive types likeobject ,symbol ,function , valuefalse omitted. - Client Side Rendering: props match property Custom Element instance assigned properties, otherwise assigned attributes. Thanks Joey Arhar driving design implementation Custom Element support React. upgrade See React 19 Upgrade Guide step-by-step instructions full list breaking notable changes. Note: post originally published 04/25/2024 updated 12/05/2024 stable release."},
{"source": "https://react.dev/blog/2024/04/25/react-19-upgrade-guide", "title": "React 19 Upgrade Guide \u2013 React", "text": "React 19 Upgrade Guide April 25, 2024 Ricky Hanlon improvements added React 19 require breaking changes, we\u2019ve worked make upgrade smooth possible, don\u2019t expect changes impact apps. post, guide steps upgrading React 19: you\u2019d like help us test React 19, follow steps upgrade guide report issues encounter. list new features added React 19, see React 19 release post. Installing install latest version React React DOM: npm install --save-exact react@^19.0.0 react-dom@^19.0.0 Or, you\u2019re using Yarn: yarn add --exact react@^19.0.0 react-dom@^19.0.0 you\u2019re using TypeScript, also need update types. npm install --save-exact @types/react@^19.0.0 @types/react-dom@^19.0.0 Or, you\u2019re using Yarn: yarn add --exact @types/react@^19.0.0 @types/react-dom@^19.0.0 We\u2019re also including codemod common replacements. See TypeScript changes below. Codemods help upgrade, we\u2019ve worked team codemod.com publish codemods automatically update code many new APIs patterns React 19. codemods available react-codemod repo Codemod team joined helping maintain codemods. run codemods, recommend using codemod command instead react-codemod runs faster, handles complex code migrations, provides better support TypeScript. Changes include codemod include command below. list available codemods, see react-codemod repo. Breaking changes Errors render re-thrown previous versions React, errors thrown render caught rethrown. DEV, would also log console.error , resulting duplicate error logs. React 19, we\u2019ve improved errors handled reduce duplication re-throwing: - Uncaught Errors: Errors caught Error Boundary reported window.reportError . - Caught Errors: Errors caught Error Boundary reported console.error . change impact apps, production error reporting relies errors re-thrown, may need update error handling. support this, we\u2019ve added new methods createRoot hydrateRoot custom error handling: const root = createRoot(container, { onUncaughtError: (error, errorInfo) => { // ... log error report }, onCaughtError: (error, errorInfo) => { // ... log error report } }); info, see docs createRoot hydrateRoot . Removed deprecated React APIs Removed: propTypes defaultProps functions PropTypes deprecated April 2017 (v15.5.0). React 19, we\u2019re removing propType checks React package, using silently ignored. you\u2019re using propTypes , recommend migrating TypeScript another type-checking solution. We\u2019re also removing defaultProps function components place ES6 default parameters. Class components continue support defaultProps since ES6 alternative. // import PropTypes 'prop-types'; function Heading({text}) { return <h1>{text}</h1>; } Heading.propTypes = { text: PropTypes.string, }; Heading.defaultProps = { text: 'Hello, world!', }; // interface Props { text?: string; } function Heading({text = 'Hello, world!'}: Props) { return <h1>{text}</h1>; } Removed: Legacy Context using contextTypes getChildContext Legacy Context deprecated October 2018 (v16.6.0). Legacy Context available class components using APIs contextTypes getChildContext , replaced contextType due subtle bugs easy miss. React 19, we\u2019re removing Legacy Context make React slightly smaller faster. you\u2019re still using Legacy Context class components, you\u2019ll need migrate new contextType API: // import PropTypes 'prop-types'; class Parent extends React.Component { static childContextTypes = { foo: PropTypes.string.isRequired, }; getChildContext() { return { foo: 'bar' }; } render() { return <Child />; } } class Child extends React.Component { static contextTypes = { foo: PropTypes.string.isRequired, }; render() { return <div>{this.context.foo}</div>; } } // const FooContext = React.createContext(); class Parent extends React.Component { render() { return ( <FooContext value='bar'> <Child /> </FooContext> ); } } class Child extends React.Component { static contextType = FooContext; render() { return <div>{this.context}</div>; } } Removed: string refs String refs deprecated March, 2018 (v16.3.0). Class components supported string refs replaced ref callbacks due multiple downsides. React 19, we\u2019re removing string refs make React simpler easier understand. you\u2019re still using string refs class components, you\u2019ll need migrate ref callbacks: // class MyComponent extends React.Component { componentDidMount() { this.refs.input.focus(); } render() { return <input ref='input' />; } } // class MyComponent extends React.Component { componentDidMount() { this.input.focus(); } render() { return <input ref={input => this.input = input} />; } } Removed: Module pattern factories Module pattern factories deprecated August 2019 (v16.9.0). pattern rarely used supporting causes React slightly larger slower necessary. React 19, we\u2019re removing support module pattern factories, you\u2019ll need migrate regular functions: // function FactoryComponent() { return { render() { return <div />; } } } // function FactoryComponent() { return <div />; } Removed: React.createFactory createFactory deprecated February 2020 (v16.13.0). Using createFactory common broad support JSX, it\u2019s rarely used today replaced JSX. React 19, we\u2019re removing createFactory you\u2019ll need migrate JSX: // import { createFactory } 'react'; const button = createFactory('button'); // const button = <button />; Removed: react-test-renderer/shallow React 18, updated react-test-renderer/shallow re-export react-shallow-renderer. React 19, we\u2019re removing react-test-render/shallow prefer installing package directly: npm install react-shallow-renderer --save-dev - import ShallowRenderer 'react-test-renderer/shallow'; + import ShallowRenderer 'react-shallow-renderer'; Removed deprecated React DOM APIs Removed: react-dom/test-utils We\u2019ve moved act react-dom/test-utils react package: ReactDOMTestUtils.act deprecated favor React.act . Import act react instead react-dom/test-utils . See https://react.dev/warnings/react-dom-test-utils info.To fix warning, import act react : - import {act} 'react-dom/test-utils' + import {act} 'react'; test-utils functions removed. utilities uncommon, made easy depend low level implementation details components React. React 19, functions error called exports removed future version. See warning page alternatives. Removed: ReactDOM.render ReactDOM.render deprecated March 2022 (v18.0.0). React 19, we\u2019re removing ReactDOM.render you\u2019ll need migrate using ReactDOM.createRoot : // import {render} 'react-dom'; render(<App />, document.getElementById('root')); // import {createRoot} 'react-dom/client'; const root = createRoot(document.getElementById('root')); root.render(<App />); Removed: ReactDOM.hydrate ReactDOM.hydrate deprecated March 2022 (v18.0.0). React 19, we\u2019re removing ReactDOM.hydrate you\u2019ll need migrate using ReactDOM.hydrateRoot , // import {hydrate} 'react-dom'; hydrate(<App />, document.getElementById('root')); // import {hydrateRoot} 'react-dom/client'; hydrateRoot(document.getElementById('root'), <App />); Removed: unmountComponentAtNode ReactDOM.unmountComponentAtNode deprecated March 2022 (v18.0.0). React 19, you\u2019ll need migrate using root.unmount() . // unmountComponentAtNode(document.getElementById('root')); // root.unmount(); see root.unmount() createRoot hydrateRoot . Removed: ReactDOM.findDOMNode ReactDOM.findDOMNode deprecated October 2018 (v16.6.0). We\u2019re removing findDOMNode legacy escape hatch slow execute, fragile refactoring, returned first child, broke abstraction levels (see here). replace ReactDOM.findDOMNode DOM refs: // import {findDOMNode} 'react-dom'; function AutoselectingInput() { useEffect(() => { const input = findDOMNode(this); input.select() }, []); return <input defaultValue=\"Hello\" />; } // function AutoselectingInput() { const ref = useRef(null); useEffect(() => { ref.current.select(); }, []); return <input ref={ref} defaultValue=\"Hello\" /> } New deprecations Deprecated: element.ref React 19 supports ref prop, we\u2019re deprecating element.ref place element.props.ref . Accessing element.ref warn: Deprecated: react-test-renderer deprecating react-test-renderer implements renderer environment doesn\u2019t match environment users use, promotes testing implementation details, relies introspection React\u2019s internals. test renderer created viable testing strategies available like React Testing Library, recommend using modern testing library instead. React 19, react-test-renderer logs deprecation warning, switched concurrent rendering. recommend migrating tests @testing-library/react @testing-library/react-native modern well supported testing experience. Notable changes StrictMode changes React 19 includes several fixes improvements Strict Mode. double rendering Strict Mode development, useMemo useCallback reuse memoized results first render second render. Components already Strict Mode compatible notice difference behavior. Strict Mode behaviors, features designed proactively surface bugs components development fix shipped production. example, development, Strict Mode double-invoke ref callback functions initial mount, simulate happens mounted component replaced Suspense fallback. Improvements Suspense React 19, component suspends, React immediately commit fallback nearest Suspense boundary without waiting entire sibling tree render. fallback commits, React schedules another render suspended siblings \u201cpre-warm\u201d lazy requests rest tree: change means Suspense fallbacks display faster, still warming lazy requests suspended tree. UMD builds removed UMD widely used past convenient way load React without build step. Now, modern alternatives loading modules scripts HTML documents. Starting React 19, React longer produce UMD builds reduce complexity testing release process. load React 19 script tag, recommend using ESM-based CDN esm.sh. <script type=\"module\"> import React \"https://esm.sh/react@19/?dev\" import ReactDOMClient \"https://esm.sh/react-dom@19/client?dev\" ... </script> Libraries depending React internals may block upgrades release includes changes React internals may impact libraries ignore pleas use internals like SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED . changes necessary land improvements React 19, break libraries follow guidelines. Based Versioning Policy, updates listed breaking changes, including docs upgrade them. recommendation remove code depends internals. reflect impact using internals, renamed SECRET_INTERNALS suffix to: _DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE future aggressively block accessing internals React discourage usage ensure users blocked upgrading. TypeScript changes Removed deprecated TypeScript types We\u2019ve cleaned TypeScript types based removed APIs React 19. removed types moved relevant packages, others longer needed describe React\u2019s behavior. Check types-react-codemod list supported replacements. feel codemod missing, tracked list missing React 19 codemods. ref cleanups required change included react-19 codemod preset no-implicit-ref-callback-return . Due introduction ref cleanup functions, returning anything else ref callback rejected TypeScript. fix usually stop using implicit returns: - <div ref={current => (instance = current)} /> + <div ref={current => {instance = current}} /> original code returned instance HTMLDivElement TypeScript wouldn\u2019t know supposed cleanup function not. useRef requires argument change included react-19 codemod preset refobject-defaults . long-time complaint TypeScript React work useRef . We\u2019ve changed types useRef requires argument. significantly simplifies type signature. It\u2019ll behave like createContext . // @ts-expect-error: Expected 1 argument saw none useRef(); // Passes useRef(undefined); // @ts-expect-error: Expected 1 argument saw none createContext(); // Passes createContext(undefined); also means refs mutable. You\u2019ll longer hit issue can\u2019t mutate ref initialised null : const ref = useRef<number>(null); // Cannot assign 'current' read-only property ref.current = 1; MutableRef deprecated favor single RefObject type useRef always return: interface RefObject<T> { current: } declare function useRef<T>: RefObject<T> useRef still convenience overload useRef<T>(null) automatically returns RefObject<T | null> . ease migration due required argument useRef , convenience overload useRef(undefined) added automatically returns RefObject<T | undefined> . Check [RFC] Make refs mutable prior discussions change. Changes ReactElement TypeScript type change included react-element-default-any-props codemod. props React elements default unknown instead element typed ReactElement . affect pass type argument ReactElement : type Example2 = ReactElement<{ id: string }>[\"props\"]; // ^? { id: string } relied default, handle unknown : type Example = ReactElement[\"props\"]; // ^? Before, 'any', 'unknown' need lot legacy code relying unsound access element props. Element introspection exists escape hatch, make explicit props access unsound via explicit . JSX namespace TypeScript change included react-19 codemod preset scoped-jsx long-time request remove global JSX namespace types favor React.JSX . helps prevent pollution global types prevents conflicts different UI libraries leverage JSX. You\u2019ll need wrap module augmentation JSX namespace `declare module \u201d\u2026\u201d: // global.d.ts + declare module \"react\" { namespace JSX { interface IntrinsicElements { \"my-element\": { myElementProps: string; }; } } + } exact module specifier depends JSX runtime specified compilerOptions tsconfig.json : - \"jsx\": \"react-jsx\" would bereact/jsx-runtime . - \"jsx\": \"react-jsxdev\" would bereact/jsx-dev-runtime . - \"jsx\": \"react\" and\"jsx\": \"preserve\" would bereact . Better useReducer typings useReducer improved type inference thanks @mfp22. However, required breaking change useReducer doesn\u2019t accept full reducer type type parameter instead either needs none (and rely contextual typing) needs state action type. new best practice pass type arguments useReducer . - useReducer<React.Reducer<State, Action>>(reducer) + useReducer(reducer) may work edge cases explicitly type state action, passing Action tuple: - useReducer<React.Reducer<State, Action>>(reducer) + useReducer<State, [Action]>(reducer) define reducer inline, encourage annotate function parameters instead: - useReducer<React.Reducer<State, Action>>((state, action) => state) + useReducer((state: State, action: Action) => state) also you\u2019d also move reducer outside useReducer call: const reducer = (state: State, action: Action) => state; Changelog breaking changes - react-dom: Error javascript URLs src andhref #26507 - react-dom: Remove errorInfo.digest fromonRecoverableError #28222 - react-dom: Remove unstable_flushControlled #26397 - react-dom: Remove unstable_createEventHandle #28271 - react-dom: Remove unstable_renderSubtreeIntoContainer #28271 - react-dom: Remove unstable_runWithPriority #28271 - react-is: Remove deprecated methods react-is 28224 notable changes - react: Batch sync, default continuous lanes #25700 - react: Don\u2019t prerender siblings suspended component #26380 - react: Detect infinite update loops caused render phase updates #26625 - react-dom: Transitions popstate synchronous #26025 - react-dom: Remove layout effect warning SSR #26395 - react-dom: Warn don\u2019t set empty string src/href (except anchor tags) #28124 full list changes, please see Changelog. Thanks Andrew Clark, Eli White, Jack Pope, Jan Kassens, Josh Story, Matt Carroll, Noah Lemen, Sophie Alpert, Sebastian Silbermann reviewing editing post."},
{"source": "https://react.dev/blog/2024/05/22/react-conf-2024-recap", "title": "React Conf 2024 Recap \u2013 React", "text": "React Conf 2024 Recap May 22, 2024 Ricky Hanlon. Last week hosted React Conf 2024, two-day conference Henderson, Nevada 700+ attendees gathered in-person discuss latest UI engineering. first in-person conference since 2019, thrilled able bring community together again. React Conf 2024, announced React 19 RC, React Native New Architecture Beta, experimental release React Compiler. community also took stage announce React Router v7, Universal Server Components Expo Router, React Server Components RedwoodJS, much more. entire day 1 day 2 streams available online. post, we\u2019ll summarize talks announcements event. Day 1 Watch full day 1 stream here. kick day 1, Meta CTO Andrew \u201cBoz\u201d Bosworth shared welcome message followed introduction Seth Webster, manages React Org Meta, MC Ashley Narcisse. day 1 keynote, Joe Savona shared goals vision React make easy anyone build great user experiences. Lauren Tan followed State React, shared React downloaded 1 billion times 2023, 37% new developers learn program React. Finally, highlighted work React community make React, React. more, check talks community later conference: - Vanilla React Ryan Florence - React Rhythm & Blues Lee Robinson - RedwoodJS, React Server Components Amy Dutton - Introducing Universal React Server Components Expo Router Evan Bacon Next keynote, Josh Story Andrew Clark shared new features coming React 19, announced React 19 RC ready testing production. Check features React 19 release post, see talks deep dives new features: - What\u2019s new React 19 Lydia Hallie - React Unpacked: Roadmap React 19 Sam Selikoff - React 19 Deep Dive: Coordinating HTML Josh Story - Enhancing Forms React Server Components Aurora Walberg Scharff - React Two Computers Dan Abramov - Understand React Server Components Kent C. Dodds Finally, ended keynote Joe Savona, Sathya Gunasekaran, Mofei Zhang announcing React Compiler Open Source, sharing experimental version React Compiler try out. information using Compiler works, check docs talks: Watch full day 1 keynote here: Day 2 Watch full day 2 stream here. kick day 2, Seth Webster shared welcome message, followed Thank Eli White introduction Chief Vibes Officer Ashley Narcisse. day 2 keynote, Nicola Corti shared State React Native, including 78 million downloads 2023. also highlighted apps using React Native including 2000+ screens used inside Meta; product details page Facebook Marketplace, visited 2 billion times per day; part Microsoft Windows Start Menu features almost every Microsoft Office product across mobile desktop. Nicola also highlighted work community support React Native including libraries, frameworks, multiple platforms. more, check talks community: - Extending React Native beyond Mobile Desktop Apps Chris Traganos Anisha Malde - Spatial computing React Micha\u0142 Pierzcha\u0142a Riccardo Cipolleschi continued day 2 keynote announcing React Native New Architecture Beta ready apps adopt production. shared new features improvements new architecture, shared roadmap future React Native. check out: Next keynote, Nicola announced recommending starting framework like Expo new apps created React Native. change, also announced new React Native homepage new Getting Started docs. view new Getting Started guide React Native docs. Finally, end keynote, Kadi Kraman shared latest features improvements Expo, get started developing React Native using Expo. Watch full day 2 keynote here: Q&A React React Native teams also ended day Q&A session: - React Q&A hosted Michael Chan - React Native Q&A hosted Jamon Holmgren more\u2026 also heard talks accessibility, error reporting, css, more: - Demystifying accessibility React apps Kateryna Porshnieva - Pigment CSS, CSS server component age Olivier Tassinari - Real-time React Server Components Sunil Pai - Let\u2019s break React Rules Charlotte Isambert - Solve 100% errors Ryan Albrecht Thank Thank staff, speakers, participants made React Conf 2024 possible. many list, want thank particular. Thank Barbara Markiewicz, team Callstack, React Team Developer Advocate Matt Carroll helping plan entire event; Sunny Leggett everyone Zero Slope helping organize event. Thank Ashley Narcisse MC Chief Vibes Officer; Michael Chan Jamon Holmgren hosting Q&A sessions. Thank Seth Webster Eli White welcoming us day providing direction structure content; Tom Occhino joining us special message after-party. Thank Ricky Hanlon providing detailed feedback talks, working slide designs, generally filling gaps sweat details. Thank Callstack building conference website; Kadi Kraman Expo team building conference mobile app. Thank sponsors made event possible: Remix, Amazon, MUI, Sentry, Abbott, Expo, RedwoodJS, Vercel. Thank AV Team visuals, stage, sound; Westin Hotel hosting us. Thank speakers shared knowledge experiences community. Finally, thank everyone attended person online show makes React, React. React library, community, inspiring see everyone come together share learn together. See next time!"},
{"source": "https://react.dev/blog/2024/10/21/react-compiler-beta-release", "title": "React Compiler Beta Release \u2013 React", "text": "React Compiler Beta Release October 21, 2024 Lauren Tan. React team excited share new updates: - We\u2019re publishing React Compiler Beta today, early adopters library maintainers try provide feedback. - We\u2019re officially supporting React Compiler apps React 17+, optional react-compiler-runtime package. - We\u2019re opening public membership React Compiler Working Group prepare community gradual adoption compiler. React Conf 2024, announced experimental release React Compiler, build-time tool optimizes React app automatic memoization. find introduction React Compiler here. Since first release, we\u2019ve fixed numerous bugs reported React community, received several high quality bug fixes contributions1 compiler, made compiler resilient broad diversity JavaScript patterns, continued roll compiler widely Meta. post, want share what\u2019s next React Compiler. Try React Compiler Beta today React India 2024, shared update React Compiler. Today, excited announce new Beta release React Compiler ESLint plugin. New betas published npm using @beta tag. install React Compiler Beta: Or, you\u2019re using Yarn: watch Sathya Gunasekaran\u2019s talk React India here: recommend everyone use React Compiler linter today React Compiler\u2019s ESLint plugin helps developers proactively identify correct Rules React violations. strongly recommend everyone use linter today. linter require compiler installed, use independently, even ready try compiler. install linter only: Or, you\u2019re using Yarn: installation enable linter adding ESLint config. Using linter helps identify Rules React breakages, making easier adopt compiler it\u2019s fully released. Backwards Compatibility React Compiler produces code depends runtime APIs added React 19, we\u2019ve since added support compiler also work React 17 18. React 19 yet, Beta release try React Compiler specifying minimum target compiler config, adding react-compiler-runtime dependency. find docs here. Using React Compiler libraries initial release focused identifying major issues using compiler applications. We\u2019ve gotten great feedback substantially improved compiler since then. We\u2019re ready broad feedback community, library authors try compiler improve performance developer experience maintaining library. React Compiler also used compile libraries. React Compiler needs run original source code prior code transformations, possible application\u2019s build pipeline compile libraries use. Hence, recommendation library maintainers independently compile test libraries compiler, ship compiled code npm. code pre-compiled, users library need compiler enabled order benefit automatic memoization applied library. library targets apps yet React 19, specify minimum target add react-compiler-runtime direct dependency. runtime package use correct implementation APIs depending application\u2019s version, polyfill missing APIs necessary. find docs here. Opening React Compiler Working Group everyone previously announced invite-only React Compiler Working Group React Conf provide feedback, ask questions, collaborate compiler\u2019s experimental release. today, together Beta release React Compiler, opening Working Group membership everyone. goal React Compiler Working Group prepare ecosystem smooth, gradual adoption React Compiler existing applications libraries. Please continue file bug reports React repo, please leave feedback, ask questions, share ideas Working Group discussion forum. core team also use discussions repo share research findings. Stable Release gets closer, important information also posted forum. React Compiler Meta React Conf, shared rollout compiler Quest Store Instagram successful. Since then, we\u2019ve deployed React Compiler across several major web apps Meta, including Facebook Threads. means you\u2019ve used apps recently, may experience powered compiler. able onboard apps onto compiler code changes required, monorepo 100,000 React components. We\u2019ve seen notable performance improvements across apps. we\u2019ve rolled out, we\u2019re continuing see results order wins shared previously ReactConf. apps already heavily hand tuned optimized Meta engineers React experts years, even improvements order percent huge win us. also expected developer productivity wins React Compiler. measure this, collaborated data science partners Meta2 conduct thorough statistical analysis impact manual memoization productivity. rolling compiler Meta, discovered 8% React pull requests used manual memoization pull requests took 31-46% longer author3. confirmed intuition manual memoization introduces cognitive overhead, anticipate React Compiler lead efficient code authoring review. Notably, React Compiler also ensures code memoized default, (in case) 8% developers explicitly apply memoization. Roadmap Stable final roadmap, subject change. intend ship Release Candidate compiler near future following Beta release, majority apps libraries follow Rules React proven work well compiler. period final feedback community, plan Stable Release compiler. Stable Release mark beginning new foundation React, apps libraries strongly recommended use compiler ESLint plugin. - \u2705 Experimental: Released React Conf 2024, primarily feedback early adopters. - \u2705 Public Beta: Available today, feedback wider community. - \ud83d\udea7 Release Candidate (RC): React Compiler works majority rule-following apps libraries without issue. - \ud83d\udea7 General Availability: final feedback period community. releases also include compiler\u2019s ESLint plugin, surfaces diagnostics statically analyzed compiler. plan combine existing eslint-plugin-react-hooks plugin compiler\u2019s ESLint plugin, one plugin needs installed. Post-Stable, plan add compiler optimizations improvements. includes continual improvements automatic memoization, new optimizations altogether, minimal change product code. Upgrading new release compiler aimed straightforward, upgrade continue improve performance add better handling diverse JavaScript React patterns. Throughout process, also plan prototype IDE extension React. still early research, expect able share findings future React Labs blog post. Thanks Sathya Gunasekaran, Joe Savona, Ricky Hanlon, Alex Taylor, Jason Bonta, Eli White reviewing editing post. Footnotes - Thanks @nikeee, @henryqdineen, @TrickyPi, several others contributions compiler. \u21a9 - Thanks Vaishali Garg leading study React Compiler Meta, reviewing post. \u21a9 - controlling author tenure, diff length/complexity, potential confounding factors. \u21a9"},
{"source": "https://react.dev/blog/2024/12/05/react-19", "title": "React v19 \u2013 React", "text": "React v19 December 05, 2024 React Team React v19 available npm! React 19 Upgrade Guide, shared step-by-step instructions upgrading app React 19. post, we\u2019ll give overview new features React 19, adopt them. list breaking changes, see Upgrade Guide. What\u2019s new React 19 Actions common use case React apps perform data mutation update state response. example, user submits form change name, make API request, handle response. past, would need handle pending states, errors, optimistic updates, sequential requests manually. example, could handle pending error state useState : // Actions function UpdateName({}) { const [name, setName] = useState(\"\"); const [error, setError] = useState(null); const [isPending, setIsPending] = useState(false); const handleSubmit = async () => { setIsPending(true); const error = await updateName(name); setIsPending(false); (error) { setError(error); return; } redirect(\"/path\"); }; return ( <div> <input value={name} onChange={(event) => setName(event.target.value)} /> <button onClick={handleSubmit} disabled={isPending}> Update </button> {error && <p>{error}</p>} </div> ); } React 19, we\u2019re adding support using async functions transitions handle pending states, errors, forms, optimistic updates automatically. example, use useTransition handle pending state you: // Using pending state Actions function UpdateName({}) { const [name, setName] = useState(\"\"); const [error, setError] = useState(null); const [isPending, startTransition] = useTransition(); const handleSubmit = () => { startTransition(async () => { const error = await updateName(name); (error) { setError(error); return; } redirect(\"/path\"); }) }; return ( <div> <input value={name} onChange={(event) => setName(event.target.value)} /> <button onClick={handleSubmit} disabled={isPending}> Update </button> {error && <p>{error}</p>} </div> ); } async transition immediately set isPending state true, make async request(s), switch isPending false transitions. allows keep current UI responsive interactive data changing. Building top Actions, React 19 introduces useOptimistic manage optimistic updates, new hook React.useActionState handle common cases Actions. react-dom we\u2019re adding <form> Actions manage forms automatically useFormStatus support common cases Actions forms. React 19, example simplified to: // Using <form> Actions useActionState function ChangeName({ name, setName }) { const [error, submitAction, isPending] = useActionState( async (previousState, formData) => { const error = await updateName(formData.get(\"name\")); (error) { return error; } redirect(\"/path\"); return null; }, null, ); return ( <form action={submitAction}> <input type=\"text\" name=\"name\" /> <button type=\"submit\" disabled={isPending}>Update</button> {error && <p>{error}</p>} </form> ); } next section, we\u2019ll break new Action features React 19. New hook: useActionState make common cases easier Actions, we\u2019ve added new hook called useActionState : const [error, submitAction, isPending] = useActionState( async (previousState, newName) => { const error = await updateName(newName); (error) { // return result action. // Here, return error. return error; } // handle success return null; }, null, ); useActionState accepts function (the \u201cAction\u201d), returns wrapped Action call. works Actions compose. wrapped Action called, useActionState return last result Action data , pending state Action pending . information, see docs useActionState . React DOM: <form> Actions Actions also integrated React 19\u2019s new <form> features react-dom . We\u2019ve added support passing functions action formAction props <form> , <input> , <button> elements automatically submit forms Actions: <form action={actionFunction}> <form> Action succeeds, React automatically reset form uncontrolled components. need reset <form> manually, call new requestFormReset React DOM API. information, see react-dom docs <form> , <input> , <button> . React DOM: New hook: useFormStatus design systems, it\u2019s common write design components need access information <form> they\u2019re in, without drilling props component. done via Context, make common case easier, we\u2019ve added new hook useFormStatus : import {useFormStatus} 'react-dom'; function DesignButton() { const {pending} = useFormStatus(); return <button type=\"submit\" disabled={pending} /> } useFormStatus reads status parent <form> form Context provider. information, see react-dom docs useFormStatus . New hook: useOptimistic Another common UI pattern performing data mutation show final state optimistically async request underway. React 19, we\u2019re adding new hook called useOptimistic make easier: function ChangeName({currentName, onUpdateName}) { const [optimisticName, setOptimisticName] = useOptimistic(currentName); const submitAction = async formData => { const newName = formData.get(\"name\"); setOptimisticName(newName); const updatedName = await updateName(newName); onUpdateName(updatedName); }; return ( <form action={submitAction}> <p>Your name is: {optimisticName}</p> <p> <label>Change Name:</label> <input type=\"text\" name=\"name\" disabled={currentName !== optimisticName} /> </p> </form> ); } useOptimistic hook immediately render optimisticName updateName request progress. update finishes errors, React automatically switch back currentName value. information, see docs useOptimistic . New API: use React 19 we\u2019re introducing new API read resources render: use . example, read promise use , React Suspend promise resolves: import {use} 'react'; function Comments({commentsPromise}) { // `use` suspend promise resolves. const comments = use(commentsPromise); return comments.map(comment => <p key={comment.id}>{comment}</p>); } function Page({commentsPromise}) { // `use` suspends Comments, // Suspense boundary shown. return ( <Suspense fallback={<div>Loading...</div>}> <Comments commentsPromise={commentsPromise} /> </Suspense> ) } also read context use , allowing read Context conditionally early returns: import {use} 'react'; import ThemeContext './ThemeContext' function Heading({children}) { (children == null) { return null; } // would work useContext // early return. const theme = use(ThemeContext); return ( <h1 style={{color: theme.color}}> {children} </h1> ); } use API called render, similar hooks. Unlike hooks, use called conditionally. future plan support ways consume resources render use . information, see docs use . New React DOM Static APIs We\u2019ve added two new APIs react-dom/static static site generation: new APIs improve renderToString waiting data load static HTML generation. designed work streaming environments like Node.js Streams Web Streams. example, Web Stream environment, prerender React tree static HTML prerender : import { prerender } 'react-dom/static'; async function handler(request) { const {prelude} = await prerender(<App />, { bootstrapScripts: ['/main.js'] }); return new Response(prelude, { headers: { 'content-type': 'text/html' }, }); } Prerender APIs wait data load returning static HTML stream. Streams converted strings, sent streaming response. support streaming content loads, supported existing React DOM server rendering APIs. information, see React DOM Static APIs. React Server Components Server Components Server Components new option allows rendering components ahead time, bundling, environment separate client application SSR server. separate environment \u201cserver\u201d React Server Components. Server Components run build time CI server, run request using web server. React 19 includes React Server Components features included Canary channel. means libraries ship Server Components target React 19 peer dependency react-server export condition use frameworks support Full-stack React Architecture. more, see docs React Server Components. Server Actions Server Actions allow Client Components call async functions executed server. Server Action defined \"use server\" directive, framework automatically create reference server function, pass reference Client Component. function called client, React send request server execute function, return result. Server Actions created Server Components passed props Client Components, imported used Client Components. more, see docs React Server Actions. Improvements React 19 ref prop Starting React 19, access ref prop function components: function MyInput({placeholder, ref}) { return <input placeholder={placeholder} ref={ref} /> } //... <MyInput ref={ref} /> New function components longer need forwardRef , publishing codemod automatically update components use new ref prop. future versions deprecate remove forwardRef . Diffs hydration errors also improved error reporting hydration errors react-dom . example, instead logging multiple errors DEV without information mismatch: log single message diff mismatch: (typeof window !== 'undefined') . - Variable input Date.now() Math.random() changes time it\u2019s called. - Date formatting user\u2019s locale doesn\u2019t match server. - External changing data without sending snapshot along HTML. - Invalid HTML tag nesting. also happen client browser extension installed messes HTML React loaded. https://react.dev/link/hydration-mismatch <App> <span> + Client - Server throwOnHydrationMismatch \u2026<Context> provider React 19, render <Context> provider instead <Context.Provider> : const ThemeContext = createContext(''); function App({children}) { return ( <ThemeContext value=\"dark\"> {children} </ThemeContext> ); } New Context providers use <Context> publishing codemod convert existing providers. future versions deprecate <Context.Provider> . Cleanup functions refs support returning cleanup function ref callbacks: <input ref={(ref) => { // ref created // NEW: return cleanup function reset // ref element removed DOM. return () => { // ref cleanup }; }} /> component unmounts, React call cleanup function returned ref callback. works DOM refs, refs class components, useImperativeHandle . Due introduction ref cleanup functions, returning anything else ref callback rejected TypeScript. fix usually stop using implicit returns, example: - <div ref={current => (instance = current)} /> + <div ref={current => {instance = current}} /> original code returned instance HTMLDivElement TypeScript wouldn\u2019t know supposed cleanup function didn\u2019t want return cleanup function. codemod pattern no-implicit-ref-callback-return . useDeferredValue initial value We\u2019ve added initialValue option useDeferredValue : function Search({deferredValue}) { // initial render value ''. // re-render scheduled deferredValue. const value = useDeferredValue(deferredValue, ''); return ( <Results query={value} /> ); } initialValue provided, useDeferredValue return value initial render component, schedules re-render background deferredValue returned. more, see useDeferredValue . Support Document Metadata HTML, document metadata tags like <title> , <link> , <meta> reserved placement <head> section document. React, component decides metadata appropriate app may far place render <head> React render <head> all. past, elements would need inserted manually effect, libraries like react-helmet , required careful handling server rendering React application. React 19, we\u2019re adding support rendering document metadata tags components natively: function BlogPost({post}) { return ( <article> <h1>{post.title}</h1> <title>{post.title}</title> <meta name=\"author\" content=\"Josh\" /> <link rel=\"author\" href=\"https://twitter.com/joshcstory/\" /> <meta name=\"keywords\" content={post.keywords} /> <p> Eee equals em-see-squared... </p> </article> ); } React renders component, see <title> <link> <meta> tags, automatically hoist <head> section document. supporting metadata tags natively, we\u2019re able ensure work client-only apps, streaming SSR, Server Components. info, see docs <title> , <link> , <meta> . Support stylesheets Stylesheets, externally linked (<link rel=\"stylesheet\" href=\"...\"> ) inline (<style>...</style> ), require careful positioning DOM due style precedence rules. Building stylesheet capability allows composability within components hard, users often end either loading styles far components may depend them, use style library encapsulates complexity. React 19, we\u2019re addressing complexity providing even deeper integration Concurrent Rendering Client Streaming Rendering Server built support stylesheets. tell React precedence stylesheet manage insertion order stylesheet DOM ensure stylesheet (if external) loaded revealing content depends style rules. function ComponentOne() { return ( <Suspense fallback=\"loading...\"> <link rel=\"stylesheet\" href=\"foo\" precedence=\"default\" /> <link rel=\"stylesheet\" href=\"bar\" precedence=\"high\" /> <article class=\"foo-class bar-class\"> {...} </article> </Suspense> ) } function ComponentTwo() { return ( <div> <p>{...}</p> <link rel=\"stylesheet\" href=\"baz\" precedence=\"default\" /> <-- inserted foo & bar </div> ) } Server Side Rendering React include stylesheet <head> , ensures browser paint loaded. stylesheet discovered late we\u2019ve already started streaming, React ensure stylesheet inserted <head> client revealing content Suspense boundary depends stylesheet. Client Side Rendering React wait newly rendered stylesheets load committing render. render component multiple places within application React include stylesheet document: function App() { return <> <ComponentOne /> ... <ComponentOne /> // lead duplicate stylesheet link DOM </> } users accustomed loading stylesheets manually opportunity locate stylesheets alongside components depend allowing better local reasoning easier time ensuring load stylesheets actually depend on. Style libraries style integrations bundlers also adopt new capability even don\u2019t directly render stylesheets, still benefit tools upgraded use feature. details, read docs <link> <style> . Support async scripts HTML normal scripts (<script src=\"...\"> ) deferred scripts (<script defer=\"\" src=\"...\"> ) load document order makes rendering kinds scripts deep within component tree challenging. Async scripts (<script async=\"\" src=\"...\"> ) however load arbitrary order. React 19 we\u2019ve included better support async scripts allowing render anywhere component tree, inside components actually depend script, without manage relocating deduplicating script instances. function MyComponent() { return ( <div> <script async={true} src=\"...\" /> Hello World </div> ) } function App() { <html> <body> <MyComponent> ... <MyComponent> // lead duplicate script DOM </body> </html> } rendering environments, async scripts deduplicated React load execute script even rendered multiple different components. Server Side Rendering, async scripts included <head> prioritized behind critical resources block paint stylesheets, fonts, image preloads. details, read docs <script> . Support preloading resources initial document load client side updates, telling Browser resources likely need load early possible dramatic effect page performance. React 19 includes number new APIs loading preloading Browser resources make easy possible build great experiences aren\u2019t held back inefficient resource loading. import { prefetchDNS, preconnect, preload, preinit } 'react-dom' function MyComponent() { preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads executes script eagerly preload('https://.../path/to/font.woff', { as: 'font' }) // preloads font preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads stylesheet prefetchDNS('https://...') // may actually request anything host preconnect('https://...') // request something sure } <!-- would result following DOM/HTML --> <html> <head> <!-- links/scripts prioritized utility early loading, call order --> <link rel=\"prefetch-dns\" href=\"https://...\"> <link rel=\"preconnect\" href=\"https://...\"> <link rel=\"preload\" as=\"font\" href=\"https://.../path/to/font.woff\"> <link rel=\"preload\" as=\"style\" href=\"https://.../path/to/stylesheet.css\"> <script async=\"\" src=\"https://.../path/to/some/script.js\"></script> </head> <body> ... </body> </html> APIs used optimize initial page loads moving discovery additional resources like fonts stylesheet loading. also make client updates faster prefetching list resources used anticipated navigation eagerly preloading resources click even hover. details see Resource Preloading APIs. Compatibility third-party scripts extensions We\u2019ve improved hydration account third-party scripts browser extensions. hydrating, element renders client doesn\u2019t match element found HTML server, React force client re-render fix content. Previously, element inserted third-party scripts browser extensions, would trigger mismatch error client render. React 19, unexpected tags <head> <body> skipped over, avoiding mismatch errors. React needs re-render entire document due unrelated hydration mismatch, leave place stylesheets inserted third-party scripts browser extensions. Better error reporting improved error handling React 19 remove duplication provide options handling caught uncaught errors. example, there\u2019s error render caught Error Boundary, previously React would throw error twice (once original error, failing automatically recover), call console.error info error occurred. resulted three errors every caught error: React 19, log single error error information included: Additionally, we\u2019ve added two new root options complement onRecoverableError : onCaughtError : called React catches error Error Boundary.onUncaughtError : called error thrown caught Error Boundary.onRecoverableError : called error thrown automatically recovered. info examples, see docs createRoot hydrateRoot . Support Custom Elements React 19 adds full support custom elements passes tests Custom Elements Everywhere. past versions, using Custom Elements React difficult React treated unrecognized props attributes rather properties. React 19, we\u2019ve added support properties works client SSR following strategy: - Server Side Rendering: props passed custom element render attributes type primitive value like string ,number , value istrue . Props non-primitive types likeobject ,symbol ,function , valuefalse omitted. - Client Side Rendering: props match property Custom Element instance assigned properties, otherwise assigned attributes. Thanks Joey Arhar driving design implementation Custom Element support React. upgrade See React 19 Upgrade Guide step-by-step instructions full list breaking notable changes. Note: post originally published 04/25/2024 updated 12/05/2024 stable release."}]